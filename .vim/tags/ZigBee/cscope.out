cscope 15 $HOME/share/C51RF-CC2530-PKÊó†Á∫øZigBeeÁΩëÁªúÂºÄÂèëÂπ≥Âè∞V1.10/C51RF-CC2530ÊºîÁ§∫Á®ãÂ∫è/ZigBee2007_PROÊºîÁ§∫ÊµãËØïÁ®ãÂ∫è/Texas-Instruments/ZStack-CC2530-2.2.0-1.3.0 -q 0000012504 0001678502
	@Components/hal/common/hal_assert.c

45 
	~"hÆ_as£π.h
"

46 
	~"hÆ_ty≥s.h
"

47 
	~"hÆ_bﬂrd.h
"

48 
	~"hÆ_defs.h
"

49 
	~"hÆ_mcu.h
"

51 #i‚de‡
HAL_ONLY_BUILD


53 
	~"mac_rx.h
"

54 
	~"mac_tx.h
"

61 
hÆAs£πHaz¨dLights
();

74 
	$hÆAs£πH™dÀr
()

77 #ifde‡
ASSERT_RESET


78 
	`HAL_SYSTEM_RESET
();

80 
	`hÆAs£πHaz¨dLights
();

83 
	}
}

96 
	$hÆAs£πHaz¨dLights
()

100 
DEBUG_DATA_RSTACK_HIGH_OFS
,

101 
DEBUG_DATA_RSTACK_LOW_OFS
,

102 
DEBUG_DATA_TX_ACTIVE_OFS
,

103 
DEBUG_DATA_RX_ACTIVE_OFS
,

105 #i‡(
deföed
 
HAL_MCU_AVR
Ë|| (deföed 
HAL_MCU_CC2430
)

106 
DEBUG_DATA_INT_MASK_OFS
,

107 #ñi‡(
deföed
 
HAL_MCU_CC2530
)

108 
DEBUG_DATA_INT_MASK0_OFS
,

109 
DEBUG_DATA_INT_MASK1_OFS
,

112 
DEBUG_DATA_SIZE


115 
uöt8
 
buâ⁄Hñd
;

116 
uöt8
 
debugD©a
[
DEBUG_DATA_SIZE
];

119 
	`HAL_DISABLE_INTERRUPTS
();

124 
	`HAL_BOARD_INIT
();

126 
	`HAL_TURN_OFF_LED1
();

127 
	`HAL_TURN_OFF_LED2
();

128 
	`HAL_TURN_OFF_LED3
();

129 
	`HAL_TURN_OFF_LED4
();

136 
buâ⁄Hñd
 = 0;

143 
	`HAL_LED_BLINK_DELAY
();

146 #i‡(
HAL_NUM_LEDS
 >= 1)

147 
	`HAL_TOGGLE_LED1
();

148 #i‡(
HAL_NUM_LEDS
 >= 2)

149 
	`HAL_TOGGLE_LED2
();

150 #i‡(
HAL_NUM_LEDS
 >= 3)

151 
	`HAL_TOGGLE_LED3
();

152 #i‡(
HAL_NUM_LEDS
 >= 4)

153 
	`HAL_TOGGLE_LED4
();

161 
uöt8
 
esˇ≥
 = 0;

162 i‡(
esˇ≥
)

164 
esˇ≥
 = 0;

170 i‡(
	`HAL_PUSH_BUTTON1
())

172 
buâ⁄Hñd
++;

176 
buâ⁄Hñd
 = 0;

179 
buâ⁄Hñd
 != 10);

186 
	`HAL_TURN_OFF_LED1
();

187 
	`HAL_TURN_OFF_LED2
();

188 
	`HAL_TURN_OFF_LED3
();

189 
	`HAL_TURN_OFF_LED4
();

192 
	`HAL_DEBOUNCE
(!
	`HAL_PUSH_BUTTON1
());

197 #ifde‡
HAL_MCU_AVR


199 
uöt8
 * 
pSèck
;

200 
pSèck
 = (
uöt8
 *Ë
SP
;

201 
pSèck
++;

202 
debugD©a
[
DEBUG_DATA_RSTACK_HIGH_OFS
] = *
pSèck
;

203 
pSèck
++;

204 
debugD©a
[
DEBUG_DATA_RSTACK_LOW_OFS
] = *
pSèck
;

206 
debugD©a
[
DEBUG_DATA_INT_MASK_OFS
] = 
EIMSK
;

209 #i‡(
deföed
 
HAL_MCU_CC2430
)

210 
debugD©a
[
DEBUG_DATA_INT_MASK_OFS
] = 
RFIM
;

211 #ñi‡(
deföed
 
HAL_MCU_CC2530
)

212 
debugD©a
[
DEBUG_DATA_INT_MASK0_OFS
] = 
RFIRQM0
;

213 
debugD©a
[
DEBUG_DATA_INT_MASK1_OFS
] = 
RFIRQM1
;

217 #i‚de‡
HAL_ONLY_BUILD


218 
debugD©a
[
DEBUG_DATA_TX_ACTIVE_OFS
] = 
macTxA˘ive
;

219 
debugD©a
[
DEBUG_DATA_RX_ACTIVE_OFS
] = 
macRxA˘ive
;

224 
uöt8
 
iBô
;

225 
uöt8
 
iByã
;

227 
iBô
 = 0;

228 
iByã
 = 0;

233 
iByã
 < 
DEBUG_DATA_SIZE
)

236 !
	`HAL_PUSH_BUTTON1
());

239 
	`HAL_TURN_ON_LED1
();

240 
	`HAL_TURN_ON_LED2
();

241 
	`HAL_TURN_ON_LED3
();

242 i‡(
iBô
 == 0)

244 
	`HAL_TURN_ON_LED4
();

248 
	`HAL_TURN_OFF_LED4
();

252 
	`HAL_DEBOUNCE
(!
	`HAL_PUSH_BUTTON1
());

255 
	`HAL_TURN_OFF_LED1
();

256 
	`HAL_TURN_OFF_LED2
();

257 
	`HAL_TURN_OFF_LED3
();

258 
	`HAL_TURN_OFF_LED4
();

261 i‡(
debugD©a
[
iByã
] & (1 << (7 - 
iBô
)))

263 
	`HAL_TURN_ON_LED1
();

267 
	`HAL_TURN_OFF_LED1
();

271 
iBô
++;

272 i‡(
iBô
 == 8)

274 
iBô
 = 0;

275 
iByã
++;

285 
	`HAL_TURN_OFF_LED1
();

287 
	}
}

296 
HAL_ASSERT_SIZE
–
öt8
, 1);

297 
HAL_ASSERT_SIZE
–
uöt8
, 1);

298 
HAL_ASSERT_SIZE
–
öt16
, 2);

299 
HAL_ASSERT_SIZE
(
uöt16
, 2);

300 
HAL_ASSERT_SIZE
–
öt32
, 4);

301 
HAL_ASSERT_SIZE
(
uöt32
, 4);

	@Components/hal/common/hal_drivers.c

44 
	~"hÆ_ty≥s.h
"

45 
	~"OSAL.h
"

46 
	~"hÆ_drivîs.h
"

47 
	~"hÆ_adc.h
"

48 #i‡(
deföed
 
HAL_DMA
Ë&& (HAL_DMA =
TRUE
)

49 
	~"hÆ_dma.h
"

51 
	~"hÆ_Êash.h
"

52 
	~"hÆ_key.h
"

53 
	~"hÆ_lcd.h
"

54 
	~"hÆ_Àd.h
"

55 
	~"hÆ_timî.h
"

56 
	~"hÆ_u¨t.h
"

57 
	~"hÆ_¶ìp.h
"

58 #i‡(
deföed
 
HAL_AES
Ë&& (HAL_AES =
TRUE
)

59 
	~"hÆ_´s.h
"

62 #i‡(
deföed
 
HAL_SPI
Ë&& (HAL_SPI =
TRUE
)

63 
	~"hÆ_•i.h
"

85 
uöt8
 
	gHÆ_TaskID
;

87 
HÆLedUpd©e
( );

102 
	$HÆ_Inô
–
uöt8
 
èsk_id
 )

105 
HÆ_TaskID
 = 
èsk_id
;

106 
	}
}

117 
	$HÆDrivîInô
 ()

120 #i‡(
deföed
 
HAL_TIMER
Ë&& (HAL_TIMER =
TRUE
)

121 
	`HÆTimîInô
();

125 #i‡(
deföed
 
HAL_ADC
Ë&& (HAL_ADC =
TRUE
)

126 
	`HÆAdcInô
();

130 #i‡(
deföed
 
HAL_DMA
Ë&& (HAL_DMA =
TRUE
)

132 
	`HÆDmaInô
();

136 #i‡(
deföed
 
HAL_FLASH
Ë&& (HAL_FLASH =
TRUE
)

138 
	`HÆFœshInô
();

142 #i‡(
deföed
 
HAL_AES
Ë&& (HAL_AES =
TRUE
)

143 
	`HÆAesInô
();

148 #i‡(
deföed
 
HAL_LED
Ë&& (HAL_LED =
TRUE
)

149 
	`HÆLedInô
();

153 #i‡(
deföed
 
HAL_UART
Ë&& (HAL_UART =
TRUE
)

154 
	`HÆUARTInô
();

158 #i‡(
deföed
 
HAL_KEY
Ë&& (HAL_KEY =
TRUE
)

159 
	`HÆKeyInô
();

163 #i‡(
deföed
 
HAL_SPI
Ë&& (HAL_SPI =
TRUE
)

164 
	`HÆSpiInô
();

167 #i‡(
deföed
 
HAL_LCD
Ë&& (HAL_LCD =
TRUE
)

168 
	`HÆLcdInô
();

171 
	}
}

184 
uöt16
 
	$HÆ_Pro˚ssEvít
–
uöt8
 
èsk_id
, 
uöt16
 
evíts
 )

186 
uöt8
 *
msgPå
;

188 ()
èsk_id
;

190 i‡–
evíts
 & 
SYS_EVENT_MSG
 )

192 
msgPå
 = 
	`oßl_msg_ª˚ive
(
HÆ_TaskID
);

194 
msgPå
)

199 
	`oßl_msg_dóŒoˇã
–
msgPå
 );

201 
msgPå
 = 
	`oßl_msg_ª˚ive
–
HÆ_TaskID
 );

203  
evíts
 ^ 
SYS_EVENT_MSG
;

206 i‡–
evíts
 & 
HAL_LED_BLINK_EVENT
 )

208 #i‡(
	`deföed
 (
BLINK_LEDS
)Ë&& (
HAL_LED
 =
TRUE
)

209 
	`HÆLedUpd©e
();

211  
evíts
 ^ 
HAL_LED_BLINK_EVENT
;

214 i‡(
evíts
 & 
HAL_KEY_EVENT
)

217 #i‡(
deföed
 
HAL_KEY
Ë&& (HAL_KEY =
TRUE
)

219 
	`HÆKeyPﬁl
();

222 i‡(!
HÆ_KeyI¡E«bÀ
)

224 
	`oßl_°¨t_timîEx
–
HÆ_TaskID
, 
HAL_KEY_EVENT
, 100);

228  
evíts
 ^ 
HAL_KEY_EVENT
;

231 #ifde‡
POWER_SAVING


232 i‡–
evíts
 & 
HAL_SLEEP_TIMER_EVENT
 )

234 
	`hÆRe°‹eSÀïLevñ
();

235  
evíts
 ^ 
HAL_SLEEP_TIMER_EVENT
;

242 
	}
}

253 
	$HÆ_Pro˚ssPﬁl
 ()

257 #i‡(
deföed
 
HAL_TIMER
Ë&& (HAL_TIMER =
TRUE
)

258 
	`HÆTimîTick
();

262 #i‡(
deföed
 
HAL_UART
Ë&& (HAL_UART =
TRUE
)

263 
	`HÆUARTPﬁl
();

266 
	}
}

	@Components/hal/include/hal_adc.h

40 #i‚de‡
HAL_ADC_H


41 
	#HAL_ADC_H


	)

43 #ifde‡
__˝lu•lus


51 
	~"hÆ_bﬂrd.h
"

64 
	#HAL_ADC_RESOLUTION_8
 0x01

	)

65 
	#HAL_ADC_RESOLUTION_10
 0x02

	)

66 
	#HAL_ADC_RESOLUTION_12
 0x03

	)

67 
	#HAL_ADC_RESOLUTION_14
 0x04

	)

70 
	#HAL_ADC_CHANNEL_0
 0x00

	)

71 
	#HAL_ADC_CHANNEL_1
 0x01

	)

72 
	#HAL_ADC_CHANNEL_2
 0x02

	)

73 
	#HAL_ADC_CHANNEL_3
 0x03

	)

74 
	#HAL_ADC_CHANNEL_4
 0x04

	)

75 
	#HAL_ADC_CHANNEL_5
 0x05

	)

76 
	#HAL_ADC_CHANNEL_6
 0x06

	)

77 
	#HAL_ADC_CHANNEL_7
 0x07

	)

79 
	#HAL_ADC_CHANNEL_TEMP
 0x0E

	)

80 
	#HAL_ADC_CHANNEL_VDD
 0x0F

	)

83 
	#HAL_ADC_VDD_LIMIT_0
 0x00

	)

84 
	#HAL_ADC_VDD_LIMIT_1
 0x01

	)

85 
	#HAL_ADC_VDD_LIMIT_2
 0x02

	)

86 
	#HAL_ADC_VDD_LIMIT_3
 0x03

	)

87 
	#HAL_ADC_VDD_LIMIT_4
 0x04

	)

88 
	#HAL_ADC_VDD_LIMIT_5
 0x05

	)

89 
	#HAL_ADC_VDD_LIMIT_6
 0x06

	)

90 
	#HAL_ADC_VDD_LIMIT_7
 0x07

	)

110 
HÆAdcInô
 ( );

115 
uöt16
 
HÆAdcRód
 ( 
uöt8
 
ch™√l
, uöt8 
ªsﬁuti⁄
 );

121 #ifde‡
__˝lu•lus


	@Components/hal/include/hal_assert.h

40 #i‚de‡
HAL_ASSERT_H


41 
	#HAL_ASSERT_H


	)

67 #ifde‡
HALNODEBUG


68 
	#HAL_ASSERT
(
ex¥
)

	)

69 
	#HAL_ASSERT_FORCED
()

	)

70 
	#HAL_ASSERT_STATEMENT
(
°©emít
)

	)

71 
	#HAL_ASSERT_DECLARATION
(
de˛¨©i⁄
)

	)

73 
	#HAL_ASSERT
(
ex¥
Ë
	`°
–i‡(!–ex¥ )Ë
	`hÆAs£πH™dÀr
(); )

	)

74 
	#HAL_ASSERT_FORCED
(Ë
	`hÆAs£πH™dÀr
()

	)

75 
	#HAL_ASSERT_STATEMENT
(
°©emít
Ë
	`°
–°©emíà)

	)

76 
	#HAL_ASSERT_DECLARATION
(
de˛¨©i⁄
Ë
	)
declaration

91 
	#HAL_ASSERT_SIZE
(
x
,
y
Ë
	tx
 ## 
	t_as£π_size_t
[-1+10*((xË=(y))]

	)

98 
	thÆAs£πH™dÀr
();

109 
hÆAs£πHaz¨dLights
();

	@Components/hal/include/hal_board.h

1 
	~"hÆ_bﬂrd_cfg.h
"

	@Components/hal/include/hal_ccm.h

40 #i‚de‡ 
HAL_CCM_H_


41 
	#HAL_CCM_H_


	)

43 
Sètus_t
 
SSP_CCM_Auth
 (
uöt8
, uöt8 *, uöt8 *, 
uöt16
, uint8 *, uint16, uint8 *, uint8 *);

44 
Sètus_t
 
SSP_CCM_En¸y±
 (
uöt8
, uöt8 *, uöt8 *, 
uöt16
, uint8 *, uint8 *);

45 
Sètus_t
 
SSP_CCM_De¸y±
 (
uöt8
, uöt8 *, uöt8 *, 
uöt16
, uint8 *, uint8 *);

46 
Sètus_t
 
SSP_CCM_InvAuth
 (
uöt8
, uöt8 *, uöt8 *, 
uöt16
, uint8 *, uint16, uint8 *, uint8 *);

	@Components/hal/include/hal_defs.h

40 #i‚de‡
HAL_DEFS_H


41 
	#HAL_DEFS_H


	)

49 #i‚de‡
BV


50 
	#BV
(
n
Ë(1 << (n))

	)

53 #i‚de‡
BF


54 
	#BF
(
x
,
b
,
s
Ë(((xË& (b)Ë>> (s))

	)

57 #i‚de‡
MIN


58 
	#MIN
(
n
,
m
Ë((“Ë< (m)Ë? (nË: (m))

	)

61 #i‚de‡
MAX


62 
	#MAX
(
n
,
m
Ë((“Ë< (m)Ë? (mË: (n))

	)

65 #i‚de‡
ABS


66 
	#ABS
(
n
Ë((“Ë< 0Ë? -“Ë: (n))

	)

71 
	#BREAK_UINT32
–
v¨
, 
ByãNum
 ) \

	)

72 (
	guöt8
)((
	guöt32
)(((
	gv¨
Ë>>((
	gByãNum
) * 8)) & 0x00FF))

74 
	#BUILD_UINT32
(
Byã0
, 
Byã1
, 
Byã2
, 
Byã3
Ë\

	)

75 ((
	guöt32
)((uöt32)((
	gByã0
) & 0x00FF) \

76 + ((
	guöt32
)((
	gByã1
) & 0x00FF) << 8) \

77 + ((
	guöt32
)((
	gByã2
) & 0x00FF) << 16) \

78 + ((
	guöt32
)((
	gByã3
) & 0x00FF) << 24)))

80 
	#BUILD_UINT16
(
loByã
, 
hiByã
Ë\

	)

81 ((
	guöt16
)(((
	gloByã
Ë& 0x00FFË+ (((
	ghiByã
) & 0x00FF) << 8)))

83 
	#HI_UINT16
(
a
Ë((◊Ë>> 8Ë& 0xFF)

	)

84 
	#LO_UINT16
(
a
Ë(◊Ë& 0xFF)

	)

86 
	#BUILD_UINT8
(
hiByã
, 
loByã
Ë\

	)

87 ((
	guöt8
)(((
	gloByã
Ë& 0x0FË+ (((
	ghiByã
) & 0x0F) << 4)))

89 
	#HI_UINT8
(
a
Ë((◊Ë>> 4Ë& 0x0F)

	)

90 
	#LO_UINT8
(
a
Ë(◊Ë& 0x0F)

	)

115 
	#°
(
x
Ëdÿ{ x } 
__LINE__
 =-1)

	)

	@Components/hal/include/hal_drivers.h

40 #i‚de‡
HAL_DRIVER_H


41 
	#HAL_DRIVER_H


	)

43 #ifde‡
__˝lu•lus


62 
	#HAL_KEY_EVENT
 0x0001

	)

63 
	#HAL_LED_BLINK_EVENT
 0x0002

	)

64 
	#HAL_SLEEP_TIMER_EVENT
 0x0004

	)

74 
uöt8
 
HÆ_TaskID
;

83 
HÆ_Inô
 ( 
uöt8
 
èsk_id
 );

88 
uöt16
 
HÆ_Pro˚ssEvít
 ( 
uöt8
 
èsk_id
, uöt16 
evíts
 );

93 
HÆ_Pro˚ssPﬁl
 ();

98 
HÆDrivîInô
 ();

103 #ifde‡
__˝lu•lus


	@Components/hal/include/hal_flash.h

40 #i‚de‡
HAL_FLASH_H


41 
	#HAL_FLASH_H


	)

43 #ifde‡
__˝lu•lus


53 
	~"hÆ_bﬂrd.h
"

54 
	~"hÆ_ty≥s.h
"

97 
HÆFœshInô
();

118 
HÆFœshRód
(
uöt8
 
pg
, 
uöt16
 
off£t
, uöt8 *
buf
, uöt16 
˙t
);

138 
HÆFœshWrôe
(
uöt16
 
addr
, 
uöt8
 *
buf
, uöt16 
˙t
);

156 
HÆFœshEø£
(
uöt8
 
pg
);

161 #ifde‡
__˝lu•lus


	@Components/hal/include/hal_key.h

40 #i‚de‡
HAL_KEY_H


41 
	#HAL_KEY_H


	)

43 #ifde‡
__˝lu•lus


51 
	~"hÆ_bﬂrd.h
"

62 
	#HAL_KEY_INTERRUPT_DISABLE
 0x00

	)

63 
	#HAL_KEY_INTERRUPT_ENABLE
 0x01

	)

66 
	#HAL_KEY_STATE_NORMAL
 0x00

	)

67 
	#HAL_KEY_STATE_SHIFT
 0x01

	)

70 
	#HAL_KEY_SW_1
 0x01

71 
	#HAL_KEY_SW_2
 0x02

72 
	#HAL_KEY_SW_5
 0x04

73 
	#HAL_KEY_SW_4
 0x08

74 
	#HAL_KEY_SW_3
 0x10

75 
	#HAL_KEY_SW_6
 0x20

76 
	#HAL_KEY_SW_7
 0x40

77 

	)

79 
	#HAL_KEY_UP
 0x01

80 
	#HAL_KEY_RIGHT
 0x02

81 
	#HAL_KEY_CENTER
 0x04

82 
	#HAL_KEY_LEFT
 0x08

83 
	#HAL_KEY_DOWN
 0x10

84 

	)

88 (*
hÆKeyCBack_t
Ë(
	tuöt8
 
	tkeys
, uöt8 
	t°©e
);

93 
boﬁ
 
HÆ_KeyI¡E«bÀ
;

102 
HÆKeyInô
( );

107 
HÆKeyC⁄fig
–
boﬁ
 
öãºu±E«bÀ
, c⁄° 
hÆKeyCBack_t
 
cback
);

112 
uöt8
 
HÆKeyRód
( );

117 
HÆKeyE¡îSÀï
 ( );

122 
uöt8
 
HÆKeyExôSÀï
 ( );

127 
HÆKeyPﬁl
 ( );

132 
boﬁ
 
HÆKeyPªs£d
( );

137 #ifde‡
__˝lu•lus


	@Components/hal/include/hal_lcd.h

40 #i‚de‡
HAL_LCD_H


41 
	#HAL_LCD_H


	)

43 #ifde‡
__˝lu•lus


51 
	~"hÆ_bﬂrd.h
"

58 
	#HAL_LCD_LINE_1
 0x01

	)

59 
	#HAL_LCD_LINE_2
 0x03

	)

64 
	#HAL_LCD_LINE_3
 0x05

	)

65 
	#HAL_LCD_LINE_4
 0x07

	)

66 
	#HAL_LCD_LINE_5
 0x05

	)

67 
	#HAL_LCD_LINE_6
 0x06

	)

68 
	#HAL_LCD_LINE_7
 0x07

	)

69 
	#HAL_LCD_LINE_8
 0x08

	)

72 
	#HAL_LCD_MAX_CHARS
 16

	)

73 
	#HAL_LCD_MAX_BUFF
 25

	)

97 
HÆLcdInô
();

102 
HÆLcdWrôeSåög
 ( *
°r
, 
uöt8
 
›ti⁄
);

107 
HÆLcdWrôeVÆue
 ( 
uöt32
 
vÆue
, c⁄° 
uöt8
 
ødix
, uöt8 
›ti⁄
);

112 
HÆLcdWrôeS¸ìn
–*
löe1
, *
löe2
 );

117 
HÆLcdWrôeSåögVÆue
–*
tôÀ
, 
uöt16
 
vÆue
, 
uöt8
 
f‹m©
, uöt8 
löe
 );

122 
HÆLcdWrôeSåögVÆueVÆue
–*
tôÀ
, 
uöt16
 
vÆue1
, 
uöt8
 
f‹m©1
, uöt16 
vÆue2
, uöt8 
f‹m©2
, uöt8 
löe
 );

127 
HÆLcdDi•œyPî˚¡B¨
–*
tôÀ
, 
uöt8
 
vÆue
 );

133 #ifde‡
__˝lu•lus


	@Components/hal/include/hal_led.h

40 #i‚de‡
HAL_LED_H


41 
	#HAL_LED_H


	)

43 #ifde‡
__˝lu•lus


51 
	~"hÆ_bﬂrd.h
"

62 
	#HAL_LED_1
 0x01

	)

63 
	#HAL_LED_2
 0x02

	)

64 
	#HAL_LED_3
 0x04

	)

65 
	#HAL_LED_4
 0x08

	)

66 
	#HAL_LED_ALL
 (
HAL_LED_1
 | 
HAL_LED_2
 | 
HAL_LED_3
 | 
HAL_LED_4
)

	)

69 
	#HAL_LED_MODE_OFF
 0x00

	)

70 
	#HAL_LED_MODE_ON
 0x01

	)

71 
	#HAL_LED_MODE_BLINK
 0x02

	)

72 
	#HAL_LED_MODE_FLASH
 0x04

	)

73 
	#HAL_LED_MODE_TOGGLE
 0x08

	)

76 
	#HAL_LED_DEFAULT_MAX_LEDS
 4

	)

77 
	#HAL_LED_DEFAULT_DUTY_CYCLE
 5

	)

78 
	#HAL_LED_DEFAULT_FLASH_COUNT
 50

	)

79 
	#HAL_LED_DEFAULT_FLASH_TIME
 1000

	)

93 
HÆLedInô
( );

98 
uöt8
 
HÆLedSë
–uöt8 
Àd
, uöt8 
mode
 );

103 
HÆLedBlök
–
uöt8
 
Àds
, uöt8 
˙t
, uöt8 
duty
, 
uöt16
 
time
 );

108 
HÆLedE¡îSÀï
( );

113 
HÆLedExôSÀï
( );

118 
uöt8
 
HÆLedGëSèã
 ( );

123 #ifde‡
__˝lu•lus


	@Components/hal/include/hal_sleep.h

40 #i‚de‡
HAL_SLEEP_H


41 
	#HAL_SLEEP_H


	)

43 #ifde‡
__˝lu•lus


55 
hÆSÀï
–
uöt16
 
oßl_timî
 );

60 
hÆSÀïWaô
(
uöt16
 
duøti⁄
);

65 
hÆRe°‹eSÀïLevñ
( );

70 #ifde‡
__˝lu•lus


	@Components/hal/include/hal_timer.h

40 #i‚de‡
HAL_TIMER_H


41 
	#HAL_TIMER_H


	)

43 #ifde‡
__˝lu•lus


51 
	~"hÆ_bﬂrd.h
"

63 
	#HAL_TIMER_0
 0x00

64 
	#HAL_TIMER_1
 0x01

65 
	#HAL_TIMER_2
 0x02

66 
	#HAL_TIMER_3
 0x03

67 
	#HAL_TIMER_MAX
 4

68 

	)

70 
	#HAL_TIMER_MODE_NORMAL
 0x01

71 
	#HAL_TIMER_MODE_CTC
 0x02

72 
	#HAL_TIMER_MODE_MASK
 (
HAL_TIMER_MODE_NORMAL
 | 
HAL_TIMER_MODE_CTC
)

	)

75 
	#HAL_TIMER_CHANNEL_SINGLE
 0x01

76 
	#HAL_TIMER_CHANNEL_A
 0x02

77 
	#HAL_TIMER_CHANNEL_B
 0x04

78 
	#HAL_TIMER_CHANNEL_C
 0x08

79 
	#HAL_TIMER_CHANNEL_MASK
 (
HAL_TIMER_CHANNEL_SINGLE
 | \

	)

80 
HAL_TIMER_CHANNEL_A
 | \

81 
HAL_TIMER_CHANNEL_B
 | \

82 
HAL_TIMER_CHANNEL_C
)

85 
	#HAL_TIMER_CH_MODE_INPUT_CAPTURE
 0x01

86 
	#HAL_TIMER_CH_MODE_OUTPUT_COMPARE
 0x02

87 
	#HAL_TIMER_CH_MODE_OVERFLOW
 0x04

88 
	#HAL_TIMER_CH_MODE_MASK
 (
HAL_TIMER_CH_MODE_INPUT_CAPTURE
 | \

	)

89 
HAL_TIMER_CH_MODE_OUTPUT_COMPARE
 | \

90 
HAL_TIMER_CH_MODE_OVERFLOW
)

93 
	#HAL_TIMER_OK
 0x00

	)

94 
	#HAL_TIMER_NOT_OK
 0x01

	)

95 
	#HAL_TIMER_PARAMS_ERROR
 0x02

	)

96 
	#HAL_TIMER_NOT_CONFIGURED
 0x03

	)

97 
	#HAL_TIMER_INVALID_ID
 0x04

	)

98 
	#HAL_TIMER_INVALID_CH_MODE
 0x05

	)

99 
	#HAL_TIMER_INVALID_OP_MODE
 0x06

	)

102 
	#HAL_TIMER3_16_TC_STOP
 0x00

103 
	#HAL_TIMER3_16_TC_DIV1
 0x01

104 
	#HAL_TIMER3_16_TC_DIV8
 0x02

105 
	#HAL_TIMER3_16_TC_DIV64
 0x03

106 
	#HAL_TIMER3_16_TC_DIV256
 0x04

107 
	#HAL_TIMER3_16_TC_DIV1024
 0x05

108 
	#HAL_TIMER3_16_TC_EXTFE
 0x06

109 
	#HAL_TIMER3_16_TC_EXTRE
 0x07

110 

	)

112 
	#HAL_TIMER0_8_TC_STOP
 0x00

113 
	#HAL_TIMER0_8_TC_DIV1
 0x01

114 
	#HAL_TIMER0_8_TC_DIV8
 0x02

115 
	#HAL_TIMER0_8_TC_DIV32
 0x03

116 
	#HAL_TIMER0_8_TC_DIV64
 0x04

117 
	#HAL_TIMER0_8_TC_DIV128
 0x05

118 
	#HAL_TIMER0_8_TC_DIV256
 0x06

119 
	#HAL_TIMER0_8_TC_DIV1024
 0x07

120 

	)

122 
	#HAL_TIMER2_8_TC_STOP
 0x00

123 
	#HAL_TIMER2_8_TC_DIV1
 0x01

124 
	#HAL_TIMER2_8_TC_DIV8
 0x02

125 
	#HAL_TIMER2_8_TC_DIV64
 0x03

126 
	#HAL_TIMER2_8_TC_DIV256
 0x04

127 
	#HAL_TIMER2_8_TC_DIV1024
 0x05

128 
	#HAL_TIMER2_8_TC_EXTFE
 0x06

129 
	#HAL_TIMER2_8_TC_EXTRE
 0x07

130 

	)

135 (*
hÆTimîCBack_t
Ë(
	tuöt8
 
	ttimîId
, uöt8 
	tch™√l
, uöt8 
	tch™√lMode
);

149 
HÆTimîInô
 ( );

154 
uöt8
 
HÆTimîC⁄fig
 ( uöt8 
timîId
,

155 
uöt8
 
›Mode
,

156 
uöt8
 
ch™√l
,

157 
uöt8
 
ch™√lMode
,

158 
boﬁ
 
ötE«bÀ
,

159 
hÆTimîCBack_t
 
cback
 );

164 
uöt8
 
HÆTimîSèπ
 ( uöt8 
timîId
, 
uöt32
 
timePîTick
 );

169 
uöt8
 
HÆTimîSt›
 ( uöt8 
timîId
 );

175 
HÆTimîTick
 ( );

180 
uöt8
 
HÆTimîI¡îru±E«bÀ
 (uöt8 
timîId
, uöt8 
ch™√lMode
, 
boﬁ
 
íabÀ
);

186 #ifde‡
__˝lu•lus


	@Components/hal/include/hal_uart.h

40 #i‚de‡
HAL_UART_H


41 
	#HAL_UART_H


	)

43 #ifde‡
__˝lu•lus


51 
	~"hÆ_bﬂrd.h
"

71 
	#HAL_UART_BR_9600
 0x00

	)

72 
	#HAL_UART_BR_19200
 0x01

	)

73 
	#HAL_UART_BR_38400
 0x02

	)

74 
	#HAL_UART_BR_57600
 0x03

	)

75 
	#HAL_UART_BR_115200
 0x04

	)

80 
	#HAL_UART_ONE_STOP_BIT
 0x00

	)

81 
	#HAL_UART_TWO_STOP_BITS
 0x01

	)

84 
	#HAL_UART_NO_PARITY
 0x00

	)

85 
	#HAL_UART_EVEN_PARITY
 0x01

	)

86 
	#HAL_UART_ODD_PARITY
 0x02

	)

89 
	#HAL_UART_8_BITS_PER_CHAR
 0x00

	)

90 
	#HAL_UART_9_BITS_PER_CHAR
 0x01

	)

93 
	#HAL_UART_FLOW_OFF
 0x00

	)

94 
	#HAL_UART_FLOW_ON
 0x01

	)

97 
	#HAL_UART_PORT_0
 0x00

	)

98 
	#HAL_UART_PORT_1
 0x01

	)

99 
	#HAL_UART_PORT_MAX
 0x02

	)

102 
	#HAL_UART_SUCCESS
 0x00

	)

103 
	#HAL_UART_UNCONFIGURED
 0x01

	)

104 
	#HAL_UART_NOT_SUPPORTED
 0x02

	)

105 
	#HAL_UART_MEM_FAIL
 0x03

	)

106 
	#HAL_UART_BAUDRATE_ERROR
 0x04

	)

109 
	#HAL_UART_RX_FULL
 0x01

	)

110 
	#HAL_UART_RX_ABOUT_FULL
 0x02

	)

111 
	#HAL_UART_RX_TIMEOUT
 0x04

	)

112 
	#HAL_UART_TX_FULL
 0x08

	)

113 
	#HAL_UART_TX_EMPTY
 0x10

	)

119 (*
hÆUARTCBack_t
Ë(
	tuöt8
 
	tp‹t
, uöt8 
	tevít
);

124 vﬁ©ûê
uöt16
 
buf„rHód
;

125 vﬁ©ûê
uöt16
 
buf„rTaû
;

126 
uöt16
 
maxBufSize
;

127 
uöt8
 *
pBuf„r
;

128 } 
	thÆUARTBufC⁄åﬁ_t
;

132 
boﬁ
 
c⁄figuªd
;

133 
uöt8
 
baudR©e
;

134 
boﬁ
 
ÊowC⁄åﬁ
;

135 
uöt16
 
ÊowC⁄åﬁThªshﬁd
;

136 
uöt8
 
idÀTimeout
;

137 
hÆUARTBufC⁄åﬁ_t
 
rx
;

138 
hÆUARTBufC⁄åﬁ_t
 
tx
;

139 
boﬁ
 
ötE«bÀ
;

140 
uöt32
 
rxChRvdTime
;

141 
hÆUARTCBack_t
 
ˇŒBackFunc
;

142 }
	thÆUARTCfg_t
;

146 
boﬁ
 
∑ømCTS
;

147 
boﬁ
 
∑ømRTS
;

148 
boﬁ
 
∑ømDSR
;

149 
boﬁ
 
∑ømDTR
;

150 
boﬁ
 
∑ømCD
;

151 
boﬁ
 
∑ømRI
;

152 
uöt16
 
baudR©e
;

153 
boﬁ
 
ÊowC⁄åﬁ
;

154 
boﬁ
 
ÊushC⁄åﬁ
;

155 }
	thÆUARTIo˘l_t
;

169 
HÆUARTInô
 ( );

174 
uöt8
 
HÆUARTO≥n
 ( uöt8 
p‹t
, 
hÆUARTCfg_t
 *
c⁄fig
 );

179 
HÆUARTClo£
 ( 
uöt8
 
p‹t
 );

184 
uöt16
 
HÆUARTRód
 ( 
uöt8
 
p‹t
, uöt8 *
pBuf„r
, uöt16 
Àngth
 );

189 
uöt16
 
HÆUARTWrôe
 ( 
uöt8
 
p‹t
, uöt8 *
pBuf„r
, uöt16 
Àngth
 );

194 
uöt8
 
HÆUARTIo˘l
 ( uöt8 
p‹t
, uöt8 
cmd
, 
hÆUARTIo˘l_t
 *
pIo˘l
 );

199 
HÆUARTPﬁl
( );

204 
uöt16
 
HÆ_UART_RxBufLí
 ( 
uöt8
 
p‹t
 );

209 
uöt16
 
HÆ_UART_TxBufLí
 ( 
uöt8
 
p‹t
 );

214 
HÆ_UART_FlowC⁄åﬁSë
 ( 
uöt8
 
p‹t
, 
boﬁ
 
°©us
 );

219 
uöt8
 
HÆUART_HW_Inô
(uöt8 
p‹t
);

224 
HÆUARTSu•íd
();

229 
HÆUARTResume
();

234 #ifde‡
__˝lu•lus


	@Components/hal/target/CC2530EB/Font.c

1 
	~"hÆ_bﬂrd.h
"

2 
	~<°rög.h
>

7 
__code
 c⁄° 
uöt8
 
	gF⁄t8X8
[] =

	@Components/hal/target/CC2530EB/Font.h

1 #i‚de‡
_FONT_H


2 
	#_FONT_H


	)

4 
__code
 c⁄° 
uöt8
 
F⁄tSy°em6x8
[];

5 
__code
 c⁄° 
uöt8
 
F⁄t8X8
[];

6 
__code
 c⁄° 
uöt8
 
F⁄tNew8X16_Index
[];

7 
__code
 c⁄° 
uöt8
 
WXL112X64
[];

	@Components/hal/target/CC2530EB/LCD128_64.h

1 #i‚de‡
_LCD_H


2 
	#_LCD_H


	)

4 
	~<°rög.h
>

5 
	~"hÆ_bﬂrd.h
"

7 
	#DATA
 1

	)

8 
	#COMMAND
 0

	)

11 
	#K_UP
 0X20

	)

12 
	#K_DOWN
 0X21

	)

13 
	#K_LEFT
 0X22

	)

14 
	#K_RIGHT
 0X23

	)

15 
	#K_CANCEL
 0X24

	)

16 
	#K_OK
 0X25

	)

17 
	#NO_1
 0x01

	)

18 
	#NO_2
 0x02

	)

20 
	#LCD_595_LD
 
P1_3


	)

21 
	#LCD_595_CK
 
P1_5


	)

22 
	#LCD_595_DAT
 
P2_0


	)

24 
	#LCD_BK
 
P1_2


	)

25 
	#LCD_RS
 
P1_7


	)

26 
	#LCD_RW
 
P0_1


	)

27 
	#LCD_CS1
 
P1_4


	)

28 
	#LCD_E
 
P1_6


	)

30 
InôDi•œy
();

31 
HÆLcdInô
();

33 
CÀ¨S¸ìn
();

34 
Pröä
(
uöt8
 
xx
 ,uöt8 
yy
 , 
uöt32
 
no
,uöt8 
yn
,uöt8 
À
);

35 
Pröä8
(
uöt8
 
xx
 ,uöt8 
yy
 , 
uöt32
 
no
,uöt8 
yn
,uöt8 
À
);

36 
Pröt6
(
uöt8
 
xx
, uöt8 
yy
, uöt8 
ch1
[], uöt8 
yn
);

37 
Pröt8
(
uöt16
 
y
,uöt16 
x
, 
uöt8
 
ch
[],uöt16 
yn
);

38 
Pröt16
(
uöt16
 
y
,uöt16 
x
,
uöt8
 
ch
[],uöt16 
yn
);

39 
Pröt
(
uöt8
 
y
, uöt8 
x
, uöt8 
ch
[], 
uöt16
 
yn
);

40 
CÀ¨Cﬁ
(
uöt8
 
Begö
 , uöt8 
End
);

42 
DoSëC⁄åa°
();

43 
SëC⁄åa°
(
uöt8
 
Gaö
, uöt8 
Sãp
);

44 
SëRamAddr
 (
uöt8
 
Page
, uöt8 
Cﬁ
);

45 
Lcdwrôed©a
(
uöt8
 
d©
);

46 
LﬂdICO
();

47 
Tu∫OnDi•
();

	@Components/hal/target/CC2530EB/_hal_uart_dma.c

44 
	~"hÆ_ty≥s.h
"

45 
	~"hÆ_as£π.h
"

46 
	~"hÆ_bﬂrd.h
"

47 
	~"hÆ_defs.h
"

48 
	~"hÆ_dma.h
"

49 
	~"hÆ_mcu.h
"

50 
	~"hÆ_u¨t.h
"

51 #i‡
deföed
 
MT_TASK


52 
	~"mt_u¨t.h
"

54 
	~"oßl.h
"

61 
	#HAL_UART_ASSERT
(
ex¥
)

	)

63 #i‡
deföed
 
HAL_BOARD_CC2430EB
 || deföed 
HAL_BOARD_CC2430DB
 || deföed 
HAL_BOARD_CC2430BB


64 
	#HAL_UART_DMA_NEW_RX_BYTE
(
IDX
Ë(
DMA_PAD
 =
	`LO_UINT16
(
dmaCfg
.
rxBuf
[(IDX)]))

	)

65 
	#HAL_UART_DMA_GET_RX_BYTE
(
IDX
Ë(
	`HI_UINT16
(
dmaCfg
.
rxBuf
[(IDX)]))

	)

66 
	#HAL_UART_DMA_CLR_RX_BYTE
(
IDX
Ë(
dmaCfg
.
rxBuf
[(IDX)] = 
	`BUILD_UINT16
((
DMA_PAD
 ^ 0xFF), 0))

	)

68 
	#HAL_UART_DMA_NEW_RX_BYTE
(
IDX
Ë(
DMA_PAD
 =
	`HI_UINT16
(
dmaCfg
.
rxBuf
[(IDX)]))

	)

69 
	#HAL_UART_DMA_GET_RX_BYTE
(
IDX
Ë(
	`LO_UINT16
(
dmaCfg
.
rxBuf
[(IDX)]))

	)

70 
	#HAL_UART_DMA_CLR_RX_BYTE
(
IDX
Ë(
dmaCfg
.
rxBuf
[(IDX)] = 
	`BUILD_UINT16
(0, (
DMA_PAD
 ^ 0xFF)))

	)

78 
	#CSR_MODE
 0x80

	)

79 
	#CSR_RE
 0x40

	)

80 
	#CSR_SLAVE
 0x20

	)

81 
	#CSR_FE
 0x10

	)

82 
	#CSR_ERR
 0x08

	)

83 
	#CSR_RX_BYTE
 0x04

	)

84 
	#CSR_TX_BYTE
 0x02

	)

85 
	#CSR_ACTIVE
 0x01

	)

88 
	#UCR_FLUSH
 0x80

	)

89 
	#UCR_FLOW
 0x40

	)

90 
	#UCR_D9
 0x20

	)

91 
	#UCR_BIT9
 0x10

	)

92 
	#UCR_PARITY
 0x08

	)

93 
	#UCR_SPB
 0x04

	)

94 
	#UCR_STOP
 0x02

	)

95 
	#UCR_START
 0x01

	)

97 
	#UTX0IE
 0x04

	)

98 
	#UTX1IE
 0x08

	)

100 
	#P2DIR_PRIPO
 0xC0

	)

103 #unde‡
PxSEL


104 #unde‡
UxCSR


105 #unde‡
UxUCR


106 #unde‡
UxDBUF


107 #unde‡
UxBAUD


108 #unde‡
UxGCR


109 #unde‡
URXxIE


110 #unde‡
UTXxIE


111 #unde‡
UTXxIF


112 #i‡(
HAL_UART_DMA
 == 1)

113 
	#PxOUT
 
P0


	)

114 
	#PxDIR
 
P0DIR


	)

115 
	#PxSEL
 
P0SEL


	)

116 
	#UxCSR
 
U0CSR


	)

117 
	#UxUCR
 
U0UCR


	)

118 
	#UxDBUF
 
U0DBUF


	)

119 
	#UxBAUD
 
U0BAUD


	)

120 
	#UxGCR
 
U0GCR


	)

121 
	#URXxIE
 
URX0IE


	)

122 
	#UTXxIE
 
UTX0IE


	)

123 
	#UTXxIF
 
UTX0IF


	)

124 
	#UxRX_TX
 0x0C

	)

125 
	#HAL_UART_PERCFG_BIT
 0x01

	)

126 
	#HAL_UART_Px_CTS
 0x10

127 
	#HAL_UART_Px_RTS
 0x20

128 #ñ£

	)

129 
	#PxOUT
 
P1


	)

130 
	#PxDIR
 
P1DIR


	)

131 
	#PxSEL
 
P1SEL


	)

132 
	#UxCSR
 
U1CSR


	)

133 
	#UxUCR
 
U1UCR


	)

134 
	#UxDBUF
 
U1DBUF


	)

135 
	#UxBAUD
 
U1BAUD


	)

136 
	#UxGCR
 
U1GCR


	)

137 
	#URXxIE
 
URX1IE


	)

138 
	#UTXxIE
 
UTX1IE


	)

139 
	#UTXxIF
 
UTX1IF


	)

140 
	#UxRX_TX
 0xC0

	)

141 
	#HAL_UART_PERCFG_BIT
 0x02

	)

142 
	#HAL_UART_Px_CTS
 0x10

143 
	#HAL_UART_Px_RTS
 0x20

145 

	)

147 
	#HAL_UART_MSECS_TO_TICKS
 33

	)

149 #i‡
deföed
 
MT_TASK


150 
	#HAL_UART_DMA_TX_MAX
 
MT_UART_DEFAULT_MAX_TX_BUFF


	)

151 
	#HAL_UART_DMA_RX_MAX
 
MT_UART_DEFAULT_MAX_RX_BUFF


	)

152 
	#HAL_UART_DMA_HIGH
 
MT_UART_DEFAULT_THRESHOLD


	)

153 
	#HAL_UART_DMA_IDLE
 (
MT_UART_DEFAULT_IDLE_TIMEOUT
 * 
HAL_UART_MSECS_TO_TICKS
)

	)

155 #i‡!
deföed
 
HAL_UART_DMA_RX_MAX


156 
	#HAL_UART_DMA_RX_MAX
 128

	)

158 #i‡!
deföed
 
HAL_UART_DMA_TX_MAX


159 
	#HAL_UART_DMA_TX_MAX
 
HAL_UART_DMA_RX_MAX


	)

161 #i‡!
deföed
 
HAL_UART_DMA_HIGH


162 
	#HAL_UART_DMA_HIGH
 (
HAL_UART_DMA_RX_MAX
 / 2 - 16)

	)

164 #i‡!
deföed
 
HAL_UART_DMA_IDLE


165 
	#HAL_UART_DMA_IDLE
 (6 * 
HAL_UART_MSECS_TO_TICKS
)

	)

168 #i‡!
deföed
 
HAL_UART_DMA_FULL


169 
	#HAL_UART_DMA_FULL
 (
HAL_UART_DMA_RX_MAX
 - 16)

	)

172 #i‡
deföed
 
HAL_BOARD_CC2430EB
 || deföed 
HAL_BOARD_CC2430DB
 || deföed 
HAL_BOARD_CC2430BB


173 
	#HAL_DMA_U0DBUF
 0xDFC1

	)

174 
	#HAL_DMA_U1DBUF
 0xDFF9

	)

176 
	#HAL_DMA_U0DBUF
 0x70C1

	)

177 
	#HAL_DMA_U1DBUF
 0x70F9

	)

180 #i‡(
HAL_UART_DMA
 == 1)

181 
	#DMATRIG_RX
 
HAL_DMA_TRIG_URX0


	)

182 
	#DMATRIG_TX
 
HAL_DMA_TRIG_UTX0


	)

183 
	#DMA_UDBUF
 
HAL_DMA_U0DBUF


	)

184 
	#DMA_PAD
 
U0BAUD


	)

186 
	#DMATRIG_RX
 
HAL_DMA_TRIG_URX1


	)

187 
	#DMATRIG_TX
 
HAL_DMA_TRIG_UTX1


	)

188 
	#DMA_UDBUF
 
HAL_DMA_U1DBUF


	)

189 
	#DMA_PAD
 
U1BAUD


	)

199 
uöt16
 
	mrxBuf
[
HAL_UART_DMA_RX_MAX
];

200 #i‡
HAL_UART_DMA_RX_MAX
 < 256

201 
uöt8
 
	mrxHód
;

202 
uöt8
 
	mrxTaû
;

204 
uöt16
 
	mrxHód
;

205 
uöt16
 
	mrxTaû
;

207 
uöt8
 
	mrxTick
;

208 
uöt8
 
	mrxShdw
;

210 
uöt8
 
	mtxBuf
[2][
HAL_UART_DMA_TX_MAX
];

211 #i‡
HAL_UART_DMA_TX_MAX
 < 256

212 
uöt8
 
	mtxIdx
[2];

214 
uöt16
 
	mtxIdx
[2];

216 vﬁ©ûê
uöt8
 
	mtxSñ
;

217 
uöt8
 
	mtxMT
;

218 
uöt8
 
	mtxTick
;

223 vﬁ©ûê
uöt8
 
	mtxShdw
;

224 vﬁ©ûê
uöt8
 
	mtxShdwVÆid
;

225 
uöt8
 
	mtxDMAPídög
;

227 
hÆUARTCBack_t
 
	mu¨tCB
;

228 } 
	tu¨tDMACfg_t
;

238 
HÆUARTI§DMA
();

244 
u¨tDMACfg_t
 
	gdmaCfg
;

250 
uöt16
 
födTaû
();

253 
HÆUARTInôDMA
();

254 
HÆUARTO≥nDMA
(
hÆUARTCfg_t
 *
c⁄fig
);

255 
uöt16
 
HÆUARTRódDMA
(
uöt8
 *
buf
, uöt16 
Àn
);

256 
uöt16
 
HÆUARTWrôeDMA
(
uöt8
 *
buf
, uöt16 
Àn
);

257 
HÆUARTPﬁlDMA
();

258 
uöt16
 
HÆUARTRxAvaûDMA
();

259 
HÆUARTSu•ídDMA
();

260 
HÆUARTResumeDMA
();

271 
uöt16
 
	$födTaû
()

273 
uöt16
 
idx
 = 
dmaCfg
.
rxHód
;

277 i‡(!
	`HAL_UART_DMA_NEW_RX_BYTE
(
idx
))

282 i‡(++
idx
 >
HAL_UART_DMA_RX_MAX
)

284 
idx
 = 0;

286 } 
idx
 !
dmaCfg
.
rxHód
);

288  
idx
;

289 
	}
}

300 
	$HÆUARTInôDMA
()

302 
hÆDMADesc_t
 *
ch
;

304 
P2DIR
 &~
P2DIR_PRIPO
;

305 
P2DIR
 |
HAL_UART_PRIPO
;

307 #i‡(
HAL_UART_DMA
 == 1)

308 
PERCFG
 &~
HAL_UART_PERCFG_BIT
;

310 
PERCFG
 |
HAL_UART_PERCFG_BIT
;

312 
PxSEL
 |
UxRX_TX
;

313 
ADCCFG
 &~
UxRX_TX
;

314 
UxCSR
 = 
CSR_MODE
;

315 
UxUCR
 = 
UCR_FLUSH
;

318 
ch
 = 
	`HAL_DMA_GET_DESC1234
–
HAL_DMA_CH_TX
 );

321 
	`HAL_DMA_SET_DEST
–
ch
, 
DMA_UDBUF
 );

324 
	`HAL_DMA_SET_VLEN
–
ch
, 
HAL_DMA_VLEN_USE_LEN
 );

327 
	`HAL_DMA_SET_WORD_SIZE
–
ch
, 
HAL_DMA_WORDSIZE_BYTE
 );

330 
	`HAL_DMA_SET_TRIG_MODE
–
ch
, 
HAL_DMA_TMODE_SINGLE
 );

331 
	`HAL_DMA_SET_TRIG_SRC
–
ch
, 
DMATRIG_TX
 );

334 
	`HAL_DMA_SET_SRC_INC
–
ch
, 
HAL_DMA_SRCINC_1
 );

337 
	`HAL_DMA_SET_DST_INC
–
ch
, 
HAL_DMA_DSTINC_0
 );

340 
	`HAL_DMA_SET_IRQ
–
ch
, 
HAL_DMA_IRQMASK_ENABLE
 );

343 
	`HAL_DMA_SET_M8
–
ch
, 
HAL_DMA_M8_USE_8_BITS
 );

346 
	`HAL_DMA_SET_PRIORITY
–
ch
, 
HAL_DMA_PRI_HIGH
 );

349 
ch
 = 
	`HAL_DMA_GET_DESC1234
–
HAL_DMA_CH_RX
 );

352 
	`HAL_DMA_SET_SOURCE
–
ch
, 
DMA_UDBUF
 );

355 
	`HAL_DMA_SET_VLEN
–
ch
, 
HAL_DMA_VLEN_USE_LEN
 );

364 
	`HAL_DMA_SET_WORD_SIZE
–
ch
, 
HAL_DMA_WORDSIZE_WORD
 );

367 
	`HAL_DMA_SET_TRIG_MODE
–
ch
, 
HAL_DMA_TMODE_SINGLE_REPEATED
 );

368 
	`HAL_DMA_SET_TRIG_SRC
–
ch
, 
DMATRIG_RX
 );

371 
	`HAL_DMA_SET_SRC_INC
–
ch
, 
HAL_DMA_SRCINC_0
 );

374 
	`HAL_DMA_SET_DST_INC
–
ch
, 
HAL_DMA_DSTINC_1
 );

375 
	`HAL_DMA_SET_DEST
–
ch
, 
dmaCfg
.
rxBuf
 );

376 
	`HAL_DMA_SET_LEN
–
ch
, 
HAL_UART_DMA_RX_MAX
 );

379 
	`HAL_DMA_SET_IRQ
–
ch
, 
HAL_DMA_IRQMASK_DISABLE
 );

382 
	`HAL_DMA_SET_M8
–
ch
, 
HAL_DMA_M8_USE_8_BITS
 );

385 
	`HAL_DMA_SET_PRIORITY
–
ch
, 
HAL_DMA_PRI_HIGH
 );

386 
	}
}

397 
	$HÆUARTO≥nDMA
(
hÆUARTCfg_t
 *
c⁄fig
)

399 
dmaCfg
.
u¨tCB
 = 
c⁄fig
->
ˇŒBackFunc
;

401 
	`HAL_UART_ASSERT
((
c⁄fig
->
baudR©e
 =
HAL_UART_BR_9600
) ||

402 (
c⁄fig
->
baudR©e
 =
HAL_UART_BR_19200
) ||

403 (
c⁄fig
->
baudR©e
 =
HAL_UART_BR_38400
) ||

404 (
c⁄fig
->
baudR©e
 =
HAL_UART_BR_57600
) ||

405 (
c⁄fig
->
baudR©e
 =
HAL_UART_BR_115200
));

407 i‡(
c⁄fig
->
baudR©e
 =
HAL_UART_BR_57600
 ||

408 
c⁄fig
->
baudR©e
 =
HAL_UART_BR_115200
)

410 
UxBAUD
 = 216;

414 
UxBAUD
 = 59;

417 
c⁄fig
->
baudR©e
)

419 
HAL_UART_BR_9600
:

420 
UxGCR
 = 8;

421 
dmaCfg
.
txTick
 = 35;

424 
HAL_UART_BR_19200
:

425 
UxGCR
 = 9;

426 
dmaCfg
.
txTick
 = 18;

428 
HAL_UART_BR_38400
:

429 
UxGCR
 = 10;

430 
dmaCfg
.
txTick
 = 9;

432 
HAL_UART_BR_57600
:

433 
UxGCR
 = 10;

434 
dmaCfg
.
txTick
 = 6;

438 
UxGCR
 = 11;

439 
dmaCfg
.
txTick
 = 3;

444 i‡(
c⁄fig
->
ÊowC⁄åﬁ
)

446 
UxUCR
 = 
UCR_FLOW
 | 
UCR_STOP
;

447 
PxSEL
 |
HAL_UART_Px_CTS
;

450 
PxOUT
 &~
HAL_UART_Px_RTS
;

451 
PxDIR
 |
HAL_UART_Px_RTS
;

455 
UxUCR
 = 
UCR_STOP
;

458 
dmaCfg
.
rxBuf
[0] = *(vﬁ©ûê
uöt8
 *)
DMA_UDBUF
;

459 
	`HAL_DMA_CLEAR_IRQ
(
HAL_DMA_CH_RX
);

460 
	`HAL_DMA_ARM_CH
(
HAL_DMA_CH_RX
);

461 
	`oßl_mem£t
(
dmaCfg
.
rxBuf
, (
DMA_PAD
 ^ 0xFF), 
HAL_UART_DMA_RX_MAX
*2);

463 
UxCSR
 |
CSR_RE
;

464 
UxDBUF
 = 0;

467 
dmaCfg
.
txDMAPídög
 = 
FALSE
;

468 
dmaCfg
.
txShdwVÆid
 = 
FALSE
;

469 
	}
}

481 
uöt16
 
	$HÆUARTRódDMA
(
uöt8
 *
buf
, 
uöt16
 
Àn
)

483 
uöt16
 
˙t
;

485 
˙t
 = 0; c¡ < 
Àn
; cnt++)

487 i‡(!
	`HAL_UART_DMA_NEW_RX_BYTE
(
dmaCfg
.
rxHód
))

491 *
buf
++ = 
	`HAL_UART_DMA_GET_RX_BYTE
(
dmaCfg
.
rxHód
);

492 
	`HAL_UART_DMA_CLR_RX_BYTE
(
dmaCfg
.
rxHód
);

493 i‡(++(
dmaCfg
.
rxHód
Ë>
HAL_UART_DMA_RX_MAX
)

495 
dmaCfg
.
rxHód
 = 0;

498 
PxOUT
 &~
HAL_UART_Px_RTS
;

500  
˙t
;

501 
	}
}

513 
uöt16
 
	$HÆUARTWrôeDMA
(
uöt8
 *
buf
, 
uöt16
 
Àn
)

515 
uöt16
 
˙t
;

516 
hÆI¡Sèã_t
 
his
;

517 
uöt8
 
txIdx
, 
txSñ
;

520 i‡((
Àn
 + 
dmaCfg
.
txIdx
[dmaCfg.
txSñ
]Ë> 
HAL_UART_DMA_TX_MAX
)

525 
	`HAL_ENTER_CRITICAL_SECTION
(
his
);

526 
txSñ
 = 
dmaCfg
.txSel;

527 
txIdx
 = 
dmaCfg
.txIdx[
txSñ
];

528 
	`HAL_EXIT_CRITICAL_SECTION
(
his
);

530 
˙t
 = 0; c¡ < 
Àn
; cnt++)

532 
dmaCfg
.
txBuf
[
txSñ
][
txIdx
++] = 
buf
[
˙t
];

535 
	`HAL_ENTER_CRITICAL_SECTION
(
his
);

536 i‡(
txSñ
 !
dmaCfg
.txSel)

538 
	`HAL_EXIT_CRITICAL_SECTION
(
his
);

539 
txSñ
 = 
dmaCfg
.txSel;

540 
txIdx
 = 
dmaCfg
.txIdx[
txSñ
];

542 
˙t
 = 0; c¡ < 
Àn
; cnt++)

544 
dmaCfg
.
txBuf
[
txSñ
][
txIdx
++] = 
buf
[
˙t
];

546 
	`HAL_ENTER_CRITICAL_SECTION
(
his
);

549 
dmaCfg
.
txIdx
[
txSñ
] =ÅxIdx;

551 i‡(
dmaCfg
.
txIdx
[(
txSñ
 ^ 1)] == 0)

554 
dmaCfg
.
txDMAPídög
 = 
TRUE
;

556 
	`HAL_EXIT_CRITICAL_SECTION
(
his
);

557  
˙t
;

558 
	}
}

569 
	$HÆUARTPﬁlDMA
()

571 
uöt16
 
˙t
 = 0;

572 
uöt8
 
evt
 = 0;

574 i‡(
	`HAL_UART_DMA_NEW_RX_BYTE
(
dmaCfg
.
rxHód
))

576 
uöt16
 
èû
 = 
	`födTaû
();

579 i‡(
dmaCfg
.
rxTaû
 !
èû
)

581 
dmaCfg
.
rxTaû
 = 
èû
;

584 i‡(
dmaCfg
.
rxTick
 == 0)

586 
dmaCfg
.
rxShdw
 = 
ST0
;

588 
dmaCfg
.
rxTick
 = 
HAL_UART_DMA_IDLE
;

590 i‡(
dmaCfg
.
rxTick
)

593 
uöt8
 
de¸
 = 
ST0
 - 
dmaCfg
.
rxShdw
;

595 i‡(
dmaCfg
.
rxTick
 > 
de¸
)

597 
dmaCfg
.
rxTick
 -
de¸
;

598 
dmaCfg
.
rxShdw
 = 
ST0
;

602 
dmaCfg
.
rxTick
 = 0;

605 
˙t
 = 
	`HÆUARTRxAvaûDMA
();

609 
dmaCfg
.
rxTick
 = 0;

612 i‡(
˙t
 >
HAL_UART_DMA_FULL
)

614 
evt
 = 
HAL_UART_RX_FULL
;

616 i‡(
˙t
 >
HAL_UART_DMA_HIGH
)

618 
evt
 = 
HAL_UART_RX_ABOUT_FULL
;

619 
PxOUT
 |
HAL_UART_Px_RTS
;

621 i‡(
˙t
 && !
dmaCfg
.
rxTick
)

623 
evt
 = 
HAL_UART_RX_TIMEOUT
;

626 i‡(
dmaCfg
.
txMT
)

628 
dmaCfg
.
txMT
 = 
FALSE
;

629 
evt
 |
HAL_UART_TX_EMPTY
;

632 i‡(
dmaCfg
.
txShdwVÆid
)

634 
uöt8
 
de¸
 = 
ST0
;

635 
de¸
 -
dmaCfg
.
txShdw
;

636 i‡(
de¸
 > 
dmaCfg
.
txTick
)

641 
dmaCfg
.
txShdwVÆid
 = 
FALSE
;

645 i‡(
dmaCfg
.
txDMAPídög
 && !dmaCfg.
txShdwVÆid
)

649 
hÆDMADesc_t
 *
ch
 = 
	`HAL_DMA_GET_DESC1234
(
HAL_DMA_CH_TX
);

650 
hÆI¡Sèã_t
 
ötSèã
;

653 
dmaCfg
.
txDMAPídög
 = 
FALSE
;

655 
	`HAL_DMA_SET_SOURCE
(
ch
, 
dmaCfg
.
txBuf
[dmaCfg.
txSñ
]);

656 
	`HAL_DMA_SET_LEN
(
ch
, 
dmaCfg
.
txIdx
[dmaCfg.
txSñ
]);

657 
dmaCfg
.
txSñ
 ^= 1;

658 
	`HAL_ENTER_CRITICAL_SECTION
(
ötSèã
);

659 
	`HAL_DMA_ARM_CH
(
HAL_DMA_CH_TX
);

662 
	`asm
("NOP");

663 } !
	`HAL_DMA_CH_ARMED
(
HAL_DMA_CH_TX
));

664 
	`HAL_DMA_CLEAR_IRQ
(
HAL_DMA_CH_TX
);

665 
	`HAL_DMA_MAN_TRIGGER
(
HAL_DMA_CH_TX
);

666 
	`HAL_EXIT_CRITICAL_SECTION
(
ötSèã
);

669 i‡(
evt
 && (
dmaCfg
.
u¨tCB
 !
NULL
))

671 
dmaCfg
.
	`u¨tCB
(
HAL_UART_DMA
-1, 
evt
);

673 
	}
}

684 
uöt16
 
	$HÆUARTRxAvaûDMA
()

686 
uöt16
 
˙t
 = 0;

688 i‡(
	`HAL_UART_DMA_NEW_RX_BYTE
(
dmaCfg
.
rxHód
))

690 
uöt16
 
idx
;

692 
idx
 = 0; idx < 
HAL_UART_DMA_RX_MAX
; idx++)

694 i‡(
	`HAL_UART_DMA_NEW_RX_BYTE
(
idx
))

696 
˙t
++;

701  
˙t
;

702 
	}
}

713 
	$HÆUARTSu•ídDMA
( )

715 
UxCSR
 &~
CSR_RE
;

716 
	}
}

727 
	$HÆUARTResumeDMA
( )

729 
UxUCR
 |
UCR_FLUSH
;

730 
UxCSR
 |
CSR_RE
;

731 
	}
}

742 
HÆUARTI§DMA
();

743 
	$HÆUARTI§DMA
()

745 
	`HAL_DMA_CLEAR_IRQ
(
HAL_DMA_CH_TX
);

748 
dmaCfg
.
txIdx
[(dmaCfg.
txSñ
 ^ 1)] = 0;

749 
dmaCfg
.
txMT
 = 
TRUE
;

752 
dmaCfg
.
txShdw
 = 
ST0
;

753 
dmaCfg
.
txShdwVÆid
 = 
TRUE
;

756 i‡(
dmaCfg
.
txIdx
[dmaCfg.
txSñ
])

759 
dmaCfg
.
txDMAPídög
 = 
TRUE
;

761 
	}
}

	@Components/hal/target/CC2530EB/_hal_uart_isr.c

44 
	~"hÆ_ty≥s.h
"

45 
	~"hÆ_as£π.h
"

46 
	~"hÆ_bﬂrd.h
"

47 
	~"hÆ_defs.h
"

48 
	~"hÆ_mcu.h
"

49 
	~"hÆ_u¨t.h
"

50 #i‡
deföed
 
MT_TASK


51 
	~"mt_u¨t.h
"

53 
	~"oßl.h
"

60 
	#HAL_UART_ASSERT
(
ex¥
)

	)

62 
	#HAL_UART_ISR_RX_AVAIL
(Ë\

	)

63 (
	gi§Cfg
.
	grxTaû
 >
i§Cfg
.
rxHód
) ? \

64 (
i§Cfg
.
rxTaû
 - i§Cfg.
rxHód
) : \

65 (
HAL_UART_ISR_RX_MAX
 - 
i§Cfg
.
rxHód
 + i§Cfg.
rxTaû
)

67 
	#HAL_UART_ISR_TX_AVAIL
(Ë\

	)

68 (
i§Cfg
.
txHód
 > i§Cfg.
txTaû
) ? \

69 (
i§Cfg
.
txHód
 - i§Cfg.
txTaû
 - 1) : \

70 (
HAL_UART_ISR_TX_MAX
 - 
i§Cfg
.
txTaû
 + i§Cfg.
txHód
 - 1)

77 
	#CSR_MODE
 0x80

	)

78 
	#CSR_RE
 0x40

	)

79 
	#CSR_SLAVE
 0x20

	)

80 
	#CSR_FE
 0x10

	)

81 
	#CSR_ERR
 0x08

	)

82 
	#CSR_RX_BYTE
 0x04

	)

83 
	#CSR_TX_BYTE
 0x02

	)

84 
	#CSR_ACTIVE
 0x01

	)

87 
	#UCR_FLUSH
 0x80

	)

88 
	#UCR_FLOW
 0x40

	)

89 
	#UCR_D9
 0x20

	)

90 
	#UCR_BIT9
 0x10

	)

91 
	#UCR_PARITY
 0x08

	)

92 
	#UCR_SPB
 0x04

	)

93 
	#UCR_STOP
 0x02

	)

94 
	#UCR_START
 0x01

	)

96 
	#UTX0IE
 0x04

	)

97 
	#UTX1IE
 0x08

	)

99 
	#P2DIR_PRIPO
 0xC0

	)

102 #unde‡
PxSEL


103 #unde‡
UxCSR


104 #unde‡
UxUCR


105 #unde‡
UxDBUF


106 #unde‡
UxBAUD


107 #unde‡
UxGCR


108 #unde‡
URXxIE


109 #unde‡
UTXxIE


110 #unde‡
UTXxIF


111 #i‡(
HAL_UART_ISR
 == 1)

112 
	#PxOUT
 
P0


	)

113 
	#PxDIR
 
P0DIR


	)

114 
	#PxSEL
 
P0SEL


	)

115 
	#UxCSR
 
U0CSR


	)

116 
	#UxUCR
 
U0UCR


	)

117 
	#UxDBUF
 
U0DBUF


	)

118 
	#UxBAUD
 
U0BAUD


	)

119 
	#UxGCR
 
U0GCR


	)

120 
	#URXxIE
 
URX0IE


	)

121 
	#UTXxIE
 
UTX0IE


	)

122 
	#UTXxIF
 
UTX0IF


	)

123 
	#UxRX_TX
 0x0C

	)

124 
	#HAL_UART_PERCFG_BIT
 0x01

	)

125 
	#HAL_UART_Px_CTS
 0x10

126 
	#HAL_UART_Px_RTS
 0x20

127 #ñ£

	)

128 
	#PxOUT
 
P1


	)

129 
	#PxDIR
 
P1DIR


	)

130 
	#PxSEL
 
P1SEL


	)

131 
	#UxCSR
 
U1CSR


	)

132 
	#UxUCR
 
U1UCR


	)

133 
	#UxDBUF
 
U1DBUF


	)

134 
	#UxBAUD
 
U1BAUD


	)

135 
	#UxGCR
 
U1GCR


	)

136 
	#URXxIE
 
URX1IE


	)

137 
	#UTXxIE
 
UTX1IE


	)

138 
	#UTXxIF
 
UTX1IF


	)

139 
	#UxRX_TX
 0xC0

	)

140 
	#HAL_UART_PERCFG_BIT
 0x02

	)

141 
	#HAL_UART_Px_CTS
 0x10

142 
	#HAL_UART_Px_RTS
 0x20

144 

	)

146 
	#HAL_UART_MSECS_TO_TICKS
 33

	)

148 #i‡
deföed
 
MT_TASK


149 
	#HAL_UART_ISR_TX_MAX
 
MT_UART_DEFAULT_MAX_TX_BUFF


	)

150 
	#HAL_UART_ISR_RX_MAX
 
MT_UART_DEFAULT_MAX_RX_BUFF


	)

151 
	#HAL_UART_ISR_HIGH
 
MT_UART_DEFAULT_THRESHOLD


	)

152 
	#HAL_UART_ISR_IDLE
 (
MT_UART_DEFAULT_IDLE_TIMEOUT
 * 
HAL_UART_MSECS_TO_TICKS
)

	)

154 #i‡!
deföed
 
HAL_UART_ISR_RX_MAX


155 
	#HAL_UART_ISR_RX_MAX
 128

	)

157 #i‡!
deföed
 
HAL_UART_ISR_TX_MAX


158 
	#HAL_UART_ISR_TX_MAX
 
HAL_UART_ISR_RX_MAX


	)

160 #i‡!
deföed
 
HAL_UART_ISR_HIGH


161 
	#HAL_UART_ISR_HIGH
 (
HAL_UART_ISR_RX_MAX
 / 2 - 16)

	)

163 #i‡!
deföed
 
HAL_UART_ISR_IDLE


164 
	#HAL_UART_ISR_IDLE
 (6 * 
HAL_UART_MSECS_TO_TICKS
)

	)

174 
uöt8
 
rxBuf
[
HAL_UART_ISR_RX_MAX
];

175 #i‡
HAL_UART_ISR_RX_MAX
 < 256

176 
uöt8
 
	mrxHód
;

177 vﬁ©ûê
uöt8
 
	mrxTaû
;

179 
uöt16
 
	mrxHód
;

180 vﬁ©ûê
uöt16
 
	mrxTaû
;

182 
uöt8
 
	mrxTick
;

183 
uöt8
 
	mrxShdw
;

185 
uöt8
 
	mtxBuf
[
HAL_UART_ISR_TX_MAX
];

186 #i‡
HAL_UART_ISR_TX_MAX
 < 256

187 vﬁ©ûê
uöt8
 
	mtxHód
;

188 
uöt8
 
	mtxTaû
;

190 vﬁ©ûê
uöt16
 
	mtxHód
;

191 
uöt16
 
	mtxTaû
;

193 
uöt8
 
	mtxMT
;

195 
hÆUARTCBack_t
 
	mu¨tCB
;

196 } 
	tu¨tISRCfg_t
;

210 
u¨tISRCfg_t
 
	gi§Cfg
;

216 
HÆUARTInôISR
();

217 
HÆUARTO≥nISR
(
hÆUARTCfg_t
 *
c⁄fig
);

218 
uöt16
 
HÆUARTRódISR
(
uöt8
 *
buf
, uöt16 
Àn
);

219 
uöt16
 
HÆUARTWrôeISR
(
uöt8
 *
buf
, uöt16 
Àn
);

220 
HÆUARTPﬁlISR
();

221 
uöt16
 
HÆUARTRxAvaûISR
();

222 
HÆUARTSu•ídISR
();

223 
HÆUARTResumeISR
();

234 
	$HÆUARTInôISR
()

237 
P2DIR
 &~
P2DIR_PRIPO
;

238 
P2DIR
 |
HAL_UART_PRIPO
;

240 #i‡(
HAL_UART_ISR
 == 1)

241 
PERCFG
 &~
HAL_UART_PERCFG_BIT
;

243 
PERCFG
 |
HAL_UART_PERCFG_BIT
;

245 
PxSEL
 |
UxRX_TX
;

246 
ADCCFG
 &~
UxRX_TX
;

247 
UxCSR
 = 
CSR_MODE
;

248 
UxUCR
 = 
UCR_FLUSH
;

249 
	}
}

260 
	$HÆUARTO≥nISR
(
hÆUARTCfg_t
 *
c⁄fig
)

262 
i§Cfg
.
u¨tCB
 = 
c⁄fig
->
ˇŒBackFunc
;

264 
	`HAL_UART_ASSERT
((
c⁄fig
->
baudR©e
 =
HAL_UART_BR_9600
) ||

265 (
c⁄fig
->
baudR©e
 =
HAL_UART_BR_19200
) ||

266 (
c⁄fig
->
baudR©e
 =
HAL_UART_BR_38400
) ||

267 (
c⁄fig
->
baudR©e
 =
HAL_UART_BR_57600
) ||

268 (
c⁄fig
->
baudR©e
 =
HAL_UART_BR_115200
));

270 i‡(
c⁄fig
->
baudR©e
 =
HAL_UART_BR_57600
 ||

271 
c⁄fig
->
baudR©e
 =
HAL_UART_BR_115200
)

273 
UxBAUD
 = 216;

277 
UxBAUD
 = 59;

280 
c⁄fig
->
baudR©e
)

282 
HAL_UART_BR_9600
:

283 
UxGCR
 = 8;

285 
HAL_UART_BR_19200
:

286 
UxGCR
 = 9;

288 
HAL_UART_BR_38400
:

289 
HAL_UART_BR_57600
:

290 
UxGCR
 = 10;

293 
UxGCR
 = 11;

298 i‡(
c⁄fig
->
ÊowC⁄åﬁ
)

300 
UxUCR
 = 
UCR_FLOW
 | 
UCR_STOP
;

301 
PxSEL
 |
HAL_UART_Px_RTS
 | 
HAL_UART_Px_CTS
;

305 
UxUCR
 = 
UCR_STOP
;

308 
UxCSR
 |
CSR_RE
;

309 
URXxIE
 = 1;

310 
UxDBUF
 = 0;

311 
	}
}

323 
uöt16
 
	$HÆUARTRódISR
(
uöt8
 *
buf
, 
uöt16
 
Àn
)

325 
uöt16
 
˙t
 = 0;

327 (
i§Cfg
.
rxHód
 !i§Cfg.
rxTaû
Ë&& (
˙t
 < 
Àn
))

329 *
buf
++ = 
i§Cfg
.
rxBuf
[i§Cfg.
rxHód
++];

330 i‡(
i§Cfg
.
rxHód
 >
HAL_UART_ISR_RX_MAX
)

332 
i§Cfg
.
rxHód
 = 0;

334 
˙t
++;

337  
˙t
;

338 
	}
}

350 
uöt16
 
	$HÆUARTWrôeISR
(
uöt8
 *
buf
, 
uöt16
 
Àn
)

352 
uöt16
 
˙t
;

355 i‡(
	`HAL_UART_ISR_TX_AVAIL
(Ë< 
Àn
)

360 
˙t
 = 0; c¡ < 
Àn
; cnt++)

362 
i§Cfg
.
txBuf
[i§Cfg.
txTaû
] = *
buf
++;

363 
i§Cfg
.
txMT
 = 0;

365 i‡(
i§Cfg
.
txTaû
 >
HAL_UART_ISR_TX_MAX
-1)

367 
i§Cfg
.
txTaû
 = 0;

371 
i§Cfg
.
txTaû
++;

375 
IEN2
 |
UTXxIE
;

378  
˙t
;

379 
	}
}

390 
	$HÆUARTPﬁlISR
()

392 i‡(
i§Cfg
.
u¨tCB
 !
NULL
)

394 
uöt16
 
˙t
 = 
	`HAL_UART_ISR_RX_AVAIL
();

395 
uöt8
 
evt
 = 0;

397 i‡(
i§Cfg
.
rxTick
)

400 
uöt8
 
de¸
 = 
ST0
 - 
i§Cfg
.
rxShdw
;

402 i‡(
i§Cfg
.
rxTick
 > 
de¸
)

404 
i§Cfg
.
rxTick
 -
de¸
;

408 
i§Cfg
.
rxTick
 = 0;

411 
i§Cfg
.
rxShdw
 = 
ST0
;

413 i‡(
˙t
 >
HAL_UART_ISR_RX_MAX
-1)

415 
evt
 = 
HAL_UART_RX_FULL
;

417 i‡(
˙t
 >
HAL_UART_ISR_HIGH
)

419 
evt
 = 
HAL_UART_RX_ABOUT_FULL
;

421 i‡(
˙t
 && !
i§Cfg
.
rxTick
)

423 
evt
 = 
HAL_UART_RX_TIMEOUT
;

426 i‡(
i§Cfg
.
txMT
)

428 
i§Cfg
.
txMT
 = 0;

429 
evt
 |
HAL_UART_TX_EMPTY
;

432 i‡(
evt
)

434 
i§Cfg
.
	`u¨tCB
(
HAL_UART_ISR
-1, 
evt
);

437 
	}
}

448 
uöt16
 
	$HÆUARTRxAvaûISR
()

450  
	`HAL_UART_ISR_RX_AVAIL
();

451 
	}
}

462 
	$HÆUARTSu•ídISR
( )

464 
UxCSR
 &~
CSR_RE
;

465 
	}
}

476 
	$HÆUARTResumeISR
( )

478 
UxUCR
 |
UCR_FLUSH
;

479 
UxCSR
 |
CSR_RE
;

480 
	}
}

491 #i‡(
HAL_UART_ISR
 == 1)

492 
	$HAL_ISR_FUNCTION
–
hÆU¨t0RxI§
, 
URX0_VECTOR
 )

494 
	$HAL_ISR_FUNCTION
–
hÆU¨t1RxI§
, 
URX1_VECTOR
 )

497 
uöt8
 
tmp
 = 
UxDBUF
;

498 
i§Cfg
.
rxBuf
[i§Cfg.
rxTaû
] = 
tmp
;

501 i‡(
i§Cfg
.
rxHód
 =i§Cfg.
rxTaû
)

503 
i§Cfg
.
rxShdw
 = 
ST0
;

506 i‡(++
i§Cfg
.
rxTaû
 >
HAL_UART_ISR_RX_MAX
)

508 
i§Cfg
.
rxTaû
 = 0;

511 
i§Cfg
.
rxTick
 = 
HAL_UART_ISR_IDLE
;

512 
	}
}

523 #i‡(
HAL_UART_ISR
 == 1)

524 
	$HAL_ISR_FUNCTION
–
hÆU¨t0TxI§
, 
UTX0_VECTOR
 )

526 
	$HAL_ISR_FUNCTION
–
hÆU¨t1TxI§
, 
UTX1_VECTOR
 )

529 i‡(
i§Cfg
.
txHód
 =i§Cfg.
txTaû
)

531 
IEN2
 &~
UTXxIE
;

532 
i§Cfg
.
txMT
 = 1;

536 
UTXxIF
 = 0;

537 
UxDBUF
 = 
i§Cfg
.
txBuf
[i§Cfg.
txHód
++];

539 i‡(
i§Cfg
.
txHód
 >
HAL_UART_ISR_TX_MAX
)

541 
i§Cfg
.
txHód
 = 0;

544 
	}
}

	@Components/hal/target/CC2530EB/hal_adc.c

43 
	~"hÆ_mcu.h
"

44 
	~"hÆ_defs.h
"

45 
	~"hÆ_ty≥s.h
"

46 
	~"hÆ_adc.h
"

51 
	#HAL_ADC_EOC
 0x80

	)

52 
	#HAL_ADC_START
 0x40

	)

54 
	#HAL_ADC_STSEL_EXT
 0x00

	)

55 
	#HAL_ADC_STSEL_FULL
 0x10

	)

56 
	#HAL_ADC_STSEL_T1C0
 0x20

	)

57 
	#HAL_ADC_STSEL_ST
 0x30

	)

59 
	#HAL_ADC_RAND_NORM
 0x00

	)

60 
	#HAL_ADC_RAND_LFSR
 0x04

	)

61 
	#HAL_ADC_RAND_SEED
 0x08

	)

62 
	#HAL_ADC_RAND_STOP
 0x0¯

	)

63 
	#HAL_ADC_RAND_BITS
 0x0¯

	)

65 
	#HAL_ADC_REF_125V
 0x00

	)

66 
	#HAL_ADC_REF_AIN7
 0x40

	)

67 
	#HAL_ADC_REF_AVDD
 0x80

	)

68 
	#HAL_ADC_REF_DIFF
 0xc0

	)

69 
	#HAL_ADC_REF_BITS
 0xc0

	)

71 
	#HAL_ADC_DEC_064
 0x00

	)

72 
	#HAL_ADC_DEC_128
 0x10

	)

73 
	#HAL_ADC_DEC_256
 0x20

	)

74 
	#HAL_ADC_DEC_512
 0x30

	)

75 
	#HAL_ADC_DEC_BITS
 0x30

	)

77 
	#HAL_ADC_CHN_AIN0
 0x00

	)

78 
	#HAL_ADC_CHN_AIN1
 0x01

	)

79 
	#HAL_ADC_CHN_AIN2
 0x02

	)

80 
	#HAL_ADC_CHN_AIN3
 0x03

	)

81 
	#HAL_ADC_CHN_AIN4
 0x04

	)

82 
	#HAL_ADC_CHN_AIN5
 0x05

	)

83 
	#HAL_ADC_CHN_AIN6
 0x06

	)

84 
	#HAL_ADC_CHN_AIN7
 0x07

	)

85 
	#HAL_ADC_CHN_A0A1
 0x08

	)

86 
	#HAL_ADC_CHN_A2A3
 0x09

	)

87 
	#HAL_ADC_CHN_A4A5
 0x0®

	)

88 
	#HAL_ADC_CHN_A6A7
 0x0b

	)

89 
	#HAL_ADC_CHN_GND
 0x0¯

	)

90 
	#HAL_ADC_CHN_VREF
 0x0d

	)

91 
	#HAL_ADC_CHN_TEMP
 0x0ê

	)

92 
	#HAL_ADC_CHN_VDD3
 0x0‡

	)

93 
	#HAL_ADC_CHN_BITS
 0x0‡

	)

95 
	#HAL_ADC_STSEL
 
HAL_ADC_STSEL_ST


	)

96 
	#HAL_ADC_RAND_GEN
 
HAL_ADC_RAND_STOP


	)

97 
	#HAL_ADC_REF_VOLT
 
HAL_ADC_REF_AVDD


	)

98 
	#HAL_ADC_DEC_RATE
 
HAL_ADC_DEC_064


	)

99 
	#HAL_ADC_SCHN
 
HAL_ADC_CHN_VDD3


	)

100 
	#HAL_ADC_ECHN
 
HAL_ADC_CHN_GND


	)

104 
__code
 c⁄° 
uöt16
 
	gHÆAdcVddLimô
[] =

121 
	#HAL_ADC_CLR_EOC
(Ë
	`asm
("PUSH A");ásm("MOV A,ADCL");ásm("MOV A,ADCH");ásm("POP A");

	)

134 
boﬁ
 
HÆAdcCheckVdd
 (
uöt8
 
limô
);

145 
	$HÆAdcInô
 ()

147 #i‡(
HAL_ADC
 =
TRUE
)

148 vﬁ©ûê
uöt8
 
tmp
;

150 
ADCCON1
 = 
HAL_ADC_STSEL
 | 
HAL_ADC_RAND_GEN
 | 0x03;

151 
ADCCON2
 = 
HAL_ADC_REF_VOLT
 | 
HAL_ADC_DEC_RATE
 | 
HAL_ADC_SCHN
;

156 
tmp
 = 
ADCL
;

157 
tmp
 = 
ADCH
;

158 
ADCCON3
 = 
HAL_ADC_REF_VOLT
 | 
HAL_ADC_DEC_RATE
 | 
HAL_ADC_ECHN
;

159 (
ADCCON1
 & 
HAL_ADC_EOC
) != HAL_ADC_EOC);

160 
tmp
 = 
ADCL
;

161 
tmp
 = 
ADCH
;

162 
ADCCON3
 = 
HAL_ADC_REF_VOLT
 | 
HAL_ADC_DEC_RATE
 | 
HAL_ADC_ECHN
;

163 (
ADCCON1
 & 
HAL_ADC_EOC
) != HAL_ADC_EOC);

164 
tmp
 = 
ADCL
;

165 
tmp
 = 
ADCH
;

167 
	}
}

180 
uöt16
 
	$HÆAdcRód
 (
uöt8
 
ch™√l
, uöt8 
ªsﬁuti⁄
)

182 
öt16
 
ªadög
 = 0;

184 #i‡(
HAL_ADC
 =
TRUE
)

186 
uöt8
 
i
, 
ªsbôs
;

187 
uöt8
 
ad˘emp
;

188 vﬁ©ûê
uöt8
 
tmp
;

189 
uöt8
 
adcCh™√l
 = 1;

199 i‡(
ch™√l
 < 8)

201 
i
=0; i < 
ch™√l
; i++)

203 
adcCh™√l
 <<= 1;

208 
ADCCFG
 |
adcCh™√l
;

211 
ªsﬁuti⁄
)

213 
HAL_ADC_RESOLUTION_8
:

214 
ªsbôs
 = 
HAL_ADC_DEC_064
;

216 
HAL_ADC_RESOLUTION_10
:

217 
ªsbôs
 = 
HAL_ADC_DEC_128
;

219 
HAL_ADC_RESOLUTION_12
:

220 
ªsbôs
 = 
HAL_ADC_DEC_256
;

222 
HAL_ADC_RESOLUTION_14
:

224 
ªsbôs
 = 
HAL_ADC_DEC_512
;

229 
tmp
 = 
ADCL
;

230 
tmp
 = 
ADCH
;

233 
ad˘emp
 = 
ADCCON3
;

234 
ad˘emp
 &~(
HAL_ADC_CHN_BITS
 | 
HAL_ADC_DEC_BITS
 | 
HAL_ADC_REF_BITS
);

235 
ad˘emp
 |
ch™√l
 | 
ªsbôs
 | 
HAL_ADC_REF_VOLT
;

238 
ADCCON3
 = 
ad˘emp
;

241 !(
ADCCON1
 & 
HAL_ADC_EOC
));

244 
ADCCFG
 &(
adcCh™√l
 ^ 0xFF);

247 
ªadög
 = (
öt16
Ë(
ADCL
);

248 
ªadög
 |(
öt16
Ë(
ADCH
 << 8);

251 i‡(
ªadög
 < 0)

252 
ªadög
 = 0;

254 
ªsﬁuti⁄
)

256 
HAL_ADC_RESOLUTION_8
:

257 
ªadög
 >>= 8;

259 
HAL_ADC_RESOLUTION_10
:

260 
ªadög
 >>= 6;

262 
HAL_ADC_RESOLUTION_12
:

263 
ªadög
 >>= 4;

265 
HAL_ADC_RESOLUTION_14
:

271 (Ë
ch™√l
;

272 (Ë
ªsﬁuti⁄
;

275  ((
uöt16
)
ªadög
);

276 
	}
}

288 
boﬁ
 
	$HÆAdcCheckVdd
 (
uöt8
 
limô
)

290 
uöt16
 
vÆue
;

293 
ADCIF
 = 0;

296 
ADCCON3
 = (
HAL_ADC_REF_125V
 | 
HAL_ADC_DEC_064
 | 
HAL_ADC_CHN_VDD3
);

299  !
ADCIF
 );

302 
vÆue
 = 
ADCL
;

303 
vÆue
 |((
uöt16
Ë
ADCH
) << 8;

306  ( 
vÆue
 >
HÆAdcVddLimô
[
limô
] );

307 
	}
}

	@Components/hal/target/CC2530EB/hal_aes.h

40 #i‚de‡ 
HAL_AES_H_


41 
	#HAL_AES_H_


	)

43 
	~"ZComDef.h
"

45 
	#STATE_BLENGTH
 16

46 
	#KEY_BLENGTH
 16

47 
	#KEY_EXP_LENGTH
 176

48 

	)

53 #i‡((
deföed
 
SOFTWARE_AES
Ë&& (SOFTWARE_AES =
TRUE
)Ë&& ((deföed 
SW_AES_AND_KEY_EXP
) && (SW_AES_AND_KEY_EXP == TRUE))

57 
HÆAesInô
( );

58 
AesLﬂdBlock
–
uöt8
 * );

59 
AesSèπBlock
–
uöt8
 *, uint8 * );

60 
AesSèπSh‹tBlock
–
uöt8
 *, uint8 * );

61 
AesLﬂdIV
(
uöt8
 *);

62 
AesDmaSëup
–
uöt8
 *, 
uöt16
, uint8 *, uint16 );

63 
AesLﬂdKey
–
uöt8
 * );

65 (*
pS•AesEn¸y±
)–
uöt8
 *, uint8 * );

66 
	`s•_HW_KeyInô
 (
uöt8
 *);

67 
	`s•KeyEx∑nsi⁄
 (
uöt8
 *, uint8 *);

69 
	`s•AesEn¸y±HW
 (
uöt8
 *, uint8 *);

70 
	`s•AesEn¸y±KeyExp
 (
uöt8
 *, uint8 *);

71 
	`s•AesEn¸y±Basic
 (
uöt8
 *, uint8 *);

75 
	#AES_BUSY
 0x08

	)

76 
	#ENCRYPT
 0x00

	)

77 
	#DECRYPT
 0x01

	)

80 
	#AES_SETMODE
(
mode
Ëdÿ{ 
ENCCS
 &~0x70; ENCCS |mode; 
	}
} 0)

	)

83 
	#CBC
 0x00

	)

84 
	#CFB
 0x10

	)

85 
	#OFB
 0x20

	)

86 
	#CTR
 0x30

	)

87 
	#ECB
 0x40

	)

88 
	#CBC_MAC
 0x50

	)

91 
	#AES_SET_ENCR_DECR_KEY_IV
(
mode
Ë\

	)

93 
	gENCCS
 = (
ENCCS
 & ~0x07Ë| 
mode
 \

97 
	#AES_ENCRYPT
 0x00;

	)

98 
	#AES_DECRYPT
 0x02;

	)

99 
	#AES_LOAD_KEY
 0x04;

	)

100 
	#AES_LOAD_IV
 0x06;

	)

104 
	#AES_START
(Ë
ENCCS
 |0x01

	)

107 
	#HAL_DMA_AES_IN
 1

	)

108 
	#HAL_DMA_AES_OUT
 2

	)

111 
	#HAL_AES_IN_ADDR
 0x70B1

	)

112 
	#HAL_AES_OUT_ADDR
 0x70B2

	)

114 #i‡!
	`deföed
 (
HAL_AES_DMA
Ë|| (HAL_AES_DMA =
FALSE
)

115 
	#HAL_AES_DELAY
(Ë\

	)

117 
uöt8
 
dñay
 = 15; \

118 
dñay
--); \

119 
	}
} 0)

	@Components/hal/target/CC2530EB/hal_board_cfg.h

40 #i‚de‡
HAL_BOARD_CFG_H


41 
	#HAL_BOARD_CFG_H


	)

59 
	~"hÆ_mcu.h
"

60 
	~"hÆ_defs.h
"

61 
	~"hÆ_ty≥s.h
"

70 
	#xHAL_PA_LNA


	)

79 #i‡!
deföed
 (
HAL_BOARD_CC2530EB_REV17
Ë&& !deföed (
HAL_BOARD_CC2530EB_REV13
)

80 
	#HAL_BOARD_CC2530EB_REV13


	)

87 
	#HAL_CPU_CLOCK_MHZ
 32

	)

90 #i‡!
deföed
 (
OSC32K_CRYSTAL_INSTALLED
Ë|| (deföed (OSC32K_CRYSTAL_INSTALLEDË&& (OSC32K_CRYSTAL_INSTALLED =
TRUE
))

91 
	#OSC_32KHZ
 0x00

	)

93 
	#OSC_32KHZ
 0x80

	)

101 #i‡
deföed
 (
HAL_BOARD_CC2530EB_REV17
Ë&& !deföed (
HAL_PA_LNA
Ë&& !deföed (
HAL_PA_LNA_CC2590
)

102 
	#HAL_NUM_LEDS
 3

	)

103 #ñi‡
deföed
 (
HAL_BOARD_CC2530EB_REV13
Ë|| deföed (
HAL_PA_LNA
Ë|| deföed (
HAL_PA_LNA_CC2590
)

104 
	#HAL_NUM_LEDS
 1

	)

106 #îr‹ 
Unknown
 
Bﬂrd
 
Indítifõr


109 
	#HAL_LED_BLINK_DELAY
(Ë
	`°
–{ vﬁ©ûê
uöt32
 
i
; i=0; i<0x5800; i++Ë{ }; } )

	)

112 
	#LED1_BV
 
	`BV
(0)

	)

113 
	#LED1_SBIT
 
P1_0


	)

114 
	#LED1_DDR
 
P1DIR


	)

115 
	#LED1_POLARITY
 
ACTIVE_HIGH


	)

117 #i‡ 
deföed
(
HAL_BOARD_CC2530EB_REV17
)||deföed(
HAL_BOARD_CC2530EB_REV13
)

119 
	#LED2_BV
 
	`BV
(1)

	)

120 
	#LED2_SBIT
 
P1_1


	)

121 
	#LED2_DDR
 
P1DIR


	)

122 
	#LED2_POLARITY
 
ACTIVE_HIGH


	)

125 
	#LED3_BV
 
	`BV
(0)

126 
	#LED3_SBIT
 
P1_0


	)

127 
	#LED3_DDR
 
P1DIR


	)

128 
	#LED3_POLARITY
 
ACTIVE_HIGH


	)

136 
	#ACTIVE_LOW
 !!

	)

137 
	#ACTIVE_HIGH
 !

	)

140 
	#PUSH1_BV
 
	`BV
(1)

141 
	#PUSH1_SBIT
 
P2_1


	)

143 #ifde‡
HAL_BOARD_CC2530EB_REV17


144 
	#PUSH1_POLARITY
 
ACTIVE_HIGH


	)

145 #ñi‡
deföed
 (
HAL_BOARD_CC2530EB_REV13
)

146 
	#PUSH1_POLARITY
 
ACTIVE_LOW


	)

148 #îr‹ 
Unknown
 
Bﬂrd
 
Indítifõr


152 
	#PUSH2_BV
 
	`BV
(2)

153 
	#PUSH2_SBIT
 
P2_2


	)

154 
	#PUSH2_POLARITY
 
ACTIVE_HIGH


	)

162 
	#HAL_FLASH_PAGE_PER_BANK
 16

	)

164 
	#HAL_FLASH_PAGE_SIZE
 2048

	)

165 
	#HAL_FLASH_WORD_SIZE
 4

	)

168 
	#HAL_FLASH_PAGE_MAP
 0x8000

	)

171 #i‡
deföed
 
NON_BANKED


172 
	#HAL_FLASH_LOCK_BITS
 16

	)

173 
	#HAL_NV_PAGE_END
 30

	)

175 
	#HAL_FLASH_LOCK_BITS
 16

	)

176 
	#HAL_NV_PAGE_END
 126

	)

180 
	#HAL_FLASH_IEEE_SIZE
 8

	)

181 
	#HAL_FLASH_IEEE_PAGE
 (
HAL_NV_PAGE_END
+1)

	)

182 
	#HAL_FLASH_IEEE_OSET
 (
HAL_FLASH_PAGE_SIZE
 - 
HAL_FLASH_LOCK_BITS
 - 
HAL_FLASH_IEEE_SIZE
)

	)

183 
	#HAL_INFOP_IEEE_OSET
 0xC

	)

185 
	#HAL_NV_PAGE_CNT
 6

	)

186 
	#HAL_NV_PAGE_BEG
 (
HAL_NV_PAGE_END
-
HAL_NV_PAGE_CNT
+1)

	)

189 
	#HAL_NV_DMA_CH
 0

	)

190 
	#HAL_DMA_CH_RX
 3

	)

191 
	#HAL_DMA_CH_TX
 4

	)

193 
	#HAL_NV_DMA_GET_DESC
(Ë
	`HAL_DMA_GET_DESC0
()

	)

194 
	#HAL_NV_DMA_SET_ADDR
(
a
Ë
	`HAL_DMA_SET_ADDR_DESC0
(◊))

	)

203 #i‡
deföed
 (
HAL_BOARD_CC2530EB_REV17
Ë&& !deföed (
HAL_PA_LNA
Ë&& !deföed (
HAL_PA_LNA_CC2590
)

205 
	#HAL_BOARD_INIT
(Ë\

	)

207 
uöt16
 
	gi
; \

209 
	gSLEEPCMD
 &~
OSC_PD
; \

210 !(
	gSLEEPSTA
 & 
	gXOSC_STB
)); \

211 
asm
("NOP"); \

212 
	gi
=0; i<504; i++Ë
asm
("NOP"); \

213 
	gCLKCONCMD
 = (
CLKCONCMD_32MHZ
 | 
OSC_32KHZ
); \

214 
	gCLKCONSTA
 !(
CLKCONCMD_32MHZ
 | 
OSC_32KHZ
)); \

215 
	gSLEEPCMD
 |
OSC_PD
; \

218 
	gLED1_DDR
 |
LED1_BV
; \

219 
	gLED2_DDR
 |
LED2_BV
; \

220 
	gLED3_DDR
 |
LED3_BV
; \

223 
	gP0INP
 |
PUSH2_BV
; \

226 #ñi‡
deföed
 (
HAL_BOARD_CC2530EB_REV13
Ë|| deföed (
HAL_PA_LNA
Ë|| deföed (
HAL_PA_LNA_CC2590
)

228 
	#HAL_BOARD_INIT
(Ë\

	)

230 
uöt16
 
	gi
; \

232 
	gSLEEPCMD
 &~
OSC_PD
; \

233 !(
	gSLEEPSTA
 & 
	gXOSC_STB
)); \

234 
asm
("NOP"); \

235 
	gi
=0; i<504; i++Ë
asm
("NOP"); \

236 
	gCLKCONCMD
 = (
CLKCONCMD_32MHZ
 | 
OSC_32KHZ
); \

237 
	gCLKCONSTA
 !(
CLKCONCMD_32MHZ
 | 
OSC_32KHZ
)); \

238 
	gSLEEPCMD
 |
OSC_PD
; \

241 
	gLED1_DDR
 |
LED1_BV
; \

244 
	gP0DIR
 |
BV
(7); \

247 
	gP0INP
 |
PUSH2_BV
; \

253 
	#HAL_DEBOUNCE
(
ex¥
Ë{ 
i
; i=0; i<500; i++Ë{ i‡(!”x¥)Ëò0; } }

	)

256 
	#HAL_PUSH_BUTTON1
(Ë(
	`PUSH1_POLARITY
 (
PUSH1_SBIT
))

	)

257 
	#HAL_PUSH_BUTTON2
(Ë(
	`PUSH2_POLARITY
 (
PUSH2_SBIT
))

	)

258 
	#HAL_PUSH_BUTTON3
(Ë(0)

	)

259 
	#HAL_PUSH_BUTTON4
(Ë(0)

	)

260 
	#HAL_PUSH_BUTTON5
(Ë(0)

	)

261 
	#HAL_PUSH_BUTTON6
(Ë(0)

	)

264 #i‡
deföed
 (
HAL_BOARD_CC2530EB_REV17
Ë&& !deföed (
HAL_PA_LNA
Ë&& !deföed (
HAL_PA_LNA_CC2590
)

266 
	#HAL_TURN_OFF_LED1
(Ë
	`°
–
LED1_SBIT
 = 
	`LED1_POLARITY
 (0); )

	)

267 
	#HAL_TURN_OFF_LED2
(Ë
	`°
–
LED2_SBIT
 = 
	`LED2_POLARITY
 (0); )

	)

268 
	#HAL_TURN_OFF_LED3
(Ë
	`°
–
LED3_SBIT
 = 
	`LED3_POLARITY
 (0); )

	)

269 
	#HAL_TURN_OFF_LED4
(Ë
	`HAL_TURN_OFF_LED1
()

	)

271 
	#HAL_TURN_ON_LED1
(Ë
	`°
–
LED1_SBIT
 = 
	`LED1_POLARITY
 (1); )

	)

272 
	#HAL_TURN_ON_LED2
(Ë
	`°
–
LED2_SBIT
 = 
	`LED2_POLARITY
 (1); )

	)

273 
	#HAL_TURN_ON_LED3
(Ë
	`°
–
LED3_SBIT
 = 
	`LED3_POLARITY
 (1); )

	)

274 
	#HAL_TURN_ON_LED4
(Ë
	`HAL_TURN_ON_LED1
()

	)

276 
	#HAL_TOGGLE_LED1
(Ë
	`°
–i‡(
LED1_SBIT
Ë{ LED1_SBIT = 0; } { LED1_SBIT = 1;} )

	)

277 
	#HAL_TOGGLE_LED2
(Ë
	`°
–i‡(
LED2_SBIT
Ë{ LED2_SBIT = 0; } { LED2_SBIT = 1;} )

	)

278 
	#HAL_TOGGLE_LED3
(Ë
	`°
–i‡(
LED3_SBIT
Ë{ LED3_SBIT = 0; } { LED3_SBIT = 1;} )

	)

279 
	#HAL_TOGGLE_LED4
(Ë
	`HAL_TOGGLE_LED1
()

	)

281 
	#HAL_STATE_LED1
(Ë(
	`LED1_POLARITY
 (
LED1_SBIT
))

	)

282 
	#HAL_STATE_LED2
(Ë(
	`LED2_POLARITY
 (
LED2_SBIT
))

	)

283 
	#HAL_STATE_LED3
(Ë(
	`LED3_POLARITY
 (
LED3_SBIT
))

	)

284 
	#HAL_STATE_LED4
(Ë
	`HAL_STATE_LED1
()

	)

286 #ñi‡
deföed
 (
HAL_BOARD_CC2530EB_REV13
Ë|| deföed (
HAL_PA_LNA
Ë|| deföed (
HAL_PA_LNA_CC2590
)

288 
	#HAL_TURN_OFF_LED1
(Ë
	`°
–
LED1_SBIT
 = 
	`LED1_POLARITY
 (0); )

	)

289 
	#HAL_TURN_OFF_LED2
(Ë
	`°
–
LED2_SBIT
 = 
	`LED2_POLARITY
 (0); )

	)

290 
	#HAL_TURN_OFF_LED3
(Ë
	`HAL_TURN_OFF_LED1
()

	)

291 
	#HAL_TURN_OFF_LED4
(Ë
	`HAL_TURN_OFF_LED1
()

	)

293 
	#HAL_TURN_ON_LED1
(Ë
	`°
–
LED1_SBIT
 = 
	`LED1_POLARITY
 (1); )

	)

294 
	#HAL_TURN_ON_LED2
(Ë
	`°
–
LED2_SBIT
 = 
	`LED2_POLARITY
 (1); )

	)

295 
	#HAL_TURN_ON_LED3
(Ë
	`HAL_TURN_ON_LED1
()

	)

296 
	#HAL_TURN_ON_LED4
(Ë
	`HAL_TURN_ON_LED1
()

	)

298 
	#HAL_TOGGLE_LED1
(Ë
	`°
–i‡(
LED1_SBIT
Ë{ LED1_SBIT = 0; } { LED1_SBIT = 1;} )

	)

299 
	#HAL_TOGGLE_LED2
(Ë
	`°
–i‡(
LED2_SBIT
Ë{ LED2_SBIT = 0; } { LED2_SBIT = 1;} )

	)

300 
	#HAL_TOGGLE_LED3
(Ë
	`HAL_TOGGLE_LED1
()

	)

301 
	#HAL_TOGGLE_LED4
(Ë
	`HAL_TOGGLE_LED1
()

	)

303 
	#HAL_STATE_LED1
(Ë(
	`LED1_POLARITY
 (
LED1_SBIT
))

	)

304 
	#HAL_STATE_LED2
(Ë(
	`LED2_POLARITY
 (
LED2_SBIT
))

	)

305 
	#HAL_STATE_LED3
(Ë
	`HAL_STATE_LED1
()

	)

306 
	#HAL_STATE_LED4
(Ë
	`HAL_STATE_LED1
()

	)

311 
	#XNV_SPI_BEGIN
(Ë
	`°
(
P1_3
 = 0;)

	)

312 
	#XNV_SPI_TX
(
x
Ë
	`°
(
U1CSR
 &~0x02; 
U1DBUF
 = (x);)

	)

313 
	#XNV_SPI_RX
(Ë
U1DBUF


	)

314 
	#XNV_SPI_WAIT_RXRDY
(Ë
	`°
(!(
U1CSR
 & 0x02));)

	)

315 
	#XNV_SPI_END
(Ë
	`°
(
P1_3
 = 1;)

	)

318 
	#XNV_SPI_INIT
(Ë\

	)

319 
°
( \

321 
U1CSR
 = 0; \

324 
U1GCR
 = 11; \

325 
U1BAUD
 = 216; \

328 
U1GCR
 |
BV
(5); \

331 
PERCFG
 |= 0x02; \

334 
P1SEL
 |= 0xE0; \

336 
P1SEL
 &= ~0x0E; \

337 
P1
 |= 0x0E; \

338 
P1_1
 = 0; \

339 
P1DIR
 |= 0x0E; \

342 
P2SEL
 &= ~0x20; \

345 
U1CSR
 |= 0x40; \

347 
P1_1
 = 1; \

356 #i‚de‡
HAL_TIMER


357 
	#HAL_TIMER
 
FALSE


	)

361 #i‚de‡
HAL_ADC


362 
	#HAL_ADC
 
TRUE


	)

366 #i‚de‡
HAL_DMA


367 
	#HAL_DMA
 
TRUE


	)

371 #i‚de‡
HAL_FLASH


372 
	#HAL_FLASH
 
TRUE


	)

376 #i‚de‡
HAL_AES


377 
	#HAL_AES
 
TRUE


	)

380 #i‚de‡
HAL_AES_DMA


381 
	#HAL_AES_DMA
 
TRUE


	)

385 #i‚de‡
HAL_LCD


386 
	#HAL_LCD
 
TRUE


	)

390 #i‚de‡
HAL_LED


391 
	#HAL_LED
 
TRUE


	)

393 #i‡(!
deföed
 
BLINK_LEDS
Ë&& (
HAL_LED
 =
TRUE
)

394 
	#BLINK_LEDS


	)

398 #i‚de‡
HAL_KEY


399 
	#HAL_KEY
 
TRUE


	)

403 #i‚de‡
HAL_UART


404 #i‡(
deföed
 
ZAPP_P1
Ë|| (deföed 
ZAPP_P2
Ë|| (deföed 
ZTOOL_P1
Ë|| (deföed 
ZTOOL_P2
)

405 
	#HAL_UART
 
TRUE


	)

407 
	#HAL_UART
 
FALSE


	)

411 #i‡
HAL_UART


413 #i‡
HAL_DMA


414 #i‚de‡
HAL_UART_DMA


415 #i‡(
deföed
 
ZAPP_P1
Ë|| (deföed 
ZTOOL_P1
)

416 
	#HAL_UART_DMA
 1

	)

417 #ñi‡(
deföed
 
ZAPP_P2
Ë|| (deföed 
ZTOOL_P2
)

418 
	#HAL_UART_DMA
 2

	)

420 
	#HAL_UART_DMA
 1

	)

423 
	#HAL_UART_ISR
 0

	)

425 #i‚de‡
HAL_UART_ISR


426 #i‡(
deföed
 
ZAPP_P1
Ë|| (deföed 
ZTOOL_P1
)

427 
	#HAL_UART_ISR
 1

	)

428 #ñi‡(
deföed
 
ZAPP_P2
Ë|| (deföed 
ZTOOL_P2
)

429 
	#HAL_UART_ISR
 2

	)

431 
	#HAL_UART_ISR
 1

	)

434 
	#HAL_UART_DMA
 0

	)

438 #i‡((
HAL_UART_DMA
 =1Ë|| (
HAL_UART_ISR
 == 1))

439 
	#HAL_UART_PRIPO
 0x00

	)

441 
	#HAL_UART_PRIPO
 0x40

	)

445 
	#HAL_UART_DMA
 0

	)

446 
	#HAL_UART_ISR
 0

	)

	@Components/hal/target/CC2530EB/hal_dma.c

44 
	~"hÆ_ty≥s.h
"

45 
	~"hÆ_defs.h
"

46 
	~"hÆ_dma.h
"

47 
	~"hÆ_mcu.h
"

48 
	~"hÆ_u¨t.h
"

50 #i‡(
deföed
 
HAL_IRGEN
Ë&& (HAL_IRGEN =
TRUE
)

51 
	~"hÆ_úgí.h
"

54 #i‡(
deföed
 
HAL_SPI
Ë&& (HAL_SPI =
TRUE
)

55 
	~"hÆ_•i.h
"

59 #i‡((
deföed
 
HAL_DMA
Ë&& (HAL_DMA =
TRUE
))

77 
hÆDMADesc_t
 
	gdmaCh0
;

78 
hÆDMADesc_t
 
	gdmaCh1234
[4];

101 
	$HÆDmaInô
( )

103 
	`HAL_DMA_SET_ADDR_DESC0
–&
dmaCh0
 );

104 
	`HAL_DMA_SET_ADDR_DESC1234
–
dmaCh1234
 );

105 #i‡(
HAL_UART_DMA
 || \

106 ((
deföed
 
HAL_SPI
Ë&& (HAL_SPI =
TRUE
)) || \

107 ((
deföed
 
HAL_IRGEN
Ë&& (HAL_IRGEN =
TRUE
)))

108 
DMAIE
 = 1;

110 
	}
}

112 #i‡(
HAL_UART_DMA
 || \

113 ((
deföed
 
	gHAL_SPI
Ë&& (HAL_SPI =
TRUE
)) || \

114 ((
deföed
 
HAL_IRGEN
Ë&& (HAL_IRGEN =
TRUE
)))

124 
	$HAL_ISR_FUNCTION
–
hÆDmaI§
, 
DMA_VECTOR
 )

126 
	`HÆUARTI§DMA
();

128 
DMAIF
 = 0;

130 #i‡
HAL_UART_DMA


131 i‡(
	`HAL_DMA_CHECK_IRQ
(
HAL_DMA_CH_TX
))

133 
	`HÆUARTI§DMA
();

137 #i‡(
deföed
 
HAL_SPI
Ë&& (HAL_SPI =
TRUE
)

138 i‡–
	`HAL_DMA_CHECK_IRQ
–
HAL_DMA_CH_RX
 ) )

140 
	`HAL_DMA_CLEAR_IRQ
–
HAL_DMA_CH_RX
 );

141 
	`≈SpiRxI§
();

144 i‡–
	`HAL_DMA_CHECK_IRQ
–
HAL_DMA_CH_TX
 ) )

146 
	`HAL_DMA_CLEAR_IRQ
–
HAL_DMA_CH_TX
 );

147 
	`≈SpiTxI§
();

151 #i‡(
deföed
 
HAL_IRGEN
Ë&& (HAL_IRGEN =
TRUE
)

152 i‡–
HAL_IRGEN
 =
TRUE
 && 
	`HAL_DMA_CHECK_IRQ
–
HAL_IRGEN_DMA_CH
 ) )

154 
	`HAL_DMA_CLEAR_IRQ
–
HAL_IRGEN_DMA_CH
 );

155 
	`HÆIrGíDmaI§
();

158 
	}
}

	@Components/hal/target/CC2530EB/hal_dma.h

40 #i‚de‡
HAL_DMA_H


41 
	#HAL_DMA_H


	)

43 #ifde‡
__˝lu•lus


52 
	~"hÆ_bﬂrd.h
"

53 
	~"hÆ_ty≥s.h
"

55 #i‡((
deföed
 
HAL_DMA
Ë&& (HAL_DMA =
TRUE
))

61 
	#HAL_DMA_SET_ADDR_DESC0
–
a
 ) \

	)

62 
°
( \

63 
DMA0CFGH
 = (
uöt8
)–(
uöt16
)(
a
) >> 8 ); \

64 
DMA0CFGL
 = (
uöt8
)–(
uöt16
)(
a
) ); \

67 
	#HAL_DMA_SET_ADDR_DESC1234
–
a
 ) \

	)

68 
°
( \

69 
DMA1CFGH
 = (
uöt8
)–(
uöt16
)(
a
) >> 8 ); \

70 
DMA1CFGL
 = (
uöt8
)–(
uöt16
)(
a
) ); \

73 
	#HAL_DMA_GET_DESC0
(Ë&
dmaCh0


	)

75 
	#HAL_DMA_GET_DESC1234
–
a
 ) (
dmaCh1234
+(◊)-1))

	)

77 
	#HAL_DMA_ARM_CH
–
ch
 ) 
DMAARM
 = (0x01 << (ch))

	)

79 
	#HAL_DMA_CH_ARMED
–
ch
 ) (
DMAARM
 & (0x01 << (ch)))

	)

81 
	#HAL_DMA_ABORT_CH
–
ch
 ) 
DMAARM
 = (0x80 | (0x01 << (ch)))

	)

82 
	#HAL_DMA_MAN_TRIGGER
–
ch
 ) 
DMAREQ
 = (0x01 << (ch))

	)

83 
	#HAL_DMA_START_CH
–
ch
 ) 
	`HAL_DMA_MAN_TRIGGER
–(chË)

	)

85 
	#HAL_DMA_CLEAR_IRQ
–
ch
 ) 
DMAIRQ
 &~–1 << (chË)

	)

87 
	#HAL_DMA_CHECK_IRQ
–
ch
 ) (
DMAIRQ
 & ( 1 << (chË))

	)

90 
	#HAL_DMA_SET_SOURCE
–
pDesc
, 
§c
 ) \

	)

91 
°
( \

92 
pDesc
->
§cAddrH
 = (
uöt8
)((
uöt16
)(
§c
) >> 8); \

93 
pDesc
->
§cAddrL
 = (
uöt8
)(
uöt16
)(
§c
); \

97 
	#HAL_DMA_SET_DEST
–
pDesc
, 
d°
 ) \

	)

98 
°
( \

99 
pDesc
->
d°AddrH
 = (
uöt8
)((
uöt16
)(
d°
) >> 8); \

100 
pDesc
->
d°AddrL
 = (
uöt8
)(
uöt16
)(
d°
); \

105 
	#HAL_DMA_SET_LEN
–
pDesc
, 
Àn
 ) \

	)

106 
°
( \

107 
pDesc
->
x„rLíL
 = (
uöt8
)(
uöt16
)(
Àn
); \

108 
pDesc
->
x„rLíV
 &~
HAL_DMA_LEN_H
; \

109 
pDesc
->
x„rLíV
 |(
uöt8
)((
uöt16
)(
Àn
) >> 8); \

112 
	#HAL_DMA_GET_LEN
–
pDesc
 ) \

	)

113 (((
uöt16
)(
pDesc
->
x„rLíV
 & 
HAL_DMA_LEN_H
Ë<< 8Ë|ÖDesc->
x„rLíL
)

115 
	#HAL_DMA_SET_VLEN
–
pDesc
, 
vMode
 ) \

	)

116 
°
( \

117 
pDesc
->
x„rLíV
 &~
HAL_DMA_LEN_V
; \

118 
pDesc
->
x„rLíV
 |(
vMode
 << 5); \

121 
	#HAL_DMA_SET_WORD_SIZE
–
pDesc
, 
xSz
 ) \

	)

122 
°
( \

123 
pDesc
->
˘æA
 &~
HAL_DMA_WORD_SIZE
; \

124 
pDesc
->
˘æA
 |(
xSz
 << 7); \

127 
	#HAL_DMA_SET_TRIG_MODE
–
pDesc
, 
tMode
 ) \

	)

128 
°
( \

129 
pDesc
->
˘æA
 &~
HAL_DMA_TRIG_MODE
; \

130 
pDesc
->
˘æA
 |(
tMode
 << 5); \

133 
	#HAL_DMA_GET_TRIG_MODE
–
pDesc
 ) (’Desc->
˘æA
 >> 5Ë& 0x3)

	)

135 
	#HAL_DMA_SET_TRIG_SRC
–
pDesc
, 
tSrc
 ) \

	)

136 
°
( \

137 
pDesc
->
˘æA
 &~
HAL_DMA_TRIG_SRC
; \

138 
pDesc
->
˘æA
 |
tSrc
; \

141 
	#HAL_DMA_SET_SRC_INC
–
pDesc
, 
§cInc
 ) \

	)

142 
°
( \

143 
pDesc
->
˘æB
 &~
HAL_DMA_SRC_INC
; \

144 
pDesc
->
˘æB
 |(
§cInc
 << 6); \

147 
	#HAL_DMA_SET_DST_INC
–
pDesc
, 
d°Inc
 ) \

	)

148 
°
( \

149 
pDesc
->
˘æB
 &~
HAL_DMA_DST_INC
; \

150 
pDesc
->
˘æB
 |(
d°Inc
 << 4); \

153 
	#HAL_DMA_SET_IRQ
–
pDesc
, 
íabÀ
 ) \

	)

154 
°
( \

155 
pDesc
->
˘æB
 &~
HAL_DMA_IRQ_MASK
; \

156 
pDesc
->
˘æB
 |(
íabÀ
 << 3); \

159 
	#HAL_DMA_SET_M8
–
pDesc
, 
m8
 ) \

	)

160 
°
( \

161 
pDesc
->
˘æB
 &~
HAL_DMA_M8
; \

162 
pDesc
->
˘æB
 |(
m8
 << 2); \

165 
	#HAL_DMA_SET_PRIORITY
–
pDesc
, 
¥i
 ) \

	)

166 
°
( \

167 
pDesc
->
˘æB
 &~
HAL_DMA_PRIORITY
; \

168 
pDesc
->
˘æB
 |
¥i
; \

176 
	#HAL_DMA_VLEN_USE_LEN
 0x00

	)

178 
	#HAL_DMA_VLEN_1_P_VALOFFIRST
 0x01

	)

180 
	#HAL_DMA_VLEN_VALOFFIRST
 0x02

	)

182 
	#HAL_DMA_VLEN_1_P_VALOFFIRST_P_1
 0x03

	)

184 
	#HAL_DMA_VLEN_1_P_VALOFFIRST_P_2
 0x04

	)

186 
	#HAL_DMA_WORDSIZE_BYTE
 0x00

	)

187 
	#HAL_DMA_WORDSIZE_WORD
 0x01

	)

189 
	#HAL_DMA_TMODE_SINGLE
 0x00

	)

190 
	#HAL_DMA_TMODE_BLOCK
 0x01

	)

191 
	#HAL_DMA_TMODE_SINGLE_REPEATED
 0x02

	)

192 
	#HAL_DMA_TMODE_BLOCK_REPEATED
 0x03

	)

194 
	#HAL_DMA_TRIG_NONE
 0

	)

195 
	#HAL_DMA_TRIG_PREV
 1

	)

196 
	#HAL_DMA_TRIG_T1_CH0
 2

	)

197 
	#HAL_DMA_TRIG_T1_CH1
 3

	)

198 
	#HAL_DMA_TRIG_T1_CH2
 4

	)

199 
	#HAL_DMA_TRIG_T2_COMP
 5

	)

200 
	#HAL_DMA_TRIG_T2_OVFL
 6

	)

201 
	#HAL_DMA_TRIG_T3_CH0
 7

	)

202 
	#HAL_DMA_TRIG_T3_CH1
 8

	)

203 
	#HAL_DMA_TRIG_T4_CH0
 9

	)

204 
	#HAL_DMA_TRIG_T4_CH1
 10

	)

205 
	#HAL_DMA_TRIG_ST
 11

	)

206 
	#HAL_DMA_TRIG_IOC_0
 12

	)

207 
	#HAL_DMA_TRIG_IOC_1
 13

	)

208 
	#HAL_DMA_TRIG_URX0
 14

	)

209 
	#HAL_DMA_TRIG_UTX0
 15

	)

210 
	#HAL_DMA_TRIG_URX1
 16

	)

211 
	#HAL_DMA_TRIG_UTX1
 17

	)

212 
	#HAL_DMA_TRIG_FLASH
 18

	)

213 
	#HAL_DMA_TRIG_RADIO
 19

	)

214 
	#HAL_DMA_TRIG_ADC_CHALL
 20

	)

215 
	#HAL_DMA_TRIG_ADC_CH0
 21

	)

216 
	#HAL_DMA_TRIG_ADC_CH1
 22

	)

217 
	#HAL_DMA_TRIG_ADC_CH2
 23

	)

218 
	#HAL_DMA_TRIG_ADC_CH3
 24

	)

219 
	#HAL_DMA_TRIG_ADC_CH4
 25

	)

220 
	#HAL_DMA_TRIG_ADC_CH5
 26

	)

221 
	#HAL_DMA_TRIG_ADC_CH6
 27

	)

222 
	#HAL_DMA_TRIG_ADC_CH7
 28

	)

223 
	#HAL_DMA_TRIG_ENC_DW
 29

	)

224 
	#HAL_DMA_TRIG_ENC_UP
 30

	)

226 
	#HAL_DMA_SRCINC_0
 0x00

	)

227 
	#HAL_DMA_SRCINC_1
 0x01

	)

228 
	#HAL_DMA_SRCINC_2
 0x02

	)

229 
	#HAL_DMA_SRCINC_M1
 0x03

	)

231 
	#HAL_DMA_DSTINC_0
 0x00

	)

232 
	#HAL_DMA_DSTINC_1
 0x01

	)

233 
	#HAL_DMA_DSTINC_2
 0x02

	)

234 
	#HAL_DMA_DSTINC_M1
 0x03

	)

236 
	#HAL_DMA_IRQMASK_DISABLE
 0x00

	)

237 
	#HAL_DMA_IRQMASK_ENABLE
 0x01

	)

239 
	#HAL_DMA_M8_USE_8_BITS
 0x00

	)

240 
	#HAL_DMA_M8_USE_7_BITS
 0x01

	)

242 
	#HAL_DMA_PRI_LOW
 0x00

	)

243 
	#HAL_DMA_PRI_GUARANTEED
 0x01

	)

244 
	#HAL_DMA_PRI_HIGH
 0x02

	)

245 
	#HAL_DMA_PRI_ABSOLUTE
 0x03

	)

247 
	#HAL_DMA_MAX_ARM_CLOCKS
 45

248 

	)

254 
	#HAL_DMA_LEN_V
 0xE0

	)

255 
	#HAL_DMA_LEN_H
 0x1F

	)

258 
	#HAL_DMA_WORD_SIZE
 0x80

	)

259 
	#HAL_DMA_TRIG_MODE
 0x60

	)

260 
	#HAL_DMA_TRIG_SRC
 0x1F

	)

263 
	#HAL_DMA_SRC_INC
 0xC0

	)

264 
	#HAL_DMA_DST_INC
 0x30

	)

265 
	#HAL_DMA_IRQ_MASK
 0x08

	)

266 
	#HAL_DMA_M8
 0x04

	)

267 
	#HAL_DMA_PRIORITY
 0x03

	)

270 
uöt8
 
§cAddrH
;

271 
uöt8
 
§cAddrL
;

272 
uöt8
 
d°AddrH
;

273 
uöt8
 
d°AddrL
;

274 
uöt8
 
x„rLíV
;

275 
uöt8
 
x„rLíL
;

276 
uöt8
 
˘æA
;

277 
uöt8
 
˘æB
;

278 } 
	thÆDMADesc_t
;

284 
hÆDMADesc_t
 
dmaCh0
;

285 
hÆDMADesc_t
 
dmaCh1234
[4];

291 
HÆDmaInô
( );

295 #ifde‡
__˝lu•lus


	@Components/hal/target/CC2530EB/hal_flash.c

45 
	~"hÆ_bﬂrd_cfg.h
"

46 
	~"hÆ_dma.h
"

47 
	~"hÆ_Êash.h
"

48 
	~"hÆ_ty≥s.h
"

61 #i‡
deföed
 
CC2530F64


62 
	#OSET_OF_RAM_CODE
 0x5DD

	)

63 
	#PAGE_OF_RAM_CODE
 3

	)

64 
	#SIZE_OF_RAM_CODE
 0x23

	)

65 #ñi‡
deföed
 
HAL_OAD_BOOT_CODE


66 
	#OSET_OF_RAM_CODE
 0x7E5

	)

67 
	#PAGE_OF_RAM_CODE
 0

	)

68 
	#SIZE_OF_RAM_CODE
 0x1B

	)

70 
	#OSET_OF_RAM_CODE
 0x5DD

	)

71 
	#PAGE_OF_RAM_CODE
 51

	)

72 
	#SIZE_OF_RAM_CODE
 0x23

	)

95 #¥agm®
loˇti⁄
="RAM_CODE_XDATA"

96 
__no_öô
 
uöt8
 
	gømCode
[
SIZE_OF_RAM_CODE
];

103 #¥agm®
loˇti⁄
="RAM_CODE_FLASH"

104 #i‡
deföed
 
HAL_OAD_BOOT_CODE


105 
HÆFœshWrôeTriggî
();

107 
__m⁄ô‹
 
HÆFœshWrôeTriggî
();

126 
	$HÆFœshInô
()

129 
	`HÆFœshRód
(
PAGE_OF_RAM_CODE
, 
OSET_OF_RAM_CODE
, 
ømCode
, 
SIZE_OF_RAM_CODE
);

130 
	}
}

151 
	$HÆFœshRód
(
uöt8
 
pg
, 
uöt16
 
off£t
, uöt8 *
buf
, uöt16 
˙t
)

154 
uöt8
 *
±r
 = (uöt8 *)(
off£t
 + 
HAL_FLASH_PAGE_MAP
) +

155 ((
pg
 % 
HAL_FLASH_PAGE_PER_BANK
Ë* 
HAL_FLASH_PAGE_SIZE
);

156 
uöt8
 
mem˘r
 = 
MEMCTR
;

158 #i‡!
deföed
 
HAL_OAD_BOOT_CODE


159 
hÆI¡Sèã_t
 
is
;

162 
pg
 /
HAL_FLASH_PAGE_PER_BANK
;

164 #i‡!
deföed
 
HAL_OAD_BOOT_CODE


165 
	`HAL_ENTER_CRITICAL_SECTION
(
is
);

169 
MEMCTR
 = (MEMCTR & 0xF8Ë| 
pg
;

171 
˙t
--)

173 *
buf
++ = *
±r
++;

176 
MEMCTR
 = 
mem˘r
;

178 #i‡!
deföed
 
HAL_OAD_BOOT_CODE


179 
	`HAL_EXIT_CRITICAL_SECTION
(
is
);

181 
	}
}

201 
	$HÆFœshWrôe
(
uöt16
 
addr
, 
uöt8
 *
buf
, uöt16 
˙t
)

203 
hÆDMADesc_t
 *
ch
 = 
	`HAL_NV_DMA_GET_DESC
();

205 
	`HAL_DMA_SET_SOURCE
(
ch
, 
buf
);

206 
	`HAL_DMA_SET_DEST
(
ch
, &
FWDATA
);

207 
	`HAL_DMA_SET_VLEN
(
ch
, 
HAL_DMA_VLEN_USE_LEN
);

208 
	`HAL_DMA_SET_LEN
(
ch
, (
˙t
 * 
HAL_FLASH_WORD_SIZE
));

209 
	`HAL_DMA_SET_WORD_SIZE
(
ch
, 
HAL_DMA_WORDSIZE_BYTE
);

210 
	`HAL_DMA_SET_TRIG_MODE
(
ch
, 
HAL_DMA_TMODE_SINGLE
);

211 
	`HAL_DMA_SET_TRIG_SRC
(
ch
, 
HAL_DMA_TRIG_FLASH
);

212 
	`HAL_DMA_SET_SRC_INC
(
ch
, 
HAL_DMA_SRCINC_1
);

213 
	`HAL_DMA_SET_DST_INC
(
ch
, 
HAL_DMA_DSTINC_0
);

215 
	`HAL_DMA_SET_IRQ
(
ch
, 
HAL_DMA_IRQMASK_DISABLE
);

216 
	`HAL_DMA_SET_M8
–
ch
, 
HAL_DMA_M8_USE_8_BITS
);

217 
	`HAL_DMA_SET_PRIORITY
(
ch
, 
HAL_DMA_PRI_HIGH
);

218 
	`HAL_DMA_CLEAR_IRQ
(
HAL_NV_DMA_CH
);

219 
	`HAL_DMA_ARM_CH
(
HAL_NV_DMA_CH
);

221 
FADDRL
 = (
uöt8
)
addr
;

222 
FADDRH
 = (
uöt8
)(
addr
 >> 8);

223 
	`HÆFœshWrôeTriggî
();

224 
	}
}

242 
	$HÆFœshEø£
(
uöt8
 
pg
)

244 
FADDRH
 = 
pg
 * (
HAL_FLASH_PAGE_SIZE
 / 
HAL_FLASH_WORD_SIZE
 / 256);

245 
FCTL
 |= 0x01;

246 
	}
}

265 #i‡
deföed
 
HAL_OAD_BOOT_CODE


266 #¥agm®
›timize
=
medium


267 
	$HÆFœshWrôeTriggî
()

269 
__m⁄ô‹
 
	$HÆFœshWrôeTriggî
()

272 
MEMCTR
 |= 0x08;

273 
FCTL
 |= 0x02;

274 
FCTL
 & 0x80);

275 
MEMCTR
 &= ~0x08;

276 
	}
}

	@Components/hal/target/CC2530EB/hal_key.c

83 
	~"hÆ_mcu.h
"

84 
	~"hÆ_defs.h
"

85 
	~"hÆ_ty≥s.h
"

86 
	~"hÆ_drivîs.h
"

87 
	~"hÆ_adc.h
"

88 
	~"hÆ_key.h
"

89 
	~"oßl.h
"

91 #i‡(
deföed
 
HAL_KEY
Ë&& (HAL_KEY =
TRUE
)

100 
	#HAL_KEY_RISING_EDGE
 0

	)

101 
	#HAL_KEY_FALLING_EDGE
 1

	)

103 
	#HAL_KEY_DEBOUNCE_VALUE
 25

	)

104 
	#HAL_KEY_POLLING_VALUE
 100

	)

107 
	#HAL_KEY_CPU_PORT_0_IF
 
P0IF


	)

108 
	#HAL_KEY_CPU_PORT_2_IF
 
P2IF


	)

111 
	#HAL_KEY_SW_6_PORT
 
P0


	)

112 
	#HAL_KEY_SW_6_BIT
 
	`BV
(5)

	)

113 
	#HAL_KEY_SW_6_SEL
 
P0SEL


	)

114 
	#HAL_KEY_SW_6_DIR
 
P0DIR


	)

117 
	#HAL_KEY_SW_6_EDGEBIT
 
	`BV
(0)

118 
	#HAL_KEY_SW_6_EDGE
 
HAL_KEY_FALLING_EDGE


	)

122 
	#HAL_KEY_SW_6_IEN
 
IEN1


	)

123 
	#HAL_KEY_SW_6_IENBIT
 
	`BV
(5Ë

	)

124 
	#HAL_KEY_SW_6_ICTL
 
P0IEN


	)

125 
	#HAL_KEY_SW_6_ICTLBIT
 
	`BV
(5Ë

	)

126 
	#HAL_KEY_SW_6_PXIFG
 
P0IFG


	)

128 
	#HAL_KEY_SW_7_EN
 
TRUE


	)

131 
	#HAL_KEY_SW_7_PORT
 
P0


	)

132 
	#HAL_KEY_SW_7_BIT
 
	`BV
(4)

	)

133 
	#HAL_KEY_SW_7_SEL
 
P0SEL


	)

134 
	#HAL_KEY_SW_7_DIR
 
P0DIR


	)

137 
	#HAL_KEY_SW_7_EDGEBIT
 
	`BV
(0)

138 
	#HAL_KEY_SW_7_EDGE
 
HAL_KEY_FALLING_EDGE


	)

142 
	#HAL_KEY_SW_7_IEN
 
IEN1


	)

143 
	#HAL_KEY_SW_7_IENBIT
 
	`BV
(5Ë

	)

144 
	#HAL_KEY_SW_7_ICTL
 
P0IEN


	)

145 
	#HAL_KEY_SW_7_ICTLBIT
 
	`BV
(4Ë

	)

146 
	#HAL_KEY_SW_7_PXIFG
 
P0IFG


	)

151 
	#HAL_KEY_JOY_MOVE_PORT
 
P2


	)

152 
	#HAL_KEY_JOY_MOVE_BIT
 
	`BV
(0)

	)

153 
	#HAL_KEY_JOY_MOVE_SEL
 
P2SEL


	)

154 
	#HAL_KEY_JOY_MOVE_DIR
 
P2DIR


	)

157 
	#HAL_KEY_JOY_MOVE_EDGEBIT
 
	`BV
(3)

	)

158 
	#HAL_KEY_JOY_MOVE_EDGE
 
HAL_KEY_FALLING_EDGE


	)

161 
	#HAL_KEY_JOY_MOVE_IEN
 
IEN2


	)

162 
	#HAL_KEY_JOY_MOVE_IENBIT
 
	`BV
(1Ë

	)

163 
	#HAL_KEY_JOY_MOVE_ICTL
 
P2IEN


	)

164 
	#HAL_KEY_JOY_MOVE_ICTLBIT
 
	`BV
(0Ë

	)

165 
	#HAL_KEY_JOY_MOVE_PXIFG
 
P2IFG


	)

167 
	#HAL_KEY_JOY_CHN
 
HAL_ADC_CHANNEL_6


	)

178 
uöt8
 
	ghÆKeySavedKeys
;

179 
hÆKeyCBack_t
 
	gpHÆKeyPro˚ssFun˘i⁄
;

180 
uöt8
 
	gHÆKeyC⁄figuªd
;

181 
boﬁ
 
	gHÆ_KeyI¡E«bÀ
;

186 
hÆPro˚ssKeyI¡îru±
();

187 
uöt8
 
hÆGëJoyKeyI≈ut
();

205 
	$HÆKeyInô
( )

208 
hÆKeySavedKeys
 = 0;

210 
HAL_KEY_SW_6_SEL
 &~(
HAL_KEY_SW_6_BIT
);

211 
HAL_KEY_SW_6_DIR
 &~(
HAL_KEY_SW_6_BIT
);

213 
HAL_KEY_SW_7_SEL
 &~(
HAL_KEY_SW_7_BIT
);

214 
HAL_KEY_SW_7_DIR
 &~(
HAL_KEY_SW_7_BIT
);

221 
pHÆKeyPro˚ssFun˘i⁄
 = 
NULL
;

224 
HÆKeyC⁄figuªd
 = 
FALSE
;

225 
	}
}

238 
	$HÆKeyC⁄fig
 (
boﬁ
 
öãºu±E«bÀ
, 
hÆKeyCBack_t
 
cback
)

241 
HÆ_KeyI¡E«bÀ
 = 
öãºu±E«bÀ
;

244 
pHÆKeyPro˚ssFun˘i⁄
 = 
cback
;

247 i‡(
HÆ_KeyI¡E«bÀ
)

251 
PICTL
 &~(
HAL_KEY_SW_6_EDGEBIT
);

253 #i‡(
HAL_KEY_SW_6_EDGE
 =
HAL_KEY_FALLING_EDGE
)

254 
PICTL
 |
HAL_KEY_SW_6_EDGEBIT
;

256 
PICTL
 &~(
HAL_KEY_SW_7_EDGEBIT
);

258 #i‡(
HAL_KEY_SW_7_EDGE
 =
HAL_KEY_FALLING_EDGE
)

259 
PICTL
 |
HAL_KEY_SW_7_EDGEBIT
;

269 
HAL_KEY_SW_6_ICTL
 |
HAL_KEY_SW_6_ICTLBIT
;

270 
HAL_KEY_SW_6_IEN
 |
HAL_KEY_SW_6_IENBIT
;

271 
HAL_KEY_SW_6_PXIFG
 = ~(
HAL_KEY_SW_6_BIT
);

273 
HAL_KEY_SW_7_ICTL
 |
HAL_KEY_SW_7_ICTLBIT
;

274 
HAL_KEY_SW_7_IEN
 |
HAL_KEY_SW_7_IENBIT
;

275 
HAL_KEY_SW_7_PXIFG
 = ~(
HAL_KEY_SW_7_BIT
);

282 #i‡(
HAL_KEY_JOY_MOVE_EDGE
 =
HAL_KEY_FALLING_EDGE
)

298 i‡(
HÆKeyC⁄figuªd
 =
TRUE
)

300 
	`oßl_°›_timîEx
–
HÆ_TaskID
, 
HAL_KEY_EVENT
);

305 
HAL_KEY_SW_6_ICTL
 &~(
HAL_KEY_SW_6_ICTLBIT
);

306 
HAL_KEY_SW_6_IEN
 &~(
HAL_KEY_SW_6_IENBIT
);

307 
HAL_KEY_SW_7_ICTL
 &~(
HAL_KEY_SW_7_ICTLBIT
);

308 
HAL_KEY_SW_7_IEN
 &~(
HAL_KEY_SW_7_IENBIT
);

310 
	`oßl_°¨t_timîEx
 (
HÆ_TaskID
, 
HAL_KEY_EVENT
, 
HAL_KEY_POLLING_VALUE
);

314 
HÆKeyC⁄figuªd
 = 
TRUE
;

315 
	}
}

327 
uöt8
 
	$HÆKeyRód
 ( )

329 
uöt8
 
keys
 = 0;

331 #ifde‡
HAL_BOARD_CC2530EB_REV17


332 i‡–(
HAL_KEY_SW_6_PORT
 & 
HAL_KEY_SW_6_BIT
))

333 #ñi‡
	`deföed
 (
HAL_BOARD_CC2530EB_REV13
)

334 i‡(!(
HAL_KEY_SW_6_PORT
 & 
HAL_KEY_SW_6_BIT
))

337 
keys
 |
HAL_KEY_SW_6
;

339 #ifde‡
HAL_BOARD_CC2530EB_REV17


340 i‡–(
HAL_KEY_SW_7_PORT
 & 
HAL_KEY_SW_7_BIT
))

341 #ñi‡
	`deföed
 (
HAL_BOARD_CC2530EB_REV13
)

342 i‡(!(
HAL_KEY_SW_7_PORT
 & 
HAL_KEY_SW_7_BIT
))

345 
keys
 |
HAL_KEY_SW_7
;

351 
keys
 |
	`hÆGëJoyKeyI≈ut
();

354  
keys
;

355 
	}
}

367 
	$HÆKeyPﬁl
 ()

369 
uöt8
 
keys
 = 0;

371 i‡(!(
HAL_KEY_SW_6_PORT
 & 
HAL_KEY_SW_6_BIT
))

373 
keys
 |
HAL_KEY_SW_6
;

375 i‡(!(
HAL_KEY_SW_7_PORT
 & 
HAL_KEY_SW_7_BIT
))

377 
keys
 |
HAL_KEY_SW_7
;

382 
keys
 |
	`hÆGëJoyKeyI≈ut
();

388 i‡(!
HÆ_KeyI¡E«bÀ
)

390 i‡(
keys
 =
hÆKeySavedKeys
)

396 
hÆKeySavedKeys
 = 
keys
;

404 i‡(
keys
 && (
pHÆKeyPro˚ssFun˘i⁄
))

406 (
pHÆKeyPro˚ssFun˘i⁄
Ë(
keys
, 
HAL_KEY_STATE_NORMAL
);

408 
	}
}

419 
uöt8
 
	$hÆGëJoyKeyI≈ut
()

424 
uöt8
 
adc
;

425 
uöt8
 
kßve0
 = 0;

426 
uöt8
 
kßve1
;

431 
kßve1
 = 
kßve0
;

433 
adc
 = 
	`HÆAdcRód
 (
HAL_KEY_JOY_CHN
, 
HAL_ADC_RESOLUTION_8
);

435 i‡((
adc
 >= 28) && (adc <= 38))

437 
kßve0
 |
HAL_KEY_LEFT
;

439 i‡((
adc
 < 28))

441 
kßve0
 |
HAL_KEY_RIGHT
;

443 i‡((
adc
 >= 60) && (adc <= 73))

445 
kßve0
 |
HAL_KEY_DOWN
;

447 i‡((
adc
 >= 89) && (adc <= 100))

449 
kßve0
 |
HAL_KEY_UP
;

451 } 
kßve0
 !
kßve1
);

453  
kßve0
;

454 
	}
}

470 
	$hÆPro˚ssKeyI¡îru±
 ()

472 
boﬁ
 
vÆid
=
FALSE
;

474 i‡(
HAL_KEY_SW_6_PXIFG
 & 
HAL_KEY_SW_6_BIT
)

476 
HAL_KEY_SW_6_PXIFG
 = ~(
HAL_KEY_SW_6_BIT
);

477 
vÆid
 = 
TRUE
;

479 i‡(
HAL_KEY_SW_7_PXIFG
 & 
HAL_KEY_SW_7_BIT
)

481 
HAL_KEY_SW_7_PXIFG
 = ~(
HAL_KEY_SW_7_BIT
);

482 
vÆid
 = 
TRUE
;

485 i‡(
HAL_KEY_JOY_MOVE_PXIFG
 & 
HAL_KEY_JOY_MOVE_BIT
)

487 
HAL_KEY_JOY_MOVE_PXIFG
 = ~(
HAL_KEY_JOY_MOVE_BIT
);

488 
vÆid
 = 
TRUE
;

491 i‡(
vÆid
)

493 
	`oßl_°¨t_timîEx
 (
HÆ_TaskID
, 
HAL_KEY_EVENT
, 
HAL_KEY_DEBOUNCE_VALUE
);

495 
	}
}

506 
	$HÆKeyE¡îSÀï
 ( )

508 
	}
}

519 
uöt8
 
	$HÆKeyExôSÀï
 ( )

522  ( 
	`HÆKeyRód
 () );

523 
	}
}

538 
	$HAL_ISR_FUNCTION
–
hÆKeyP‹t0I§
, 
P0INT_VECTOR
 )

540 i‡((
HAL_KEY_SW_6_PXIFG
 & 
HAL_KEY_SW_6_BIT
)||(
HAL_KEY_SW_7_PXIFG
 & 
HAL_KEY_SW_7_BIT
))

542 
	`hÆPro˚ssKeyI¡îru±
();

549 
HAL_KEY_SW_6_PXIFG
 = 0;

550 
HAL_KEY_CPU_PORT_0_IF
 = 0;

551 
	}
}

563 
	$HAL_ISR_FUNCTION
–
hÆKeyP‹t2I§
, 
P2INT_VECTOR
 )

565 i‡(
HAL_KEY_JOY_MOVE_PXIFG
 & 
HAL_KEY_JOY_MOVE_BIT
)

567 
	`hÆPro˚ssKeyI¡îru±
();

575 
HAL_KEY_JOY_MOVE_PXIFG
 = 0;

576 
HAL_KEY_CPU_PORT_2_IF
 = 0;

577 
	}
}

582 
	$HÆKeyInô
(){
	}
}

583 
	$HÆKeyC⁄fig
(
boﬁ
 
öãºu±E«bÀ
, 
hÆKeyCBack_t
 
cback
){
	}
}

584 
uöt8
 
	$HÆKeyRód
(){  0;
	}
}

585 
	$HÆKeyPﬁl
(){
	}
}

	@Components/hal/target/CC2530EB/hal_lcd--0.c

43 
	~"hÆ_ty≥s.h
"

44 
	~"hÆ_lcd.h
"

45 
	~"OSAL.h
"

46 
	~"OnBﬂrd.h
"

47 
	~"hÆ_as£π.h
"

49 #i‡
deföed
 (
ZTOOL_P1
Ë|| deföed (
ZTOOL_P2
)

50 
	~"DebugTø˚.h
"

71 
	#HAL_LCD_MODE_PORT
 0

	)

72 
	#HAL_LCD_MODE_PIN
 0

	)

74 
	#HAL_LCD_RESET_PORT
 1

	)

75 
	#HAL_LCD_RESET_PIN
 1

	)

77 
	#HAL_LCD_CS_PORT
 1

	)

78 
	#HAL_LCD_CS_PIN
 2

	)

81 
	#HAL_LCD_CLK_PORT
 1

	)

82 
	#HAL_LCD_CLK_PIN
 5

	)

84 
	#HAL_LCD_MOSI_PORT
 1

	)

85 
	#HAL_LCD_MOSI_PIN
 6

	)

87 
	#HAL_LCD_MISO_PORT
 1

	)

88 
	#HAL_LCD_MISO_PIN
 7

	)

91 
	#HAL_SPI_CLOCK_POL_LO
 0x00

	)

92 
	#HAL_SPI_CLOCK_PHA_0
 0x00

	)

93 
	#HAL_SPI_TRANSFER_MSB_FIRST
 0x20

	)

96 
	#LCD_MAX_LINE_COUNT
 3

	)

97 
	#LCD_MAX_LINE_LENGTH
 16

	)

98 
	#LCD_MAX_BUF
 25

	)

103 
	#OSC_OFF
 0x00

	)

104 
	#OSC_ON
 0x01

	)

105 
	#POWER_SAVE_OFF
 0x00

	)

106 
	#POWER_SAVE_ON
 0x02

	)

107 
	#SET_POWER_SAVE_MODE
(
›ti⁄s
Ë
	`HÆLcd_HW_C⁄åﬁ
(0x0C | (›ti⁄s))

	)

110 
	#CGROM
 0x00

	)

111 
	#CGRAM
 0x01

	)

112 
	#COM_FORWARD
 0x00

	)

113 
	#COM_BACKWARD
 0x02

	)

114 
	#TWO_LINE
 0x00

	)

115 
	#THREE_LINE
 0x04

	)

116 
	#FUNCTION_SET
(
›ti⁄s
Ë
	`HÆLcd_HW_C⁄åﬁ
(0x10 | (›ti⁄s))

	)

119 
	#LINE1
 0x00

	)

120 
	#LINE2
 0x01

	)

121 
	#LINE3
 0x02

	)

122 
	#LINE4
 0x03

	)

123 
	#SET_DISPLAY_START_LINE
(
löe
Ë
	`HÆLcd_HW_C⁄åﬁ
(0x18 | (löe))

	)

126 
	#BIAS_1_5
 0x00

	)

127 
	#BIAS_1_4
 0x01

	)

128 
	#SET_BIAS_CTRL
(
büs
Ë
	`HÆLcd_HW_C⁄åﬁ
(0x1C | (büs))

	)

131 
	#VOLTAGE_DIVIDER_OFF
 0x00

	)

132 
	#VOLTAGE_DIVIDER_ON
 0x01

	)

133 
	#CONVERTER_AND_REG_OFF
 0x00

	)

134 
	#CONVERTER_AND_REG_ON
 0x04

	)

135 
	#SET_POWER_CTRL
(
›ti⁄s
Ë
	`HÆLcd_HW_C⁄åﬁ
(0x20 | (›ti⁄s))

	)

138 
	#DISPLAY_CTRL_ON
 0x01

	)

139 
	#DISPLAY_CTRL_OFF
 0x00

	)

140 
	#DISPLAY_CTRL_BLINK_ON
 0x02

	)

141 
	#DISPLAY_CTRL_BLINK_OFF
 0x00

	)

142 
	#DISPLAY_CTRL_CURSOR_ON
 0x04

	)

143 
	#DISPLAY_CTRL_CURSOR_OFF
 0x00

	)

144 
	#SET_DISPLAY_CTRL
(
›ti⁄s
Ë
	`HÆLcd_HW_C⁄åﬁ
(0x28 | (›ti⁄s))

	)

147 
	#SET_DDRAM_ADDR
(
ch¨Index
Ë
	`HÆLcd_HW_C⁄åﬁ
(0x80 | (ch¨Index))

	)

148 
	#SET_GCRAM_CHAR
(
•ecIndex
Ë
	`HÆLcd_HW_C⁄åﬁ
(0xC0 | (•ecIndex))

	)

151 
	#CONTRAST_CTRL_REGISTER
 0x10

	)

152 
	#SET_ICONRAM_ADDR
(
addr
Ë
	`HÆLcd_HW_C⁄åﬁ
(0x40 | (addr))

	)

155 
	#LINE_1_AND_2
 0x01

	)

156 
	#LINE_2_AND_3
 0x02

	)

157 
	#NORMAL_DISPLAY
 0x00

	)

158 
	#SET_DOUBLE_HEIGHT
(
›ti⁄s
Ë
	`HÆLcd_HW_C⁄åﬁ
(0x08 | (›ti⁄s))

	)

164 
	#HAL_IO_SET
(
p‹t
, 
pö
, 
vÆ
Ë
	`HAL_IO_SET_PREP
’‹t,Öö, vÆ)

	)

165 
	#HAL_IO_SET_PREP
(
p‹t
, 
pö
, 
vÆ
Ë
	`°
–
P
##p‹t##
_
##pö## = vÆ; )

	)

167 
	#HAL_CONFIG_IO_OUTPUT
(
p‹t
, 
pö
, 
vÆ
Ë
	`HAL_CONFIG_IO_OUTPUT_PREP
’‹t,Öö, vÆ)

	)

168 
	#HAL_CONFIG_IO_OUTPUT_PREP
(
p‹t
, 
pö
, 
vÆ
Ë
	`°
–
P
##p‹t##
SEL
 &~
	`BV
’ö); \

	)

169 
	gP
##
	gp‹t
##
	g_
##
	gpö
## = 
vÆ
; \

170 
	gP
##
	gp‹t
##
	gDIR
 |
BV
(
pö
); )

172 
	#HAL_CONFIG_IO_PERIPHERAL
(
p‹t
, 
pö
Ë
	`HAL_CONFIG_IO_PERIPHERAL_PREP
’‹t,Öö)

	)

173 
	#HAL_CONFIG_IO_PERIPHERAL_PREP
(
p‹t
, 
pö
Ë
	`°
–
P
##p‹t##
SEL
 |
	`BV
’ö); )

	)

178 
	#LCD_SPI_BEGIN
(Ë
	`HAL_IO_SET
(
HAL_LCD_CS_PORT
, 
HAL_LCD_CS_PIN
, 0);

	)

179 
	#LCD_SPI_END
(Ë\

	)

181 
asm
("NOP"); \

182 
asm
("NOP"); \

183 
asm
("NOP"); \

184 
asm
("NOP"); \

185 
HAL_IO_SET
(
HAL_LCD_CS_PORT
, 
HAL_LCD_CS_PIN
, 1); \

188 
	#LCD_SPI_TX
(
x
Ë{ 
U1CSR
 &~(
	`BV
(2Ë| BV(1)); 
U1DBUF
 = x;  !(U1CSR & BV(1)Ë); }

	)

189 
	#LCD_SPI_WAIT_RXRDY
(Ë{ !(
U1CSR
 & 
	`BV
(1))); }

	)

193 
	#LCD_DO_WRITE
(Ë
	`HAL_IO_SET
(
HAL_LCD_MODE_PORT
, 
HAL_LCD_MODE_PIN
, 1);

	)

194 
	#LCD_DO_CONTROL
(Ë
	`HAL_IO_SET
(
HAL_LCD_MODE_PORT
, 
HAL_LCD_MODE_PIN
, 0);

	)

196 
	#LCD_ACTIVATE_RESET
(Ë
	`HAL_IO_SET
(
HAL_LCD_RESET_PORT
, 
HAL_LCD_RESET_PIN
, 0);

	)

197 
	#LCD_RELEASE_RESET
(Ë
	`HAL_IO_SET
(
HAL_LCD_RESET_PORT
, 
HAL_LCD_RESET_PIN
, 1);

	)

203 
uöt8
 *
	gLcd_Löe1
;

208 #i‡(
HAL_LCD
 =
TRUE
)

209 
HÆLcd_HW_Inô
();

210 
HÆLcd_HW_WaôUs
(
uöt16
 
i
);

211 
HÆLcd_HW_CÀ¨
();

212 
HÆLcd_HW_CÀ¨AŒS≥cCh¨s
();

213 
HÆLcd_HW_C⁄åﬁ
(
uöt8
 
cmd
);

214 
HÆLcd_HW_Wrôe
(
uöt8
 
d©a
);

215 
HÆLcd_HW_SëC⁄åa°
(
uöt8
 
vÆue
);

216 
HÆLcd_HW_WrôeCh¨
(
uöt8
 
löe
, uöt8 
cﬁ
, 
ãxt
);

217 
HÆLcd_HW_WrôeLöe
(
uöt8
 
löe
, c⁄° *
pText
);

229 
	$HÆLcdInô
()

231 
Lcd_Löe1
 = 
NULL
;

232 #i‡(
HAL_LCD
 =
TRUE
)

233 
	`HÆLcd_HW_Inô
();

235 
	}
}

265 
	$HÆLcdWrôeSåög
 ( *
°r
, 
uöt8
 
›ti⁄
)

267 #i‡(
HAL_LCD
 =
TRUE
)

269 
uöt8
 
°rLí
 = 0;

270 
uöt8
 
tŸÆLí
 = 0;

271 
uöt8
 *
buf
;

272 
uöt8
 
tmpLí
;

274 i‡–
Lcd_Löe1
 =
NULL
 )

276 
Lcd_Löe1
 = 
	`oßl_mem_Æloc
–
HAL_LCD_MAX_CHARS
+1 );

277 
	`HÆLcdWrôeSåög
( "Texas Instruments", 1 );

280 
°rLí
 = (
uöt8
)
	`oßl_°æí
–(*)
°r
 );

283 i‡–
°rLí
 > 
HAL_LCD_MAX_CHARS
 )

284 
°rLí
 = 
HAL_LCD_MAX_CHARS
;

286 i‡–
›ti⁄
 =
HAL_LCD_LINE_1
 )

289 
	`oßl_mem˝y
–
Lcd_Löe1
, 
°r
, 
°rLí
 );

290 
Lcd_Löe1
[
°rLí
] = '\0';

295 
tmpLí
 = (
uöt8
)
	`oßl_°æí
–(*)
Lcd_Löe1
 );

296 
tŸÆLí
 = 
tmpLí
 + 1 + 
°rLí
 + 1;

297 
buf
 = 
	`oßl_mem_Æloc
–
tŸÆLí
 );

298 i‡–
buf
 !
NULL
 )

301 
	`oßl_mem˝y
–
buf
, 
Lcd_Löe1
, 
tmpLí
 );

302 
buf
[
tmpLí
++] = ' ';

303 
	`oßl_mem˝y
–&
buf
[
tmpLí
], 
°r
, 
°rLí
 );

304 
buf
[
tmpLí
+
°rLí
] = '\0';

307 #i‡
	`deföed
 (
ZTOOL_P1
Ë|| deföed (
ZTOOL_P2
)

309 #i‡
	`deföed
(
SERIAL_DEBUG_SUPPORTED
)

310 
	`debug_°r
–(
uöt8
*)
buf
 );

316 
	`oßl_mem_‰ì
–
buf
 );

321 
	`HÆLcd_HW_WrôeLöe
 (
›ti⁄
, 
°r
);

325 
	}
}

338 
	$HÆLcdWrôeVÆue
 ( 
uöt32
 
vÆue
, c⁄° 
uöt8
 
ødix
, uöt8 
›ti⁄
)

340 #i‡(
HAL_LCD
 =
TRUE
)

341 
uöt8
 
buf
[
LCD_MAX_BUF
];

343 
	`_…ﬂ
–
vÆue
, &
buf
[0], 
ødix
 );

344 
	`HÆLcdWrôeSåög
–(*)
buf
, 
›ti⁄
 );

346 
	}
}

358 
	$HÆLcdWrôeS¸ìn
–*
löe1
, *
löe2
 )

360 #i‡(
HAL_LCD
 =
TRUE
)

361 
	`HÆLcdWrôeSåög
–
löe1
, 1 );

362 
	`HÆLcdWrôeSåög
–
löe2
, 2 );

364 
	}
}

378 
	$HÆLcdWrôeSåögVÆue
–*
tôÀ
, 
uöt16
 
vÆue
, 
uöt8
 
f‹m©
, uöt8 
löe
 )

380 #i‡(
HAL_LCD
 =
TRUE
)

381 
uöt8
 
tmpLí
;

382 
uöt8
 
buf
[
LCD_MAX_BUF
];

383 
uöt32
 
îr
;

385 
tmpLí
 = (
uöt8
)
	`oßl_°æí
–(*)
tôÀ
 );

386 
	`oßl_mem˝y
–
buf
, 
tôÀ
, 
tmpLí
 );

387 
buf
[
tmpLí
] = ' ';

388 
îr
 = (
uöt32
)(
vÆue
);

389 
	`_…ﬂ
–
îr
, &
buf
[
tmpLí
+1], 
f‹m©
 );

390 
	`HÆLcdWrôeSåög
–(*)
buf
, 
löe
 );

392 
	}
}

408 
	$HÆLcdWrôeSåögVÆueVÆue
–*
tôÀ
, 
uöt16
 
vÆue1
, 
uöt8
 
f‹m©1
,

409 
uöt16
 
vÆue2
, 
uöt8
 
f‹m©2
, uöt8 
löe
 )

412 #i‡(
HAL_LCD
 =
TRUE
)

414 
uöt8
 
tmpLí
;

415 
uöt8
 
buf
[
LCD_MAX_BUF
];

416 
uöt32
 
îr
;

418 
tmpLí
 = (
uöt8
)
	`oßl_°æí
–(*)
tôÀ
 );

419 i‡–
tmpLí
 )

421 
	`oßl_mem˝y
–
buf
, 
tôÀ
, 
tmpLí
 );

422 
buf
[
tmpLí
++] = ' ';

425 
îr
 = (
uöt32
)(
vÆue1
);

426 
	`_…ﬂ
–
îr
, &
buf
[
tmpLí
], 
f‹m©1
 );

427 
tmpLí
 = (
uöt8
)
	`oßl_°æí
–(*)
buf
 );

429 
buf
[
tmpLí
++] = ',';

430 
buf
[
tmpLí
++] = ' ';

431 
îr
 = (
uöt32
)(
vÆue2
);

432 
	`_…ﬂ
–
îr
, &
buf
[
tmpLí
], 
f‹m©2
 );

434 
	`HÆLcdWrôeSåög
–(*)
buf
, 
löe
 );

437 
	}
}

449 
	$HÆLcdDi•œyPî˚¡B¨
–*
tôÀ
, 
uöt8
 
vÆue
 )

451 #i‡(
HAL_LCD
 =
TRUE
)

453 
uöt8
 
≥r˚¡
;

454 
uöt8
 
À·Ovî
;

455 
uöt8
 
buf
[17];

456 
uöt32
 
îr
;

457 
uöt8
 
x
;

460 
	`HÆLcdWrôeSåög
–
tôÀ
, 
HAL_LCD_LINE_1
 );

462 i‡–
vÆue
 > 100 )

463 
vÆue
 = 100;

466 
≥r˚¡
 = (
uöt8
)(
vÆue
 / 10);

467 
À·Ovî
 = (
uöt8
)(
vÆue
 % 10);

470 
	`oßl_mem˝y
–
buf
, "[ ] ", 15 );

472  
x
 = 0; x < 
≥r˚¡
; x ++ )

474 
buf
[1+
x
] = '>';

477 i‡–
À·Ovî
 >= 5 )

478 
buf
[1+
x
] = '+';

480 
îr
 = (
uöt32
)
vÆue
;

481 
	`_…ﬂ
–
îr
, (
uöt8
*)&
buf
[13], 10 );

483 
	`HÆLcdWrôeSåög
–(*)
buf
, 
HAL_LCD_LINE_2
 );

487 
	}
}

490 #i‡(
HAL_LCD
 =
TRUE
)

504 
	$hÆLcd_C⁄figIO
()

507 
	`HAL_CONFIG_IO_OUTPUT
(
HAL_LCD_MODE_PORT
, 
HAL_LCD_MODE_PIN
, 1);

508 
	`HAL_CONFIG_IO_OUTPUT
(
HAL_LCD_RESET_PORT
, 
HAL_LCD_RESET_PIN
, 1);

509 
	`HAL_CONFIG_IO_OUTPUT
(
HAL_LCD_CS_PORT
, 
HAL_LCD_CS_PIN
, 1);

510 
	}
}

521 
	$hÆLcd_C⁄figSPI
()

525 
uöt8
 
baud_exp⁄ít
;

526 
uöt8
 
baud_m™tisß
;

529 
PERCFG
 |= 0x02;

532 
	`HAL_CONFIG_IO_PERIPHERAL
(
HAL_LCD_CLK_PORT
, 
HAL_LCD_CLK_PIN
);

533 
	`HAL_CONFIG_IO_PERIPHERAL
(
HAL_LCD_MOSI_PORT
, 
HAL_LCD_MOSI_PIN
);

534 
	`HAL_CONFIG_IO_PERIPHERAL
(
HAL_LCD_MISO_PORT
, 
HAL_LCD_MISO_PIN
);

540 
baud_exp⁄ít
 = 15;

541 
baud_m™tisß
 = 0;

544 
U1UCR
 = 0x80;

545 
U1CSR
 = 0x00;

546 
U1GCR
 = 
HAL_SPI_TRANSFER_MSB_FIRST
 | 
HAL_SPI_CLOCK_PHA_0
 | 
HAL_SPI_CLOCK_POL_LO
 | 
baud_exp⁄ít
;

547 
U1BAUD
 = 
baud_m™tisß
;

548 
	}
}

559 
	$HÆLcd_HW_Inô
()

562 
	`hÆLcd_C⁄figIO
();

565 
	`hÆLcd_C⁄figSPI
();

568 
	`LCD_ACTIVATE_RESET
();

569 
	`HÆLcd_HW_WaôUs
(15000);

570 
	`LCD_RELEASE_RESET
();

571 
	`HÆLcd_HW_WaôUs
(15);

574 
	`FUNCTION_SET
(
CGRAM
 | 
COM_FORWARD
 | 
THREE_LINE
);

577 
	`HÆLcd_HW_SëC⁄åa°
(15);

580 
	`SET_POWER_SAVE_MODE
(
OSC_OFF
 | 
POWER_SAVE_ON
);

581 
	`SET_POWER_CTRL
(
VOLTAGE_DIVIDER_ON
 | 
CONVERTER_AND_REG_ON
);

582 
	`SET_BIAS_CTRL
(
BIAS_1_5
);

583 
	`HÆLcd_HW_WaôUs
(21000);

586 
	`HÆLcd_HW_CÀ¨
();

587 
	`HÆLcd_HW_CÀ¨AŒS≥cCh¨s
();

588 
	`SET_DISPLAY_CTRL
(
DISPLAY_CTRL_ON
 | 
DISPLAY_CTRL_BLINK_OFF
 | 
DISPLAY_CTRL_CURSOR_OFF
);

589 
	}
}

600 
	$HÆLcd_HW_C⁄åﬁ
(
uöt8
 
cmd
)

602 
	`LCD_SPI_BEGIN
();

603 
	`LCD_DO_CONTROL
();

604 
	`LCD_SPI_TX
(
cmd
);

605 
	`LCD_SPI_WAIT_RXRDY
();

606 
	`LCD_SPI_END
();

607 
	}
}

618 
	$HÆLcd_HW_Wrôe
(
uöt8
 
d©a
)

620 
	`LCD_SPI_BEGIN
();

621 
	`LCD_DO_WRITE
();

622 
	`LCD_SPI_TX
(
d©a
);

623 
	`LCD_SPI_WAIT_RXRDY
();

624 
	`LCD_SPI_END
();

625 
	}
}

636 
	$HÆLcd_HW_SëC⁄åa°
(
uöt8
 
vÆue
)

638 
	`SET_ICONRAM_ADDR
(
CONTRAST_CTRL_REGISTER
);

639 
	`HÆLcd_HW_Wrôe
(
vÆue
);

640 
	}
}

651 
	$HÆLcd_HW_CÀ¨
()

653 
uöt8
 
n
;

655 
	`SET_DDRAM_ADDR
(0x00);

656 
n
 = 0;Ç < (
LCD_MAX_LINE_COUNT
 * 
LCD_MAX_LINE_LENGTH
);Ç++)

658 
	`HÆLcd_HW_Wrôe
(' ');

660 
	}
}

671 
	$HÆLcd_HW_CÀ¨AŒS≥cCh¨s
()

673 
uöt8
 
n
 = 0;

675 
	`SET_GCRAM_CHAR
(0);

676 
n
 = 0;Ç < (8 * 8);Ç++)

678 
	`HÆLcd_HW_Wrôe
(0x00);

680 
	}
}

692 
	$HÆLcd_HW_WrôeCh¨
(
uöt8
 
löe
, uöt8 
cﬁ
, 
ãxt
)

694 i‡(
cﬁ
 < 
LCD_MAX_LINE_LENGTH
)

696 
	`SET_DDRAM_ADDR
((
löe
 - 1Ë* 
LCD_MAX_LINE_LENGTH
 + 
cﬁ
);

697 
	`HÆLcd_HW_Wrôe
(
ãxt
);

703 
	}
}

715 
	$HÆLcd_HW_WrôeLöe
(
uöt8
 
löe
, c⁄° *
pText
)

717 
uöt8
 
cou¡
;

718 
uöt8
 
tŸÆLígth
 = (uöt8)
	`oßl_°æí
–(*)
pText
 );

721 
cou¡
=0; cou¡<
tŸÆLígth
; count++)

723 
	`HÆLcd_HW_WrôeCh¨
(
löe
, 
cou¡
, (*(
pText
++)));

727 
cou¡
=
tŸÆLígth
; cou¡<
LCD_MAX_LINE_LENGTH
;count++)

729 
	`HÆLcd_HW_WrôeCh¨
(
löe
, 
cou¡
, ' ');

731 
	}
}

742 
	$HÆLcd_HW_WaôUs
(
uöt16
 
mi¸oSecs
)

744 
mi¸oSecs
--)

747 
	`asm
("nop");ásm("nop");ásm("nop");ásm("nop");ásm("nop");

748 
	`asm
("nop");ásm("nop");ásm("nop");ásm("nop");ásm("nop");

749 
	`asm
("nop");ásm("nop");ásm("nop");ásm("nop");ásm("nop");

750 
	`asm
("nop");ásm("nop");ásm("nop");ásm("nop");ásm("nop");

751 
	`asm
("nop");ásm("nop");ásm("nop");ásm("nop");ásm("nop");

752 
	`asm
("nop");ásm("nop");ásm("nop");ásm("nop");ásm("nop");

753 
	`asm
("nop");ásm("nop");

755 
	}
}

	@Components/hal/target/CC2530EB/hal_lcd.c

1 
	~"LCD128_64.h
"

2 
	~"F⁄t.h
"

3 
	~"hÆ_lcd.h
"

4 
	~"OSAL.h
"

5 
	~"°rög.h
"

10 
	#Di•œyOff
 0xAE

	)

11 
	#Di•œyOn
 0xAF

	)

12 
	#Di•œySèπ
 0x40

	)

13 
	#PageAddr
 0xB0

	)

14 
	#CﬁAddrHi
 0x10

	)

15 
	#CﬁAddrLo
 0x00

	)

16 
	#SegRem≠Off
 0xA0

	)

17 
	#SegRem≠On
 0xA1

	)

18 
	#N‹mÆDi•
 0xA6

	)

19 
	#Revî£Di•
 0xA7

	)

20 
	#ExôE¡úeD
 0xA4

	)

21 
	#E¡E¡úeD
 0xA5

	)

22 
	#E¡îRMW
 0xE0

	)

23 
	#ExôRMW
 0xEE

	)

24 
	#SWRe°
 0xE2

	)

25 
	#ComRem≠Off
 0xC0

	)

26 
	#ComRem≠On
 0xC8

	)

27 
	#PwrCålReg
 0x28

	)

28 
	#OPampBuf„r
 0x01

	)

29 
	#I¡Reg
 0x02

	)

30 
	#I¡VﬁB°r
 0x04

	)

31 
	#I¡RegR©io
 0x20

	)

32 
	#C⁄tCålReg
 0x81

	)

33 
	#CmdMuxR©io
 0x48

	)

34 
	#CmdBüsR©io
 0x50

	)

35 
	#Di•Off£t
 0x44

	)

36 
	#Ic⁄ModeOn
 0xA3

	)

37 
	#Ic⁄ModeOff
 0xA2

	)

38 
	#NlöeInvî
 0x4C

	)

39 
	#DCDCc⁄vî
 0x64

	)

40 
	#PowîßvSèndby
 0xA8

	)

41 
	#PowîßvSÀï
 0xA9

	)

42 
	#PowîßvOff
 0xE1

	)

43 
	#I¡îOsc
 0xAB

	)

44 
	#Devi˚
 
SSD1821


	)

45 
	#CﬁNo
 132

	)

46 
	#RowNo
 64

	)

47 
	#PS
 1

	)

48 
	#PageNo
 10

	)

49 
	#Ic⁄Page
 10

	)

50 
	#AŒ0
 6

	)

51 
	#AŒ1
 4

	)

52 
	#iI¡RegVÆue
 1

	)

53 
	#iC⁄tCålRegVÆue
 16

	)

54 
	#iI¡RegVÆuó
 20

	)

55 
	#iC⁄tCålRegVÆuó
 16

	)

56 
	#iI¡RegVÆueb
 1

	)

57 
	#iC⁄tCålRegVÆueb
 16

	)

58 
	#MSGNo
 16

	)

59 
	#MSGLígth
 22

	)

60 
	#SSLNameNo
 4

	)

61 
	#Devi˚Pg
 0

62 
	#FótuªPg
 1

63 
	#GRAPHICNo
 13

	)

64 
	#xlogo
 38

	)

65 
	#ylogo
 5

	)

66 
	#xsﬁom⁄
 91

	)

67 
	#ysﬁom⁄
 2

	)

68 
	#xsy°ech
 81

	)

69 
	#ysy°ech
 2

	)

70 
	#xlimôed
 70

	)

71 
	#ylimôed
 2

	)

72 
	#xcc
 16

	)

73 
	#ycc
 2

	)

74 
	#x∑geq
 128

	)

75 
	#y∑geq
 4

	)

76 
	#h‹iz⁄Æ
 0

	)

77 
	#d_time
 60

	)

80 
Pröt8
(
uöt16
 
y
,uöt16 
x
, 
uöt8
 
ch
[],uöt16 
yn
);

82 
uöt8
 
	gC⁄åa°VÆue
 =90;

83 
WrôeLCD
(
uöt8
 
fs
, uöt8 
da
);

84 
Wrôe595
(
uöt8
 
d©
);

85 
dñay_us
(
uöt16
 
s
);

86 
dñay1
(
uöt8
 
jj
);

87 
c⁄åa°˘æ
(
uöt8
 
°¨t
, uöt8 
°›
);

88 
HÆLcdInô
();

89 
PrötCh8
(
uöt16
 
y
,uöt16 
x
, 
uöt8
 
ch
,uöt16 
yn
);

90 
upLcd
–*
±r
,
uöt8
 
›
 );

91 
HÆLcdCÀ¨Löe
–
uöt8
 
löe
 );

99 
	$dñay1
(
uöt8
 
jj
)

101 
uöt8
 
i
;

102 
i
=0; i<
jj
; i++);

103 
	}
}

109 
	$dñay_us
(
uöt16
 
s
)

111 
uöt16
 
i
;

112 
i
=0; i<
s
; i++);

113 
i
=0; i<
s
; i++);

114 
i
=0; i<
s
; i++);

115 
i
=0; i<
s
; i++);

116 
	}
}

125 
	$Wrôe595
(
uöt8
 
d©
)

128 
uöt8
 
ii
;

130 
ii
 = 0 ; ii < 8; ii++)

132 if(
d©
 & 0x80Ë
LCD_595_DAT
 = 1;

133 
LCD_595_DAT
 = 0;

135 
d©
 <<= 1;

136 
LCD_595_CK
 = 1;

137 
LCD_595_CK
 = 0;

139 
LCD_595_LD
 = 1;

140 
LCD_595_LD
 = 0;

141 
	}
}

151 
	$WrôeLCD
(
uöt8
 
fs
, uöt8 
da
)

153 
	`dñay1
(2);

154 
LCD_CS1
 = 0;

155 
LCD_RW
 = 0;

158 if(
fs
){

159 
LCD_RS
 = 1;

162 
LCD_RS
 = 0;

166 
	`Wrôe595
(
da
);

167 
LCD_E
 = 1;

168 
	`dñay1
(2);

169 
LCD_E
 = 0;

171 
LCD_CS1
 = 1;

172 
	}
}

214 
	$SëRamAddr
(
uöt8
 
x
 ,uöt8 
y
)

216 
uöt8
 
ãmp
;

218 
ãmp
 = 0x0‡& 
x
;

219 
	`WrôeLCD
(
COMMAND
 , 
PageAddr
|
ãmp
);

221 
ãmp
 = 0x0‡& (
y
 >> 4);

222 
	`WrôeLCD
(
COMMAND
 , 
CﬁAddrHi
|
ãmp
);

223 
ãmp
 = 0x0‡& 
y
;

224 
	`WrôeLCD
(
COMMAND
 , 
CﬁAddrLo
|
ãmp
);

225 
	}
}

234 
	$SëC⁄åa°
(
uöt8
 
Gaö
, uöt8 
Sãp
)

236 
	`WrôeLCD
(
COMMAND
 , 
I¡RegR©io
 | (0x0‡& 
Gaö
));

237 
	`WrôeLCD
(
COMMAND
 , 
C⁄tCålReg
);

238 
	`WrôeLCD
(
COMMAND
 , 0x3‡& 
Sãp
);

239 
	}
}

249 
	$InôDi•œy
()

251 
	`WrôeLCD
(
COMMAND
 , 
Di•œyOff
);

252 
	`WrôeLCD
(
COMMAND
 , 
SegRem≠On
);

253 
	`WrôeLCD
(
COMMAND
 , 
ComRem≠On
);

254 
	`SëC⁄åa°
(
iI¡RegVÆue
, 
iC⁄tCålRegVÆue
);

255 
	`WrôeLCD
(
COMMAND
 , 
PwrCålReg
 | 
I¡VﬁB°r
 | 
I¡Reg
 | 
OPampBuf„r
);

256 
	`WrôeLCD
(
COMMAND
 , 
Di•œyOn
);

257 
	}
}

267 
	$c⁄åa°˘æ
(
uöt8
 
°¨t
, uöt8 
°›
)

269 
uöt8
 
i
;

270 i‡(
°¨t
 < 
°›
)

272 
i
=
°¨t
; i<
°›
; i+=1)

274 
	`SëC⁄åa°
(
iI¡RegVÆue
, 
i
);

275 
	`dñay_us
(80);

280 
i
=
°¨t
; i>
°›
; i-=1)

282 
	`SëC⁄åa°
(
iI¡RegVÆue
, 
i
);

283 
	`dñay_us
(120);

286 
	}
}

291 
	$CÀ¨S¸ìn
()

293 
uöt8
 
x
,
y
;

294 
x
 = 0;x < 8 ;x++){

295 
	`SëRamAddr
(
x
 , 0);

296 
y
 = 0 ; y < 128 ; y++){

298 
	`WrôeLCD
(
DATA
 , 0x00);

301 
	}
}

306 
	$HÆLcdInô
()

308 
	`dñay_us
(10000);

309 
P1DIR
 |= 0xFC;

310 
P2DIR
 |= 0x01;

311 
P0DIR
 |= 0x02;

312 
P1_2
 = 0;

313 
	`dñay_us
(100);

314 
	`WrôeLCD
(
COMMAND
 , 0xE2);

316 
	`dñay_us
(100);

317 
	`WrôeLCD
(
COMMAND
 , 0xA3);

319 
	`dñay_us
(100);

320 
	`WrôeLCD
(
COMMAND
 , 0xA0);

322 
	`dñay_us
(100);

323 
	`WrôeLCD
(
COMMAND
 , 0xC8);

325 
	`dñay_us
(100);

326 
	`WrôeLCD
(
COMMAND
 , 0x24);

328 
	`dñay_us
(100);

329 
	`WrôeLCD
(
COMMAND
 , 0x81);

331 
	`dñay_us
(100);

332 
	`WrôeLCD
(
COMMAND
 , 0x14);

334 
	`dñay_us
(100);

335 
	`WrôeLCD
(
COMMAND
 , 0x2F);

337 
	`dñay_us
(100);

338 
	`WrôeLCD
(
COMMAND
 , 0x40);

340 
	`dñay_us
(100);

341 
	`WrôeLCD
(
COMMAND
 , 0xB0);

343 
	`dñay_us
(100);

344 
	`WrôeLCD
(
COMMAND
 , 0x10);

346 
	`dñay_us
(100);

347 
	`WrôeLCD
(
COMMAND
 , 0x00);

349 
	`dñay_us
(100);

350 
	`WrôeLCD
(
COMMAND
 , 0xAF);

352 
	`WrôeLCD
(
COMMAND
 , 0x81);

353 
	`WrôeLCD
(
COMMAND
 , 0x1b);

354 
	`dñay_us
(100);

355 
	`SëC⁄åa°
(
iI¡RegVÆuó
,
C⁄åa°VÆue
);

356 
	`CÀ¨S¸ìn
();

361 
	}
}

371 
	$Pröt6
(
uöt8
 
xx
, uöt8 
yy
, uöt8 
ch1
[], uöt8 
yn
)

373 
uöt8
 
ii
 = 0;

374 
uöt8
 
bb
 = 0;

375 
ödex
 = 0 ;

377 
ch1
[
bb
] != '\0')

379 
ödex
 = ()(
ch1
[
bb
] - 0x20);

380 
ödex
 = ()index*6;

381 
ii
=0;ii<6;ii++)

383 
	`SëRamAddr
(
xx
 , 
yy
);

384 if(
yn
 == 0)

386 
	`WrôeLCD
(
DATA
, ~
F⁄tSy°em6x8
[
ödex
]);

391 
	`WrôeLCD
(
DATA
, 
F⁄tSy°em6x8
[
ödex
]);

393 
ödex
 += 1;

394 
yy
 += 1;

396 
bb
 += 1;

398 
	}
}

407 
	$Pröä8
(
uöt8
 
xx
 ,uöt8 
yy
 , 
uöt32
 
no
,uöt8 
yn
,uöt8 
À
)

409 
uöt8
 
ch2
[6];

410 
uöt8
 
ii
;

412 
ii
 = 1 ; iò<
À
 ;){

413 
ch2
[
À
 - 
ii
] = 
no
 % 10 + 0x30;

414 
no
 /= 10;

415 
ii
 += 1;

417 
ch2
[
À
] = '\0';

418 
	`Pröt8
(
xx
 ,
yy
 ,
ch2
 ,
yn
);

419 
	}
}

427 
	$PrötCh8
(
uöt16
 
y
,uöt16 
x
, 
uöt8
 
ch
,uöt16 
yn
)

429 
uöt8
 
wm
;

430 
uöt16
 
addî
;

432 
addî
 = (
ch
 - 0x20) * 16;

433 
wm
 = 0;wm < 8;wm++)

435 
	`SëRamAddr
(
y
 , 
x
);

436 if(
yn
 == 0)

438 
	`WrôeLCD
(
DATA
, ~
F⁄t8X8
[
addî
]);

442 
	`WrôeLCD
(
DATA
, 
F⁄t8X8
[
addî
]);

444 
addî
 += 1;

445 
x
 += 1;

447 
y
 += 1;

448 
x
 -= 8;

449 
wm
 = 0;wm < 8;wm++)

451 
	`SëRamAddr
(
y
 , 
x
);

452 if(
yn
 == 0)

454 
	`WrôeLCD
(
DATA
, ~
F⁄t8X8
[
addî
]);

458 
	`WrôeLCD
(
DATA
, 
F⁄t8X8
[
addî
]);

460 
addî
 += 1;

461 
x
 += 1;

463 
	}
}

472 
	$Pröt8
(
uöt16
 
y
,uöt16 
x
, 
uöt8
 
ch
[],uöt16 
yn
)

474 
uöt8
 
wm
 ,
ii
 = 0;

475 
uöt16
 
addî
;

477 
ch
[
ii
] != '\0')

479 
addî
 = (
ch
[
ii
] - 0x20) * 16;

481 
wm
 = 0;wm < 8;wm++)

483 
	`SëRamAddr
(
y
 , 
x
);

484 if(
yn
 == 0)

486 
	`WrôeLCD
(
DATA
, ~
F⁄t8X8
[
addî
]);

490 
	`WrôeLCD
(
DATA
, 
F⁄t8X8
[
addî
]);

492 
addî
 += 1;

493 
x
 += 1;

495 
y
 += 1;

496 
x
 -= 8;

497 
wm
 = 0;wm < 8;wm++)

499 
	`SëRamAddr
(
y
 , 
x
);

500 if(
yn
 == 0)

502 
	`WrôeLCD
(
DATA
, ~
F⁄t8X8
[
addî
]);

506 
	`WrôeLCD
(
DATA
, 
F⁄t8X8
[
addî
]);

508 
addî
 += 1;

509 
x
 += 1;

511 
ii
 += 1;

512 
y
 -= 1;

515 
	}
}

650 
	$Pröt
(
uöt8
 
y
, uöt8 
x
, uöt8 
ch
[], 
uöt16
 
yn
)

652 
uöt8
 
ch2
[3];

653 
uöt8
 
ii
;

654 
ii
 = 0;

655 
ch
[
ii
] != '\0')

657 if(
ch
[
ii
] > 128)

659 
ch2
[0] = 
ch
[
ii
];

660 
ch2
[1] = 
ch
[
ii
 + 1];

661 
ch2
[2] = '\0';

663 
x
 += 16;

664 
ii
 += 2;

668 
ch2
[0] = 
ch
[
ii
];

669 
ch2
[1] = '\0';

670 
	`Pröt8
(
y
 , 
x
 , 
ch2
 , 
yn
);

671 
x
 += 8;

672 
ii
 += 1;

675 
	}
}

676 
	$HÆLcdCÀ¨Löe
–
uöt8
 
löe
 )

678 
	`Pröt8
(
löe
,0," ",1);

679 
	}
}

680 
	$HÆLcdWrôeSåög
 ( *
°r
, 
uöt8
 
›ti⁄
)

682 
i
;

683 
uöt8
 
LcdBuf
[20];

684 
	`oßl_mem˝y
(
LcdBuf
,
°r
,20);

685 
i
 = 
	`°æí
(
°r
);

686 
LcdBuf
[
i
] = '\0';

687 
›ti⁄
)

695 
	`HÆLcdCÀ¨Löe
–
›ti⁄
%7 );

696 
	`Pröt8
(
›ti⁄
%7,0,(*)
LcdBuf
,1);

741 
	}
}

743 
	$HÆLcdWrôeVÆue
 ( 
uöt32
 
vÆue
, c⁄° 
uöt8
 
ødix
, uöt8 
›ti⁄
)

746 
	}
}

748 
	$HÆLcdWrôeS¸ìn
–*
löe1
, *
löe2
 )

750 #i‡(
HAL_LCD
 =
TRUE
)

751 
	`HÆLcdWrôeSåög
–
löe1
, 3 );

752 
	`HÆLcdWrôeSåög
–
löe2
, 5 );

755 
	}
}

756 
	$HÆLcdWrôeSåögVÆue
–*
tôÀ
, 
uöt16
 
vÆue
, 
uöt8
 
f‹m©
, uöt8 
löe
 )

759 
	}
}

760 
	$HÆLcdWrôeSåögVÆueVÆue
–*
tôÀ
, 
uöt16
 
vÆue1
, 
uöt8
 
f‹m©1
,

761 
uöt16
 
vÆue2
, 
uöt8
 
f‹m©2
, uöt8 
löe
 )

764 
	}
}

765 
	$upLcd
–*
±r
,
uöt8
 
›
 )

767 
	`HÆLcdWrôeSåög
(
±r
,
›
);

768 
	}
}

	@Components/hal/target/CC2530EB/hal_led.c

43 
	~"hÆ_mcu.h
"

44 
	~"hÆ_defs.h
"

45 
	~"hÆ_ty≥s.h
"

46 
	~"hÆ_drivîs.h
"

47 
	~"hÆ_Àd.h
"

48 
	~"oßl.h
"

49 
	~"hÆ_bﬂrd.h
"

64 
uöt8
 
	mmode
;

65 
uöt8
 
	mtodo
;

66 
uöt8
 
	m⁄P˘
;

67 
uöt16
 
	mtime
;

68 
uöt32
 
	m√xt
;

69 } 
	tHÆLedC⁄åﬁ_t
;

73 
HÆLedC⁄åﬁ_t
 
	mHÆLedC⁄åﬁTabÀ
[
HAL_LED_DEFAULT_MAX_LEDS
];

74 
uöt8
 
	m¶ìpA˘ive
;

75 } 
	tHÆLedSètus_t
;

83 
uöt8
 
	gHÆLedSèã
;

85 #i‡
HAL_LED
 =
TRUE


86 
uöt8
 
	gHÆSÀïLedSèã
;

87 
uöt8
 
	g¥eBlökSèã
;

91 #ifde‡
BLINK_LEDS


92 
HÆLedSètus_t
 
	gHÆLedSètusC⁄åﬁ
;

98 #i‡(
HAL_LED
 =
TRUE
)

99 
HÆLedUpd©e
 ();

100 
HÆLedOnOff
 (
uöt8
 
Àds
, uöt8 
mode
);

116 
	$HÆLedInô
 ()

118 #i‡(
HAL_LED
 =
TRUE
)

120 
	`HÆLedSë
 (
HAL_LED_ALL
, 
HAL_LED_MODE_OFF
);

122 #ifde‡
BLINK_LEDS


124 
HÆLedSètusC⁄åﬁ
.
¶ìpA˘ive
 = 
FALSE
;

126 
	}
}

137 
uöt8
 
	$HÆLedSë
 (
uöt8
 
Àds
, uöt8 
mode
)

140 #i‡(
	`deföed
 (
BLINK_LEDS
)Ë&& (
HAL_LED
 =
TRUE
)

141 
uöt8
 
Àd
;

142 
HÆLedC⁄åﬁ_t
 *
°s
;

144 
mode
)

146 
HAL_LED_MODE_BLINK
:

148 
	`HÆLedBlök
 (
Àds
, 1, 
HAL_LED_DEFAULT_DUTY_CYCLE
, 
HAL_LED_DEFAULT_FLASH_TIME
);

151 
HAL_LED_MODE_FLASH
:

153 
	`HÆLedBlök
 (
Àds
, 
HAL_LED_DEFAULT_FLASH_COUNT
, 
HAL_LED_DEFAULT_DUTY_CYCLE
, 
HAL_LED_DEFAULT_FLASH_TIME
);

156 
HAL_LED_MODE_ON
:

157 
HAL_LED_MODE_OFF
:

158 
HAL_LED_MODE_TOGGLE
:

160 
Àd
 = 
HAL_LED_1
;

161 
Àds
 &
HAL_LED_ALL
;

162 
°s
 = 
HÆLedSètusC⁄åﬁ
.
HÆLedC⁄åﬁTabÀ
;

164 
Àds
)

166 i‡(
Àds
 & 
Àd
)

168 i‡(
mode
 !
HAL_LED_MODE_TOGGLE
)

170 
°s
->
mode
 = mode;

174 
°s
->
mode
 ^
HAL_LED_MODE_ON
;

176 
	`HÆLedOnOff
 (
Àd
, 
°s
->
mode
);

177 
Àds
 ^
Àd
;

179 
Àd
 <<= 1;

180 
°s
++;

188 #ñi‡(
HAL_LED
 =
TRUE
)

189 
	`LedOnOff
(
Àds
, 
mode
);

192 (Ë
Àds
;

193 (Ë
mode
;

196  ( 
HÆLedSèã
 );

198 
	}
}

213 
	$HÆLedBlök
 (
uöt8
 
Àds
, uöt8 
numBlöks
, uöt8 
≥r˚¡
, 
uöt16
 
≥riod
)

215 #i‡(
	`deföed
 (
BLINK_LEDS
)Ë&& (
HAL_LED
 =
TRUE
)

216 
uöt8
 
Àd
;

217 
HÆLedC⁄åﬁ_t
 *
°s
;

219 i‡(
Àds
 && 
≥r˚¡
 && 
≥riod
)

221 i‡(
≥r˚¡
 < 100)

223 
Àd
 = 
HAL_LED_1
;

224 
Àds
 &
HAL_LED_ALL
;

225 
°s
 = 
HÆLedSètusC⁄åﬁ
.
HÆLedC⁄åﬁTabÀ
;

227 
Àds
)

229 i‡(
Àds
 & 
Àd
)

232 
¥eBlökSèã
 |(
Àd
 & 
HÆLedSèã
);

234 
°s
->
mode
 = 
HAL_LED_MODE_OFF
;

235 
°s
->
time
 = 
≥riod
;

236 
°s
->
⁄P˘
 = 
≥r˚¡
;

237 
°s
->
todo
 = 
numBlöks
;

238 i‡(!
numBlöks
Ë
°s
->
mode
 |
HAL_LED_MODE_FLASH
;

239 
°s
->
√xt
 = 
	`oßl_GëSy°emClock
();

240 
°s
->
mode
 |
HAL_LED_MODE_BLINK
;

241 
Àds
 ^
Àd
;

243 
Àd
 <<= 1;

244 
°s
++;

246 
	`oßl_£t_evít
 (
HÆ_TaskID
, 
HAL_LED_BLINK_EVENT
);

250 
	`HÆLedSë
 (
Àds
, 
HAL_LED_MODE_ON
);

255 
	`HÆLedSë
 (
Àds
, 
HAL_LED_MODE_OFF
);

257 #ñi‡(
HAL_LED
 =
TRUE
)

258 
≥r˚¡
 = (
Àds
 & 
HÆLedSèã
Ë? 
HAL_LED_MODE_OFF
 : 
HAL_LED_MODE_ON
;

259 
	`HÆLedOnOff
 (
Àds
, 
≥r˚¡
);

262 (Ë
Àds
;

263 (Ë
numBlöks
;

264 (Ë
≥r˚¡
;

265 (Ë
≥riod
;

267 
	}
}

269 #i‡(
HAL_LED
 =
TRUE
)

279 
	$HÆLedUpd©e
 ()

281 
uöt8
 
Àd
;

282 
uöt8
 
p˘
;

283 
uöt8
 
Àds
;

284 
HÆLedC⁄åﬁ_t
 *
°s
;

285 
uöt32
 
time
;

286 
uöt16
 
√xt
;

287 
uöt16
 
waô
;

289 
√xt
 = 0;

290 
Àd
 = 
HAL_LED_1
;

291 
Àds
 = 
HAL_LED_ALL
;

292 
°s
 = 
HÆLedSètusC⁄åﬁ
.
HÆLedC⁄åﬁTabÀ
;

295 i‡(!
HÆLedSètusC⁄åﬁ
.
¶ìpA˘ive
)

297 
Àds
)

299 i‡(
Àds
 & 
Àd
)

301 i‡(
°s
->
mode
 & 
HAL_LED_MODE_BLINK
)

303 
time
 = 
	`oßl_GëSy°emClock
();

304 i‡(
time
 >
°s
->
√xt
)

306 i‡(
°s
->
mode
 & 
HAL_LED_MODE_ON
)

308 
p˘
 = 100 - 
°s
->
⁄P˘
;

309 
°s
->
mode
 &~
HAL_LED_MODE_ON
;

310 
	`HÆLedOnOff
 (
Àd
, 
HAL_LED_MODE_OFF
);

312 i‡(!(
°s
->
mode
 & 
HAL_LED_MODE_FLASH
))

314 
°s
->
todo
--;

315 i‡(!
°s
->
todo
)

317 
°s
->
mode
 ^
HAL_LED_MODE_BLINK
;

323 
p˘
 = 
°s
->
⁄P˘
;

324 
°s
->
mode
 |
HAL_LED_MODE_ON
;

325 
	`HÆLedOnOff
 (
Àd
, 
HAL_LED_MODE_ON
);

328 i‡(
°s
->
mode
 & 
HAL_LED_MODE_BLINK
)

330 
waô
 = (((
uöt32
)
p˘
 * (uöt32)
°s
->
time
) / 100);

331 
°s
->
√xt
 = 
time
 + 
waô
;

336 
waô
 = 0;

338 
	`HÆLedSë
 (
Àd
, ((
¥eBlökSèã
 &Üed)!=0)?
HAL_LED_MODE_ON
:
HAL_LED_MODE_OFF
);

340 
¥eBlökSèã
 &(
Àd
 ^ 0xFF);

345 
waô
 = 
°s
->
√xt
 - 
time
;

348 i‡(!
√xt
 || ( 
waô
 && (wait <Çext) ))

350 
√xt
 = 
waô
;

353 
Àds
 ^
Àd
;

355 
Àd
 <<= 1;

356 
°s
++;

359 i‡(
√xt
)

361 
	`oßl_°¨t_timîEx
(
HÆ_TaskID
, 
HAL_LED_BLINK_EVENT
, 
√xt
);

364 
	}
}

376 
	$HÆLedOnOff
 (
uöt8
 
Àds
, uöt8 
mode
)

378 i‡(
Àds
 & 
HAL_LED_1
)

380 i‡(
mode
 =
HAL_LED_MODE_ON
)

382 
	`HAL_TURN_ON_LED1
();

386 
	`HAL_TURN_OFF_LED1
();

390 i‡(
Àds
 & 
HAL_LED_2
)

392 i‡(
mode
 =
HAL_LED_MODE_ON
)

394 
	`HAL_TURN_ON_LED2
();

398 
	`HAL_TURN_OFF_LED2
();

402 i‡(
Àds
 & 
HAL_LED_3
)

404 i‡(
mode
 =
HAL_LED_MODE_ON
)

406 
	`HAL_TURN_ON_LED3
();

410 
	`HAL_TURN_OFF_LED3
();

414 i‡(
Àds
 & 
HAL_LED_4
)

416 i‡(
mode
 =
HAL_LED_MODE_ON
)

418 
	`HAL_TURN_ON_LED4
();

422 
	`HAL_TURN_OFF_LED4
();

427 i‡(
mode
)

429 
HÆLedSèã
 |
Àds
;

433 
HÆLedSèã
 &(
Àds
 ^ 0xFF);

435 
	}
}

447 
uöt8
 
	$HÆLedGëSèã
 ()

449 #i‡(
HAL_LED
 =
TRUE
)

450  
HÆLedSèã
;

454 
	}
}

465 
	$HÆLedE¡îSÀï
( )

467 #ifde‡
BLINK_LEDS


469 
HÆLedSètusC⁄åﬁ
.
¶ìpA˘ive
 = 
TRUE
;

472 #i‡(
HAL_LED
 =
TRUE
)

474 
HÆSÀïLedSèã
 = 0;

475 
HÆSÀïLedSèã
 |
	`HAL_STATE_LED1
();

476 
HÆSÀïLedSèã
 |
	`HAL_STATE_LED2
() << 1;

477 
HÆSÀïLedSèã
 |
	`HAL_STATE_LED3
() << 2;

478 
HÆSÀïLedSèã
 |
	`HAL_STATE_LED4
() << 3;

481 
	`HÆLedOnOff
 (
HAL_LED_ALL
, 
HAL_LED_MODE_OFF
);

484 
	}
}

495 
	$HÆLedExôSÀï
( )

497 #i‡(
HAL_LED
 =
TRUE
)

499 
	`HÆLedOnOff
(
HÆSÀïLedSèã
, 
HAL_LED_MODE_ON
);

502 
	`HÆLedUpd©e
();

505 #ifde‡
BLINK_LEDS


507 
HÆLedSètusC⁄åﬁ
.
¶ìpA˘ive
 = 
FALSE
;

509 
	}
}

	@Components/hal/target/CC2530EB/hal_mac_cfg.h

40 #i‚de‡
HAL_MAC_CFG_H


41 
	#HAL_MAC_CFG_H


	)

57 
	#HAL_MAC_RSSI_OFFSET
 -73

	)

58 #i‡
deföed
 (
HAL_PA_LNA
Ë|| deföed (
HAL_PA_LNA_CC2590
)

59 
	#HAL_MAC_RSSI_LNA_HGM_OFFSET
 -12

	)

60 
	#HAL_MAC_RSSI_LNA_LGM_OFFSET
 -6

	)

	@Components/hal/target/CC2530EB/hal_mcu.h

40 #i‚de‡
_HAL_MCU_H


41 
	#_HAL_MCU_H


	)

53 
	~"hÆ_defs.h
"

54 
	~"hÆ_ty≥s.h
"

61 
	#HAL_MCU_CC2530


	)

70 #ifde‡
__IAR_SYSTEMS_ICC__


71 
	~<ioCC2530.h
>

72 
	#HAL_COMPILER_IAR


	)

73 
	#HAL_MCU_LITTLE_ENDIAN
(Ë
__LITTLE_ENDIAN__


	)

74 
	#_PRAGMA
(
x
Ë
	`_Pøgma
(#x)

	)

75 
	#HAL_ISR_FUNC_DECLARATION
(
f
,
v
Ë
	`_PRAGMA
(
ve˘‹
=vË
__√¨_func
 
__öãºu±
 
	`f
()

	)

76 
	#HAL_ISR_FUNC_PROTOTYPE
(
f
,
v
Ë
	`_PRAGMA
(
ve˘‹
=vË
__√¨_func
 
__öãºu±
 
	`f
()

	)

77 
	#HAL_ISR_FUNCTION
(
f
,
v
Ë
	`HAL_ISR_FUNC_PROTOTYPE
(f,v); 
	`HAL_ISR_FUNC_DECLARATION
(f,v)

	)

80 #ñi‡
deföed
 
__KEIL__


81 
	~<CC2530.h
>

82 
	#HAL_COMPILER_KEIL


	)

83 
	#HAL_MCU_LITTLE_ENDIAN
(Ë0

	)

84 
	#HAL_ISR_FUNC_DECLARATION
(
f
,
v
Ë
	`f
(Ë
öãºu±
 
	)
v

85 
	#HAL_ISR_FUNC_PROTOTYPE
(
f
,
v
Ë
	`f
()

	)

86 
	#HAL_ISR_FUNCTION
(
f
,
v
Ë
	`HAL_ISR_FUNC_PROTOTYPE
(f,v); 
	`HAL_ISR_FUNC_DECLARATION
(f,v)

	)

98 
	#HAL_ENABLE_INTERRUPTS
(Ë
	`°
–
EA
 = 1; )

	)

99 
	#HAL_DISABLE_INTERRUPTS
(Ë
	`°
–
EA
 = 0; )

	)

100 
	#HAL_INTERRUPTS_ARE_ENABLED
(Ë(
EA
)

	)

102 
	thÆI¡Sèã_t
;

103 
	#HAL_ENTER_CRITICAL_SECTION
(
x
Ë
	`°
–x = 
EA
; 
	`HAL_DISABLE_INTERRUPTS
(); )

	)

104 
	#HAL_EXIT_CRITICAL_SECTION
(
x
Ë
	`°
–
EA
 = x; )

	)

105 
	#HAL_CRITICAL_STATEMENT
(
x
Ë
	`°
–
hÆI¡Sèã_t
 
_s
; 
	`HAL_ENTER_CRITICAL_SECTION
(_s); x; 
	`HAL_EXIT_CRITICAL_SECTION
(_s); )

	)

112 
	#WD_EN
 
	`BV
(3)

	)

113 
	#WD_MODE
 
	`BV
(2)

	)

114 
	#WD_INT_1900_USEC
 (
	`BV
(0Ë| BV(1))

	)

115 
	#WD_RESET1
 (0xA0 | 
WD_EN
 | 
WD_INT_1900_USEC
)

	)

116 
	#WD_RESET2
 (0x50 | 
WD_EN
 | 
WD_INT_1900_USEC
)

	)

117 
	#WD_KICK
(Ë
	`°
–
WDCTL
 = (0xA0 | WDCTL & 0x0F); WDCTL = (0x50 | WDCTL & 0x0F); )

	)

120 
	#HAL_SYSTEM_RESET
(Ë
	`°
–
	`HAL_DISABLE_INTERRUPTS
(); 
WDCTL
 = 
WD_RESET1
; WDCTL = 
WD_RESET2
; ;;); )

	)

126 
	#REV_A
 0x00

	)

127 
	#REV_B
 0x11

	)

128 
	#REV_C
 0x20

	)

129 
	#REV_D
 0x21

	)

137 
	#PCON_IDLE
 
	`BV
(0Ë

	)

140 
	#OSC_PD
 
	`BV
(2Ë

	)

141 
	#PMODE
 (
	`BV
(1Ë| BV(0)Ë

	)

144 
	#XOSC_STB
 
	`BV
(6Ë

	)

145 
	#HFRC_STB
 
	`BV
(5Ë

	)

148 
	#OSC_PD
 
	`BV
(2Ë

	)

152 
	#OSC
 
	`BV
(6)

	)

153 
	#TICKSPD
(
x
Ë(x << 3)

	)

154 
	#CLKSPD
(
x
Ë(x << 0)

	)

155 
	#CLKCONCMD_32MHZ
 (0)

	)

156 
	#CLKCONCMD_16MHZ
 (
	`CLKSPD
(1Ë| 
	`TICKSPD
(1Ë| 
OSC
)

	)

159 
	#LDRDY
 
	`BV
(0Ë

	)

164 #ifde‡
POWER_SAVING


165 
	#CLEAR_SLEEP_MODE
(Ë
	`°
(
SLEEPCMD
 &~
PMODE
;Ë

	)

167 
	#CLEAR_SLEEP_MODE
()

	)

	@Components/hal/target/CC2530EB/hal_oad.c

48 
	~"comdef.h
"

49 
	~"hÆ_bﬂrd_cfg.h
"

50 
	~"hÆ_dma.h
"

51 
	~"hÆ_Êash.h
"

52 
	~"hÆ_ﬂd.h
"

53 
	~"hÆ_ty≥s.h
"

85 #i‡
HAL_OAD_BOOT_CODE


86 
hÆDMADesc_t
 
	gdmaCh0
;

94 
uöt16
 
runPﬁy
(uöt16 
¸c
, 
uöt8
 
vÆ
);

95 #i‡
HAL_OAD_XNV_IS_SPI


96 
HÆSPIRód
(
uöt32
 
addr
, 
uöt8
 *
pBuf
, 
uöt16
 
Àn
);

97 
HÆSPIWrôe
(
uöt32
 
addr
, 
uöt8
 *
pBuf
, 
uöt16
 
Àn
);

100 #i‡
HAL_OAD_BOOT_CODE


101 
dl2rc
();

102 
uöt16
 
¸cCÆc
();

120 #¥agm®
loˇti⁄
="NEAR_CODE"

121 
	$maö
()

123 
uöt16
 
¸c
[2];

125 
	`HAL_BOARD_INIT
();

126 #i‡
HAL_OAD_XNV_IS_SPI


127 
	`XNV_SPI_INIT
();

132 
	`HAL_DMA_SET_ADDR_DESC0
–&
dmaCh0
 );

133 
	`HÆFœshInô
();

135 
	`HÆFœshRód
(
HAL_OAD_CRC_ADDR
 / 
HAL_FLASH_PAGE_SIZE
,

136 
HAL_OAD_CRC_ADDR
 % 
HAL_FLASH_PAGE_SIZE
,

137 (
uöt8
 *)
¸c
, (crc));

139 i‡(
¸c
[0] != crc[1])

142 i‡((
¸c
[0] =0Ë|| (¸c[0] !
	`¸cCÆc
()))

144 
	`dl2rc
();

152 
¸c
[1] = crc[0];

153 
	`HÆFœshWrôe
((
HAL_OAD_CRC_ADDR
 / 
HAL_FLASH_WORD_SIZE
), (
uöt8
 *)
¸c
, 1);

158 
	`asm
("LJMP 0x800\n");

159 
	}
}

172 
	$dl2rc
()

174 
¥ómbÀ_t
 
¥ómbÀ
;

175 
uöt32
 
o£t
;

176 
uöt16
 
addr
 = 
HAL_OAD_RC_START
 / 
HAL_FLASH_WORD_SIZE
;

177 
uöt8
 
buf
[4];

179 
	`HÆOADRód
(
PREAMBLE_OFFSET
, (
uöt8
 *)&
¥ómbÀ
, (
¥ómbÀ_t
), 
HAL_OAD_DL
);

181 
o£t
 = 0; o£à< 
¥ómbÀ
.
Àn
; o£à+
HAL_FLASH_WORD_SIZE
)

183 
	`HÆOADRód
(
o£t
, 
buf
, 
HAL_FLASH_WORD_SIZE
, 
HAL_OAD_DL
);

184 i‡((
addr
 % (
HAL_FLASH_PAGE_SIZE
 / 
HAL_FLASH_WORD_SIZE
)) == 0)

186 
	`HÆFœshEø£
(
addr
 / (
HAL_FLASH_PAGE_SIZE
 / 
HAL_FLASH_WORD_SIZE
));

188 
	`HÆFœshWrôe
(
addr
++, 
buf
, 1);

190 
	}
}

201 
uöt16
 
	$¸cCÆc
()

203 
¥ómbÀ_t
 
¥ómbÀ
;

204 
uöt32
 
o£t
;

205 
uöt16
 
¸c
 = 0;

207 
	`HÆOADRód
(
PREAMBLE_OFFSET
, (
uöt8
 *)&
¥ómbÀ
, (
¥ómbÀ_t
), 
HAL_OAD_RC
);

210 
o£t
 = 0; o£à< 
¥ómbÀ
.
Àn
; oset++)

212 i‡((
o£t
 < 
HAL_OAD_CRC_OSET
) || (oset >= HAL_OAD_CRC_OSET+4))

214 
uöt8
 
buf
;

215 
	`HÆOADRód
(
o£t
, &
buf
, 1, 
HAL_OAD_RC
);

216 
¸c
 = 
	`runPﬁy
(¸c, 
buf
);

221 
¸c
 = 
	`runPﬁy
(crc, 0);

222 
¸c
 = 
	`runPﬁy
(crc, 0);

224  
¸c
;

225 
	}
}

238 
uöt16
 
	$runPﬁy
(
uöt16
 
¸c
, 
uöt8
 
vÆ
)

240 c⁄° 
uöt16
 
pﬁy
 = 0x1021;

241 
uöt8
 
˙t
;

243 
˙t
 = 0; c¡ < 8; c¡++, 
vÆ
 <<= 1)

245 
uöt8
 
msb
 = (
¸c
 & 0x8000) ? 1 : 0;

247 
¸c
 <<= 1;

248 i‡(
vÆ
 & 0x80Ë
¸c
 |= 0x0001;

249 i‡(
msb
Ë
¸c
 ^
pﬁy
;

252  
¸c
;

253 
	}
}

264 
uöt8
 
	$HÆOADChkDL
(
uöt8
 
dlImagePªambÀOff£t
)

266 
¥ómbÀ_t
 
¥ómbÀ
;

267 
uöt32
 
o£t
;

268 
uöt16
 
¸c
 = 0, 
¸c2
;

270 
	`HÆOADRód
(
dlImagePªambÀOff£t
, (
uöt8
 *)&
¥ómbÀ
, (
¥ómbÀ_t
), 
HAL_OAD_DL
);

273 
o£t
 = 0; o£à< 
¥ómbÀ
.
Àn
; oset++)

275 i‡((
o£t
 < 
HAL_OAD_CRC_OSET
) || (oset >= HAL_OAD_CRC_OSET+4))

277 
uöt8
 
buf
;

278 
	`HÆOADRód
(
o£t
, &
buf
, 1, 
HAL_OAD_DL
);

279 
¸c
 = 
	`runPﬁy
(¸c, 
buf
);

284 
¸c
 = 
	`runPﬁy
(crc, 0);

285 
¸c
 = 
	`runPﬁy
(crc, 0);

287 
	`HÆOADRód
(
HAL_OAD_CRC_OSET
, (
uöt8
 *)&
¸c2
, (¸c2), 
HAL_OAD_DL
);

288  (
¸c2
 =
¸c
Ë? 
SUCCESS
 : 
FAILURE
;

289 
	}
}

301 
	$HÆOADInvRC
()

303 
uöt16
 
¸c
[2] = {0,0xFFFF};

304 
	`HÆFœshWrôe
((
HAL_OAD_CRC_ADDR
 / 
HAL_FLASH_WORD_SIZE
), (
uöt8
 *)
¸c
, 1);

305 
	}
}

319 
	$HÆOADRód
(
uöt32
 
o£t
, 
uöt8
 *
pBuf
, 
uöt16
 
Àn
, 
image_t
 
ty≥
)

321 i‡(
HAL_OAD_RC
 !
ty≥
)

323 #i‡
HAL_OAD_XNV_IS_INT


324 
¥ómbÀ_t
 
¥ómbÀ
;

326 
	`HÆOADRód
(
PREAMBLE_OFFSET
, (
uöt8
 *)&
¥ómbÀ
, (
¥ómbÀ_t
), 
HAL_OAD_RC
);

328 
o£t
 +
HAL_OAD_RC_START
 + 
HAL_OAD_DL_OSET
;

329 #ñi‡
HAL_OAD_XNV_IS_SPI


330 
o£t
 +
HAL_OAD_DL_OSET
;

331 
	`HÆSPIRód
(
o£t
, 
pBuf
, 
Àn
);

337 
o£t
 +
HAL_OAD_RC_START
;

340 
	`HÆFœshRód
(
o£t
 / 
HAL_FLASH_PAGE_SIZE
, o£à% HAL_FLASH_PAGE_SIZE, 
pBuf
, 
Àn
);

341 
	}
}

360 
	$HÆOADWrôe
(
uöt32
 
o£t
, 
uöt8
 *
pBuf
, 
uöt16
 
Àn
, 
image_t
 
ty≥
)

362 i‡(
HAL_OAD_RC
 !
ty≥
)

364 #i‡
HAL_OAD_XNV_IS_INT


365 
¥ómbÀ_t
 
¥ómbÀ
;

367 
	`HÆOADRód
(
PREAMBLE_OFFSET
, (
uöt8
 *)&
¥ómbÀ
, (
¥ómbÀ_t
), 
HAL_OAD_RC
);

369 
o£t
 +
HAL_OAD_RC_START
 + 
HAL_OAD_DL_OSET
;

370 #ñi‡
HAL_OAD_XNV_IS_SPI


371 
o£t
 +
HAL_OAD_DL_OSET
;

372 
	`HÆSPIWrôe
(
o£t
, 
pBuf
, 
Àn
);

378 
o£t
 +
HAL_OAD_RC_START
;

381 i‡((
o£t
 % 
HAL_FLASH_PAGE_SIZE
) == 0)

383 
	`HÆFœshEø£
(
o£t
 / 
HAL_FLASH_PAGE_SIZE
);

386 
	`HÆFœshWrôe
(
o£t
 / 
HAL_FLASH_WORD_SIZE
, 
pBuf
, 
Àn
 / HAL_FLASH_WORD_SIZE);

387 
	}
}

389 #i‡
HAL_OAD_XNV_IS_INT


399 
uöt32
 
	$HÆOADAvaû
()

407  
HAL_OAD_DL_MAX
 - 
HAL_OAD_DL_OSET
;

408 
	}
}

410 #ñi‡
HAL_OAD_XNV_IS_SPI


416 
	#XNV_STAT_CMD
 0x05

	)

417 
	#XNV_WREN_CMD
 0x06

	)

418 
	#XNV_WRPG_CMD
 0x0A

	)

419 
	#XNV_READ_CMD
 0x0B

	)

421 
	#XNV_STAT_WIP
 0x01

	)

432 
xnvSPIWrôe
(
uöt8
 
ch
);

433 
	$xnvSPIWrôe
(
uöt8
 
ch
)

435 
	`XNV_SPI_TX
(
ch
);

436 
	`XNV_SPI_WAIT_RXRDY
();

437 
	}
}

448 
uöt32
 
	$HÆOADAvaû
()

450  
HAL_OAD_DL_MAX
 - 
HAL_OAD_DL_OSET
;

451 
	}
}

464 
	$HÆSPIRód
(
uöt32
 
addr
, 
uöt8
 *
pBuf
, 
uöt16
 
Àn
)

466 
	`XNV_SPI_BEGIN
();

468 
	`xnvSPIWrôe
(
XNV_STAT_CMD
);

469 } 
	`XNV_SPI_RX
(Ë& 
XNV_STAT_WIP
);

470 
	`XNV_SPI_END
();

471 
	`asm
("NOP");ásm("NOP");

473 
	`XNV_SPI_BEGIN
();

474 
	`xnvSPIWrôe
(
XNV_READ_CMD
);

475 
	`xnvSPIWrôe
(
addr
 >> 16);

476 
	`xnvSPIWrôe
(
addr
 >> 8);

477 
	`xnvSPIWrôe
(
addr
);

478 
	`xnvSPIWrôe
(0);

480 
Àn
--)

482 
	`xnvSPIWrôe
(0);

483 *
pBuf
++ = 
	`XNV_SPI_RX
();

485 
	`XNV_SPI_END
();

486 
	}
}

499 
	$HÆSPIWrôe
(
uöt32
 
addr
, 
uöt8
 *
pBuf
, 
uöt16
 
Àn
)

501 
uöt8
 
˙t
;

503 
Àn
)

505 
	`XNV_SPI_BEGIN
();

507 
	`xnvSPIWrôe
(
XNV_STAT_CMD
);

508 } 
	`XNV_SPI_RX
(Ë& 
XNV_STAT_WIP
);

509 
	`XNV_SPI_END
();

510 
	`asm
("NOP");ásm("NOP");

512 
	`XNV_SPI_BEGIN
();

513 
	`xnvSPIWrôe
(
XNV_WREN_CMD
);

514 
	`XNV_SPI_END
();

515 
	`asm
("NOP");ásm("NOP");

517 
	`XNV_SPI_BEGIN
();

518 
	`xnvSPIWrôe
(
XNV_WRPG_CMD
);

519 
	`xnvSPIWrôe
(
addr
 >> 16);

520 
	`xnvSPIWrôe
(
addr
 >> 8);

521 
	`xnvSPIWrôe
(
addr
);

524 
˙t
 = 0 - (
uöt8
)
addr
;

525 i‡(
˙t
)

527 
addr
 +
˙t
;

531 
addr
 += 256;

536 
	`xnvSPIWrôe
(*
pBuf
++);

537 
˙t
--;

538 
Àn
--;

539 } 
Àn
 && 
˙t
);

540 
	`XNV_SPI_END
();

542 
	}
}

544 #îr‹ 
InvÆid
 
Xåa
-
NV
 
OAD
.

	@Components/hal/target/CC2530EB/hal_oad.h

39 #i‚de‡
HAL_OAD_H


40 
	#HAL_OAD_H


	)

46 
	~"hÆ_bﬂrd_cfg.h
"

47 
	~"hÆ_ty≥s.h
"

53 #i‡!
deföed
 
HAL_OAD_BOOT_CODE


54 
	#HAL_OAD_BOOT_CODE
 
FALSE


	)

58 
	#PACK_1


	)

65 
	#HAL_OAD_RC_START
 0x0800

	)

66 
	#HAL_OAD_CRC_ADDR
 0x0888

	)

67 
	#HAL_OAD_CRC_OSET
 (
HAL_OAD_CRC_ADDR
 - 
HAL_OAD_RC_START
)

	)

72 
	#HAL_OAD_XNV_IS_INT
 
FALSE


	)

73 
	#HAL_OAD_XNV_IS_SPI
 !
HAL_OAD_XNV_IS_INT


	)

79 
	#HAL_OAD_BOOT_PG_CNT
 2

	)

85 #i‡
HAL_OAD_XNV_IS_SPI
 && !
deföed
 
HAL_BOARD_CC2530EB_REV13


86 
	#HAL_OAD_DL_MAX
 0x40000

	)

87 
	#HAL_OAD_DL_SIZE
 (0x40000 - ((
HAL_NV_PAGE_CNT
+
HAL_OAD_BOOT_PG_CNT
)*
HAL_FLASH_PAGE_SIZE
))

	)

88 
	#HAL_OAD_DL_OSET
 0x0

89 #ñ£

	)

90 
	#HAL_OAD_DL_MAX
 (0x40000 - ((
HAL_NV_PAGE_CNT
+
HAL_OAD_BOOT_PG_CNT
)*
HAL_FLASH_PAGE_SIZE
))

	)

91 
	#HAL_OAD_DL_SIZE
 (
HAL_OAD_DL_MAX
 / 2)

	)

92 
	#HAL_OAD_DL_OSET
 (
HAL_OAD_DL_MAX
 / 2)

	)

96 
	#PREAMBLE_OFFSET
 0x8C

	)

103 
	mHAL_OAD_RC
,

104 
	mHAL_OAD_DL


105 } 
	timage_t
;

108 
uöt8
 
	mmagic
[2];

109 
uöt32
 
	mÀn
;

110 
uöt16
 
	mvîs
;

111 
uöt16
 
	mm™u
;

112 
uöt16
 
	m¥od
;

113 } 
	t¥ómbÀ_t
;

119 
uöt8
 
HÆOADChkDL
(uöt8 
dlImagePªambÀOff£t
);

120 
HÆOADInvRC
();

121 
uöt32
 
HÆOADAvaû
();

122 
HÆOADRód
(
uöt32
 
o£t
, 
uöt8
 *
pBuf
, 
uöt16
 
Àn
, 
image_t
 
ty≥
);

123 
HÆOADWrôe
(
uöt32
 
o£t
, 
uöt8
 *
pBuf
, 
uöt16
 
Àn
, 
image_t
 
ty≥
);

	@Components/hal/target/CC2530EB/hal_sleep.c

44 
	~"hÆ_ty≥s.h
"

45 
	~"hÆ_mcu.h
"

46 
	~"hÆ_bﬂrd.h
"

47 
	~"hÆ_¶ìp.h
"

48 
	~"hÆ_Àd.h
"

49 
	~"hÆ_key.h
"

50 
	~"mac_≠i.h
"

51 
	~"OSAL.h
"

52 
	~"OSAL_Timîs.h
"

53 
	~"OSAL_Tasks.h
"

54 
	~"OSAL_PwrMgr.h
"

55 
	~"OnBﬂrd.h
"

56 
	~"hÆ_drivîs.h
"

57 
	~"hÆ_as£π.h
"

58 
	~"mac_mcu.h
"

60 #i‡!
deföed
 (
RTR_NWK
Ë&& deföed (
NWK_AUTO_POLL
)

61 
	~"nwk_globÆs.h
"

62 
	~"ZGlobÆs.h
"

73 
	#CC2530_PM0
 0

	)

74 
	#CC2530_PM1
 1

	)

75 
	#CC2530_PM2
 2

	)

76 
	#CC2530_PM3
 3

	)

86 
	#HAL_SLEEP_OFF
 
CC2530_PM0


	)

87 
	#HAL_SLEEP_TIMER
 
CC2530_PM2


	)

88 
	#HAL_SLEEP_DEEP
 
CC2530_PM3


	)

94 
	#MAX_SLEEP_TIME
 510000

	)

101 #i‡!
deföed
 (
PM_MIN_SLEEP_TIME
)

102 
	#PM_MIN_SLEEP_TIME
 14

	)

108 #¥agm®
loˇti⁄
 = "SLEEP_CODE"

109 
	$hÆSëSÀïMode
()

111 
PCON
 |
PCON_IDLE
;

112 
	`asm
("NOP");

113 
	}
}

122 
	#HAL_SLEEP_ADJ_TICKS
 (7 + 10)

	)

124 #i‚de‡
HAL_SLEEP_DEBUG_POWER_MODE


126 
	#HAL_SLEEP_SET_POWER_MODE
(
mode
Ë
	`°
–
SLEEPCMD
 &~
PMODE
; \

	)

127 
	gSLEEPCMD
 |
mode
; \

128 !(
	gSTLOAD
 & 
	gLDRDY
)); \

130 
hÆSëSÀïMode
(); \

135 
	#HAL_SLEEP_SET_POWER_MODE
(
mode
Ë
	`°
–
hÆSÀïI¡
 =
FALSE
); \

	)

136 
	ghÆSÀïI¡
 = 
FALSE
; )

140 
	#STIE_BV
 
	`BV
(5)

	)

141 
	#P0IE_BV
 
	`BV
(5)

	)

142 
	#P1IE_BV
 
	`BV
(4)

	)

143 
	#P2IE_BV
 
	`BV
(1)

	)

146 
	#HAL_SLEEP_TIMER_ENABLE_INT
(Ë
	`°
(
IEN0
 |
STIE_BV
;Ë

	)

147 
	#HAL_SLEEP_TIMER_DISABLE_INT
(Ë
	`°
(
IEN0
 &~
STIE_BV
;Ë

	)

148 
	#HAL_SLEEP_TIMER_CLEAR_INT
(Ë
	`°
(
IRCON
 &~0x80;Ë

	)

151 
	#HAL_SLEEP_IE_BACKUP_AND_DISABLE
(
õn0
, 
õn1
, 
õn2
Ë
	`°
(õn0 = 
IEN0
; \

	)

152 
	gõn1
 = 
IEN1
; \

153 
	gõn2
 = 
IEN2
; \

154 
	gIEN0
 &
STIE_BV
; \

155 
	gIEN1
 &
P0IE_BV
; \

156 
	gIEN2
 &(
P1IE_BV
|
P2IE_BV
);)

159 
	#HAL_SLEEP_IE_RESTORE
(
õn0
, 
õn1
, 
õn2
Ë
	`°
(
IEN0
 = ií0; \

	)

160 
	gIEN1
 = 
õn1
; \

161 
	gIEN2
 = 
õn2
;)

164 
	#HAL_SLEEP_MS_TO_320US
(
ms
Ë(((((
uöt32
Ë(ms)Ë* 100Ë+ 31Ë/ 32)

	)

167 #i‡
HAL_MCU_LITTLE_ENDIAN
()

168 
	#UINT32_NDX0
 0

	)

169 
	#UINT32_NDX1
 1

	)

170 
	#UINT32_NDX2
 2

	)

171 
	#UINT32_NDX3
 3

	)

173 
	#UINT32_NDX0
 3

	)

174 
	#UINT32_NDX1
 2

	)

175 
	#UINT32_NDX2
 1

	)

176 
	#UINT32_NDX3
 0

	)

186 
uöt8
 
	ghÆPwrMgtMode
 = 
HAL_SLEEP_OFF
;

189 
uöt32
 
	ghÆSÀïTimîSèπ
;

192 
uöt32
 
	ghÆAccumuœãdSÀïTime
;

194 #ifde‡
HAL_SLEEP_DEBUG_POWER_MODE


195 
boﬁ
 
	ghÆSÀïI¡
 = 
FALSE
;

203 
hÆSÀïSëTimî
(
uöt32
 
timeout
);

204 
uöt32
 
HÆTimîEœp£d
( );

223 
	$hÆSÀï
–
uöt16
 
oßl_timeout
 )

225 
uöt32
 
timeout
;

226 
uöt32
 
macTimeout
 = 0;

228 
hÆAccumuœãdSÀïTime
 = 0;

231 
timeout
 = 
	`HAL_SLEEP_MS_TO_320US
(
oßl_timeout
);

232 i‡(
timeout
 == 0)

234 
timeout
 = 
	`MAC_PwrNextTimeout
();

239 
macTimeout
 = 
	`MAC_PwrNextTimeout
();

242 i‡((
macTimeout
 !0Ë&& (macTimeouà< 
timeout
))

244 
timeout
 = 
macTimeout
;

251 
hÆPwrMgtMode
 = (
timeout
 =0Ë? 
HAL_SLEEP_DEEP
 : 
HAL_SLEEP_TIMER
;

257 #i‡!
	`deföed
 (
RTR_NWK
Ë&& deföed (
NWK_AUTO_POLL
)

258 i‡((
timeout
 > 
	`HAL_SLEEP_MS_TO_320US
(
PM_MIN_SLEEP_TIME
)) ||

259 (
timeout
 =0 && 
zgPﬁlR©e
 == 0))

261 i‡((
timeout
 > 
	`HAL_SLEEP_MS_TO_320US
(
PM_MIN_SLEEP_TIME
)) ||

262 (
timeout
 == 0))

265 
hÆI¡Sèã_t
 
õn0
, 
õn1
, 
õn2
;

267 
	`HAL_ASSERT
(
	`HAL_INTERRUPTS_ARE_ENABLED
());

268 
	`HAL_DISABLE_INTERRUPTS
();

271 i‡(
	`MAC_PwrOffReq
(
MAC_PWR_SLEEP_DEEP
Ë=
MAC_SUCCESS
)

273  (
	`HAL_SLEEP_MS_TO_320US
(
hÆAccumuœãdSÀïTime
Ë< 
timeout
) || (timeout == 0) )

276 
	`HÆKeyE¡îSÀï
();

278 #ifde‡
HAL_SLEEP_DEBUG_LED


279 
	`HAL_TURN_OFF_LED3
();

282 
	`HÆLedE¡îSÀï
();

286 i‡(
timeout
 != 0)

288 i‡(
timeout
 > 
	`HAL_SLEEP_MS_TO_320US
–
MAX_SLEEP_TIME
 ))

290 
timeout
 -
	`HAL_SLEEP_MS_TO_320US
–
MAX_SLEEP_TIME
 );

291 
	`hÆSÀïSëTimî
(
	`HAL_SLEEP_MS_TO_320US
–
MAX_SLEEP_TIME
 ));

296 
	`hÆSÀïSëTimî
(
timeout
);

300 
	`HAL_SLEEP_TIMER_CLEAR_INT
();

301 
	`HAL_SLEEP_TIMER_ENABLE_INT
();

304 #ifde‡
HAL_SLEEP_DEBUG_LED


305 i‡(
hÆPwrMgtMode
 =
CC2530_PM1
)

307 
	`HAL_TURN_ON_LED1
();

311 
	`HAL_TURN_OFF_LED1
();

316 
	`HAL_SLEEP_IE_BACKUP_AND_DISABLE
(
õn0
, 
õn1
, 
õn2
);

317 
	`HAL_ENABLE_INTERRUPTS
();

320 
	`HAL_SLEEP_SET_POWER_MODE
(
hÆPwrMgtMode
);

321 
	`HAL_DISABLE_INTERRUPTS
();

324 
	`HAL_SLEEP_IE_RESTORE
(
õn0
, 
õn1
, 
õn2
);

327 
	`HAL_SLEEP_TIMER_DISABLE_INT
();

330 
hÆAccumuœãdSÀïTime
 +(
	`HÆTimîEœp£d
(Ë/ 
TICK_COUNT
);

333 i‡–
oßl_timeout
 > 
hÆAccumuœãdSÀïTime
)

335 
oßl_timeout
 -
hÆAccumuœãdSÀïTime
;

338 #ifde‡
HAL_SLEEP_DEBUG_LED


339 
	`HAL_TURN_ON_LED3
();

342 
	`HÆLedExôSÀï
();

346 i‡–
	`HÆKeyExôSÀï
() )

352 i‡–
timeout
 == 0 ) ;

356 
	`MAC_PwrOnReq
();

360 
	`HAL_ENABLE_INTERRUPTS
();

362 
	}
}

384 
	$hÆSÀïSëTimî
(
uöt32
 
timeout
)

386 
uöt32
 
ticks
;

389 ((
uöt8
 *Ë&
ticks
)[
UINT32_NDX0
] = 
ST0
;

390 ((
uöt8
 *Ë&
ticks
)[
UINT32_NDX1
] = 
ST1
;

391 ((
uöt8
 *Ë&
ticks
)[
UINT32_NDX2
] = 
ST2
;

392 ((
uöt8
 *Ë&
ticks
)[
UINT32_NDX3
] = 0;

395 
hÆSÀïTimîSèπ
 = 
ticks
;

400 
ticks
 +(
timeout
 * 671) / 64;

403 
ticks
 -
HAL_SLEEP_ADJ_TICKS
;

406 
ST2
 = ((
uöt8
 *Ë&
ticks
)[
UINT32_NDX2
];

407 
ST1
 = ((
uöt8
 *Ë&
ticks
)[
UINT32_NDX1
];

408 
ST0
 = ((
uöt8
 *Ë&
ticks
)[
UINT32_NDX0
];

409 
	}
}

427 
uöt32
 
	$TimîEœp£d
( )

429  ( 
hÆAccumuœãdSÀïTime
 );

430 
	}
}

450 
uöt32
 
	$HÆTimîEœp£d
( )

452 
uöt32
 
ticks
;

455 ((
uöt8
 *Ë&
ticks
)[
UINT32_NDX0
] = 
ST0
;

456 ((
uöt8
 *Ë&
ticks
)[
UINT32_NDX1
] = 
ST1
;

457 ((
uöt8
 *Ë&
ticks
)[
UINT32_NDX2
] = 
ST2
;

460 ((
uöt8
 *Ë&
ticks
)[
UINT32_NDX3
] = 0x01;

463 
ticks
 -
hÆSÀïTimîSèπ
;

466 
ticks
 +
HAL_SLEEP_ADJ_TICKS
;

469 
ticks
 &= 0x00FFFFFF;

472  ( ((
ticks
 * 125) + 4095) / 4096 );

473 
	}
}

491 
	$hÆSÀïWaô
(
uöt16
 
duøti⁄
)

493 
duøti⁄
--)

495 
	`asm
("NOP");

496 
	`asm
("NOP");

497 
	`asm
("NOP");

498 
	`asm
("NOP");

499 
	`asm
("NOP");

500 
	`asm
("NOP");

501 
	`asm
("NOP");

502 
	`asm
("NOP");

504 
	}
}

522 
	$hÆRe°‹eSÀïLevñ
( )

525 
	}
}

543 
	$HAL_ISR_FUNCTION
(
hÆSÀïTimîI§
, 
ST_VECTOR
)

545 
	`HAL_SLEEP_TIMER_CLEAR_INT
();

546 
	`CLEAR_SLEEP_MODE
();

549 
	`macMcuTimî2OvîÊowW‹k¨ound
();

551 #ifde‡
HAL_SLEEP_DEBUG_POWER_MODE


552 
hÆSÀïI¡
 = 
TRUE
;

554 
	}
}

	@Components/hal/target/CC2530EB/hal_startup.c

42 
	~"hÆ_bﬂrd.h
"

43 
	~"hÆ_ty≥s.h
"

45 #ifde‡
__˝lu•lus


49 #¥agm®
œnguage
=
exãnded


54 #¥agm®
loˇti⁄
="CSTART"

59 #i‡(
__CODE_MODEL__
 == 2)

60 
__√¨_func
 
__roŸ
 

62 
__roŸ
 

64 
__low_Àvñ_öô
();

77 #i‡(
__CODE_MODEL__
 == 2)

78 
__√¨_func
 
__roŸ
 

80 
__roŸ
 

82 
__low_Àvñ_öô
()

88 
MEMCTR
 = (MEMCTR & 0xF8) | 0x01;

99 #¥agm®
œnguage
=

101 #ifde‡
__˝lu•lus


	@Components/hal/target/CC2530EB/hal_timer.c

61 
	~"hÆ_mcu.h
"

62 
	~"hÆ_defs.h
"

63 
	~"hÆ_ty≥s.h
"

64 
	~"hÆ_timî.h
"

73 
	#HW_TIMER_1
 0x00

	)

74 
	#HW_TIMER_3
 0x01

	)

75 
	#HW_TIMER_4
 0x02

	)

76 
	#HW_TIMER_INVALID
 0x03

	)

77 
	#HW_TIMER_MAX
 0x03

	)

79 
	#IEN1_T1IE
 0x02

	)

80 
	#IEN1_T3IE
 0x08

	)

81 
	#IEN1_T4IE
 0x10

	)

83 
	#T1CTL_CH2IF
 0x80

	)

84 
	#T1CTL_CH1IF
 0x40

	)

85 
	#T1CTL_CH0IF
 0x20

	)

86 
	#T1CTL_OVFIF
 0x10

	)

88 
	#TIMIF_T1OVFIM
 0x40

	)

89 
	#TIMIF_T4CH1IF
 0x20

	)

90 
	#TIMIF_T4CH0IF
 0x10

	)

91 
	#TIMIF_T4OVFIF
 0x08

	)

92 
	#TIMIF_T3CH1IF
 0x04

	)

93 
	#TIMIF_T3CH0IF
 0x02

	)

94 
	#TIMIF_T3OVFIF
 0x01

	)

96 
	#T34CTL_OVFIM
 0x80

	)

98 
	#T134CCTL_IM
 0x40

	)

99 
	#T134CCTL_CMP_BITS
 0x38

	)

100 
	#T134CCTL_MODE
 0x04

	)

101 
	#T134CCTL_CAP_BITS
 0x03

	)

103 
	#T134CCTL_CMP_OC
 0x18

	)

104 
	#T134CCTL_CAP_RE
 0x01

	)

107 
	#HAL_TIMER1_16_TC_DIV1
 0x00

	)

108 
	#HAL_TIMER1_16_TC_DIV8
 0x04

	)

109 
	#HAL_TIMER1_16_TC_DIV32
 0x08

	)

110 
	#HAL_TIMER1_16_TC_DIV128
 0x0¯

	)

111 
	#HAL_TIMER1_16_TC_BITS
 0x0¯

	)

114 
	#HAL_TIMER34_8_TC_DIV1
 0x00

	)

115 
	#HAL_TIMER34_8_TC_DIV2
 0x20

	)

116 
	#HAL_TIMER34_8_TC_DIV4
 0x40

	)

117 
	#HAL_TIMER34_8_TC_DIV8
 0x60

	)

118 
	#HAL_TIMER34_8_TC_DIV16
 0x80

	)

119 
	#HAL_TIMER34_8_TC_DIV32
 0xA0

	)

120 
	#HAL_TIMER34_8_TC_DIV64
 0xC0

	)

121 
	#HAL_TIMER34_8_TC_DIV128
 0xE0

	)

122 
	#HAL_TIMER34_8_TC_BITS
 0xE0

	)

125 
	#HAL_TIMER1_OPMODE_STOP
 0x00

	)

126 
	#HAL_TIMER1_OPMODE_FREERUN
 0x01

	)

127 
	#HAL_TIMER1_OPMODE_MODULO
 0x02

	)

128 
	#HAL_TIMER1_OPMODE_BITS
 0x03

	)

130 
	#HAL_TIMER34_START
 0x10

	)

131 
	#HAL_TIMER34_OPMODE_FREERUN
 0x00

	)

132 
	#HAL_TIMER34_OPMODE_MODULO
 0x02

	)

133 
	#HAL_TIMER34_OPMODE_BITS
 0x03

	)

135 
	#HAL_TIMER_MODE_STOP
 0x03

	)

138 
	#HAL_TIMER1_16_PRESCALE
 
HAL_TIMER1_16_TC_DIV128


	)

139 
	#HAL_TIMER1_16_PRESCALE_VAL
 128

	)

140 
	#HAL_TIMER3_8_PRESCALE
 
HAL_TIMER34_8_TC_DIV128


	)

141 
	#HAL_TIMER3_8_PRESCALE_VAL
 128

	)

142 
	#HAL_TIMER4_8_PRESCALE
 
HAL_TIMER34_8_TC_DIV128


	)

143 
	#HAL_TIMER4_8_PRESCALE_VAL
 128

	)

146 
	#HAL_TIMER_16MHZ
 16

	)

147 
	#HAL_TIMER_32MHZ
 32

	)

150 
	#TCHN_T1CCTL
 &(
X_T1CCTL0
)

	)

151 
	#TCHN_T1CCL
 &(
X_T1CC0L
)

	)

152 
	#TCHN_T1CCH
 &(
X_T1CC0H
)

	)

153 
	#TCNH_T1OVF
 &(
X_TIMIF
)

	)

154 
	#TCHN_T1OVFBIT
 
TIMIF_T1OVFIM


	)

155 
	#TCHN_T1INTBIT
 
IEN1_T1IE


	)

157 
	#TCHN_T3CCTL
 &(
X_T3CCTL0
)

	)

158 
	#TCHN_T3CCL
 &(
X_T3CC0
)

	)

159 
	#TCHN_T3CCH
 &(
X_T3CC0
)

	)

160 
	#TCNH_T3OVF
 &(
X_T3CTL
)

	)

161 
	#TCHN_T3OVFBIT
 
T34CTL_OVFIM


	)

162 
	#TCHN_T3INTBIT
 
IEN1_T3IE


	)

164 
	#TCHN_T4CCTL
 &(
X_T4CCTL0
)

	)

165 
	#TCHN_T4CCL
 &(
X_T4CC0
)

	)

166 
	#TCHN_T4CCH
 &(
X_T4CC0
)

	)

167 
	#TCNH_T4OVF
 &(
X_T4CTL
)

	)

168 
	#TCHN_T4OVFBIT
 
T34CTL_OVFIM


	)

169 
	#TCHN_T4INTBIT
 
IEN1_T4IE


	)

176 
boﬁ
 
	mc⁄figuªd
;

177 
boﬁ
 
	mötE«bÀ
;

178 
uöt8
 
	m›Mode
;

179 
uöt8
 
	mch™√l
;

180 
uöt8
 
	mch™√lMode
;

181 
uöt8
 
	m¥esˇÀ
;

182 
uöt8
 
	m¥esˇÀVÆ
;

183 
uöt8
 
	m˛ock
;

184 
hÆTimîCBack_t
 
	mˇŒBackFunc
;

185 } 
	thÆTimîSëtögs_t
;

189 
uöt8
 vﬁ©ûê
XDATA
 *
	mTxCCTL
;

190 
uöt8
 vﬁ©ûê
XDATA
 *
	mTxCCH
;

191 
uöt8
 vﬁ©ûê
XDATA
 *
	mTxCCL
;

192 
uöt8
 vﬁ©ûê
XDATA
 *
	mTxOVF
;

193 
uöt8
 
	movfbô
;

194 
uöt8
 
	mötbô
;

195 } 
	thÆTimîCh™√l_t
;

200 
hÆTimîSëtögs_t
 
	ghÆTimîRec‹d
[
HW_TIMER_MAX
];

201 
hÆTimîCh™√l_t
 
	ghÆTimîCh™√l
[
HW_TIMER_MAX
];

210 
uöt8
 
hÆTimîSëCou¡
 (uöt8 
cc2430id
, 
uöt32
 
timePîTick
);

211 
uöt8
 
hÆTimîSëPªsˇÀ
 (uöt8 
cc2430id
, uöt8 
¥esˇÀ
);

212 
uöt8
 
hÆTimîSëOpMode
 (uöt8 
cc2430id
, uöt8 
›Mode
);

213 
uöt8
 
hÆTimîSëCh™√lMode
 (uöt8 
cc2430id
, uöt8 
ch™√lMode
);

214 
hÆTimîSídCÆlBack
 (
uöt8
 
timîId
, uöt8 
ch™√l
, uöt8 
ch™√lMode
);

215 
uöt8
 
hÆTimîRem≠
 (uöt8 
timîId
);

216 
hÆPro˚ssTimî1
 ();

217 
hÆPro˚ssTimî3
 ();

218 
hÆPro˚ssTimî4
 ();

234 
	$HÆTimîInô
 ()

236 
T1CCTL0
 = 0;

237 
T1CCTL1
 = 0;

238 
T1CCTL2
 = 0;

239 
T3CCTL0
 = 0;

240 
T3CCTL1
 = 0;

241 
T4CCTL0
 = 0;

242 
T4CCTL1
 = 0;

245 
hÆTimîRec‹d
[
HW_TIMER_1
].
¥esˇÀ
 = 
HAL_TIMER1_16_PRESCALE
;

246 
hÆTimîRec‹d
[
HW_TIMER_1
].
˛ock
 = 
HAL_TIMER_32MHZ
;

247 
hÆTimîRec‹d
[
HW_TIMER_1
].
¥esˇÀVÆ
 = 
HAL_TIMER1_16_PRESCALE_VAL
;

250 
hÆTimîRec‹d
[
HW_TIMER_3
].
¥esˇÀ
 = 
HAL_TIMER3_8_PRESCALE
;

251 
hÆTimîRec‹d
[
HW_TIMER_3
].
˛ock
 = 
HAL_TIMER_32MHZ
;

252 
hÆTimîRec‹d
[
HW_TIMER_3
].
¥esˇÀVÆ
 = 
HAL_TIMER3_8_PRESCALE_VAL
;

255 
hÆTimîRec‹d
[
HW_TIMER_4
].
¥esˇÀ
 = 
HAL_TIMER4_8_PRESCALE
;

256 
hÆTimîRec‹d
[
HW_TIMER_4
].
˛ock
 = 
HAL_TIMER_32MHZ
;

257 
hÆTimîRec‹d
[
HW_TIMER_4
].
¥esˇÀVÆ
 = 
HAL_TIMER4_8_PRESCALE_VAL
;

260 
hÆTimîCh™√l
[
HW_TIMER_1
].
TxCCTL
 = 
TCHN_T1CCTL
;

261 
hÆTimîCh™√l
[
HW_TIMER_1
].
TxCCL
 = 
TCHN_T1CCL
;

262 
hÆTimîCh™√l
[
HW_TIMER_1
].
TxCCH
 = 
TCHN_T1CCH
;

263 
hÆTimîCh™√l
[
HW_TIMER_1
].
TxOVF
 = 
TCNH_T1OVF
;

264 
hÆTimîCh™√l
[
HW_TIMER_1
].
ovfbô
 = 
TCHN_T1OVFBIT
;

265 
hÆTimîCh™√l
[
HW_TIMER_1
].
ötbô
 = 
TCHN_T1INTBIT
;

268 
hÆTimîCh™√l
[
HW_TIMER_3
].
TxCCTL
 = 
TCHN_T3CCTL
;

269 
hÆTimîCh™√l
[
HW_TIMER_3
].
TxCCL
 = 
TCHN_T3CCL
;

270 
hÆTimîCh™√l
[
HW_TIMER_3
].
TxCCH
 = 
TCHN_T3CCH
;

271 
hÆTimîCh™√l
[
HW_TIMER_3
].
TxOVF
 = 
TCNH_T3OVF
;

272 
hÆTimîCh™√l
[
HW_TIMER_3
].
ovfbô
 = 
TCHN_T3OVFBIT
;

273 
hÆTimîCh™√l
[
HW_TIMER_3
].
ötbô
 = 
TCHN_T3INTBIT
;

276 
hÆTimîCh™√l
[
HW_TIMER_4
].
TxCCTL
 = 
TCHN_T4CCTL
;

277 
hÆTimîCh™√l
[
HW_TIMER_4
].
TxCCL
 = 
TCHN_T4CCL
;

278 
hÆTimîCh™√l
[
HW_TIMER_4
].
TxCCH
 = 
TCHN_T4CCH
;

279 
hÆTimîCh™√l
[
HW_TIMER_4
].
TxOVF
 = 
TCNH_T4OVF
;

280 
hÆTimîCh™√l
[
HW_TIMER_4
].
ovfbô
 = 
TCHN_T4OVFBIT
;

281 
hÆTimîCh™√l
[
HW_TIMER_4
].
ötbô
 = 
TCHN_T4INTBIT
;

282 
	}
}

298 
uöt8
 
	$HÆTimîC⁄fig
 (
uöt8
 
timîId
, uöt8 
›Mode
, uöt8 
ch™√l
, uöt8 
ch™√lMode
,

299 
boﬁ
 
ötE«bÀ
, 
hÆTimîCBack_t
 
cBack
)

301 
uöt8
 
hwtimîid
;

303 
hwtimîid
 = 
	`hÆTimîRem≠
 (
timîId
);

305 i‡((
›Mode
 & 
HAL_TIMER_MODE_MASK
Ë&& (
timîId
 < 
HAL_TIMER_MAX
) &&

306 (
ch™√lMode
 & 
HAL_TIMER_CHANNEL_MASK
Ë&& (
ch™√l
 & HAL_TIMER_CHANNEL_MASK))

308 
hÆTimîRec‹d
[
hwtimîid
].
c⁄figuªd
 = 
TRUE
;

309 
hÆTimîRec‹d
[
hwtimîid
].
›Mode
 = opMode;

310 
hÆTimîRec‹d
[
hwtimîid
].
ch™√l
 = channel;

311 
hÆTimîRec‹d
[
hwtimîid
].
ch™√lMode
 = channelMode;

312 
hÆTimîRec‹d
[
hwtimîid
].
ötE«bÀ
 = intEnable;

313 
hÆTimîRec‹d
[
hwtimîid
].
ˇŒBackFunc
 = 
cBack
;

317  
HAL_TIMER_PARAMS_ERROR
;

319  
HAL_TIMER_OK
;

320 
	}
}

333 
uöt8
 
	$HÆTimîSèπ
 (
uöt8
 
timîId
, 
uöt32
 
timePîTick
)

335 
uöt8
 
hwtimîid
;

337 
hwtimîid
 = 
	`hÆTimîRem≠
 (
timîId
);

339 i‡(
hÆTimîRec‹d
[
hwtimîid
].
c⁄figuªd
)

341 
	`hÆTimîSëCou¡
 (
hwtimîid
, 
timePîTick
);

342 
	`hÆTimîSëPªsˇÀ
 (
hwtimîid
, 
hÆTimîRec‹d
[hwtimîid].
¥esˇÀ
);

343 
	`hÆTimîSëOpMode
 (
hwtimîid
, 
hÆTimîRec‹d
[hwtimîid].
›Mode
);

344 
	`hÆTimîSëCh™√lMode
 (
hwtimîid
, 
hÆTimîRec‹d
[hwtimîid].
ch™√lMode
);

346 i‡(
hwtimîid
 =
HW_TIMER_3
)

348 
T3CTL
 |
HAL_TIMER34_START
;

350 i‡(
hwtimîid
 =
HW_TIMER_4
)

352 
T4CTL
 |
HAL_TIMER34_START
;

354 
	`HÆTimîI¡îru±E«bÀ
 (
hwtimîid
, 
hÆTimîRec‹d
[hwtimîid].
ch™√lMode
,

355 
hÆTimîRec‹d
[
hwtimîid
].
ötE«bÀ
);

359  
HAL_TIMER_NOT_CONFIGURED
;

361  
HAL_TIMER_OK
;

362 
	}
}

373 
	$HÆTimîTick
 ()

375 i‡(!
hÆTimîRec‹d
[
HW_TIMER_1
].
ötE«bÀ
)

377 
	`hÆPro˚ssTimî1
 ();

380 i‡(!
hÆTimîRec‹d
[
HW_TIMER_3
].
ötE«bÀ
)

382 
	`hÆPro˚ssTimî3
 ();

385 i‡(!
hÆTimîRec‹d
[
HW_TIMER_4
].
ötE«bÀ
)

387 
	`hÆPro˚ssTimî4
 ();

389 
	}
}

400 
uöt8
 
	$HÆTimîSt›
 (
uöt8
 
timîId
)

402 
uöt8
 
hwtimîid
;

404 
hwtimîid
 = 
	`hÆTimîRem≠
 (
timîId
);

406 
hwtimîid
)

408 
HW_TIMER_1
:

409 
	`hÆTimîSëOpMode
(
HW_TIMER_1
, 
HAL_TIMER_MODE_STOP
);

411 
HW_TIMER_3
:

412 
T3CTL
 &~(
HAL_TIMER34_START
);

414 
HW_TIMER_4
:

415 
T4CTL
 &~(
HAL_TIMER34_START
);

418  
HAL_TIMER_INVALID_ID
;

420  
HAL_TIMER_OK
;

421 
	}
}

433 
uöt8
 
	$hÆTimîSëCou¡
 (
uöt8
 
hwtimîid
, 
uöt32
 
timePîTick
)

435 
uöt16
 
cou¡
;

436 
uöt8
 
high
, 
low
;

439 
cou¡
 = (
uöt16
)((
timePîTick
 * 
hÆTimîRec‹d
[
hwtimîid
].
˛ock
Ë/ hÆTimîRec‹d[hwtimîid].
¥esˇÀVÆ
);

440 
high
 = (
uöt8
Ë(
cou¡
 >> 8);

441 
low
 = (
uöt8
Ë
cou¡
;

443 *(
hÆTimîCh™√l
[
hwtimîid
].
TxCCH
Ë
high
;

444 *(
hÆTimîCh™√l
[
hwtimîid
].
TxCCL
Ë
low
;

446  
HAL_TIMER_OK
;

447 
	}
}

459 
uöt8
 
	$hÆTimîSëPªsˇÀ
 (
uöt8
 
hwtimîid
, uöt8 
¥esˇÀ
)

461 
hwtimîid
)

463 
HW_TIMER_1
:

464 
T1CTL
 &~(
HAL_TIMER1_16_TC_BITS
);

465 
T1CTL
 |
¥esˇÀ
;

467 
HW_TIMER_3
:

468 
T3CTL
 &~(
HAL_TIMER34_8_TC_BITS
);

469 
T3CTL
 |
¥esˇÀ
;

471 
HW_TIMER_4
:

472 
T4CTL
 &~(
HAL_TIMER34_8_TC_BITS
);

473 
T4CTL
 |
¥esˇÀ
;

476  
HAL_TIMER_INVALID_ID
;

478  
HAL_TIMER_OK
;

479 
	}
}

491 
uöt8
 
	$hÆTimîSëOpMode
 (
uöt8
 
hwtimîid
, uöt8 
›Mode
)

494 
›Mode
)

496 
HAL_TIMER_MODE_NORMAL
:

497 
hwtimîid
)

499 
HW_TIMER_1
:

500 
T1CTL
 &~(
HAL_TIMER1_OPMODE_BITS
);

501 
T1CTL
 |
HAL_TIMER1_OPMODE_FREERUN
;

503 
HW_TIMER_3
:

504 
T3CTL
 &~(
HAL_TIMER34_OPMODE_BITS
);

505 
T3CTL
 |
HAL_TIMER34_OPMODE_FREERUN
;

507 
HW_TIMER_4
:

508 
T4CTL
 &~(
HAL_TIMER34_OPMODE_BITS
);

509 
T4CTL
 |
HAL_TIMER34_OPMODE_FREERUN
;

512  
HAL_TIMER_INVALID_ID
;

516 
HAL_TIMER_MODE_CTC
:

517 
hwtimîid
)

519 
HW_TIMER_1
:

520 
T1CTL
 &~(
HAL_TIMER1_OPMODE_BITS
);

521 
T1CTL
 |
HAL_TIMER1_OPMODE_MODULO
;

523 
HW_TIMER_3
:

524 
T3CTL
 &~(
HAL_TIMER34_OPMODE_BITS
);

525 
T3CTL
 |
HAL_TIMER34_OPMODE_MODULO
;

527 
HW_TIMER_4
:

528 
T4CTL
 &~(
HAL_TIMER34_OPMODE_BITS
);

529 
T4CTL
 |
HAL_TIMER34_OPMODE_MODULO
;

532  
HAL_TIMER_INVALID_ID
;

536 
HAL_TIMER_MODE_STOP
:

537 i‡(
hwtimîid
 =
HW_TIMER_1
)

539 
T1CTL
 &~(
HAL_TIMER1_OPMODE_BITS
);

540 
T1CTL
 |
HAL_TIMER1_OPMODE_STOP
;

545  
HAL_TIMER_INVALID_OP_MODE
;

547  
HAL_TIMER_OK
;

548 
	}
}

562 
uöt8
 
	$hÆTimîSëCh™√lMode
 (
uöt8
 
hwtimîid
, uöt8 
ch™√lMode
)

564 
ch™√lMode
)

566 
HAL_TIMER_CH_MODE_OUTPUT_COMPARE
:

567 *(
hÆTimîCh™√l
[
hwtimîid
].
TxCCTL
Ë&~(
T134CCTL_CMP_BITS
);

568 *(
hÆTimîCh™√l
[
hwtimîid
].
TxCCTL
Ë|(
T134CCTL_CMP_OC
 | 
T134CCTL_MODE
);

571 
HAL_TIMER_CH_MODE_INPUT_CAPTURE
:

579  
HAL_TIMER_INVALID_CH_MODE
;

581  
HAL_TIMER_OK
;

582 
	}
}

595 
uöt8
 
	$HÆTimîI¡îru±E«bÀ
 (
uöt8
 
hwtimîid
, uöt8 
ch™√lMode
, 
boﬁ
 
íabÀ
)

597 
ch™√lMode
)

599 
HAL_TIMER_CH_MODE_OVERFLOW
:

601 i‡(
íabÀ
)

603 *(
hÆTimîCh™√l
[
hwtimîid
].
TxOVF
Ë|hÆTimîCh™√l[hwtimîid].
ovfbô
;

607 *(
hÆTimîCh™√l
[
hwtimîid
].
TxOVF
Ë&((hÆTimîCh™√l[hwtimîid].
ovfbô
) ^ 0xFF);

611 
HAL_TIMER_CH_MODE_OUTPUT_COMPARE
:

612 
HAL_TIMER_CH_MODE_INPUT_CAPTURE
:

614 i‡(
íabÀ
)

616 *(
hÆTimîCh™√l
[
hwtimîid
].
TxCCTL
Ë|
T134CCTL_IM
;

620 *(
hÆTimîCh™√l
[
hwtimîid
].
TxCCTL
Ë&~(
T134CCTL_IM
);

625  
HAL_TIMER_INVALID_CH_MODE
;

628 i‡(
hÆTimîRec‹d
[
hwtimîid
].
ötE«bÀ
)

630 
IEN1
 |
hÆTimîCh™√l
[
hwtimîid
].
ötbô
;

634 
IEN1
 &((
hÆTimîCh™√l
[
hwtimîid
].
ötbô
) ^ 0xFF);

636  
HAL_TIMER_OK
;

637 
	}
}

651 
	$hÆTimîSídCÆlBack
 (
uöt8
 
timîId
, uöt8 
ch™√l
, uöt8 
ch™√lMode
)

653 
uöt8
 
hwtimîid
;

655 
hwtimîid
 = 
	`hÆTimîRem≠
 (
timîId
);

657 i‡(
hÆTimîRec‹d
[
hwtimîid
].
ˇŒBackFunc
)

658 (
hÆTimîRec‹d
[
hwtimîid
].
ˇŒBackFunc
Ë(
timîId
, 
ch™√l
, 
ch™√lMode
);

659 
	}
}

673 
uöt8
 
	$hÆTimîRem≠
 (
uöt8
 
timîId
)

675 
timîId
)

677 
HAL_TIMER_0
:

678  
HW_TIMER_3
;

679 
HAL_TIMER_2
:

680  
HW_TIMER_4
;

681 
HAL_TIMER_3
:

682  
HW_TIMER_1
;

684  
HW_TIMER_INVALID
;

686 
	}
}

697 
	$hÆPro˚ssTimî1
 ()

699 i‡(
hÆTimîRec‹d
[
	`hÆTimîRem≠
(
HAL_TIMER_3
)].
ch™√lMode
 =
HAL_TIMER_CH_MODE_OUTPUT_COMPARE
)

701 i‡(
T1CTL
 & 
T1CTL_CH0IF
)

703 
T1CTL
 &~(
T1CTL_CH0IF
);

704 
	`hÆTimîSídCÆlBack
 (
HAL_TIMER_3
, 
HAL_TIMER_CHANNEL_A
, 
HAL_TIMER_CH_MODE_OUTPUT_COMPARE
);

706 i‡(
T1CTL
 & 
T1CTL_CH1IF
)

708 
T1CTL
 &~(
T1CTL_CH1IF
);

709 
	`hÆTimîSídCÆlBack
 (
HAL_TIMER_3
, 
HAL_TIMER_CHANNEL_B
, 
HAL_TIMER_CH_MODE_OUTPUT_COMPARE
);

711 i‡(
T1CTL
 & 
T1CTL_CH2IF
)

713 
T1CTL
 &~(
T1CTL_CH2IF
);

714 
	`hÆTimîSídCÆlBack
 (
HAL_TIMER_3
, 
HAL_TIMER_CHANNEL_C
, 
HAL_TIMER_CH_MODE_OUTPUT_COMPARE
);

717 i‡(
hÆTimîRec‹d
[
	`hÆTimîRem≠
(
HAL_TIMER_3
)].
ch™√lMode
 =
HAL_TIMER_CH_MODE_OVERFLOW
)

719 i‡(
T1CTL
 & 
T1CTL_OVFIF
)

721 
T1CTL
 &~(
T1CTL_OVFIF
);

722 
	`hÆTimîSídCÆlBack
 (
HAL_TIMER_3
, 
HAL_TIMER_CHANNEL_SINGLE
, 
HAL_TIMER_CH_MODE_OVERFLOW
);

725 
	}
}

736 
	$hÆPro˚ssTimî3
 ()

738 i‡(
hÆTimîRec‹d
[
	`hÆTimîRem≠
(
HAL_TIMER_0
)].
ch™√lMode
 =
HAL_TIMER_CH_MODE_OUTPUT_COMPARE
)

740 i‡(
TIMIF
 & 
TIMIF_T3CH0IF
)

742 
TIMIF
 &~(
TIMIF_T3CH0IF
);

743 
	`hÆTimîSídCÆlBack
 (
HAL_TIMER_0
, 
HAL_TIMER_CHANNEL_A
, 
HAL_TIMER_CH_MODE_OUTPUT_COMPARE
);

745 i‡(
TIMIF
 & 
TIMIF_T3CH1IF
)

747 
TIMIF
 &~(
TIMIF_T3CH1IF
);

748 
	`hÆTimîSídCÆlBack
 (
HAL_TIMER_0
, 
HAL_TIMER_CHANNEL_B
, 
HAL_TIMER_CH_MODE_OUTPUT_COMPARE
);

751 i‡(
hÆTimîRec‹d
[
	`hÆTimîRem≠
(
HAL_TIMER_0
)].
ch™√lMode
 =
HAL_TIMER_CH_MODE_OVERFLOW
)

753 i‡(
TIMIF
 & 
TIMIF_T3OVFIF
)

755 
TIMIF
 &~(
TIMIF_T3OVFIF
);

756 
	`hÆTimîSídCÆlBack
 (
HAL_TIMER_0
, 
HAL_TIMER_CHANNEL_SINGLE
, 
HAL_TIMER_CH_MODE_OVERFLOW
);

759 
	}
}

770 
	$hÆPro˚ssTimî4
 ()

772 i‡(
hÆTimîRec‹d
[
	`hÆTimîRem≠
(
HAL_TIMER_2
)].
ch™√lMode
 =
HAL_TIMER_CH_MODE_OUTPUT_COMPARE
)

774 i‡(
TIMIF
 & 
TIMIF_T4CH0IF
)

776 
TIMIF
 &~(
TIMIF_T4CH0IF
);

777 
	`hÆTimîSídCÆlBack
 (
HAL_TIMER_2
, 
HAL_TIMER_CHANNEL_A
, 
HAL_TIMER_CH_MODE_OUTPUT_COMPARE
);

779 i‡(
TIMIF
 & 
TIMIF_T4CH1IF
)

781 
TIMIF
 &~(
TIMIF_T4CH1IF
);

782 
	`hÆTimîSídCÆlBack
 (
HAL_TIMER_2
, 
HAL_TIMER_CHANNEL_B
, 
HAL_TIMER_CH_MODE_OUTPUT_COMPARE
);

785 i‡(
hÆTimîRec‹d
[
	`hÆTimîRem≠
(
HAL_TIMER_2
)].
ch™√lMode
 =
HAL_TIMER_CH_MODE_OVERFLOW
)

786 i‡(
TIMIF
 & 
TIMIF_T4OVFIF
)

788 
TIMIF
 &~(
TIMIF_T4OVFIF
);

789 
	`hÆTimîSídCÆlBack
 (
HAL_TIMER_2
, 
HAL_TIMER_CHANNEL_SINGLE
, 
HAL_TIMER_CH_MODE_OVERFLOW
);

791 
	}
}

806 
	$HAL_ISR_FUNCTION
–
hÆTimî1I§
, 
T1_VECTOR
 )

808 
	`hÆPro˚ssTimî1
 ();

809 
	}
}

820 
	$HAL_ISR_FUNCTION
–
hÆTimî3I§
, 
T3_VECTOR
 )

822 
	`hÆPro˚ssTimî3
 ();

823 
	}
}

834 
	$HAL_ISR_FUNCTION
–
hÆTimî4I§
, 
T4_VECTOR
 )

836 
	`hÆPro˚ssTimî4
 ();

837 
	}
}

	@Components/hal/target/CC2530EB/hal_types.h

40 #i‚de‡
_HAL_TYPES_H


41 
	#_HAL_TYPES_H


	)

49 sig√d 
	töt8
;

50 
	tuöt8
;

52 sig√d 
	töt16
;

53 
	tuöt16
;

55 sig√d 
	töt32
;

56 
	tuöt32
;

58 
	tboﬁ
;

60 
uöt8
 
	thÆD©aAlign_t
;

69 #ifde‡
__IAR_SYSTEMS_ICC__


70 
	#CODE
 
__code


	)

71 
	#XDATA
 
__xd©a


	)

74 #ñi‡
deföed
 
__KEIL__


75 
	#CODE
 
code


	)

76 
	#XDATA
 
xd©a


	)

88 #i‚de‡
TRUE


89 
	#TRUE
 1

	)

92 #i‚de‡
FALSE


93 
	#FALSE
 0

	)

96 #i‚de‡
NULL


97 
	#NULL
 0

	)

	@Components/hal/target/CC2530EB/hal_uart.c

44 
	~"hÆ_bﬂrd_cfg.h
"

45 
	~"hÆ_defs.h
"

46 
	~"hÆ_ty≥s.h
"

47 
	~"hÆ_u¨t.h
"

77 #i‡
HAL_UART_DMA


78 
	~"_hÆ_u¨t_dma.c
"

80 #i‡
HAL_UART_ISR


81 
	~"_hÆ_u¨t_i§.c
"

93 
	$HÆUARTInô
()

95 #i‡
HAL_UART_DMA


96 
	`HÆUARTInôDMA
();

98 #i‡
HAL_UART_ISR


99 
	`HÆUARTInôISR
();

101 
	}
}

113 
uöt8
 
	$HÆUARTO≥n
(
uöt8
 
p‹t
, 
hÆUARTCfg_t
 *
c⁄fig
)

115 #i‡(
HAL_UART_DMA
 == 1)

116 i‡(
p‹t
 =
HAL_UART_PORT_0
Ë
	`HÆUARTO≥nDMA
(
c⁄fig
);

118 #i‡(
HAL_UART_DMA
 == 2)

119 i‡(
p‹t
 =
HAL_UART_PORT_1
Ë
	`HÆUARTO≥nDMA
(
c⁄fig
);

121 #i‡(
HAL_UART_ISR
 == 1)

122 i‡(
p‹t
 =
HAL_UART_PORT_0
Ë
	`HÆUARTO≥nISR
(
c⁄fig
);

124 #i‡(
HAL_UART_ISR
 == 2)

125 i‡(
p‹t
 =
HAL_UART_PORT_1
Ë
	`HÆUARTO≥nISR
(
c⁄fig
);

128 #i‡(
HAL_UART_DMA
 =0Ë&& (
HAL_UART_ISR
 == 0)

130 (Ë
p‹t
;

131 (Ë
c⁄fig
;

134  
HAL_UART_SUCCESS
;

135 
	}
}

148 
uöt16
 
	$HÆUARTRód
(
uöt8
 
p‹t
, uöt8 *
buf
, 
uöt16
 
Àn
)

150 #i‡(
HAL_UART_DMA
 == 1)

151 i‡(
p‹t
 =
HAL_UART_PORT_0
Ë 
	`HÆUARTRódDMA
(
buf
, 
Àn
);

153 #i‡(
HAL_UART_DMA
 == 2)

154 i‡(
p‹t
 =
HAL_UART_PORT_1
Ë 
	`HÆUARTRódDMA
(
buf
, 
Àn
);

156 #i‡(
HAL_UART_ISR
 == 1)

157 i‡(
p‹t
 =
HAL_UART_PORT_0
Ë 
	`HÆUARTRódISR
(
buf
, 
Àn
);

159 #i‡(
HAL_UART_ISR
 == 2)

160 i‡(
p‹t
 =
HAL_UART_PORT_1
Ë 
	`HÆUARTRódISR
(
buf
, 
Àn
);

163 #i‡(
HAL_UART_DMA
 =0Ë&& (
HAL_UART_ISR
 == 0)

166 (Ë
p‹t
;

167 (Ë
buf
;

168 (Ë
Àn
;

171 
	}
}

184 
uöt16
 
	$HÆUARTWrôe
(
uöt8
 
p‹t
, uöt8 *
buf
, 
uöt16
 
Àn
)

186 #i‡(
HAL_UART_DMA
 == 1)

187 i‡(
p‹t
 =
HAL_UART_PORT_0
Ë 
	`HÆUARTWrôeDMA
(
buf
, 
Àn
);

189 #i‡(
HAL_UART_DMA
 == 2)

190 i‡(
p‹t
 =
HAL_UART_PORT_1
Ë 
	`HÆUARTWrôeDMA
(
buf
, 
Àn
);

192 #i‡(
HAL_UART_ISR
 == 1)

193 i‡(
p‹t
 =
HAL_UART_PORT_0
Ë 
	`HÆUARTWrôeISR
(
buf
, 
Àn
);

195 #i‡(
HAL_UART_ISR
 == 2)

196 i‡(
p‹t
 =
HAL_UART_PORT_1
Ë 
	`HÆUARTWrôeISR
(
buf
, 
Àn
);

199 #i‡(
HAL_UART_DMA
 =0Ë&& (
HAL_UART_ISR
 == 0)

202 (Ë
p‹t
;

203 (Ë
buf
;

204 (Ë
Àn
;

207 
	}
}

218 
	$HÆUARTSu•íd
( )

220 #i‡
HAL_UART_DMA


221 
	`HÆUARTSu•ídDMA
();

223 #i‡
HAL_UART_ISR


224 
	`HÆUARTSu•ídISR
();

226 
	}
}

237 
	$HÆUARTResume
( )

239 #i‡
HAL_UART_DMA


240 
	`HÆUARTResumeDMA
();

242 #i‡
HAL_UART_ISR


243 
	`HÆUARTResumeISR
();

245 
	}
}

256 
	$HÆUARTPﬁl
()

258 #i‡
HAL_UART_DMA


259 
	`HÆUARTPﬁlDMA
();

261 #i‡
HAL_UART_ISR


262 
	`HÆUARTPﬁlISR
();

264 
	}
}

275 
uöt16
 
	$HÆ_UART_RxBufLí
–
uöt8
 
p‹t
 )

277 #i‡(
HAL_UART_DMA
 == 1)

278 i‡(
p‹t
 =
HAL_UART_PORT_0
Ë 
	`HÆUARTRxAvaûDMA
();

280 #i‡(
HAL_UART_DMA
 == 2)

281 i‡(
p‹t
 =
HAL_UART_PORT_1
Ë 
	`HÆUARTRxAvaûDMA
();

283 #i‡(
HAL_UART_ISR
 == 1)

284 i‡(
p‹t
 =
HAL_UART_PORT_0
Ë 
	`HÆUARTRxAvaûISR
();

286 #i‡(
HAL_UART_ISR
 == 2)

287 i‡(
p‹t
 =
HAL_UART_PORT_1
Ë 
	`HÆUARTRxAvaûISR
();

290 #i‡(
HAL_UART_DMA
 =0Ë&& (
HAL_UART_ISR
 == 0)

293 (Ë
p‹t
;

296 
	}
}

	@Components/hal/target/CC2530EB/lcd128_64.c

	@Components/hal/target/CC2530EB/Â§ç‰ª∂ (2) hal_lcd.c

1 
	~"LCD128_64.h
"

2 
	~"F⁄t.h
"

3 
	~"hÆ_lcd.h
"

8 
	#Di•œyOff
 0xAE

	)

9 
	#Di•œyOn
 0xAF

	)

10 
	#Di•œySèπ
 0x40

	)

11 
	#PageAddr
 0xB0

	)

12 
	#CﬁAddrHi
 0x10

	)

13 
	#CﬁAddrLo
 0x00

	)

14 
	#SegRem≠Off
 0xA0

	)

15 
	#SegRem≠On
 0xA1

	)

16 
	#N‹mÆDi•
 0xA6

	)

17 
	#Revî£Di•
 0xA7

	)

18 
	#ExôE¡úeD
 0xA4

	)

19 
	#E¡E¡úeD
 0xA5

	)

20 
	#E¡îRMW
 0xE0

	)

21 
	#ExôRMW
 0xEE

	)

22 
	#SWRe°
 0xE2

	)

23 
	#ComRem≠Off
 0xC0

	)

24 
	#ComRem≠On
 0xC8

	)

25 
	#PwrCålReg
 0x28

	)

26 
	#OPampBuf„r
 0x01

	)

27 
	#I¡Reg
 0x02

	)

28 
	#I¡VﬁB°r
 0x04

	)

29 
	#I¡RegR©io
 0x20

	)

30 
	#C⁄tCålReg
 0x81

	)

31 
	#CmdMuxR©io
 0x48

	)

32 
	#CmdBüsR©io
 0x50

	)

33 
	#Di•Off£t
 0x44

	)

34 
	#Ic⁄ModeOn
 0xA3

	)

35 
	#Ic⁄ModeOff
 0xA2

	)

36 
	#NlöeInvî
 0x4C

	)

37 
	#DCDCc⁄vî
 0x64

	)

38 
	#PowîßvSèndby
 0xA8

	)

39 
	#PowîßvSÀï
 0xA9

	)

40 
	#PowîßvOff
 0xE1

	)

41 
	#I¡îOsc
 0xAB

	)

42 
	#Devi˚
 
SSD1821


	)

43 
	#CﬁNo
 132

	)

44 
	#RowNo
 64

	)

45 
	#PS
 1

	)

46 
	#PageNo
 10

	)

47 
	#Ic⁄Page
 10

	)

48 
	#AŒ0
 6

	)

49 
	#AŒ1
 4

	)

50 
	#iI¡RegVÆue
 1

	)

51 
	#iC⁄tCålRegVÆue
 16

	)

52 
	#iI¡RegVÆuó
 20

	)

53 
	#iC⁄tCålRegVÆuó
 16

	)

54 
	#iI¡RegVÆueb
 1

	)

55 
	#iC⁄tCålRegVÆueb
 16

	)

56 
	#MSGNo
 16

	)

57 
	#MSGLígth
 22

	)

58 
	#SSLNameNo
 4

	)

59 
	#Devi˚Pg
 0

60 
	#FótuªPg
 1

61 
	#GRAPHICNo
 13

	)

62 
	#xlogo
 38

	)

63 
	#ylogo
 5

	)

64 
	#xsﬁom⁄
 91

	)

65 
	#ysﬁom⁄
 2

	)

66 
	#xsy°ech
 81

	)

67 
	#ysy°ech
 2

	)

68 
	#xlimôed
 70

	)

69 
	#ylimôed
 2

	)

70 
	#xcc
 16

	)

71 
	#ycc
 2

	)

72 
	#x∑geq
 128

	)

73 
	#y∑geq
 4

	)

74 
	#h‹iz⁄Æ
 0

	)

75 
	#d_time
 60

	)

78 
Pröt8
(
uöt16
 
y
,uöt16 
x
, 
uöt8
 
ch
[],uöt16 
yn
);

80 
uöt8
 
	gC⁄åa°VÆue
 =90;

81 
WrôeLCD
(
uöt8
 
fs
, uöt8 
da
);

82 
Wrôe595
(
uöt8
 
d©
);

83 
dñay_us
(
uöt16
 
s
);

84 
dñay1
(
uöt8
 
jj
);

85 
c⁄åa°˘æ
(
uöt8
 
°¨t
, uöt8 
°›
);

86 
HÆLcdInô
();

87 
PrötCh8
(
uöt16
 
y
,uöt16 
x
, 
uöt8
 
ch
,uöt16 
yn
);

97 
	$dñay1
(
uöt8
 
jj
)

99 
uöt8
 
i
;

100 
i
=0; i<
jj
; i++);

101 
	}
}

107 
	$dñay_us
(
uöt16
 
s
)

109 
uöt16
 
i
;

110 
i
=0; i<
s
; i++);

111 
i
=0; i<
s
; i++);

112 
i
=0; i<
s
; i++);

113 
i
=0; i<
s
; i++);

114 
	}
}

123 
	$Wrôe595
(
uöt8
 
d©
)

126 
uöt8
 
ii
;

128 
ii
 = 0 ; ii < 8; ii++)

130 if(
d©
 & 0x80Ë
LCD_595_DAT
 = 1;

131 
LCD_595_DAT
 = 0;

133 
d©
 <<= 1;

134 
LCD_595_CK
 = 1;

135 
LCD_595_CK
 = 0;

137 
LCD_595_LD
 = 1;

138 
LCD_595_LD
 = 0;

139 
	}
}

149 
	$WrôeLCD
(
uöt8
 
fs
, uöt8 
da
)

151 
	`dñay1
(2);

152 
LCD_CS1
 = 0;

153 
LCD_RW
 = 0;

156 if(
fs
){

157 
LCD_RS
 = 1;

160 
LCD_RS
 = 0;

164 
	`Wrôe595
(
da
);

165 
LCD_E
 = 1;

166 
	`dñay1
(2);

167 
LCD_E
 = 0;

169 
LCD_CS1
 = 1;

170 
	}
}

212 
	$SëRamAddr
(
uöt8
 
x
 ,uöt8 
y
)

214 
uöt8
 
ãmp
;

216 
ãmp
 = 0x0‡& 
x
;

217 
	`WrôeLCD
(
COMMAND
 , 
PageAddr
|
ãmp
);

219 
ãmp
 = 0x0‡& (
y
 >> 4);

220 
	`WrôeLCD
(
COMMAND
 , 
CﬁAddrHi
|
ãmp
);

221 
ãmp
 = 0x0‡& 
y
;

222 
	`WrôeLCD
(
COMMAND
 , 
CﬁAddrLo
|
ãmp
);

223 
	}
}

232 
	$SëC⁄åa°
(
uöt8
 
Gaö
, uöt8 
Sãp
)

234 
	`WrôeLCD
(
COMMAND
 , 
I¡RegR©io
 | (0x0‡& 
Gaö
));

235 
	`WrôeLCD
(
COMMAND
 , 
C⁄tCålReg
);

236 
	`WrôeLCD
(
COMMAND
 , 0x3‡& 
Sãp
);

237 
	}
}

247 
	$InôDi•œy
()

249 
	`WrôeLCD
(
COMMAND
 , 
Di•œyOff
);

250 
	`WrôeLCD
(
COMMAND
 , 
SegRem≠On
);

251 
	`WrôeLCD
(
COMMAND
 , 
ComRem≠On
);

252 
	`SëC⁄åa°
(
iI¡RegVÆue
, 
iC⁄tCålRegVÆue
);

253 
	`WrôeLCD
(
COMMAND
 , 
PwrCålReg
 | 
I¡VﬁB°r
 | 
I¡Reg
 | 
OPampBuf„r
);

254 
	`WrôeLCD
(
COMMAND
 , 
Di•œyOn
);

255 
	}
}

265 
	$c⁄åa°˘æ
(
uöt8
 
°¨t
, uöt8 
°›
)

267 
uöt8
 
i
;

268 i‡(
°¨t
 < 
°›
)

270 
i
=
°¨t
; i<
°›
; i+=1)

272 
	`SëC⁄åa°
(
iI¡RegVÆue
, 
i
);

273 
	`dñay_us
(80);

278 
i
=
°¨t
; i>
°›
; i-=1)

280 
	`SëC⁄åa°
(
iI¡RegVÆue
, 
i
);

281 
	`dñay_us
(120);

284 
	}
}

289 
	$CÀ¨S¸ìn
()

291 
uöt8
 
x
,
y
;

292 
x
 = 0;x < 8 ;x++){

293 
	`SëRamAddr
(
x
 , 0);

294 
y
 = 0 ; y < 128 ; y++){

296 
	`WrôeLCD
(
DATA
 , 0x00);

299 
	}
}

304 
	$HÆLcdInô
()

307 
P1DIR
 |= 0xFC;

308 
P2DIR
 |= 0x01;

309 
P0DIR
 |= 0x02;

310 
P1_2
 = 0;

311 
	`dñay_us
(100);

312 
	`WrôeLCD
(
COMMAND
 , 0xE2);

314 
	`dñay_us
(100);

315 
	`WrôeLCD
(
COMMAND
 , 0xA3);

317 
	`dñay_us
(100);

318 
	`WrôeLCD
(
COMMAND
 , 0xA0);

320 
	`dñay_us
(100);

321 
	`WrôeLCD
(
COMMAND
 , 0xC8);

323 
	`dñay_us
(100);

324 
	`WrôeLCD
(
COMMAND
 , 0x24);

326 
	`dñay_us
(100);

327 
	`WrôeLCD
(
COMMAND
 , 0x81);

329 
	`dñay_us
(100);

330 
	`WrôeLCD
(
COMMAND
 , 0x14);

332 
	`dñay_us
(100);

333 
	`WrôeLCD
(
COMMAND
 , 0x2F);

335 
	`dñay_us
(100);

336 
	`WrôeLCD
(
COMMAND
 , 0x40);

338 
	`dñay_us
(100);

339 
	`WrôeLCD
(
COMMAND
 , 0xB0);

341 
	`dñay_us
(100);

342 
	`WrôeLCD
(
COMMAND
 , 0x10);

344 
	`dñay_us
(100);

345 
	`WrôeLCD
(
COMMAND
 , 0x00);

347 
	`dñay_us
(100);

348 
	`WrôeLCD
(
COMMAND
 , 0xAF);

350 
	`WrôeLCD
(
COMMAND
 , 0x81);

351 
	`WrôeLCD
(
COMMAND
 , 0x1b);

352 
	`dñay_us
(100);

353 
	`SëC⁄åa°
(
iI¡RegVÆuó
,
C⁄åa°VÆue
);

354 
	`CÀ¨S¸ìn
();

359 
	}
}

369 
	$Pröt6
(
uöt8
 
xx
, uöt8 
yy
, uöt8 
ch1
[], uöt8 
yn
)

371 
uöt8
 
ii
 = 0;

372 
uöt8
 
bb
 = 0;

373 
ödex
 = 0 ;

375 
ch1
[
bb
] != '\0')

377 
ödex
 = ()(
ch1
[
bb
] - 0x20);

378 
ödex
 = ()index*6;

379 
ii
=0;ii<6;ii++)

381 
	`SëRamAddr
(
xx
 , 
yy
);

382 if(
yn
 == 0)

384 
	`WrôeLCD
(
DATA
, ~
F⁄tSy°em6x8
[
ödex
]);

389 
	`WrôeLCD
(
DATA
, 
F⁄tSy°em6x8
[
ödex
]);

391 
ödex
 += 1;

392 
yy
 += 1;

394 
bb
 += 1;

396 
	}
}

405 
	$Pröä8
(
uöt8
 
xx
 ,uöt8 
yy
 , 
uöt32
 
no
,uöt8 
yn
,uöt8 
À
)

407 
uöt8
 
ch2
[6];

408 
uöt8
 
ii
;

410 
ii
 = 1 ; iò<
À
 ;){

411 
ch2
[
À
 - 
ii
] = 
no
 % 10 + 0x30;

412 
no
 /= 10;

413 
ii
 += 1;

415 
ch2
[
À
] = '\0';

416 
	`Pröt8
(
xx
 ,
yy
 ,
ch2
 ,
yn
);

417 
	}
}

425 
	$PrötCh8
(
uöt16
 
y
,uöt16 
x
, 
uöt8
 
ch
,uöt16 
yn
)

427 
uöt8
 
wm
;

428 
uöt16
 
addî
;

430 
addî
 = (
ch
 - 0x20) * 16;

431 
wm
 = 0;wm < 8;wm++)

433 
	`SëRamAddr
(
y
 , 
x
);

434 if(
yn
 == 0)

436 
	`WrôeLCD
(
DATA
, ~
F⁄t8X8
[
addî
]);

440 
	`WrôeLCD
(
DATA
, 
F⁄t8X8
[
addî
]);

442 
addî
 += 1;

443 
x
 += 1;

445 
y
 += 1;

446 
x
 -= 8;

447 
wm
 = 0;wm < 8;wm++)

449 
	`SëRamAddr
(
y
 , 
x
);

450 if(
yn
 == 0)

452 
	`WrôeLCD
(
DATA
, ~
F⁄t8X8
[
addî
]);

456 
	`WrôeLCD
(
DATA
, 
F⁄t8X8
[
addî
]);

458 
addî
 += 1;

459 
x
 += 1;

461 
	}
}

470 
	$Pröt8
(
uöt16
 
y
,uöt16 
x
, 
uöt8
 
ch
[],uöt16 
yn
)

472 
uöt8
 
wm
 ,
ii
 = 0;

473 
uöt16
 
addî
;

475 
ch
[
ii
] != '\0')

477 
addî
 = (
ch
[
ii
] - 0x20) * 16;

479 
wm
 = 0;wm < 8;wm++)

481 
	`SëRamAddr
(
y
 , 
x
);

482 if(
yn
 == 0)

484 
	`WrôeLCD
(
DATA
, ~
F⁄t8X8
[
addî
]);

488 
	`WrôeLCD
(
DATA
, 
F⁄t8X8
[
addî
]);

490 
addî
 += 1;

491 
x
 += 1;

493 
y
 += 1;

494 
x
 -= 8;

495 
wm
 = 0;wm < 8;wm++)

497 
	`SëRamAddr
(
y
 , 
x
);

498 if(
yn
 == 0)

500 
	`WrôeLCD
(
DATA
, ~
F⁄t8X8
[
addî
]);

504 
	`WrôeLCD
(
DATA
, 
F⁄t8X8
[
addî
]);

506 
addî
 += 1;

507 
x
 += 1;

509 
ii
 += 1;

510 
y
 -= 1;

513 
	}
}

648 
	$Pröt
(
uöt8
 
y
, uöt8 
x
, uöt8 
ch
[], 
uöt16
 
yn
)

650 
uöt8
 
ch2
[3];

651 
uöt8
 
ii
;

652 
ii
 = 0;

653 
ch
[
ii
] != '\0')

655 if(
ch
[
ii
] > 128)

657 
ch2
[0] = 
ch
[
ii
];

658 
ch2
[1] = 
ch
[
ii
 + 1];

659 
ch2
[2] = '\0';

661 
x
 += 16;

662 
ii
 += 2;

666 
ch2
[0] = 
ch
[
ii
];

667 
ch2
[1] = '\0';

668 
	`Pröt8
(
y
 , 
x
 , 
ch2
 , 
yn
);

669 
x
 += 8;

670 
ii
 += 1;

673 
	}
}

674 
	$HÆLcdWrôeSåög
 ( *
°r
, 
uöt8
 
›ti⁄
)

676 
i
;

677 
i
 = 
	`°æí
(
°r
);

678 *(
°r
+
i
) = '\0';

679 
›ti⁄
)

687 
	`Pröt8
(
›ti⁄
%7,0,(*)
°r
,1);

692 
	}
}

694 
	$HÆLcdWrôeVÆue
 ( 
uöt32
 
vÆue
, c⁄° 
uöt8
 
ødix
, uöt8 
›ti⁄
)

697 
	}
}

699 
	$HÆLcdWrôeS¸ìn
–*
löe1
, *
löe2
 )

701 #i‡(
HAL_LCD
 =
TRUE
)

702 
	`HÆLcdWrôeSåög
–
löe1
, 3 );

703 
	`HÆLcdWrôeSåög
–
löe2
, 6 );

706 
	}
}

707 
	$HÆLcdWrôeSåögVÆue
–*
tôÀ
, 
uöt16
 
vÆue
, 
uöt8
 
f‹m©
, uöt8 
löe
 )

710 
	}
}

711 
	$HÆLcdWrôeSåögVÆueVÆue
–*
tôÀ
, 
uöt16
 
vÆue1
, 
uöt8
 
f‹m©1
,

712 
uöt16
 
vÆue2
, 
uöt8
 
f‹m©2
, uöt8 
löe
 )

715 
	}
}

	@Components/mac/high_level/mac_cfg.c

44 
	~"mac_≠i.h
"

52 #i‚de‡
MAC_CFG_TX_DATA_MAX


53 
	#MAC_CFG_TX_DATA_MAX
 2

	)

57 #i‚de‡
MAC_CFG_TX_MAX


58 
	#MAC_CFG_TX_MAX
 5

	)

62 #i‚de‡
MAC_CFG_RX_MAX


63 
	#MAC_CFG_RX_MAX
 2

	)

67 #i‚de‡
MAC_CFG_DATA_IND_OFFSET


68 
	#MAC_CFG_DATA_IND_OFFSET
 0

	)

72 #i‚de‡
MAC_CFG_APP_PENDING_QUEUE


73 
	#MAC_CFG_APP_PENDING_QUEUE
 
FALSE


	)

82 c⁄° 
macCfg_t
 
	gmacCfg
 =

84 
MAC_CFG_TX_DATA_MAX
,

85 
MAC_CFG_TX_MAX
,

86 
MAC_CFG_RX_MAX
,

87 
MAC_CFG_DATA_IND_OFFSET
,

88 
MAC_CFG_APP_PENDING_QUEUE


	@Components/mac/high_level/mac_high_level.h

40 #i‚de‡
MAC_HIGH_LEVEL_H


41 
	#MAC_HIGH_LEVEL_H


	)

48 
	~"mac_≠i.h
"

56 
	#MAC_RX_FLAG_VERSION
 0x03

	)

57 
	#MAC_RX_FLAG_ACK_PENDING
 0x04

	)

58 
	#MAC_RX_FLAG_SECURITY
 0x08

	)

59 
	#MAC_RX_FLAG_PENDING
 0x10

	)

60 
	#MAC_RX_FLAG_ACK_REQUEST
 0x20

	)

61 
	#MAC_RX_FLAG_INTRA_PAN
 0x40

	)

62 
	#MAC_RX_FLAG_CRC_OK
 0x80

	)

73 
macEvítHdr_t
 
	mhdr
;

74 
sD©a_t
 
	mmsdu
;

75 
macTxI¡D©a_t
 
	möã∫Æ
;

76 
macSec_t
 
	m£c
;

77 } 
	tmacTx_t
;

82 
macEvítHdr_t
 
	mhdr
;

83 
sD©a_t
 
	mmsdu
;

84 
macRxI¡D©a_t
 
	möã∫Æ
;

85 
macSec_t
 
	m£c
;

86 
macD©aInd_t
 
	mmac
;

87 } 
	tmacRx_t
;

95 
macTx_t
 *
pMacD©aTx
;

98 
boﬁ
 
macP™Co‹dö©‹
;

106 
uöt8
 *
macD©aRxMemAŒoc
(
uöt16
 
Àn
);

107 
uöt8
 
macD©aRxMemFªe
(uöt8 *
pMsg
);

108 
uöt8
 
macD©aTxTimeAvaûabÀ
();

	@Components/mac/high_level/mac_main.h

40 #i‚de‡
MAC_MAIN_H


41 
	#MAC_MAIN_H


	)

48 
	~"mac_high_Àvñ.h
"

58 
	mMAC_IDLE_ST
,

59 
	mMAC_ASSOCIATING_ST
,

60 
	mMAC_POLLING_ST
,

61 
	mMAC_SCANNING_ST
,

62 
	mMAC_STARTING_ST


68 
	mMAC_API_DATA_REQ_EVT
,

69 
	mMAC_API_PURGE_REQ_EVT
,

70 
	mMAC_API_ASSOCIATE_REQ_EVT
,

71 
	mMAC_API_ASSOCIATE_RSP_EVT
,

72 
	mMAC_API_DISASSOCIATE_REQ_EVT
,

73 
	mMAC_API_ORPHAN_RSP_EVT
,

74 
	mMAC_API_POLL_REQ_EVT
,

75 
	mMAC_API_SCAN_REQ_EVT
,

76 
	mMAC_API_START_REQ_EVT
,

77 
	mMAC_API_SYNC_REQ_EVT
,

78 
	mMAC_API_PWR_ON_REQ_EVT
,

79 
	mMAC_RX_ASSOC_REQ_EVT
,

80 
	mMAC_RX_ASSOC_RSP_EVT
,

81 
	mMAC_RX_DISASSOC_EVT
,

82 
	mMAC_RX_DATA_REQ_EVT
,

83 
	mMAC_RX_PAN_CONFLICT_EVT
,

84 
	mMAC_RX_ORPHAN_EVT
,

85 
	mMAC_RX_BEACON_REQ_EVT
,

86 
	mMAC_RX_REALIGN_EVT
,

87 
	mMAC_RX_GTS_REQ_EVT
,

88 
	mMAC_RX_BEACON_EVT
,

89 
	mMAC_RX_DATA_IND_EVT
,

90 
	mMAC_TX_ASSOC_REQ_OK_EVT
,

91 
	mMAC_TX_ASSOC_REQ_FAIL_EVT
,

92 
	mMAC_TX_ASSOC_RSP_EVT
,

93 
	mMAC_TX_DISASSOC_EVT
,

94 
	mMAC_TX_ORPHAN_OK_EVT
,

95 
	mMAC_TX_ORPHAN_FAIL_EVT
,

96 
	mMAC_TX_BEACON_REQ_OK_EVT
,

97 
	mMAC_TX_BEACON_REQ_FAIL_EVT
,

98 
	mMAC_TX_REALIGN_OK_EVT
,

99 
	mMAC_TX_REALIGN_FAIL_EVT
,

100 
	mMAC_TX_DATA_REQ_OK_EVT
,

101 
	mMAC_TX_DATA_REQ_FAIL_EVT
,

102 
	mMAC_TX_DATA_REQ_PEND_EVT
,

103 
	mMAC_TX_CONFLICT_OK_EVT
,

104 
	mMAC_TIM_RESPONSE_WAIT_EVT
,

105 
	mMAC_TIM_FRAME_RESPONSE_EVT
,

106 
	mMAC_TIM_SCAN_EVT
,

107 
	mMAC_TIM_SYNC_EVT
,

108 
	mMAC_TIM_EXP_INDIRECT_EVT
,

109 
	mMAC_INT_SCAN_COMPLETE_EVT
,

110 
	mMAC_INT_ASSOC_FAILED_EVT
,

111 
	mMAC_INT_AUTO_POLL_EVT
,

112 
	mMAC_INT_START_COMPLETE_EVT
,

113 
	mMAC_INT_TX_COMPLETE_EVT
,

114 
	mMAC_INT_BEACON_RESP_TIM_EVT
,

115 
	mMAC_INT_BROADCAST_PEND_EVT
,

116 
	mMAC_NO_ACTION_EVT


120 
	#MAC_API_EVT_MAX
 
MAC_API_PWR_ON_REQ_EVT


	)

125 
	mMAC_MGMT_ACTION_1
,

126 
	mMAC_MGMT_ACTION_2
,

127 
	mMAC_SCAN_ACTION
,

128 
	mMAC_DEVICE_ACTION_1
,

129 
	mMAC_DEVICE_ACTION_2
,

130 
	mMAC_COORD_ACTION_1
,

131 
	mMAC_COORD_ACTION_2
,

132 
	mMAC_COORD_ACTION_3
,

133 
	mMAC_BEACON_DEVICE_ACTION
,

134 
	mMAC_ACTION_SET_MAX


138 
	#MAC_ACTION_INIT
(
n
Ë(“Ë<< 4)

	)

139 
	#MAC_ACTION_SET
(
n
Ë(“Ë>> 4)

	)

140 
	#MAC_ACTION_ID
(
n
Ë(“Ë& 0x0F)

	)

146 
	mMAC_NO_ACTION
 = 
MAC_ACTION_INIT
(
MAC_MGMT_ACTION_1
),

147 
	mMAC_API_BAD_STATE
,

148 
	mMAC_API_PENDING
,

149 
	mMAC_API_DATA_REQ
,

150 
	mMAC_COMM_STATUS_IND
,

151 
	mMAC_DATA_SEND
,

152 
	mMAC_DATA_RX_IND
,

155 
	mMAC_API_PWR_ON_REQ
 = 
MAC_ACTION_INIT
(
MAC_MGMT_ACTION_2
),

156 
	mMAC_API_DISASSOCIATE_REQ
,

157 
	mMAC_DISASSOC_COMPLETE
,

158 
	mMAC_RX_BEACON
,

159 
	mMAC_RX_DISASSOC
,

162 
	mMAC_API_SCAN_REQ
 = 
MAC_ACTION_INIT
(
MAC_SCAN_ACTION
),

163 
	mMAC_SCAN_COMPLETE
,

164 
	mMAC_SCAN_FAILED_IN_PROGRESS
,

165 
	mMAC_SCAN_NEXT_CHAN
,

166 
	mMAC_SCAN_RX_BEACON
,

167 
	mMAC_SCAN_START_TIMER
,

170 
	mMAC_API_ASSOCIATE_REQ
 = 
MAC_ACTION_INIT
(
MAC_DEVICE_ACTION_1
),

171 
	mMAC_API_POLL_REQ
,

172 
	mMAC_ASSOC_DATA_REQ
,

173 
	mMAC_ASSOC_DATA_REQ_COMPLETE
,

174 
	mMAC_ASSOC_DATA_RX_IND
,

175 
	mMAC_ASSOC_FAILED
,

176 
	mMAC_ASSOC_FRAME_RESPONSE_TIMEOUT
,

177 
	mMAC_POLL_DATA_REQ_COMPLETE
,

178 
	mMAC_POLL_DATA_RX_IND
,

179 
	mMAC_POLL_FRAME_RESPONSE_TIMEOUT
,

180 
	mMAC_POLL_RX_ASSOC_RSP
,

181 
	mMAC_RX_ASSOC_RSP
,

182 
	mMAC_START_FRAME_RESPONSE_TIMER
,

183 
	mMAC_START_RESPONSE_TIMER
,

186 
	mMAC_ASSOC_RX_DISASSOC
 = 
MAC_ACTION_INIT
(
MAC_DEVICE_ACTION_2
),

187 
	mMAC_POLL_RX_DISASSOC
,

188 
	mMAC_SCAN_RX_COORD_REALIGN
,

189 
	mMAC_RX_COORD_REALIGN
,

190 
	mMAC_PAN_CONFLICT_COMPLETE
,

193 
	mMAC_API_START_REQ
 = 
MAC_ACTION_INIT
(
MAC_COORD_ACTION_1
),

194 
	mMAC_START_CONTINUE
,

197 
	mMAC_API_ASSOCIATE_RSP
 = 
MAC_ACTION_INIT
(
MAC_COORD_ACTION_2
),

198 
	mMAC_RX_ASSOC_REQ
,

199 
	mMAC_RX_BEACON_REQ
,

200 
	mMAC_RX_DATA_REQ
,

201 
	mMAC_START_COMPLETE
,

202 
	mMAC_INDIRECT_EXPIRE
,

205 
	mMAC_API_ORPHAN_RSP
 = 
MAC_ACTION_INIT
(
MAC_COORD_ACTION_3
),

206 
	mMAC_API_PURGE_REQ
,

207 
	mMAC_RX_ORPHAN
,

208 
	mMAC_RX_PAN_CONFLICT
,

211 
	mMAC_API_SYNC_REQ
 = 
MAC_ACTION_INIT
(
MAC_BEACON_DEVICE_ACTION
),

212 
	mMAC_AUTO_POLL
,

213 
	mMAC_BEACON_START_FRAME_RSP_TIMER
,

214 
	mMAC_START_BROADCAST_PEND_TIMER


218 
	#MAC_BUF_RESERVED
 0x80

	)

221 
	#MAC_RESPONSE_WAIT_TASK_EVT
 0x01

	)

222 
	#MAC_FRAME_RESPONSE_TASK_EVT
 0x02

	)

223 
	#MAC_SCAN_TASK_EVT
 0x04

	)

224 
	#MAC_EXP_INDIRECT_TASK_EVT
 0x08

	)

225 
	#MAC_TX_COMPLETE_TASK_EVT
 0x10

	)

226 
	#MAC_RX_QUEUE_TASK_EVT
 0x20

	)

227 
	#MAC_START_COMPLETE_TASK_EVT
 0x40

	)

228 
	#MAC_BROADCAST_PEND_TASK_EVT
 0x80

	)

231 
	#MAC_ACTION_POS
 0

	)

232 
	#MAC_NEXT_STATE_POS
 1

	)

233 
	#MAC_NUM_COLS
 2

	)

238 
	mMAC_FEAT_DEVICE
,

239 
	mMAC_FEAT_COORD
,

240 
	mMAC_FEAT_SECURITY
,

241 
	mMAC_FEAT_BEACON_COORD
,

242 
	mMAC_FEAT_BEACON_DEVICE
,

243 
	mMAC_FEAT_GTS_CLIENT
,

244 
	mMAC_FEAT_GTS_SERVER
,

245 
	mMAC_FEAT_MAX


249 
	#MAC_FEAT_DEVICE_MASK
 ((
uöt16
Ë1 << 
MAC_FEAT_DEVICE
)

	)

250 
	#MAC_FEAT_COORD_MASK
 ((
uöt16
Ë1 << 
MAC_FEAT_COORD
)

	)

251 
	#MAC_FEAT_SECURITY_MASK
 ((
uöt16
Ë1 << 
MAC_FEAT_SECURITY
)

	)

252 
	#MAC_FEAT_BEACON_COORD_MASK
 ((
uöt16
Ë1 << 
MAC_FEAT_BEACON_COORD
)

	)

253 
	#MAC_FEAT_BEACON_DEVICE_MASK
 ((
uöt16
Ë1 << 
MAC_FEAT_BEACON_DEVICE
)

	)

254 
	#MAC_FEAT_GTS_CLIENT_MASK
 ((
uöt16
Ë1 << 
MAC_FEAT_GTS_CLIENT
)

	)

255 
	#MAC_FEAT_GTS_SERVER_MASK
 ((
uöt16
Ë1 << 
MAC_FEAT_GTS_SERVER
)

	)

257 
	#MAC_FEAT_GTS_MASK
 (
MAC_FEAT_GTS_CLIENT_MASK
 | 
MAC_FEAT_GTS_SERVER_MASK
)

	)

260 
	#MAC_RX_POLL
 0x01

	)

261 
	#MAC_RX_WHEN_IDLE
 0x02

	)

262 
	#MAC_RX_SCAN
 0x04

	)

263 
	#MAC_RX_BROADCAST_PEND
 0x10

	)

264 
	#MAC_RX_BEACON_DEVICE
 0x20

	)

265 
	#MAC_RX_BEACON_NETWORK
 0x40

	)

266 
	#MAC_RX_BEACON_SYNC
 0x80

	)

269 
	#MAC_TX_MODE_NON_CSMA
 0x01

	)

270 
	#MAC_TX_MODE_SLOTTED
 0x02

	)

271 
	#MAC_TX_MODE_INTERNAL
 0x08

	)

272 
	#MAC_TX_MODE_SCAN_RELATED
 0x10

	)

273 
	#MAC_TX_MODE_BROADCAST
 0x20

	)

274 
	#MAC_TX_MODE_BEACON
 0x40

	)

275 
	#MAC_TX_MODE_REQUESTED
 0x80

	)

278 
	#MAC_TX_SCHED_OUTGOING_CAP
 0x01

	)

279 
	#MAC_TX_SCHED_INCOMING_CAP
 0x02

	)

280 
	#MAC_TX_SCHED_READY
 0x10

	)

281 
	#MAC_TX_SCHED_SCAN_RELATED
 0x20

	)

282 
	#MAC_TX_SCHED_MARKED
 0x40

	)

283 
	#MAC_TX_SCHED_INDIRECT
 0x80

	)

284 
	#MAC_TX_SCHED_INACTIVE
 0xFF

	)

292 #i‡
deföed
(
MAC_NO_PARAM_CHECK
Ë&& MAC_NO_PARAM_CHECK =
TRUE


293 
	#MAC_PARAM_STATUS
(
ex¥
, 
°©us
)

	)

295 
	#MAC_PARAM_STATUS
(
ex¥
, 
°©us
Ëi‡(”x¥Ë=
FALSE
Ë°©u†
MAC_INVALID_PARAMETER


	)

304 c⁄° 
	tuöt8
 (
	tCODE
 * 
	tmacSèãTbl_t
)[
MAC_NUM_COLS
];

309 
macEvítHdr_t
 
	mhdr
;

310 
sD©a_t
 
	mmpdu
;

311 
macTxI¡D©a_t
 
	möã∫Æ
;

314 
macMlmeAssocüãReq_t
 
	massocüãReq
;

315 
macMlmeAssocüãR•_t
 
	massocüãR•
;

316 
macMlmeDißssocüãReq_t
 
	mdißssocüãReq
;

317 
macMlmeOΩh™R•_t
 
	m‹ph™R•
;

318 } 
	mmac
;

319 } 
	tmacApiD©aEvít_t
;

324 
uöt8
 
	mmsduH™dÀ
;

325 } 
	tmacM˝sPurgeReq_t
;

331 
macEvítHdr_t
 
	mhdr
;

334 
macMlmeSˇnReq_t
 
	msˇnReq
;

335 
macMlmeSèπReq_t
 
	m°¨tReq
;

336 
macMlmeSyncReq_t
 
	msyncReq
;

337 
macMlmePﬁlReq_t
 
	mpﬁlReq
;

338 
macM˝sPurgeReq_t
 
	mpurgeReq
;

339 } 
	mmac
;

340 } 
	tmacApiEvít_t
;

345 
macEvítHdr_t
 
	mhdr
;

346 
macApiEvít_t
 
	m≠i
;

347 
macApiD©aEvít_t
 
	m≠iD©a
;

348 
macM˝sD©aReq_t
 
	md©aReq
;

349 
macM˝sD©aInd_t
 
	md©aInd
;

350 
macTx_t
 
	mtx
;

351 
macRx_t
 
	mrx
;

352 
macMlmeBóc⁄NŸifyInd_t
 
	mbóc⁄NŸify
;

353 } 
	tmacEvít_t
;

356 (*
	tmacA˘i⁄_t
)(
	tmacEvít_t
 *
	tpEvít
);

359 c⁄° 
	tmacA˘i⁄_t
 
	tCODE
 * 
	tmacA˘i⁄Së_t
;

364 
macEvít_t
 *
pPídög
;

365 
uöt16
 
„©uªMask
;

366 
uöt8
 
°©e
;

367 
uöt8
 *
pPídögBuf
;

368 
uöt8
 
≥ndögRe£rved
;

369 
uöt8
 *
pBuf
;

370 
uöt8
 
bufRe£rved
; \

371 } 
	tmacMaö_t
;

374 (*
	tmacRe£t_t
)();

382 c⁄° 
uöt8
 
CODE
 
macIdÀSt
[][
MAC_NUM_COLS
];

383 c⁄° 
uöt8
 
CODE
 
macAssocütögSt
[][
MAC_NUM_COLS
];

384 c⁄° 
uöt8
 
CODE
 
macPﬁlögSt
[][
MAC_NUM_COLS
];

385 c⁄° 
uöt8
 
CODE
 
macSˇ¬ögSt
[][
MAC_NUM_COLS
];

386 c⁄° 
uöt8
 
CODE
 
macSèπögSt
[][
MAC_NUM_COLS
];

389 
macSèãTbl_t
 
macSèãTbl
[];

392 
uöt8
 
macTaskId
;

395 
macMaö_t
 
macMaö
;

398 
macRe£t_t
 
macRe£t
[
MAC_FEAT_MAX
];

401 
macA˘i⁄Së_t
 
macA˘i⁄Së
[
MAC_ACTION_SET_MAX
];

404 c⁄° 
macCfg_t
 
macCfg
;

411 
	`macMaöRe£t
();

412 
	`macSëEvít
(
uöt8
 
evít
);

413 
	`macCbackF‹Evít
(
macEvít_t
 *
pEvít
, 
uöt8
 
°©us
);

414 
boﬁ
 
	`macSèãIdÀ
();

415 
boﬁ
 
	`macSèãSˇ¬ög
();

416 
	`macExecuã
(
macEvít_t
 *
pEvít
);

417 
	`macSídMsg
(
uöt8
 
evít
, *
pD©a
);

418 
	`macSídD©aMsg
(
uöt8
 
evít
, 
boﬁ
 
£curôy
, *
pD©a
);

419 
	`macMaöRe£rve
–
uöt8
 *
±r
 );

	@Components/mac/high_level/mac_pib.h

40 #i‚de‡
MAC_PIB_H


41 
	#MAC_PIB_H


	)

48 
	~"mac_≠i.h
"

58 
uöt8
 
	mackWaôDuøti⁄
;

59 
boﬁ
 
	massocüti⁄Pîmô
;

60 
boﬁ
 
	mautoReque°
;

61 
boﬁ
 
	mb©tLi„Ext
;

62 
uöt8
 
	mb©tLi„ExtPîiods
;

64 
uöt8
 *
	mpBóc⁄Paylﬂd
;

65 
uöt8
 
	mbóc⁄PaylﬂdLígth
;

66 
uöt8
 
	mbóc⁄Ordî
;

67 
uöt32
 
	mbóc⁄TxTime
;

68 
uöt8
 
	mb¢
;

70 
sAddr_t
 
	mco‹dExãndedAddªss
;

71 
uöt16
 
	mco‹dSh‹tAddªss
;

72 
uöt8
 
	md¢
;

73 
boﬁ
 
	mgtsPîmô
;

74 
uöt8
 
	mmaxCsmaBackoffs
;

76 
uöt8
 
	mmöBe
;

77 
uöt16
 
	m∑nId
;

78 
boﬁ
 
	m¥omiscuousMode
;

79 
boﬁ
 
	mrxOnWhíIdÀ
;

80 
uöt16
 
	msh‹tAddªss
;

82 
uöt8
 
	msu≥r‰ameOrdî
;

83 
uöt16
 
	må™ß˘i⁄Pîsi°í˚Time
;

84 
boﬁ
 
	massocüãdP™Co‹d
;

85 
uöt8
 
	mmaxBe
;

86 
uöt16
 
	mmaxFømeTŸÆWaôTime
;

88 
uöt8
 
	mmaxFømeRërõs
;

89 
uöt8
 
	mª•⁄£WaôTime
;

90 
uöt8
 
	msyncSymbﬁOff£t
;

91 
boﬁ
 
	mtimeSèmpSuµ‹ãd
;

92 
boﬁ
 
	m£curôyE«bÀd
;

95 
uöt8
 
	mphyTønsmôPowî
;

96 
uöt8
 
	mlogiˇlCh™√l
;

97 
sAddr_t
 
	mexãndedAddªss
;

98 
uöt8
 
	mÆtBe
;

100 } 
	tmacPib_t
;

108 
macPib_t
 
macPib
;

115 
macPibRe£t
();

	@Components/mac/high_level/mac_spec.h

40 #i‚de‡
MAC_SPEC_H


41 
	#MAC_SPEC_H


	)

49 
	#MAC_PHY_SHR_LEN
 5

	)

50 
	#MAC_PHY_PHR_LEN
 1

	)

53 
	#MAC_FCF_FIELD_LEN
 2

	)

54 
	#MAC_SEQ_NUM_FIELD_LEN
 1

	)

55 
	#MAC_PAN_ID_FIELD_LEN
 2

	)

56 
	#MAC_EXT_ADDR_FIELD_LEN
 8

	)

57 
	#MAC_SHORT_ADDR_FIELD_LEN
 2

	)

58 
	#MAC_FCS_FIELD_LEN
 2

	)

61 
	#MAC_FCF_OFFSET
 0

	)

62 
	#MAC_SEQ_NUM_OFFSET
 2

	)

63 
	#MAC_DEST_PAN_ID_OFFSET
 3

	)

64 
	#MAC_DEST_ADDR_OFFSET
 5

	)

67 
	#MAC_FCF_FRAME_TYPE_MASK
 0x0007

	)

68 
	#MAC_FCF_SEC_ENABLED_MASK
 0x0008

	)

69 
	#MAC_FCF_FRAME_PENDING_MASK
 0x0010

	)

70 
	#MAC_FCF_ACK_REQUEST_MASK
 0x0020

	)

71 
	#MAC_FCF_INTRA_PAN_MASK
 0x0040

	)

72 
	#MAC_FCF_DST_ADDR_MODE_MASK
 0x0C00

	)

73 
	#MAC_FCF_FRAME_VERSION_MASK
 0x3000

	)

74 
	#MAC_FCF_SRC_ADDR_MODE_MASK
 0xC000

	)

77 
	#MAC_FCF_FRAME_TYPE_POS
 0

	)

78 
	#MAC_FCF_SEC_ENABLED_POS
 3

	)

79 
	#MAC_FCF_FRAME_PENDING_POS
 4

	)

80 
	#MAC_FCF_ACK_REQUEST_POS
 5

	)

81 
	#MAC_FCF_INTRA_PAN_POS
 6

	)

82 
	#MAC_FCF_DST_ADDR_MODE_POS
 10

	)

83 
	#MAC_FCF_FRAME_VERSION_POS
 12

	)

84 
	#MAC_FCF_SRC_ADDR_MODE_POS
 14

	)

87 
	#MAC_SFS_BEACON_ORDER_POS
 0

	)

88 
	#MAC_SFS_SUPERFRAME_ORDER_POS
 4

	)

91 
	#MAC_SFS_FINAL_CAP_SLOT_POS
 0

	)

92 
	#MAC_SFS_BATT_LIFE_EXT_POS
 4

	)

93 
	#MAC_SFS_PAN_COORD_POS
 6

	)

94 
	#MAC_SFS_ASSOC_PERMIT_POS
 7

	)

98 
	#MAC_FRAME_TYPE_BEACON
 0

	)

99 
	#MAC_FRAME_TYPE_DATA
 1

	)

100 
	#MAC_FRAME_TYPE_ACK
 2

	)

101 
	#MAC_FRAME_TYPE_COMMAND
 3

	)

102 
	#MAC_FRAME_TYPE_MAX_VALID
 
MAC_FRAME_TYPE_COMMAND


	)

105 
	#MAC_ASSOC_REQ_FRAME
 1

	)

106 
	#MAC_ASSOC_RSP_FRAME
 2

	)

107 
	#MAC_DISASSOC_NOTIF_FRAME
 3

	)

108 
	#MAC_DATA_REQ_FRAME
 4

	)

109 
	#MAC_PAN_CONFLICT_FRAME
 5

	)

110 
	#MAC_ORPHAN_NOTIF_FRAME
 6

	)

111 
	#MAC_BEACON_REQ_FRAME
 7

	)

112 
	#MAC_COORD_REALIGN_FRAME
 8

	)

113 
	#MAC_GTS_REQ_FRAME
 9

	)

116 
	#MAC_ZERO_DATA_PAYLOAD
 0

	)

117 
	#MAC_ASSOC_REQ_PAYLOAD
 2

	)

118 
	#MAC_ASSOC_RSP_PAYLOAD
 4

	)

119 
	#MAC_DISASSOC_NOTIF_PAYLOAD
 2

	)

120 
	#MAC_DATA_REQ_PAYLOAD
 1

	)

121 
	#MAC_PAN_CONFLICT_PAYLOAD
 1

	)

122 
	#MAC_ORPHAN_NOTIF_PAYLOAD
 1

	)

123 
	#MAC_BEACON_REQ_PAYLOAD
 1

	)

124 
	#MAC_COORD_REALIGN_PAYLOAD
 9

	)

125 
	#MAC_GTS_REQ_PAYLOAD
 2

	)

128 
	#MAC_ZERO_DATA_FRAME_LEN
 (21 + 
MAC_ZERO_DATA_PAYLOAD
)

	)

129 
	#MAC_ASSOC_REQ_FRAME_LEN
 (23 + 
MAC_ASSOC_REQ_PAYLOAD
)

	)

130 
	#MAC_ASSOC_RSP_FRAME_LEN
 (23 + 
MAC_ASSOC_RSP_PAYLOAD
)

	)

131 
	#MAC_DISASSOC_NOTIF_FRAME_LEN
 (17 + 
MAC_DISASSOC_NOTIF_PAYLOAD
)

	)

132 
	#MAC_DATA_REQ_FRAME_LEN
 (23 + 
MAC_DATA_REQ_PAYLOAD
)

	)

133 
	#MAC_PAN_CONFLICT_FRAME_LEN
 (23 + 
MAC_PAN_CONFLICT_PAYLOAD
)

	)

134 
	#MAC_ORPHAN_NOTIF_FRAME_LEN
 (17 + 
MAC_ORPHAN_NOTIF_PAYLOAD
)

	)

135 
	#MAC_BEACON_REQ_FRAME_LEN
 (7 + 
MAC_BEACON_REQ_PAYLOAD
)

	)

136 
	#MAC_COORD_REALIGN_FRAME_LEN
 (23 + 
MAC_COORD_REALIGN_PAYLOAD
)

	)

137 
	#MAC_GTS_REQ_FRAME_LEN
 (7 + 
MAC_GTS_REQ_PAYLOAD
)

	)

140 
	#MAC_BEACON_FRAME_BASE_LEN
 (13 + 4)

	)

143 
	#MAC_PEND_ADDR_MAX
 7

	)

146 
	#MAC_ASSOC_SUCCESS
 0

	)

147 
	#MAC_ASSOC_CAPACITY
 1

	)

148 
	#MAC_ASSOC_DENIED
 2

	)

151 
	#MAC_BO_NON_BEACON
 15

	)

152 
	#MAC_SO_NONE
 15

	)

155 
	#MAC_PAN_ID_BROADCAST
 0xFFFF

	)

158 
	#MAC_SYMBOLS_PER_OCTET
 2

	)

161 
	#MAC_A_MAX_PHY_PACKET_SIZE
 127

	)

164 
	#MAC_A_TURNAROUND_TIME
 12

	)

167 
	#MAC_A_BASE_SLOT_DURATION
 3

	)

170 
	#MAC_A_BASE_SUPERFRAME_DURATION
 (
MAC_A_BASE_SLOT_DURATION
 * 
MAC_A_NUM_SUPERFRAME_SLOTS
)

	)

173 
	#MAC_A_MAX_BEACON_OVERHEAD
 75

	)

176 
	#MAC_A_MAX_BEACON_PAYLOAD_LENGTH
 (
MAC_A_MAX_PHY_PACKET_SIZE
 - 
MAC_A_MAX_BEACON_OVERHEAD
)

	)

179 
	#MAC_A_GTS_DESC_PERSISTENCE_TIME
 4

	)

182 
	#MAC_A_MAX_FRAME_OVERHEAD
 25

	)

185 
	#MAC_A_MAX_LOST_BEACONS
 4

	)

188 
	#MAC_A_MAX_FRAME_SIZE
 (
MAC_A_MAX_PHY_PACKET_SIZE
 - 
MAC_A_MAX_FRAME_OVERHEAD
)

	)

191 
	#MAC_A_MAX_SIFS_FRAME_SIZE
 18

	)

194 
	#MAC_A_MIN_CAP_LENGTH
 440

	)

197 
	#MAC_A_MIN_LIFS_PERIOD
 40

	)

200 
	#MAC_A_MIN_SIFS_PERIOD
 12

	)

203 
	#MAC_A_NUM_SUPERFRAME_SLOTS
 16

	)

206 
	#MAC_A_UNIT_BACKOFF_PERIOD
 20

	)

209 
	#MAC_SPEC_ED_MAX
 0xFF

	)

212 
	#MAC_SPEC_ED_MIN_DBM_ABOVE_RECEIVER_SENSITIVITY
 10

	)

218 
	#MAC_SPEC_MIN_RECEIVER_SENSITIVITY
 -85

	)

221 
	#MAC_SPEC_PREAMBLE_FIELD_LENGTH
 8

	)

224 
	#MAC_SPEC_SFD_FIELD_LENGTH
 2

	)

227 
	#MAC_SPEC_USECS_PER_SYMBOL
 16

	)

230 
	#MAC_SPEC_USECS_PER_BACKOFF
 (
MAC_SPEC_USECS_PER_SYMBOL
 * 
MAC_A_UNIT_BACKOFF_PERIOD
)

	)

233 
	#MAC_SPEC_OCTETS_PER_SYMBOL
 2

	)

242 
	#MAC_GTS_FIELDS_LEN
(
gtsS≥c
Ë((
uöt8
)((((gtsS≥cË& 0x07Ë* 3Ë+ (((gtsS≥cË& 0x07Ë? 1 : 0)))

	)

253 
	#MAC_FRAME_TYPE
(
p
Ë(’)[
MAC_FCF_OFFSET
+0] & 0x07)

	)

254 
	#MAC_SECURITY
(
p
Ë(’)[
MAC_FCF_OFFSET
+0] & 0x08Ë

	)

255 
	#MAC_FRAME_PENDING
(
p
Ë(’)[
MAC_FCF_OFFSET
+0] & 0x10Ë

	)

256 
	#MAC_ACK_REQUEST
(
p
Ë(’)[
MAC_FCF_OFFSET
+0] & 0x20Ë

	)

257 
	#MAC_INTRA_PAN
(
p
Ë(’)[
MAC_FCF_OFFSET
+0] & 0x40Ë

	)

258 
	#MAC_DEST_ADDR_MODE
(
p
Ë((’)[
MAC_FCF_OFFSET
+1] >> 2Ë& 0x3)

	)

259 
	#MAC_FRAME_VERSION
(
p
Ë((’)[
MAC_FCF_OFFSET
+1] >> 4Ë& 0x3)

	)

260 
	#MAC_SRC_ADDR_MODE
(
p
Ë((’)[
MAC_FCF_OFFSET
+1] >> 6Ë& 0x3)

	)

261 
	#MAC_SEQ_NUMBER
(
p
Ë(’)[
MAC_SEQ_NUM_OFFSET
])

	)

	@Components/mac/include/mac_api.h

40 #i‚de‡
MAC_API_H


41 
	#MAC_API_H


	)

43 #ifde‡
__˝lu•lus


51 
	~"hÆ_ty≥s.h
"

52 
	~"ßddr.h
"

53 
	~"sd©a.h
"

61 
	#MAC_SUCCESS
 0x00

	)

62 
	#MAC_AUTOACK_PENDING_ALL_ON
 0xFE

	)

63 
	#MAC_AUTOACK_PENDING_ALL_OFF
 0xFF

	)

64 
	#MAC_BEACON_LOSS
 0xE0

	)

65 
	#MAC_CHANNEL_ACCESS_FAILURE
 0xE1

	)

67 
	#MAC_COUNTER_ERROR
 0xDB

	)

69 
	#MAC_DENIED
 0xE2

	)

70 
	#MAC_DISABLE_TRX_FAILURE
 0xE3

	)

71 
	#MAC_FRAME_TOO_LONG
 0xE5

	)

73 
	#MAC_IMPROPER_KEY_TYPE
 0xDC

	)

75 
	#MAC_IMPROPER_SECURITY_LEVEL
 0xDD

	)

77 
	#MAC_INVALID_ADDRESS
 0xF5

	)

79 
	#MAC_INVALID_GTS
 0xE6

	)

80 
	#MAC_INVALID_HANDLE
 0xE7

	)

81 
	#MAC_INVALID_INDEX
 0xF9

	)

82 
	#MAC_INVALID_PARAMETER
 0xE8

	)

83 
	#MAC_LIMIT_REACHED
 0xFA

	)

85 
	#MAC_NO_ACK
 0xE9

	)

87 
	#MAC_NO_BEACON
 0xEA

	)

89 
	#MAC_NO_DATA
 0xEB

	)

91 
	#MAC_NO_SHORT_ADDRESS
 0xEC

	)

92 
	#MAC_ON_TIME_TOO_LONG
 0xF6

	)

93 
	#MAC_OUT_OF_CAP
 0xED

	)

94 
	#MAC_PAN_ID_CONFLICT
 0xEE

	)

96 
	#MAC_PAST_TIME
 0xF7

	)

97 
	#MAC_READ_ONLY
 0xFB

	)

98 
	#MAC_REALIGNMENT
 0xEF

	)

99 
	#MAC_SCAN_IN_PROGRESS
 0xFC

	)

100 
	#MAC_SECURITY_ERROR
 0xE4

	)

101 
	#MAC_SUPERFRAME_OVERLAP
 0xFD

	)

102 
	#MAC_TRACKING_OFF
 0xF8

	)

104 
	#MAC_TRANSACTION_EXPIRED
 0xF0

	)

107 
	#MAC_TRANSACTION_OVERFLOW
 0xF1

	)

108 
	#MAC_TX_ACTIVE
 0xF2

	)

109 
	#MAC_UNAVAILABLE_KEY
 0xF3

	)

111 
	#MAC_UNSUPPORTED_ATTRIBUTE
 0xF4

	)

112 
	#MAC_UNSUPPORTED_LEGACY
 0xDE

	)

114 
	#MAC_UNSUPPORTED_SECURITY
 0xDF

	)

115 
	#MAC_UNSUPPORTED
 0x18

	)

116 
	#MAC_BAD_STATE
 0x19

	)

117 
	#MAC_NO_RESOURCES
 0x1A

	)

119 
	#MAC_ACK_PENDING
 0x1B

	)

120 
	#MAC_NO_TIME
 0x1C

	)

121 
	#MAC_TX_ABORTED
 0x1D

	)

122 
	#MAC_DUPLICATED_ENTRY
 0x1E

	)

125 
	#MAC_SEC_LEVEL_NONE
 0x00

	)

126 
	#MAC_SEC_LEVEL_MIC_32
 0x01

	)

127 
	#MAC_SEC_LEVEL_MIC_64
 0x02

	)

128 
	#MAC_SEC_LEVEL_MIC_128
 0x03

	)

129 
	#MAC_SEC_LEVEL_ENC
 0x04

	)

130 
	#MAC_SEC_LEVEL_ENC_MIC_32
 0x05

	)

131 
	#MAC_SEC_LEVEL_ENC_MIC_64
 0x06

	)

132 
	#MAC_SEC_LEVEL_ENC_MIC_128
 0x07

	)

135 
	#MAC_KEY_ID_MODE_NONE
 0x00

	)

136 
	#MAC_KEY_ID_MODE_IMPLICIT
 0x00

	)

137 
	#MAC_KEY_ID_MODE_1
 0x01

	)

138 
	#MAC_KEY_ID_MODE_4
 0x02

	)

139 
	#MAC_KEY_ID_MODE_8
 0x03

	)

142 
	#MAC_KEY_ID_IMPLICIT_LEN
 0

	)

143 
	#MAC_KEY_ID_1_LEN
 1

	)

144 
	#MAC_KEY_ID_4_LEN
 5

	)

145 
	#MAC_KEY_ID_8_LEN
 9

	)

148 
	#MAC_KEY_SOURCE_MAX_LEN
 8

	)

151 #i‡!
deföed
 ( 
MAC_MAX_FRAME_SIZE
 )

152 
	#MAC_MAX_FRAME_SIZE
 102

	)

155 
	#MAC_DATA_OFFSET
 24

	)

156 
	#MAC_ENC_OFFSET
 5

	)

157 
	#MAC_MIC_32_LEN
 4

	)

158 
	#MAC_MIC_64_LEN
 8

	)

159 
	#MAC_MIC_128_LEN
 16

	)

163 
	#MAC_TXOPTION_ACK
 0x01

	)

165 
	#MAC_TXOPTION_GTS
 0x02

	)

166 
	#MAC_TXOPTION_INDIRECT
 0x04

	)

169 
	#MAC_TXOPTION_NO_RETRANS
 0x10

	)

170 
	#MAC_TXOPTION_NO_CNF
 0x20

	)

172 
	#MAC_TXOPTION_ALT_BE
 0x40

	)

173 
	#MAC_TXOPTION_PWR_CHAN
 0x80

	)

177 
	#MAC_CHAN_11
 11

	)

178 
	#MAC_CHAN_12
 12

	)

179 
	#MAC_CHAN_13
 13

	)

180 
	#MAC_CHAN_14
 14

	)

181 
	#MAC_CHAN_15
 15

	)

182 
	#MAC_CHAN_16
 16

	)

183 
	#MAC_CHAN_17
 17

	)

184 
	#MAC_CHAN_18
 18

	)

185 
	#MAC_CHAN_19
 19

	)

186 
	#MAC_CHAN_20
 20

	)

187 
	#MAC_CHAN_21
 21

	)

188 
	#MAC_CHAN_22
 22

	)

189 
	#MAC_CHAN_23
 23

	)

190 
	#MAC_CHAN_24
 24

	)

191 
	#MAC_CHAN_25
 25

	)

192 
	#MAC_CHAN_26
 26

	)

193 
	#MAC_CHAN_27
 27

	)

194 
	#MAC_CHAN_28
 28

	)

198 
	#MAC_CHAN_MASK
(
ch™
Ë((
uöt32
Ë1 << (ch™))

	)

201 
	#MAC_CHAN_11_MASK
 
	`MAC_CHAN_MASK
(
MAC_CHAN_11
)

	)

202 
	#MAC_CHAN_12_MASK
 
	`MAC_CHAN_MASK
(
MAC_CHAN_12
)

	)

203 
	#MAC_CHAN_13_MASK
 
	`MAC_CHAN_MASK
(
MAC_CHAN_13
)

	)

204 
	#MAC_CHAN_14_MASK
 
	`MAC_CHAN_MASK
(
MAC_CHAN_14
)

	)

205 
	#MAC_CHAN_15_MASK
 
	`MAC_CHAN_MASK
(
MAC_CHAN_15
)

	)

206 
	#MAC_CHAN_16_MASK
 
	`MAC_CHAN_MASK
(
MAC_CHAN_16
)

	)

207 
	#MAC_CHAN_17_MASK
 
	`MAC_CHAN_MASK
(
MAC_CHAN_17
)

	)

208 
	#MAC_CHAN_18_MASK
 
	`MAC_CHAN_MASK
(
MAC_CHAN_18
)

	)

209 
	#MAC_CHAN_19_MASK
 
	`MAC_CHAN_MASK
(
MAC_CHAN_19
)

	)

210 
	#MAC_CHAN_20_MASK
 
	`MAC_CHAN_MASK
(
MAC_CHAN_20
)

	)

211 
	#MAC_CHAN_21_MASK
 
	`MAC_CHAN_MASK
(
MAC_CHAN_21
)

	)

212 
	#MAC_CHAN_22_MASK
 
	`MAC_CHAN_MASK
(
MAC_CHAN_22
)

	)

213 
	#MAC_CHAN_23_MASK
 
	`MAC_CHAN_MASK
(
MAC_CHAN_23
)

	)

214 
	#MAC_CHAN_24_MASK
 
	`MAC_CHAN_MASK
(
MAC_CHAN_24
)

	)

215 
	#MAC_CHAN_25_MASK
 
	`MAC_CHAN_MASK
(
MAC_CHAN_25
)

	)

216 
	#MAC_CHAN_26_MASK
 
	`MAC_CHAN_MASK
(
MAC_CHAN_26
)

	)

217 
	#MAC_CHAN_27_MASK
 
	`MAC_CHAN_MASK
(
MAC_CHAN_27
)

	)

218 
	#MAC_CHAN_28_MASK
 
	`MAC_CHAN_MASK
(
MAC_CHAN_28
)

	)

221 
	#MAC_CHANNEL_PAGE_0
 0

	)

222 
	#MAC_CHANNEL_PAGE_1
 1

	)

223 
	#MAC_CHANNEL_PAGE_2
 2

	)

226 
	#MAC_CAPABLE_PAN_COORD
 0x01

	)

227 
	#MAC_CAPABLE_FFD
 0x02

	)

228 
	#MAC_CAPABLE_MAINS_POWER
 0x04

	)

229 
	#MAC_CAPABLE_RX_ON_IDLE
 0x08

	)

230 
	#MAC_CAPABLE_SECURITY
 0x40

	)

231 
	#MAC_CAPABLE_ALLOC_ADDR
 0x80

	)

234 
	#MAC_ACK_WAIT_DURATION
 0x40

	)

235 
	#MAC_ASSOCIATION_PERMIT
 0x41

	)

236 
	#MAC_AUTO_REQUEST
 0x42

	)

238 
	#MAC_BATT_LIFE_EXT
 0x43

	)

239 
	#MAC_BATT_LIFE_EXT_PERIODS
 0x44

	)

241 
	#MAC_BEACON_PAYLOAD
 0x45

	)

242 
	#MAC_BEACON_PAYLOAD_LENGTH
 0x46

	)

243 
	#MAC_BEACON_ORDER
 0x47

	)

244 
	#MAC_BEACON_TX_TIME
 0x48

	)

246 
	#MAC_BSN
 0x49

	)

247 
	#MAC_COORD_EXTENDED_ADDRESS
 0x4A

	)

249 
	#MAC_COORD_SHORT_ADDRESS
 0x4B

	)

252 
	#MAC_DSN
 0x4C

	)

253 
	#MAC_GTS_PERMIT
 0x4D

	)

254 
	#MAC_MAX_CSMA_BACKOFFS
 0x4E

	)

256 
	#MAC_MIN_BE
 0x4F

	)

261 
	#MAC_PAN_ID
 0x50

	)

263 
	#MAC_PROMISCUOUS_MODE
 0x51

	)

264 
	#MAC_RX_ON_WHEN_IDLE
 0x52

	)

265 
	#MAC_SHORT_ADDRESS
 0x53

	)

270 
	#MAC_SUPERFRAME_ORDER
 0x54

	)

271 
	#MAC_TRANSACTION_PERSISTENCE_TIME
 0x55

	)

273 
	#MAC_ASSOCIATED_PAN_COORD
 0x56

	)

274 
	#MAC_MAX_BE
 0x57

	)

275 
	#MAC_MAX_FRAME_TOTAL_WAIT_TIME
 0x58

	)

278 
	#MAC_MAX_FRAME_RETRIES
 0x59

	)

279 
	#MAC_RESPONSE_WAIT_TIME
 0x5A

	)

282 
	#MAC_SYNC_SYMBOL_OFFSET
 0x5B

	)

283 
	#MAC_TIMESTAMP_SUPPORTED
 0x5C

	)

284 
	#MAC_SECURITY_ENABLED
 0x5D

	)

287 
	#MAC_PHY_TRANSMIT_POWER
 0xE0

	)

288 
	#MAC_LOGICAL_CHANNEL
 0xE1

	)

289 
	#MAC_EXTENDED_ADDRESS
 0xE2

	)

290 
	#MAC_ALT_BE
 0xE3

	)

293 
	#MAC_DISASSOC_COORD
 1

	)

294 
	#MAC_DISASSOC_DEVICE
 2

	)

298 
	#MAC_SCAN_ED
 0

	)

301 
	#MAC_SCAN_ACTIVE
 1

	)

304 
	#MAC_SCAN_PASSIVE
 2

	)

306 
	#MAC_SCAN_ORPHAN
 3

	)

311 
	#MAC_ADDR_USE_EXT
 0xFFFE

	)

312 
	#MAC_SHORT_ADDR_BROADCAST
 0xFFFF

	)

313 
	#MAC_SHORT_ADDR_NONE
 0xFFFF

	)

316 
	#MAC_COMM_ASSOCIATE_RSP
 0

	)

317 
	#MAC_COMM_ORPHAN_RSP
 1

	)

318 
	#MAC_COMM_RX_SECURE
 2

	)

321 
	#MAC_PWR_ON
 0

	)

322 
	#MAC_PWR_SLEEP_LITE
 1

	)

323 
	#MAC_PWR_SLEEP_DEEP
 2

	)

326 
	#MAC_MLME_ASSOCIATE_IND
 1

	)

327 
	#MAC_MLME_ASSOCIATE_CNF
 2

	)

328 
	#MAC_MLME_DISASSOCIATE_IND
 3

	)

329 
	#MAC_MLME_DISASSOCIATE_CNF
 4

	)

330 
	#MAC_MLME_BEACON_NOTIFY_IND
 5

	)

331 
	#MAC_MLME_ORPHAN_IND
 6

	)

332 
	#MAC_MLME_SCAN_CNF
 7

	)

333 
	#MAC_MLME_START_CNF
 8

	)

334 
	#MAC_MLME_SYNC_LOSS_IND
 9

	)

335 
	#MAC_MLME_POLL_CNF
 10

	)

336 
	#MAC_MLME_COMM_STATUS_IND
 11

	)

337 
	#MAC_MCPS_DATA_CNF
 12

	)

338 
	#MAC_MCPS_DATA_IND
 13

	)

339 
	#MAC_MCPS_PURGE_CNF
 14

	)

340 
	#MAC_PWR_ON_CNF
 15

	)

341 
	#MAC_MLME_POLL_IND
 16

	)

351 
	#MAC_PEND_NUM_SHORT
(
≥ndAddrS≥c
Ë(’ídAddrS≥cË& 0x07)

	)

354 
	#MAC_PEND_NUM_EXT
(
≥ndAddrS≥c
Ë((’ídAddrS≥cË& 0x70Ë>> 4)

	)

357 
	#MAC_PEND_FIELDS_LEN
(
≥ndAddrS≥c
Ë((
	`MAC_PEND_NUM_SHORT
’ídAddrS≥cË* 2Ë+ \

	)

358 (
MAC_PEND_NUM_EXT
(
≥ndAddrS≥c
) * 8))

361 
	#MAC_SFS_BEACON_ORDER
(
s
Ë((sË& 0x0FË

	)

362 
	#MAC_SFS_SUPERFRAME_ORDER
(
s
Ë(((sË>> 4Ë& 0x0FË

	)

363 
	#MAC_SFS_FINAL_CAP_SLOT
(
s
Ë(((sË>> 8Ë& 0x0FË

	)

364 
	#MAC_SFS_BLE
(
s
Ë(((sË>> 12Ë& 0x01Ë

	)

365 
	#MAC_SFS_PAN_COORDINATOR
(
s
Ë(((sË>> 14Ë& 0x01Ë

	)

366 
	#MAC_SFS_ASSOCIATION_PERMIT
(
s
Ë((sË>> 15Ë

	)

376 
uöt8
 
evít
;

377 
uöt8
 
°©us
;

378 } 
	tmacEvítHdr_t
;

383 
uöt8
 
keySour˚
[
MAC_KEY_SOURCE_MAX_LEN
];

384 
uöt8
 
£curôyLevñ
;

385 
uöt8
 
keyIdMode
;

386 
uöt8
 
keyIndex
;

387 } 
	tmacSec_t
;

392 
uöt32
 
time°amp
;

393 
uöt16
 
time°amp2
;

394 
uöt16
 
timeToLive
;

395 
uöt8
 
‰ameTy≥
;

396 
uöt8
 
txO±i⁄s
;

397 
uöt8
 
txMode
;

398 
uöt8
 
txSched
;

399 
uöt8
 
ªåõs
;

400 
uöt8
 
ch™√l
;

401 
uöt8
 
powî
;

402 
uöt8
 
mpduLökQuÆôy
;

403 
uöt8
 
c‹ªœti⁄
;

404 
öt8
 
rssi
;

405 } 
	tmacTxI¡D©a_t
;

410 
uöt8
 
‰ameTy≥
;

411 
uöt8
 
Êags
;

412 } 
	tmacRxI¡D©a_t
;

417 
sAddr_t
 
d°Addr
;

418 
uöt16
 
d°P™Id
;

419 
uöt8
 
§cAddrMode
;

420 
uöt8
 
msduH™dÀ
;

421 
uöt8
 
txO±i⁄s
;

422 
uöt8
 
ch™√l
;

423 
uöt8
 
powî
;

424 } 
	tmacD©aReq_t
;

429 
macEvítHdr_t
 
hdr
;

430 
sD©a_t
 
msdu
;

431 
macTxI¡D©a_t
 
öã∫Æ
;

432 
macSec_t
 
£c
;

433 
macD©aReq_t
 
mac
;

434 } 
	tmacM˝sD©aReq_t
;

439 
sAddr_t
 
§cAddr
;

440 
sAddr_t
 
d°Addr
;

441 
uöt32
 
time°amp
;

442 
uöt16
 
time°amp2
;

444 
uöt16
 
§cP™Id
;

445 
uöt16
 
d°P™Id
;

446 
uöt8
 
mpduLökQuÆôy
;

447 
uöt8
 
c‹ªœti⁄
;

448 
öt8
 
rssi
;

449 
uöt8
 
d¢
;

450 } 
	tmacD©aInd_t
;

456 
macEvítHdr_t
 
hdr
;

457 
sD©a_t
 
msdu
;

458 
macRxI¡D©a_t
 
öã∫Æ
;

459 
macSec_t
 
£c
;

460 
macD©aInd_t
 
mac
;

461 } 
	tmacM˝sD©aInd_t
;

466 
macEvítHdr_t
 
hdr
;

467 
uöt8
 
msduH™dÀ
;

468 
macM˝sD©aReq_t
 *
pD©aReq
;

469 
uöt32
 
time°amp
;

470 
uöt16
 
time°amp2
;

472 
uöt8
 
ªåõs
;

473 
uöt8
 
mpduLökQuÆôy
;

474 
uöt8
 
c‹ªœti⁄
;

475 
öt8
 
rssi
;

476 } 
	tmacM˝sD©aCnf_t
;

482 
macEvítHdr_t
 
hdr
;

483 
uöt8
 
msduH™dÀ
;

484 } 
	tmacM˝sPurgeCnf_t
;

489 
sAddr_t
 
co‹dAddªss
;

490 
uöt16
 
co‹dP™Id
;

491 
uöt16
 
su≥r‰ameS≥c
;

492 
uöt8
 
logiˇlCh™√l
;

493 
uöt8
 
ch™√lPage
;

494 
boﬁ
 
gtsPîmô
;

495 
uöt8
 
lökQuÆôy
;

496 
uöt32
 
time°amp
;

497 
boﬁ
 
£curôyFaûuª
;

498 
macSec_t
 
£c
;

499 } 
	tmacP™Desc_t
;

504 
uöt8
 
logiˇlCh™√l
;

505 
uöt8
 
ch™√lPage
;

506 
sAddr_t
 
co‹dAddªss
;

507 
uöt16
 
co‹dP™Id
;

508 
uöt8
 
ˇ∑bûôyInf‹m©i⁄
;

509 
macSec_t
 
£c
;

510 } 
	tmacMlmeAssocüãReq_t
;

515 
sAddrExt_t
 
devi˚Addªss
;

516 
uöt16
 
assocSh‹tAddªss
;

517 
uöt8
 
°©us
;

518 
macSec_t
 
£c
;

519 } 
	tmacMlmeAssocüãR•_t
;

524 
sAddr_t
 
devi˚Addªss
;

525 
uöt16
 
devi˚P™Id
;

526 
uöt8
 
dißssocüãRós⁄
;

527 
boﬁ
 
txIndúe˘
;

528 
macSec_t
 
£c
;

529 } 
	tmacMlmeDißssocüãReq_t
;

535 
sAddrExt_t
 
‹ph™Addªss
;

536 
uöt16
 
sh‹tAddªss
;

537 
boﬁ
 
assocüãdMembî
;

538 
macSec_t
 
£c
;

539 } 
	tmacMlmeOΩh™R•_t
;

544 
sAddr_t
 
co‹dAddªss
;

545 
uöt16
 
co‹dP™Id
;

546 
macSec_t
 
£c
;

547 } 
	tmacMlmePﬁlReq_t
;

552 
uöt32
 
sˇnCh™√ls
;

553 
uöt8
 
sˇnTy≥
;

554 
uöt8
 
sˇnDuøti⁄
;

555 
uöt8
 
ch™√lPage
;

556 
uöt8
 
maxResu…s
;

557 
macSec_t
 
£c
;

559 
uöt8
 *
pE√rgyDëe˘
;

560 
macP™Desc_t
 *
pP™Des¸ùt‹
;

561 } 
ªsu…
;

562 } 
	tmacMlmeSˇnReq_t
;

567 
uöt32
 
°¨tTime
;

568 
uöt16
 
∑nId
;

569 
uöt8
 
logiˇlCh™√l
;

570 
uöt8
 
ch™√lPage
;

571 
uöt8
 
bóc⁄Ordî
;

572 
uöt8
 
su≥r‰ameOrdî
;

573 
boﬁ
 
∑nCo‹dö©‹
;

574 
boﬁ
 
b©ãryLi„Ext
;

576 
boﬁ
 
co‹dRólignmít
;

578 
macSec_t
 
ªÆignSec
;

579 
macSec_t
 
bóc⁄Sec
;

580 } 
	tmacMlmeSèπReq_t
;

585 
uöt8
 
logiˇlCh™√l
;

586 
uöt8
 
ch™√lPage
;

587 
boﬁ
 
åackBóc⁄
;

589 } 
	tmacMlmeSyncReq_t
;

594 
macEvítHdr_t
 
hdr
;

595 
sAddrExt_t
 
devi˚Addªss
;

596 
uöt8
 
ˇ∑bûôyInf‹m©i⁄
;

597 
macSec_t
 
£c
;

598 } 
	tmacMlmeAssocüãInd_t
;

603 
macEvítHdr_t
 
hdr
;

604 
uöt16
 
assocSh‹tAddªss
;

605 
macSec_t
 
£c
;

606 } 
	tmacMlmeAssocüãCnf_t
;

611 
macEvítHdr_t
 
hdr
;

612 
sAddrExt_t
 
devi˚Addªss
;

613 
uöt8
 
dißssocüãRós⁄
;

614 
macSec_t
 
£c
;

615 } 
	tmacMlmeDißssocüãInd_t
;

620 
macEvítHdr_t
 
hdr
;

621 
sAddr_t
 
devi˚Addªss
;

623 
uöt16
 
∑nId
;

625 } 
	tmacMlmeDißssocüãCnf_t
;

630 
macEvítHdr_t
 
hdr
;

631 
uöt8
 
b¢
;

632 
macP™Desc_t
 *
pP™Desc
;

633 
uöt8
 
≥ndAddrS≥c
;

634 
uöt8
 *
pAddrLi°
;

635 
uöt8
 
sduLígth
;

636 
uöt8
 *
pSdu
;

637 } 
	tmacMlmeBóc⁄NŸifyInd_t
;

642 
macEvítHdr_t
 
hdr
;

643 
sAddrExt_t
 
‹ph™Addªss
;

644 
macSec_t
 
£c
;

645 } 
	tmacMlmeOΩh™Ind_t
;

650 
macEvítHdr_t
 
hdr
;

651 
uöt8
 
sˇnTy≥
;

652 
uöt8
 
ch™√lPage
;

653 
uöt32
 
unsˇ¬edCh™√ls
;

654 
uöt8
 
ªsu…Li°Size
;

657 
uöt8
 *
pE√rgyDëe˘
;

658 
macP™Desc_t
 *
pP™Des¸ùt‹
;

659 } 
ªsu…
;

660 } 
	tmacMlmeSˇnCnf_t
;

665 
macEvítHdr_t
 
hdr
;

666 } 
	tmacMlmeSèπCnf_t
;

671 
macEvítHdr_t
 
hdr
;

672 
uöt16
 
∑nId
;

673 
uöt8
 
logiˇlCh™√l
;

674 
uöt8
 
ch™√lPage
;

675 
macSec_t
 
£c
;

676 } 
	tmacMlmeSyncLossInd_t
;

681 
macEvítHdr_t
 
hdr
;

682 } 
	tmacMlmePﬁlCnf_t
;

687 
macEvítHdr_t
 
hdr
;

688 
sAddr_t
 
§cAddr
;

689 
sAddr_t
 
d°Addr
;

690 
uöt16
 
∑nId
;

691 
uöt8
 
ªas⁄
;

692 
macSec_t
 
£c
;

693 } 
	tmacMlmeCommSètusInd_t
;

698 
macEvítHdr_t
 
hdr
;

699 
uöt16
 
§cSh‹tAddr
;

700 
uöt16
 
§cP™Id
;

701 } 
	tmacMlmePﬁlInd_t
;

706 
macEvítHdr_t
 
hdr
;

707 
macMlmeAssocüãInd_t
 
assocüãInd
;

708 
macMlmeAssocüãCnf_t
 
assocüãCnf
;

709 
macMlmeDißssocüãInd_t
 
dißssocüãInd
;

710 
macMlmeDißssocüãCnf_t
 
dißssocüãCnf
;

711 
macMlmeBóc⁄NŸifyInd_t
 
bóc⁄NŸifyInd
;

712 
macMlmeOΩh™Ind_t
 
‹ph™Ind
;

713 
macMlmeSˇnCnf_t
 
sˇnCnf
;

714 
macMlmeSèπCnf_t
 
°¨tCnf
;

715 
macMlmeSyncLossInd_t
 
syncLossInd
;

716 
macMlmePﬁlCnf_t
 
pﬁlCnf
;

717 
macMlmeCommSètusInd_t
 
commSètusInd
;

718 
macMlmePﬁlInd_t
 
pﬁlInd
;

719 
macM˝sD©aCnf_t
 
d©aCnf
;

720 
macM˝sD©aInd_t
 
d©aInd
;

721 
macM˝sPurgeCnf_t
 
purgeCnf
;

722 } 
	tmacCbackEvít_t
;

727 
uöt8
 
txD©aMax
;

728 
uöt8
 
txMax
;

729 
uöt8
 
rxMax
;

730 
uöt8
 
d©aIndOff£t
;

732 
boﬁ
 
≠pPídögQueue
;

734 } 
	tmacCfg_t
;

745 
macTaskInô
(
uöt8
 
èskId
);

746 
uöt16
 
macEvítLo›
(
uöt8
 
èskId
, uöt16 
evíts
);

772 
MAC_Inô
();

794 
MAC_InôDevi˚
();

819 
MAC_InôCo‹d
();

840 
MAC_InôSecurôy
();

861 
MAC_InôBóc⁄Co‹d
();

883 
MAC_InôBóc⁄Devi˚
();

902 
MAC_M˝sD©aReq
(
macM˝sD©aReq_t
 *
pD©a
);

922 
MAC_M˝sPurgeReq
(
uöt8
 
msduH™dÀ
);

945 
macM˝sD©aReq_t
 *
MAC_M˝sD©aAŒoc
(
uöt8
 
Àn
, uöt8 
£curôyLevñ
, uöt8 
keyIdMode
);

971 
MAC_MlmeAssocüãReq
(
macMlmeAssocüãReq_t
 *
pD©a
);

993 
MAC_MlmeAssocüãR•
(
macMlmeAssocüãR•_t
 *
pD©a
);

1015 
MAC_MlmeDißssocüãReq
(
macMlmeDißssocüãReq_t
 *
pD©a
);

1038 
uöt8
 
MAC_MlmeGëReq
(uöt8 
pibAâribuã
, *
pVÆue
);

1060 
MAC_MlmeOΩh™R•
(
macMlmeOΩh™R•_t
 *
pD©a
);

1083 
MAC_MlmePﬁlReq
(
macMlmePﬁlReq_t
 *
pD©a
);

1105 
uöt8
 
MAC_MlmeRe£tReq
(
boﬁ
 
£tDeÁu…Pib
);

1131 
MAC_MlmeSˇnReq
(
macMlmeSˇnReq_t
 *
pD©a
);

1154 
uöt8
 
MAC_MlmeSëReq
(uöt8 
pibAâribuã
, *
pVÆue
);

1178 
MAC_MlmeSèπReq
(
macMlmeSèπReq_t
 *
pD©a
);

1202 
MAC_MlmeSyncReq
(
macMlmeSyncReq_t
 *
pD©a
);

1229 
uöt8
 
MAC_PwrOffReq
(uöt8 
mode
);

1249 
MAC_PwrOnReq
();

1267 
uöt8
 
MAC_PwrMode
();

1286 
uöt32
 
MAC_PwrNextTimeout
();

1304 
uöt8
 
MAC_R™domByã
();

1322 
uöt8
 
MAC_SrcM©chE«bÀ
 ( uöt8 
addrTy≥
, uöt8 
num
 );

1342 
uöt8
 
MAC_SrcM©chAddE¡ry
 ( 
sAddr_t
 *
addr
, 
uöt16
 
∑nID
 );

1361 
uöt8
 
MAC_SrcM©chDñëeE¡ry
 ( 
sAddr_t
 *
addr
, 
uöt16
 
∑nID
 );

1379 
MAC_SrcM©chAckAŒPídög
 ( 
uöt8
 
›ti⁄
 );

1393 
uöt8
 
MAC_SrcM©chCheckAŒPídög
 ( );

1418 
MAC_CbackEvít
(
macCbackEvít_t
 *
pD©a
);

1440 
uöt8
 
MAC_CbackCheckPídög
();

1446 #ifde‡
__˝lu•lus


	@Components/mac/low_level/srf04/mac_assert.h

40 #i‚de‡
MAC_ASSERT_H


41 
	#MAC_ASSERT_H


	)

47 
	~"hÆ_as£π.h
"

73 #ifde‡
MACNODEBUG


74 
	#MAC_ASSERT
(
ex¥
)

	)

75 
	#MAC_ASSERT_FORCED
()

	)

76 
	#MAC_ASSERT_STATEMENT
(
°©emít
)

	)

77 
	#MAC_ASSERT_DECLARATION
(
de˛¨©i⁄
)

	)

79 
	#MAC_ASSERT
(
ex¥
Ë
	`HAL_ASSERT
–ex¥ )

	)

80 
	#MAC_ASSERT_FORCED
(Ë
	`HAL_ASSERT_FORCED
()

	)

81 
	#MAC_ASSERT_STATEMENT
(
°©emít
Ë
	`HAL_ASSERT_STATEMENT
–°©emíà)

	)

82 
	#MAC_ASSERT_DECLARATION
(
de˛¨©i⁄
Ë
	`HAL_ASSERT_DECLARATION
–de˛¨©i⁄ )

	)

	@Components/mac/low_level/srf04/mac_autopend.c

41 
	~"mac_≠i.h
"

42 
	~"mac_ødio_defs.h
"

45 
	~"OSAL.h
"

46 
	~"ßddr.h
"

47 
	~"ZComDef.h
"

49 
	~"mac_aut›íd.h
"

55 
	#MAC_SRCMATCH_INVALID_INDEX
 0xFF

	)

57 
	#MAC_SRCMATCH_SHORT_ENTRY_SIZE
 4

	)

58 
	#MAC_SRCMATCH_EXT_ENTRY_SIZE
 
Z_EXTADDR_LEN


	)

60 
	#MAC_SRCMATCH_SHORT_MAX_NUM_ENTRIES
 24

	)

61 
	#MAC_SRCMATCH_EXT_MAX_NUM_ENTRIES
 12

	)

63 
	#MAC_SRCMATCH_ENABLE_BITMAP_LEN
 3

	)

70 
boﬁ
 
	gmacSrcM©chIsE«bÀd
 = 
FALSE
;

82 
uöt8
 
	gmacSrcM©chMaxNumE¡rõs
 = 0;

83 
uöt8
 
	gmacSrcM©chAddrMode
 = 
SADDR_MODE_SHORT
;

84 
boﬁ
 
	gmacSrcM©chIsAckAŒPídög
 = 
FALSE
;

90 
uöt8
 
macSrcM©chFödEm±yE¡ry
( );

91 
uöt8
 
macSrcM©chCheckSrcAddr
 ( 
sAddr_t
 *
addr
, 
uöt16
 
∑nID
 );

92 
macSrcM©chSëPídEnBô
–
uöt8
 
ödex
 );

93 
macSrcM©chSëE«bÀBô
–
uöt8
 
ödex
, 
boﬁ
 
›ti⁄
 );

94 
boﬁ
 
macSrcM©chCheckE«bÀBô
–
uöt8
 
ödex
 );

95 
uöt24
 
macSrcM©chGëE«bÀBô
( );

96 
uöt24
 
macSrcM©chGëPídEnBô
( );

115 
uöt8
 
	$MAC_SrcM©chE«bÀ
 ( 
uöt8
 
addrTy≥
, uöt8 
num
 )

117 
uöt8
 
πn
;

118 
uöt8
 
maxNum
;

121 if–
addrTy≥
 !
SADDR_MODE_SHORT
 &&áddrTy≥ !
SADDR_MODE_EXT
 )

123  
MAC_INVALID_PARAMETER
;

126 
maxNum
 = ( 
addrTy≥
 =
SADDR_MODE_SHORT
 ) ?

127 
MAC_SRCMATCH_SHORT_MAX_NUM_ENTRIES
 : 
MAC_SRCMATCH_EXT_MAX_NUM_ENTRIES
;

129 if–
num
 > 
maxNum
 )

131 
πn
 = 
MAC_INVALID_PARAMETER
;

132 
num
 = 
maxNum
;

136 
πn
 = 
MAC_SUCCESS
;

140 
	`MAC_RADIO_TURN_ON_RX_FRAME_FILTERING
();

143 
	`MAC_RADIO_TURN_ON_AUTO_ACK
();

146 
	`MAC_RADIO_TURN_ON_SRC_MATCH
();

149 
	`MAC_RADIO_TURN_ON_AUTOPEND
();

152 
macSrcM©chIsE«bÀd
 = 
TRUE
;

153 
macSrcM©chMaxNumE¡rõs
 = 
num
;

154 
macSrcM©chAddrMode
 = 
addrTy≥
;

156  
πn
;

157 
	}
}

175 
uöt8
 
	$MAC_SrcM©chAddE¡ry
 ( 
sAddr_t
 *
addr
, 
uöt16
 
∑nID
 )

177 
uöt8
 
ödex
;

178 
uöt8
 
íåy
[
MAC_SRCMATCH_SHORT_ENTRY_SIZE
];

181 i‡–
addr
 =
NULL
 ||áddr->
addrMode
 !
macSrcM©chAddrMode
 )

183  
MAC_INVALID_PARAMETER
;

187 i‡–
	`macSrcM©chCheckSrcAddr
–
addr
, 
∑nID
 ) !
MAC_SRCMATCH_INVALID_INDEX
 )

189  
MAC_DUPLICATED_ENTRY
;

195 
ödex
 = 
	`macSrcM©chFödEm±yE¡ry
();

196 i‡–
ödex
 =
macSrcM©chMaxNumE¡rõs
 )

198  
MAC_NO_RESOURCES
;

201 i‡–
macSrcM©chAddrMode
 =
SADDR_MODE_SHORT
 )

204 
íåy
[0] = 
	`LO_UINT16
–
∑nID
 );

205 
íåy
[1] = 
	`HI_UINT16
–
∑nID
 );

206 
íåy
[2] = 
	`LO_UINT16
–
addr
->addr.
sh‹tAddr
 );

207 
íåy
[3] = 
	`HI_UINT16
–
addr
->addr.
sh‹tAddr
 );

208 
	`MAC_RADIO_SRC_MATCH_TABLE_WRITE
––
ödex
 * 
MAC_SRCMATCH_SHORT_ENTRY_SIZE
 ),

209 
íåy
, 
MAC_SRCMATCH_SHORT_ENTRY_SIZE
 );

214 
	`MAC_RADIO_SRC_MATCH_TABLE_WRITE
––
ödex
 * 
MAC_SRCMATCH_EXT_ENTRY_SIZE
 ),

215 
addr
->addr.
extAddr
, 
MAC_SRCMATCH_EXT_ENTRY_SIZE
 );

219 
	`macSrcM©chSëPídEnBô
–
ödex
 );

222 
	`macSrcM©chSëE«bÀBô
–
ödex
, 
TRUE
 );

224  
MAC_SUCCESS
;

226 
	}
}

243 
uöt8
 
	$MAC_SrcM©chDñëeE¡ry
 ( 
sAddr_t
 *
addr
, 
uöt16
 
∑nID
 )

245 
uöt8
 
ödex
;

247 i‡–
addr
 =
NULL
 ||áddr->
addrMode
 !
macSrcM©chAddrMode
 )

249  
MAC_INVALID_PARAMETER
;

253 
ödex
 = 
	`macSrcM©chCheckSrcAddr
–
addr
, 
∑nID
 );

255 if–
ödex
 =
MAC_SRCMATCH_INVALID_INDEX
 )

257  
MAC_INVALID_PARAMETER
;

261 
	`macSrcM©chSëE«bÀBô
–
ödex
, 
FALSE
 );

263  
MAC_SUCCESS
;

264 
	}
}

281 
	$MAC_SrcM©chAckAŒPídög
 ( 
uöt8
 
›ti⁄
 )

283 if–
›ti⁄
 =
TRUE
 )

285 
macSrcM©chIsAckAŒPídög
 = 
TRUE
;

288 
	`MAC_RADIO_TURN_ON_PENDING_OR
();

292 
macSrcM©chIsAckAŒPídög
 = 
FALSE
;

295 
	`MAC_RADIO_TURN_OFF_PENDING_OR
();

297 
	}
}

309 
uöt8
 
	$MAC_SrcM©chCheckAŒPídög
 ( )

311 if–
macSrcM©chIsAckAŒPídög
 =
TRUE
 )

313  
MAC_AUTOACK_PENDING_ALL_ON
;

316  
MAC_AUTOACK_PENDING_ALL_OFF
;

317 
	}
}

328 
boﬁ
 
	$MAC_SrcM©chCheckResu…
( )

330 
uöt8
 
ªsIndex
;

332 i‡–
macSrcM©chIsAckAŒPídög
 )

334  (
TRUE
);

337 
	`MAC_RADIO_SRC_MATCH_RESINDEX
–
ªsIndex
 );

339  ( 
ªsIndex
 & 
AUTOPEND_RES
 );

340 
	}
}

351 
uöt8
 
	$macSrcM©chFödEm±yE¡ry
( )

353 
uöt8
 
ödex
;

354 
uöt24
 
íabÀ
;

356 
íabÀ
 = 
	`MAC_RADIO_SRC_MATCH_GET_EN
();

358 if–
macSrcM©chAddrMode
 =
SADDR_MODE_SHORT
 )

360  
ödex
 = 0; index < 
macSrcM©chMaxNumE¡rõs
; index++ )

362 if––
íabÀ
 & ( 0x01 << 
ödex
 ) ) == 0 )

364  
ödex
;

370  
ödex
 = 0; index < 
macSrcM©chMaxNumE¡rõs
; index++ )

372 if––
íabÀ
 & ( 0x01 << ( 
ödex
 * 2 ) ) ) == 0 )

374  
ödex
;

383  
ödex
;

384 
	}
}

401 
uöt8
 
	$macSrcM©chCheckSrcAddr
 ( 
sAddr_t
 *
addr
, 
uöt16
 
∑nID
 )

404 
uöt8
 
ödex
;

405 
uöt8
 *
pAddr
;

406 
uöt8
 
íåySize
;

407 
uöt8
 
íåy
[
MAC_SRCMATCH_SHORT_ENTRY_SIZE
];

408 
uöt8
 
ømE¡ry
[
MAC_SRCMATCH_EXT_ENTRY_SIZE
];

414 if–
macSrcM©chAddrMode
 =
SADDR_MODE_SHORT
 )

416 
íåy
[0] = 
	`LO_UINT16
–
∑nID
 );

417 
íåy
[1] = 
	`HI_UINT16
–
∑nID
 );

418 
íåy
[2] = 
	`LO_UINT16
–
addr
->addr.
sh‹tAddr
 );

419 
íåy
[3] = 
	`HI_UINT16
–
addr
->addr.
sh‹tAddr
 );

420 
pAddr
 = 
íåy
;

421 
íåySize
 = 
MAC_SRCMATCH_SHORT_ENTRY_SIZE
;

425 
pAddr
 = 
addr
->addr.
extAddr
;

426 
íåySize
 = 
MAC_SRCMATCH_EXT_ENTRY_SIZE
;

429  
ödex
 = 0; index < 
macSrcM©chMaxNumE¡rõs
; index++ )

432 if–
	`macSrcM©chCheckE«bÀBô
–
ödex
 ) =
FALSE
 )

438 
	`MAC_RADIO_SRC_MATCH_TABLE_READ
––
ödex
 * 
íåySize
 ), 
ømE¡ry
,ÉntrySize );

440 if–
	`oßl_memcmp
–
pAddr
, 
ømE¡ry
, 
íåySize
 ) =
TRUE
 )

443  
ödex
;

447  
MAC_SRCMATCH_INVALID_INDEX
;

448 
	}
}

460 
	$macSrcM©chSëPídEnBô
–
uöt8
 
ödex
 )

462 
uöt24
 
íabÀ
;

463 
uöt8
 
buf
[
MAC_SRCMATCH_ENABLE_BITMAP_LEN
];

465 
íabÀ
 = 
	`MAC_RADIO_SRC_MATCH_GET_PENDEN
();

467 if–
macSrcM©chAddrMode
 =
SADDR_MODE_SHORT
 )

469 
íabÀ
 |–0x01 << 
ödex
 );

470 
	`oßl_buf„r_uöt24
–
buf
, 
íabÀ
 );

471 
	`MAC_RADIO_SRC_MATCH_SET_SHORTPENDEN
–
buf
 );

475 
íabÀ
 |–0x01 << ( 
ödex
 * 2 ) );

476 
	`oßl_buf„r_uöt24
–
buf
, 
íabÀ
 );

477 
	`MAC_RADIO_SRC_MATCH_SET_EXTPENDEN
–
buf
 );

479 
	}
}

491 
	$macSrcM©chSëE«bÀBô
–
uöt8
 
ödex
, 
boﬁ
 
›ti⁄
 )

493 
uöt24
 
íabÀ
;

495 
íabÀ
 = 
	`MAC_RADIO_SRC_MATCH_GET_EN
();

497 if–
›ti⁄
 =
TRUE
 )

499 if–
macSrcM©chAddrMode
 =
SADDR_MODE_SHORT
 )

501 
íabÀ
 |–0x01 << 
ödex
 );

502 
	`MAC_RADIO_SRC_MATCH_SET_SHORTEN
–
íabÀ
 );

506 
íabÀ
 |–0x01 << ( 
ödex
 * 2 ) );

507 
	`MAC_RADIO_SRC_MATCH_SET_EXTEN
–
íabÀ
 );

512 if–
macSrcM©chAddrMode
 =
SADDR_MODE_SHORT
 )

514 
íabÀ
 &~–0x01 << 
ödex
 );

515 
	`MAC_RADIO_SRC_MATCH_SET_SHORTEN
–
íabÀ
 );

519 
íabÀ
 &~–0x01 << ( 
ödex
 * 2 ) );

520 
	`MAC_RADIO_SRC_MATCH_SET_EXTEN
–
íabÀ
 );

524 
	}
}

535 
boﬁ
 
	$macSrcM©chCheckE«bÀBô
–
uöt8
 
ödex
 )

537 
uöt24
 
íabÀ
;

539 if–
macSrcM©chAddrMode
 =
SADDR_MODE_EXT
 )

541 
ödex
 *= 2;

544 
íabÀ
 = 
	`MAC_RADIO_SRC_MATCH_GET_EN
();

546 if–
íabÀ
 & ( 0x01 << 
ödex
 ) )

548  
TRUE
;

551  
FALSE
;

552 
	}
}

564 
uöt24
 
	$macSrcM©chGëE«bÀBô
( )

566 
uöt8
 
buf
[
MAC_SRCMATCH_ENABLE_BITMAP_LEN
];

568 if–
macSrcM©chAddrMode
 =
SADDR_MODE_SHORT
 )

570 
	`MAC_RADIO_GET_SRC_SHORTEN
–
buf
 );

574 
	`MAC_RADIO_GET_SRC_EXTEN
–
buf
 );

577  
	`oßl_buûd_uöt32
–
buf
, 
MAC_SRCMATCH_ENABLE_BITMAP_LEN
 );

579 
	}
}

591 
uöt24
 
	$macSrcM©chGëPídEnBô
( )

593 
uöt8
 
buf
[
MAC_SRCMATCH_ENABLE_BITMAP_LEN
];

595 if–
macSrcM©chAddrMode
 =
SADDR_MODE_SHORT
 )

597 
	`MAC_RADIO_GET_SRC_SHORTPENDEN
–
buf
 );

601 
	`MAC_RADIO_GET_SRC_EXTENPEND
–
buf
 );

604  
	`oßl_buûd_uöt32
–
buf
, 
MAC_SRCMATCH_ENABLE_BITMAP_LEN
 );

605 
	}
}

	@Components/mac/low_level/srf04/mac_autopend.h

40 #i‚de‡
MAC_AUTOPEND_H


41 
	#MAC_AUTOPEND_H


	)

52 
boﬁ
 
macSrcM©chIsE«bÀd
;

58 
boﬁ
 
MAC_SrcM©chCheckResu…
();

	@Components/mac/low_level/srf04/mac_backoff_timer.c

46 
	~"hÆ_ty≥s.h
"

47 
	~"hÆ_mcu.h
"

50 
	~"mac_•ec.h
"

53 
	~"mac_low_Àvñ.h
"

56 
	~"mac_backoff_timî.h
"

57 
	~"mac_tx.h
"

60 
	~"mac_ødio_defs.h
"

63 
	~"mac_as£π.h
"

70 
	#COMPARE_STATE_ROLLOVER_BV
 
	`BV
(0)

	)

71 
	#COMPARE_STATE_TRIGGER_BV
 
	`BV
(1)

	)

72 
	#COMPARE_STATE_ARM_BV
 
	`BV
(2)

	)

74 
	#COMPARE_STATE_TRIGGER
 
COMPARE_STATE_TRIGGER_BV


	)

75 
	#COMPARE_STATE_ROLLOVER
 
COMPARE_STATE_ROLLOVER_BV


	)

76 
	#COMPARE_STATE_ROLLOVER_AND_TRIGGER
 (
COMPARE_STATE_ROLLOVER_BV
 | 
COMPARE_STATE_TRIGGER_BV
)

	)

77 
	#COMPARE_STATE_ROLLOVER_AND_ARM_TRIGGER
 (
COMPARE_STATE_ROLLOVER_BV
 | 
COMPARE_STATE_ARM_BV
)

	)

85 
	#RX_TX_PROP_DELAY_AVG_USEC
 ((
MAC_RADIO_RX_TX_PROP_DELAY_MIN_USEC
 + 
MAC_RADIO_RX_TX_PROP_DELAY_MAX_USEC
Ë/ 2)

	)

86 
	#RX_TX_PROP_DELAY_AVG_TIMER_TICKS
 ((
uöt16
)(
	`MAC_RADIO_TIMER_TICKS_PER_USEC
(Ë* 
RX_TX_PROP_DELAY_AVG_USEC
 + 0.5))

	)

104 
	#SYMBOLS_FROM_STROBE_TO_PREAMBLE
 12

	)

105 
	#SYMBOLS_FROM_PREAMBLE_TO_SFD
 (
MAC_SPEC_PREAMBLE_FIELD_LENGTH
 + 
MAC_SPEC_SFD_FIELD_LENGTH
)

	)

106 
	#SYMBOLS_FROM_STROBE_TO_SFD
 (
SYMBOLS_FROM_STROBE_TO_PREAMBLE
 + 
SYMBOLS_FROM_PREAMBLE_TO_SFD
)

	)

107 
	#SYMBOLS_EXPECTED_AT_SFD
 (
SYMBOLS_FROM_STROBE_TO_SFD
 % 
MAC_A_UNIT_BACKOFF_PERIOD
)

	)

110 #i‡(
SYMBOLS_EXPECTED_AT_SFD
 != 2)

123 
	#TIMER_TICKS_EXPECTED_AT_SFD
 ((
SYMBOLS_EXPECTED_AT_SFD
 * 
	`MAC_RADIO_TIMER_TICKS_PER_SYMBOL
()Ë\

	)

124 + 
	gRX_TX_PROP_DELAY_AVG_TIMER_TICKS
)

131 
uöt32
 
	gbackoffTimîRﬁlovî
;

132 
uöt32
 
	gbackoffTimîTriggî
;

133 
uöt8
 
	gcom∑ªSèã
;

146 
	$macBackoffTimîInô
()

148 
com∑ªSèã
 = 
COMPARE_STATE_ROLLOVER
;

149 
	`MAC_RADIO_BACKOFF_SET_COUNT
(0);

150 
	`macBackoffTimîSëRﬁlovî
(
MAC_BACKOFF_TIMER_DEFAULT_ROLLOVER
);

151 
	`MAC_RADIO_BACKOFF_COMPARE_CLEAR_INTERRUPT
();

152 
	`MAC_RADIO_BACKOFF_COMPARE_ENABLE_INTERRUPT
();

153 
	}
}

166 
	$macBackoffTimîRe£t
()

168 
	`MAC_RADIO_BACKOFF_COMPARE_DISABLE_INTERRUPT
();

169 
	`macBackoffTimîInô
();

170 
	}
}

183 
	$macBackoffTimîSëRﬁlovî
(
uöt32
 
rﬁlovîBackoff
)

185 
hÆI¡Sèã_t
 
s
;

187 
	`MAC_ASSERT
(
rﬁlovîBackoff
 > 
	`MAC_RADIO_BACKOFF_COUNT
());

189 
	`HAL_ENTER_CRITICAL_SECTION
(
s
);

190 
backoffTimîRﬁlovî
 = 
rﬁlovîBackoff
;

191 
	`MAC_RADIO_BACKOFF_SET_COMPARE
(
rﬁlovîBackoff
);

192 
	`HAL_EXIT_CRITICAL_SECTION
(
s
);

193 
	}
}

206 
	$macBackoffTimîSëCou¡
(
uöt32
 
backoff
)

208 
hÆI¡Sèã_t
 
s
;

210 
	`MAC_ASSERT
(
com∑ªSèã
 =
COMPARE_STATE_ROLLOVER
);

211 
	`MAC_ASSERT
(
backoff
 < 
backoffTimîRﬁlovî
);

212 
	`MAC_ASSERT
(!(
backoff
 & 0x80000000));

214 
	`HAL_ENTER_CRITICAL_SECTION
(
s
);

215 
	`MAC_RADIO_BACKOFF_SET_COUNT
(
backoff
);

216 
	`HAL_EXIT_CRITICAL_SECTION
(
s
);

217 
	}
}

230 
uöt32
 
	$macBackoffTimîCou¡
()

232 
hÆI¡Sèã_t
 
s
;

233 
uöt32
 
backoffCou¡
;

235 
	`HAL_ENTER_CRITICAL_SECTION
(
s
);

236 
backoffCou¡
 = 
	`MAC_RADIO_BACKOFF_COUNT
();

237 
	`HAL_EXIT_CRITICAL_SECTION
(
s
);

239 #ifde‡
MAC_RADIO_FEATURE_HARDWARE_OVERFLOW_NO_ROLLOVER


257 i‡(
backoffCou¡
 >
backoffTimîRﬁlovî
)

263 (
backoffCou¡
);

264 
	}
}

277 
uöt32
 
	$macBackoffTimîC≠tuª
()

279 
hÆI¡Sèã_t
 
s
;

280 
uöt32
 
backoffC≠tuª
;

282 
	`HAL_ENTER_CRITICAL_SECTION
(
s
);

283 
backoffC≠tuª
 = 
	`MAC_RADIO_BACKOFF_CAPTURE
();

284 
	`HAL_EXIT_CRITICAL_SECTION
(
s
);

286 #ifde‡
MAC_RADIO_FEATURE_HARDWARE_OVERFLOW_NO_ROLLOVER


291 i‡(
backoffC≠tuª
 >
backoffTimîRﬁlovî
)

297 (
backoffC≠tuª
);

298 
	}
}

311 
uöt32
 
	$macBackoffTimîGëTriggî
()

313 (
backoffTimîTriggî
);

314 
	}
}

328 
	$macBackoffTimîSëTriggî
(
uöt32
 
åiggîBackoff
)

330 
hÆI¡Sèã_t
 
s
;

332 
	`MAC_ASSERT
(
åiggîBackoff
 < 
backoffTimîRﬁlovî
);

334 
	`HAL_ENTER_CRITICAL_SECTION
(
s
);

335 
backoffTimîTriggî
 = 
åiggîBackoff
;

336 i‡(
åiggîBackoff
 > 
	`MAC_RADIO_BACKOFF_COUNT
())

338 
com∑ªSèã
 = 
COMPARE_STATE_TRIGGER
;

339 
	`MAC_RADIO_BACKOFF_SET_COMPARE
(
åiggîBackoff
);

343 i‡(
åiggîBackoff
 == 0)

345 
com∑ªSèã
 = 
COMPARE_STATE_ROLLOVER_AND_TRIGGER
;

349 
com∑ªSèã
 = 
COMPARE_STATE_ROLLOVER_AND_ARM_TRIGGER
;

351 
	`MAC_RADIO_BACKOFF_SET_COMPARE
(
backoffTimîRﬁlovî
);

353 
	`HAL_EXIT_CRITICAL_SECTION
(
s
);

354 
	}
}

367 
	$macBackoffTimîC™˚lTriggî
()

369 
hÆI¡Sèã_t
 
s
;

371 
	`HAL_ENTER_CRITICAL_SECTION
(
s
);

372 
com∑ªSèã
 = 
COMPARE_STATE_ROLLOVER
;

373 
	`MAC_RADIO_BACKOFF_SET_COMPARE
(
backoffTimîRﬁlovî
);

374 
	`HAL_EXIT_CRITICAL_SECTION
(
s
);

375 
	}
}

396 
öt32
 
	$macBackoffTimîRólign
(
macRx_t
 *
pMsg
)

398 
uöt16
 
timîDñayTicks
;

399 
öt32
 
backoffDñè
;

400 
öt32
 
backoffCou¡
;

402 
	`MAC_ASSERT
(!
	`MAC_TX_IS_PHYSICALLY_ACTIVE
());

410 
backoffDñè
 = 
pMsg
->
mac
.
time°amp
;

413 i‡(((
uöt32
Ë
backoffDñè
Ë> (
backoffTimîRﬁlovî
 / 2))

415 
backoffDñè
 = backoffDñè - 
backoffTimîRﬁlovî
;

424 
timîDñayTicks
 = 
pMsg
->
mac
.
time°amp2
;

431 i‡(
timîDñayTicks
 >
TIMER_TICKS_EXPECTED_AT_SFD
)

434 
timîDñayTicks
 =ÅimîDñayTick†- 
TIMER_TICKS_EXPECTED_AT_SFD
;

443 
timîDñayTicks
 =ÅimîDñayTick†- 
TIMER_TICKS_EXPECTED_AT_SFD
 + 
	`MAC_RADIO_TIMER_TICKS_PER_BACKOFF
();

444 
backoffDñè
--;

451 
backoffCou¡
 = 
	`MAC_RADIO_BACKOFF_COUNT
(Ë- 
backoffDñè
;

453 i‡(
backoffCou¡
 >((
öt32
Ë
backoffTimîRﬁlovî
))

455 
backoffCou¡
 -
backoffTimîRﬁlovî
;

457 i‡(
backoffCou¡
 < 0)

459 
backoffCou¡
 +
backoffTimîRﬁlovî
;

462 
	`MAC_RADIO_TIMER_FORCE_DELAY
(
timîDñayTicks
);

463 
	`MAC_RADIO_BACKOFF_SET_COUNT
(
backoffCou¡
);

465 (
backoffDñè
);

466 
	}
}

480 
	$macBackoffTimîCom∑ªI§
()

482 
uöt8
 
ﬁdSèã
;

483 
hÆI¡Sèã_t
 
s
;

485 
	`HAL_ENTER_CRITICAL_SECTION
(
s
);

486 
ﬁdSèã
 = 
com∑ªSèã
;

489 i‡(
ﬁdSèã
 & 
COMPARE_STATE_ROLLOVER_BV
)

491 
	`MAC_RADIO_BACKOFF_SET_COUNT
(0);

492 
	`macBackoffTimîRﬁlovîCÆlback
();

496 i‡(
ﬁdSèã
 & 
COMPARE_STATE_TRIGGER_BV
)

498 
com∑ªSèã
 = 
COMPARE_STATE_ROLLOVER
;

499 
	`MAC_RADIO_BACKOFF_SET_COMPARE
(
backoffTimîRﬁlovî
);

500 
	`HAL_EXIT_CRITICAL_SECTION
(
s
);

501 
	`macBackoffTimîTriggîCÆlback
();

503 i‡(
ﬁdSèã
 =
COMPARE_STATE_ROLLOVER_AND_ARM_TRIGGER
)

505 
com∑ªSèã
 = 
COMPARE_STATE_TRIGGER
;

506 
	`MAC_RADIO_BACKOFF_SET_COMPARE
(
backoffTimîTriggî
);

507 
	`HAL_EXIT_CRITICAL_SECTION
(
s
);

511 
	`HAL_EXIT_CRITICAL_SECTION
(
s
);

513 
	}
}

	@Components/mac/low_level/srf04/mac_backoff_timer.h

40 #i‚de‡
MAC_BACKOFF_TIMER_H


41 
	#MAC_BACKOFF_TIMER_H


	)

47 
macBackoffTimîInô
();

48 
macBackoffTimîRe£t
();

49 
uöt32
 
macBackoffTimîC≠tuª
();

50 
macBackoffTimîCom∑ªI§
();

	@Components/mac/low_level/srf04/mac_low_level.c

46 
	~"hÆ_ty≥s.h
"

47 
	~"hÆ_mcu.h
"

50 
	~"mac_low_Àvñ.h
"

53 
	~"mac_ødio.h
"

54 
	~"mac_rx.h
"

55 
	~"mac_tx.h
"

56 
	~"mac_rx_⁄off.h
"

57 
	~"mac_backoff_timî.h
"

58 
	~"mac_¶ìp.h
"

61 
	~"mac_ødio_defs.h
"

64 
	~"mac_as£π.h
"

66 #i‡!
deföed
 ( 
HAL_CLOCK_CRYSTAL
 )

68 c⁄° 
uöt16
 
CODE
 
	gmacBóc⁄M¨göDCO
[] =

99 
	$macLowLevñInô
()

102 
	`MAC_RADIO_MCU_INIT
();

105 #i‡!
	`deföed
 ( 
HAL_CLOCK_CRYSTAL
 )

107 
uöt8
 
i
;

109 
i
 = 0; i < (
macBóc⁄M¨göDCO
)/(macBeaconMarginDCO[0]); i++)

111 
macBóc⁄M¨gö
[
i
] = 
macBóc⁄M¨göDCO
[i];

117 
	`macRadioInô
();

118 
	`macRxOnOffInô
();

119 
	`macRxInô
();

120 
	`macTxInô
();

121 
	`macBackoffTimîInô
();

122 
	}
}

135 
	$macLowLevñRe£t
()

137 
	`MAC_ASSERT
(!
	`HAL_INTERRUPTS_ARE_ENABLED
());

140 i‡(
macSÀïSèã
 =
MAC_SLEEP_STATE_AWAKE
)

142 
	`macRxTxRe£t
();

143 
	`macRadioRe£t
();

147 
	`macBackoffTimîRe£t
();

150 
	`macSÀïWakeUp
();

151 
	}
}

	@Components/mac/low_level/srf04/mac_low_level.h

40 #i‚de‡
MAC_LOW_LEVEL_H


41 
	#MAC_LOW_LEVEL_H


	)

47 
	~"hÆ_ty≥s.h
"

48 
	~"mac_high_Àvñ.h
"

56 
	#MAC_LOW_LEVEL_SMARTRF04


	)

58 
	#MAC_BACKOFF_TIMER_DEFAULT_ROLLOVER
 (((
uöt32
Ë
MAC_A_BASE_SUPERFRAME_DURATION
Ë<< 14)

	)

61 
	#MAC_TX_TYPE_SLOTTED_CSMA
 0x00

	)

62 
	#MAC_TX_TYPE_UNSLOTTED_CSMA
 0x01

	)

63 
	#MAC_TX_TYPE_SLOTTED
 0x02

	)

66 
	#MAC_SLEEP_STATE_OSC_OFF
 0x01

	)

67 
	#MAC_SLEEP_STATE_RADIO_OFF
 0x02

	)

70 
	#MAC_PROMISCUOUS_MODE_OFF
 0x00

	)

71 
	#MAC_PROMISCUOUS_MODE_COMPLIANT
 0x01

	)

72 
	#MAC_PROMISCUOUS_MODE_WITH_BAD_CRC
 0x02

	)

79 
uöt8
 c⁄° 
macTxSlŸãdDñay
;

82 
uöt16
 
macBóc⁄M¨gö
[];

91 
macLowLevñInô
();

92 
macLowLevñRe£t
();

95 
macSÀïWakeUp
();

96 
uöt8
 
macSÀï
(uöt8 
¶ìpSèã
);

99 
uöt8
 
macRadioR™domByã
();

100 
macRadioSëP™Co‹dö©‹
(
uöt8
 
∑nCo‹dö©‹
);

101 
macRadioSëP™ID
(
uöt16
 
∑nID
);

102 
macRadioSëSh‹tAddr
(
uöt16
 
sh‹tAddr
);

103 
macRadioSëIEEEAddr
(
uöt8
 * 
pIEEEAddr
);

104 
macRadioSëTxPowî
(
uöt8
 
txPowî
);

105 
macRadioSëCh™√l
(
uöt8
 
ch™√l
);

106 
macRadioSèπSˇn
(
uöt8
 
sˇnTy≥
);

107 
macRadioSt›Sˇn
();

108 
macRadioE√rgyDëe˘Sèπ
();

109 
uöt8
 
macRadioE√rgyDëe˘St›
();

112 
macBackoffTimîSëRﬁlovî
(
uöt32
 
rﬁlovîBackoff
);

113 
macBackoffTimîSëCou¡
(
uöt32
 
backoff
);

114 
uöt32
 
macBackoffTimîCou¡
();

115 
uöt32
 
macBackoffTimîGëTriggî
();

116 
macBackoffTimîSëTriggî
(
uöt32
 
åiggîBackoff
);

117 
macBackoffTimîC™˚lTriggî
();

118 
macBackoffTimîTriggîCÆlback
();

119 
macBackoffTimîRﬁlovîCÆlback
();

120 
öt32
 
macBackoffTimîRólign
(
macRx_t
 *
pMsg
);

123 
macTxFøme
(
uöt8
 
txTy≥
);

124 
macTxFømeRëønsmô
();

125 
macTxCom∂ëeCÆlback
(
uöt8
 
°©us
);

128 
boﬁ
 
macRxCheckPídögCÆlback
();

129 
boﬁ
 
macRxCheckMACPídögCÆlback
();

130 
macRxCom∂ëeCÆlback
(
macRx_t
 * 
pMsg
);

131 
macRxPromiscuousMode
(
uöt8
 
mode
);

134 
macRxE«bÀ
(
uöt8
 
Êags
);

135 
macRxSo·E«bÀ
(
uöt8
 
Êags
);

136 
macRxDißbÀ
(
uöt8
 
Êags
);

137 
macRxH¨dDißbÀ
();

	@Components/mac/low_level/srf04/mac_radio.c

46 
	~"hÆ_ty≥s.h
"

49 
	~"mac_pib.h
"

52 
	~"mac_low_Àvñ.h
"

55 
	~"mac_ødio.h
"

56 
	~"mac_tx.h
"

57 
	~"mac_rx.h
"

58 
	~"mac_rx_⁄off.h
"

59 
	~"mac_¶ìp.h
"

60 
	~"mac_backoff_timî.h
"

63 
	~"mac_ødio_defs.h
"

66 
	~"mac_as£π.h
"

73 
	#ED_RF_POWER_MIN_DBM
 (
MAC_RADIO_RECEIVER_SENSITIVITY_DBM
 + 
MAC_SPEC_ED_MIN_DBM_ABOVE_RECEIVER_SENSITIVITY
)

	)

74 
	#ED_RF_POWER_MAX_DBM
 
MAC_RADIO_RECEIVER_SATURATION_DBM


	)

81 
uöt8
 
	gmacPhyTxPowî
;

82 
uöt8
 
	gmacPhyCh™√l
;

89 
uöt8
 
	gªqCh™√l
;

90 
uöt8
 
	gªqTxPowî
;

97 
uöt8
 
ødioCompuãED
(
öt8
 
rssiDbm
);

110 
	$macRadioInô
()

113 
ªqCh™√l
 = 
MAC_RADIO_CHANNEL_DEFAULT
;

114 
macPhyCh™√l
 = 
MAC_RADIO_CHANNEL_DEFAULT
;

115 
ªqTxPowî
 = 
MAC_RADIO_TX_POWER_DEFAULT
;

116 
macPhyTxPowî
 = 
MAC_RADIO_TX_POWER_DEFAULT
;

117 
	}
}

130 
	$macRadioRe£t
()

132 
	`macRadioSt›Sˇn
();

133 
	`macRadioE√rgyDëe˘St›
();

134 
	}
}

147 
uöt8
 
	$macRadioR™domByã
()

149 (
	`MAC_RADIO_RANDOM_BYTE
());

150 
	}
}

164 
	$macRadioSëP™Co‹dö©‹
(
uöt8
 
∑nCo‹dFœg
)

167 
	`MAC_RADIO_SET_PAN_COORDINATOR
(
∑nCo‹dFœg
);

168 
	}
}

181 
	$macRadioSëP™ID
(
uöt16
 
∑nID
)

184 
	`MAC_RADIO_SET_PAN_ID
(
∑nID
);

185 
	}
}

198 
	$macRadioSëSh‹tAddr
(
uöt16
 
sh‹tAddr
)

201 
	`MAC_RADIO_SET_SHORT_ADDR
(
sh‹tAddr
);

202 
	}
}

216 
	$macRadioSëIEEEAddr
(
uöt8
 * 
pIEEEAddr
)

219 
	`MAC_RADIO_SET_IEEE_ADDR
(
pIEEEAddr
);

220 
	}
}

235 #i‚de‡
HAL_MAC_USE_REGISTER_POWER_VALUES


238 
	$macRadioSëTxPowî
(
uöt8
 
txPowî
)

240 
hÆI¡Sèã_t
 
s
;

243 i‡(
txPowî
 > 
MAC_RADIO_TX_POWER_MAX_DBM
)

245 
txPowî
 = 
MAC_RADIO_TX_POWER_MAX_DBM
;

255 
	`HAL_ENTER_CRITICAL_SECTION
(
s
);

256 
ªqTxPowî
 = 
macRadioDefsTxPowîTabÀ
[
txPowî
];

257 
	`HAL_EXIT_CRITICAL_SECTION
(
s
);

260 
	`macRadioUpd©eTxPowî
();

261 
	}
}

266 
	$macRadioSëTxPowî
(
uöt8
 
txPowî
)

268 
hÆI¡Sèã_t
 
s
;

271 
	`HAL_ENTER_CRITICAL_SECTION
(
s
);

272 
ªqTxPowî
 = 
txPowî
;

273 
	`HAL_EXIT_CRITICAL_SECTION
(
s
);

276 
	`macRadioUpd©eTxPowî
();

277 
	}
}

293 
	$macRadioUpd©eTxPowî
()

295 
hÆI¡Sèã_t
 
s
;

301 
	`HAL_ENTER_CRITICAL_SECTION
(
s
);

302 i‡(
ªqTxPowî
 !
macPhyTxPowî
)

310 i‡(!
macRxOutgoögAckFœg
 && !
	`MAC_TX_IS_PHYSICALLY_ACTIVE
())

316 
macPhyTxPowî
 = 
ªqTxPowî
;

317 
	`MAC_RADIO_SET_TX_POWER
(
macPhyTxPowî
);

320 
	`HAL_EXIT_CRITICAL_SECTION
(
s
);

321 
	}
}

334 
	$macRadioSëCh™√l
(
uöt8
 
ch™√l
)

336 
hÆI¡Sèã_t
 
s
;

338 
	`MAC_ASSERT
((
ch™√l
 >= 11) && (channel <= 28));

341 
	`HAL_ENTER_CRITICAL_SECTION
(
s
);

344 
ªqCh™√l
 = 
ch™√l
;

350 i‡(!
macTxA˘ive
)

352 
	`macRadioUpd©eCh™√l
();

355 
	`HAL_EXIT_CRITICAL_SECTION
(
s
);

356 
	}
}

369 
	$macRadioUpd©eCh™√l
()

371 
hÆI¡Sèã_t
 
s
;

373 
	`MAC_ASSERT
(!
macTxA˘ive
);

376 
	`HAL_ENTER_CRITICAL_SECTION
(
s
);

377 i‡(
ªqCh™√l
 !
macPhyCh™√l
)

379 
macPhyCh™√l
 = 
ªqCh™√l
;

380 
	`HAL_EXIT_CRITICAL_SECTION
(
s
);

383 
	`macRxOff
();

384 
	`MAC_RADIO_SET_CHANNEL
(
macPhyCh™√l
);

389 
	`macRxHÆtCÀ™up
();

391 
	`macRxOnReque°
();

395 
	`HAL_EXIT_CRITICAL_SECTION
(
s
);

397 
	}
}

410 
	$macRadioSèπSˇn
(
uöt8
 
sˇnMode
)

412 
	`MAC_ASSERT
(
macSÀïSèã
 =
MAC_SLEEP_STATE_AWAKE
);

413 
	`MAC_ASSERT
(
macRxFûãr
 =
RX_FILTER_OFF
);

416 i‡(
sˇnMode
 =
MAC_SCAN_ED
)

418 
macRxFûãr
 = 
RX_FILTER_ALL
;

420 i‡(
sˇnMode
 =
MAC_SCAN_ORPHAN
)

422 
macRxFûãr
 = 
RX_FILTER_NON_COMMAND_FRAMES
;

426 
	`MAC_ASSERT
((
sˇnMode
 =
MAC_SCAN_ACTIVE
Ë|| (sˇnModê=
MAC_SCAN_PASSIVE
));

427 
macRxFûãr
 = 
RX_FILTER_NON_BEACON_FRAMES
;

430 
	`MAC_RADIO_SET_PAN_ID
(0xFFFF);

432 
	}
}

445 
	$macRadioSt›Sˇn
()

447 
macRxFûãr
 = 
RX_FILTER_OFF
;

450 
	`MAC_RADIO_SET_PAN_ID
(
macPib
.
∑nId
);

451 
	}
}

465 
	$macRadioE√rgyDëe˘Sèπ
()

467 
	`MAC_RADIO_RECORD_MAX_RSSI_START
();

468 
	}
}

482 
uöt8
 
	$macRadioE√rgyDëe˘St›
()

484 
uöt8
 
rssiDbm
;

485 
uöt8
 
íîgyDëe˘Mósuªmít
;

487 
rssiDbm
 = 
	`MAC_RADIO_RECORD_MAX_RSSI_STOP
(Ë+ 
MAC_RADIO_RSSI_OFFSET
;

488 #i‡
	`deföed
 (
HAL_PA_LNA
Ë|| deföed (
HAL_PA_LNA_CC2590
)

489 
	`MAC_RADIO_RSSI_LNA_OFFSET
(
rssiDbm
);

491 
íîgyDëe˘Mósuªmít
 = 
	`ødioCompuãED
(
rssiDbm
);

493 (
íîgyDëe˘Mósuªmít
);

494 
	}
}

506 
uöt8
 
	$ødioCompuãED
(
öt8
 
rssiDbm
)

508 
uöt8
 
ed
;

514 i‡(
rssiDbm
 < 
ED_RF_POWER_MIN_DBM
)

516 
rssiDbm
 = 
ED_RF_POWER_MIN_DBM
;

518 i‡(
rssiDbm
 > 
ED_RF_POWER_MAX_DBM
)

520 
rssiDbm
 = 
ED_RF_POWER_MAX_DBM
;

530 
ed
 = (
MAC_SPEC_ED_MAX
 * (
rssiDbm
 - 
ED_RF_POWER_MIN_DBM
)Ë/ (
ED_RF_POWER_MAX_DBM
 - ED_RF_POWER_MIN_DBM);

532 (
ed
);

533 
	}
}

547 
uöt8
 
	$macRadioCompuãLQI
(
öt8
 
rssiDbm
, 
uöt8
 
c‹r
)

549 (Ë
c‹r
;

556 (
	`ødioCompuãED
(
rssiDbm
));

557 
	}
}

	@Components/mac/low_level/srf04/mac_radio.h

40 #i‚de‡
MAC_RADIO_H


41 
	#MAC_RADIO_H


	)

47 
	~"hÆ_ty≥s.h
"

54 
uöt8
 
macPhyCh™√l
;

55 
uöt8
 
macPhyTxPowî
;

62 
macRadioInô
();

63 
macRadioRe£t
();

64 
macRadioUpd©eTxPowî
();

65 
macRadioUpd©eCh™√l
();

66 
uöt8
 
macRadioCompuãLQI
(
öt8
 
rssiDbm
, uöt8 
c‹ªœti⁄
);

	@Components/mac/low_level/srf04/mac_rx.c

46 
	~"hÆ_defs.h
"

47 
	~"hÆ_ty≥s.h
"

50 
	~"mac_high_Àvñ.h
"

51 
	~"mac_•ec.h
"

54 
	~"mac_low_Àvñ.h
"

57 
	~"mac_rx.h
"

58 
	~"mac_tx.h
"

59 
	~"mac_rx_⁄off.h
"

60 
	~"mac_ødio.h
"

63 
	~"mac_ødio_defs.h
"

64 
	~"mac_aut›íd.h
"

67 
	~"mac_as£π.h
"

74 
	#MAX_PAYLOAD_BYTES_READ_PER_INTERRUPT
 16

	)

77 
	#RX_THRESHOLD_START_LEN
 (
MAC_PHY_PHR_LEN
 + \

	)

78 
	gMAC_FCF_FIELD_LEN
 + \

79 
	gMAC_SEQ_NUM_FIELD_LEN
 + \

80 
	gMAC_FCS_FIELD_LEN
)

83 
	#MAX_ADDR_FIELDS_LEN
 ((
MAC_EXT_ADDR_FIELD_LEN
 + 
MAC_PAN_ID_FIELD_LEN
Ë* 2)

	)

86 
	#ADDR_MODE_RESERVERED
 1

	)

89 
	#CMD_FRAME_ID_LEN
 1

	)

92 
	#PHY_PACKET_SIZE_MASK
 0x7F

	)

95 
	#PROMISCUOUS_MODE_OFF
 0x00

	)

98 
	#PROPRIETARY_FCS_CRC_OK_BIT
 0x80

	)

101 
	#DUMMY_LEN
 0xBE

	)

104 
	#RX_THRESHOLD_INT_STATE_INACTIVE
 0

	)

105 
	#RX_THRESHOLD_INT_STATE_ACTIVE
 1

	)

106 
	#RX_THRESHOLD_INT_STATE_RESET
 2

	)

113 
	#MEM_ALLOC
(
x
Ë
	`macD©aRxMemAŒoc
(x)

	)

114 
	#MEM_FREE
(
x
Ë
	`macD©aRxMemFªe
((
uöt8
 *)x)

	)

121 
	#INTERNAL_FCF_FLAGS
(
p
Ë(((’)[1] >> 4Ë& 0x03Ë| (’)[0] & 0x78))

	)

132 
	#PROPRIETARY_FCS_RSSI
(
p
Ë((
öt8
)(’)[0]))

	)

133 
	#PROPRIETARY_FCS_CRC_OK
(
p
Ë(’)[1] & 
PROPRIETARY_FCS_CRC_OK_BIT
)

	)

134 
	#PROPRIETARY_FCS_CORRELATION_VALUE
(
p
Ë(’)[1] & ~
PROPRIETARY_FCS_CRC_OK_BIT
)

	)

141 
uöt8
 
	gmacRxA˘ive
;

142 
uöt8
 
	gmacRxFûãr
;

143 
uöt8
 
	gmacRxOutgoögAckFœg
;

150 c⁄° 
uöt8
 
CODE
 
	gmacRxAddrLí
[] =

153 
DUMMY_LEN
,

154 
MAC_PAN_ID_FIELD_LEN
 + 
MAC_SHORT_ADDR_FIELD_LEN
,

155 
MAC_PAN_ID_FIELD_LEN
 + 
MAC_EXT_ADDR_FIELD_LEN


163 
rxHÆtCÀ™upFöÆSãp
();

165 
rxSèπI§
();

166 
rxAddrI§
();

167 
rxPaylﬂdI§
();

168 
rxDisˇrdI§
();

169 
rxFcsI§
();

171 
rxPªpPaylﬂd
();

172 
rxDisˇrdFøme
();

173 
rxD⁄e
();

174 
rxPo°RxUpd©es
();

181 (* 
pFuncRxSèã
)();

182 
macRx_t
 * 
pRxBuf
;

184 
uöt8
 
rxBuf
[
MAC_PHY_PHR_LEN
 + 
MAC_FCF_FIELD_LEN
 + 
MAC_SEQ_NUM_FIELD_LEN
];

185 
uöt8
 
rxUƒódLí
;

186 
uöt8
 
rxNextLí
;

187 
uöt8
 
rxPaylﬂdLí
;

188 
uöt8
 
rxFûãr
;

189 
uöt8
 
rxPromiscuousMode
;

190 
uöt8
 
rxI§A˘iveFœg
;

191 
uöt8
 
rxRe£tFœg
;

192 
uöt8
 
rxFifoOvîÊowCou¡
;

205 
	$macRxInô
()

207 
macRxFûãr
 = 
RX_FILTER_OFF
;

208 
rxPromiscuousMode
 = 
PROMISCUOUS_MODE_OFF
;

209 
pRxBuf
 = 
NULL
;

210 
macRxA˘ive
 = 
MAC_RX_ACTIVE_NO_ACTIVITY
;

211 
pFuncRxSèã
 = &
rxSèπI§
;

212 
macRxOutgoögAckFœg
 = 0;

213 
rxI§A˘iveFœg
 = 0;

214 
rxRe£tFœg
 = 0;

215 
rxFifoOvîÊowCou¡
 = 0;

216 
	}
}

229 
	$macRxRadioPowîUpInô
()

232 
	`MAC_RADIO_SET_RX_THRESHOLD
(
RX_THRESHOLD_START_LEN
);

235 
	`MAC_RADIO_CLEAR_RX_THRESHOLD_INTERRUPT_FLAG
();

238 
	`MAC_RADIO_ENABLE_RX_THRESHOLD_INTERRUPT
();

239 
	}
}

252 
	$macRxTxRe£t
()

255 
	`macRxH¨dDißbÀ
();

263 
macRxFûãr
 = 
RX_FILTER_OFF
;

266 
	`macRxPromiscuousMode
(
MAC_PROMISCUOUS_MODE_OFF
);

267 
	}
}

280 
	$macRxHÆtCÀ™up
()

282 
rxRe£tFœg
 = 1;

283 i‡(!
rxI§A˘iveFœg
)

285 
	`rxHÆtCÀ™upFöÆSãp
();

286 
rxRe£tFœg
 = 0;

288 
	}
}

301 
	$rxHÆtCÀ™upFöÆSãp
()

304 
	`MAC_RADIO_CANCEL_ACK_TX_DONE_CALLBACK
();

307 
	`MAC_RADIO_SET_RX_THRESHOLD
(
RX_THRESHOLD_START_LEN
);

310 
	`MAC_RADIO_FLUSH_RX_FIFO
();

313 
	`MAC_RADIO_CLEAR_RX_THRESHOLD_INTERRUPT_FLAG
();

316 i‡(
pRxBuf
 !
NULL
)

318 
	`MEM_FREE
((
uöt8
 *Ë
pRxBuf
);

320 
pRxBuf
 = 
NULL
;

322 
pFuncRxSèã
 = &
rxSèπI§
;

325 i‡(
macRxA˘ive
 || 
macRxOutgoögAckFœg
)

327 
macRxA˘ive
 = 
MAC_RX_ACTIVE_NO_ACTIVITY
;

328 
macRxOutgoögAckFœg
 = 0;

330 
	`rxPo°RxUpd©es
();

332 
	}
}

346 
	$macRxThªshﬁdI§
()

349 i‡(
rxRe£tFœg
)

361 
rxI§A˘iveFœg
 = 1;

362 (*
pFuncRxSèã
)();

363 
rxI§A˘iveFœg
 = 0;

366 i‡(
rxRe£tFœg
)

368 
	`rxHÆtCÀ™upFöÆSãp
();

369 
rxRe£tFœg
 = 0;

371 
	}
}

386 
	$rxSèπI§
()

388 
uöt8
 
addrLí
;

389 
uöt8
 
ackWôhPídög
;

390 
uöt8
 
d°AddrMode
;

391 
uöt8
 
§cAddrMode
;

393 
	`MAC_ASSERT
(!
macRxA˘ive
);

396 
macRxA˘ive
 = 
MAC_RX_ACTIVE_STARTED
;

415 i‡(!
macRxOnFœg
 || 
	`MAC_RADIO_RX_FIFO_IS_EMPTY
())

418 
macRxA˘ive
 = 
MAC_RX_ACTIVE_NO_ACTIVITY
;

424 
	`rxPo°RxUpd©es
();

435 
	`MAC_RADIO_FORCE_TX_DONE_IF_PENDING
();

443 
	`MAC_RADIO_CANCEL_ACK_TX_DONE_CALLBACK
();

444 
macRxOutgoögAckFœg
 = 0;

450 
rxFûãr
 = 
macRxFûãr
;

465 
	`MAC_RADIO_READ_RX_FIFO
(
rxBuf
, 
MAC_PHY_PHR_LEN
 + 
MAC_FCF_FIELD_LEN
 + 
MAC_SEQ_NUM_FIELD_LEN
);

468 
rxUƒódLí
 = (
rxBuf
[0] & 
PHY_PACKET_SIZE_MASK
Ë- 
MAC_FCF_FIELD_LEN
 - 
MAC_SEQ_NUM_FIELD_LEN
;

479 i‡(
macChùVîsi⁄
 =
REV_A
)

481 i‡((
rxUƒódLí
 > (
MAC_A_MAX_PHY_PACKET_SIZE
 - 
MAC_FCF_FIELD_LEN
 - 
MAC_SEQ_NUM_FIELD_LEN
)) ||

482 (
	`MAC_FRAME_TYPE
(&
rxBuf
[1]Ë> 
MAC_FRAME_TYPE_MAX_VALID
))

484 
	`MAC_RADIO_FLUSH_RX_FIFO
();

485 
	`rxD⁄e
();

492 
	`MAC_ASSERT
(
rxUƒódLí
 <(
MAC_A_MAX_PHY_PACKET_SIZE
 - 
MAC_FCF_FIELD_LEN
 - 
MAC_SEQ_NUM_FIELD_LEN
));

506 i‡((
	`MAC_FRAME_TYPE
(&
rxBuf
[1]Ë=
MAC_FRAME_TYPE_ACK
Ë&& (
rxPromiscuousMode
 =
PROMISCUOUS_MODE_OFF
))

508 
hÆI¡Sèã_t
 
s
;

509 
uöt8
 
fcsBuf
[
MAC_FCF_FIELD_LEN
];

516 
	`MAC_RADIO_READ_RX_FIFO
(
fcsBuf
, 
MAC_FCS_FIELD_LEN
);

522 
	`HAL_ENTER_CRITICAL_SECTION
(
s
);

525 i‡(
macTxA˘ive
 =
MAC_TX_ACTIVE_LISTEN_FOR_ACK
)

527 
	`MAC_ASSERT
(
pMacD©aTx
 !
NULL
);

531 
öt8
 
rssiDbm
;

532 
uöt8
 
c‹r
;

534 
rssiDbm
 = 
	`PROPRIETARY_FCS_RSSI
(
fcsBuf
Ë+ 
MAC_RADIO_RSSI_OFFSET
;

535 #i‡
	`deföed
 (
HAL_PA_LNA
Ë|| deföed (
HAL_PA_LNA_CC2590
)

536 
	`MAC_RADIO_RSSI_LNA_OFFSET
(
rssiDbm
);

538 
c‹r
 = 
	`PROPRIETARY_FCS_CORRELATION_VALUE
(
fcsBuf
);

540 
pMacD©aTx
->
öã∫Æ
.
mpduLökQuÆôy
 = 
	`macRadioCompuãLQI
(
rssiDbm
, 
c‹r
);

541 
pMacD©aTx
->
öã∫Æ
.
c‹ªœti⁄
 = 
c‹r
;

542 
pMacD©aTx
->
öã∫Æ
.
rssi

rssiDbm
;

549 
	`HAL_EXIT_CRITICAL_SECTION
(
s
);

556 i‡(
	`PROPRIETARY_FCS_CRC_OK
(
fcsBuf
))

559 
	`macTxAckRe˚ivedCÆlback
(
	`MAC_SEQ_NUMBER
(&
rxBuf
[1]), 
	`MAC_FRAME_PENDING
(&rxBuf[1]));

563 
	`macTxAckNŸRe˚ivedCÆlback
();

568 
	`HAL_EXIT_CRITICAL_SECTION
(
s
);

572 
	`rxD⁄e
();

575 i‡(
macTxA˘ive
 =
MAC_TX_ACTIVE_LISTEN_FOR_ACK
)

577 
	`macTxAckNŸRe˚ivedCÆlback
();

587 i‡((
rxFûãr
 !
RX_FILTER_OFF
Ë&& !
rxPromiscuousMode
)

590 (
rxFûãr
 =
RX_FILTER_ALL
) ||

593 ((
rxFûãr
 =
RX_FILTER_NON_BEACON_FRAMES
) &&

594 (
	`MAC_FRAME_TYPE
(&
rxBuf
[1]Ë!
MAC_FRAME_TYPE_BEACON
)) ||

597 ((
rxFûãr
 =
RX_FILTER_NON_COMMAND_FRAMES
) &&

598 ((
	`MAC_FRAME_TYPE
(&
rxBuf
[1]Ë!
MAC_FRAME_TYPE_COMMAND
))))

601 
	`rxDisˇrdFøme
();

611 
d°AddrMode
 = 
	`MAC_DEST_ADDR_MODE
(&
rxBuf
[1]);

612 
§cAddrMode
 = 
	`MAC_SRC_ADDR_MODE
(&
rxBuf
[1]);

619 i‡(
macChùVîsi⁄
 =
REV_A
)

621 i‡((
§cAddrMode
 =
ADDR_MODE_RESERVERED
Ë|| (
d°AddrMode
 == ADDR_MODE_RESERVERED))

623 
	`MAC_RADIO_FLUSH_RX_FIFO
();

624 
	`rxD⁄e
();

635 
addrLí
 = 
macRxAddrLí
[
d°AddrMode
] + macRxAddrLí[
§cAddrMode
];

636 i‡((
§cAddrMode
 !
SADDR_MODE_NONE
Ë&& 
	`MAC_INTRA_PAN
(&
rxBuf
[1]))

638 
addrLí
 -
MAC_PAN_ID_FIELD_LEN
;

645 i‡((
addrLí
 + 
MAC_FCS_FIELD_LEN
Ë> 
rxUƒódLí
)

648 
	`rxDisˇrdFøme
();

653 
rxPaylﬂdLí
 = 
rxUƒódLí
 - 
addrLí
 - 
MAC_FCS_FIELD_LEN
;

658 
pRxBuf
 = (
macRx_t
 *Ë
	`MEM_ALLOC
((macRx_tË+ 
rxPaylﬂdLí
);

659 i‡(
pRxBuf
 =
NULL
)

662 
	`MAC_RADIO_CANCEL_TX_ACK
();

665 
	`rxDisˇrdFøme
();

672 
ackWôhPídög
 = 0;

673 i‡(!
rxPromiscuousMode
)

675 
macRxOutgoögAckFœg
 = 
	`MAC_ACK_REQUEST
(&
rxBuf
[1]);

681 i‡(
macRxOutgoögAckFœg
)

683 
hÆI¡Sèã_t
 
s
;

689 
	`HAL_ENTER_CRITICAL_SECTION
(
s
);

692 if–
	`MAC_FRAME_TYPE
(&
rxBuf
[1]Ë=
MAC_FRAME_TYPE_COMMAND
 )

694 if–
	`macRxCheckMACPídögCÆlback
())

697 
ackWôhPídög
 = 
MAC_RX_FLAG_ACK_PENDING
;

701 if–
macSrcM©chIsE«bÀd
 )

704 if–
	`MAC_SrcM©chCheckAŒPídög
(Ë=
MAC_AUTOACK_PENDING_ALL_ON
 )

706 
ackWôhPídög
 = 
MAC_RX_FLAG_ACK_PENDING
;

712 if–
	`macRxCheckPídögCÆlback
() )

714 
ackWôhPídög
 = 
MAC_RX_FLAG_ACK_PENDING
;

720 if–
ackWôhPídög
 =
MAC_RX_FLAG_ACK_PENDING
 )

722 
	`MAC_RADIO_TX_ACK_PEND
();

726 
	`MAC_RADIO_TX_ACK
();

731 
	`MAC_RADIO_REQUEST_ACK_TX_DONE_CALLBACK
();

732 
	`HAL_EXIT_CRITICAL_SECTION
(
s
);

740 
pRxBuf
->
msdu
.
p
 = (
uöt8
 *) (pRxBuf + 1);

741 
pRxBuf
->
msdu
.
Àn
 = 
rxPaylﬂdLí
;

744 
pRxBuf
->
mac
.
§cAddr
.
addrMode
 = 
§cAddrMode
;

745 
pRxBuf
->
mac
.
d°Addr
.
addrMode
 = 
d°AddrMode
;

746 
pRxBuf
->
mac
.
time°amp
 = 
	`MAC_RADIO_BACKOFF_CAPTURE
();

747 
pRxBuf
->
mac
.
time°amp2
 = 
	`MAC_RADIO_TIMER_CAPTURE
();

748 
pRxBuf
->
öã∫Æ
.
‰ameTy≥
 = 
	`MAC_FRAME_TYPE
(&
rxBuf
[1]);

749 
pRxBuf
->
mac
.
d¢
 = 
	`MAC_SEQ_NUMBER
(&
rxBuf
[1]);

750 
pRxBuf
->
öã∫Æ
.
Êags
 = 
	`INTERNAL_FCF_FLAGS
(&
rxBuf
[1]Ë| 
ackWôhPídög
;

751 
pRxBuf
->
£c
.
£curôyLevñ
 = 
MAC_SEC_LEVEL_NONE
;

758 i‡(
addrLí
 == 0)

761 
pFuncRxSèã
 = &
rxPaylﬂdI§
;

762 
	`rxPªpPaylﬂd
();

767 
rxNextLí
 = 
addrLí
;

768 
	`MAC_RADIO_SET_RX_THRESHOLD
(
rxNextLí
);

769 
pFuncRxSèã
 = &
rxAddrI§
;

771 
	}
}

785 
	$rxAddrI§
()

787 
uöt8
 
buf
[
MAX_ADDR_FIELDS_LEN
];

788 
uöt8
 
d°AddrMode
;

789 
uöt8
 
§cAddrMode
;

790 
uöt8
 * 
p
;

792 
	`MAC_ASSERT
(
rxNextLí
 != 0);

795 
	`MAC_RADIO_READ_RX_FIFO
(
buf
, 
rxNextLí
);

798 
p
 = 
buf
;

801 
d°AddrMode
 = 
	`MAC_DEST_ADDR_MODE
(&
rxBuf
[1]);

802 i‡(
d°AddrMode
 !
SADDR_MODE_NONE
)

804 
pRxBuf
->
mac
.
§cP™Id
 =ÖRxBuf->mac.
d°P™Id
 = 
	`BUILD_UINT16
(
p
[0],Ö[1]);

805 
p
 +
MAC_PAN_ID_FIELD_LEN
;

806 i‡(
d°AddrMode
 =
SADDR_MODE_EXT
)

808 
	`sAddrExtCpy
(
pRxBuf
->
mac
.
d°Addr
.
addr
.
extAddr
, 
p
);

809 
p
 +
MAC_EXT_ADDR_FIELD_LEN
;

813 
pRxBuf
->
mac
.
d°Addr
.
addr
.
sh‹tAddr
 = 
	`BUILD_UINT16
(
p
[0],Ö[1]);

814 
p
 +
MAC_SHORT_ADDR_FIELD_LEN
;

819 
§cAddrMode
 = 
	`MAC_SRC_ADDR_MODE
(&
rxBuf
[1]);

820 i‡(
§cAddrMode
 !
SADDR_MODE_NONE
)

822 i‡(!(
pRxBuf
->
öã∫Æ
.
Êags
 & 
MAC_RX_FLAG_INTRA_PAN
))

824 
pRxBuf
->
mac
.
§cP™Id
 = 
	`BUILD_UINT16
(
p
[0],Ö[1]);

825 
p
 +
MAC_PAN_ID_FIELD_LEN
;

827 i‡(
§cAddrMode
 =
SADDR_MODE_EXT
)

829 
	`sAddrExtCpy
(
pRxBuf
->
mac
.
§cAddr
.
addr
.
extAddr
, 
p
);

833 
pRxBuf
->
mac
.
§cAddr
.
addr
.
sh‹tAddr
 = 
	`BUILD_UINT16
(
p
[0],Ö[1]);

840 
pFuncRxSèã
 = &
rxPaylﬂdI§
;

841 
	`rxPªpPaylﬂd
();

842 
	}
}

855 
	$rxPªpPaylﬂd
()

857 i‡(
rxPaylﬂdLí
 == 0)

859 
	`MAC_RADIO_SET_RX_THRESHOLD
(
MAC_FCS_FIELD_LEN
);

860 
pFuncRxSèã
 = &
rxFcsI§
;

864 
rxNextLí
 = 
	`MIN
(
rxPaylﬂdLí
, 
MAX_PAYLOAD_BYTES_READ_PER_INTERRUPT
);

865 
	`MAC_RADIO_SET_RX_THRESHOLD
(
rxNextLí
);

867 
	}
}

880 
	$rxPaylﬂdI§
()

882 
	`MAC_RADIO_READ_RX_FIFO
(
pRxBuf
->
msdu
.
p
, 
rxNextLí
);

883 
pRxBuf
->
msdu
.
p
 +
rxNextLí
;

884 
rxPaylﬂdLí
 -
rxNextLí
;

886 
	`rxPªpPaylﬂd
();

887 
	}
}

900 
	$rxFcsI§
()

902 
uöt8
 
¸cOK
;

903 
uöt8
 
ackWôhPídög
 = 0;

906 
	`MAC_RADIO_READ_RX_FIFO
(
rxBuf
, 
MAC_FCS_FIELD_LEN
);

917 
¸cOK
 = 
	`PROPRIETARY_FCS_CRC_OK
(
rxBuf
);

924 i‡(
¸cOK
 || (
rxPromiscuousMode
 =
MAC_PROMISCUOUS_MODE_WITH_BAD_CRC
))

926 
öt8
 
rssiDbm
;

927 
uöt8
 
c‹r
;

937 
macRxA˘ive
 = 
MAC_RX_ACTIVE_DONE
;

938 
	`macRxOffReque°
();

941 
rssiDbm
 = 
	`PROPRIETARY_FCS_RSSI
(
rxBuf
Ë+ 
MAC_RADIO_RSSI_OFFSET
;

942 #i‡
	`deföed
 (
HAL_PA_LNA
Ë|| deföed (
HAL_PA_LNA_CC2590
)

943 
	`MAC_RADIO_RSSI_LNA_OFFSET
(
rssiDbm
);

945 
c‹r
 = 
	`PROPRIETARY_FCS_CORRELATION_VALUE
(
rxBuf
);

948 if–
macSrcM©chIsE«bÀd
 && 
	`MAC_RADIO_SRC_MATCH_RESULT
() )

951 
ackWôhPídög
 = 
MAC_RX_FLAG_ACK_PENDING
;

955 
pRxBuf
->
öã∫Æ
.
Êags
 |–
¸cOK
 | 
ackWôhPídög
 );

956 
pRxBuf
->
mac
.
mpduLökQuÆôy
 = 
	`macRadioCompuãLQI
(
rssiDbm
, 
c‹r
);

957 
pRxBuf
->
mac
.
rssi
 = 
rssiDbm
;

958 
pRxBuf
->
mac
.
c‹ªœti⁄
 = 
c‹r
;

961 
pRxBuf
->
msdu
.
p
 = (
uöt8
 *) (pRxBuf + 1);

964 
	`macRxCom∂ëeCÆlback
(
pRxBuf
);

965 
pRxBuf
 = 
NULL
;

974 
	`MAC_RADIO_CANCEL_ACK_TX_DONE_CALLBACK
();

975 
macRxOutgoögAckFœg
 = 0;

978 
	`MEM_FREE
((
uöt8
 *Ë
pRxBuf
);

979 
pRxBuf
 = 
NULL
;

983 
	`MAC_RADIO_SET_RX_THRESHOLD
(
RX_THRESHOLD_START_LEN
);

984 
pFuncRxSèã
 = &
rxSèπI§
;

985 
	`rxD⁄e
();

986 
	}
}

999 
	$rxD⁄e
()

1002 i‡(
	`MAC_RADIO_RX_FIFO_HAS_OVERFLOWED
())

1004 
	`MAC_RADIO_FLUSH_RX_FIFO
();

1008 
macRxA˘ive
 = 
MAC_RX_ACTIVE_NO_ACTIVITY
;

1011 i‡(!
macRxOutgoögAckFœg
)

1013 
	`rxPo°RxUpd©es
();

1015 
	}
}

1028 
	$macRxAckTxD⁄eCÆlback
()

1030 
macRxOutgoögAckFœg
 = 0;

1039 i‡(!
macRxA˘ive
)

1041 
	`rxPo°RxUpd©es
();

1043 
	}
}

1061 
	$rxPo°RxUpd©es
()

1064 
	`macRxOffReque°
();

1067 
	`macRadioUpd©eTxPowî
();

1070 
	`macTxSèπQueuedFøme
();

1071 
	}
}

1084 
	$rxDisˇrdFøme
()

1086 
	`MAC_ASSERT
(
pFuncRxSèã
 =&
rxSèπI§
);

1088 i‡(
rxUƒódLí
 == 0)

1090 
	`rxD⁄e
();

1094 
rxNextLí
 = 
	`MIN
(
rxUƒódLí
, 
MAX_PAYLOAD_BYTES_READ_PER_INTERRUPT
);

1095 
	`MAC_RADIO_SET_RX_THRESHOLD
(
rxNextLí
);

1096 
pFuncRxSèã
 = &
rxDisˇrdI§
;

1098 
	}
}

1111 
	$rxDisˇrdI§
()

1113 
uöt8
 
buf
[
MAX_PAYLOAD_BYTES_READ_PER_INTERRUPT
];

1115 
	`MAC_RADIO_READ_RX_FIFO
(
buf
, 
rxNextLí
);

1116 
rxUƒódLí
 -
rxNextLí
;

1119 i‡(
rxUƒódLí
 != 0)

1121 i‡(
rxUƒódLí
 < 
MAX_PAYLOAD_BYTES_READ_PER_INTERRUPT
)

1123 
rxNextLí
 = 
rxUƒódLí
;

1124 
	`MAC_RADIO_SET_RX_THRESHOLD
(
rxNextLí
);

1130 
	`MAC_RADIO_SET_RX_THRESHOLD
(
RX_THRESHOLD_START_LEN
);

1131 
pFuncRxSèã
 = &
rxSèπI§
;

1132 
	`rxD⁄e
();

1134 
	}
}

1149 
	$macRxFifoOvîÊowI§
()

1151 
rxFifoOvîÊowCou¡
++;

1152 
	`macRxOff
();

1153 
	`macRxHÆtCÀ™up
();

1154 
	`macRxOnReque°
();

1155 
	}
}

1168 
	$macRxPromiscuousMode
(
uöt8
 
mode
)

1170 
rxPromiscuousMode
 = 
mode
;

1172 i‡(
rxPromiscuousMode
 =
MAC_PROMISCUOUS_MODE_OFF
)

1174 
	`MAC_RADIO_TURN_ON_RX_FRAME_FILTERING
();

1178 
	`MAC_ASSERT
((
mode
 =
MAC_PROMISCUOUS_MODE_WITH_BAD_CRC
) ||

1179 (
mode
 =
MAC_PROMISCUOUS_MODE_COMPLIANT
));

1181 
	`MAC_RADIO_TURN_OFF_RX_FRAME_FILTERING
();

1183 
	}
}

1193 #i‡((
MAC_A_MAX_PHY_PACKET_SIZE
 != 0x7F ) || \

1194 (
	gMAC_FCF_FIELD_LEN
 != 2 ) || \

1195 (
MAC_FCF_FRAME_TYPE_POS
 != 0 ) || \

1196 (
MAC_FCF_FRAME_PENDING_POS
 != 4 ) || \

1197 (
MAC_FCF_ACK_REQUEST_POS
 != 5 ) || \

1198 (
MAC_FCF_INTRA_PAN_POS
 != 6 ) || \

1199 (
MAC_FCF_DST_ADDR_MODE_POS
 != 10 ) || \

1200 (
MAC_FCF_FRAME_VERSION_POS
 != 12 ) || \

1201 (
MAC_FCF_SRC_ADDR_MODE_POS
 != 14 ))

1206 #i‡((
MAC_RX_FLAG_VERSION
 != 0x03) || \

1207 (
MAC_RX_FLAG_ACK_PENDING
 != 0x04) || \

1208 (
MAC_RX_FLAG_SECURITY
 != 0x08) || \

1209 (
MAC_RX_FLAG_PENDING
 != 0x10) || \

1210 (
MAC_RX_FLAG_ACK_REQUEST
 != 0x20) || \

1211 (
MAC_RX_FLAG_INTRA_PAN
 != 0x40))

1216 #i‡(
MAC_RX_FLAG_CRC_OK
 !
PROPRIETARY_FCS_CRC_OK_BIT
)

1220 #i‡(
MAC_RX_ACTIVE_NO_ACTIVITY
 != 0x00)

1224 #i‡(
MAC_PROMISCUOUS_MODE_OFF
 != 0x00)

	@Components/mac/low_level/srf04/mac_rx.h

40 #i‚de‡
MAC_RX_H


41 
	#MAC_RX_H


	)

47 
	~"hÆ_ty≥s.h
"

54 
	#RX_FILTER_OFF
 0

	)

55 
	#RX_FILTER_ALL
 1

	)

56 
	#RX_FILTER_NON_BEACON_FRAMES
 2

	)

57 
	#RX_FILTER_NON_COMMAND_FRAMES
 3

	)

60 
	#MAC_RX_ACTIVE_PHYSICAL_BV
 0x80

	)

62 
	#MAC_RX_ACTIVE_NO_ACTIVITY
 0x00

	)

63 
	#MAC_RX_ACTIVE_STARTED
 (0x01 | 
MAC_RX_ACTIVE_PHYSICAL_BV
)

	)

64 
	#MAC_RX_ACTIVE_DONE
 0x02

	)

71 
	#MAC_RX_IS_PHYSICALLY_ACTIVE
(Ë((
macRxA˘ive
 & 
MAC_RX_ACTIVE_PHYSICAL_BV
Ë|| 
macRxOutgoögAckFœg
)

	)

78 
uöt8
 
macRxA˘ive
;

79 
uöt8
 
macRxFûãr
;

80 
uöt8
 
macRxOutgoögAckFœg
;

87 
macRxInô
();

88 
macRxRadioPowîUpInô
();

89 
macRxTxRe£t
();

90 
macRxHÆtCÀ™up
();

91 
macRxThªshﬁdI§
();

92 
macRxFifoOvîÊowI§
();

93 
macRxAckTxD⁄eCÆlback
();

	@Components/mac/low_level/srf04/mac_rx_onoff.c

46 
	~"hÆ_defs.h
"

47 
	~"hÆ_ty≥s.h
"

50 
	~"mac_low_Àvñ.h
"

53 
	~"mac_rx_⁄off.h
"

54 
	~"mac_rx.h
"

55 
	~"mac_tx.h
"

58 
	~"mac_ødio_defs.h
"

61 
	~"mac_as£π.h
"

68 
uöt8
 
	gmacRxOnFœg
;

69 
uöt8
 
	gmacRxE«bÀFœgs
;

82 
	$macRxOnOffInô
()

84 
macRxE«bÀFœgs
 = 0;

85 
macRxOnFœg
 = 0;

86 
	}
}

99 
	$macRxE«bÀ
(
uöt8
 
Êags
)

101 
hÆI¡Sèã_t
 
s
;

103 
	`MAC_ASSERT
(
Êags
 != 0);

106 
	`HAL_ENTER_CRITICAL_SECTION
(
s
);

107 
macRxE«bÀFœgs
 |
Êags
;

108 
	`macRxOn
();

109 
	`HAL_EXIT_CRITICAL_SECTION
(
s
);

110 
	}
}

124 
	$macRxSo·E«bÀ
(
uöt8
 
Êags
)

126 
hÆI¡Sèã_t
 
s
;

128 
	`MAC_ASSERT
(
Êags
 != 0);

131 
	`HAL_ENTER_CRITICAL_SECTION
(
s
);

132 
macRxE«bÀFœgs
 |
Êags
;

133 
	`HAL_EXIT_CRITICAL_SECTION
(
s
);

134 
	}
}

148 
	$macRxDißbÀ
(
uöt8
 
Êags
)

150 
hÆI¡Sèã_t
 
s
;

152 
	`MAC_ASSERT
(
Êags
 != 0);

155 
	`HAL_ENTER_CRITICAL_SECTION
(
s
);

156 
macRxE«bÀFœgs
 &(
Êags
 ^ 0xFF);

157 
	`HAL_EXIT_CRITICAL_SECTION
(
s
);

160 
	`macRxOffReque°
();

161 
	}
}

174 
	$macRxH¨dDißbÀ
()

176 
hÆI¡Sèã_t
 
s
;

178 
	`HAL_ENTER_CRITICAL_SECTION
(
s
);

180 
macRxE«bÀFœgs
 = 0;

181 
macRxOnFœg
 = 0;

184 
	`MAC_RADIO_RXTX_OFF
();

185 
	`MAC_RADIO_FLUSH_RX_FIFO
();

186 
	`MAC_DEBUG_TURN_OFF_RX_LED
();

188 
	`HAL_EXIT_CRITICAL_SECTION
(
s
);

191 
	`macRxHÆtCÀ™up
();

192 
	}
}

204 
	$macRxOnReque°
()

206 
hÆI¡Sèã_t
 
s
;

208 
	`HAL_ENTER_CRITICAL_SECTION
(
s
);

209 i‡(
macRxE«bÀFœgs
)

211 
	`macRxOn
();

213 
	`HAL_EXIT_CRITICAL_SECTION
(
s
);

214 
	}
}

227 
	$macRxOffReque°
()

229 
hÆI¡Sèã_t
 
s
;

231 
	`HAL_ENTER_CRITICAL_SECTION
(
s
);

232 i‡(!
macRxE«bÀFœgs
)

234 i‡(!
	`MAC_RX_IS_PHYSICALLY_ACTIVE
(Ë&& !
	`MAC_TX_IS_PHYSICALLY_ACTIVE
())

236 
	`macRxOff
();

239 
	`HAL_EXIT_CRITICAL_SECTION
(
s
);

240 
	}
}

253 
	$macRxOn
()

255 
hÆI¡Sèã_t
 
s
;

257 
	`HAL_ENTER_CRITICAL_SECTION
(
s
);

258 i‡(!
macRxOnFœg
)

260 
macRxOnFœg
 = 1;

261 
	`MAC_RADIO_RX_ON
();

262 
	`MAC_DEBUG_TURN_ON_RX_LED
();

264 
	`HAL_EXIT_CRITICAL_SECTION
(
s
);

265 
	}
}

278 
	$macRxOff
()

280 
hÆI¡Sèã_t
 
s
;

282 
	`HAL_ENTER_CRITICAL_SECTION
(
s
);

283 i‡(
macRxOnFœg
)

285 
macRxOnFœg
 = 0;

286 
	`MAC_RADIO_RXTX_OFF
();

287 
	`MAC_DEBUG_TURN_OFF_RX_LED
();

290 
	`MAC_RADIO_FLUSH_RX_FIFO
();

293 
	`MAC_RADIO_CLEAR_RX_THRESHOLD_INTERRUPT_FLAG
();

296 
	`HAL_EXIT_CRITICAL_SECTION
(
s
);

297 
	}
}

	@Components/mac/low_level/srf04/mac_rx_onoff.h

40 #i‚de‡
MAC_RX_ONOFF_H


41 
	#MAC_RX_ONOFF_H


	)

47 
	~"hÆ_defs.h
"

48 
	~"hÆ_ty≥s.h
"

54 
macRxOnOffInô
();

55 
macRxOnReque°
();

56 
macRxOffReque°
();

57 
macRxOn
();

58 
macRxOff
();

65 
uöt8
 
macRxOnFœg
;

66 
uöt8
 
macRxE«bÀFœgs
;

75 #ifde‡
MAC_RX_ONOFF_DEBUG_LED


76 
	~"hÆ_bﬂrd.h
"

77 
	#MAC_DEBUG_TURN_ON_RX_LED
(Ë
	`HAL_TURN_ON_LED2
()

	)

78 
	#MAC_DEBUG_TURN_OFF_RX_LED
(Ë
	`HAL_TURN_OFF_LED2
()

	)

80 
	#MAC_DEBUG_TURN_ON_RX_LED
()

	)

81 
	#MAC_DEBUG_TURN_OFF_RX_LED
()

	)

85 
	#MAC_RX_WAS_FORCED_OFF
(Ë
	`°
–
macRxOnFœg
 = 0; 
	`MAC_DEBUG_TURN_OFF_RX_LED
(); )

	)

86 
	#MAC_RX_WAS_FORCED_ON
(Ë
	`°
–
macRxOnFœg
 = 1; 
	`MAC_DEBUG_TURN_ON_RX_LED
(); )

	)

	@Components/mac/low_level/srf04/mac_sleep.c

46 
	~"hÆ_ty≥s.h
"

49 
	~"mac_pib.h
"

52 
	~"mac_low_Àvñ.h
"

55 
	~"mac_¶ìp.h
"

56 
	~"mac_ødio.h
"

57 
	~"mac_tx.h
"

58 
	~"mac_rx.h
"

59 
	~"mac_rx_⁄off.h
"

62 
	~"mac_ødio_defs.h
"

65 
	~"mac_as£π.h
"

72 
uöt8
 
	gmacSÀïSèã
 = 
MAC_SLEEP_STATE_RADIO_OFF
;

85 
	$macSÀïWakeUp
()

88 i‡(
macSÀïSèã
 =
MAC_SLEEP_STATE_AWAKE
)

94 
	`MAC_RADIO_TIMER_WAKE_UP
();

97 i‡(
macSÀïSèã
 =
MAC_SLEEP_STATE_RADIO_OFF
)

100 
	`MAC_RADIO_TURN_ON_POWER
();

103 
	`macRxRadioPowîUpInô
();

107 
	`MAC_ASSERT
(
macSÀïSèã
 =
MAC_SLEEP_STATE_OSC_OFF
);

110 
	`MAC_RADIO_TURN_ON_OSC
();

114 
macSÀïSèã
 = 
MAC_SLEEP_STATE_AWAKE
;

117 
	`macRxOnReque°
();

118 
	}
}

132 
uöt8
 
	$macSÀï
(
uöt8
 
¶ìpSèã
)

134 
hÆI¡Sèã_t
 
s
;

137 
	`HAL_ENTER_CRITICAL_SECTION
(
s
);

140 
	`MAC_ASSERT
(
macSÀïSèã
 =
MAC_SLEEP_STATE_AWAKE
);

141 
	`MAC_ASSERT
(
macRxFûãr
 =
RX_FILTER_OFF
);

144 i‡(
macRxA˘ive
 || 
macRxOutgoögAckFœg
 || 
macTxA˘ive
 || 
macRxE«bÀFœgs
)

146 
	`HAL_EXIT_CRITICAL_SECTION
(
s
);

147 (
FALSE
);

151 
	`macRxOff
();

154 
macSÀïSèã
 = 
¶ìpSèã
;

157 
	`HAL_EXIT_CRITICAL_SECTION
(
s
);

160 
	`MAC_RADIO_TIMER_SLEEP
();

163 i‡(
¶ìpSèã
 =
MAC_SLEEP_STATE_OSC_OFF
)

165 
	`MAC_RADIO_TURN_OFF_OSC
();

169 
	`MAC_ASSERT
(
¶ìpSèã
 =
MAC_SLEEP_STATE_RADIO_OFF
);

170 
	`MAC_RADIO_TURN_OFF_POWER
();

174 (
TRUE
);

175 
	}
}

183 #i‡((
MAC_SLEEP_STATE_AWAKE
 =
MAC_SLEEP_STATE_OSC_OFF
) || \

184 (
	gMAC_SLEEP_STATE_AWAKE
 =
MAC_SLEEP_STATE_RADIO_OFF
))

	@Components/mac/low_level/srf04/mac_sleep.h

40 #i‚de‡
MAC_SLEEP_H


41 
	#MAC_SLEEP_H


	)

47 
	~"hÆ_ty≥s.h
"

54 
	#MAC_SLEEP_STATE_AWAKE
 0x00

	)

61 
uöt8
 
macSÀïSèã
;

	@Components/mac/low_level/srf04/mac_tx.c

46 
	~"hÆ_ty≥s.h
"

47 
	~"hÆ_defs.h
"

48 
	~"hÆ_mcu.h
"

49 
	~"hÆ_mac_cfg.h
"

52 
	~"mac_•ec.h
"

53 
	~"mac_pib.h
"

56 
	~"mac_low_Àvñ.h
"

59 
	~"mac_tx.h
"

60 
	~"mac_backoff_timî.h
"

61 
	~"mac_rx.h
"

62 
	~"mac_rx_⁄off.h
"

63 
	~"mac_ødio.h
"

64 
	~"mac_¶ìp.h
"

67 
	~"mac_ødio_defs.h
"

70 
	~"mac_as£π.h
"

77 
	#MFR_LEN
 
MAC_FCS_FIELD_LEN


	)

78 
	#PREPENDED_BYTE_LEN
 1

	)

94 #i‚de‡
HAL_MAC_TX_SLOTTED_DELAY


95 
	#HAL_MAC_TX_SLOTTED_DELAY
 3

	)

97 
uöt8
 c⁄° 
	gmacTxSlŸãdDñay
 = 
HAL_MAC_TX_SLOTTED_DELAY
;

104 
uöt8
 
	gmacTxA˘ive
;

105 
uöt8
 
	gmacTxTy≥
;

106 
uöt8
 
	gmacTxBe
;

107 
uöt8
 
	gmacTxCsmaBackoffDñay
;

114 
uöt8
 
	gnb
;

115 
uöt8
 
	gtxSeqn
;

116 
uöt8
 
	gtxAckReq
;

117 
uöt8
 
	gtxRëønsmôFœg
;

124 
txCsmaPªp
();

125 
txGo
();

126 
txCsmaGo
();

127 
txCom∂ëe
(
uöt8
 
°©us
);

140 
	$macTxInô
()

142 
macTxA˘ive
 = 
MAC_TX_ACTIVE_NO_ACTIVITY
;

143 
txRëønsmôFœg
 = 0;

144 
	}
}

157 
	$macTxHÆtCÀ™up
()

159 
	`MAC_RADIO_TX_RESET
();

160 
	`macTxInô
();

161 
	}
}

175 
	$macTxFøme
(
uöt8
 
txTy≥
)

177 
	`MAC_ASSERT
(!
macTxA˘ive
);

180 
macTxA˘ive
 = 
MAC_TX_ACTIVE_INITIALIZE
;

188 i‡(
macSÀïSèã
 !
MAC_SLEEP_STATE_AWAKE
)

191 
	`txCom∂ëe
(
MAC_TX_ABORTED
);

198 
macTxTy≥
 = 
txTy≥
;

203 i‡(
macTxTy≥
 =
MAC_TX_TYPE_SLOTTED
)

205 
	`MAC_RADIO_TX_PREP_SLOTTED
();

209 
	`MAC_ASSERT
((
macTxTy≥
 =
MAC_TX_TYPE_SLOTTED_CSMA
Ë|| (macTxTy≥ =
MAC_TX_TYPE_UNSLOTTED_CSMA
));

211 
nb
 = 0;

212 
macTxBe
 = (
pMacD©aTx
->
öã∫Æ
.
txO±i⁄s
 & 
MAC_TXOPTION_ALT_BE
Ë? 
macPib
.
ÆtBe
 : macPib.
möBe
;

214 i‡((
macTxTy≥
 =
MAC_TX_TYPE_SLOTTED_CSMA
Ë&& (
macPib
.
b©tLi„Ext
))

216 
macTxBe
 = 
	`MIN
(2, macTxBe);

219 
	`txCsmaPªp
();

226 i‡(!
txRëønsmôFœg
)

228 
uöt8
 * 
p
;

229 
uöt8
 
ÀnMhrMsdu
;

231 
	`MAC_ASSERT
(
pMacD©aTx
 !
NULL
);

234 
txAckReq
 = 
	`MAC_ACK_REQUEST
(
pMacD©aTx
->
msdu
.
p
);

235 
txSeqn
 = 
	`MAC_SEQ_NUMBER
(
pMacD©aTx
->
msdu
.
p
);

238 
ÀnMhrMsdu
 = 
pMacD©aTx
->
msdu
.
Àn
;

241 
p
 = 
pMacD©aTx
->
msdu
.∞- 
PREPENDED_BYTE_LEN
;

244 *
p
 = 
ÀnMhrMsdu
 + 
MFR_LEN
;

252 
	`MAC_RADIO_FLUSH_TX_FIFO
();

255 
	`MAC_RADIO_WRITE_TX_FIFO
(
p
, 
PREPENDED_BYTE_LEN
 + 
ÀnMhrMsdu
);

267 
hÆI¡Sèã_t
 
s
;

269 
	`HAL_ENTER_CRITICAL_SECTION
(
s
);

270 i‡(!
macRxA˘ive
 && !
macRxOutgoögAckFœg
)

272 
macTxA˘ive
 = 
MAC_TX_ACTIVE_GO
;

273 
	`HAL_EXIT_CRITICAL_SECTION
(
s
);

274 
	`txGo
();

278 
macTxA˘ive
 = 
MAC_TX_ACTIVE_QUEUED
;

279 
	`HAL_EXIT_CRITICAL_SECTION
(
s
);

282 
	}
}

295 
	$txCsmaPªp
()

297 
macTxCsmaBackoffDñay
 = 
	`macRadioR™domByã
(Ë& ((1 << 
macTxBe
) - 1);

299 i‡(
macTxTy≥
 =
MAC_TX_TYPE_SLOTTED_CSMA
)

301 
	`MAC_RADIO_TX_PREP_CSMA_SLOTTED
();

305 
	`MAC_RADIO_TX_PREP_CSMA_UNSLOTTED
();

307 
	}
}

320 
	$txGo
()

327 
	`MAC_RADIO_CANCEL_ACK_TX_DONE_CALLBACK
();

328 
macRxOutgoögAckFœg
 = 0;

331 i‡(
macTxTy≥
 =
MAC_TX_TYPE_SLOTTED
)

333 
	`MAC_RADIO_TX_GO_SLOTTED
();

337 
	`txCsmaGo
();

339 
	}
}

352 
	$txCsmaGo
()

354 i‡(
macTxTy≥
 =
MAC_TX_TYPE_SLOTTED_CSMA
)

356 i‡(
macTxCsmaBackoffDñay
 >
	`macD©aTxTimeAvaûabÀ
())

358 
	`txCom∂ëe
(
MAC_NO_TIME
);

361 
	`MAC_RADIO_TX_GO_SLOTTED_CSMA
();

365 
	`MAC_RADIO_TX_GO_CSMA
();

367 
	}
}

380 
	$macTxFømeRëønsmô
()

382 
txRëønsmôFœg
 = 1;

383 
	`macTxFøme
(
macTxTy≥
);

384 
	}
}

398 
	$macTxSèπQueuedFøme
()

400 
hÆI¡Sèã_t
 
s
;

402 
	`MAC_ASSERT
(!
macRxA˘ive
 && !
macRxOutgoögAckFœg
);

408 
	`HAL_ENTER_CRITICAL_SECTION
(
s
);

409 i‡(
macTxA˘ive
 =
MAC_TX_ACTIVE_QUEUED
)

411 
macTxA˘ive
 = 
MAC_TX_ACTIVE_GO
;

412 
	`HAL_EXIT_CRITICAL_SECTION
(
s
);

413 
	`txGo
();

417 
	`HAL_EXIT_CRITICAL_SECTION
(
s
);

419 
	}
}

433 
	$macTxCh™√lBusyCÆlback
()

435 
	`MAC_ASSERT
((
macTxTy≥
 =
MAC_TX_TYPE_SLOTTED_CSMA
Ë|| (macTxTy≥ =
MAC_TX_TYPE_UNSLOTTED_CSMA
));

438 
macTxA˘ive
 = 
MAC_TX_ACTIVE_CHANNEL_BUSY
;

439 
	`macRxOffReque°
();

442 
nb
++;

443 i‡(
nb
 > 
macPib
.
maxCsmaBackoffs
)

445 
	`txCom∂ëe
(
MAC_CHANNEL_ACCESS_FAILURE
);

449 
macTxBe
 = 
	`MIN
(macTxBe+1, 
macPib
.
maxBe
);

450 
	`txCsmaPªp
();

451 
macTxA˘ive
 = 
MAC_TX_ACTIVE_GO
;

452 
	`txCsmaGo
();

454 
	}
}

467 
	$macTxD⁄eCÆlback
()

469 
hÆI¡Sèã_t
 
s
;

476 
	`HAL_ENTER_CRITICAL_SECTION
(
s
);

477 i‡(
macTxA˘ive
 =
MAC_TX_ACTIVE_GO
)

480 i‡(!
txAckReq
)

482 
macTxA˘ive
 = 
MAC_TX_ACTIVE_DONE
;

483 
	`HAL_EXIT_CRITICAL_SECTION
(
s
);

486 
	`txCom∂ëe
(
MAC_SUCCESS
);

497 
macTxA˘ive
 = 
MAC_TX_ACTIVE_LISTEN_FOR_ACK
;

498 
	`MAC_RADIO_TX_REQUEST_ACK_TIMEOUT_CALLBACK
();

499 
	`HAL_EXIT_CRITICAL_SECTION
(
s
);

504 
	`HAL_EXIT_CRITICAL_SECTION
(
s
);

506 
	}
}

521 
	$macTxAckRe˚ivedCÆlback
(
uöt8
 
£qn
, uöt8 
≥ndögFœg
)

523 
hÆI¡Sèã_t
 
s
;

526 
	`HAL_ENTER_CRITICAL_SECTION
(
s
);

527 i‡(
macTxA˘ive
 =
MAC_TX_ACTIVE_LISTEN_FOR_ACK
)

529 
macTxA˘ive
 = 
MAC_TX_ACTIVE_POST_ACK
;

530 
	`MAC_RADIO_TX_CANCEL_ACK_TIMEOUT_CALLBACK
();

531 
	`HAL_EXIT_CRITICAL_SECTION
(
s
);

534 i‡(
£qn
 =
txSeqn
)

540 i‡(
≥ndögFœg
)

542 
	`txCom∂ëe
(
MAC_ACK_PENDING
);

546 
	`txCom∂ëe
(
MAC_SUCCESS
);

552 
	`txCom∂ëe
(
MAC_NO_ACK
);

557 
	`HAL_EXIT_CRITICAL_SECTION
(
s
);

559 
	}
}

576 
	$macTxAckNŸRe˚ivedCÆlback
()

578 
hÆI¡Sèã_t
 
s
;

581 
	`HAL_ENTER_CRITICAL_SECTION
(
s
);

582 i‡(
macTxA˘ive
 =
MAC_TX_ACTIVE_LISTEN_FOR_ACK
)

584 
macTxA˘ive
 = 
MAC_TX_ACTIVE_POST_ACK
;

585 
	`MAC_RADIO_TX_CANCEL_ACK_TIMEOUT_CALLBACK
();

586 
	`HAL_EXIT_CRITICAL_SECTION
(
s
);

589 
	`txCom∂ëe
(
MAC_NO_ACK
);

593 
	`HAL_EXIT_CRITICAL_SECTION
(
s
);

595 
	}
}

609 
	$txCom∂ëe
(
uöt8
 
°©us
)

612 
txRëønsmôFœg
 = 0;

615 
macTxA˘ive
 = 
MAC_TX_ACTIVE_NO_ACTIVITY
;

618 
	`macRxOffReque°
();

621 
	`macRadioUpd©eTxPowî
();

628 
	`macRadioUpd©eCh™√l
();

631 
	`macTxCom∂ëeCÆlback
(
°©us
);

632 
	}
}

646 
	$macTxTime°ampCÆlback
()

648 
	`MAC_ASSERT
(
pMacD©aTx
 !
NULL
);

650 
pMacD©aTx
->
öã∫Æ
.
time°amp
 = 
	`macBackoffTimîC≠tuª
();

651 
pMacD©aTx
->
öã∫Æ
.
time°amp2
 = 
	`MAC_RADIO_TIMER_CAPTURE
();

652 
	}
}

665 
	$macTxCﬁlisi⁄WôhRxCÆlback
()

667 
	`macRxHÆtCÀ™up
();

668 
	}
}

676 #i‡(
MAC_TX_ACTIVE_NO_ACTIVITY
 != 0x00)

	@Components/mac/low_level/srf04/mac_tx.h

40 #i‚de‡
MAC_TX_H


41 
	#MAC_TX_H


	)

47 
	~"hÆ_ty≥s.h
"

55 
	#MAC_TX_ACTIVE_PHYSICALLY_BV
 0x80

	)

58 
	#MAC_TX_ACTIVE_NO_ACTIVITY
 0x00

	)

59 
	#MAC_TX_ACTIVE_INITIALIZE
 0x01

	)

60 
	#MAC_TX_ACTIVE_QUEUED
 0x02

	)

61 
	#MAC_TX_ACTIVE_GO
 (0x03 | 
MAC_TX_ACTIVE_PHYSICALLY_BV
)

	)

62 
	#MAC_TX_ACTIVE_CHANNEL_BUSY
 0x04

	)

63 
	#MAC_TX_ACTIVE_DONE
 (0x05 | 
MAC_TX_ACTIVE_PHYSICALLY_BV
)

	)

64 
	#MAC_TX_ACTIVE_LISTEN_FOR_ACK
 (0x06 | 
MAC_TX_ACTIVE_PHYSICALLY_BV
)

	)

65 
	#MAC_TX_ACTIVE_POST_ACK
 (0x07 | 
MAC_TX_ACTIVE_PHYSICALLY_BV
)

	)

72 
	#MAC_TX_IS_PHYSICALLY_ACTIVE
(Ë(
macTxA˘ive
 & 
MAC_TX_ACTIVE_PHYSICALLY_BV
)

	)

79 
uöt8
 
macTxA˘ive
;

80 
uöt8
 
macTxBe
;

81 
uöt8
 
macTxTy≥
;

82 
uöt8
 
macTxCsmaBackoffDñay
;

89 
macTxInô
();

90 
macTxHÆtCÀ™up
();

91 
macTxSèπQueuedFøme
();

92 
macTxCh™√lBusyCÆlback
();

93 
macTxD⁄eCÆlback
();

94 
macTxAckRe˚ivedCÆlback
(
uöt8
 
£qn
, uöt8 
≥ndögFœg
);

95 
macTxAckNŸRe˚ivedCÆlback
();

96 
macTxTime°ampCÆlback
();

97 
macTxCﬁlisi⁄WôhRxCÆlback
();

	@Components/mac/low_level/srf04/single_chip/mac_csp_tx.c

46 
	~"hÆ_ty≥s.h
"

47 
	~"hÆ_mcu.h
"

50 
	~"mac_•ec.h
"

51 
	~"mac_pib.h
"

54 
	~"mac_low_Àvñ.h
"

57 
	~"mac_c•_tx.h
"

58 
	~"mac_tx.h
"

59 
	~"mac_rx.h
"

60 
	~"mac_rx_⁄off.h
"

63 
	~"mac_ødio_defs.h
"

66 
	~"mac_as£π.h
"

74 
	#ISSTART
 0xE1

	)

75 
	#ISSTOP
 0xE2

	)

76 
	#ISCLEAR
 0xFF

	)

79 
	#SKIP
(
s
,
c
Ë(0x00 | (((sË& 0x07Ë<< 4Ë| ((cË& 0x0F)Ë

	)

80 
	#WHILE
(
c
Ë
	`SKIP
(0,cË

	)

81 
	#WAITW
(
w
Ë(0x80 | ((wË& 0x1F)Ë

	)

82 
	#WEVENT1
 (0xB8Ë

	)

83 
	#WAITX
 (0xBCË

	)

84 
	#LABEL
 (0xBBË

	)

85 
	#RPT
(
c
Ë(0xA0 | ((cË& 0x0F)Ë

	)

86 
	#INT
 (0xBAË

	)

87 
	#INCY
 (0xC1Ë

	)

88 
	#INCMAXY
(
m
Ë(0xC8 | ((mË& 0x07)Ë

	)

89 
	#DECY
 (0xC4Ë

	)

90 
	#DECZ
 (0xC5Ë

	)

91 
	#RANDXY
 (0xBDË

	)

94 
	#SSTOP
 (0xD2Ë

	)

95 
	#SNOP
 (0xD0Ë

	)

96 
	#STXCAL
 (0xDCË

	)

97 
	#SRXON
 (0xD3Ë

	)

98 
	#STXON
 (0xD9Ë

	)

99 
	#STXONCCA
 (0xDAË

	)

100 
	#SRFOFF
 (0xDFË

	)

101 
	#SFLUSHRX
 (0xDDË

	)

102 
	#SFLUSHTX
 (0xDEË

	)

103 
	#SACK
 (0xD6Ë

	)

104 
	#SACKPEND
 (0xD7Ë

	)

107 
	#C_CCA_IS_VALID
 0x00

	)

108 
	#C_SFD_IS_ACTIVE
 0x01

	)

109 
	#C_CPU_CTRL_IS_ON
 0x02

	)

110 
	#C_END_INSTR_MEM
 0x03

	)

111 
	#C_CSPX_IS_ZERO
 0x04

	)

112 
	#C_CSPY_IS_ZERO
 0x05

	)

113 
	#C_CSPZ_IS_ZERO
 0x06

	)

116 
	#C_NEGATE
(
c
Ë((cË| 0x08)

	)

117 
	#C_CCA_IS_INVALID
 
	`C_NEGATE
(
C_CCA_IS_VALID
)

	)

118 
	#C_SFD_IS_INACTIVE
 
	`C_NEGATE
(
C_SFD_IS_ACTIVE
)

	)

119 
	#C_CPU_CTRL_IS_OFF
 
	`C_NEGATE
(
C_CPU_CTRL_IS_ON
)

	)

120 
	#C_NOT_END_INSTR_MEM
 
	`C_NEGATE
(
C_END_INSTR_MEM
)

	)

121 
	#C_CSPX_IS_NON_ZERO
 
	`C_NEGATE
(
C_CSPX_IS_ZERO
)

	)

122 
	#C_CSPY_IS_NON_ZERO
 
	`C_NEGATE
(
C_CSPY_IS_ZERO
)

	)

123 
	#C_CSPZ_IS_NON_ZERO
 
	`C_NEGATE
(
C_CSPZ_IS_ZERO
)

	)

132 
	#CSPZ_CODE_TX_DONE
 0

	)

133 
	#CSPZ_CODE_CHANNEL_BUSY
 1

	)

134 
	#CSPZ_CODE_TX_ACK_TIME_OUT
 2

	)

141 
c•PªpF‹TxProgøm
();

142 
c•WevítSëTriggîNow
();

143 
c•WevítSëTriggîSymbﬁs
(
uöt8
 
symbﬁs
);

144 
uöt8
 
c•RódCou¡Symbﬁs
();

152 
	#CSP_STOP_AND_CLEAR_PROGRAM
(Ë
	`°
–
RFST
 = 
ISSTOP
; RFST = 
ISCLEAR
; )

	)

153 
	#CSP_START_PROGRAM
(Ë
	`°
–
RFST
 = 
ISSTART
; )

	)

171 
	#T2THD_TICKS_PER_SYMBOL
 (
	`MAC_RADIO_TIMER_TICKS_PER_SYMBOL
(Ë>> 8)

	)

173 
	#CSP_WEVENT_CLEAR_TRIGGER
(Ë
	`°
–
T2IRQF
 &~
TIMER2_COMPARE1F
; )

	)

174 
	#CSP_WEVENT_SET_TRIGGER_NOW
(Ë
	`c•WevítSëTriggîNow
()

	)

175 
	#CSP_WEVENT_SET_TRIGGER_SYMBOLS
(
x
Ë
	`c•WevítSëTriggîSymbﬁs
(x)

	)

176 
	#CSP_WEVENT_READ_COUNT_SYMBOLS
(Ë
	`c•RódCou¡Symbﬁs
()

	)

184 
	#SLOTTED_TX_MAX_BACKOFF_COUNTDOWN_NUM_BITS
 4

	)

185 
	#SLOTTED_TX_MAX_BACKOFF_COUNTDOWN
 (1 << 
SLOTTED_TX_MAX_BACKOFF_COUNTDOWN_NUM_BITS
)

	)

186 
	#SLOTTED_TX_BACKOFF_COUNT_ALIGN_BIT_MASK
 (
SLOTTED_TX_MAX_BACKOFF_COUNTDOWN
 - 1)

	)

199 
	$macC•TxRe£t
()

201 
	`MAC_MCU_CSP_STOP_DISABLE_INTERRUPT
();

202 
	`MAC_MCU_CSP_INT_DISABLE_INTERRUPT
();

203 
	`CSP_STOP_AND_CLEAR_PROGRAM
();

204 
	}
}

217 
	$c•WevítSëTriggîNow
()

219 
hÆI¡Sèã_t
 
s
;

220 
uöt8
 
ãmp0
, 
ãmp1
;

223 
	`CSP_WEVENT_CLEAR_TRIGGER
();

226 
	`HAL_ENTER_CRITICAL_SECTION
(
s
);

227 
	`MAC_MCU_T2_ACCESS_COUNT_VALUE
();

228 
ãmp0
 = 
T2M0
;

229 
ãmp1
 = 
T2M1
;

234 i‡((
macChùVîsi⁄
 <
REV_B
Ë&& (
ãmp0
 =0Ë&& (
ãmp1
 == 0))

236 
ãmp0
++;

239 
	`MAC_MCU_T2_ACCESS_CMP1_VALUE
();

240 
T2M0
 = 
ãmp0
;

241 
T2M1
 = 
ãmp1
;

242 
	`HAL_EXIT_CRITICAL_SECTION
(
s
);

243 
	}
}

256 
	$c•WevítSëTriggîSymbﬁs
(
uöt8
 
symbﬁs
)

258 
hÆI¡Sèã_t
 
s
;

259 
uöt16
 
cmp
;

261 
	`MAC_ASSERT
(
symbﬁs
 <
MAC_A_UNIT_BACKOFF_PERIOD
);

264 
	`CSP_WEVENT_CLEAR_TRIGGER
();

266 
	`HAL_ENTER_CRITICAL_SECTION
(
s
);

267 
	`MAC_MCU_T2_ACCESS_CMP1_VALUE
();

268 
cmp
 = (
symbﬁs
Ë* 
	`MAC_RADIO_TIMER_TICKS_PER_SYMBOL
();

273 i‡((
macChùVîsi⁄
 <
REV_B
Ë&& (
cmp
 == 0))

275 
cmp
++;

277 
T2M0
 = (
cmp
 & 0xFF);

278 
T2M1
 = (
cmp
 >> 8);

279 
	`HAL_EXIT_CRITICAL_SECTION
(
s
);

280 
	}
}

293 
uöt8
 
	$c•RódCou¡Symbﬁs
()

295 
uöt8
 
cou¡Low
, 
cou¡High
;

296 
hÆI¡Sèã_t
 
s
;

298 
	`HAL_ENTER_CRITICAL_SECTION
(
s
);

299 
	`MAC_MCU_T2_ACCESS_COUNT_VALUE
();

300 
cou¡Low
 = 
T2M0
;

301 
cou¡High
 = 
T2M1
;

302 
	`HAL_EXIT_CRITICAL_SECTION
(
s
);

304  (((
cou¡High
 << 8Ë| 
cou¡Low
Ë/ 
	`MAC_RADIO_TIMER_TICKS_PER_SYMBOL
());

305 
	}
}

319 
	$c•PªpF‹TxProgøm
()

321 
	`MAC_ASSERT
(!(
RFIRQM1
 & 
IM_CSP_STOP
));

324 
	`MAC_MCU_CONFIG_CSP_EVENT1
();

327 
CSPZ
 = 
CSPZ_CODE_CHANNEL_BUSY
;

330 
	`CSP_STOP_AND_CLEAR_PROGRAM
();

331 
	`MAC_MCU_CSP_STOP_CLEAR_INTERRUPT
();

332 
	`MAC_MCU_CSP_INT_CLEAR_INTERRUPT
();

333 
	}
}

346 
	$macC•TxPªpCsmaUn¶Ÿãd
()

348 
	`c•PªpF‹TxProgøm
();

358 
RFST
 = 
WAITX
;

359 
RFST
 = 
WEVENT1
;

362 
RFST
 = 
	`WAITW
(1);

363 
RFST
 = 
WEVENT1
;

366 
RFST
 = 
	`SKIP
(1, 
C_CCA_IS_VALID
);

367 
RFST
 = 
SSTOP
;

370 
RFST
 = 
STXON
;

379 
RFST
 = 
	`WHILE
(
C_SFD_IS_ACTIVE
);

380 
RFST
 = 
	`WHILE
(
C_SFD_IS_INACTIVE
);

387 
RFST
 = 
INT
;

393 
RFST
 = 
	`WHILE
(
C_SFD_IS_ACTIVE
);

394 
RFST
 = 
DECZ
;

399 
RFST
 = 
SSTOP
;

400 
	}
}

413 
	$macC•TxPªpCsmaSlŸãd
()

415 
	`c•PªpF‹TxProgøm
();

422 
RFST
 = 
WAITX
;

425 
RFST
 = 
	`WAITW
(1);

428 
RFST
 = 
	`SKIP
(1, 
C_CCA_IS_VALID
);

429 
RFST
 = 
SSTOP
;

432 
RFST
 = 
	`WAITW
(1);

435 
RFST
 = 
	`SKIP
(1, 
C_CCA_IS_VALID
);

436 
RFST
 = 
SSTOP
;

439 
RFST
 = 
STXON
;

448 
RFST
 = 
	`WHILE
(
C_SFD_IS_ACTIVE
);

449 
RFST
 = 
	`WHILE
(
C_SFD_IS_INACTIVE
);

456 
RFST
 = 
INT
;

462 
RFST
 = 
	`WHILE
(
C_SFD_IS_ACTIVE
);

463 
RFST
 = 
DECZ
;

468 
RFST
 = 
SSTOP
;

469 
	}
}

485 
	$macC•TxGoCsma
()

492 
CSPX
 = 
macTxCsmaBackoffDñay
;

493 i‡(
CSPX
 != 0)

495 
CSPX
--;

502 
	`CSP_WEVENT_SET_TRIGGER_NOW
();

509 
	`MAC_MCU_CSP_STOP_ENABLE_INTERRUPT
();

510 
	`MAC_MCU_CSP_INT_ENABLE_INTERRUPT
();

516 
	`macRxOn
();

519 
	`CSP_START_PROGRAM
();

520 
	}
}

534 
	$macC•TxPªpSlŸãd
()

536 
	`c•PªpF‹TxProgøm
();

543 
RFST
 = 
WAITX
;

546 
RFST
 = 
STXON
;

555 
RFST
 = 
	`WHILE
(
C_SFD_IS_ACTIVE
);

556 
RFST
 = 
	`WHILE
(
C_SFD_IS_INACTIVE
);

563 
RFST
 = 
INT
;

569 
RFST
 = 
	`WHILE
(
C_SFD_IS_ACTIVE
);

570 
RFST
 = 
DECZ
;

575 
RFST
 = 
SSTOP
;

577 
	}
}

592 
	$macC•TxGoSlŸãd
()

594 
hÆI¡Sèã_t
 
s
;

595 
uöt8
 
lowByãOfBackoffCou¡
;

596 
uöt8
 
backoffCou¡down
;

603 
	`MAC_MCU_CSP_STOP_ENABLE_INTERRUPT
();

604 
	`MAC_MCU_CSP_INT_ENABLE_INTERRUPT
();

607 
	`HAL_ENTER_CRITICAL_SECTION
(
s
);

610 
	`MAC_MCU_T2_ACCESS_OVF_COUNT_VALUE
();

613 
T2M0
;

614 
lowByãOfBackoffCou¡
 = 
T2MOVF0
;

622 
backoffCou¡down
 = 
SLOTTED_TX_MAX_BACKOFF_COUNTDOWN
 - (
lowByãOfBackoffCou¡
 & 
SLOTTED_TX_BACKOFF_COUNT_ALIGN_BIT_MASK
) - 1;

632 
CSPX
 = 
backoffCou¡down
;

635 
	`macRxH¨dDißbÀ
();

643 
	`MAC_RX_WAS_FORCED_ON
();

646 
	`CSP_START_PROGRAM
();

670 
	`MAC_MCU_T2_ACCESS_OVF_COUNT_VALUE
();

673 
T2M0
;

674 i‡((
lowByãOfBackoffCou¡
 !
T2MOVF0
Ë&& (
backoffCou¡down
 > 1))

676 
CSPX
 = 
backoffCou¡down
 - 1;

679 
	`HAL_EXIT_CRITICAL_SECTION
(
s
);

680 
	}
}

695 
	$macC•F‹˚TxD⁄eIfPídög
()

697 i‡((
CSPZ
 =
CSPZ_CODE_TX_DONE
Ë&& 
	`MAC_MCU_CSP_STOP_INTERRUPT_IS_ENABLED
())

699 
	`MAC_MCU_CSP_STOP_DISABLE_INTERRUPT
();

700 i‡(
	`MAC_MCU_CSP_INT_INTERRUPT_IS_ENABLED
())

702 
	`macC•TxI¡I§
();

704 
	`macTxD⁄eCÆlback
();

706 
	}
}

720 
	$macC•TxReque°AckTimeoutCÆlback
()

722 
uöt8
 
°¨tSymbﬁ
;

723 
uöt8
 
symbﬁs
;

724 
uöt8
 
rﬁlovîs
;

726 
	`MAC_ASSERT
(!(
RFIRQM1
 & 
IM_CSP_STOP
));

729 
°¨tSymbﬁ
 = 
	`CSP_WEVENT_READ_COUNT_SYMBOLS
();

732 
symbﬁs
 = 
macPib
.
ackWaôDuøti⁄
;

735 
	`MAC_ASSERT
(
symbﬁs
 > 
MAC_A_UNIT_BACKOFF_PERIOD
);

738 
symbﬁs
 = symbﬁ†- (
MAC_A_UNIT_BACKOFF_PERIOD
 - 
°¨tSymbﬁ
);

741 
rﬁlovîs
 = 
symbﬁs
 / 
MAC_A_UNIT_BACKOFF_PERIOD
;

744 
symbﬁs
 = symbﬁ†- (
rﬁlovîs
 * 
MAC_A_UNIT_BACKOFF_PERIOD
);

747 
rﬁlovîs
++;

750 
CSPZ
 = 
CSPZ_CODE_TX_ACK_TIME_OUT
;

751 
CSPX
 = 
rﬁlovîs
;

752 
	`CSP_WEVENT_SET_TRIGGER_SYMBOLS
(
symbﬁs
);

755 
	`CSP_STOP_AND_CLEAR_PROGRAM
();

756 
	`MAC_MCU_CSP_STOP_CLEAR_INTERRUPT
();

761 
RFST
 = 
WAITX
;

762 
RFST
 = 
WEVENT1
;

763 
RFST
 = 
SSTOP
;

769 
	`MAC_MCU_CSP_STOP_ENABLE_INTERRUPT
();

770 
	`CSP_START_PROGRAM
();

780 i‡(
	`CSP_WEVENT_READ_COUNT_SYMBOLS
(Ë< 
°¨tSymbﬁ
)

783 i‡(
CSPX
 =
rﬁlovîs
)

796 
CSPX
--;

799 
	}
}

812 
	$macC•TxC™˚lAckTimeoutCÆlback
()

814 
	`MAC_MCU_CSP_STOP_DISABLE_INTERRUPT
();

815 
	`CSP_STOP_AND_CLEAR_PROGRAM
();

816 
	}
}

833 
	$macC•TxI¡I§
()

835 
	`MAC_MCU_CSP_INT_DISABLE_INTERRUPT
();

838 
	`macTxTime°ampCÆlback
();

839 
	}
}

858 
	$macC•TxSt›I§
()

860 
	`MAC_MCU_CSP_STOP_DISABLE_INTERRUPT
();

862 i‡(
CSPZ
 =
CSPZ_CODE_TX_DONE
)

864 
	`macTxD⁄eCÆlback
();

866 i‡(
CSPZ
 =
CSPZ_CODE_CHANNEL_BUSY
)

868 
	`macTxCh™√lBusyCÆlback
();

872 
	`MAC_ASSERT
(
CSPZ
 =
CSPZ_CODE_TX_ACK_TIME_OUT
);

873 
	`macTxAckNŸRe˚ivedCÆlback
();

875 
	}
}

884 #i‡((
CSPZ_CODE_TX_DONE
 !0Ë|| (
CSPZ_CODE_CHANNEL_BUSY
 != 1))

888 #i‡(
MAC_TX_TYPE_SLOTTED_CSMA
 != 0)

892 #i‡(
T2THD_TICKS_PER_SYMBOL
 == 0)

896 
	#BACKOFFS_PER_BASE_SUPERFRAME
 (
MAC_A_BASE_SLOT_DURATION
 * 
MAC_A_NUM_SUPERFRAME_SLOTS
)

	)

897 #i‡(((
BACKOFFS_PER_BASE_SUPERFRAME
 - 1Ë& 
SLOTTED_TX_BACKOFF_COUNT_ALIGN_BIT_MASK
) != SLOTTED_TX_BACKOFF_COUNT_ALIGN_BIT_MASK)

908 #i‡(
SLOTTED_TX_MAX_BACKOFF_COUNTDOWN_NUM_BITS
 < 2)

	@Components/mac/low_level/srf04/single_chip/mac_csp_tx.h

40 #i‚de‡
MAC_CSP_TX_H


41 
	#MAC_CSP_TX_H


	)

47 
	~"hÆ_mcu.h
"

48 
	~"mac_mcu.h
"

55 
macC•TxRe£t
();

57 
macC•TxPªpCsmaUn¶Ÿãd
();

58 
macC•TxPªpCsmaSlŸãd
();

59 
macC•TxPªpSlŸãd
();

61 
macC•TxGoCsma
();

62 
macC•TxGoSlŸãd
();

64 
macC•F‹˚TxD⁄eIfPídög
();

66 
macC•TxReque°AckTimeoutCÆlback
();

67 
macC•TxC™˚lAckTimeoutCÆlback
();

69 
macC•TxSt›I§
();

70 
macC•TxI¡I§
();

	@Components/mac/low_level/srf04/single_chip/mac_mcu.c

46 
	~"hÆ_defs.h
"

47 
	~"hÆ_mcu.h
"

50 
	~"mac_rx.h
"

51 
	~"mac_tx.h
"

52 
	~"mac_backoff_timî.h
"

53 
	~"mac_c•_tx.h
"

54 
	~"mac_rx_⁄off.h
"

55 
	~"mac_low_Àvñ.h
"

58 
	~"mac_mcu.h
"

59 
	~"mac_ødio_defs.h
"

62 
	~"mac_as£π.h
"

70 #i‡!
deföed
 (
OSC32K_CRYSTAL_INSTALLED
Ë|| (deföed (OSC32K_CRYSTAL_INSTALLEDË&& (OSC32K_CRYSTAL_INSTALLED =
TRUE
))

71 
	#T2CNF_BASE_VALUE
 (
RUN
 | 
SYNC
)

	)

73 
	#T2CNF_BASE_VALUE
 
RUN


	)

77 #i‡
HAL_MCU_LITTLE_ENDIAN
()

78 
	#UINT32_NDX0
 0

	)

79 
	#UINT32_NDX1
 1

	)

80 
	#UINT32_NDX2
 2

	)

81 
	#UINT32_NDX3
 3

	)

83 
	#UINT32_NDX0
 3

	)

84 
	#UINT32_NDX1
 2

	)

85 
	#UINT32_NDX2
 1

	)

86 
	#UINT32_NDX3
 0

	)

93 
uöt8
 
	gmacChùVîsi⁄
 = 0;

94 
öt8
 
	gmaxRssi
;

102 
uöt32
 
	gaccumuœãdOvîÊowCou¡
 = 0;

108 
mcuRec‹dMaxRssiI§
();

109 
uöt32
 
macMcuOvîÊowGëCom∑ª
();

122 
	$macMcuInô
()

124 
hÆI¡Sèã_t
 
s
;

132 
MDMCTRL1
 = 
CORR_THR
;

135 
RXCTRL
 = 0x3F;

139 
CCACTRL0
 = 
CCA_THR
;

144 
MDMCTRL0
 = 0x85;

147 
FSCTRL
 = 0x5A;

150 
FSCAL1
 = 0x00;

153 
AGCCTRL1
 = 0x15;

156 
SRCMATCH
 = 0;

159 
ADCTEST0
 = 0x10;

160 
ADCTEST1
 = 0x0E;

161 
ADCTEST2
 = 0x03;

166 
TXFILTCFG
 = 
TXFILTCFG_RESET_VALUE
;

169 
CSPT
 = 0xFF;

172 
IEN2
 |
RFIE
;

175 
IEN0
 |
RFERRIE
;

178 
IP0
 |
IP_RFERR_RF_DMA_BV
;

179 
IP1
 &~
IP_RFERR_RF_DMA_BV
;

182 
macChùVîsi⁄
 = 
CHVER
;

189 
	`HAL_ENTER_CRITICAL_SECTION
(
s
);

190 
	`MAC_MCU_T2_ACCESS_PERIOD_VALUE
();

191 
T2M0
 = 
	`MAC_RADIO_TIMER_TICKS_PER_BACKOFF
() & 0xFF;

192 
T2M1
 = 
	`MAC_RADIO_TIMER_TICKS_PER_BACKOFF
() >> 8;

193 
	`HAL_EXIT_CRITICAL_SECTION
(
s
);

196 
	`MAC_RADIO_TIMER_WAKE_UP
();

199 
T2CTRL
 |
LATCH_MODE
;

202 
T2IE
 = 1;

212 
FRMCTRL0
 = 
FRMCTRL0_RESET_VALUE
 | 
RX_MODE_INFINITE_RECEPTION
;

215 
	`macRxOn
();

221 !(
RSSISTAT
 & 0x01));

225 
uöt16
 
∫dSìd
;

226 
uöt8
 
i
;

228 
∫dSìd
 = 0;

230 
i
=0; i<16; i++)

233 
∫dSìd
 = (∫dSìd << 1Ë| (
RFRND
 & 0x01);

241 i‡(
∫dSìd
 == 0x0000 ||ÑndSeed == 0x0380)

243 
∫dSìd
 = 0xBABE;

250 
RNDL
 = 
∫dSìd
 & 0xFF;

251 
RNDL
 = 
∫dSìd
 >> 8;

255 
	`macRxOff
();

258 
FRMCTRL0
 = 
FRMCTRL0_RESET_VALUE
 | 
RX_MODE_NORMAL_OPERATION
;

261 
	`MAC_RADIO_TURN_ON_AUTO_ACK
();

264 
	`MAC_RADIO_SRC_MATCH_INIT_EXTPENDEN
();

265 
	`MAC_RADIO_SRC_MATCH_INIT_SHORTPENDEN
();

266 
	}
}

280 
uöt8
 
	$macMcuR™domByã
()

283 
ADCCON1
 = (ADCCON1 & ~
RCTRL_BITS
Ë| 
RCTRL_CLOCK_LFSR
;

286 (
RNDH
);

287 
	}
}

299 
	$macMcuTimîF‹˚Dñay
(
uöt16
 
x
)

301 
hÆI¡Sèã_t
 
s
;

303 
	`HAL_ENTER_CRITICAL_SECTION
(
s
);

304 
	`MAC_MCU_T2_ACCESS_COUNT_VALUE
();

305 
T2M0
 = (
x
) & 0xFF;

306 
T2M1
 = (
x
) >> 8;

307 
	`HAL_EXIT_CRITICAL_SECTION
(
s
);

308 
	}
}

321 
uöt16
 
	$macMcuTimîC≠tuª
()

323 
uöt16
 
timîC≠tuª
;

324 
hÆI¡Sèã_t
 
s
;

326 
	`HAL_ENTER_CRITICAL_SECTION
(
s
);

327 
	`MAC_MCU_T2_ACCESS_CAPTURE_VALUE
();

328 
timîC≠tuª
 = 
T2M1
 << 8;

329 
timîC≠tuª
 |
T2M0
;

330 
	`HAL_EXIT_CRITICAL_SECTION
(
s
);

332  (
timîC≠tuª
);

333 
	}
}

347 
uöt32
 
	$macMcuOvîÊowCou¡
()

349 
uöt32
 
ovîÊowCou¡
;

350 
hÆI¡Sèã_t
 
s
;

354 
	`HAL_ENTER_CRITICAL_SECTION
(
s
);

357 
	`MAC_MCU_T2_ACCESS_OVF_COUNT_VALUE
();

360 
T2M0
;

361 ((
uöt8
 *)&
ovîÊowCou¡
)[
UINT32_NDX0
] = 
T2MOVF0
;

362 ((
uöt8
 *)&
ovîÊowCou¡
)[
UINT32_NDX1
] = 
T2MOVF1
;

363 ((
uöt8
 *)&
ovîÊowCou¡
)[
UINT32_NDX2
] = 
T2MOVF2
;

364 ((
uöt8
 *)&
ovîÊowCou¡
)[
UINT32_NDX3
] = 0;

365 
	`HAL_EXIT_CRITICAL_SECTION
(
s
);

367  (
ovîÊowCou¡
);

368 
	}
}

382 
uöt32
 
	$macMcuOvîÊowC≠tuª
()

384 
uöt32
 
ovîÊowC≠tuª
;

385 
hÆI¡Sèã_t
 
s
;

388 
	`HAL_ENTER_CRITICAL_SECTION
(
s
);

389 
	`MAC_MCU_T2_ACCESS_OVF_CAPTURE_VALUE
();

390 ((
uöt8
 *)&
ovîÊowC≠tuª
)[
UINT32_NDX0
] = 
T2MOVF0
;

391 ((
uöt8
 *)&
ovîÊowC≠tuª
)[
UINT32_NDX1
] = 
T2MOVF1
;

392 ((
uöt8
 *)&
ovîÊowC≠tuª
)[
UINT32_NDX2
] = 
T2MOVF2
;

393 ((
uöt8
 *)&
ovîÊowC≠tuª
)[
UINT32_NDX3
] = 0;

394 
	`HAL_EXIT_CRITICAL_SECTION
(
s
);

396  (
ovîÊowC≠tuª
);

397 
	}
}

410 
	$macMcuOvîÊowSëCou¡
(
uöt32
 
cou¡
)

412 
hÆI¡Sèã_t
 
s
;

414 
	`MAC_ASSERT
(! (
cou¡
 >> 24) );

417 
accumuœãdOvîÊowCou¡
 +
	`macMcuOvîÊowCou¡
();

420 
accumuœãdOvîÊowCou¡
 -
cou¡
;

422 
	`HAL_ENTER_CRITICAL_SECTION
(
s
);

423 
	`MAC_MCU_T2_ACCESS_OVF_COUNT_VALUE
();

427 
T2MOVF0
 = ((
uöt8
 *)&
cou¡
)[
UINT32_NDX0
];

428 
T2MOVF1
 = ((
uöt8
 *)&
cou¡
)[
UINT32_NDX1
];

429 
T2MOVF2
 = ((
uöt8
 *)&
cou¡
)[
UINT32_NDX2
];

430 
	`HAL_EXIT_CRITICAL_SECTION
(
s
);

431 
	}
}

445 
	$macMcuOvîÊowSëCom∑ª
(
uöt32
 
cou¡
)

447 
hÆI¡Sèã_t
 
s
;

448 
uöt8
 
íabÀCom∑ªI¡
 = 0;

450 
	`MAC_ASSERT
–!(
cou¡
 >> 24) );

452 
	`HAL_ENTER_CRITICAL_SECTION
(
s
);

455 i‡(
T2IRQM
 & 
TIMER2_OVF_COMPARE1M
)

457 
íabÀCom∑ªI¡
 = 1;

458 
T2IRQM
 &~
TIMER2_OVF_COMPARE1M
;

461 
	`MAC_MCU_T2_ACCESS_OVF_CMP1_VALUE
();

464 
T2MOVF0
 = ((
uöt8
 *)&
cou¡
)[
UINT32_NDX0
];

465 
T2MOVF1
 = ((
uöt8
 *)&
cou¡
)[
UINT32_NDX1
];

466 
T2MOVF2
 = ((
uöt8
 *)&
cou¡
)[
UINT32_NDX2
];

472 
T2IRQF
 &~
TIMER2_OVF_COMPARE1F
;

475 i‡(
íabÀCom∑ªI¡
)

477 
T2IRQM
 |
TIMER2_OVF_COMPARE1M
;

480 
	`HAL_EXIT_CRITICAL_SECTION
(
s
);

481 
	}
}

494 
uöt32
 
	$macMcuOvîÊowGëCom∑ª
()

496 
hÆI¡Sèã_t
 
s
;

497 
uöt32
 
com∑ª
;

499 
	`HAL_ENTER_CRITICAL_SECTION
(
s
);

501 
	`MAC_MCU_T2_ACCESS_OVF_CMP1_VALUE
();

504 ((
uöt8
 *)&
com∑ª
)[
UINT32_NDX0
] = 
T2MOVF0
;

505 ((
uöt8
 *)&
com∑ª
)[
UINT32_NDX1
] = 
T2MOVF1
;

506 ((
uöt8
 *)&
com∑ª
)[
UINT32_NDX2
] = 
T2MOVF2
;

507 ((
uöt8
 *)&
com∑ª
)[
UINT32_NDX3
] = 0;

509 
	`HAL_EXIT_CRITICAL_SECTION
(
s
);

511 (
com∑ª
);

512 
	}
}

525 
	$HAL_ISR_FUNCTION
–
macMcuTimî2I§
, 
T2_VECTOR
 )

527 
uöt8
 
t2úqm
 = 
T2IRQM
;

528 
uöt8
 
t2úqf
 = 
T2IRQF
;

534 i‡((
t2úqf
 & 
TIMER2_OVF_COMPARE1F
Ë& 
t2úqm
)

538 
	`macBackoffTimîCom∑ªI§
();

541 
T2IRQF
 &~
TIMER2_OVF_COMPARE1F
;

547 i‡((
t2úqf
 & 
TIMER2_PERF
Ë& 
t2úqm
)

550 
	`mcuRec‹dMaxRssiI§
();

553 
T2IRQF
 &~
TIMER2_PERF
;

555 
	}
}

570 
	$macMcuTimî2OvîÊowW‹k¨ound
()

572 i‡(
T2IRQM
 & 
TIMER2_OVF_COMPARE1F
)

575 i‡(!(
T2IRQF
 & 
TIMER2_OVF_COMPARE1F
))

577 i‡(
	`MAC_RADIO_BACKOFF_COUNT
(Ë> 
	`macMcuOvîÊowGëCom∑ª
())

580 
	`macBackoffTimîCom∑ªI§
();

581 
T2IRQF
 &~
TIMER2_OVF_COMPARE1F
;

585 
	}
}

599 
uöt16
 
	$macMcuPªcisi⁄Cou¡
()

601 
uöt16
 
ovîÊowCou¡
;

602 
hÆI¡Sèã_t
 
s
;

604 
	`HAL_ENTER_CRITICAL_SECTION
(
s
);

607 
	`MAC_MCU_T2_ACCESS_OVF_COUNT_VALUE
();

612 
T2M0
;

613 ((
uöt8
 *)&
ovîÊowCou¡
)[
UINT32_NDX0
] = 
T2MOVF0
;

614 ((
uöt8
 *)&
ovîÊowCou¡
)[
UINT32_NDX1
] = 
T2MOVF1
;

615 
	`HAL_EXIT_CRITICAL_SECTION
(
s
);

620 
ovîÊowCou¡
 +(
uöt16
)
accumuœãdOvîÊowCou¡
;

622 (
ovîÊowCou¡
);

623 
	}
}

637 
	$HAL_ISR_FUNCTION
–
macMcuRfI§
, 
RF_VECTOR
 )

639 
uöt8
 
rfim
;

641 
rfim
 = 
RFIRQM1
;

646 
S1CON
 = 0x00;

648 i‡((
RFIRQF1
 & 
IRQ_CSP_MANINT
Ë& 
rfim
)

656 
RFIRQF1
 = ~
IRQ_CSP_MANINT
;

657 
	`macC•TxI¡I§
();

659 i‡((
RFIRQF1
 & 
IRQ_CSP_STOP
Ë& 
rfim
)

662 
RFIRQF1
 = ~
IRQ_CSP_STOP
;

663 
	`macC•TxSt›I§
();

665 i‡((
RFIRQF1
 & 
IRQ_TXACKDONE
Ë& 
rfim
)

668 
RFIRQM1
 &~
IM_TXACKDONE
;

669 
	`macRxAckTxD⁄eCÆlback
();

672 
rfim
 = 
RFIRQM0
;

675 i‡((
RFIRQF0
 & 
IRQ_FIFOP
Ë& 
rfim
)

680 
	`macRxThªshﬁdI§
();

681 
RFIRQF0
 = ~
IRQ_FIFOP
;

682 } 
FSMSTAT1
 & 
FIFOP
);

684 
	}
}

698 
	$HAL_ISR_FUNCTION
–
macMcuRfEºI§
, 
RFERR_VECTOR
 )

700 
uöt8
 
r„ºm
 = 
RFERRM
;

702 i‡((
RFERRF
 & 
RFERR_RXOVERF
Ë& 
r„ºm
)

704 
RFERRF
 &~
RFERR_RXOVERF
;

705 
	`macRxFifoOvîÊowI§
();

707 
	}
}

720 
	$macMcuRec‹dMaxRssiSèπ
()

723 
maxRssi
 = -128;

726 
T2IRQM
 |
TIMER2_PERM
;

727 
	}
}

741 
öt8
 
	$macMcuRec‹dMaxRssiSt›
()

744 
T2IRQM
 &~
TIMER2_PERM
;

746 (
maxRssi
);

747 
	}
}

760 
	$mcuRec‹dMaxRssiI§
()

762 
öt8
 
rssi
;

765 
rssi
 = 
RSSI
;

768 i‡(
rssi
 > 
maxRssi
)

770 
maxRssi
 = 
rssi
;

772 
	}
}

779 #i‡((
IRQ_SFD
 !
IM_SFD
Ë|| (
IRQ_FIFOP
 !
IM_FIFOP
Ë|| (
IRQ_TXACKDONE
 !
IM_TXACKDONE
))

	@Components/mac/low_level/srf04/single_chip/mac_mcu.h

40 #i‚de‡
MAC_MCU_H


41 
	#MAC_MCU_H


	)

47 
	~"hÆ_mcu.h
"

48 
	~"hÆ_ty≥s.h
"

49 
	~"hÆ_defs.h
"

50 
	~"hÆ_bﬂrd.h
"

58 
	#IPX_0
 
	`BV
(0)

	)

59 
	#IPX_1
 
	`BV
(1)

	)

60 
	#IPX_2
 
	`BV
(2)

	)

61 
	#IP_RFERR_RF_DMA_BV
 
IPX_0


	)

62 
	#IP_RXTX0_T2_BV
 
IPX_2


	)

65 
	#LATCH_MODE
 
	`BV
(3)

	)

66 
	#TIMER2_STATE
 
	`BV
(2)

	)

67 
	#TIMER2_SYNC
 
	`BV
(1)

	)

68 
	#TIMER2_RUN
 
	`BV
(0)

	)

71 
	#TIMER2_OVF_COMPARE2F
 
	`BV
(5)

	)

72 
	#TIMER2_OVF_COMPARE1F
 
	`BV
(4)

	)

73 
	#TIMER2_OVF_PERF
 
	`BV
(3)

	)

74 
	#TIMER2_COMPARE2F
 
	`BV
(2)

	)

75 
	#TIMER2_COMPARE1F
 
	`BV
(1)

	)

76 
	#TIMER2_PERF
 
	`BV
(0)

	)

79 
	#TIMER2_OVF_COMPARE2M
 
	`BV
(5)

	)

80 
	#TIMER2_OVF_COMPARE1M
 
	`BV
(4)

	)

81 
	#TIMER2_OVF_PERM
 
	`BV
(3)

	)

82 
	#TIMER2_COMPARE2M
 
	`BV
(2)

	)

83 
	#TIMER2_COMPARE1M
 
	`BV
(1)

	)

84 
	#TIMER2_PERM
 
	`BV
(0)

	)

87 
	#CMPIM
 
	`BV
(7)

	)

88 
	#PERIM
 
	`BV
(6)

	)

89 
	#OFCMPIM
 
	`BV
(5)

	)

90 
	#PEROF2_BITS
 (
	`BV
(3Ë| BV(2Ë| BV(1Ë| BV(0))

	)

93 
	#IRQ_SFD
 
	`BV
(1)

	)

94 
	#IRQ_FIFOP
 
	`BV
(2)

	)

97 
	#IRQ_TXACKDONE
 
	`BV
(0)

	)

98 
	#IRQ_TXDONE
 
	`BV
(1)

	)

99 
	#IRQ_CSP_MANINT
 
	`BV
(3)

	)

100 
	#IRQ_CSP_STOP
 
	`BV
(4)

	)

103 
	#IM_SFD
 
	`BV
(1)

	)

104 
	#IM_FIFOP
 
	`BV
(2)

	)

107 
	#IM_TXACKDONE
 
	`BV
(0)

	)

108 
	#IM_TXDONE
 
	`BV
(1)

	)

109 
	#IM_CSP_MANINT
 
	`BV
(3)

	)

110 
	#IM_CSP_STOP
 
	`BV
(4)

	)

113 
	#TXACK
 
	`BV
(0)

	)

116 
	#RFERR_RXOVERF
 
	`BV
(2)

	)

123 
	#MAC_MCU_WRITE_RFIRQF0
(
x
Ë
	`HAL_CRITICAL_STATEMENT
–
S1CON
 = 0x00; 
RFIRQF0
 = x; )

	)

124 
	#MAC_MCU_WRITE_RFIRQF1
(
x
Ë
	`HAL_CRITICAL_STATEMENT
–
S1CON
 = 0x00; 
RFIRQF1
 = x; )

	)

125 
	#MAC_MCU_OR_RFIRQM0
(
x
Ë
	`°
–
RFIRQM0
 |x; )

	)

126 
	#MAC_MCU_AND_RFIRQM0
(
x
Ë
	`°
–
RFIRQM0
 &x; )

	)

127 
	#MAC_MCU_OR_RFIRQM1
(
x
Ë
	`°
–
RFIRQM1
 |x; )

	)

128 
	#MAC_MCU_AND_RFIRQM1
(
x
Ë
	`°
–
RFIRQM1
 &x; )

	)

130 
	#MAC_MCU_FIFOP_ENABLE_INTERRUPT
(Ë
	`MAC_MCU_OR_RFIRQM0
(
IM_FIFOP
)

	)

131 
	#MAC_MCU_FIFOP_DISABLE_INTERRUPT
(Ë
	`MAC_MCU_AND_RFIRQM0
(~
IM_FIFOP
)

	)

132 
	#MAC_MCU_FIFOP_CLEAR_INTERRUPT
(Ë
	`MAC_MCU_WRITE_RFIRQF0
(~
IRQ_FIFOP
)

	)

134 
	#MAC_MCU_TXACKDONE_ENABLE_INTERRUPT
(Ë
	`MAC_MCU_OR_RFIRQM1
(
IM_TXACKDONE
)

	)

135 
	#MAC_MCU_TXACKDONE_DISABLE_INTERRUPT
(Ë
	`MAC_MCU_AND_RFIRQM1
(~
IM_TXACKDONE
)

	)

136 
	#MAC_MCU_TXACKDONE_CLEAR_INTERRUPT
(Ë
	`MAC_MCU_WRITE_RFIRQF1
(~
IRQ_TXACKDONE
)

	)

138 
	#MAC_MCU_CSP_STOP_ENABLE_INTERRUPT
(Ë
	`MAC_MCU_OR_RFIRQM1
(
IM_CSP_STOP
)

	)

139 
	#MAC_MCU_CSP_STOP_DISABLE_INTERRUPT
(Ë
	`MAC_MCU_AND_RFIRQM1
(~
IM_CSP_STOP
)

	)

140 
	#MAC_MCU_CSP_STOP_CLEAR_INTERRUPT
(Ë
	`MAC_MCU_WRITE_RFIRQF1
(~
IRQ_CSP_STOP
)

	)

141 
	#MAC_MCU_CSP_STOP_INTERRUPT_IS_ENABLED
(Ë(
RFIRQM1
 & 
IM_CSP_STOP
)

	)

143 
	#MAC_MCU_CSP_INT_ENABLE_INTERRUPT
(Ë
	`MAC_MCU_OR_RFIRQM1
(
IM_CSP_MANINT
)

	)

144 
	#MAC_MCU_CSP_INT_DISABLE_INTERRUPT
(Ë
	`MAC_MCU_AND_RFIRQM1
(~
IM_CSP_MANINT
)

	)

145 
	#MAC_MCU_CSP_INT_CLEAR_INTERRUPT
(Ë
	`MAC_MCU_WRITE_RFIRQF1
(~
IRQ_CSP_MANINT
)

	)

146 
	#MAC_MCU_CSP_INT_INTERRUPT_IS_ENABLED
(Ë(
RFIRQM1
 & 
IM_CSP_MANINT
)

	)

148 
	#MAC_MCU_RFERR_ENABLE_INTERRUPT
(Ë
	`°
–
RFERRM
 |
RFERR_RXOVERF
; )

	)

149 
	#MAC_MCU_RFERR_DISABLE_INTERRUPT
(Ë
	`°
–
RFERRM
 &~
RFERR_RXOVERF
; )

	)

155 
	#T2M_OVF_BITS
 (
	`BV
(6Ë| BV(5Ë| BV(4))

	)

156 
	#T2M_BITS
 (
	`BV
(2Ë| BV(1Ë| BV(0))

	)

158 
	#T2M_OVFSEL
(
x
Ë((xË<< 4)

	)

159 
	#T2M_SEL
(
x
Ë(x)

	)

161 
	#T2M_T2OVF
 
	`T2M_OVFSEL
(0)

	)

162 
	#T2M_T2OVF_CAP
 
	`T2M_OVFSEL
(1)

	)

163 
	#T2M_T2OVF_PER
 
	`T2M_OVFSEL
(2)

	)

164 
	#T2M_T2OVF_CMP1
 
	`T2M_OVFSEL
(3)

	)

165 
	#T2M_T2OVF_CMP2
 
	`T2M_OVFSEL
(4)

	)

167 
	#T2M_T2TIM
 
	`T2M_SEL
(0)

	)

168 
	#T2M_T2_CAP
 
	`T2M_SEL
(1)

	)

169 
	#T2M_T2_PER
 
	`T2M_SEL
(2)

	)

170 
	#T2M_T2_CMP1
 
	`T2M_SEL
(3)

	)

171 
	#T2M_T2_CMP2
 
	`T2M_SEL
(4)

	)

173 
	#MAC_MCU_T2_ACCESS_OVF_COUNT_VALUE
(Ë
	`°
–
T2MSEL
 = 
T2M_T2OVF
; )

	)

174 
	#MAC_MCU_T2_ACCESS_OVF_CAPTURE_VALUE
(Ë
	`°
–
T2MSEL
 = 
T2M_T2OVF_CAP
; )

	)

175 
	#MAC_MCU_T2_ACCESS_OVF_PERIOD_VALUE
(Ë
	`°
–
T2MSEL
 = 
T2M_T2OVF_PER
; )

	)

176 
	#MAC_MCU_T2_ACCESS_OVF_CMP1_VALUE
(Ë
	`°
–
T2MSEL
 = 
T2M_T2OVF_CMP1
; )

	)

177 
	#MAC_MCU_T2_ACCESS_OVF_CMP2_VALUE
(Ë
	`°
–
T2MSEL
 = 
T2M_T2OVF_CMP2
; )

	)

179 
	#MAC_MCU_T2_ACCESS_COUNT_VALUE
(Ë
	`°
–
T2MSEL
 = 
T2M_T2TIM
; )

	)

180 
	#MAC_MCU_T2_ACCESS_CAPTURE_VALUE
(Ë
	`°
–
T2MSEL
 = 
T2M_T2_CAP
; )

	)

181 
	#MAC_MCU_T2_ACCESS_PERIOD_VALUE
(Ë
	`°
–
T2MSEL
 = 
T2M_T2_PER
; )

	)

182 
	#MAC_MCU_T2_ACCESS_CMP1_VALUE
(Ë
	`°
–
T2MSEL
 = 
T2M_T2_CMP1
; )

	)

183 
	#MAC_MCU_T2_ACCESS_CMP2_VALUE
(Ë
	`°
–
T2MSEL
 = 
T2M_T2_CMP2
; )

	)

185 
	#MAC_MCU_CONFIG_CSP_EVENT1
(Ë
	`°
–
T2CSPCFG
 = 1; )

	)

192 
uöt8
 
macChùVîsi⁄
;

199 
macMcuInô
();

200 
uöt8
 
macMcuR™domByã
();

201 
macMcuTimîF‹˚Dñay
(
uöt16
 
cou¡
);

202 
uöt16
 
macMcuTimîC≠tuª
();

203 
uöt32
 
macMcuOvîÊowCou¡
();

204 
uöt32
 
macMcuOvîÊowC≠tuª
();

205 
macMcuOvîÊowSëCou¡
(
uöt32
 
cou¡
);

206 
macMcuOvîÊowSëCom∑ª
(
uöt32
 
cou¡
);

207 
macMcuRec‹dMaxRssiSèπ
();

208 
öt8
 
macMcuRec‹dMaxRssiSt›
();

209 
macMcuRec‹dMaxRssiI§
();

210 
uöt16
 
macMcuPªcisi⁄Cou¡
();

211 
macMcuTimî2OvîÊowW‹k¨ound
();

	@Components/mac/low_level/srf04/single_chip/mac_mem.c

46 
	~"hÆ_ty≥s.h
"

49 
	~"mac_mem.h
"

52 
	~"hÆ_mcu.h
"

55 
	~"mac_as£π.h
"

68 
uöt8
 
	$macMemRódRamByã
(
macRam_t
 * 
pRam
)

70 (*
pRam
);

71 
	}
}

86 
	$macMemWrôeRam
(
macRam_t
 * 
pRam
, 
uöt8
 * 
pD©a
, uöt8 
Àn
)

88 
Àn
)

90 
Àn
--;

91 *
pRam
 = *
pD©a
;

92 
pRam
++;

93 
pD©a
++;

95 
	}
}

110 
	$macMemRódRam
(
macRam_t
 * 
pRam
, 
uöt8
 * 
pD©a
, uöt8 
Àn
)

112 
Àn
)

114 
Àn
--;

115 *
pD©a
 = *
pRam
;

116 
pRam
++;

117 
pD©a
++;

119 
	}
}

133 
	$macMemWrôeTxFifo
(
uöt8
 * 
pD©a
, uöt8 
Àn
)

135 
	`MAC_ASSERT
(
Àn
 != 0);

139 
RFD
 = *
pD©a
;

140 
pD©a
++;

141 
Àn
--;

143 
Àn
);

144 
	}
}

158 
	$macMemRódRxFifo
(
uöt8
 * 
pD©a
, uöt8 
Àn
)

160 
	`MAC_ASSERT
(
Àn
 != 0);

164 *
pD©a
 = 
RFD
;

165 
pD©a
++;

166 
Àn
--;

168 
Àn
);

169 
	}
}

	@Components/mac/low_level/srf04/single_chip/mac_mem.h

40 #i‚de‡
MAC_MEM_H


41 
	#MAC_MEM_H


	)

47 
	~"hÆ_ty≥s.h
"

54 vﬁ©ûê
	tXDATA
 
	tmacRam_t
;

61 
uöt8
 
macMemRódRamByã
(
macRam_t
 * 
pRam
);

62 
macMemWrôeRam
(
macRam_t
 * 
pRam
, 
uöt8
 * 
pD©a
, uöt8 
Àn
);

63 
macMemRódRam
(
macRam_t
 * 
pRam
, 
uöt8
 * 
pD©a
, uöt8 
Àn
);

64 
macMemWrôeTxFifo
(
uöt8
 * 
pD©a
, uöt8 
Àn
);

65 
macMemRódRxFifo
(
uöt8
 * 
pD©a
, uöt8 
Àn
);

	@Components/mac/low_level/srf04/single_chip/mac_radio_defs.c

44 
	~"mac_ødio_defs.h
"

45 
	~"hÆ_ty≥s.h
"

46 
	~"hÆ_as£π.h
"

47 
	~"mac_pib.h
"

54 #i‡
deföed
 (
HAL_PA_LNA
)

55 c⁄° 
uöt8
 
CODE
 
	gmacRadioDefsTxPowîTabÀ
[] =

78 #ñi‡
deföed
 (
HAL_PA_LNA_CC2590
)

79 c⁄° 
uöt8
 
CODE
 
	gmacRadioDefsTxPowîTabÀ
[] =

96 c⁄° 
uöt8
 
CODE
 
	gmacRadioDefsTxPowîTabÀ
[] =

135 
	$macRadioTu∫OnPowî
()

138 
	`MAC_MCU_RFERR_ENABLE_INTERRUPT
();

140 #i‡
	`deföed
 (
HAL_PA_LNA
Ë|| deföed (
HAL_PA_LNA_CC2590
)

142 
AGCCTRL1
 = 0x16;

151 
	`HAL_PA_LNA_RX_HGM
();

154 
RFC_OBS_CTRL0
 = 
RFC_OBS_CTRL_PA_PD_INV
;

155 
OBSSEL1
 = 
OBSSEL1_OBS_CTRL0
;

158 
RFC_OBS_CTRL1
 = 
RFC_OBS_CTRL_LNAMIX_PD_INV
;

159 
OBSSEL4
 = 
OBSSEL4_OBS_CTRL4
;

162 i‡(
macChùVîsi⁄
 <
REV_B
)

165 
	`MAC_RADIO_SET_PAN_ID
(
macPib
.
∑nId
);

166 
	`MAC_RADIO_SET_SHORT_ADDR
(
macPib
.
sh‹tAddªss
);

167 
	`MAC_RADIO_SET_IEEE_ADDR
(
macPib
.
exãndedAddªss
.
addr
.
extAddr
);

169 
	}
}

182 
	$macRadioTu∫OffPowî
()

185 
	`MAC_MCU_RFERR_DISABLE_INTERRUPT
();

187 #i‡
	`deföed
 (
HAL_PA_LNA
Ë|| deföed (
HAL_PA_LNA_CC2590
)

189 
	`HAL_PA_LNA_RX_LGM
();

191 
	}
}

198 
HAL_ASSERT_SIZE
(
macRadioDefsTxPowîTabÀ
, 
MAC_RADIO_TX_POWER_MAX_DBM
+1);

200 #i‡(
HAL_CPU_CLOCK_MHZ
 != 32)

204 #i‡(
MAC_RADIO_RECEIVER_SENSITIVITY_DBM
 > 
MAC_SPEC_MIN_RECEIVER_SENSITIVITY
)

208 #i‡
deföed
 (
HAL_PA_LNA
Ë&& deföed (
HAL_PA_LNA_CC2590
)

	@Components/mac/low_level/srf04/single_chip/mac_radio_defs.h

40 #i‚de‡
MAC_RADIO_DEFS_H


41 
	#MAC_RADIO_DEFS_H


	)

47 
	~"hÆ_defs.h
"

48 
	~"hÆ_bﬂrd_cfg.h
"

49 
	~"hÆ_mac_cfg.h
"

50 
	~"mac_•ec.h
"

51 
	~"mac_mcu.h
"

52 
	~"mac_mem.h
"

53 
	~"mac_c•_tx.h
"

54 
	~"mac_as£π.h
"

63 
	#ISTXCAL
 0xEC

	)

64 
	#ISRXON
 0xE3

	)

65 
	#ISTXON
 0xE9

	)

66 
	#ISTXONCCA
 0xEA

	)

67 
	#ISRFOFF
 0xEF

	)

68 
	#ISFLUSHRX
 0xED

	)

69 
	#ISFLUSHTX
 0xEE

	)

70 
	#ISACK
 0xE6

	)

71 
	#ISACKPEND
 0xE7

	)

72 
	#ISNACK
 0xE8

	)

75 
	#FREQ_2405MHZ
 0x0B

	)

78 
	#TX_ACTIVE
 
	`BV
(1)

	)

79 
	#CCA
 
	`BV
(4)

	)

80 
	#SFD
 
	`BV
(5)

	)

81 
	#FIFOP
 
	`BV
(6)

	)

82 
	#FIFO
 
	`BV
(7)

	)

85 
	#RFERRIE
 
	`BV
(0)

	)

88 
	#RFIE
 
	`BV
(0)

	)

91 
	#FRMCTRL0_RESET_VALUE
 0x40

	)

92 
	#AUTOACK
 
	`BV
(5)

	)

93 
	#RX_MODE
(
x
Ë((xË<< 2)

	)

94 
	#RX_MODE_INFINITE_RECEPTION
 
	`RX_MODE
(2)

	)

95 
	#RX_MODE_NORMAL_OPERATION
 
	`RX_MODE
(0)

	)

98 
	#PENDING_OR
 
	`BV
(2)

	)

101 
	#PAN_COORDINATOR
 
	`BV
(1)

	)

102 
	#FRAME_FILTER_EN
 
	`BV
(0)

	)

105 
	#PEND_DATAREQ_ONLY
 
	`BV
(2)

	)

106 
	#AUTOPEND
 
	`BV
(1)

	)

107 
	#SRC_MATCH_EN
 
	`BV
(0)

	)

110 
	#AUTOPEND_RES
 
	`BV
(6)

	)

113 
	#CORR_THR_SFD
 
	`BV
(5)

	)

114 
	#CORR_THR
 0x14

	)

117 
	#CCA_THR
 0xF8

	)

120 
	#FSM_FFCTRL_STATE_RX_INF
 31

	)

123 
	#RCTRL1
 
	`BV
(3)

	)

124 
	#RCTRL0
 
	`BV
(2)

	)

125 
	#RCTRL_BITS
 (
RCTRL1
 | 
RCTRL0
)

	)

126 
	#RCTRL_CLOCK_LFSR
 
RCTRL0


	)

129 
	#CPU_CTRL
 
	`BV
(0)

	)

130 
	#CPU_CTRL_ON
 
CPU_CTRL


	)

131 
	#CPU_CTRL_OFF
 (!(
CPU_CTRL
))

	)

134 
	#TXFILTCFG
 
	`XREG
–0x61FA )

	)

135 
	#TXFILTCFG_RESET_VALUE
 0x09

	)

137 #i‡
deföed
 (
HAL_PA_LNA
Ë|| deföed (
HAL_PA_LNA_CC2590
)

140 
	#RFC_OBS_CTRL_PA_PD_INV
 0x68

	)

143 
	#OBSSEL1
 
	`XREG
–0x6244 )

	)

144 
	#OBSSEL1_OBS_CTRL0
 0xFB

	)

147 
	#RFC_OBS_CTRL_LNAMIX_PD_INV
 0x6A

	)

150 
	#OBSSEL4
 
	`XREG
–0x6247 )

	)

151 
	#OBSSEL4_OBS_CTRL4
 0xFC

	)

159 
	#MAC_RADIO_CC2530


	)

160 
	#MAC_RADIO_FEATURE_HARDWARE_OVERFLOW_NO_ROLLOVER


	)

167 
	#MAC_RADIO_CHANNEL_DEFAULT
 11

	)

168 
	#MAC_RADIO_TX_POWER_DEFAULT
 0x32

	)

169 #i‡
deföed
 (
HAL_PA_LNA
)

170 
	#MAC_RADIO_TX_POWER_MAX_DBM
 19

	)

171 #ñi‡
deföed
 (
HAL_PA_LNA_CC2590
)

172 
	#MAC_RADIO_TX_POWER_MAX_DBM
 11

	)

174 
	#MAC_RADIO_TX_POWER_MAX_DBM
 22

	)

177 
	#MAC_RADIO_RECEIVER_SENSITIVITY_DBM
 -91

	)

178 
	#MAC_RADIO_RECEIVER_SATURATION_DBM
 10

	)

181 
	#MAC_RADIO_RSSI_OFFSET
 
HAL_MAC_RSSI_OFFSET


	)

183 #i‡
deföed
 (
HAL_PA_LNA
Ë|| deföed (
HAL_PA_LNA_CC2590
)

184 
	#MAC_RADIO_RSSI_LNA_HGM_OFFSET
 
HAL_MAC_RSSI_LNA_HGM_OFFSET


	)

185 
	#MAC_RADIO_RSSI_LNA_LGM_OFFSET
 
HAL_MAC_RSSI_LNA_LGM_OFFSET


	)

186 
	#MAC_RADIO_RSSI_LNA_OFFSET
(
x
Ë
	`°
–x +
	`HAL_PA_LNA_RX_GAIN
(Ë? 
MAC_RADIO_RSSI_LNA_HGM_OFFSET
 : 
MAC_RADIO_RSSI_LNA_LGM_OFFSET
; )

	)

190 
	#MAC_RADIO_RX_TX_PROP_DELAY_MIN_USEC
 3.076

	)

191 
	#MAC_RADIO_RX_TX_PROP_DELAY_MAX_USEC
 3.284

	)

198 
	#MAC_RADIO_MCU_INIT
(Ë
	`macMcuInô
()

	)

200 
	#MAC_RADIO_TURN_ON_POWER
(Ë
	`macRadioTu∫OnPowî
()

	)

201 
	#MAC_RADIO_TURN_OFF_POWER
(Ë
	`macRadioTu∫OffPowî
()

	)

202 
	#MAC_RADIO_TURN_ON_OSC
(Ë
	`MAC_ASSERT
(
SLEEPSTA
 & 
XOSC_STB
)

	)

203 
	#MAC_RADIO_TURN_OFF_OSC
(Ë

	)

205 
	#MAC_RADIO_RX_FIFO_HAS_OVERFLOWED
(Ë((
FSMSTAT1
 & 
FIFOP
Ë&& !(FSMSTAT1 & 
FIFO
))

	)

206 
	#MAC_RADIO_RX_FIFO_IS_EMPTY
(Ë(!(
FSMSTAT1
 & 
FIFO
Ë&& !(FSMSTAT1 & 
FIFOP
))

	)

208 
	#MAC_RADIO_SET_RX_THRESHOLD
(
x
Ë
	`°
–
FIFOPCTRL
 = ((x)-1); )

	)

209 
	#MAC_RADIO_RX_IS_AT_THRESHOLD
(Ë(
FSMSTAT1
 & 
FIFOP
)

	)

210 
	#MAC_RADIO_ENABLE_RX_THRESHOLD_INTERRUPT
(Ë
	`MAC_MCU_FIFOP_ENABLE_INTERRUPT
()

	)

211 
	#MAC_RADIO_DISABLE_RX_THRESHOLD_INTERRUPT
(Ë
	`MAC_MCU_FIFOP_DISABLE_INTERRUPT
()

	)

212 
	#MAC_RADIO_CLEAR_RX_THRESHOLD_INTERRUPT_FLAG
(Ë
	`MAC_MCU_FIFOP_CLEAR_INTERRUPT
()

	)

214 
	#MAC_RADIO_TX_ACK
(Ë
	`MAC_RADIO_TURN_OFF_PENDING_OR
()

	)

215 
	#MAC_RADIO_TX_ACK_PEND
(Ë
	`MAC_RADIO_TURN_ON_PENDING_OR
()

	)

217 
	#MAC_RADIO_RX_ON
(Ë
	`°
–
RFST
 = 
ISRXON
; )

	)

218 
	#MAC_RADIO_RXTX_OFF
(Ë
	`°
–
RFST
 = 
ISRFOFF
; )

	)

219 
	#MAC_RADIO_FLUSH_RX_FIFO
(Ë
	`°
–
RFST
 = 
ISFLUSHRX
; RFST = ISFLUSHRX; )

	)

220 
	#MAC_RADIO_FLUSH_TX_FIFO
(Ë
	`°
–
RFST
 = 
ISFLUSHTX
; )

	)

222 
	#MAC_RADIO_READ_RX_FIFO
(
pD©a
,
Àn
Ë
	`macMemRódRxFifo
(’D©a),(
uöt8
)÷í))

	)

223 
	#MAC_RADIO_WRITE_TX_FIFO
(
pD©a
,
Àn
Ë
	`macMemWrôeTxFifo
(’D©a),(
uöt8
)÷í))

	)

225 
	#MAC_RADIO_SET_PAN_COORDINATOR
(
b
Ë
	`°
–
FRMFILT0
 = (FRMFILT0 & ~
PAN_COORDINATOR
Ë| (PAN_COORDINATOR * (b!=0)); )

	)

226 
	#MAC_RADIO_SET_CHANNEL
(
x
Ë
	`°
–
FREQCTRL
 = 
FREQ_2405MHZ
 + 5 * ((xË- 11); )

	)

227 
	#MAC_RADIO_SET_TX_POWER
(
x
Ë
	`°
–
TXPOWER
 = x; )

	)

229 
	#MAC_RADIO_SET_PAN_ID
(
x
Ë
	`°
–
PAN_ID0
 = (xË& 0xFF; 
PAN_ID1
 = (xË>> 8; )

	)

230 
	#MAC_RADIO_SET_SHORT_ADDR
(
x
Ë
	`°
–
SHORT_ADDR0
 = (xË& 0xFF; 
SHORT_ADDR1
 = (xË>> 8; )

	)

231 
	#MAC_RADIO_SET_IEEE_ADDR
(
p
Ë
	`macMemWrôeRam
((
macRam_t
 *Ë&
EXT_ADDR0
,Ö, 8)

	)

233 
	#MAC_RADIO_REQUEST_ACK_TX_DONE_CALLBACK
(Ë
	`°
–
	`MAC_MCU_TXACKDONE_CLEAR_INTERRUPT
(); 
	`MAC_MCU_TXACKDONE_ENABLE_INTERRUPT
(); )

	)

234 
	#MAC_RADIO_CANCEL_ACK_TX_DONE_CALLBACK
(Ë
	`MAC_MCU_TXACKDONE_DISABLE_INTERRUPT
()

	)

236 
	#MAC_RADIO_RANDOM_BYTE
(Ë
	`macMcuR™domByã
()

	)

238 
	#MAC_RADIO_TX_RESET
(Ë
	`macC•TxRe£t
()

	)

239 
	#MAC_RADIO_TX_PREP_CSMA_UNSLOTTED
(Ë
	`macC•TxPªpCsmaUn¶Ÿãd
()

	)

240 
	#MAC_RADIO_TX_PREP_CSMA_SLOTTED
(Ë
	`macC•TxPªpCsmaSlŸãd
()

	)

241 
	#MAC_RADIO_TX_PREP_SLOTTED
(Ë
	`macC•TxPªpSlŸãd
()

	)

242 
	#MAC_RADIO_TX_GO_CSMA
(Ë
	`macC•TxGoCsma
()

	)

243 
	#MAC_RADIO_TX_GO_SLOTTED
(Ë
	`macC•TxGoSlŸãd
()

	)

244 
	#MAC_RADIO_TX_GO_SLOTTED_CSMA
(Ë
	`macC•TxGoCsma
()

	)

246 
	#MAC_RADIO_FORCE_TX_DONE_IF_PENDING
(Ë
	`macC•F‹˚TxD⁄eIfPídög
()

	)

248 
	#MAC_RADIO_TX_REQUEST_ACK_TIMEOUT_CALLBACK
(Ë
	`macC•TxReque°AckTimeoutCÆlback
()

	)

249 
	#MAC_RADIO_TX_CANCEL_ACK_TIMEOUT_CALLBACK
(Ë
	`macC•TxC™˚lAckTimeoutCÆlback
()

	)

251 
	#MAC_RADIO_TIMER_TICKS_PER_USEC
(Ë
HAL_CPU_CLOCK_MHZ


	)

252 
	#MAC_RADIO_TIMER_TICKS_PER_BACKOFF
(Ë(
HAL_CPU_CLOCK_MHZ
 * 
MAC_SPEC_USECS_PER_BACKOFF
)

	)

253 
	#MAC_RADIO_TIMER_TICKS_PER_SYMBOL
(Ë(
HAL_CPU_CLOCK_MHZ
 * 
MAC_SPEC_USECS_PER_SYMBOL
)

	)

255 
	#MAC_RADIO_TIMER_CAPTURE
(Ë
	`macMcuTimîC≠tuª
()

	)

256 
	#MAC_RADIO_TIMER_FORCE_DELAY
(
x
Ë
	`macMcuTimîF‹˚Dñay
(x)

	)

258 
	#MAC_RADIO_TIMER_SLEEP
(Ë
	`°
(
T2CTRL
 &~
TIMER2_RUN
;  T2CTRL & 
TIMER2_STATE
);)

	)

259 
	#MAC_RADIO_TIMER_WAKE_UP
(Ë
	`°
(
T2CTRL
 |
TIMER2_RUN
; !(T2CTRL & 
TIMER2_STATE
));)

	)

261 
	#MAC_RADIO_BACKOFF_COUNT
(Ë
	`macMcuOvîÊowCou¡
()

	)

262 
	#MAC_RADIO_BACKOFF_CAPTURE
(Ë
	`macMcuOvîÊowC≠tuª
()

	)

263 
	#MAC_RADIO_BACKOFF_SET_COUNT
(
x
Ë
	`macMcuOvîÊowSëCou¡
(x)

	)

264 
	#MAC_RADIO_BACKOFF_SET_COMPARE
(
x
Ë
	`macMcuOvîÊowSëCom∑ª
(x)

	)

266 
	#MAC_RADIO_BACKOFF_COMPARE_CLEAR_INTERRUPT
(Ë
	`°
–
T2IRQF
 &~
TIMER2_OVF_COMPARE1F
; \

	)

267 
	gT2CTRL
 |
TIMER2_RUN
; \

268  !(
	gT2CTRL
 & 
	gTIMER2_STATE
) ); )

269 
	#MAC_RADIO_BACKOFF_COMPARE_ENABLE_INTERRUPT
(Ë
	`°
–
T2IRQM
 |
TIMER2_OVF_COMPARE1M
; )

	)

270 
	#MAC_RADIO_BACKOFF_COMPARE_DISABLE_INTERRUPT
(Ë
	`°
–
T2IRQM
 &~
TIMER2_OVF_COMPARE1M
; )

	)

273 
	#MAC_RADIO_RECORD_MAX_RSSI_START
(Ë
	`macMcuRec‹dMaxRssiSèπ
()

	)

274 
	#MAC_RADIO_RECORD_MAX_RSSI_STOP
(Ë
	`macMcuRec‹dMaxRssiSt›
()

	)

276 
	#MAC_RADIO_TURN_ON_RX_FRAME_FILTERING
(Ë
	`°
–
FRMFILT0
 |
FRAME_FILTER_EN
; )

	)

277 
	#MAC_RADIO_TURN_OFF_RX_FRAME_FILTERING
(Ë
	`°
–
FRMFILT0
 &~
FRAME_FILTER_EN
; )

	)

281 
	#MAC_RADIO_TURN_ON_AUTO_ACK
(Ë
	`°
–
FRMCTRL0
 |
AUTOACK
; )

	)

282 
	#MAC_RADIO_CANCEL_TX_ACK
(Ë
	`°
–
RFST
 = 
ISNACK
; )

	)

284 
	#MAC_RADIO_TURN_ON_SRC_MATCH
(Ë
	`°
–
SRCMATCH
 |
SRC_MATCH_EN
; )

	)

285 
	#MAC_RADIO_TURN_ON_AUTOPEND
(Ë
	`°
–
SRCMATCH
 |
AUTOPEND
; )

	)

286 
	#MAC_RADIO_IS_AUTOPEND_ON
(Ë–
SRCMATCH
 & 
AUTOPEND
 )

	)

287 
	#MAC_RADIO_SRC_MATCH_RESINDEX
(
p
Ë
	`°
–∞
SRCRESINDEX
; )

	)

289 
	#MAC_RADIO_TURN_ON_PENDING_OR
(Ë
	`°
–
FRMCTRL1
 |
PENDING_OR
; )

	)

290 
	#MAC_RADIO_TURN_OFF_PENDING_OR
(Ë
	`°
–
FRMCTRL1
 &~
PENDING_OR
; )

	)

292 
	#MAC_RADIO_SRC_MATCH_GET_EN
(Ë
	`macSrcM©chGëE«bÀBô
()

	)

293 
	#MAC_RADIO_SRC_MATCH_GET_PENDEN
(Ë
	`macSrcM©chGëPídEnBô
()

	)

295 
	#MAC_RADIO_GET_SRC_SHORTPENDEN
(
p
Ë
	`macMemRódRam
–(
uöt8
*)&
SRCSHORTPENDEN0
, (p), 3 )

	)

296 
	#MAC_RADIO_GET_SRC_EXTENPEND
(
p
Ë
	`macMemRódRam
–(
uöt8
*)&
SRCEXTPENDEN0
, (p), 3 )

	)

297 
	#MAC_RADIO_GET_SRC_SHORTEN
(
p
Ë
	`macMemRódRam
–(
uöt8
*)&
SRCSHORTEN0
, (p), 3 )

	)

298 
	#MAC_RADIO_GET_SRC_EXTEN
(
p
Ë
	`macMemRódRam
–(
uöt8
*)&
SRCEXTEN0
, (p), 3 )

	)

300 
	#MAC_RADIO_SRC_MATCH_SET_SHORTPENDEN
(
p
Ë
	`macMemWrôeRam
–(
uöt8
*)&
SRCSHORTPENDEN0
, (p), 3 )

	)

301 
	#MAC_RADIO_SRC_MATCH_SET_EXTPENDEN
(
p
Ë
	`macMemWrôeRam
–(
uöt8
*)&
SRCEXTPENDEN0
, (p), 3 )

	)

302 
	#MAC_RADIO_SRC_MATCH_SET_SHORTEN
(
x
Ë
	`oßl_buf„r_uöt24
–(
uöt8
*)&
SRCSHORTEN0
, (xË)

	)

303 
	#MAC_RADIO_SRC_MATCH_SET_EXTEN
(
x
Ë
	`oßl_buf„r_uöt24
–(
uöt8
*)&
SRCEXTEN0
, (xË)

	)

304 
	#MAC_RADIO_SRC_MATCH_RESULT
(Ë
	`MAC_SrcM©chCheckResu…
()

	)

306 
	#MAC_RADIO_SRC_MATCH_INIT_EXTPENDEN
(Ë
	`°
–
SRCEXTPENDEN0
 = 0; \

	)

307 
	gSRCEXTPENDEN1
 = 0; \

308 
	gSRCEXTPENDEN2
 = 0; )

309 
	#MAC_RADIO_SRC_MATCH_INIT_SHORTPENDEN
(Ë
	`°
–
SRCSHORTPENDEN0
 = 0; \

	)

310 
	gSRCSHORTPENDEN1
 = 0; \

311 
	gSRCSHORTPENDEN2
 = 0; )

313 
	#MAC_RADIO_SRC_MATCH_TABLE_WRITE
(
off£t
, 
p
, 
Àn
Ë
	`macMemWrôeRam
–(
macRam_t
 *)(
SRC_ADDR_TABLE
 + (off£t)), (p), (ÀnË)

	)

314 
	#MAC_RADIO_SRC_MATCH_TABLE_READ
(
off£t
, 
p
, 
Àn
Ë
	`macMemRódRam
–
SRC_ADDR_TABLE
 + (off£t), (p), (Àn))

	)

318 #i‡
deföed
 (
HAL_PA_LNA
Ë|| deföed (
HAL_PA_LNA_CC2590
)

319 
	#HAL_PA_LNA_RX_HGM
(Ë
	`°
–
P0_7
 = 1; )

	)

320 
	#HAL_PA_LNA_RX_LGM
(Ë
	`°
–
P0_7
 = 0; )

	)

321 
	#HAL_PA_LNA_RX_GAIN
(Ë–
P0_7
 )

	)

329 c⁄° 
uöt8
 
CODE
 
macRadioDefsTxPowîTabÀ
[];

331 
macRadioTu∫OnPowî
();

332 
macRadioTu∫OffPowî
();

	@Components/mt/DebugTrace.c

43 #i‡
deföed
–
MT_TASK
 ) || deföed–
APP_DEBUG
 )

48 
	~"ZComDef.h
"

49 
	~"OSAL.h
"

50 
	~"MT.h
"

51 
	~"MT_TASK.h
"

52 
	~"MT_DEBUG.h
"

53 
	~"DebugTø˚.h
"

55 #i‡
deföed
 ( 
APP_DEBUG
 )

56 
	~"DebugAµ.h
"

115 
	$debug_msg
–
byã
 
compID
, byã 
£vîôy
, byã 
numP¨ams
, 
UINT16
 
∑øm1
,

116 
UINT16
 
∑øm2
, UINT16 
∑øm3
 )

119 
mtDebugMsg_t
 *
mtDebugMsg
;

120 
UINT16
 
time°amp
;

122 i‡–
debugThªshﬁd
 =0 || 
debugCompId
 !
compID
 )

126 
time°amp
 = 0;

129 
mtDebugMsg
 = (
mtDebugMsg_t
 *)
	`oßl_msg_Æloˇã
( ( mtDebugMsg_t ) );

130 i‡–
mtDebugMsg
 )

132 
mtDebugMsg
->
hdr
.
evít
 = 
CMD_DEBUG_MSG
;

133 
mtDebugMsg
->
compID
 = compID;

134 
mtDebugMsg
->
£vîôy
 = severity;

135 
mtDebugMsg
->
numP¨ams
 =ÇumParams;

137 
mtDebugMsg
->
∑øm1
 =Öaram1;

138 
mtDebugMsg
->
∑øm2
 =Öaram2;

139 
mtDebugMsg
->
∑øm3
 =Öaram3;

140 
mtDebugMsg
->
time°amp
 =Åimestamp;

142 
	`oßl_msg_£nd
–
MT_TaskID
, (
uöt8
 *)
mtDebugMsg
 );

145 
	}
}

163 
	$debug_°r
–
byã
 *
°r_±r
 )

165 
mtDebugSå_t
 *
msg
;

166 
byã
 
m 
;

167 
byã
 
°rLí
;

170 
°rLí
 = (
byã
)
	`oßl_°æí
–(*)
°r_±r
 );

173 
m 
 =  ( 
mtDebugSå_t
 ) + 
°rLí
;

176 
msg
 = (
mtDebugSå_t
 *)
	`oßl_msg_Æloˇã
–
m 
 );

177 i‡–
msg
 )

180 
msg
->
hdr
.
evít
 = 
CMD_DEBUG_STR
;

181 
msg
->
°rLí
 = strLen;

184 
msg
->
pSåög
 = (
uöt8
 *)(msg+1);

185 
	`oßl_mem˝y
 ( 
msg
->
pSåög
, 
°r_±r
, 
°rLí
 );

187 
	`oßl_msg_£nd
–
MT_TaskID
, (
uöt8
 *)
msg
 );

189 
	}
}

	@Components/mt/DebugTrace.h

42 #i‚de‡
DEBUGTRACE_H


43 
	#DEBUGTRACE_H


	)

45 #ifde‡
__˝lu•lus


63 
	#CMDID_RTG_ADD
 1

	)

64 
	#CMDID_RTG_EXP
 0x81

	)

65 
	#CMDID_RREQ_SEND
 2

	)

66 
	#CMDID_RREQ_DROP
 0x82

	)

67 
	#CMDID_RREP_SEND
 3

	)

68 
	#CMDID_RREP_DROP
 0x83

	)

69 
	#CMDID_RREQ_EXP
 4

	)

71 
	#CMDID_DATA_SEND
 6

	)

72 
	#CMDID_DATA_FORWARD
 7

	)

73 
	#CMDID_DATA_RECEIVE
 8

	)

75 
	#CMDID_BCAST_RCV
 0x10

	)

76 
	#CMDID_BCAST_ACK
 0x11

	)

77 
	#CMDID_BCAST_RETX
 0x12

	)

79 
	#CMDID_BCAST_EXP
 0x13

	)

80 
	#CMDID_BCAST_ERR
 0x15

	)

82 
	#WPRINTSTR
–
s
 )

	)

84 #i‡
deföed
 ( 
MT_TASK
 )

90 
	#TRACE_MSG
–
compID
, 
nP¨ams
, 
p1
, 
p2
, 
p3
 ) 
	`debug_msg
–compID, 
SEVERITY_TRACE
,ÇP¨ams,Ö1,Ö2,Ö3 )

	)

98 
	#DEBUG_INFO
–
compID
, 
subCompID
, 
nP¨ams
, 
p1
, 
p2
, 
p3
 ) 
	`debug_msg
–compID, subCompID,ÇP¨ams,Ö1,Ö2,Ö3 )

	)

102 
	#DBG_NWK_STARTUP
 
	`debug_msg
–
COMPID_TEST_NWK_STARTUP
, 
SEVERITY_INFORMATION
, 0, 0, 0, 0 )

	)

103 
	#DBG_SCAN_CONFIRM
 
	`debug_msg
–
COMPID_TEST_SCAN_CONFIRM
, 
SEVERITY_INFORMATION
, 0, 0, 0, 0 )

	)

104 
	#DBG_ASSOC_CONFIRM
 
	`debug_msg
–
COMPID_TEST_ASSOC_CONFIRM
, 
SEVERITY_INFORMATION
, 0, 0, 0, 0 )

	)

105 
	#DBG_REMOTE_DATA_CONFIRM
 
	`debug_msg
–
COMPID_TEST_REMOTE_DATA_CONFIRM
, 
SEVERITY_INFORMATION
, 0, 0, 0, 0 )

	)

109 
	#TRACE_MSG
–
compID
, 
nP¨ams
, 
p1
, 
p2
, 
p3
 )

	)

110 
	#DEBUG_INFO
–
compID
, 
subCompID
, 
nP¨ams
, 
p1
, 
p2
, 
p3
 )

	)

111 
	#DBG_NWK_STARTUP


	)

112 
	#DBG_SCAN_CONFIRM


	)

113 
	#DBG_ASSOC_CONFIRM


	)

114 
	#DBG_REMOTE_DATA_CONFIRM


	)

122 
	#SEVERITY_CRITICAL
 0x01

	)

123 
	#SEVERITY_ERROR
 0x02

	)

124 
	#SEVERITY_INFORMATION
 0x03

	)

125 
	#SEVERITY_TRACE
 0x04

	)

127 
	#NO_PARAM_DEBUG_LEN
 5

	)

145 
debug_msg
–
uöt8
 
compID
, uöt8 
£vîôy
, uöt8 
numP¨ams
,

146 
uöt16
 
∑øm1
, uöt16 
∑øm2
, uöt16 
∑øm3
 );

148 
debug_°r
–
uöt8
 *
°r_±r
 );

153 #ifde‡
__˝lu•lus


	@Components/mt/MT.c

45 
	~"ZComDef.h
"

46 
	~"MT.h
"

47 
	~"MT_APP.h
"

48 
	~"MT_DEBUG.h
"

49 
	~"MT_UTIL.h
"

50 
	~"MT_SYS.h
"

51 
	~"MT_SAPI.h
"

52 
	~"AF.h
"

54 
	~"OnBﬂrd.h
"

55 
	~"OSAL.h
"

56 
	~"OSAL_Mem‹y.h
"

57 
	~"OSAL_Nv.h
"

59 
	~"DebugTø˚.h
"

60 
	~"ZMAC.h
"

62 #i‡!
deföed
 ( 
NONWK
 )

63 
	~"NLMEDE.h
"

64 
	~"nwk_bufs.h
"

65 
	~"ZDObje˘.h
"

66 
	~"s•.h
"

67 
	~"nwk_utû.h
"

70 #i‡
deföed
–
MT_MAC_FUNC
 ) || deföed–
MT_MAC_CB_FUNC
 )

71 
	~"MT_MAC.h
"

73 #i‡
deföed
–
MT_NWK_FUNC
 ) || deföed–
MT_NWK_CB_FUNC
 )

74 
	~"MT_NWK.h
"

75 
	~"nwk.h
"

76 
	~"nwk_bufs.h
"

78 #i‡
deföed
–
MT_AF_FUNC
 ) || deföed–
MT_AF_CB_FUNC
 )

79 
	~"MT_AF.h
"

81 #i‡
deföed
–
MT_USER_TEST_FUNC
 )

82 
	~"AF.h
"

84 #i‡
deföed
–
MT_ZDO_FUNC
 )

85 
	~"MT_ZDO.h
"

87 #i‡
deföed
 (
MT_SAPI_FUNC
)

88 
	~"MT_SAPI.h
"

90 #i‡
deföed
–
APP_TP
 )

91 
	~"Te°Profûe.h
"

93 #i‡
deföed
–
APP_TP2
 )

94 
	~"Te°Profûe2.h
"

97 #i‡
deföed
(
APP_TGEN
)

98 
	~"TøfficGíAµ.h
"

100 #i‡
deföed
(
APP_DEBUG
)

101 
	~"DebugAµ.h
"

103 #i‡
deföed
 (
NWK_TEST
)

104 
	~"HWTTAµ.h
"

108 
	~"hÆ_u¨t.h
"

109 
	~"hÆ_Àd.h
"

110 
	~"hÆ_key.h
"

111 
	~"MT_UART.h
"

116 
	#MTEL_DEBUG_INFO
–
nP¨ams
, 
p1
, 
p2
, 
p3
 ) 
	`DEBUG_INFO
–
COMPID_MTEL
,ÇP¨ams,Ö1,Ö2,Ö3 )

	)

118 
	#MT_ERROR_SRSP_LEN
 3

	)

123 
mtPro˚ssMsg_t
 
	gmtPro˚ssIncomög
[] =

125 
NULL
,

127 #i‡
deföed
 (
MT_SYS_FUNC
)

128 
MT_SysComm™dPro˚ssög
,

130 
NULL
,

133 #i‡
deföed
 (
MT_MAC_FUNC
)

134 
MT_MacComm™dPro˚ssög
,

136 
NULL
,

139 #i‡
deföed
 (
MT_NWK_FUNC
)

140 
MT_NwkComm™dPro˚ssög
,

142 
NULL
,

145 #i‡
deföed
 (
MT_AF_FUNC
)

146 
MT_AfComm™dPro˚ssög
,

148 
NULL
,

151 #i‡
deföed
 (
MT_ZDO_FUNC
)

152 
MT_ZdoComm™dPro˚ssög
,

154 
NULL
,

157 #i‡
deföed
 (
MT_SAPI_FUNC
)

158 
MT_S≠iComm™dPro˚ssög
,

160 
NULL
,

163 #i‡
deföed
 (
MT_UTIL_FUNC
)

164 
MT_UtûComm™dPro˚ssög
,

166 
NULL
,

169 #i‡
deföed
 (
MT_DEBUG_FUNC
)

170 
MT_DebugComm™dPro˚ssög
,

172 
NULL
,

175 #i‡
deföed
 (
MT_APP_FUNC
)

176 
MT_AµComm™dPro˚ssög
,

178 
NULL
,

190 
UINT16
 
	gßve_cmd
;

192 
byã
 
	gMT_TaskID
;

193 
byã
 
	gdebugThªshﬁd
;

194 
byã
 
	gdebugCompId
;

199 
mac_sim_evítLo›
( );

201 #ifde‡
MACSIM


202 
MACSIM_Tøn¶©eMsg
–
byã
 *
buf
, byã 
bLí
 );

213 
MT_MsgQueueInô
( );

214 
MT_Re£tMsgQueue
( );

215 
byã
 
MT_QueueMsg
–byã *
msg
 , byã 
Àn
 );

216 
MT_Pro˚ssQueue
( );

218 #i‡
deföed
 ( 
MT_USER_TEST_FUNC
 )

219 
MT_Pro˚ssAµU£rCmd
–
byã
 *
pD©a
 );

231 
	$MT_Inô
(
uöt8
 
èskID
)

233 
MT_TaskID
 = 
èskID
;

234 
debugThªshﬁd
 = 0;

235 
debugCompId
 = 0;

236 
	}
}

252 
	$MT_BuûdSPIMsg
–
uöt8
 
cmdTy≥
, uöt8 
cmdId
, 
byã
 *
msg
, byã 
d©aLí
, byã *
pD©a
 )

255 *
msg
++ = 
d©aLí
;

256 *
msg
++ = 
cmdTy≥
;

257 *
msg
++ = 
cmdId
;

260 i‡–
pD©a
 )

262 
	`oßl_mem˝y
–
msg
, 
pD©a
, 
d©aLí
 );

264 
	}
}

277 
	$MT_BuûdAndSídZToﬁRe•⁄£
(
uöt8
 
cmdTy≥
, uöt8 
cmdId
, uöt8 
d©aLí
, uöt8 *
pD©a
)

279 
uöt8
 *
msg_±r
;

282 
msg_±r
 = 
	`MT_Tøn•‹tAŒoc
((
mtRpcCmdTy≥_t
)(
cmdTy≥
 & 0xE0), 
d©aLí
);

284 i‡(
msg_±r
)

287 
	`MT_BuûdSPIMsg
(
cmdTy≥
, 
cmdId
, 
msg_±r
, 
d©aLí
, 
pD©a
);

289 
	`MT_Tøn•‹tSíd
(
msg_±r
);

291 
	}
}

302 
	$MT_Pro˚ssIncomög
(
uöt8
 *
pBuf
)

304 
mtPro˚ssMsg_t
 
func
;

305 
uöt8
 
r•
[
MT_ERROR_SRSP_LEN
];

308 
r•
[1] = 
pBuf
[
MT_RPC_POS_CMD0
];

309 
r•
[2] = 
pBuf
[
MT_RPC_POS_CMD1
];

312 i‡(
pBuf
[
MT_RPC_POS_LEN
] > 
MT_RPC_DATA_MAX
)

314 
r•
[0] = 
MT_RPC_ERR_LENGTH
;

317 i‡((
r•
[1] & 
MT_RPC_SUBSYSTEM_MASK
Ë< 
MT_RPC_SYS_MAX
)

320 
func
 = 
mtPro˚ssIncomög
[
r•
[1] & 
MT_RPC_SUBSYSTEM_MASK
];

321 i‡(
func
)

324 
r•
[0] = (*
func
)(
pBuf
);

328 
r•
[0] = 
MT_RPC_ERR_SUBSYSTEM
;

333 
r•
[0] = 
MT_RPC_ERR_SUBSYSTEM
;

337 i‡((
r•
[0] !
MT_RPC_SUCCESS
Ë&& (‘•[1] & 
MT_RPC_CMD_TYPE_MASK
Ë=
MT_RPC_CMD_SREQ
))

339 
	`MT_BuûdAndSídZToﬁRe•⁄£
(((
uöt8
)
MT_RPC_CMD_SRSP
 | (uöt8)
MT_RPC_SYS_RES0
), 0, 
MT_ERROR_SRSP_LEN
, 
r•
);

341 
	}
}

355 
	$MTPro˚ssAµR•Msg
–
byã
 *
pD©a
, byã 
Àn
 )

358 
	`MT_BuûdAndSídZToﬁRe•⁄£
–((
uöt8
)
MT_RPC_CMD_SRSP
 | (uöt8)
MT_RPC_SYS_APP
), 
MT_APP_RSP
, 
Àn
, 
pD©a
 );

359 
	}
}

374 
	$MT_Revî£Byãs
–
byã
 *
pD©a
, byã 
Àn
 )

376 
byã
 
i
,
j
;

377 
byã
 
ãmp
;

379  
i
 = 0, 
j
 = 
Àn
-1;Üen > 1;Üen-=2 )

381 
ãmp
 = 
pD©a
[
i
];

382 
pD©a
[
i
++] =ÖD©a[
j
];

383 
pD©a
[
j
--] = 
ãmp
;

385 
	}
}

399 
uöt8
 *
	$MT_W‹d2Buf
–
uöt8
 *
pBuf
, 
uöt16
 *
pW‹d
, uöt8 
Àn
 )

401  
Àn
-- > 0 )

403 *
pBuf
++ = 
	`LO_UINT16
–*
pW‹d
 );

404 *
pBuf
++ = 
	`HI_UINT16
–*
pW‹d
 );

405 
pW‹d
++;

408  
pBuf
;

409 
	}
}

419 
uöt8
 
	$MT_BuûdEndpoötDesc
–
uöt8
 *
pBuf
, *
∑øm
 )

421 
uöt8
 
i
;

422 
uöt8
 
ªt
 = 
ZSuc˚ss
;

423 
ídPoötDesc_t
 *
ïDesc
;

425 
ïDesc
 = (
ídPoötDesc_t
 *)
∑øm
;

427 i‡–
	`afFödEndPoötDesc
–*
pBuf
 ) !
NULL
 )

429 
ªt
 = 
ZApsDu∂iˇãE¡ry
;

431 i‡–
ïDesc
 )

433 
ïDesc
->
ídPoöt
 = *
pBuf
;

436 
ïDesc
->
œãncyReq
 = 
noL©ícyReqs
;

439 
ïDesc
->
sim∂eDesc
 = (
Sim∂eDes¸ùti⁄F‹m©_t
 *Ë
	`oßl_mem_Æloc
((SimpleDescriptionFormat_t));

440 i‡(
ïDesc
->
sim∂eDesc
)

443 
ïDesc
->
sim∂eDesc
->
EndPoöt
 = *
pBuf
++;

446 
ïDesc
->
sim∂eDesc
->
AµProfId
 = 
	`BUILD_UINT16
(
pBuf
[0],ÖBuf[1]);

447 
pBuf
 +(
uöt16
);

450 
ïDesc
->
sim∂eDesc
->
AµDevi˚Id
 = 
	`BUILD_UINT16
(
pBuf
[0],pBuf[1]);

451 
pBuf
 +(
uöt16
);

454 
ïDesc
->
sim∂eDesc
->
AµDevVî
 = (*
pBuf
++Ë& 
AF_APP_DEV_VER_MASK
 ;

457 
pBuf
++;

460 
ïDesc
->
sim∂eDesc
->
AµNumInClu°îs
 = *
pBuf
++;

461 i‡(
ïDesc
->
sim∂eDesc
->
AµNumInClu°îs
)

463 
ïDesc
->
sim∂eDesc
->
pAµInClu°îLi°
 = (
uöt16
 *)

464 
	`oßl_mem_Æloc
((
ïDesc
->
sim∂eDesc
->
AµNumInClu°îs
)*(
uöt16
));

465 i‡–
ïDesc
->
sim∂eDesc
->
pAµInClu°îLi°
 )

467 
i
=0; i<(
ïDesc
->
sim∂eDesc
->
AµNumInClu°îs
); i++)

469 
ïDesc
->
sim∂eDesc
->
pAµInClu°îLi°
[
i
] = 
	`BUILD_UINT16
(*
pBuf
, *(pBuf+1));

470 
pBuf
 += 2;

475 
ªt
 = 
ZMemEº‹
;

480 
ïDesc
->
sim∂eDesc
->
AµNumOutClu°îs
 = *
pBuf
++;

481 i‡(
ïDesc
->
sim∂eDesc
->
AµNumOutClu°îs
)

483 
ïDesc
->
sim∂eDesc
->
pAµOutClu°îLi°
 = (
uöt16
 *)

484 
	`oßl_mem_Æloc
((
ïDesc
->
sim∂eDesc
->
AµNumOutClu°îs
)*(
uöt16
));

485 i‡(
ïDesc
->
sim∂eDesc
->
pAµOutClu°îLi°
)

487 
i
=0; i<(
ïDesc
->
sim∂eDesc
->
AµNumOutClu°îs
); i++)

489 
ïDesc
->
sim∂eDesc
->
pAµOutClu°îLi°
[
i
] = 
	`BUILD_UINT16
(*
pBuf
, *(pBuf+1));

490 
pBuf
 += 2;

495 
ªt
 = 
ZMemEº‹
;

500 i‡–
ªt
 =
ZMemEº‹
 )

502 i‡(
ïDesc
->
sim∂eDesc
->
pAµInClu°îLi°
)

504 
	`oßl_mem_‰ì
(
ïDesc
->
sim∂eDesc
->
pAµInClu°îLi°
);

507 i‡(
ïDesc
->
sim∂eDesc
->
AµNumOutClu°îs
)

509 
	`oßl_mem_‰ì
(
ïDesc
->
sim∂eDesc
->
pAµOutClu°îLi°
);

512 
	`oßl_mem_‰ì
(
ïDesc
->
sim∂eDesc
);

517 
ªt
 = 
ZMemEº‹
;

521  
ªt
;

522 
	}
}

	@Components/mt/MT.h

39 #i‚de‡
MT_H


40 
	#MT_H


	)

42 #ifde‡
__˝lu•lus


51 
	~"MT_RPC.h
"

52 
	~"ZComDef.h
"

62 
	#ZTEST_DEFAULT_PARAM_LEN
 0x10

63 
	#ZTEST_DEFAULT_ADDR_LEN
 0x08

64 
	#ZTEST_DEFAULT_DATA_LEN
 0x66

65 
	#ZTEST_DEFAULT_AF_DATA_LEN
 0x20

66 
	#ZTEST_DEFAULT_SEC_LEN
 0x0B

	)

73 
	#MT_SYS_RESET_REQ
 0x00

	)

76 
	#MT_SYS_PING
 0x01

	)

77 
	#MT_SYS_VERSION
 0x02

	)

78 
	#MT_SYS_SET_EXTADDR
 0x03

	)

79 
	#MT_SYS_GET_EXTADDR
 0x04

	)

80 
	#MT_SYS_RAM_READ
 0x05

	)

81 
	#MT_SYS_RAM_WRITE
 0x06

	)

82 
	#MT_SYS_OSAL_NV_ITEM_INIT
 0x07

	)

83 
	#MT_SYS_OSAL_NV_READ
 0x08

	)

84 
	#MT_SYS_OSAL_NV_WRITE
 0x09

	)

85 
	#MT_SYS_OSAL_START_TIMER
 0x0A

	)

86 
	#MT_SYS_OSAL_STOP_TIMER
 0x0B

	)

87 
	#MT_SYS_RANDOM
 0x0C

	)

88 
	#MT_SYS_ADC_READ
 0x0D

	)

89 
	#MT_SYS_GPIO
 0x0E

	)

92 
	#MT_SYS_RESET_IND
 0x80

	)

93 
	#MT_SYS_OSAL_TIMER_EXPIRED
 0x81

	)

99 
	#MT_MAC_RESET_REQ
 0x01

	)

100 
	#MT_MAC_INIT
 0x02

	)

101 
	#MT_MAC_START_REQ
 0x03

	)

102 
	#MT_MAC_SYNC_REQ
 0x04

	)

103 
	#MT_MAC_DATA_REQ
 0x05

	)

104 
	#MT_MAC_ASSOCIATE_REQ
 0x06

	)

105 
	#MT_MAC_DISASSOCIATE_REQ
 0x07

	)

106 
	#MT_MAC_GET_REQ
 0x08

	)

107 
	#MT_MAC_SET_REQ
 0x09

	)

108 
	#MT_MAC_GTS_REQ
 0x0a

	)

109 
	#MT_MAC_RX_ENABLE_REQ
 0x0b

	)

110 
	#MT_MAC_SCAN_REQ
 0x0c

	)

111 
	#MT_MAC_POLL_REQ
 0x0d

	)

112 
	#MT_MAC_PURGE_REQ
 0x0e

	)

113 
	#MT_MAC_SET_RX_GAIN_REQ
 0x0f

	)

114 
	#MT_MAC_SRC_MATCH_ENABLE
 0x10

	)

115 
	#MT_MAC_SRC_MATCH_ADD_ENTRY
 0x11

	)

116 
	#MT_MAC_SRC_MATCH_DEL_ENTRY
 0x12

	)

117 
	#MT_MAC_SRC_MATCH_CHECK_SRC_ADDR
 0x13

	)

118 
	#MT_MAC_SRC_MATCH_ACK_ALL_PENDING
 0x14

	)

119 
	#MT_MAC_SRC_MATCH_CHECK_ALL_PENDING
 0x15

	)

122 
	#MT_MAC_ASSOCIATE_RSP
 0x50

	)

123 
	#MT_MAC_ORPHAN_RSP
 0x51

	)

126 
	#MT_MAC_SYNC_LOSS_IND
 0x80

	)

127 
	#MT_MAC_ASSOCIATE_IND
 0x81

	)

128 
	#MT_MAC_ASSOCIATE_CNF
 0x82

	)

129 
	#MT_MAC_BEACON_NOTIFY_IND
 0x83

	)

130 
	#MT_MAC_DATA_CNF
 0x84

	)

131 
	#MT_MAC_DATA_IND
 0x85

	)

132 
	#MT_MAC_DISASSOCIATE_IND
 0x86

	)

133 
	#MT_MAC_DISASSOCIATE_CNF
 0x87

	)

134 
	#MT_MAC_GTS_CNF
 0x88

	)

135 
	#MT_MAC_GTS_IND
 0x89

	)

136 
	#MT_MAC_ORPHAN_IND
 0x8a

	)

137 
	#MT_MAC_POLL_CNF
 0x8b

	)

138 
	#MT_MAC_SCAN_CNF
 0x8c

	)

139 
	#MT_MAC_COMM_STATUS_IND
 0x8d

	)

140 
	#MT_MAC_START_CNF
 0x8e

	)

141 
	#MT_MAC_RX_ENABLE_CNF
 0x8f

	)

142 
	#MT_MAC_PURGE_CNF
 0x90

	)

149 
	#MT_NWK_INIT
 0x00

	)

152 
	#MT_NLDE_DATA_REQ
 0x01

	)

153 
	#MT_NLME_NETWORK_FORMATION_REQ
 0x02

	)

154 
	#MT_NLME_PERMIT_JOINING_REQ
 0x03

	)

155 
	#MT_NLME_JOIN_REQ
 0x04

	)

156 
	#MT_NLME_LEAVE_REQ
 0x05

	)

157 
	#MT_NLME_RESET_REQ
 0x06

	)

158 
	#MT_NLME_GET_REQ
 0x07

	)

159 
	#MT_NLME_SET_REQ
 0x08

	)

160 
	#MT_NLME_NETWORK_DISCOVERY_REQ
 0x09

	)

161 
	#MT_NLME_ROUTE_DISCOVERY_REQ
 0x0A

	)

162 
	#MT_NLME_DIRECT_JOIN_REQ
 0x0B

	)

163 
	#MT_NLME_ORPHAN_JOIN_REQ
 0x0C

	)

164 
	#MT_NLME_START_ROUTER_REQ
 0x0D

	)

167 
	#MT_NLDE_DATA_CONF
 0x80

	)

168 
	#MT_NLDE_DATA_IND
 0x81

	)

169 
	#MT_NLME_NETWORK_FORMATION_CONF
 0x82

	)

170 
	#MT_NLME_JOIN_CONF
 0x83

	)

171 
	#MT_NLME_JOIN_IND
 0x84

	)

172 
	#MT_NLME_LEAVE_CONF
 0x85

	)

173 
	#MT_NLME_LEAVE_IND
 0x86

	)

174 
	#MT_NLME_POLL_CONF
 0x87

	)

175 
	#MT_NLME_SYNC_IND
 0x88

	)

176 
	#MT_NLME_NETWORK_DISCOVERY_CONF
 0x89

	)

177 
	#MT_NLME_START_ROUTER_CONF
 0x8A

	)

184 
	#MT_AF_REGISTER
 0x00

	)

185 
	#MT_AF_DATA_REQUEST
 0x01

	)

188 
	#MT_AF_DATA_CONFIRM
 0x80

	)

189 
	#MT_AF_INCOMING_MSG
 0x81

	)

196 
	#MT_ZDO_NWK_ADDR_REQ
 0x00

	)

197 
	#MT_ZDO_IEEE_ADDR_REQ
 0x01

	)

198 
	#MT_ZDO_NODE_DESC_REQ
 0x02

	)

199 
	#MT_ZDO_POWER_DESC_REQ
 0x03

	)

200 
	#MT_ZDO_SIMPLE_DESC_REQ
 0x04

	)

201 
	#MT_ZDO_ACTIVE_EP_REQ
 0x05

	)

202 
	#MT_ZDO_MATCH_DESC_REQ
 0x06

	)

203 
	#MT_ZDO_COMPLEX_DESC_REQ
 0x07

	)

204 
	#MT_ZDO_USER_DESC_REQ
 0x08

	)

205 
	#MT_ZDO_END_DEV_ANNCE
 0x0A

	)

206 
	#MT_ZDO_USER_DESC_SET
 0x0B

	)

207 
	#MT_ZDO_SERVICE_DISC_REQ
 0x0C

	)

208 
	#MT_ZDO_END_DEV_BIND_REQ
 0x20

	)

209 
	#MT_ZDO_BIND_REQ
 0x21

	)

210 
	#MT_ZDO_UNBIND_REQ
 0x22

	)

211 
	#MT_ZDO_MGMT_NWKDISC_REQ
 0x30

	)

212 
	#MT_ZDO_MGMT_LQI_REQ
 0x31

	)

213 
	#MT_ZDO_MGMT_RTG_REQ
 0x32

	)

214 
	#MT_ZDO_MGMT_BIND_REQ
 0x33

	)

215 
	#MT_ZDO_MGMT_LEAVE_REQ
 0x34

	)

216 
	#MT_ZDO_MGMT_DIRECT_JOIN_REQ
 0x35

	)

217 
	#MT_ZDO_MGMT_PERMIT_JOIN_REQ
 0x36

	)

218 
	#MT_ZDO_MGMT_NWK_UPDATE_REQ
 0x37

	)

219 
	#MT_ZDO_STARTUP_FROM_APP
 0x40

	)

222 
	#MT_ZDO_AUTO_FIND_DESTINATION_REQ
 0x41

	)

223 
	#MT_ZDO_AUTO_ENDDEVICEBIND_REQ
 0x42

	)

226 
	#MT_ZDO_NWK_ADDR_RSP
 0x80

	)

227 
	#MT_ZDO_IEEE_ADDR_RSP
 0x81

	)

228 
	#MT_ZDO_NODE_DESC_RSP
 0x82

	)

229 
	#MT_ZDO_POWER_DESC_RSP
 0x83

	)

230 
	#MT_ZDO_SIMPLE_DESC_RSP
 0x84

	)

231 
	#MT_ZDO_ACTIVE_EP_RSP
 0x85

	)

232 
	#MT_ZDO_MATCH_DESC_RSP
 0x86

	)

233 
	#MT_ZDO_COMPLEX_DESC_RSP
 0x87

	)

234 
	#MT_ZDO_USER_DESC_RSP
 0x88

	)

235 
	#MT_ZDO_USER_DESC_CONF
 0x89

	)

236 
	#MT_ZDO_SERVER_DISC_RSP
 0x8A

	)

237 
	#MT_ZDO_END_DEVICE_BIND_RSP
 0xA0

	)

238 
	#MT_ZDO_BIND_RSP
 0xA1

	)

239 
	#MT_ZDO_UNBIND_RSP
 0xA2

	)

240 
	#MT_ZDO_MGMT_NWK_DISC_RSP
 0xB0

	)

241 
	#MT_ZDO_MGMT_LQI_RSP
 0xB1

	)

242 
	#MT_ZDO_MGMT_RTG_RSP
 0xB2

	)

243 
	#MT_ZDO_MGMT_BIND_RSP
 0xB3

	)

244 
	#MT_ZDO_MGMT_LEAVE_RSP
 0xB4

	)

245 
	#MT_ZDO_MGMT_DIRECT_JOIN_RSP
 0xB5

	)

246 
	#MT_ZDO_MGMT_PERMIT_JOIN_RSP
 0xB6

	)

247 
	#MT_ZDO_STATE_CHANGE_IND
 0xC0

	)

248 
	#MT_ZDO_END_DEVICE_ANNCE_IND
 0xC1

	)

249 
	#MT_ZDO_MATCH_DESC_RSP_SENT
 0xC2

	)

250 
	#MT_ZDO_STATUS_ERROR_RSP
 0xC3

	)

258 
	#MT_SAPI_SYS_RESET
 0x09

	)

261 
	#MT_SAPI_START_REQ
 0x00

	)

262 
	#MT_SAPI_BIND_DEVICE_REQ
 0x01

	)

263 
	#MT_SAPI_ALLOW_BIND_REQ
 0x02

	)

264 
	#MT_SAPI_SEND_DATA_REQ
 0x03

	)

265 
	#MT_SAPI_READ_CFG_REQ
 0x04

	)

266 
	#MT_SAPI_WRITE_CFG_REQ
 0x05

	)

267 
	#MT_SAPI_GET_DEV_INFO_REQ
 0x06

	)

268 
	#MT_SAPI_FIND_DEV_REQ
 0x07

	)

269 
	#MT_SAPI_PMT_JOIN_REQ
 0x08

	)

270 
	#MT_SAPI_APP_REGISTER_REQ
 0x0a

	)

273 
	#MT_SAPI_START_CNF
 0x80

	)

274 
	#MT_SAPI_BIND_CNF
 0x81

	)

275 
	#MT_SAPI_ALLOW_BIND_CNF
 0x82

	)

276 
	#MT_SAPI_SEND_DATA_CNF
 0x83

	)

277 
	#MT_SAPI_READ_CFG_RSP
 0x84

	)

278 
	#MT_SAPI_FIND_DEV_CNF
 0x85

	)

279 
	#MT_SAPI_DEV_INFO_RSP
 0x86

	)

280 
	#MT_SAPI_RCV_DATA_IND
 0x87

	)

288 
	#MT_UTIL_GET_DEVICE_INFO
 0x00

	)

289 
	#MT_UTIL_GET_NV_INFO
 0x01

	)

290 
	#MT_UTIL_SET_PANID
 0x02

	)

291 
	#MT_UTIL_SET_CHANNELS
 0x03

	)

292 
	#MT_UTIL_SET_SECLEVEL
 0x04

	)

293 
	#MT_UTIL_SET_PRECFGKEY
 0x05

	)

294 
	#MT_UTIL_CALLBACK_SUB_CMD
 0x06

	)

295 
	#MT_UTIL_KEY_EVENT
 0x07

	)

296 
	#MT_UTIL_HEARTBEAT
 0x08

	)

297 
	#MT_UTIL_TIME_ALIVE
 0x09

	)

298 
	#MT_UTIL_LED_CONTROL
 0x0A

	)

305 
	#MT_DEBUG_SET_THRESHOLD
 0x00

	)

308 
	#MT_DEBUG_MSG
 0x80

	)

315 
	#MT_APP_MSG
 0x00

	)

316 
	#MT_APP_USER_TEST
 0x01

	)

319 
	#MT_APP_RSP
 0x80

	)

328 
	#MT_ZTOOL_SERIAL_RCV_CHAR
 0x0001

	)

329 
	#MT_ZAPP_SERIAL_RCV_CHAR
 0x0002

	)

330 
	#MT_ZTOOL_SERIAL_RCV_BUFFER_FULL
 0x0004

	)

331 
	#MT_ZAPP_SERIAL_RCV_BUFFER_FULL
 0x0008

	)

332 
	#MT_SERIAL_ZTOOL_XMT_READY
 0x0010

	)

333 
	#MT_SERIAL_ZAPP_XMT_READY
 0x0020

	)

334 
	#MT_MSG_SEQUENCE_EVT
 0x0040

	)

335 
	#MT_KEYPRESS_POLL_EVT
 0x0080

	)

338 
	#CMD_SERIAL_MSG
 0x01

	)

339 
	#CMD_DEBUG_MSG
 0x02

	)

340 
	#CMD_TX_MSG
 0x03

	)

341 
	#CB_FUNC
 0x04

	)

342 
	#CMD_SEQUENCE_MSG
 0x05

	)

343 
	#CMD_DEBUG_STR
 0x06

	)

344 
	#AF_INCOMING_MSG_FOR_MT
 0x0F

	)

347 
	#UNRECOGNIZED_COMMAND
 0x00

	)

348 
	#UNSUPPORTED_COMMAND
 0x01

	)

349 
	#RECEIVE_BUFFER_FULL
 0x02

	)

352 
	#SPI_CMD_DEBUG_MSG
 0x4003

	)

353 
	#SPI_CMD_TRACE_SUB
 0x0004

	)

354 
	#SPI_CMD_TRACE_MSG
 0x4004

	)

357 
	#SPI_CMD_USER0
 0x000A

	)

358 
	#SPI_CMD_USER1
 0x000B

	)

359 
	#SPI_CMD_USER2
 0x000C

	)

360 
	#SPI_CMD_USER3
 0x000D

	)

361 
	#SPI_CMD_USER4
 0x000E

	)

362 
	#SPI_CMD_USER5
 0x000F

	)

365 
	#SPI_SYS_STRING_MSG
 0x0015

	)

366 
	#SPI_CMD_SYS_NETWORK_START
 0x0020

	)

367 
	#SPI_CMD_ZIGNET_DATA
 0x0022

	)

370 
	#SPI_CB_SYS_CALLBACK_SUB_RSP
 0x1006

	)

371 
	#SPI_CB_SYS_PING_RSP
 0x1007

	)

372 
	#SPI_CB_SYS_GET_DEVICE_INFO_RSP
 0x1014

	)

373 
	#SPI_CB_SYS_KEY_EVENT_RSP
 0x1016

	)

374 
	#SPI_CB_SYS_HEARTBEAT_RSP
 0x1017

	)

375 
	#SPI_CB_SYS_LED_CONTROL_RSP
 0x1019

	)

378 
	#SPI_CMD_SEQ_START
 0x0600

	)

379 
	#SPI_CMD_SEQ_WAIT
 0x0601

	)

380 
	#SPI_CMD_SEQ_END
 0x0602

	)

381 
	#SPI_CMD_SEQ_RESET
 0x0603

	)

382 
	#DEFAULT_WAIT_INTERVAL
 5000

383 

	)

385 
	#SPI_RESPONSE_BIT
 0x1000

	)

386 
	#SPI_SUBSCRIPTION_BIT
 0x2000

	)

387 
	#SPI_DEBUGTRACE_BIT
 0x4000

	)

389 
	#SPI_0DATA_MSG_LEN
 5

	)

390 
	#SPI_RESP_MSG_LEN_DEFAULT
 6

	)

392 
	#LEN_MAC_BEACON_MSDU
 15

	)

393 
	#LEN_MAC_COORDEXTND_ADDR
 8

	)

394 
	#LEN_MAC_ATTR_BYTE
 1

	)

395 
	#LEN_MAC_ATTR_INT
 2

	)

397 
	#SOP_FIELD
 0

	)

398 
	#CMD_FIELD_HI
 1

	)

399 
	#CMD_FIELD_LO
 2

	)

400 
	#DATALEN_FIELD
 3

	)

401 
	#DATA_BEGIN
 4

	)

404 
	#MT_MAC_CB_ID
 0

	)

405 
	#MT_OFFSET
 1

	)

406 
	#MT_SOP_FIELD
 
MT_OFFSET
 + 
SOP_FIELD


	)

407 
	#MT_CMD_FIELD_HI
 
MT_OFFSET
 + 
CMD_FIELD_HI


	)

408 
	#MT_CMD_FIELD_LO
 
MT_OFFSET
 + 
CMD_FIELD_LO


	)

409 
	#MT_DATALEN_FIELD
 
MT_OFFSET
 + 
DATALEN_FIELD


	)

410 
	#MT_DATA_BEGIN
 
MT_OFFSET
 + 
DATA_BEGIN


	)

412 
	#MT_INFO_HEADER_LEN
 1

	)

413 
	#MT_RAM_READ_RESP_LEN
 0x02

	)

414 
	#MT_RAM_WRITE_RESP_LEN
 0x01

	)

417 
	#AF_INTERFACE_BITS
 0x07

	)

418 
	#AF_INTERFACE_OFFSET
 0x05

	)

419 
	#AF_APP_DEV_VER_MASK
 0x0F

	)

420 
	#AF_APP_FLAGS_MASK
 0x0F

	)

421 
	#AF_TRANSTYPE_MASK
 0x0F

	)

422 
	#AF_TRANSDATATYPE_MASK
 0x0F

	)

425 
	#AF_SEMI_PREC_SIGN
 0x8000

	)

426 
	#AF_SEMI_PREC_EXPONENT
 0x7C00

	)

427 
	#AF_SEMI_PREC_MANTISSA
 0x03FF

	)

428 
	#AF_SEMI_PREC_SIGN_OFFSET
 0x0F

	)

429 
	#AF_SEMI_PREC_EXP_OFFSET
 0x0A

	)

432 
	#SRC_CHANGE_STATE
 0x0000

	)

433 
	#DRC_TOGGLE_STATE
 0x0001

	)

434 
	#DRC_TOGGLE_PRESET
 0x0002

	)

435 
	#OS_TOGGLE_STATE
 0x0003

	)

436 
	#SLC_RCV_SET_ONOFF
 0x0004

	)

437 
	#DLC_RCV_SET_ONOFF
 0x0005

	)

438 
	#DLC_RCV_SET_DIMBRIGHT
 0x0006

	)

439 
	#DLC_RCV_SET_PRESET
 0x0007

	)

440 
	#LSM_TOGGLE_STATE
 0x0008

	)

442 
	#DRC_DIMBRIGHT
 0x0009

	)

444 
	#TGEN_START
 0x000a

	)

445 
	#TGEN_STOP
 0x000b

	)

446 
	#TGEN_COUNT
 0x000c

	)

447 
	#DEBUG_GET
 0x000d

	)

448 
	#HW_TEST
 0x000e

	)

449 
	#HW_DISPLAY_RESULT
 0x000f

	)

450 
	#HW_SEND_STATUS
 0x0010

	)

452 #i‡
deföed
–
APP_TP
 ) || deföed ( 
APP_TP2
 )

453 #i‡
deföed
–
APP_TP
 )

454 
	#TP_SEND_NODATA
 0x0011

	)

456 
	#TP_SEND_BCAST_RSP
 0x0011

	)

458 
	#TP_SEND_BUFFERTEST
 0x0012

	)

459 #i‡
deföed
 (
APP_TP
)

460 
	#TP_SEND_UINT8
 0x0013

	)

461 
	#TP_SEND_INT8
 0x0014

	)

462 
	#TP_SEND_UINT16
 0x0015

	)

463 
	#TP_SEND_INT16
 0x0016

	)

464 
	#TP_SEND_SEMIPREC
 0x0017

	)

466 
	#TP_SEND_FREEFORM
 0x0018

	)

467 #i‡
deföed
–
APP_TP
 )

468 
	#TP_SEND_ABS_TIME
 0x0019

	)

469 
	#TP_SEND_REL_TIME
 0x001A

	)

470 
	#TP_SEND_CHAR_STRING
 0x001B

	)

471 
	#TP_SEND_OCTET_STRING
 0x001C

	)

473 
	#TP_SET_DSTADDRESS
 0x001D

	)

474 #i‡
deföed
–
APP_TP2
 )

475 
	#TP_SEND_BUFFER_GROUP
 0x001E

	)

477 
	#TP_SEND_BUFFER
 0x001F

	)

478 #i‡
deföed
–
APP_TP
 )

479 
	#TP_SEND_CON_INT8
 0x0020

	)

480 
	#TP_SEND_CON_INT16
 0x0021

	)

481 
	#TP_SEND_CON_TIME
 0x0022

	)

483 
	#TP_SEND_MULT_KVP_8BIT
 0x0023

	)

484 
	#TP_SEND_MULT_KVP_16BIT
 0x0024

	)

485 
	#TP_SEND_MULT_KVP_TIME
 0x0025

	)

486 
	#TP_SEND_MULT_KVP_STRING
 0x0026

	)

489 
	#TP_SEND_COUNTED_PKTS
 0x0027

	)

490 
	#TP_SEND_RESET_COUNTER
 0x0028

	)

491 
	#TP_SEND_GET_COUNTER
 0x0029

	)

493 #i‡
deföed
–
APP_TP
 )

494 
	#TP_SEND_MULTI_KVP_STR_TIME
 0x0030

	)

497 
	#TP_SET_PERMIT_JOIN
 0x0040

	)

499 
	#TP_ADD_GROUP
 0x0041

	)

500 
	#TP_REMOVE_GROUP
 0x0042

	)

502 
	#TP_SEND_UPDATE_KEY
 0x0043

	)

503 
	#TP_SEND_SWITCH_KEY
 0x0044

	)

505 #i‡
deföed
–
APP_TP2
 )

506 
	#TP_SEND_BUFFERTEST_GROUP
 0x0045

	)

507 
	#TP_SEND_ROUTE_DISC_REQ
 0x0046

	)

508 
	#TP_SEND_ROUTE_DISCOVERY
 0x0047

	)

509 
	#TP_SEND_NEW_ADDR
 0x0048

	)

510 
	#TP_SEND_NWK_UPDATE
 0x0049

	)

511 
	#TP_AK_SETUP_PARTNER
 0x0050

	)

512 
	#TP_AK_REQ_KEY
 0x0051

	)

513 
	#TP_AK_PARTNER_NWKADDR
 0x0052

	)

514 
	#TP_AK_PARTNER_EXTADDR7654
 0x0053

	)

515 
	#TP_AK_PARTNER_EXTADDR3210
 0x0054

	)

516 
	#TP_AK_PARTNER_SET
 0x0055

	)

517 
	#TP_AK_TYPE_SET
 0x0056

	)

518 
	#TP_FRAG_SKIP_BLOCK
 0x0057

	)

519 
	#TP_APS_REMOVE
 0x0058

	)

524 #i‡
deföed
 ( 
OSAL_TOTAL_MEM
 )

525 
	#OSAL_MEM_STACK_HIGH_WATER
 0x0100

	)

526 
	#OSAL_MEM_HEAP_HIGH_WATER
 0x0101

	)

531 #i‡
deföed
 (
MT_SYS_FUNC
)

532 
	#MT_CAP_SYS
 0x0001

	)

534 
	#MT_CAP_SYS
 0x0000

	)

537 #i‡
deföed
 ( 
MT_MAC_FUNC
 )

538 
	#MT_CAP_MAC
 0x0002

	)

540 
	#MT_CAP_MAC
 0x0000

	)

543 #i‡
deföed
 ( 
MT_NWK_FUNC
 )

544 
	#MT_CAP_NWK
 0x0004

	)

546 
	#MT_CAP_NWK
 0x0000

	)

549 #i‡
deföed
 ( 
MT_AF_FUNC
 )

550 
	#MT_CAP_AF
 0x0008

	)

552 
	#MT_CAP_AF
 0x0000

	)

555 #i‡
deföed
 ( 
MT_ZDO_FUNC
 )

556 
	#MT_CAP_ZDO
 0x0010

	)

558 
	#MT_CAP_ZDO
 0x0000

	)

561 #i‡
deföed
 ( 
MT_SAPI_FUNC
 )

562 
	#MT_CAP_SAPI
 0x0020

	)

564 
	#MT_CAP_SAPI
 0x0000

	)

567 #i‡
deföed
 ( 
MT_UTIL_FUNC
 )

568 
	#MT_CAP_UTIL
 0x0040

	)

570 
	#MT_CAP_UTIL
 0x0000

	)

573 #i‡
deföed
 ( 
MT_DEBUG_FUNC
 )

574 
	#MT_CAP_DEBUG
 0x0080

	)

576 
	#MT_CAP_DEBUG
 0x0000

	)

579 #i‡
deföed
 ( 
MT_APP_FUNC
 )

580 
	#MT_CAP_APP
 0x0100

	)

582 
	#MT_CAP_APP
 0x0000

	)

585 #i‡
deföed
 ( 
ZPORT
 )

586 
	#MT_CAP_ZOAD
 0x1000

	)

588 
	#MT_CAP_ZOAD
 0x0000

	)

597 
uöt16
 
waôI¡îvÆ
;

598 
byã
 *
msg
;

599 *
√xt
;

600 } 
	tMT_msg_queue_t
;

605 
byã
 
MT_TaskID
;

606 
byã
 
debugThªshﬁd
;

607 
byã
 
debugCompId
;

609 
byã
 
queueMsgs
;

610 
MT_msg_queue_t
 *
_pMtMsgQueue
;

611 
MT_msg_queue_t
 *
_pLa°InQueue
;

612 
MT_msg_queue_t
 *
_pCurQueueEÀm
;

617 
MT_BuûdAndSídZToﬁRe•⁄£
(
uöt8
 
cmdTy≥
, uöt8 
cmdId
, uöt8 
d©aLí
, uöt8 *
d©aPå
);

622 
MT_BuûdSPIMsg
–
uöt8
 
cmdTy≥
, uöt8 
cmdId
, 
byã
 *
msg
, byã 
d©aLí
, byã *
d©aPå
 );

627 
MT_Pro˚ssU£rCmd
–
byã
 
cmd
 );

632 
MT_RadioComm™dPro˚ssög
–
uöt16
 
cmd_id
 , 
byã
 
Àn
 , byã *
pD©a
 );

637 
MT_PhyComm™dPro˚ssög
–
uöt16
 
cmd_id
 , 
byã
 
Àn
 , byã *
pD©a
 );

643 
uöt8
 *
MT_W‹d2Buf
–uöt8 *
pBuf
, 
uöt16
 *
pW‹d
, uöt8 
Àn
 );

648 
MT_Revî£Byãs
–
byã
 *
pD©a
, byã 
Àn
 );

653 
MTPro˚ssAµR•Msg
(
byã
 *
pD©a
, byã 
Àn
);

658 
MT_Inô
(
uöt8
 
èskID
);

663 
MT_Pro˚ssIncomög
(
uöt8
 *
pBuf
);

668 
uöt8
 *
MT_Tøn•‹tAŒoc
(uöt8 
cmd0
, uöt8 
Àn
);

673 
MT_Tøn•‹tSíd
(
uöt8
 *
pBuf
);

678 
uöt8
 
MT_BuûdEndpoötDesc
–uöt8 *
pBuf
, *
∑øm
 );

683 #ifde‡
__˝lu•lus


	@Components/mt/MT_AF.c

45 
	~"ZComDef.h
"

46 
	~"OSAL.h
"

47 
	~"MT.h
"

48 
	~"MT_AF.h
"

49 
	~"nwk.h
"

50 
	~"OnBﬂrd.h
"

51 
	~"MT_UART.h
"

58 #i‡
deföed
 ( 
MT_AF_CB_FUNC
 )

59 
uöt16
 
	g_afCÆlbackSub
;

65 
MT_AfRegi°î
(
uöt8
 *
pBuf
);

66 
MT_AfD©aReque°
(
uöt8
 *
pBuf
);

77 
uöt8
 
	$MT_AfComm™dPro˚ssög
(
uöt8
 *
pBuf
)

79 
uöt8
 
°©us
 = 
MT_RPC_SUCCESS
;

81 
pBuf
[
MT_RPC_POS_CMD1
])

83 
MT_AF_REGISTER
:

84 
	`MT_AfRegi°î
(
pBuf
);

87 
MT_AF_DATA_REQUEST
:

88 
	`MT_AfD©aReque°
(
pBuf
);

92 
°©us
 = 
MT_RPC_ERR_COMMAND_ID
;

96  
°©us
;

97 
	}
}

108 
	$MT_AfRegi°î
(
uöt8
 *
pBuf
)

110 
uöt8
 
cmdId
;

111 
uöt8
 
ªtVÆue
 = 
ZMemEº‹
;

112 
ídPoötDesc_t
 *
ïDesc
;

115 
cmdId
 = 
pBuf
[
MT_RPC_POS_CMD1
];

116 
pBuf
 +
MT_RPC_FRAME_HDR_SZ
;

118 
ïDesc
 = (
ídPoötDesc_t
 *)
	`oßl_mem_Æloc
((endPointDesc_t));

119 i‡–
ïDesc
 )

121 
ïDesc
->
èsk_id
 = &
MT_TaskID
;

122 
ªtVÆue
 = 
	`MT_BuûdEndpoötDesc
–
pBuf
, 
ïDesc
 );

123 i‡–
ªtVÆue
 =
ZSuc˚ss
 )

125 
ªtVÆue
 = 
	`afRegi°î
–
ïDesc
 );

128 i‡–
ªtVÆue
 !
ZSuc˚ss
 )

130 
	`oßl_mem_‰ì
–
ïDesc
 );

135 
	`MT_BuûdAndSídZToﬁRe•⁄£
(((
uöt8
)
MT_RPC_CMD_SRSP
 | (uöt8)
MT_RPC_SYS_AF
), 
cmdId
, 1, &
ªtVÆue
);

136 
	}
}

147 
	$MT_AfD©aReque°
(
uöt8
 *
pBuf
)

149 
uöt8
 
cmdId
, 
ãmpLí
 = 0;

150 
uöt8
 
ªtVÆue
 = 
ZFaûuª
;

151 
ídPoötDesc_t
 *
ïDesc
;

152 
byã
 
å™sId
;

153 
afAddrTy≥_t
 
d°Addr
;

154 
cId_t
 
cId
;

155 
byã
 
txO±s
, 
ødius
, 
§cEP
;

158 
cmdId
 = 
pBuf
[
MT_RPC_POS_CMD1
];

159 
pBuf
 +
MT_RPC_FRAME_HDR_SZ
;

162 
d°Addr
.
addrMode
 = 
afAddr16Bô
;

163 
d°Addr
.
addr
.
sh‹tAddr
 = 
	`BUILD_UINT16
(
pBuf
[0],ÖBuf[1]);

164 
pBuf
 += 2;

167 
d°Addr
.
ídPoöt
 = *
pBuf
++;

170 
§cEP
 = *
pBuf
++;

171 
ïDesc
 = 
	`afFödEndPoötDesc
–
§cEP
 );

174 
cId
 = 
	`BUILD_UINT16
(
pBuf
[0],ÖBuf[1]);

175 
pBuf
 +=2;

178 
å™sId
 = *
pBuf
++;

181 
txO±s
 = *
pBuf
++;

184 
ødius
 = *
pBuf
++;

187 
ãmpLí
 = *
pBuf
++;

189 i‡–
ïDesc
 =
NULL
 )

191 
ªtVÆue
 = 
afSètus_INVALID_PARAMETER
;

195 
ªtVÆue
 = 
	`AF_D©aReque°
–&
d°Addr
, 
ïDesc
, 
cId
, 
ãmpLí
, 
pBuf
, &
å™sId
, 
txO±s
, 
ødius
 );

199 
	`MT_BuûdAndSídZToﬁRe•⁄£
(((
uöt8
)
MT_RPC_CMD_SRSP
 | (uöt8)
MT_RPC_SYS_AF
), 
cmdId
, 1, &
ªtVÆue
);

200 
	}
}

211 
	$MT_AfD©aC⁄fúm
(
afD©aC⁄fúm_t
 *
pMsg
)

213 
uöt8
 
ªtAºay
[3];

215 
ªtAºay
[0] = 
pMsg
->
hdr
.
°©us
;

216 
ªtAºay
[1] = 
pMsg
->
ídpoöt
;

217 
ªtAºay
[2] = 
pMsg
->
å™sID
;

220 
	`MT_BuûdAndSídZToﬁRe•⁄£
(((
uöt8
)
MT_RPC_CMD_AREQ
 | (uöt8)
MT_RPC_SYS_AF
), 
MT_AF_DATA_CONFIRM
, 3, 
ªtAºay
);

221 
	}
}

232 
	$MT_AfIncomögMsg
(
afIncomögMSGPackë_t
 *
pMsg
)

234 
uöt8
 
ª•Lí
;

235 
uöt8
 
d©aLí
;

236 
uöt8
 *
ª•På
, *
ãmpPå
;

239 
d©aLí
 = 
pMsg
->
cmd
.
D©aLígth
;

241 
ª•Lí
 = 17 + 
d©aLí
;

244 
ª•På
 = 
	`oßl_mem_Æloc
(
ª•Lí
);

245 i‡(!
ª•På
)

249 
ãmpPå
 = 
ª•På
;

254 *
ãmpPå
++ = 
	`LO_UINT16
(
pMsg
->
groupId
);

255 *
ãmpPå
++ = 
	`HI_UINT16
(
pMsg
->
groupId
);

258 *
ãmpPå
++ = 
	`LO_UINT16
(
pMsg
->
˛u°îId
);

259 *
ãmpPå
++ = 
	`HI_UINT16
(
pMsg
->
˛u°îId
);

262 *
ãmpPå
++ = 
	`LO_UINT16
(
pMsg
->
§cAddr
.
addr
.
sh‹tAddr
);

263 *
ãmpPå
++ = 
	`HI_UINT16
(
pMsg
->
§cAddr
.
addr
.
sh‹tAddr
);

266 *
ãmpPå
++ = 
pMsg
->
§cAddr
.
ídPoöt
;

269 *
ãmpPå
++ = 
pMsg
->
ídPoöt
;

272 *
ãmpPå
++ = 
pMsg
->
wasBrﬂdˇ°
;

275 *
ãmpPå
++ = 
pMsg
->
LökQuÆôy
;

278 *
ãmpPå
++ = 
pMsg
->
SecurôyU£
;

281 *
ãmpPå
++ = 
	`BREAK_UINT32
(
pMsg
->
time°amp
, 0);

282 *
ãmpPå
++ = 
	`BREAK_UINT32
(
pMsg
->
time°amp
, 1);

283 *
ãmpPå
++ = 
	`BREAK_UINT32
(
pMsg
->
time°amp
, 2);

284 *
ãmpPå
++ = 
	`BREAK_UINT32
(
pMsg
->
time°amp
, 3);

287 *
ãmpPå
++ = 
pMsg
->
cmd
.
TønsSeqNumbî
;

290 *
ãmpPå
++ = 
d©aLí
;

293 i‡(
d©aLí
)

295 
	`oßl_mem˝y
(
ãmpPå
, 
pMsg
->
cmd
.
D©a
, 
d©aLí
);

299 
	`MT_BuûdAndSídZToﬁRe•⁄£
(((
uöt8
)
MT_RPC_CMD_AREQ
 | (uöt8)
MT_RPC_SYS_AF
), 
MT_AF_INCOMING_MSG
, 
ª•Lí
, 
ª•På
 );

302 
	`oßl_mem_‰ì
(
ª•På
);

304 
	}
}

	@Components/mt/MT_AF.h

40 #i‚de‡
MT_AF_H


41 
	#MT_AF_H


	)

46 
	~"ZComDef.h
"

47 
	~"MT.h
"

48 
	~"AF.h
"

49 
	~"OnBﬂrd.h
"

52 
	#AFCB_CHECK
(
cbi
,
èsk
Ë((1Ë&& (èsk =
MT_TaskID
))

	)

57 #i‡
deföed
 ( 
MT_AF_CB_FUNC
 )

58 
	#CB_ID_AF_DATA_IND
 0x0001

	)

59 
	#CB_ID_AF_DATA_CNF
 0x0002

	)

60 
	#SPI_AF_CB_TYPE
 0x0900

	)

66 
uöt16
 
_afCÆlbackSub
;

71 
uöt8
 
MT_AfComm™dPro˚ssög
(uöt8 *
pBuf
);

76 
MT_AfIncomögMsg
(
afIncomögMSGPackë_t
 *
pMsg
);

81 
MT_AfD©aC⁄fúm
(
afD©aC⁄fúm_t
 *
pMsg
);

	@Components/mt/MT_APP.c

43 
	~"ZComDef.h
"

44 
	~"MT.h
"

45 
	~"MT_APP.h
"

46 
	~"MT_AF.h
"

48 #i‡
deföed
–
APP_TP
 )

49 
	~"Te°Profûe.h
"

51 #i‡
deföed
–
APP_TP2
 )

52 
	~"Te°Profûe2.h
"

53 
	~"nwk_utû.h
"

59 #i‡
deföed
 (
MT_APP_FUNC
)

60 
MT_AµMsg
(
uöt8
 *
pBuf
);

61 
MT_AµU£rCmd
(
byã
 *
pD©a
);

64 #i‡
deföed
 (
MT_APP_FUNC
)

74 
uöt8
 
	$MT_AµComm™dPro˚ssög
(
uöt8
 *
pBuf
)

76 
uöt8
 
°©us
 = 
MT_RPC_SUCCESS
;

78 
pBuf
[
MT_RPC_POS_CMD1
])

80 
MT_APP_MSG
:

81 
	`MT_AµMsg
(
pBuf
);

84 
MT_APP_USER_TEST
:

85 
	`MT_AµU£rCmd
(
pBuf
);

89 
°©us
 = 
MT_RPC_ERR_COMMAND_ID
;

93  
°©us
;

94 
	}
}

105 
	$MT_AµMsg
(
uöt8
 *
pBuf
)

107 
uöt8
 
ªtVÆue
 = 
ZFaûuª
;

108 
uöt8
 
ídpoöt
;

109 
ídPoötDesc_t
 *
ïDesc
;

110 
mtSysAµMsg_t
 *
msg
;

111 
uöt8
 
cmdId
, 
d©aLí
;

114 
d©aLí
 = 
pBuf
[
MT_RPC_POS_LEN
];

115 
cmdId
 = 
pBuf
[
MT_RPC_POS_CMD1
];

116 
pBuf
 +
MT_RPC_FRAME_HDR_SZ
;

119 
ídpoöt
 = *
pBuf
++;

120 
d©aLí
--;

123 
ïDesc
 = 
	`afFödEndPoötDesc
–
ídpoöt
 );

125 i‡(
ïDesc
)

128 
msg
 = (
mtSysAµMsg_t
 *)
	`oßl_msg_Æloˇã
((mtSysAµMsg_tË+ (
d©aLí
));

129 i‡–
msg
 )

132 
msg
->
hdr
.
evít
 = 
MT_SYS_APP_MSG
;

133 
msg
->
ídpoöt
 =Éndpoint;

134 
msg
->
≠pD©aLí
 = 
d©aLí
;

135 
msg
->
≠pD©a
 = (
uöt8
*)(msg+1);

136 
	`oßl_mem˝y
–
msg
->
≠pD©a
, 
pBuf
, 
d©aLí
);

137 
	`oßl_msg_£nd
–*(
ïDesc
->
èsk_id
), (
uöt8
 *)
msg
 );

140 
ªtVÆue
 = 
ZSuc˚ss
;

145 
	`MT_BuûdAndSídZToﬁRe•⁄£
(((
uöt8
)
MT_RPC_CMD_SRSP
 | (uöt8)
MT_RPC_SYS_APP
), 
cmdId
, 1, &
ªtVÆue
);

146 
	}
}

157 
	$MT_AµU£rCmd
(
uöt8
 *
pBuf
)

160 
uöt8
 
ªtVÆue
, 
cmdId
;

162 #i‡
	`deföed
 (
APP_TGEN
Ë|| deföed (
NWK_TEST
Ë|| deföed (
APP_TP
Ë|| deföed (
APP_TP2
Ë|| deföed (
OSAL_TOTAL_MEM
Ë|| deföed (
APP_DEBUG
)

163 
uöt16
 
≠p_cmd
;

164 
byã
 
§cEp
;

165 
uöt16
 
∑øm1
;

166 
uöt16
 
∑øm2
;

170 
cmdId
 = 
pBuf
[
MT_RPC_POS_CMD1
];

171 
pBuf
 +
MT_RPC_FRAME_HDR_SZ
;

173 
ªtVÆue
 = 
INVALID_TASK
;

175 #i‡
	`deföed
 (
APP_TGEN
Ë|| deföed (
NWK_TEST
Ë|| deföed (
APP_TP
Ë|| deföed (
APP_TP2
Ë|| deföed (
OSAL_TOTAL_MEM
Ë|| deföed (
APP_DEBUG
)

177 
§cEp
 = *
pBuf
++;

179 
≠p_cmd
 = 
	`BUILD_UINT16
–
pBuf
[0] ,ÖBuf[1] );

180 
pBuf
 =ÖBu‡+ –
uöt16
 );

182 
∑øm1
 = 
	`BUILD_UINT16
–
pBuf
[0] ,ÖBuf[1] );

183 
pBuf
 =ÖBu‡+ –
uöt16
 );

185 
∑øm2
 = 
	`BUILD_UINT16
–
pBuf
[0] ,ÖBuf[1] );

187  
≠p_cmd
 )

190 #i‡
	`deföed
 (
APP_TGEN
)

191 
TGEN_START
:

192 
	`TøfficGíAµ_SídCmdMSG
–
∑øm1
, 
∑øm2
, 
TRAFFICGENAPP_CMD_START
 );

193 
ªtVÆue
 = 
ZSUCCESS
;

196 
TGEN_STOP
:

197 
	`TøfficGíAµ_SídCmdMSG
–
∑øm1
, 
∑øm2
, 
TRAFFICGENAPP_CMD_STOP
 );

198 
ªtVÆue
 = 
ZSUCCESS
;

201 
TGEN_COUNT
:

202 
ªtVÆue
 = 
	`TøfficGíAµ_Cou¡Pkt
–
∑øm1
, 
∑øm2
 );

207 #i‡
	`deföed
 (
NWK_TEST
)

208 
HW_TEST
:

209 
	`HwAµ_Sèπ
–
	`HI_UINT16
(
∑øm1
), 
	`LO_UINT16
’¨am1), HI_UINT16(
∑øm2
),

210 1000, 
	`LO_UINT16
(
∑øm2
), 3, 0 );

213 
HW_DISPLAY_RESULT
:

214 
	`HwAµ_Te°Info
();

217 
HW_SEND_STATUS
:

218 
	`HwAµ_SídSèts
();

222 #i‡
	`deföed
–
APP_TP
 ) || deföed ( 
APP_TP2
 )

223 #i‡
	`deföed
–
APP_TP
 )

224 
TP_SEND_NODATA
:

225 
ªtVÆue
 = 
	`Te°ProfûeAµ_SídNoD©a
–
§cEp
, (
byã
)
∑øm1
 );

229 
TP_SEND_BUFFERTEST
:

230 
ªtVÆue
 = 
	`Te°ProfûeAµ_SídBuf„rReq
–
§cEp
, (
byã
)
∑øm1
 );

233 #i‡
	`deföed
–
APP_TP
 )

234 
TP_SEND_UINT8
:

235 
ªtVÆue
 = 
	`Te°ProfûeAµ_SídUöt8
–
§cEp
, (
byã
)
∑øm1
 );

238 
TP_SEND_INT8
:

239 
ªtVÆue
 = 
	`Te°ProfûeAµ_SídI¡8
–
§cEp
, (
byã
)
∑øm1
 );

242 
TP_SEND_UINT16
:

243 
ªtVÆue
 = 
	`Te°ProfûeAµ_SídUöt16
–
§cEp
, (
byã
)
∑øm1
 );

246 
TP_SEND_INT16
:

247 
ªtVÆue
 = 
	`Te°ProfûeAµ_SídI¡16
–
§cEp
, (
byã
)
∑øm1
 );

250 
TP_SEND_SEMIPREC
:

251 
ªtVÆue
 = 
	`Te°ProfûeAµ_SídSemiPªc
–
§cEp
, (
byã
)
∑øm1
 );

254 
TP_SEND_FREEFORM
:

255 
ªtVÆue
 = 
	`Te°ProfûeAµ_SídFªeF‹mReq
–
§cEp
, (
byã
)
∑øm1
 );

259 
TP_SEND_FREEFORM
:

260 
ªtVÆue
 = 
	`Te°ProfûeAµ_SídFªeF‹mReq
(
§cEp
, (
byã
)
∑øm1
, (byã)
∑øm2
);

264 #i‡
	`deföed
–
APP_TP
 )

265 
TP_SEND_ABS_TIME
:

266 
ªtVÆue
 = 
	`Te°ProfûeAµ_SídAbsTime
–
§cEp
, (
byã
)
∑øm1
 );

269 
TP_SEND_REL_TIME
:

270 
ªtVÆue
 = 
	`Te°ProfûeAµ_SídRñ©iveTime
–
§cEp
, (
byã
)
∑øm1
 );

273 
TP_SEND_CHAR_STRING
:

274 
ªtVÆue
 = 
	`Te°ProfûeAµ_SídCh¨Såög
–
§cEp
, (
byã
)
∑øm1
 );

277 
TP_SEND_OCTET_STRING
:

278 
ªtVÆue
 = 
	`Te°ProfûeAµ_SídO˘ëSåög
–
§cEp
, (
byã
)
∑øm1
 );

282 
TP_SET_DSTADDRESS
:

283 
ªtVÆue
 = 
	`Te°ProfûeAµ_SëDe°Addªss
(
	`HI_UINT16
(
∑øm1
), 
	`LO_UINT16
’¨am1), 
∑øm2
);

286 #i‡
	`deföed
–
APP_TP2
 )

287 
TP_SEND_BUFFER_GROUP
:

288 
ªtVÆue
 = 
	`Te°ProfûeAµ_SídBuf„rGroup
–
§cEp
, (
byã
)
∑øm1
 );

292 
TP_SEND_BUFFER
:

293 
ªtVÆue
 = 
	`Te°ProfûeAµ_SídBuf„r
–
§cEp
, (
byã
)
∑øm1
 );

296 #i‡
	`deföed
–
APP_TP
 )

297 
TP_SEND_MULT_KVP_8BIT
:

298 
	`Te°ProfûeAµ_SídMu…iKVP_8bô
–
§cEp
, (
byã
)
∑øm1
 );

299 
ªtVÆue
 = 
ZSuc˚ss
;

302 
TP_SEND_MULT_KVP_16BIT
:

303 
	`Te°ProfûeAµ_SídMu…iKVP_16bô
–
§cEp
, (
byã
)
∑øm1
 );

304 
ªtVÆue
 = 
ZSuc˚ss
;

307 
TP_SEND_MULT_KVP_TIME
:

308 
	`Te°ProfûeAµ_SídMu…iKVP_Time
–
§cEp
, (
byã
)
∑øm1
 );

309 
ªtVÆue
 = 
ZSuc˚ss
;

312 
TP_SEND_MULT_KVP_STRING
:

313 
	`Te°ProfûeAµ_SídMu…iKVP_Såög
–
§cEp
, (
byã
)
∑øm1
 );

314 
ªtVÆue
 = 
ZSuc˚ss
;

317 
TP_SEND_MULTI_KVP_STR_TIME
:

318 
ªtVÆue
 = 
ZSuc˚ss
;

319 
	`Te°ProfûeAµ_SídMu…iKVP_Såög_Time
–
§cEp
, (
byã
)
∑øm1
 );

323 
TP_SEND_COUNTED_PKTS
:

324 
	`Te°ProfûeAµ_SídCou¡edPktsReq
(
	`HI_UINT16
(
∑øm1
), 
	`LO_UINT16
’¨am1), 
∑øm2
);

325 
ªtVÆue
 = 
ZSuc˚ss
;

328 
TP_SEND_RESET_COUNTER
:

329 
	`Te°ProfûeAµ_Cou¡edPakts_Re£tCou¡îReq
–(
byã
)
∑øm1
 );

330 
ªtVÆue
 = 
ZSuc˚ss
;

333 
TP_SEND_GET_COUNTER
:

334 
	`Te°ProfûeAµ_Cou¡edPakts_GëCou¡îReq
–
§cEp
, (
byã
)
∑øm1
 );

335 
ªtVÆue
 = 
ZSuc˚ss
;

338 
TP_SET_PERMIT_JOIN
:

339 i‡–
ZG_BUILD_RTR_TYPE
 && 
ZG_DEVICE_RTR_TYPE
 )

341 
	`NLME_PîmôJoöögReque°
–(
byã
)
∑øm1
 );

342 
ªtVÆue
 = 
ZSuc˚ss
;

346 
ªtVÆue
 = 
ZFaûuª
;

350 #i‡
	`deföed
 ( 
APP_TP2
 )

351 
TP_ADD_GROUP
:

352 
ªtVÆue
 = 
	`Te°ProfûeAµ_SëGroup
–
§cEp
, 
∑øm1
 );

355 
TP_REMOVE_GROUP
:

356 
ªtVÆue
 = 
	`Te°ProfûeAµ_RemoveGroup
–
§cEp
, 
∑øm1
 );

359 
TP_SEND_UPDATE_KEY
:

360 
ªtVÆue
 = 
	`Te°ProfûeAµ_Upd©eKey
–
§cEp
, (
uöt8
)
∑øm1
, 
∑øm2
 );

363 
TP_SEND_SWITCH_KEY
:

364 
ªtVÆue
 = 
	`Te°ProfûeAµ_SwôchKey
–
§cEp
, (
uöt8
)
∑øm1
, 
∑øm2
 );

367 
TP_SEND_BUFFERTEST_GROUP
:

368 
ªtVÆue
 = 
	`Te°ProfûeAµ_SídBuf„rGroupReq
–
§cEp
, (
byã
)
∑øm1
, (byã)
∑øm2
 );

371 
TP_SEND_ROUTE_DISC_REQ
:

372 
ªtVÆue
 = 
	`Te°ProfûeAµ_SídRouãDiscReq
–
§cEp
, 
∑øm1
,

373 
	`HI_UINT16
–
∑øm2
 ), 
	`LO_UINT16
(Öaram2 ) );

376 
TP_SEND_ROUTE_DISCOVERY
:

377 i‡–
ZG_BUILD_RTR_TYPE
 && 
ZG_DEVICE_RTR_TYPE
 )

379 
ªtVÆue
 = 
	`Te°ProfûeAµ_SídRouãDiscovîy
–
∑øm1
,

380 
	`HI_UINT16
–
∑øm2
 ), 
	`LO_UINT16
(Öaram2 ) );

384 
TP_SEND_NEW_ADDR
:

385 
ªtVÆue
 = 
	`Te°ProfûeAµ_Ch™geSh‹tAddr
–
∑øm1
, 
	`LO_UINT16
(
∑øm2
) );

388 
TP_SEND_NWK_UPDATE
:

390 
ªtVÆue
 = 
	`NLME_SídNëw‹kUpd©e
–
NWK_BROADCAST_SHORTADDR
, 
NWKUPDATE_PANID_UPDATE
,

391 
_NIB
.
exãndedPANID
, _NIB.
nwkUpd©eId
+1, 
∑øm1
 );

394 #i‡(
ZG_BUILD_JOINING_TYPE
)

395 
TP_AK_SETUP_PARTNER
:

396 
ªtVÆue
 = 
	`Te°ProfûeAµ_AµKeySëupP¨äî
–
§cEp
, 
∑øm1
, 
∑øm2
 );

399 
TP_AK_REQ_KEY
:

400 
ªtVÆue
 = 
	`Te°ProfûeAµ_AµKeyReque°
–
§cEp
, 
∑øm1
, 
∑øm2
 );

403 
TP_AK_PARTNER_NWKADDR
:

404 
ªtVÆue
 = 
	`Te°ProfûeAµ_SëP¨äîNwkAddr
–
§cEp
, 
∑øm1
, 
∑øm2
 );

407 
TP_AK_PARTNER_EXTADDR7654
:

408 
ªtVÆue
 = 
	`Te°ProfûeAµ_SëP¨äîExtAddr7654
–
§cEp
, 
∑øm1
, 
∑øm2
 );

411 
TP_AK_PARTNER_EXTADDR3210
:

412 
ªtVÆue
 = 
	`Te°ProfûeAµ_SëP¨äîExtAddr3210
–
§cEp
, 
∑øm1
, 
∑øm2
 );

415 
TP_AK_PARTNER_SET
:

416 
ªtVÆue
 = 
	`Te°ProfûeAµ_SëP¨äî
–
§cEp
, 
∑øm1
, 
∑øm2
 );

420 #i‡(
ZG_BUILD_COORDINATOR_TYPE
)

421 
TP_AK_TYPE_SET
:

422 
ªtVÆue
 = 
	`Te°ProfûeAµ_AµKeyTy≥Së
–
§cEp
, 
∑øm1
, 
∑øm2
 );

426 #i‡
	`deföed
 ( 
ZIGBEE_FRAGMENTATION
 )

427 
TP_FRAG_SKIP_BLOCK
:

428 
ªtVÆue
 = 
	`Te°ProfûeAµ_FøgSkùBlock
–(
uöt8
)
∑øm1
 );

432 
TP_APS_REMOVE
:

433 
ªtVÆue
 = 
	`Te°ProfûeAµ_APSRemove
–
∑øm1
, 
∑øm2
 );

439 #i‡
	`deföed
 ( 
OSAL_TOTAL_MEM
 )

440 
OSAL_MEM_STACK_HIGH_WATER
:

441 
OSAL_MEM_HEAP_HIGH_WATER
:

442 i‡–
≠p_cmd
 =
OSAL_MEM_STACK_HIGH_WATER
)

444 
∑øm1
 = 
	`oßl_°ack_u£d
();

448 
∑øm1
 = 
	`oßl_hóp_high_w©î
();

451 
pD©a
[0] = 
	`LO_UINT16
–
∑øm1
 );

452 
pD©a
[1] = 
	`HI_UINT16
–
∑øm1
 );

454 
	`MT_BuûdAndSídZToﬁRe•⁄£
((
MT_RPC_CMD_SRSP
 | 
MT_RPC_SYS_APP
), 
cmdId
, 2, 
pD©a
);

458 #i‡
	`deföed
 ( 
APP_DEBUG
 )

459 
DEBUG_GET
:

460 
	`DebugAµ_SídQuîy
–
∑øm1
 );

461 
ªtVÆue
 = 
ZSUCCESS
;

465 #i‡
	`deföed
 ( 
APP_TP2
 )

466 
TP_SEND_BCAST_RSP
:

467 
ªtVÆue
 = 
	`Te°ProfûeAµ_SídBˇ°R•
–
§cEp
, (
byã
)
∑øm1
 );

477 
	`MT_BuûdAndSídZToﬁRe•⁄£
(((
uöt8
)
MT_RPC_CMD_SRSP
 | (uöt8)
MT_RPC_SYS_APP
), 
cmdId
, 1, &
ªtVÆue
);

478 
	}
}

	@Components/mt/MT_APP.h

39 #i‚de‡
MT_APP_H


40 
	#MT_APP_H


	)

42 #ifde‡
__˝lu•lus


50 
	~"OSAL.h
"

58 
oßl_evít_hdr_t
 
hdr
;

59 
uöt8
 
ídpoöt
;

60 
uöt8
 
≠pD©aLí
;

61 
uöt8
 *
≠pD©a
;

62 } 
	tmtSysAµMsg_t
;

67 #i‡
deföed
 (
MT_APP_FUNC
)

71 
uöt8
 
MT_AµComm™dPro˚ssög
(uöt8 *
pBuf
);

74 #ifde‡
__˝lu•lus


	@Components/mt/MT_DEBUG.c

43 
	~"ZComDef.h
"

44 
	~"MT.h
"

45 
	~"MT_DEBUG.h
"

46 
	~"MT_UART.h
"

51 #i‡
deföed
 (
MT_DEBUG_FUNC
)

52 
MT_DebugSëThªshﬁd
(
uöt8
 *
pBuf
);

55 #i‡
deföed
 (
MT_DEBUG_FUNC
)

65 
uöt8
 
	$MT_DebugComm™dPro˚ssög
(
uöt8
 *
pBuf
)

67 
uöt8
 
°©us
 = 
MT_RPC_SUCCESS
;

69 
pBuf
[
MT_RPC_POS_CMD1
])

71 
MT_DEBUG_SET_THRESHOLD
:

72 
	`MT_DebugSëThªshﬁd
(
pBuf
);

76 
°©us
 = 
MT_RPC_ERR_COMMAND_ID
;

80  
°©us
;

81 
	}
}

92 
	$MT_DebugSëThªshﬁd
(
uöt8
 *
pBuf
)

94 
uöt8
 
ªtVÆue
 = 
ZSuc˚ss
;

95 
uöt8
 
cmdId
;

98 
cmdId
 = 
pBuf
[
MT_RPC_POS_CMD1
];

99 
pBuf
 +
MT_RPC_FRAME_HDR_SZ
;

102 
debugCompId
 = *
pBuf
++;

103 
debugThªshﬁd
 = *
pBuf
++;

106 
	`MT_BuûdAndSídZToﬁRe•⁄£
(((
uöt8
)
MT_RPC_CMD_SRSP
 | (uöt8)
MT_RPC_SYS_DBG
), 
cmdId
, 1, &
ªtVÆue
);

107 
	}
}

119 
	$MT_Pro˚ssDebugMsg
–
mtDebugMsg_t
 *
msg
 )

121 
byã
 *
msg_±r
;

122 
byã
 
d©aLí
;

123 
uöt8
 
buf
[11];

124 
uöt8
 *
pBuf
;

127 
d©aLí
 = 5 + (
msg
->
numP¨ams
 *  ( 
uöt16
 ));

130 
msg_±r
 = 
	`oßl_msg_Æloˇã
–(
byã
)(
SPI_0DATA_MSG_LEN
 + 
d©aLí
 + 1) );

131 i‡–
msg_±r
 )

134 
pBuf
 = 
buf
;

135 *
pBuf
++ = 
msg
->
compID
;

136 *
pBuf
++ = 
msg
->
£vîôy
;

137 *
pBuf
++ = 
msg
->
numP¨ams
;

139 i‡–
msg
->
numP¨ams
 >= 1 )

141 *
pBuf
++ = 
	`LO_UINT16
–
msg
->
∑øm1
 );

142 *
pBuf
++ = 
	`HI_UINT16
–
msg
->
∑øm1
 );

145 i‡–
msg
->
numP¨ams
 >= 2 )

147 *
pBuf
++ = 
	`LO_UINT16
–
msg
->
∑øm2
 );

148 *
pBuf
++ = 
	`HI_UINT16
–
msg
->
∑øm2
 );

151 i‡–
msg
->
numP¨ams
 == 3 )

153 *
pBuf
++ = 
	`LO_UINT16
–
msg
->
∑øm3
 );

154 *
pBuf
++ = 
	`HI_UINT16
–
msg
->
∑øm3
 );

157 *
pBuf
++ = 
	`LO_UINT16
–
msg
->
time°amp
 );

158 *
pBuf
++ = 
	`HI_UINT16
–
msg
->
time°amp
 );

160 #ifde‡
MT_UART_DEFAULT_PORT


163 
	`MT_BuûdAndSídZToﬁRe•⁄£
(((
uöt8
)
MT_RPC_CMD_AREQ
 | (uöt8)
MT_RPC_SYS_DBG
), 0x80, 
d©aLí
, 
buf
);

165 
	`oßl_msg_dóŒoˇã
–
msg_±r
 );

167 
	}
}

178 
	$MT_Pro˚ssDebugSå
(
mtDebugSå_t
 *
d°r
)

180 
byã
 *
msg_±r
;

183 
msg_±r
 = 
	`oßl_mem_Æloc
–(
byã
)(
SPI_0DATA_MSG_LEN
 + 
d°r
->
°rLí
) );

184 i‡–
msg_±r
 )

186 #ifde‡
MT_UART_DEFAULT_PORT


189 
	`MT_BuûdAndSídZToﬁRe•⁄£
(((
uöt8
)
MT_RPC_CMD_AREQ
 | (uöt8)
MT_RPC_SYS_DBG
), 
MT_DEBUG_MSG
, 
d°r
->
°rLí
, d°r->
pSåög
);

191 
	`oßl_mem_‰ì
–
msg_±r
 );

193 
	}
}

	@Components/mt/MT_DEBUG.h

39 #i‚de‡
MT_DEBUG_H


40 
	#MT_DEBUG_H


	)

42 #ifde‡
__˝lu•lus


50 
	~"OSAL.h
"

57 
oßl_evít_hdr_t
 
hdr
;

58 
uöt8
 
compID
;

59 
uöt8
 
£vîôy
;

60 
uöt8
 
numP¨ams
;

61 
uöt16
 
∑øm1
;

62 
uöt16
 
∑øm2
;

63 
uöt16
 
∑øm3
;

64 
uöt16
 
time°amp
;

65 } 
	tmtDebugMsg_t
;

69 
oßl_evít_hdr_t
 
hdr
;

70 
uöt8
 
°rLí
;

71 
uöt8
 *
pSåög
;

72 } 
	tmtDebugSå_t
;

78 #i‡
deföed
 (
MT_DEBUG_FUNC
)

82 
uöt8
 
MT_DebugComm™dPro˚ssög
(uöt8 *
pBuf
);

88 
MT_Pro˚ssDebugMsg
(
mtDebugMsg_t
 *
pD©a
);

93 
MT_Pro˚ssDebugSå
(
mtDebugSå_t
 *
pD©a
);

97 #ifde‡
__˝lu•lus


	@Components/mt/MT_MAC.c

40 #i‡
deföed
 (
MT_MAC_FUNC
Ë|| deföed (
MT_MAC_CB_FUNC
)

44 
	~"ZComDef.h
"

45 
	~"OSAL.h
"

46 
	~"MT.h
"

47 
	~"MT_UART.h
"

48 
	~"ZMAC.h
"

49 
	~"MT_MAC.h
"

51 #i‡!
deföed
–
WIN32
 )

52 
	~"OnBﬂrd.h
"

56 
	~"mac_ødio_defs.h
"

59 
	~"hÆ_u¨t.h
"

66 
	#MT_MAC_PEND_LEN
(
≥ndAddrS≥c
Ë(((’ídAddrS≥cË& 0x07Ë* 2Ë+ \

	)

67 ((((
	g≥ndAddrS≥c
) & 0x70) >> 4) * 8))

70 
	#MT_MAC_ED_SCAN_MAXCHANNELS
 27

	)

73 
	#MT_MAC_PEND_LEN_MAX
 32

	)

76 
	#MT_MAC_SDU_LEN_MAX
 32

	)

79 
	#MT_MAC_SCAN_RESULT_LEN_MAX
 32

	)

82 
	#MT_MAC_BEACON_PAYLOAD_MAX
 16

	)

87 
	#DEFAULT_NSDU_HANDLE
 0x00

	)

89 
	#MT_MAC_LEN_ASSOCIATE_IND
 0x14

	)

90 
	#MT_MAC_LEN_ASSOCIATE_CNF
 0x0E

	)

91 
	#MT_MAC_LEN_DISASSOCIATE_IND
 0x14

	)

92 
	#MT_MAC_LEN_DISASSOCIATE_CNF
 0x0¯

	)

93 
	#MT_MAC_LEN_BEACON_NOTIFY_IND
 0x63

	)

94 
	#MT_MAC_LEN_ORPHAN_IND
 0x13

	)

95 
	#MT_MAC_LEN_SCAN_CNF
 0x09

	)

96 
	#MT_MAC_LEN_SYNC_LOSS_IND
 0x10

	)

97 
	#MT_MAC_LEN_COMM_STATUS_IND
 0x21

	)

98 
	#MT_MAC_LEN_DATA_CNF
 0x08

	)

99 
	#MT_MAC_LEN_DATA_IND
 0x2C

	)

100 
	#MT_MAC_LEN_PURGE_CNF
 0x02

	)

105 
uöt16
 
	g_macCÆlbackSub
;

108 
uöt8
 
	gmtMacBóc⁄Paylﬂd
[
MT_MAC_BEACON_PAYLOAD_MAX
];

113 
MT_MacSpi2Sec
–
ZMacSec_t
 *
pSec
, 
uöt8
 *
pSrc
 );

114 
MT_MacSpi2Addr
–
zAddrTy≥_t
 *
pD°
, 
uöt8
 *
pSrc
 );

115 
MT_MacAddr2Spi
–
uöt8
 *
pD°
, 
zAddrTy≥_t
 *
pSrc
 );

116 
MT_MacRevExtCpy
–
uöt8
 *
pD°
, uöt8 *
pSrc
 );

118 
MT_MacRe£tReq
(
uöt8
 *
pBuf
);

119 
MT_MacInô
(
uöt8
 *
pBuf
);

120 
MT_MacSèπReq
(
uöt8
 *
pBuf
);

121 
MT_MacSyncReq
(
uöt8
 *
pBuf
);

122 
MT_MacD©aReq
(
uöt8
 *
pBuf
);

123 
MT_MacAssocüãReq
(
uöt8
 *
pBuf
);

124 
MT_MacDißssocüãReq
(
uöt8
 *
pBuf
);

125 
MT_MacGëReq
(
uöt8
 *
pBuf
);

126 
MT_MacSëReq
(
uöt8
 *
pBuf
);

127 
MT_MacSˇnReq
(
uöt8
 * 
pBuf
);

128 
MT_MacPﬁlReq
(
uöt8
 *
pBuf
);

129 
MT_MacPurgeReq
(
uöt8
 *
pBuf
);

130 
MT_MacSëRxGaöReq
(
uöt8
 *
pBuf
);

131 
MT_MacAssocüãR•
(
uöt8
 *
pBuf
);

132 
MT_MacOΩh™R•
(
uöt8
 *
pBuf
);

133 
MT_MacSrcM©chE«bÀ
 (
uöt8
 *
pBuf
);

134 
MT_MacSrcM©chAddE¡ry
 (
uöt8
 *
pBuf
);

135 
MT_MacSrcM©chDñëeE¡ry
 (
uöt8
 *
pBuf
);

136 
MT_MacSrcM©chCheckSrcAddr
 (
uöt8
 *
pBuf
);

137 
MT_MacSrcM©chAckAŒPídög
 (
uöt8
 *
pBuf
);

138 
MT_MacSrcM©chCheckAŒPídög
 (
uöt8
 *
pBuf
);

152 
uöt8
 
	$MT_MacComm™dPro˚ssög
 (
uöt8
 *
pBuf
)

154 
uöt8
 
°©us
 = 
MT_RPC_SUCCESS
;

156 
pBuf
[
MT_RPC_POS_CMD1
])

158 
MT_MAC_RESET_REQ
:

159 
	`MT_MacRe£tReq
(
pBuf
);

162 
MT_MAC_INIT
:

163 
	`MT_MacInô
(
pBuf
);

166 
MT_MAC_START_REQ
:

167 
	`MT_MacSèπReq
(
pBuf
);

170 
MT_MAC_SYNC_REQ
:

171 
	`MT_MacSyncReq
(
pBuf
);

174 
MT_MAC_DATA_REQ
:

175 
	`MT_MacD©aReq
(
pBuf
);

178 
MT_MAC_ASSOCIATE_REQ
:

179 
	`MT_MacAssocüãReq
(
pBuf
);

182 
MT_MAC_DISASSOCIATE_REQ
:

183 
	`MT_MacDißssocüãReq
(
pBuf
);

186 
MT_MAC_GET_REQ
:

187 
	`MT_MacGëReq
(
pBuf
);

190 
MT_MAC_SET_REQ
:

191 
	`MT_MacSëReq
(
pBuf
);

194 
MT_MAC_GTS_REQ
:

198 
MT_MAC_SCAN_REQ
:

199 
	`MT_MacSˇnReq
(
pBuf
);

202 
MT_MAC_POLL_REQ
:

203 
	`MT_MacPﬁlReq
(
pBuf
);

206 
MT_MAC_PURGE_REQ
:

207 
	`MT_MacPurgeReq
(
pBuf
);

210 
MT_MAC_SET_RX_GAIN_REQ
:

211 
	`MT_MacSëRxGaöReq
(
pBuf
);

214 
MT_MAC_ASSOCIATE_RSP
:

215 
	`MT_MacAssocüãR•
(
pBuf
);

218 
MT_MAC_ORPHAN_RSP
:

219 
	`MT_MacOΩh™R•
(
pBuf
);

222 
MT_MAC_SRC_MATCH_ENABLE
:

223 
	`MT_MacSrcM©chE«bÀ
(
pBuf
);

226 
MT_MAC_SRC_MATCH_ADD_ENTRY
:

227 
	`MT_MacSrcM©chAddE¡ry
(
pBuf
);

230 
MT_MAC_SRC_MATCH_DEL_ENTRY
:

231 
	`MT_MacSrcM©chDñëeE¡ry
(
pBuf
);

234 
MT_MAC_SRC_MATCH_CHECK_SRC_ADDR
:

235 
	`MT_MacSrcM©chCheckSrcAddr
(
pBuf
);

238 
MT_MAC_SRC_MATCH_ACK_ALL_PENDING
:

239 
	`MT_MacSrcM©chAckAŒPídög
(
pBuf
);

242 
MT_MAC_SRC_MATCH_CHECK_ALL_PENDING
:

243 
	`MT_MacSrcM©chCheckAŒPídög
(
pBuf
);

248 
°©us
 = 
MT_RPC_ERR_COMMAND_ID
;

252  
°©us
;

253 
	}
}

264 
	$MT_MacRe£tReq
(
uöt8
 *
pBuf
)

266 
uöt8
 
ªtVÆue
, 
cmdId
;

269 
cmdId
 = 
pBuf
[
MT_RPC_POS_CMD1
];

270 
pBuf
 +
MT_RPC_FRAME_HDR_SZ
;

272 
ªtVÆue
 = 
	`ZMacRe£t
(*
pBuf
);

275 
	`MT_BuûdAndSídZToﬁRe•⁄£
(((
uöt8
)
MT_RPC_CMD_SRSP
 | (uöt8)
MT_RPC_SYS_MAC
), 
cmdId
, 1, &
ªtVÆue
 );

276 
	}
}

287 
	$MT_MacInô
(
uöt8
 *
pBuf
)

289 
uöt8
 
ªtVÆue
, 
cmdId
;

292 
cmdId
 = 
pBuf
[
MT_RPC_POS_CMD1
];

293 
pBuf
 +
MT_RPC_FRAME_HDR_SZ
;

295 
ªtVÆue
 = 
	`ZMacInô
();

298 
	`MT_BuûdAndSídZToﬁRe•⁄£
(((
uöt8
)
MT_RPC_CMD_SRSP
 | (uöt8)
MT_RPC_SYS_MAC
), 
cmdId
, 1, &
ªtVÆue
 );

299 
	}
}

310 
	$MT_MacSèπReq
(
uöt8
 *
pBuf
)

312 
uöt8
 
ªtVÆue
, 
cmdId
;

313 
ZMacSèπReq_t
 
°¨tReq
;

316 
cmdId
 = 
pBuf
[
MT_RPC_POS_CMD1
];

317 
pBuf
 +
MT_RPC_FRAME_HDR_SZ
;

319 #ifde‡
RTR_NWK


322 
°¨tReq
.
SèπTime
 = 
	`BUILD_UINT32
 (
pBuf
[0],ÖBuf[1],ÖBuf[2],ÖBuf[3]);

323 
pBuf
 += 4;

326 
°¨tReq
.
PANID
 = 
	`BUILD_UINT16
–
pBuf
[0] ,ÖBuf[1] );

327 
pBuf
 += 2;

331 
°¨tReq
.
LogiˇlCh™√l
 = *
pBuf
++;

332 
°¨tReq
.
Ch™√lPage
 = *
pBuf
++;

333 
°¨tReq
.
Bóc⁄Ordî
 = *
pBuf
++;

334 
°¨tReq
.
Su≥r‰ameOrdî
 = *
pBuf
++;

335 
°¨tReq
.
PANCo‹dö©‹
 = *
pBuf
++;

336 
°¨tReq
.
B©ãryLi„Ext
 = *
pBuf
++;

337 
°¨tReq
.
Co‹dRólignmít
 = *
pBuf
++;

340 
	`MT_MacSpi2Sec
–&
°¨tReq
.
RólignSec
, 
pBuf
 );

341 
pBuf
 +
ZTEST_DEFAULT_SEC_LEN
;

344 
	`MT_MacSpi2Sec
–&
°¨tReq
.
Bóc⁄Sec
, 
pBuf
 );

347 
ªtVÆue
 = 
	`ZMacSèπReq
–&
°¨tReq
 );

351 
ªtVÆue
 = 
ZMacDíõd
;

356 
	`MT_BuûdAndSídZToﬁRe•⁄£
(((
uöt8
)
MT_RPC_CMD_SRSP
 | (uöt8)
MT_RPC_SYS_MAC
), 
cmdId
, 1, &
ªtVÆue
 );

357 
	}
}

368 
	$MT_MacSyncReq
(
uöt8
 *
pBuf
)

370 
uöt8
 
ªtVÆue
, 
cmdId
;

371 
ZMacSyncReq_t
 
syncReq
;

374 
cmdId
 = 
pBuf
[
MT_RPC_POS_CMD1
];

375 
pBuf
 +
MT_RPC_FRAME_HDR_SZ
;

378 
syncReq
.
LogiˇlCh™√l
 = *
pBuf
++;

381 
syncReq
.
Ch™√lPage
 = *
pBuf
++;

384 
syncReq
.
TøckBóc⁄
 = *
pBuf
;

387 
ªtVÆue
 = 
	`ZMacSyncReq
–&
syncReq
 );

390 
	`MT_BuûdAndSídZToﬁRe•⁄£
(((
uöt8
)
MT_RPC_CMD_SRSP
 | (uöt8)
MT_RPC_SYS_MAC
), 
cmdId
, 1, &
ªtVÆue
 );

391 
	}
}

402 
	$MT_MacD©aReq
(
uöt8
 *
pBuf
)

404 
uöt8
 
ªtVÆue
, 
cmdId
;

405 
ZMacD©aReq_t
 
d©aReq
;

408 
cmdId
 = 
pBuf
[
MT_RPC_POS_CMD1
];

409 
pBuf
 +
MT_RPC_FRAME_HDR_SZ
;

412 
d©aReq
.
D°Addr
.
addrMode
 = *
pBuf
++;

415 
	`MT_MacSpi2Addr
–&
d©aReq
.
D°Addr
, 
pBuf
);

416 
pBuf
 +
Z_EXTADDR_LEN
;

419 
d©aReq
.
D°PANId
 = 
	`BUILD_UINT16
–
pBuf
[0] ,ÖBuf[1] );

420 
pBuf
 += 2;

423 
d©aReq
.
SrcAddrMode
 = *
pBuf
++;

426 
d©aReq
.
H™dÀ
 = *
pBuf
++;

429 
d©aReq
.
TxO±i⁄s
 = *
pBuf
++;

432 
d©aReq
.
Ch™√l
 = *
pBuf
++;

435 
d©aReq
.
Powî
 = *
pBuf
++;

438 
	`MT_MacSpi2Sec
–&
d©aReq
.
Sec
, 
pBuf
 );

439 
pBuf
 +
ZTEST_DEFAULT_SEC_LEN
;

442 
d©aReq
.
msduLígth
 = *
pBuf
++;

445 
d©aReq
.
msdu
 = 
pBuf
;

448 
ªtVÆue
 = 
	`ZMacD©aReq
–&
d©aReq
 );

451 
	`MT_BuûdAndSídZToﬁRe•⁄£
(((
uöt8
)
MT_RPC_CMD_SRSP
 | (uöt8)
MT_RPC_SYS_MAC
), 
cmdId
, 1, &
ªtVÆue
 );

452 
	}
}

463 
	$MT_MacAssocüãReq
(
uöt8
 *
pBuf
)

465 
uöt8
 
ªtVÆue
, 
cmdId
;

466 
ZMacAssocüãReq_t
 
assocReq
;

469 
cmdId
 = 
pBuf
[
MT_RPC_POS_CMD1
];

470 
pBuf
 +
MT_RPC_FRAME_HDR_SZ
;

473 
assocReq
.
LogiˇlCh™√l
 = *
pBuf
++;

476 
assocReq
.
Ch™√lPage
 = *
pBuf
++;

479 
assocReq
.
Co‹dAddªss
.
addrMode
 = *
pBuf
++;

482 
	`MT_MacSpi2Addr
–&
assocReq
.
Co‹dAddªss
, 
pBuf
 );

483 
pBuf
 +
Z_EXTADDR_LEN
;

486 
assocReq
.
Co‹dPANId
 = 
	`BUILD_UINT16
–
pBuf
[0] ,ÖBuf[1] );

487 
pBuf
 += 2;

490 
assocReq
.
C≠abûôyInf‹m©i⁄
 = *
pBuf
++;

493 
	`MT_MacSpi2Sec
–&
assocReq
.
Sec
, 
pBuf
 );

496 
ªtVÆue
 = 
	`ZMacAssocüãReq
–&
assocReq
 );

499 
	`MT_BuûdAndSídZToﬁRe•⁄£
(((
uöt8
)
MT_RPC_CMD_SRSP
 | (uöt8)
MT_RPC_SYS_MAC
), 
cmdId
, 1, &
ªtVÆue
 );

500 
	}
}

511 
	$MT_MacDißssocüãReq
(
uöt8
 *
pBuf
)

513 
uöt8
 
ªtVÆue
, 
cmdId
;

514 
ZMacDißssocüãReq_t
 
dißssocReq
;

517 
cmdId
 = 
pBuf
[
MT_RPC_POS_CMD1
];

518 
pBuf
 +
MT_RPC_FRAME_HDR_SZ
;

521 
dißssocReq
.
Devi˚Addªss
.
addrMode
 = *
pBuf
++;

524 
	`MT_MacSpi2Addr
–&
dißssocReq
.
Devi˚Addªss
, 
pBuf
);

525 
pBuf
 +
Z_EXTADDR_LEN
;

528 
dißssocReq
.
Devi˚P™Id
 = 
	`BUILD_UINT16
–
pBuf
[0] ,ÖBuf[1] );

529 
pBuf
 += 2;

532 
dißssocReq
.
DißssocüãRós⁄
 = *
pBuf
++;

535 
dißssocReq
.
TxIndúe˘
 = *
pBuf
++;

538 
	`MT_MacSpi2Sec
–&
dißssocReq
.
Sec
, 
pBuf
 );

541 
ªtVÆue
 = 
	`ZMacDißssocüãReq
–&
dißssocReq
 );

544 
	`MT_BuûdAndSídZToﬁRe•⁄£
(((
uöt8
)
MT_RPC_CMD_SRSP
 | (uöt8)
MT_RPC_SYS_MAC
), 
cmdId
, 1, &
ªtVÆue
 );

545 
	}
}

556 
	$MT_MacGëReq
(
uöt8
 *
pBuf
)

558 
uöt8
 
ª•Lí
, 
cmdId
, 
©å
;

559 
uöt8
 *
pRëBuf
;

562 
cmdId
 = 
pBuf
[
MT_RPC_POS_CMD1
];

563 
pBuf
 +
MT_RPC_FRAME_HDR_SZ
;

566 
ª•Lí
 = 
ZTEST_DEFAULT_PARAM_LEN
;

569 
pRëBuf
 = 
	`oßl_mem_Æloc
(
ª•Lí
);

572 
©å
 = *
pBuf
;

574 i‡(
pRëBuf
)

577 
	`oßl_mem£t
(
pRëBuf
, 0, 
ª•Lí
);

579 
pRëBuf
[0] = 
ZFaûuª
;

581 
pRëBuf
[0] = 
	`ZMacGëReq
(
©å
, &pRetBuf[1]);

584 
	`MT_BuûdAndSídZToﬁRe•⁄£
(((
uöt8
)
MT_RPC_CMD_SRSP
 | (uöt8)
MT_RPC_SYS_MAC
), 
cmdId
, 
ª•Lí
, 
pRëBuf
 );

587 
	`oßl_mem_‰ì
(
pRëBuf
);

589 
	}
}

600 
	$MT_MacSëReq
(
uöt8
 *
pBuf
)

602 
uöt8
 
ªtVÆue
, 
cmdId
, 
©å
;

605 
cmdId
 = 
pBuf
[
MT_RPC_POS_CMD1
];

606 
pBuf
 +
MT_RPC_FRAME_HDR_SZ
;

613 
©å
 = *
pBuf
;

616 i‡–
©å
 =
ZMacBóc⁄MSDU
 )

618 
	`oßl_mem˝y
–
mtMacBóc⁄Paylﬂd
, 
pBuf
 + 1, 
MT_MAC_BEACON_PAYLOAD_MAX
 );

619 
ªtVÆue
 = 
	`ZMacSëReq
–(
ZMacAâribuãs_t
)
©å
 , (
byã
 *Ë&
mtMacBóc⁄Paylﬂd
 );

623 
ªtVÆue
 = 
	`ZMacSëReq
–(
ZMacAâribuãs_t
)
©å
 , 
pBuf
 + 1 );

627 
	`MT_BuûdAndSídZToﬁRe•⁄£
(((
uöt8
)
MT_RPC_CMD_SRSP
 | (uöt8)
MT_RPC_SYS_MAC
), 
cmdId
, 1, &
ªtVÆue
 );

628 
	}
}

639 
	$MT_MacSˇnReq
(
uöt8
 * 
pBuf
)

641 
uöt8
 
ªtVÆue
, 
cmdId
;

642 
ZMacSˇnReq_t
 
sˇnReq
;

645 
cmdId
 = 
pBuf
[
MT_RPC_POS_CMD1
];

646 
pBuf
 +
MT_RPC_FRAME_HDR_SZ
;

649 
sˇnReq
.
SˇnCh™√ls
 = 
	`BUILD_UINT32
 (
pBuf
[0],ÖBuf[1],ÖBuf[2],ÖBuf[3]);

650 
pBuf
 += 4;

653 
sˇnReq
.
SˇnTy≥
 = *
pBuf
++;

656 
sˇnReq
.
SˇnDuøti⁄
 = *
pBuf
++;

659 
sˇnReq
.
Ch™√lPage
 = *
pBuf
++;

662 
sˇnReq
.
MaxResu…s
 = *
pBuf
++;

665 
	`MT_MacSpi2Sec
–&
sˇnReq
.
Sec
, 
pBuf
 );

668 
ªtVÆue
 = 
	`ZMacSˇnReq
–&
sˇnReq
 );

671 
	`MT_BuûdAndSídZToﬁRe•⁄£
(((
uöt8
)
MT_RPC_CMD_SRSP
 | (uöt8)
MT_RPC_SYS_MAC
), 
cmdId
, 1, &
ªtVÆue
 );

672 
	}
}

683 
	$MT_MacPﬁlReq
(
uöt8
 *
pBuf
)

685 
uöt8
 
ªtVÆue
, 
cmdId
;

686 
ZMacPﬁlReq_t
 
pﬁlReq
;

689 
cmdId
 = 
pBuf
[
MT_RPC_POS_CMD1
];

690 
pBuf
 +
MT_RPC_FRAME_HDR_SZ
;

693 
pﬁlReq
.
Co‹dAddªss
.
addrMode
 = *
pBuf
++;

696 
	`MT_MacSpi2Addr
–&
pﬁlReq
.
Co‹dAddªss
, 
pBuf
);

697 
pBuf
 +
Z_EXTADDR_LEN
;

700 
pﬁlReq
.
Co‹dP™Id
 = 
	`BUILD_UINT16
(
pBuf
[0] ,ÖBuf[1]);

701 
pBuf
 += 2;

704 
	`MT_MacSpi2Sec
(&
pﬁlReq
.
Sec
, 
pBuf
);

707 
ªtVÆue
 = 
	`ZMacPﬁlReq
–&
pﬁlReq
 );

710 
	`MT_BuûdAndSídZToﬁRe•⁄£
(((
uöt8
)
MT_RPC_CMD_SRSP
 | (uöt8)
MT_RPC_SYS_MAC
), 
cmdId
, 1, &
ªtVÆue
 );

711 
	}
}

722 
	$MT_MacPurgeReq
(
uöt8
 *
pBuf
)

724 
uöt8
 
ªtVÆue
, 
cmdId
;

727 
cmdId
 = 
pBuf
[
MT_RPC_POS_CMD1
];

728 
pBuf
 +
MT_RPC_FRAME_HDR_SZ
;

731 
ªtVÆue
 = 
	`ZMacPurgeReq
 (*
pBuf
);

734 
	`MT_BuûdAndSídZToﬁRe•⁄£
(((
uöt8
)
MT_RPC_CMD_SRSP
 | (uöt8)
MT_RPC_SYS_MAC
), 
cmdId
, 1, &
ªtVÆue
 );

735 
	}
}

746 
	$MT_MacSëRxGaöReq
(
uöt8
 *
pBuf
)

748 
uöt8
 
ªtVÆue
, 
cmdId
;

751 
cmdId
 = 
pBuf
[
MT_RPC_POS_CMD1
];

752 
pBuf
 +
MT_RPC_FRAME_HDR_SZ
;

754 #ifde‡
HAL_PA_LNA


756 i‡(*
pBuf
)

758 
	`HAL_PA_LNA_RX_HGM
();

762 
	`HAL_PA_LNA_RX_LGM
();

764 
ªtVÆue
 = 
ZSuc˚ss
;

766 
ªtVÆue
 = 
ZFaûuª
;

771 
	`MT_BuûdAndSídZToﬁRe•⁄£
(((
uöt8
)
MT_RPC_CMD_SRSP
 | (uöt8)
MT_RPC_SYS_MAC
), 
cmdId
, 1, &
ªtVÆue
 );

772 
	}
}

783 
	$MT_MacAssocüãR•
(
uöt8
 *
pBuf
)

785 
uöt8
 
ªtVÆue
, 
cmdId
;

786 
ZMacAssocüãR•_t
 
assocR•
;

789 
cmdId
 = 
pBuf
[
MT_RPC_POS_CMD1
];

790 
pBuf
 +
MT_RPC_FRAME_HDR_SZ
;

792 #ifde‡
RTR_NWK


795 
	`MT_MacRevExtCpy
(
assocR•
.
Devi˚Addªss
, 
pBuf
);

796 
pBuf
 +
Z_EXTADDR_LEN
;

799 
assocR•
.
AssocSh‹tAddªss
 = 
	`BUILD_UINT16
(
pBuf
[0],pBuf[1]);

800 
pBuf
 += 2;

803 
assocR•
.
Sètus
 = *
pBuf
++;

806 
	`MT_MacSpi2Sec
–&
assocR•
.
Sec
, 
pBuf
 );

809 
ªtVÆue
 = 
	`ZMacAssocüãR•
–&
assocR•
 );

813 
ªtVÆue
 = 
ZMacDíõd
;

818 
	`MT_BuûdAndSídZToﬁRe•⁄£
(((
uöt8
)
MT_RPC_CMD_SRSP
 | (uöt8)
MT_RPC_SYS_MAC
), 
cmdId
, 1, &
ªtVÆue
);

819 
	}
}

830 
	$MT_MacOΩh™R•
(
uöt8
 *
pBuf
)

832 
uöt8
 
ªtVÆue
, 
cmdId
;

833 
ZMacOΩh™R•_t
 
‹ph™R•
;

836 
cmdId
 = 
pBuf
[
MT_RPC_POS_CMD1
];

837 
pBuf
 +
MT_RPC_FRAME_HDR_SZ
;

840 
	`MT_MacRevExtCpy
–
‹ph™R•
.
OΩh™Addªss
, 
pBuf
 );

841 
pBuf
 +
Z_EXTADDR_LEN
;

844 
‹ph™R•
.
Sh‹tAddªss
 = 
	`BUILD_UINT16
–
pBuf
[0] ,ÖBuf[1] );

845 
pBuf
 += 2;

848 
‹ph™R•
.
AssocüãdMembî
 = *
pBuf
++;

851 
	`MT_MacSpi2Sec
–&
‹ph™R•
.
Sec
, 
pBuf
 );

854 
ªtVÆue
 = 
	`ZMacOΩh™R•
–&
‹ph™R•
 );

857 
	`MT_BuûdAndSídZToﬁRe•⁄£
(((
uöt8
)
MT_RPC_CMD_SRSP
 | (uöt8)
MT_RPC_SYS_MAC
), 
cmdId
, 1, &
ªtVÆue
);

858 
	}
}

869 
	$MT_MacSrcM©chE«bÀ
 (
uöt8
 *
pBuf
)

871 
uöt8
 
ªtVÆue
, 
cmdId
;

874 
cmdId
 = 
pBuf
[
MT_RPC_POS_CMD1
];

875 
pBuf
 +
MT_RPC_FRAME_HDR_SZ
;

877 #ifde‡
AUTO_PEND


879 
ªtVÆue
 = 
	`ZMacSrcM©chE«bÀ
 (
pBuf
[0],ÖBuf[1]);

881 
ªtVÆue
 = 
ZMacUnsuµ‹ãd
;

885 
	`MT_BuûdAndSídZToﬁRe•⁄£
(((
uöt8
)
MT_RPC_CMD_SRSP
 | (uöt8)
MT_RPC_SYS_MAC
), 
cmdId
, 1, &
ªtVÆue
 );

887 
	}
}

898 
	$MT_MacSrcM©chAddE¡ry
 (
uöt8
 *
pBuf
)

900 
uöt8
 
ªtVÆue
, 
cmdId
;

903 
cmdId
 = 
pBuf
[
MT_RPC_POS_CMD1
];

904 
pBuf
 +
MT_RPC_FRAME_HDR_SZ
;

906 #ifde‡
AUTO_PEND


907 
uöt16
 
∑nID
;

908 
zAddrTy≥_t
 
devAddr
;

911 
devAddr
.
addrMode
 = *
pBuf
++;

914 
	`MT_MacSpi2Addr
–&
devAddr
, 
pBuf
);

915 
pBuf
 +
Z_EXTADDR_LEN
;

918 
∑nID
 = 
	`BUILD_UINT16
–
pBuf
[0] ,ÖBuf[1] );

922 
ªtVÆue
 = 
	`ZMacSrcM©chAddE¡ry
 (&
devAddr
, 
∑nID
);

924 
ªtVÆue
 = 
ZMacUnsuµ‹ãd
;

928 
	`MT_BuûdAndSídZToﬁRe•⁄£
(((
uöt8
)
MT_RPC_CMD_SRSP
 | (uöt8)
MT_RPC_SYS_MAC
), 
cmdId
, 1, &
ªtVÆue
 );

929 
	}
}

941 
	$MT_MacSrcM©chDñëeE¡ry
 (
uöt8
 *
pBuf
)

943 
uöt8
 
ªtVÆue
, 
cmdId
;

946 
cmdId
 = 
pBuf
[
MT_RPC_POS_CMD1
];

947 
pBuf
 +
MT_RPC_FRAME_HDR_SZ
;

949 #ifde‡
AUTO_PEND


950 
uöt16
 
∑nID
;

951 
zAddrTy≥_t
 
devAddr
;

954 
devAddr
.
addrMode
 = *
pBuf
++;

957 
	`MT_MacSpi2Addr
–&
devAddr
, 
pBuf
);

958 
pBuf
 +
Z_EXTADDR_LEN
;

961 
∑nID
 = 
	`BUILD_UINT16
–
pBuf
[0] ,ÖBuf[1] );

965 
ªtVÆue
 = 
	`ZMacSrcM©chDñëeE¡ry
 (&
devAddr
, 
∑nID
);

967 
ªtVÆue
 = 
ZMacUnsuµ‹ãd
;

971 
	`MT_BuûdAndSídZToﬁRe•⁄£
(((
uöt8
)
MT_RPC_CMD_SRSP
 | (uöt8)
MT_RPC_SYS_MAC
), 
cmdId
, 1, &
ªtVÆue
 );

972 
	}
}

984 
	$MT_MacSrcM©chCheckSrcAddr
 (
uöt8
 *
pBuf
)

986 
uöt8
 
cmdId
;

987 
uöt8
 
ªtAºay
[2];

990 
cmdId
 = 
pBuf
[
MT_RPC_POS_CMD1
];

991 
pBuf
 +
MT_RPC_FRAME_HDR_SZ
;

994 
uöt16
 
∑nID
;

995 
zAddrTy≥_t
 
devAddr
;

998 
devAddr
.
addrMode
 = *
pBuf
++;

1001 
	`MT_MacSpi2Addr
–&
devAddr
, 
pBuf
);

1002 
pBuf
 +
Z_EXTADDR_LEN
;

1005 
∑nID
 = 
	`BUILD_UINT16
–
pBuf
[0] ,ÖBuf[1] );

1008 
ªtAºay
[1] = 
	`ZMacSrcM©chCheckSrcAddr
 (&
devAddr
, 
∑nID
);

1011 i‡(
ªtAºay
[1] =
ZMacSrcM©chInvÆidIndex
 )

1013 
ªtAºay
[0] = 
ZFaûuª
;

1017 
ªtAºay
[0] = 
ZSuc˚ss
;

1020 
ªtAºay
[0] = 
ZMacUnsuµ‹ãd
;

1021 
ªtAºay
[1] = 
ZMacSrcM©chInvÆidIndex
;

1025 
	`MT_BuûdAndSídZToﬁRe•⁄£
(((
uöt8
)
MT_RPC_CMD_SRSP
 | (uöt8)
MT_RPC_SYS_MAC
), 
cmdId
, 2, 
ªtAºay
 );

1026 
	}
}

1042 
	$MT_MacSrcM©chAckAŒPídög
 (
uöt8
 *
pBuf
)

1044 
uöt8
 
ªtVÆue
, 
cmdId
;

1047 
cmdId
 = 
pBuf
[
MT_RPC_POS_CMD1
];

1048 
pBuf
 +
MT_RPC_FRAME_HDR_SZ
;

1050 #ifde‡
AUTO_PEND


1052 
ªtVÆue
 = 
	`ZMacSrcM©chAckAŒPídög
(*
pBuf
);

1054 
ªtVÆue
 = 
ZMacUnsuµ‹ãd
;

1058 
	`MT_BuûdAndSídZToﬁRe•⁄£
(((
uöt8
)
MT_RPC_CMD_SRSP
 | (uöt8)
MT_RPC_SYS_MAC
), 
cmdId
, 1, &
ªtVÆue
 );

1059 
	}
}

1072 
	$MT_MacSrcM©chCheckAŒPídög
 (
uöt8
 *
pBuf
)

1074 
uöt8
 
ªtAºay
[2], 
cmdId
;

1077 
cmdId
 = 
pBuf
[
MT_RPC_POS_CMD1
];

1078 
pBuf
 +
MT_RPC_FRAME_HDR_SZ
;

1080 #ifde‡
AUTO_PEND


1082 
ªtAºay
[0] = 
ZMacSuc˚ss
;

1083 
ªtAºay
[1] = 
	`ZMacSrcM©chCheckAŒPídög
();

1085 
ªtAºay
[0] = 
ZMacUnsuµ‹ãd
;

1086 
ªtAºay
[1] = 
FALSE
;

1090 
	`MT_BuûdAndSídZToﬁRe•⁄£
(((
uöt8
)
MT_RPC_CMD_SRSP
 | (uöt8)
MT_RPC_SYS_MAC
), 
cmdId
, 2, 
ªtAºay
 );

1091 
	}
}

1093 #i‡
deföed
 ( 
MT_MAC_CB_FUNC
 )

1104 
	$nwk_MTCÆlbackSubNwkSyncLossInd
–
ZMacSyncLossInd_t
 *
∑øm
 )

1106 
uöt8
 
ª•Lí
;

1107 
uöt8
 *
pRëBuf
, *
ç
;

1109 
ª•Lí
 = 
MT_MAC_LEN_SYNC_LOSS_IND
;

1111 
pRëBuf
 = 
	`oßl_mem_Æloc
 (
ª•Lí
);

1113 i‡–
pRëBuf
 )

1115 
ç
 = 
pRëBuf
;

1118 *
ç
++ = 
∑øm
->
hdr
.
Sètus
;

1121 *
ç
++ = 
	`LO_UINT16
–
∑øm
->
PANId
 );

1122 *
ç
++ = 
	`HI_UINT16
–
∑øm
->
PANId
 );

1125 *
ç
++ = 
∑øm
->
LogiˇlCh™√l
;

1128 *
ç
++ = 
∑øm
->
Ch™√lPage
;

1131 
	`MT_MacSpi2Sec
 ((
ZMacSec_t
 *)
ç
, (
uöt8
 *)&
∑øm
->
Sec
);

1134 
	`MT_BuûdAndSídZToﬁRe•⁄£
(((
uöt8
)
MT_RPC_CMD_AREQ
 | (uöt8)
MT_RPC_SYS_MAC
), 
MT_MAC_SYNC_LOSS_IND
, 
ª•Lí
, 
pRëBuf
);

1137 
	`oßl_mem_‰ì
(
pRëBuf
);

1139 
	}
}

1150 
	$nwk_MTCÆlbackSubNwkAssocüãInd
–
ZMacAssocüãInd_t
 *
∑øm
 )

1152 
uöt8
 
ª•Lí
;

1153 
uöt8
 *
pRëBuf
, *
ç
;

1155 
ª•Lí
 = 
MT_MAC_LEN_ASSOCIATE_IND
;

1157 
pRëBuf
 = 
	`oßl_mem_Æloc
 (
ª•Lí
);

1159 i‡–
pRëBuf
 )

1161 
ç
 = 
pRëBuf
;

1164 
	`MT_MacAddr2Spi
(
pRëBuf
, (
zAddrTy≥_t
*)
∑øm
->
Devi˚Addªss
);

1165 
ç
 +
Z_EXTADDR_LEN
;

1168 *
ç
++ = 
∑øm
->
C≠abûôyInf‹m©i⁄
;

1171 
	`MT_MacSpi2Sec
 ((
ZMacSec_t
 *)
ç
, (
uöt8
 *)&
∑øm
->
Sec
);

1174 
	`MT_BuûdAndSídZToﬁRe•⁄£
(((
uöt8
)
MT_RPC_CMD_AREQ
 | (uöt8)
MT_RPC_SYS_MAC
), 
MT_MAC_ASSOCIATE_IND
, 
ª•Lí
, 
pRëBuf
);

1177 
	`oßl_mem_‰ì
(
pRëBuf
);

1179 
	}
}

1190 
	$nwk_MTCÆlbackSubNwkAssocüãCnf
–
ZMacAssocüãCnf_t
 *
∑øm
 )

1192 
uöt8
 
ª•Lí
;

1193 
uöt8
 *
pRëBuf
, *
ç
;

1195 
ª•Lí
 = 
MT_MAC_LEN_ASSOCIATE_CNF
;

1197 
pRëBuf
 = 
	`oßl_mem_Æloc
 (
ª•Lí
);

1199 i‡–
pRëBuf
 )

1201 
ç
 = 
pRëBuf
;

1204 *
ç
++ = 
∑øm
->
hdr
.
Sètus
;

1207 *
ç
++ = 
	`LO_UINT16
–
∑øm
->
AssocSh‹tAddªss
 );

1208 *
ç
++ = 
	`HI_UINT16
–
∑øm
->
AssocSh‹tAddªss
 );

1211 
	`MT_MacSpi2Sec
 ((
ZMacSec_t
 *)
ç
, (
uöt8
 *)&
∑øm
->
Sec
);

1214 
	`MT_BuûdAndSídZToﬁRe•⁄£
(((
uöt8
)
MT_RPC_CMD_AREQ
 | (uöt8)
MT_RPC_SYS_MAC
), 
MT_MAC_ASSOCIATE_CNF
, 
ª•Lí
, 
pRëBuf
);

1217 
	`oßl_mem_‰ì
(
pRëBuf
);

1219 
	}
}

1231 
	$nwk_MTCÆlbackSubNwkBóc⁄NŸifyInd
 ( 
ZMacBóc⁄NŸifyInd_t
 *
∑øm
 )

1233 
uöt8
 
ª•Lí
;

1234 
uöt8
 *
pRëBuf
, *
ç
;

1236 
ª•Lí
 = 
MT_MAC_LEN_BEACON_NOTIFY_IND
;

1238 
pRëBuf
 = 
	`oßl_mem_Æloc
 (
ª•Lí
);

1240 i‡–
pRëBuf
 )

1242 
ç
 = 
pRëBuf
;

1245 *
ç
++ = 
∑øm
->
BSN
;

1248 *
ç
++ = 
	`BREAK_UINT32
–
∑øm
->
pP™Desc
->
TimeSèmp
, 0 );

1249 *
ç
++ = 
	`BREAK_UINT32
–
∑øm
->
pP™Desc
->
TimeSèmp
, 1 );

1250 *
ç
++ = 
	`BREAK_UINT32
–
∑øm
->
pP™Desc
->
TimeSèmp
, 2 );

1251 *
ç
++ = 
	`BREAK_UINT32
–
∑øm
->
pP™Desc
->
TimeSèmp
, 3 );

1254 *
ç
++ = 
∑øm
->
pP™Desc
->
Co‹dAddªss
.
addrMode
;

1257 
	`MT_MacAddr2Spi
–
ç
, &
∑øm
->
pP™Desc
->
Co‹dAddªss
 );

1258 
ç
 +
Z_EXTADDR_LEN
;

1261 *
ç
++ = 
	`LO_UINT16
–
∑øm
->
pP™Desc
->
Co‹dPANId
 );

1262 *
ç
++ = 
	`HI_UINT16
–
∑øm
->
pP™Desc
->
Co‹dPANId
 );

1265 *
ç
++ = 
	`LO_UINT16
–
∑øm
->
pP™Desc
->
Su≥r‰ameS≥c
 );

1266 *
ç
++ = 
	`HI_UINT16
–
∑øm
->
pP™Desc
->
Su≥r‰ameS≥c
 );

1269 *
ç
++ = 
∑øm
->
pP™Desc
->
LogiˇlCh™√l
;

1272 *
ç
++ = 
∑øm
->
pP™Desc
->
GTSPîmô
;

1275 *
ç
++ = 
∑øm
->
pP™Desc
->
LökQuÆôy
;

1278 *
ç
++ = 
∑øm
->
pP™Desc
->
SecurôyFaûuª
;

1281 
	`MT_MacSpi2Sec
 ((
ZMacSec_t
 *)
ç
, (
uöt8
 *)&
∑øm
->
pP™Desc
->
Sec
);

1282 
ç
 +
ZTEST_DEFAULT_SEC_LEN
;

1285 *
ç
++ = 
∑øm
->
PídAddrS≥c
;

1288 
	`oßl_mem£t
–
ç
, 0, 
MT_MAC_PEND_LEN_MAX
 );

1289 
	`oßl_mem˝y
–
ç
, 
∑øm
->
AddrLi°
, 
	`MIN
(
MT_MAC_PEND_LEN_MAX
, 
	`MT_MAC_PEND_LEN
’¨am->
PídAddrS≥c
)) );

1290 
ç
 +
MT_MAC_PEND_LEN_MAX
;

1293 *
ç
++ = 
∑øm
->
sduLígth
;

1296 
	`oßl_mem£t
–
ç
, 0, 
MT_MAC_SDU_LEN_MAX
 );

1297 
	`oßl_mem˝y
–
ç
, 
∑øm
->
sdu
, 
	`MIN
(
MT_MAC_SDU_LEN_MAX
,Ö¨am->
sduLígth
) );

1300 
	`MT_BuûdAndSídZToﬁRe•⁄£
(((
uöt8
)
MT_RPC_CMD_AREQ
 | (uöt8)
MT_RPC_SYS_MAC
), 
MT_MAC_BEACON_NOTIFY_IND
, 
ª•Lí
, 
pRëBuf
);

1303 
	`oßl_mem_‰ì
(
pRëBuf
);

1306 
	}
}

1317 
	$nwk_MTCÆlbackSubNwkD©aCnf
–
ZMacD©aCnf_t
 *
∑øm
 )

1319 
uöt8
 *
pRëBuf
, *
ç
;

1322 
pRëBuf
 = 
	`oßl_mem_Æloc
(
MT_MAC_LEN_DATA_CNF
);

1324 i‡(
pRëBuf
)

1326 
ç
 = 
pRëBuf
;

1329 *
ç
++ = 
∑øm
->
hdr
.
Sètus
;

1332 *
ç
++ = 
∑øm
->
msduH™dÀ
;

1335 *
ç
++ = 
	`BREAK_UINT32
–
∑øm
->
Time°amp
, 0 );

1336 *
ç
++ = 
	`BREAK_UINT32
–
∑øm
->
Time°amp
, 1 );

1337 *
ç
++ = 
	`BREAK_UINT32
–
∑øm
->
Time°amp
, 2 );

1338 *
ç
++ = 
	`BREAK_UINT32
–
∑øm
->
Time°amp
, 3 );

1341 *
ç
++ = 
	`LO_UINT16
–
∑øm
->
Time°amp2
);

1342 *
ç
 = 
	`HI_UINT16
–
∑øm
->
Time°amp2
);

1345 
	`MT_BuûdAndSídZToﬁRe•⁄£
(((
uöt8
)
MT_RPC_CMD_AREQ
 | (uöt8)
MT_RPC_SYS_MAC
), 
MT_MAC_DATA_CNF
, 
MT_MAC_LEN_DATA_CNF
, 
pRëBuf
);

1348 
	`oßl_mem_‰ì
(
pRëBuf
);

1350 
	}
}

1361 
	$nwk_MTCÆlbackSubNwkD©aInd
–
ZMacD©aInd_t
 *
∑øm
 )

1363 
uöt8
 
ª•Lí
, 
ãmpLí
;

1364 
uöt8
 *
pRëBuf
, *
ç
;

1367 
ª•Lí
 = 
MT_MAC_LEN_DATA_IND
 + 
ZTEST_DEFAULT_DATA_LEN
;

1369 
pRëBuf
 = 
	`oßl_mem_Æloc
 (
ª•Lí
);

1371 i‡–
pRëBuf
 )

1373 
ç
 = 
pRëBuf
;

1376 *
ç
++ = 
∑øm
->
SrcAddr
.
addrMode
;

1378 i‡(
∑øm
->
SrcAddr
.
addrMode
 !
SADDR_MODE_NONE
)

1381 
	`MT_MacAddr2Spi
–
ç
, &
∑øm
->
SrcAddr
 );

1386  
uöt8
 
i
 = 0; i< 
Z_EXTADDR_LEN
; i++ )

1388 
ç
[
i
] = 0x00;

1391 
ç
 +
Z_EXTADDR_LEN
;

1394 *
ç
++ = 
∑øm
->
D°Addr
.
addrMode
;

1397 
	`MT_MacAddr2Spi
–
ç
, &
∑øm
->
D°Addr
 );

1398 
ç
 +
Z_EXTADDR_LEN
;

1401 *
ç
++ = 
	`BREAK_UINT32
–
∑øm
->
Time°amp
, 0 );

1402 *
ç
++ = 
	`BREAK_UINT32
–
∑øm
->
Time°amp
, 1 );

1403 *
ç
++ = 
	`BREAK_UINT32
–
∑øm
->
Time°amp
, 2 );

1404 *
ç
++ = 
	`BREAK_UINT32
–
∑øm
->
Time°amp
, 3 );

1407 *
ç
++ = 
	`LO_UINT16
–
∑øm
->
Time°amp2
);

1408 *
ç
++ = 
	`HI_UINT16
–
∑øm
->
Time°amp2
);

1411 *
ç
++ = 
	`LO_UINT16
–
∑øm
->
SrcPANId
 );

1412 *
ç
++ = 
	`HI_UINT16
–
∑øm
->
SrcPANId
 );

1415 *
ç
++ = 
	`LO_UINT16
–
∑øm
->
D°PANId
 );

1416 *
ç
++ = 
	`HI_UINT16
–
∑øm
->
D°PANId
 );

1419 *
ç
++ = 
∑øm
->
mpduLökQuÆôy
;

1422 *
ç
++ = 
∑øm
->
C‹ªœti⁄
;

1425 *
ç
++ = 
∑øm
->
Rssi
;

1428 *
ç
++ = 
∑øm
->
D¢
;

1431 
	`MT_MacSpi2Sec
 ((
ZMacSec_t
 *)
ç
, (
uöt8
 *)&
∑øm
->
Sec
);

1432 
ç
 +
ZTEST_DEFAULT_SEC_LEN
;

1435 i‡–
∑øm
->
msduLígth
 < 
ZTEST_DEFAULT_DATA_LEN
 )

1436 
ãmpLí
 = 
∑øm
->
msduLígth
;

1438 
ãmpLí
 = 
ZTEST_DEFAULT_DATA_LEN
;

1441 *
ç
++ = 
ãmpLí
;

1444 
	`oßl_mem£t
–
ç
, 0, 
ZTEST_DEFAULT_DATA_LEN
 );

1445 
	`oßl_mem˝y
–
ç
, 
∑øm
->
msdu
, 
ãmpLí
 );

1448 
	`MT_BuûdAndSídZToﬁRe•⁄£
(((
uöt8
)
MT_RPC_CMD_AREQ
 | (uöt8)
MT_RPC_SYS_MAC
), 
MT_MAC_DATA_IND
, 
ª•Lí
, 
pRëBuf
);

1451 
	`oßl_mem_‰ì
(
pRëBuf
);

1453 
	}
}

1464 
	$nwk_MTCÆlbackSubNwkDißssocüãInd
–
ZMacDißssocüãInd_t
 *
∑øm
 )

1466 
uöt8
 
ª•Lí
;

1467 
uöt8
 *
pRëBuf
, *
ç
;

1469 
ª•Lí
 = 
MT_MAC_LEN_DISASSOCIATE_IND
;

1471 
pRëBuf
 = 
	`oßl_mem_Æloc
 (
ª•Lí
);

1473 i‡–
pRëBuf
 )

1475 
ç
 = 
pRëBuf
;

1478 
	`MT_MacRevExtCpy
–
pRëBuf
, 
∑øm
->
Devi˚Addªss
 );

1479 
ç
 +
Z_EXTADDR_LEN
;

1482 *
ç
++ = 
∑øm
->
DißssocüãRós⁄
;

1485 
	`MT_MacSpi2Sec
 ((
ZMacSec_t
 *)
ç
, (
uöt8
 *)&
∑øm
->
Sec
);

1488 
	`MT_BuûdAndSídZToﬁRe•⁄£
(((
uöt8
)
MT_RPC_CMD_AREQ
 | (uöt8)
MT_RPC_SYS_MAC
), 
MT_MAC_DISASSOCIATE_IND
, 
ª•Lí
, 
pRëBuf
);

1491 
	`oßl_mem_‰ì
(
pRëBuf
);

1493 
	}
}

1504 
	$nwk_MTCÆlbackSubNwkDißssocüãCnf
–
ZMacDißssocüãCnf_t
 *
∑øm
 )

1506 
uöt8
 
ª•Lí
;

1507 
uöt8
 *
pRëBuf
, *
ç
;

1509 
ª•Lí
 = 
MT_MAC_LEN_DISASSOCIATE_CNF
;

1511 
pRëBuf
 = 
	`oßl_mem_Æloc
 (
ª•Lí
);

1513 i‡–
pRëBuf
 )

1515 
ç
 = 
pRëBuf
;

1518 *
ç
++ = 
∑øm
->
hdr
.
Sètus
;

1521 *
ç
++ = 
∑øm
->
Devi˚Addªss
.
addrMode
;

1524 
	`MT_MacAddr2Spi
–
ç
, &
∑øm
->
Devi˚Addªss
 );

1525 
ç
 +
Z_EXTADDR_LEN
;

1528 *
ç
++ = 
	`LO_UINT16
–
∑øm
->
∑nID
 );

1529 *
ç
 = 
	`HI_UINT16
–
∑øm
->
∑nID
 );

1532 
	`MT_BuûdAndSídZToﬁRe•⁄£
(((
uöt8
)
MT_RPC_CMD_AREQ
 | (uöt8)
MT_RPC_SYS_MAC
), 
MT_MAC_DISASSOCIATE_CNF
, 
ª•Lí
, 
pRëBuf
);

1535 
	`oßl_mem_‰ì
(
pRëBuf
);

1537 
	}
}

1548 
	$nwk_MTCÆlbackSubNwkOΩh™Ind
–
ZMacOΩh™Ind_t
 *
∑øm
 )

1550 
uöt8
 
ª•Lí
;

1551 
uöt8
 *
pRëBuf
, *
ç
;

1553 
ª•Lí
 = 
MT_MAC_LEN_ORPHAN_IND
;

1555 
pRëBuf
 = 
	`oßl_mem_Æloc
 (
ª•Lí
);

1557 i‡–
pRëBuf
 )

1559 
ç
 = 
pRëBuf
;

1562 
	`MT_MacRevExtCpy
–
ç
, 
∑øm
->
OΩh™Addªss
 );

1563 
ç
 +
Z_EXTADDR_LEN
;

1566 
	`MT_MacSpi2Sec
 ((
ZMacSec_t
 *)
ç
, (
uöt8
 *)&
∑øm
->
Sec
);

1569 
	`MT_BuûdAndSídZToﬁRe•⁄£
(((
uöt8
)
MT_RPC_CMD_AREQ
 | (uöt8)
MT_RPC_SYS_MAC
), 
MT_MAC_ORPHAN_IND
, 
ª•Lí
, 
pRëBuf
);

1572 
	`oßl_mem_‰ì
(
pRëBuf
);

1574 
	}
}

1585 
	$nwk_MTCÆlbackSubNwkPﬁlCnf
–
byã
 
Sètus
 )

1587 
uöt8
 
ªtVÆue
;

1590 
ªtVÆue
 = 
Sètus
;

1593 
	`MT_BuûdAndSídZToﬁRe•⁄£
(((
uöt8
)
MT_RPC_CMD_AREQ
 | (uöt8)
MT_RPC_SYS_MAC
), 
MT_MAC_POLL_CNF
, 1, &
ªtVÆue
);

1594 
	}
}

1605 
	$nwk_MTCÆlbackSubNwkSˇnCnf
–
ZMacSˇnCnf_t
 *
∑øm
 )

1607 
uöt8
 
ª•Lí
, 
ªsu…Lí
;

1608 
uöt8
 *
pRëBuf
, *
ç
;

1611 i‡–
∑øm
->
SˇnTy≥
 =
ZMAC_ED_SCAN
 )

1612 
ªsu…Lí
 = 
MT_MAC_ED_SCAN_MAXCHANNELS
;

1613 i‡–
∑øm
->
SˇnTy≥
 =
ZMAC_ACTIVE_SCAN
 )

1614 
ªsu…Lí
 = (
∑øm
->
Resu…Li°Size
 * –
ZMacP™Desc_t
 ));

1615 i‡–
∑øm
->
SˇnTy≥
 =
ZMAC_PASSIVE_SCAN
 )

1616 
ªsu…Lí
 = (
∑øm
->
Resu…Li°Size
 * –
ZMacP™Desc_t
 ));

1617 i‡–
∑øm
->
SˇnTy≥
 =
ZMAC_ORPHAN_SCAN
 )

1618 
ªsu…Lí
 = 0;

1623 
ªsu…Lí
 = 
	`MIN
‘esu…Lí, 
MT_MAC_SCAN_RESULT_LEN_MAX
);

1625 
ª•Lí
 = 
MT_MAC_LEN_SCAN_CNF
 + 
MT_MAC_SCAN_RESULT_LEN_MAX
 + 1;

1628 
pRëBuf
 = 
	`oßl_mem_Æloc
 (
ª•Lí
);

1630 i‡–
pRëBuf
 )

1632 
ç
 = 
pRëBuf
;

1635 *
ç
++ = 
∑øm
->
hdr
.
Sètus
;

1638 *
ç
++ = 0;

1641 *
ç
++ = 
∑øm
->
SˇnTy≥
;

1644 *
ç
++ = 
∑øm
->
Ch™√lPage
;

1647 *
ç
++ = 
	`BREAK_UINT32
–
∑øm
->
Unsˇ¬edCh™√ls
, 0 );

1648 *
ç
++ = 
	`BREAK_UINT32
–
∑øm
->
Unsˇ¬edCh™√ls
, 1 );

1649 *
ç
++ = 
	`BREAK_UINT32
–
∑øm
->
Unsˇ¬edCh™√ls
, 2 );

1650 *
ç
++ = 
	`BREAK_UINT32
–
∑øm
->
Unsˇ¬edCh™√ls
, 3 );

1653 *
ç
++ = 
∑øm
->
Resu…Li°Size
;

1656 *
ç
++ = 
MT_MAC_SCAN_RESULT_LEN_MAX
;

1659 
	`oßl_mem˝y
–
ç
, 
∑øm
->
Resu…
.
pP™Des¸ùt‹
, 
ªsu…Lí
 );

1662 
	`oßl_mem£t
–
ç
, 0, (
MT_MAC_SCAN_RESULT_LEN_MAX
 - 
ªsu…Lí
));

1665 
	`MT_BuûdAndSídZToﬁRe•⁄£
(((
uöt8
)
MT_RPC_CMD_AREQ
 | (uöt8)
MT_RPC_SYS_MAC
), 
MT_MAC_SCAN_CNF
, 
ª•Lí
, 
pRëBuf
);

1668 
	`oßl_mem_‰ì
(
pRëBuf
);

1670 
	}
}

1681 
	$nwk_MTCÆlbackSubCommSètusInd
 ( 
ZMacCommSètusInd_t
 *
∑øm
 )

1683 
uöt8
 
ª•Lí
;

1684 
uöt8
 *
pRëBuf
, *
ç
;

1686 
ª•Lí
 = 
MT_MAC_LEN_COMM_STATUS_IND
;

1688 
pRëBuf
 = 
	`oßl_mem_Æloc
 (
ª•Lí
);

1690 i‡–
pRëBuf
 )

1692 
ç
 = 
pRëBuf
;

1695 *
ç
++ = 
∑øm
->
hdr
.
Sètus
;

1698 *
ç
++ = 
∑øm
->
SrcAddªss
.
addrMode
;

1699 
	`MT_MacAddr2Spi
–
ç
, &
∑øm
->
SrcAddªss
 );

1700 
ç
 +
Z_EXTADDR_LEN
;

1703 *
ç
++ = 
∑øm
->
D°Addªss
.
addrMode
;

1704 
	`MT_MacAddr2Spi
–
ç
, &
∑øm
->
D°Addªss
 );

1705 
ç
 +
Z_EXTADDR_LEN
;

1708 *
ç
++ = 
	`LO_UINT16
–
∑øm
->
PANId
 );

1709 *
ç
++ = 
	`HI_UINT16
–
∑øm
->
PANId
 );

1712 *
ç
++ = 
∑øm
->
Rós⁄
;

1715 
	`MT_MacSpi2Sec
 ((
ZMacSec_t
 *)
ç
, (
uöt8
 *)&
∑øm
->
Sec
);

1718 
	`MT_BuûdAndSídZToﬁRe•⁄£
(((
uöt8
)
MT_RPC_CMD_AREQ
 | (uöt8)
MT_RPC_SYS_MAC
), 
MT_MAC_COMM_STATUS_IND
, 
ª•Lí
, 
pRëBuf
);

1721 
	`oßl_mem_‰ì
(
pRëBuf
);

1723 
	}
}

1734 
	$nwk_MTCÆlbackSubNwkSèπCnf
–
uöt8
 
Sètus
 )

1736 
uöt8
 
ªtVÆue
;

1738 
ªtVÆue
 = 
Sètus
;

1741 
	`MT_BuûdAndSídZToﬁRe•⁄£
(((
uöt8
)
MT_RPC_CMD_AREQ
 | (uöt8)
MT_RPC_SYS_MAC
), 
MT_MAC_START_CNF
, 1, &
ªtVÆue
);

1742 
	}
}

1753 
	$nwk_MTCÆlbackSubNwkRxE«bÀCnf
 ( 
byã
 
Sètus
 )

1755 
uöt8
 
ªtVÆue
;

1758 
ªtVÆue
 = 
Sètus
;

1761 
	`MT_BuûdAndSídZToﬁRe•⁄£
(((
uöt8
)
MT_RPC_CMD_AREQ
 | (uöt8)
MT_RPC_SYS_MAC
), 
MT_MAC_RX_ENABLE_CNF
, 1, &
ªtVÆue
);

1762 
	}
}

1773 
	$nwk_MTCÆlbackSubNwkPurgeCnf
–
ZMacPurgeCnf_t
 *
∑øm
 )

1775 
uöt8
 
ª•Lí
;

1776 
uöt8
 *
pRëBuf
, *
ç
;

1778 
ª•Lí
 = 
MT_MAC_LEN_PURGE_CNF
;

1780 
pRëBuf
 = 
	`oßl_mem_Æloc
 (
ª•Lí
);

1782 i‡–
pRëBuf
 )

1784 
ç
 = 
pRëBuf
;

1787 *
ç
++ = 
∑øm
->
hdr
.
Sètus
;

1790 *
ç
 = 
∑øm
->
msduH™dÀ
;

1793 
	`MT_BuûdAndSídZToﬁRe•⁄£
(((
uöt8
)
MT_RPC_CMD_AREQ
 | (uöt8)
MT_RPC_SYS_MAC
), 
MT_MAC_PURGE_CNF
, 
ª•Lí
, 
pRëBuf
);

1796 
	`oßl_mem_‰ì
(
pRëBuf
);

1798 
	}
}

1818 
	$MT_MacRevExtCpy
–
uöt8
 *
pD°
, uöt8 *
pSrc
 )

1820 
öt8
 
i
;

1822  
i
 = 
Z_EXTADDR_LEN
 - 1; i >= 0; i-- )

1824 *
pD°
++ = 
pSrc
[
i
];

1826 
	}
}

1839 
	$MT_MacSpi2Addr
–
zAddrTy≥_t
 *
pD°
, 
uöt8
 *
pSrc
 )

1841 i‡–
pD°
->
addrMode
 =
Addr16Bô
 )

1843 
pD°
->
addr
.
sh‹tAddr
 = 
	`BUILD_UINT16
–
pSrc
[0] ,ÖSrc[1] );

1845 i‡–
pD°
->
addrMode
 =
Addr64Bô
 )

1847 
	`MT_MacRevExtCpy
–
pD°
->
addr
.
extAddr
, 
pSrc
 );

1849 
	}
}

1861 
	$MT_MacSpi2Sec
–
ZMacSec_t
 *
pSec
, 
uöt8
 *
pSrc
 )

1864 
	`oßl_mem£t
 (
pSec
, 0,  (
ZMacSec_t
));

1865 
	}
}

1877 
	$MT_MacAddr2Spi
–
uöt8
 *
pD°
, 
zAddrTy≥_t
 *
pSrc
 )

1879 i‡–
pSrc
->
addrMode
 =
Addr16Bô
 )

1881 *
pD°
++ = 
	`LO_UINT16
–
pSrc
->
addr
.
sh‹tAddr
 );

1882 *
pD°
++ = 
	`HI_UINT16
–
pSrc
->
addr
.
sh‹tAddr
 );

1883 *
pD°
++ = 0; *pDst++ = 0; *pDst++ = 0;

1884 *
pD°
++ = 0; *pDst++ = 0; *pDst = 0;

1886 i‡–
pSrc
->
addrMode
 =
Addr64Bô
 )

1888  
uöt8
 
i
 = 0; i< 
Z_EXTADDR_LEN
; i++ )

1890 *
pD°
++ = 
pSrc
->
addr
.
extAddr
[
i
];

1895  
uöt8
 
i
 = 0; i< 
Z_EXTADDR_LEN
; i++ )

1897 *
pD°
++ = 
pSrc
->
addr
.
extAddr
[
i
];

1900 
	}
}

	@Components/mt/MT_MAC.h

40 #i‚de‡
MT_MAC_H


41 
	#MT_MAC_H


	)

43 #ifde‡
__˝lu•lus


51 
	~"ZComDef.h
"

52 
	~"ZMAC.h
"

62 #i‡
deföed
 (
MT_MAC_CB_FUNC
)

64 
	#CB_ID_NWK_SYNC_LOSS_IND
 0x0001

	)

65 
	#CB_ID_NWK_ASSOCIATE_IND
 0x0002

	)

66 
	#CB_ID_NWK_ASSOCIATE_CNF
 0x0004

	)

67 
	#CB_ID_NWK_BEACON_NOTIFY_IND
 0x0008

	)

68 
	#CB_ID_NWK_DATA_CNF
 0x0010

	)

69 
	#CB_ID_NWK_DATA_IND
 0x0020

	)

70 
	#CB_ID_NWK_DISASSOCIATE_IND
 0x0040

	)

71 
	#CB_ID_NWK_DISASSOCIATE_CNF
 0x0080

	)

72 
	#CB_ID_NWK_PURGE_CNF
 0x0100

	)

73 
	#CB_ID_NWK_ORPHAN_IND
 0x0400

	)

74 
	#CB_ID_NWK_POLL_CNF
 0x0800

	)

75 
	#CB_ID_NWK_SCAN_CNF
 0x1000

	)

76 
	#CB_ID_NWK_COMM_STATUS_IND
 0x2000

	)

77 
	#CB_ID_NWK_START_CNF
 0x4000

	)

78 
	#CB_ID_NWK_RX_ENABLE_CNF
 0x8000

	)

88 
uöt16
 
_macCÆlbackSub
;

105 #ifde‡
MT_MAC_FUNC


110 
uöt8
 
MT_MacComm™dPro˚ssög
–uöt8 *
pBuf
 );

115 #i‡
deföed
 ( 
MT_MAC_CB_FUNC
 )

120 
nwk_MTCÆlbackSubNwkAssocüãInd
–
ZMacAssocüãInd_t
 *
∑øm
 );

125 
nwk_MTCÆlbackSubNwkAssocüãCnf
–
ZMacAssocüãCnf_t
 *
∑øm
 );

130 
nwk_MTCÆlbackSubNwkD©aCnf
–
ZMacD©aCnf_t
 *
∑øm
 );

135 
nwk_MTCÆlbackSubNwkD©aInd
–
ZMacD©aInd_t
 *
∑øm
 );

141 
nwk_MTCÆlbackSubNwkDißssocüãInd
–
ZMacDißssocüãInd_t
 *
∑øm
 );

146 
nwk_MTCÆlbackSubNwkDißssocüãCnf
–
ZMacDißssocüãCnf_t
 *
∑øm
 );

151 
nwk_MTCÆlbackSubNwkOΩh™Ind
–
ZMacOΩh™Ind_t
 *
∑øm
 );

156 
nwk_MTCÆlbackSubNwkPﬁlCnf
–
byã
 
Sètus
 );

161 
nwk_MTCÆlbackSubNwkSˇnCnf
–
ZMacSˇnCnf_t
 *
∑øm
 );

166 
nwk_MTCÆlbackSubNwkSèπCnf
–
uöt8
 
Sètus
 );

171 
nwk_MTCÆlbackSubNwkSyncLossInd
–
ZMacSyncLossInd_t
 *
∑øm
 );

176 
nwk_MTCÆlbackSubNwkRxE«bÀCnf
 ( 
byã
 
Sètus
 );

181 
nwk_MTCÆlbackSubCommSètusInd
 ( 
ZMacCommSètusInd_t
 *
∑øm
 );

186 
nwk_MTCÆlbackSubNwkPurgeCnf
–
ZMacPurgeCnf_t
 *
∑øm
 );

191 
nwk_MTCÆlbackSubNwkBóc⁄NŸifyInd
 ( 
ZMacBóc⁄NŸifyInd_t
 *
∑øm
 );

197 #ifde‡
__˝lu•lus


	@Components/mt/MT_NWK.c

44 
	~"ZComDef.h
"

45 
	~"OSAL.h
"

46 
	~"MT.h
"

47 
	~"NLMEDE.h
"

48 
	~"nwk.h
"

49 
	~"ZDAµ.h
"

50 
	~"nwk_globÆs.h
"

51 
	~"MT_NWK.h
"

53 #i‡!
deföed
–
WIN32
 )

54 
	~"OnBﬂrd.h
"

60 
uöt16
 
	g_nwkCÆlbackSub
;

69 #i‡
deföed
 (
MT_NWK_FUNC
)

70 
MT_NldeD©aReque°
(
uöt8
 *
pBuf
);

71 
MT_NlmeNëw‹kF‹m©i⁄Reque°
(
uöt8
 *
pBuf
);

72 
MT_NlmePîmôJoöögReque°
(
uöt8
 *
pBuf
);

73 
MT_NlmeSèπRouãrReque°
(
uöt8
 *
pBuf
);

74 
MT_NlmeJoöReque°
(
uöt8
 *
pBuf
);

75 
MT_NlmeLóveReque°
(
uöt8
 *
pBuf
);

76 
MT_NlmeRe£tReque°
(
uöt8
 *
pBuf
);

77 
MT_NlmeGëReque°
(
uöt8
 *
pBuf
);

78 
MT_NlmeSëReque°
(
uöt8
 *
pBuf
);

79 
MT_NlmeNëw‹kDiscovîyReque°
(
uöt8
 *
pBuf
);

80 
MT_NlmeRouãDiscovîyReque°
(
uöt8
 *
pBuf
);

81 
MT_NlmeDúe˘JoöReque°
(
uöt8
 *
pBuf
);

82 
MT_NlmeOΩh™JoöReque°
(
uöt8
 *
pBuf
);

84 
uöt8
 
MT_Nwk_D©aReque°
–
uöt16
 
d°Addr
, uöt8 
nsduLí
, uöt8* 
nsdu
,

85 
uöt8
 
nsduH™dÀ
, 
uöt16
 
nsduH™dÀO±i⁄s
,

86 
uöt8
 
£cuª
, uöt8 
discovîRouã
,

87 
uöt8
 
ødius
);

90 #i‡
deföed
 (
MT_NWK_FUNC
)

104 
uöt8
 
	$MT_NwkComm™dPro˚ssög
(
uöt8
 *
pBuf
)

106 
uöt8
 
°©us
 = 
MT_RPC_SUCCESS
;

108 
pBuf
[
MT_RPC_POS_CMD1
])

110 
MT_NWK_INIT
:

111 
	`nwk_öô
(
NWK_TaskID
);

114 
MT_NLDE_DATA_REQ
:

115 
	`MT_NldeD©aReque°
(
pBuf
);

118 
MT_NLME_NETWORK_FORMATION_REQ
:

119 
	`MT_NlmeNëw‹kF‹m©i⁄Reque°
(
pBuf
);

122 
MT_NLME_PERMIT_JOINING_REQ
:

123 
	`MT_NlmePîmôJoöögReque°
(
pBuf
);

126 
MT_NLME_JOIN_REQ
:

127 
	`MT_NlmeJoöReque°
(
pBuf
);

130 
MT_NLME_LEAVE_REQ
:

131 
	`MT_NlmeLóveReque°
(
pBuf
);

134 
MT_NLME_RESET_REQ
:

135 
	`MT_NlmeRe£tReque°
(
pBuf
);

138 
MT_NLME_GET_REQ
:

139 
	`MT_NlmeGëReque°
(
pBuf
);

142 
MT_NLME_SET_REQ
:

143 
	`MT_NlmeSëReque°
(
pBuf
);

146 
MT_NLME_NETWORK_DISCOVERY_REQ
:

147 
	`MT_NlmeNëw‹kDiscovîyReque°
(
pBuf
);

150 
MT_NLME_ROUTE_DISCOVERY_REQ
:

151 
	`MT_NlmeRouãDiscovîyReque°
(
pBuf
);

154 
MT_NLME_DIRECT_JOIN_REQ
:

155 
	`MT_NlmeDúe˘JoöReque°
(
pBuf
);

158 
MT_NLME_ORPHAN_JOIN_REQ
:

159 
	`MT_NlmeOΩh™JoöReque°
(
pBuf
);

162 
MT_NLME_START_ROUTER_REQ
:

163 
	`MT_NlmeSèπRouãrReque°
(
pBuf
);

167 
°©us
 = 
MT_RPC_ERR_COMMAND_ID
;

171  
°©us
;

172 
	}
}

183 
	$MT_NldeD©aReque°
(
uöt8
 *
pBuf
)

185 
uöt8
 
ªtVÆue
 = 
ZFaûuª
;

186 
uöt16
 
d°Addr
;

187 
uöt8
 
d©aLí
 = 0;

188 
uöt8
 *
d©aPå
;

189 
uöt8
 
cmdId
;

192 
cmdId
 = 
pBuf
[
MT_RPC_POS_CMD1
];

193 
pBuf
 +
MT_RPC_FRAME_HDR_SZ
;

196 
d°Addr
 = 
	`BUILD_UINT16
–
pBuf
[0],ÖBuf[1] );

197 
pBuf
 +–
d°Addr
 );

200 
d©aLí
 = *
pBuf
++;

201 
d©aPå
 = 
pBuf
;

204 
pBuf
 +
ZTEST_DEFAULT_DATA_LEN
;

207 
ªtVÆue
 = 
	`MT_Nwk_D©aReque°
(
d°Addr
, 
d©aLí
, 
d©aPå
, 
pBuf
[0], 
	`BUILD_UINT16
(pBuf[1],ÖBuf[2]),

208 
pBuf
[3],ÖBuf[4],ÖBuf[5]);

211 
	`MT_BuûdAndSídZToﬁRe•⁄£
(((
uöt8
)
MT_RPC_CMD_SRSP
 | (uöt8)
MT_RPC_SYS_NWK
), 
cmdId
, 1, &
ªtVÆue
);

212 
	}
}

224 
	$MT_NlmeNëw‹kF‹m©i⁄Reque°
(
uöt8
 *
pBuf
)

226 
uöt8
 
ªtVÆue
 = 
ZFaûuª
;

227 
uöt16
 
∑nId
;

228 
uöt32
 
ch™√lLi°
;

229 
uöt8
 
cmdId
;

232 
cmdId
 = 
pBuf
[
MT_RPC_POS_CMD1
];

233 
pBuf
 +
MT_RPC_FRAME_HDR_SZ
;

236 
∑nId
 = 
	`BUILD_UINT16
–
pBuf
[0],ÖBuf[1]);

237 
pBuf
 +(
uöt16
);

240 
ch™√lLi°
 = 
	`oßl_buûd_uöt32
(
pBuf
, 4);

241 
pBuf
 +(
uöt32
);

243 i‡–
ZG_BUILD_COORDINATOR_TYPE
 && 
ZG_DEVICE_COORDINATOR_TYPE
 )

245 
ªtVÆue
 = 
	`NLME_Nëw‹kF‹m©i⁄Reque°
–
∑nId
, 
NULL
, 
ch™√lLi°
, 
pBuf
[0],ÖBuf[1],ÖBuf[2],ÖBuf[3] );

249 
ªtVÆue
 = 
ZUnsuµ‹ãdMode
;

253 
	`MT_BuûdAndSídZToﬁRe•⁄£
(((
uöt8
)
MT_RPC_CMD_SRSP
 | (uöt8)
MT_RPC_SYS_NWK
), 
cmdId
, 1, &
ªtVÆue
);

254 
	}
}

265 
	$MT_NlmePîmôJoöögReque°
(
uöt8
 *
pBuf
)

267 
uöt8
 
ªtVÆue
 = 
ZFaûuª
;

268 
uöt8
 
cmdId
;

271 
cmdId
 = 
pBuf
[
MT_RPC_POS_CMD1
];

272 
pBuf
 +
MT_RPC_FRAME_HDR_SZ
;

274 i‡(
ZSTACK_ROUTER_BUILD
)

276 
ªtVÆue
 = 
	`NLME_PîmôJoöögReque°
(*
pBuf
);

280 
ªtVÆue
 = 
ZUnsuµ‹ãdMode
;

284 
	`MT_BuûdAndSídZToﬁRe•⁄£
(((
uöt8
)
MT_RPC_CMD_SRSP
 | (uöt8)
MT_RPC_SYS_NWK
), 
cmdId
, 1, &
ªtVÆue
);

285 
	}
}

296 
	$MT_NlmeSèπRouãrReque°
(
uöt8
 *
pBuf
)

298 
uöt8
 
ªtVÆue
 = 
ZFaûuª
;

299 
uöt8
 
cmdId
;

302 
cmdId
 = 
pBuf
[
MT_RPC_POS_CMD1
];

303 
pBuf
 +
MT_RPC_FRAME_HDR_SZ
;

305 i‡–
ZSTACK_ROUTER_BUILD
 )

307 
ªtVÆue
 = (
byã
)
	`NLME_SèπRouãrReque°
(
pBuf
[0],ÖBuf[1],ÖBuf[2]);

311 
ªtVÆue
 = 
ZUnsuµ‹ãdMode
;

315 
	`MT_BuûdAndSídZToﬁRe•⁄£
(((
uöt8
)
MT_RPC_CMD_SRSP
 | (uöt8)
MT_RPC_SYS_NWK
), 
cmdId
, 1, &
ªtVÆue
);

316 
	}
}

327 
	$MT_NlmeJoöReque°
(
uöt8
 *
pBuf
)

329 
uöt8
 
ªtVÆue
 = 
ZFaûuª
;

330 
uöt8
 
dummyExPANID
[
Z_EXTADDR_LEN
] = {0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF};

331 
uöt8
 
cmdId
;

334 
cmdId
 = 
pBuf
[
MT_RPC_POS_CMD1
];

335 
pBuf
 +
MT_RPC_FRAME_HDR_SZ
;

337 
ªtVÆue
 = 
	`NLME_JoöReque°
(
dummyExPANID
, 
	`BUILD_UINT16
(
pBuf
[0],ÖBuf[1]),ÖBuf[2],ÖBuf[3]);

339 i‡–
pBuf
[6] & 
CAPINFO_RCVR_ON_IDLE
 )

342 
	`NLME_SëPﬁlR©e
( 0 );

343 
	`NLME_SëQueuedPﬁlR©e
( 0 );

344 
	`NLME_SëRe•⁄£R©e
( 0 );

348 
	`MT_BuûdAndSídZToﬁRe•⁄£
(((
uöt8
)
MT_RPC_CMD_SRSP
 | (uöt8)
MT_RPC_SYS_NWK
), 
cmdId
, 1, &
ªtVÆue
);

349 
	}
}

360 
	$MT_NlmeLóveReque°
(
uöt8
 *
pBuf
)

362 
NLME_LóveReq_t
 
ªq
;

363 
uöt8
 
ªtVÆue
 = 
ZFaûuª
;

364 
uöt8
 
ödex
, 
cmdId
;

367 
cmdId
 = 
pBuf
[
MT_RPC_POS_CMD1
];

368 
pBuf
 +
MT_RPC_FRAME_HDR_SZ
;

371 
ödex
=0;((ödex < 
Z_EXTADDR_LEN
Ë&& (
pBuf
[index] == 0));index++);

373 i‡(
ödex
 =
Z_EXTADDR_LEN
)

375 
ªq
.
extAddr
 = 
NULL
;

379 
ªq
.
extAddr
 = 
pBuf
;

383 
pBuf
 +
Z_EXTADDR_LEN
;

385 
ªq
.
ªmoveChûdªn
 = 
FALSE
;

386 
ªq
.
ªjoö
 = 
FALSE
;

387 
ªq
.
sûít
 = 
FALSE
;

389 
ªtVÆue
 = 
	`NLME_LóveReq
(&
ªq
);

392 
	`MT_BuûdAndSídZToﬁRe•⁄£
(((
uöt8
)
MT_RPC_CMD_SRSP
 | (uöt8)
MT_RPC_SYS_NWK
), 
cmdId
, 1, &
ªtVÆue
);

393 
	}
}

405 
	$MT_NlmeRe£tReque°
(
uöt8
 *
pBuf
)

407 
uöt8
 
ªtVÆue
 = 
	`NLME_Re£tReque°
();

410 
	`MT_BuûdAndSídZToﬁRe•⁄£
(((
uöt8
)
MT_RPC_CMD_SRSP
 | (uöt8)
MT_RPC_SYS_NWK
), 
MT_NLME_RESET_REQ
, 1, &
ªtVÆue
);

411 
	}
}

422 
	$MT_NlmeGëReque°
(
uöt8
 *
pBuf
)

424 
uöt8
 
d©aBuf
[11];

425 
uöt8
 
©å
, 
ödex
, 
cmdId
;

428 
cmdId
 = 
pBuf
[
MT_RPC_POS_CMD1
];

429 
pBuf
 +
MT_RPC_FRAME_HDR_SZ
;

431 
©å
 = *
pBuf
++;

432 
ödex
 = *
pBuf
;

434 
d©aBuf
[0] = 
	`NLME_GëReque°
((
ZNwkAâribuãs_t
 )
©å
, 
ödex
, &dataBuf[1]);

437 
	`MT_BuûdAndSídZToﬁRe•⁄£
(((
uöt8
)
MT_RPC_CMD_SRSP
 | (uöt8)
MT_RPC_SYS_NWK
), 
cmdId
,

438 11, 
d©aBuf
 );

439 
	}
}

450 
	$MT_NlmeSëReque°
(
uöt8
 *
pBuf
)

452 
uöt8
 
ªtVÆue
 = 
ZFaûuª
;

453 
uöt8
 
cmdId
;

456 
cmdId
 = 
pBuf
[
MT_RPC_POS_CMD1
];

457 
pBuf
 +
MT_RPC_FRAME_HDR_SZ
;

459 
ªtVÆue
 = 
	`NLME_SëReque°
((
ZNwkAâribuãs_t
)
pBuf
[0],ÖBuf[1], &pBuf[2]);

462 
	`ZDAµ_NVUpd©e
();

465 
	`MT_BuûdAndSídZToﬁRe•⁄£
(((
uöt8
)
MT_RPC_CMD_SRSP
 | (uöt8)
MT_RPC_SYS_NWK
), 
cmdId
, 1, &
ªtVÆue
 );

466 
	}
}

477 
	$MT_NlmeNëw‹kDiscovîyReque°
(
uöt8
 *
pBuf
)

479 
uöt8
 
ªtVÆue
 = 
ZFaûuª
;

480 
uöt8
 
cmdId
;

481 
uöt32
 
sˇnCh™√ls
;

484 
cmdId
 = 
pBuf
[
MT_RPC_POS_CMD1
];

485 
pBuf
 +
MT_RPC_FRAME_HDR_SZ
;

488 
sˇnCh™√ls
 = 
	`oßl_buûd_uöt32
(
pBuf
, 4);

489 
pBuf
 +(
uöt32
);

491 
ªtVÆue
 = 
	`NLME_Nëw‹kDiscovîyReque°
(
sˇnCh™√ls
, *
pBuf
);

494 
	`MT_BuûdAndSídZToﬁRe•⁄£
(((
uöt8
)
MT_RPC_CMD_SRSP
 | (uöt8)
MT_RPC_SYS_NWK
), 
cmdId
, 1, &
ªtVÆue
 );

495 
	}
}

506 
	$MT_NlmeRouãDiscovîyReque°
(
uöt8
 *
pBuf
)

508 
uöt8
 
ªtVÆue
 = 
ZFaûuª
;

509 
uöt8
 
cmdId
;

512 
cmdId
 = 
pBuf
[
MT_RPC_POS_CMD1
];

513 
pBuf
 +
MT_RPC_FRAME_HDR_SZ
;

515 i‡–
ZSTACK_ROUTER_BUILD
 )

517 
ªtVÆue
 = 
	`NLME_RouãDiscovîyReque°
(
	`BUILD_UINT16
(
pBuf
[0],ÖBuf[1]), 0,ÖBuf[2]);

521 
ªtVÆue
 = 
ZUnsuµ‹ãdMode
;

525 
	`MT_BuûdAndSídZToﬁRe•⁄£
(((
uöt8
)
MT_RPC_CMD_SRSP
 | (uöt8)
MT_RPC_SYS_NWK
), 
cmdId
, 1, &
ªtVÆue
);

526 
	}
}

537 
	$MT_NlmeDúe˘JoöReque°
(
uöt8
 *
pBuf
)

539 
uöt8
 
ªtVÆue
 = 
ZFaûuª
;

540 
uöt8
 
cmdId
;

543 
cmdId
 = 
pBuf
[
MT_RPC_POS_CMD1
];

544 
pBuf
 +
MT_RPC_FRAME_HDR_SZ
;

546 i‡–
ZSTACK_ROUTER_BUILD
 )

548 
ªtVÆue
 = 
	`NLME_Dúe˘JoöReque°
–
pBuf
,ÖBuf[8] );

552 
ªtVÆue
 = 
ZUnsuµ‹ãdMode
;

556 
	`MT_BuûdAndSídZToﬁRe•⁄£
(((
uöt8
)
MT_RPC_CMD_SRSP
 | (uöt8)
MT_RPC_SYS_NWK
), 
cmdId
, 1, &
ªtVÆue
);

557 
	}
}

568 
	$MT_NlmeOΩh™JoöReque°
(
uöt8
 *
pBuf
)

570 
uöt8
 
i
, 
j
, 
©å
;

571 
uöt8
 
ªtVÆue
 = 
ZFaûuª
;

572 
uöt32
 
ch™√lLi°
;

573 
uöt8
 
cmdId
;

575 i‡–
ZSTACK_END_DEVICE_BUILD
 )

578 
cmdId
 = 
pBuf
[
MT_RPC_POS_CMD1
];

579 
pBuf
 +
MT_RPC_FRAME_HDR_SZ
;

582 
ch™√lLi°
 = 
	`oßl_buûd_uöt32
(
pBuf
, 4);

583 
pBuf
 +(
uöt32
);

586 
j
 = 
©å
 = 0;

588 
i
 = 0; i < 
ED_SCAN_MAXCHANNELS
; i++)

590 i‡(
ch™√lLi°
 & (1 << 
i
))

592 
j
++;

593 
©å
 = 
i
;

598 i‡(
j
 == 1)

600 
_NIB
.
sˇnDuøti⁄
 = *
pBuf
;

601 
_NIB
.
nwkLogiˇlCh™√l
 = 
©å
;

602 
_NIB
.
ch™√lLi°
 = channelList;

603 i‡–!
_NIB
.
C≠abûôyInfo
 )

605 
_NIB
.
C≠abûôyInfo
 = 
ZDO_C⁄fig_Node_Des¸ùt‹
.
C≠abûôyFœgs
;

608 
devSèã
 = 
DEV_NWK_ORPHAN
;

609 
ªtVÆue
 = (
byã
)
	`NLME_OΩh™JoöReque°
(
ch™√lLi°
, *
pBuf
);

613 
ªtVÆue
 = 
ZNwkInvÆidP¨am
;

618 
ªtVÆue
 = 
ZUnsuµ‹ãdMode
;

622 
	`MT_BuûdAndSídZToﬁRe•⁄£
(((
uöt8
)
MT_RPC_CMD_SRSP
 | (uöt8)
MT_RPC_SYS_NWK
), 
cmdId
, 1, &
ªtVÆue
);

623 
	}
}

634 
uöt8
 
	$MT_Nwk_D©aReque°
(
uöt16
 
d°Addr
, 
uöt8
 
nsduLí
, uöt8* 
nsdu
,

635 
uöt8
 
nsduH™dÀ
, 
uöt16
 
nsduH™dÀO±i⁄s
,

636 
uöt8
 
£cuª
, uöt8 
discovîRouã
,

637 
uöt8
 
ødius
)

639 
uöt8
 
°©us
;

640 
NLDE_D©aReqAŒoc_t
 
dø
;

641 
NLDE_D©aReq_t
* 
ªq
;

644 
dø
.
ovîhód
 = (
NLDE_D©aReq_t
);

645 
dø
.
nsduLí
 =ÇsduLen;

646 
dø
.
£cuª
 = secure;

648 
ªq
 = 
	`NLDE_D©aReqAŒoc
(&
dø
);

650 i‡–
ªq
 !
NULL
 )

652 
	`oßl_mem˝y
(
ªq
->
nfd
.
nsdu
,Çsdu, 
nsduLí
);

654 
ªq
->
nfd
.
d°Addr
 = dstAddr;

655 
ªq
->
nfd
.
nsduH™dÀO±i⁄s
 =ÇsduHandleOptions;

656 
ªq
->
nfd
.
discovîRouã
 = discoverRoute;

657 
ªq
->
nfd
.
ødius
 =Ñadius;

659 
°©us
 = 
	`NLDE_D©aReq
–
ªq
 );

663 
°©us
 = 
ZMemEº‹
;

666  
°©us
;

667 
	}
}

670 #i‡
deföed
 ( 
MT_NWK_CB_FUNC
 )

681 
	$nwk_MTCÆlbackSubD©aC⁄fúm
(
byã
 
nsduH™dÀ
, 
ZSètus_t
 
°©us
)

683 
byã
 
buf
[2];

685 
buf
[0] = 
nsduH™dÀ
;

686 
buf
[1] = (
byã
)
°©us
;

688 
	`MT_BuûdAndSídZToﬁRe•⁄£
(((
uöt8
)
MT_RPC_CMD_AREQ
 | (uöt8)
MT_RPC_SYS_NWK
), 
MT_NLDE_DATA_CONF
, 2, 
buf
 );

689 
	}
}

704 
	$nwk_MTCÆlbackSubD©aIndiˇti⁄
(
uöt16
 
SrcAddªss
, 
öt16
 
nsduLígth
, 
byã
 *
nsdu
, byã 
LökQuÆôy
)

706 
byã
 *
msgPå
;

707 
byã
 *
msg
;

708 
byã
 
msgLí
;

710 
msgLí
 = –
uöt16
 ) + –
uöt8
 ) + 
ZTEST_DEFAULT_DATA_LEN


711 + –
byã
);

713 
msgPå
 = 
	`oßl_mem_Æloc
–
msgLí
 );

714 i‡–
msgPå
 )

717 
msg
 = 
msgPå
;

720 *
msg
++ = 
	`LO_UINT16
–
SrcAddªss
 );

721 *
msg
++ = 
	`HI_UINT16
–
SrcAddªss
 );

725 *
msg
++ = ( 
uöt8
 ) 
nsduLígth
;

727 
	`oßl_mem£t
–
msg
, 
NULL
, 
ZTEST_DEFAULT_DATA_LEN
 );

728 
	`oßl_mem˝y
–
msg
, 
nsdu
, 
nsduLígth
 );

729 
msg
 +
ZTEST_DEFAULT_DATA_LEN
;

731 *
msg
++ = 
LökQuÆôy
;

733 
	`MT_BuûdAndSídZToﬁRe•⁄£
–((
uöt8
)
MT_RPC_CMD_AREQ
 | (uöt8)
MT_RPC_SYS_NWK
), 
MT_NLDE_DATA_IND
, 
msgLí
, 
msgPå
 );

735 
	`oßl_mem_‰ì
–
msgPå
 );

737 
	}
}

748 
	$nwk_MTCÆlbackSubInôCo‹dC⁄fúm
–
ZSètus_t
 
Sètus
 )

750 
	`MT_BuûdAndSídZToﬁRe•⁄£
(((
uöt8
)
MT_RPC_CMD_AREQ
 | (uöt8)
MT_RPC_SYS_NWK
), 
MT_NLME_NETWORK_FORMATION_CONF
,

751 (
byã
), (byã*)&
Sètus
);

752 
	}
}

763 
	$nwk_MTCÆlbackSubSèπRouãrC⁄fúm
–
ZSètus_t
 
Sètus
 )

765 
	`MT_BuûdAndSídZToﬁRe•⁄£
(((
uöt8
)
MT_RPC_CMD_AREQ
 | (uöt8)
MT_RPC_SYS_NWK
), 
MT_NLME_START_ROUTER_CONF
,

766 (
byã
), (byã*)&
Sètus
);

767 
	}
}

778 
	$nwk_MTCÆlbackSubJoöC⁄fúm
(
uöt16
 
P™Id
, 
ZSètus_t
 
Sètus
)

780 
byã
 
msg
[
Z_EXTADDR_LEN
 + 3];

783 
	`ZMacGëReq
–
ZMacExtAddr
, 
msg
 );

785 
msg
[
Z_EXTADDR_LEN
 + 0] = 
	`LO_UINT16
(
P™Id
);

786 
msg
[
Z_EXTADDR_LEN
 + 1] = 
	`HI_UINT16
(
P™Id
);

787 
msg
[
Z_EXTADDR_LEN
 + 2] = (
byã
)
Sètus
;

789 
	`MT_BuûdAndSídZToﬁRe•⁄£
(((
uöt8
)
MT_RPC_CMD_AREQ
 | (uöt8)
MT_RPC_SYS_NWK
), 
MT_NLME_JOIN_CONF
, 
Z_EXTADDR_LEN
 + 3, 
msg
 );

790 
	}
}

801 
	$nwk_MTCÆlbackSubNëw‹kDiscovîyC⁄fúm
–
byã
 
Resu…Cou¡
, 
√tw‹kDesc_t
 *
Nëw‹kLi°
 )

803 
byã
 
Àn
;

804 
byã
 *
msgPå
;

805 
byã
 *
msg
;

806 
byã
 
i
;

809 i‡(
Resu…Cou¡
 * (
√tw‹kDesc_t
Ë> 
MT_UART_TX_BUFF_MAX
 - (1 + 
SPI_0DATA_MSG_LEN
))

811 
Resu…Cou¡
 = (
MT_UART_TX_BUFF_MAX
 - (1 + 
SPI_0DATA_MSG_LEN
)Ë/ (
√tw‹kDesc_t
);

814 
Àn
 = 1 + 
Resu…Cou¡
 * (
√tw‹kDesc_t
);

815 
msgPå
 = 
	`oßl_mem_Æloc
–
Àn
 );

816 i‡–
msgPå
 )

819 
msg
 = 
msgPå
;

821 *
msg
++ = 
Resu…Cou¡
;

823  
i
 = 0; i < 
Resu…Cou¡
; i++ )

825 *
msg
++ = 
	`LO_UINT16
–
Nëw‹kLi°
->
∑nId
 );

826 *
msg
++ = 
	`HI_UINT16
–
Nëw‹kLi°
->
∑nId
 );

827 *
msg
++ = 
Nëw‹kLi°
->
logiˇlCh™√l
;

828 *
msg
++ = 
Nëw‹kLi°
->
bóc⁄Ordî
;

829 *
msg
++ = 
Nëw‹kLi°
->
su≥rFømeOrdî
;

830 *
msg
++ = 
Nëw‹kLi°
->
rouãrC≠acôy
;

831 *
msg
++ = 
Nëw‹kLi°
->
devi˚C≠acôy
;

832 *
msg
++ = 
Nëw‹kLi°
->
vîsi⁄
;

833 *
msg
++ = 
Nëw‹kLi°
->
°ackProfûe
;

836 
Nëw‹kLi°
 = (
√tw‹kDesc_t
*)Nëw‹kLi°->
√xtDesc
;

839 
	`MT_BuûdAndSídZToﬁRe•⁄£
 (((
uöt8
)
MT_RPC_CMD_AREQ
 | (uöt8)
MT_RPC_SYS_NWK
), 
MT_NLME_NETWORK_DISCOVERY_CONF
, 
Àn
, 
msgPå
);

841 
	`oßl_mem_‰ì
–
msgPå
 );

843 
	}
}

855 
	$nwk_MTCÆlbackSubJoöIndiˇti⁄
–
uöt16
 
Sh‹tAddªss
, 
byã
 *
ExãndedAddªss
,

856 
byã
 
C≠abûôyInf‹m©i⁄
 )

858 
byã
 *
msgPå
;

859 
byã
 *
msg
;

860 
byã
 
Àn
;

862 
Àn
 = –
uöt16
 ) + 
Z_EXTADDR_LEN
 + –
byã
 );

863 
msgPå
 = 
	`oßl_mem_Æloc
–
Àn
 );

865 i‡–
msgPå
 )

868 
msg
 = 
msgPå
;

871 *
msg
++ = 
	`LO_UINT16
–
Sh‹tAddªss
 );

872 *
msg
++ = 
	`HI_UINT16
–
Sh‹tAddªss
 );

874 
	`oßl_˝yExtAddr
–
msg
, 
ExãndedAddªss
 );

875 
msg
 +
Z_EXTADDR_LEN
;

877 *
msg
 = 
C≠abûôyInf‹m©i⁄
;

879 
	`MT_BuûdAndSídZToﬁRe•⁄£
(((
uöt8
)
MT_RPC_CMD_AREQ
 | (uöt8)
MT_RPC_SYS_NWK
), 
MT_NLME_JOIN_IND
, 
Àn
, 
msgPå
 );

881 
	`oßl_mem_‰ì
–
msgPå
 );

883 
	}
}

895 
	$nwk_MTCÆlbackSubLóveC⁄fúm
–
byã
 *
Devi˚Addªss
, 
ZSètus_t
 
Sètus
 )

897 
byã
 *
msgPå
;

898 
byã
 *
msg
;

900 
msgPå
 = 
	`oßl_mem_Æloc
–
Z_EXTADDR_LEN
 + –
byã
 ) );

901 i‡–
msgPå
 )

904 
msg
 = 
msgPå
;

907 
	`oßl_˝yExtAddr
–
msg
, 
Devi˚Addªss
 );

908 
msg
 +
Z_EXTADDR_LEN
;

910 *
msg
 = (
byã
)
Sètus
;

912 
	`MT_BuûdAndSídZToﬁRe•⁄£
(((
uöt8
)
MT_RPC_CMD_AREQ
 | (uöt8)
MT_RPC_SYS_NWK
), 
MT_NLME_LEAVE_CONF
,

913 
Z_EXTADDR_LEN
 + –
byã
 ), 
msgPå
 );

915 
	`oßl_mem_‰ì
–
msgPå
 );

917 
	}
}

927 
	$nwk_MTCÆlbackSubLóveIndiˇti⁄
–
byã
 *
Devi˚Addªss
 )

929 
byã
 
msg
[
Z_EXTADDR_LEN
+1];

932 i‡–
Devi˚Addªss
 )

934 
	`oßl_˝yExtAddr
–
msg
, 
Devi˚Addªss
 );

938 
	`oßl_mem£t
–
msg
, 0, 
Z_EXTADDR_LEN
 );

942 
msg
[
Z_EXTADDR_LEN
] = 0;

944 
	`MT_BuûdAndSídZToﬁRe•⁄£
(((
uöt8
)
MT_RPC_CMD_AREQ
 | (uöt8)
MT_RPC_SYS_NWK
), 
MT_NLME_LEAVE_IND
, 
Z_EXTADDR_LEN
+1, 
msg
 );

945 
	}
}

955 
	$nwk_MTCÆlbackSubSyncIndiˇti⁄
( )

957 
	`MT_BuûdAndSídZToﬁRe•⁄£
(((
uöt8
)
MT_RPC_CMD_AREQ
 | (uöt8)
MT_RPC_SYS_NWK
), 
MT_NLME_SYNC_IND
, 0, 
NULL
 );

958 
	}
}

969 
	$nwk_MTCÆlbackSubPﬁlC⁄fúm
–
byã
 
°©us
 )

971 
byã
 
msg
 = 
°©us
;

973 
	`MT_BuûdAndSídZToﬁRe•⁄£
(((
uöt8
)
MT_RPC_CMD_AREQ
 | (uöt8)
MT_RPC_SYS_NWK
), 
MT_NLME_POLL_CONF
, 1, &
msg
 );

974 
	}
}

	@Components/mt/MT_NWK.h

46 
	~"hÆ_ty≥s.h
"

47 
	~"NLMEDE.h
"

52 
	#NWKCB_CHECK
(
cbi
Ë(
_nwkCÆlbackSub
 & (cbi))

	)

58 
	#CB_ID_NLDE_DATA_CNF
 0x0001

	)

59 
	#CB_ID_NLDE_DATA_IND
 0x0002

	)

60 
	#CB_ID_NLME_INIT_COORD_CNF
 0x0004

	)

61 
	#CB_ID_NLME_JOIN_CNF
 0x0008

	)

62 
	#CB_ID_NLME_JOIN_IND
 0x0010

	)

63 
	#CB_ID_NLME_LEAVE_CNF
 0x0020

	)

64 
	#CB_ID_NLME_LEAVE_IND
 0x0040

	)

65 
	#CB_ID_NLME_POLL_CNF
 0x0080

	)

66 
	#CB_ID_NLME_SYNC_IND
 0x0200

	)

67 
	#CB_ID_NLME_NWK_DISC_CNF
 0x2000

	)

68 
	#CB_ID_NLME_START_ROUTER_CNF
 0x8000

	)

73 
uöt16
 
_nwkCÆlbackSub
;

79 #ifde‡
MT_NWK_FUNC


83 
uöt8
 
MT_NwkComm™dPro˚ssög
 (
byã
 *
pBuf
);

87 #ifde‡
MT_NWK_CB_FUNC


91 
nwk_MTCÆlbackSubD©aC⁄fúm
(
byã
 
nsduH™dÀ
, 
ZSètus_t
 
°©us
);

96 
nwk_MTCÆlbackSubD©aIndiˇti⁄
(
uöt16
 
SrcAddªss
, 
öt16
 
nsduLígth
,

97 
byã
 *
nsdu
, byã 
LökQuÆôy
);

102 
nwk_MTCÆlbackSubInôCo‹dC⁄fúm
(
ZSètus_t
 
Sètus
);

107 
nwk_MTCÆlbackSubSèπRouãrC⁄fúm
(
ZSètus_t
 
Sètus
);

112 
nwk_MTCÆlbackSubNëw‹kDiscovîyC⁄fúm
(
byã
 
Resu…Cou¡
, 
√tw‹kDesc_t
 *
Nëw‹kLi°
);

117 
nwk_MTCÆlbackSubJoöC⁄fúm
(
uöt16
 
P™Id
, 
ZSètus_t
 
Sètus
);

122 
nwk_MTCÆlbackSubJoöIndiˇti⁄
(
uöt16
 
Sh‹tAddªss
, 
byã
 *
ExãndedAddªss
,

123 
byã
 
C≠abûôyInf‹m©i⁄
);

128 
nwk_MTCÆlbackSubLóveC⁄fúm
(
byã
 *
Devi˚Addªss
, 
ZSètus_t
 
Sètus
);

133 
nwk_MTCÆlbackSubLóveIndiˇti⁄
(
byã
 *
Devi˚Addªss
);

138 
nwk_MTCÆlbackSubSyncIndiˇti⁄
();

143 
nwk_MTCÆlbackSubPﬁlC⁄fúm
(
byã
 
°©us
);

150 
nwk_MTCÆlbackPögC⁄fúm
(
uöt16
 
D°Addªss
, 
byã
 
pögSeqNo
,

151 
uöt16
 
dñay
, 
byã
 
rouãC¡
, byã *
rouãAddr
);

	@Components/mt/MT_RPC.h

40 #i‚de‡
MT_RPC_H


41 
	#MT_RPC_H


	)

43 #ifde‡
__˝lu•lus


56 
	#MT_RPC_FRAME_HDR_SZ
 3

	)

59 
	#MT_RPC_DATA_MAX
 (256 - 
MT_RPC_FRAME_HDR_SZ
)

	)

62 
	#MT_RPC_CMD_TYPE_MASK
 0xE0

	)

65 
	#MT_RPC_SUBSYSTEM_MASK
 0x1F

	)

68 
	#MT_RPC_POS_LEN
 0

	)

69 
	#MT_RPC_POS_CMD0
 1

	)

70 
	#MT_RPC_POS_CMD1
 2

	)

71 
	#MT_RPC_POS_DAT0
 3

	)

74 
	#MT_RPC_SUCCESS
 0

	)

75 
	#MT_RPC_ERR_SUBSYSTEM
 1

	)

76 
	#MT_RPC_ERR_COMMAND_ID
 2

	)

77 
	#MT_RPC_ERR_PARAMETER
 3

	)

78 
	#MT_RPC_ERR_LENGTH
 4

	)

85 
MT_RPC_CMD_POLL
 = 0x00,

86 
MT_RPC_CMD_SREQ
 = 0x20,

87 
MT_RPC_CMD_AREQ
 = 0x40,

88 
MT_RPC_CMD_SRSP
 = 0x60,

89 
MT_RPC_CMD_RES4
 = 0x80,

90 
MT_RPC_CMD_RES5
 = 0xA0,

91 
MT_RPC_CMD_RES6
 = 0xC0,

92 
MT_RPC_CMD_RES7
 = 0xE0

93 } 
	tmtRpcCmdTy≥_t
;

96 
MT_RPC_SYS_RES0
,

97 
MT_RPC_SYS_SYS
,

98 
MT_RPC_SYS_MAC
,

99 
MT_RPC_SYS_NWK
,

100 
MT_RPC_SYS_AF
,

101 
MT_RPC_SYS_ZDO
,

102 
MT_RPC_SYS_SAPI
,

103 
MT_RPC_SYS_UTIL
,

104 
MT_RPC_SYS_DBG
,

105 
MT_RPC_SYS_APP
,

106 
MT_RPC_SYS_MAX


108 } 
	tmtRpcSysTy≥_t
;

112 
uöt8
 *(*
Æloc
)(
mtRpcCmdTy≥_t
 
ty≥
, uöt8 
Àn
);

113 (*
£nd
)(
uöt8
 *
pBuf
);

114 } 
	tmtTøn•‹t_t
;

116 
uöt8
 (*
	tmtPro˚ssMsg_t
)(
	tuöt8
 *
	tpBuf
);

121 #ifde‡
__˝lu•lus


	@Components/mt/MT_SAPI.c

45 
	~"ZComDef.h
"

46 
	~"OSAL.h
"

47 
	~"OSAL_Nv.h
"

48 
	~"OnBﬂrd.h
"

49 
	~"MT.h
"

50 
	~"MT_SAPI.h
"

51 
	~"MT_UART.h
"

57 #i‡
deföed
 ( 
MT_SAPI_CB_FUNC
 )

58 
uöt16
 
	g_ßpiCÆlbackSub
;

65 
MT_S≠iSy°emRe£t
(
uöt8
 *
pBuf
);

66 
MT_S≠iSèπ
(
uöt8
* 
pBuf
);

67 
MT_S≠iBödDevi˚
(
uöt8
 *
pBuf
);

68 
MT_S≠iAŒowBöd
(
uöt8
 *
pBuf
);

69 
MT_S≠iSídD©a
(
uöt8
 *
pBuf
);

70 
MT_S≠iRódCfg
(
uöt8
 *
pBuf
);

71 
MT_S≠iWrôeCfg
(
uöt8
 *
pBuf
);

72 
MT_S≠iGëDevInfo
(
uöt8
 *
pBuf
);

73 
MT_S≠iFödDev
(
uöt8
 *
pBuf
);

74 
MT_S≠iPîmôJoö
(
uöt8
 *
pBuf
);

75 
MT_S≠iAµRegi°î
(
uöt8
 *
pBuf
);

77 #i‡
deföed
 ( 
MT_SAPI_FUNC
 )

89 
uöt8
 
	$MT_S≠iComm™dPro˚ssög
(
uöt8
 *
pBuf
)

91 
uöt8
 
°©us
 = 
MT_RPC_SUCCESS
;

93 
pBuf
[
MT_RPC_POS_CMD1
])

95 
MT_SAPI_START_REQ
:

96 
	`MT_S≠iSèπ
(
pBuf
);

99 
MT_SAPI_BIND_DEVICE_REQ
:

100 
	`MT_S≠iBödDevi˚
(
pBuf
);

103 
MT_SAPI_ALLOW_BIND_REQ
:

104 
	`MT_S≠iAŒowBöd
(
pBuf
);

107 
MT_SAPI_SEND_DATA_REQ
:

108 
	`MT_S≠iSídD©a
(
pBuf
);

111 
MT_SAPI_READ_CFG_REQ
:

112 
	`MT_S≠iRódCfg
(
pBuf
);

115 
MT_SAPI_WRITE_CFG_REQ
:

116 
	`MT_S≠iWrôeCfg
(
pBuf
);

119 
MT_SAPI_GET_DEV_INFO_REQ
:

120 
	`MT_S≠iGëDevInfo
(
pBuf
);

123 
MT_SAPI_FIND_DEV_REQ
:

124 
	`MT_S≠iFödDev
(
pBuf
);

127 
MT_SAPI_PMT_JOIN_REQ
:

128 
	`MT_S≠iPîmôJoö
(
pBuf
);

131 
MT_SAPI_SYS_RESET
:

132 
	`MT_S≠iSy°emRe£t
(
pBuf
);

135 
MT_SAPI_APP_REGISTER_REQ
:

136 
	`MT_S≠iAµRegi°î
(
pBuf
);

140 
°©us
 = 
MT_RPC_ERR_COMMAND_ID
;

144  
°©us
;

145 
	}
}

156 
	$MT_S≠iSy°emRe£t
(
uöt8
 *
pBuf
)

158 
	`zb_Sy°emRe£t
();

159 
	}
}

170 
	$MT_S≠iSèπ
(
uöt8
 *
pBuf
)

172 
	`zb_SèπReque°
();

175 
	`MT_BuûdAndSídZToﬁRe•⁄£
(((
uöt8
)
MT_RPC_CMD_SRSP
 | (uöt8)
MT_RPC_SYS_SAPI
), 
MT_SAPI_START_REQ
, 0, 
NULL
);

176 
	}
}

186 
	$MT_S≠iAµRegi°î
(
uöt8
 *
pBuf
)

188 
uöt8
 
ªt
 = 
ZApsIŒegÆReque°
;

191 i‡–(
ßpi_ïDesc
.
ídPoöt
 =0Ë&& (*
pBuf
 != 0) )

193 
ªt
 = 
	`MT_BuûdEndpoötDesc
–
pBuf
+
MT_RPC_FRAME_HDR_SZ
, &
ßpi_ïDesc
 );

194 i‡–
ªt
 =
ZSuc˚ss
 )

196 
ªt
 = 
	`afRegi°î
–&
ßpi_ïDesc
 );

198 
	`afSëM©ch
(
ßpi_ïDesc
.
sim∂eDesc
->
EndPoöt
, 
FALSE
);

201 i‡–
ªt
 !
ZSuc˚ss
 )

203 
ßpi_ïDesc
.
ídPoöt
 = 0;

208 
	`MT_BuûdAndSídZToﬁRe•⁄£
(((
uöt8
)
MT_RPC_CMD_SRSP
 | (uöt8)
MT_RPC_SYS_SAPI
),

209 
MT_SAPI_APP_REGISTER_REQ
, 1, &
ªt
);

210 
	}
}

220 
	$MT_S≠iBödDevi˚
(
uöt8
 *
pBuf
)

222 
uöt8
 
i
, 
cmdId
;

225 
cmdId
 = 
pBuf
[
MT_RPC_POS_CMD1
];

226 
pBuf
 +
MT_RPC_FRAME_HDR_SZ
;

228  
i
 = 0; i < 
Z_EXTADDR_LEN
 ; i++ )

230 i‡–
pBuf
[3+
i
] != 0x00 )

237 i‡–
i
 =
Z_EXTADDR_LEN
 )

239 
	`zb_BödDevi˚
(
pBuf
[0], 
	`BUILD_UINT16
’Buf[1],ÖBuf[2]), (
uöt8
 *)
NULL
);

243 
	`zb_BödDevi˚
(
pBuf
[0], 
	`BUILD_UINT16
(pBuf[1],ÖBuf[2]), &pBuf[3]);

247 
	`MT_BuûdAndSídZToﬁRe•⁄£
(((
uöt8
)
MT_RPC_CMD_SRSP
 | (uöt8)
MT_RPC_SYS_SAPI
), 
cmdId
, 0, 
NULL
);

248 
	}
}

259 
	$MT_S≠iAŒowBöd
(
uöt8
 *
pBuf
)

261 
uöt8
 
cmdId
;

264 
cmdId
 = 
pBuf
[
MT_RPC_POS_CMD1
];

265 
pBuf
 +
MT_RPC_FRAME_HDR_SZ
;

267 
	`zb_AŒowBöd
(
pBuf
[0]);

270 
	`MT_BuûdAndSídZToﬁRe•⁄£
(((
uöt8
)
MT_RPC_CMD_SRSP
 | (uöt8)
MT_RPC_SYS_SAPI
), 
cmdId
, 0, 
NULL
);

271 
	}
}

282 
	$MT_S≠iSídD©a
(
uöt8
 *
pBuf
)

284 
uöt8
 
cmdId
;

285 
uöt16
 
de°ö©i⁄
, 
comm™d
;

286 
uöt8
 
Àn
, 
h™dÀ
, 
txO±i⁄
, 
ødius
;

289 
cmdId
 = 
pBuf
[
MT_RPC_POS_CMD1
];

290 
pBuf
 +
MT_RPC_FRAME_HDR_SZ
;

293 
de°ö©i⁄
 = 
	`BUILD_UINT16
(
pBuf
[0],ÖBuf[1]);

295 
comm™d
 = 
	`BUILD_UINT16
(
pBuf
[2],ÖBuf[3]);

297 
h™dÀ
 = 
pBuf
[4];

299 
txO±i⁄
 = 
pBuf
[5];

301 
ødius
 = 
pBuf
[6];

303 
Àn
 = 
pBuf
[7];

305 
	`zb_SídD©aReque°
(
de°ö©i⁄
, 
comm™d
, 
Àn
, &
pBuf
[8], 
h™dÀ
, 
txO±i⁄
, 
ødius
);

308 
	`MT_BuûdAndSídZToﬁRe•⁄£
(((
uöt8
)
MT_RPC_CMD_SRSP
 | (uöt8)
MT_RPC_SYS_SAPI
), 
cmdId
, 0, 
NULL
);

310 
	}
}

321 
	$MT_S≠iRódCfg
(
uöt8
 *
pBuf
)

323 
uöt8
 
i
, 
ªtSètus
, 
cmdId
;

324 
uöt8
 *
pRëBuf
;

327 
cmdId
 = 
pBuf
[
MT_RPC_POS_CMD1
];

328 
pBuf
 +
MT_RPC_FRAME_HDR_SZ
;

330 
i
 = (
uöt8
)
	`oßl_nv_ôem_Àn
(
pBuf
[0]);

332 
pRëBuf
 = 
	`oßl_mem_Æloc
(
i
+3);

334 i‡(
pBuf
)

337 
pRëBuf
[1] = 
pBuf
[0];

340 
pRëBuf
[2] = 
i
;

342 i‡(
i
 && ((ò!
ZCD_NV_NIB
Ë&& (ò!
ZCD_NV_DEVICE_LIST
) &&

343 (
i
 !
ZCD_NV_ADDRMGR
Ë&& (ò!
ZCD_NV_NWKKEY
)))

345 i‡((
	`zb_RódC⁄figuøti⁄
(
pBuf
[0], 
i
, 
pRëBuf
+3)Ë=
ZSUCCESS
)

346 
ªtSètus
 = 
ZSuc˚ss
;

348 
ªtSètus
 = 
ZFaûuª
;

352 
ªtSètus
 = 
ZInvÆidP¨amëî
;

356 
pRëBuf
[0] = 
ªtSètus
;

359 
	`MT_BuûdAndSídZToﬁRe•⁄£
(((
uöt8
)
MT_RPC_CMD_SRSP
 | (uöt8)
MT_RPC_SYS_SAPI
), 
cmdId
, 
i
+3, 
pRëBuf
 );

361 
	`oßl_mem_‰ì
(
pRëBuf
);

364 
	}
}

375 
	$MT_S≠iWrôeCfg
(
uöt8
 *
pBuf
)

377 
uöt8
 
ªtVÆue
, 
cmdId
;

380 
cmdId
 = 
pBuf
[
MT_RPC_POS_CMD1
];

381 
pBuf
 +
MT_RPC_FRAME_HDR_SZ
;

383 i‡((
pBuf
[0] !
ZCD_NV_NIB
Ë&& (pBuf[0] !
ZCD_NV_DEVICE_LIST
) &&

384 (
pBuf
[0] !
ZCD_NV_ADDRMGR
Ë&& (pBuf[0] !
ZCD_NV_NWKKEY
))

386 i‡((
	`zb_WrôeC⁄figuøti⁄
(
pBuf
[0],ÖBuf[1], &pBuf[2])Ë=
ZSUCCESS
)

387 
ªtVÆue
 = 
ZSuc˚ss
;

389 
ªtVÆue
 = 
ZFaûuª
;

393 
ªtVÆue
 = 
ZInvÆidP¨amëî
;

397 
	`MT_BuûdAndSídZToﬁRe•⁄£
(((
uöt8
)
MT_RPC_CMD_SRSP
 | (uöt8)
MT_RPC_SYS_SAPI
), 
cmdId
, 1, &
ªtVÆue
 );

398 
	}
}

409 
	$MT_S≠iGëDevInfo
(
uöt8
 *
pBuf
)

411 
uöt8
 *
pRëBuf
;

412 
uöt8
 
cmdId
;

415 
cmdId
 = 
pBuf
[
MT_RPC_POS_CMD1
];

416 
pBuf
 +
MT_RPC_FRAME_HDR_SZ
;

418 
pRëBuf
 = 
	`oßl_mem_Æloc
(
Z_EXTADDR_LEN
+1);

419 i‡(
pRëBuf
)

421 
	`zb_GëDevi˚Info
(
pBuf
[0], 
pRëBuf
+1);

422 
pRëBuf
[0] = 
pBuf
[0];

425 
	`MT_BuûdAndSídZToﬁRe•⁄£
(((
uöt8
)
MT_RPC_CMD_SRSP
 | (uöt8)
MT_RPC_SYS_SAPI
), 
cmdId
, 
Z_EXTADDR_LEN
+1, 
pRëBuf
 );

427 
	`oßl_mem_‰ì
(
pRëBuf
);

429 
	}
}

440 
	$MT_S≠iFödDev
(
uöt8
 *
pBuf
)

442 
uöt8
 
cmdId
;

445 
cmdId
 = 
pBuf
[
MT_RPC_POS_CMD1
];

446 
pBuf
 +
MT_RPC_FRAME_HDR_SZ
;

449 
	`zb_FödDevi˚Reque°
(
ZB_IEEE_SEARCH
, 
pBuf
);

452 
	`MT_BuûdAndSídZToﬁRe•⁄£
(((
uöt8
)
MT_RPC_CMD_SRSP
 | (uöt8)
MT_RPC_SYS_SAPI
), 
cmdId
, 0, 
NULL
 );

453 
	}
}

464 
	$MT_S≠iPîmôJoö
(
uöt8
 *
pBuf
)

466 
uöt8
 
ªtVÆue
, 
cmdId
;

469 
cmdId
 = 
pBuf
[
MT_RPC_POS_CMD1
];

470 
pBuf
 +
MT_RPC_FRAME_HDR_SZ
;

472 
ªtVÆue
 = (
	`zb_PîmôJoöögReque°
(
	`BUILD_UINT16
(
pBuf
[0],ÖBuf[1]),ÖBuf[2]));

475 
	`MT_BuûdAndSídZToﬁRe•⁄£
(((
uöt8
)
MT_RPC_CMD_SRSP
 | (uöt8)
MT_RPC_SYS_SAPI
), 
cmdId
, 1, &
ªtVÆue
 );

477 
	}
}

480 #i‡
deföed
 ( 
MT_SAPI_CB_FUNC
 )

491 
	$zb_MTCÆlbackSèπC⁄fúm
–
uöt8
 
°©us
 )

494 
	`MT_BuûdAndSídZToﬁRe•⁄£
(((
uöt8
)
MT_RPC_CMD_AREQ
 | (uöt8)
MT_RPC_SYS_SAPI
), 
MT_SAPI_START_CNF
, 1, &
°©us
);

495 
	}
}

506 
	$zb_MTCÆlbackSídD©aC⁄fúm
(
uöt8
 
h™dÀ
, uöt8 
°©us
)

508 
uöt8
 
ªtAºay
[2];

510 
ªtAºay
[0] = 
h™dÀ
;

511 
ªtAºay
[1] = 
°©us
;

514 
	`MT_BuûdAndSídZToﬁRe•⁄£
(((
uöt8
)
MT_RPC_CMD_AREQ
 | (uöt8)
MT_RPC_SYS_SAPI
), 
MT_SAPI_SEND_DATA_CNF
, 2, 
ªtAºay
);

516 
	}
}

527 
	$zb_MTCÆlbackBödC⁄fúm
–
uöt16
 
comm™dId
, 
uöt8
 
°©us
 )

529 
uöt8
 
ªtAºay
[3];

531 
ªtAºay
[0] = 
	`LO_UINT16
(
comm™dId
);

532 
ªtAºay
[1] = 
	`HI_UINT16
(
comm™dId
);

533 
ªtAºay
[2] = 
°©us
;

536 
	`MT_BuûdAndSídZToﬁRe•⁄£
(((
uöt8
)
MT_RPC_CMD_AREQ
 | (uöt8)
MT_RPC_SYS_SAPI
), 
MT_SAPI_BIND_CNF
, 3, 
ªtAºay
);

538 
	}
}

548 
	$zb_MTCÆlbackAŒowBödC⁄fúm
–
uöt16
 
sour˚
 )

550 
uöt8
 
ªtAºay
[2];

552 
ªtAºay
[0] = 
	`LO_UINT16
(
sour˚
);

553 
ªtAºay
[1] = 
	`HI_UINT16
(
sour˚
);

556 
	`MT_BuûdAndSídZToﬁRe•⁄£
(((
uöt8
)
MT_RPC_CMD_AREQ
 | (uöt8)
MT_RPC_SYS_SAPI
), 
MT_SAPI_ALLOW_BIND_CNF
, 3, 
ªtAºay
);

558 
	}
}

568 
	$zb_MTCÆlbackFödDevi˚C⁄fúm
–
uöt8
 
£¨chTy≥
, uöt8 *
£¨chKey
, uöt8 *
ªsu…
 )

570 
uöt8
 
ªtAºay
[
SPI_CB_SAPI_FIND_DEV_CNF_LEN
];

571 
uöt16
 
addr
 = *((uöt16*)
£¨chKey
);

574 
ªtAºay
[0] = 
ZB_IEEE_SEARCH
;

575 
ªtAºay
[1] = 
	`LO_UINT16
(
addr
);

576 
ªtAºay
[2] = 
	`HI_UINT16
(
addr
);

577 
	`oßl_mem˝y
(&
ªtAºay
[3], 
ªsu…
, 
Z_EXTADDR_LEN
);

580 
	`MT_BuûdAndSídZToﬁRe•⁄£
(((
uöt8
)
MT_RPC_CMD_AREQ
 | (uöt8)
MT_RPC_SYS_SAPI
), 
MT_SAPI_FIND_DEV_CNF
, 11, 
ªtAºay
);

582 
	}
}

593 
	$zb_MTCÆlbackRe˚iveD©aIndiˇti⁄
–
uöt16
 
sour˚
, uöt16 
comm™d
, uöt16 
Àn
, 
uöt8
 *
pD©a
 )

595 
uöt8
 *
memPå
;

596 
öt8
 
i
;

597 
uöt8
 
msgLí
 = 6 + 
Àn
;

599 
memPå
 = 
	`oßl_mem_Æloc
(
msgLí
);

601 i‡(
memPå
)

603 
memPå
[0] = 
	`LO_UINT16
(
sour˚
);

604 
memPå
[1] = 
	`HI_UINT16
(
sour˚
);

605 
memPå
[2] = 
	`LO_UINT16
(
comm™d
);

606 
memPå
[3] = 
	`HI_UINT16
(
comm™d
);

607 
memPå
[4] = 
	`LO_UINT16
(
Àn
);

608 
memPå
[5] = 
	`HI_UINT16
(
Àn
);

610 
i
=0; i<
Àn
; i++)

612 
memPå
[6+
i
] = 
pD©a
[i];

616 
	`MT_BuûdAndSídZToﬁRe•⁄£
(((
uöt8
)
MT_RPC_CMD_AREQ
 | (uöt8)
MT_RPC_SYS_SAPI
), 
MT_SAPI_RCV_DATA_IND
, 
msgLí
, 
memPå
);

618 
	`oßl_mem_‰ì
–
memPå
 );

620 
	}
}

	@Components/mt/MT_SAPI.h

41 #i‚de‡
MT_SAPI_H


42 
	#MT_SAPI_H


	)

47 
	~"ZComDef.h
"

48 
	~"MT.h
"

49 
	~"ßpi.h
"

51 
	~"OnBﬂrd.h
"

57 #i‡!
deföed
 (
SAPI_OSAL_ADD_TASK_ENABLED
)

58 
	#SAPICB_CHECK
(
cbi
Ë1

	)

60 
	#SAPICB_CHECK
(
cbi
Ë(
_ßpiCÆlbackSub
 & (cbi))

	)

68 
	#SPI_CB_SAPI_START_CNF_LEN
 1

	)

69 
	#SPI_CB_SAPI_SEND_DATA_CNF_LEN
 2

	)

70 
	#SPI_CB_SAPI_BIND_CNF_LEN
 3

	)

71 
	#SPI_CB_SAPI_DISC_NET_CNF_LEN
 1

	)

72 
	#SPI_CB_SAPI_FIND_DEV_CNF_LEN
 11

	)

73 
	#SPI_CB_SAPI_RCV_DATA_IND_LEN
 6

	)

74 
	#SPI_CB_SAPI_ALLOW_BIND_CNF_LEN
 2

	)

83 #i‡
deföed
 ( 
MT_SAPI_CB_FUNC
 )

84 
uöt16
 
_ßpiCÆlbackSub
;

103 #i‡
deföed
 ( 
MT_SAPI_FUNC
 )

105 
uöt8
 
MT_S≠iComm™dPro˚ssög
(uöt8 *
pBuf
);

109 #i‡
deföed
 ( 
MT_SAPI_CB_FUNC
 )

111 
zb_MTCÆlbackSèπC⁄fúm
–
uöt8
 
°©us
 );

113 
zb_MTCÆlbackSídD©aC⁄fúm
–
uöt8
 
h™dÀ
, uöt8 
°©us
 );

115 
zb_MTCÆlbackBödC⁄fúm
–
uöt16
 
comm™dId
, 
uöt8
 
°©us
 );

117 
zb_MTCÆlbackFödDevi˚C⁄fúm
–
uöt8
 
£¨chTy≥
,

118 
uöt8
 *
£¨chKey
, uöt8 *
ªsu…
 );

120 
zb_MTCÆlbackRe˚iveD©aIndiˇti⁄
–
uöt16
 
sour˚
,

121 
uöt16
 
comm™d
, uöt16 
Àn
, 
uöt8
 *
pD©a
 );

123 
zb_MTCÆlbackAŒowBödC⁄fúm
–
uöt16
 
sour˚
 );

	@Components/mt/MT_SYS.c

43 
	~"ZComDef.h
"

44 
	~"MT.h
"

45 
	~"MT_SYS.h
"

46 
	~"MT_VERSION.h
"

47 
	~"nwk_utû.h
"

48 
	~"OSAL_NV.h
"

49 
	~"Onbﬂrd.h
"

50 
	~"hÆ_adc.h
"

51 
	~"ZGlobÆs.h
"

53 
	~"Oßl_Mem‹y.h
"

54 
	~"OSAL.h
"

60 
	#MT_SYS_DEVICE_INFO_RESPONSE_LEN
 14

	)

61 
	#MT_NV_ITEM_MAX_LENGTH
 250

	)

66 c⁄° 
uöt16
 
	gMT_SysOßlEvítId
 [] = {

67 
MT_SYS_OSAL_EVENT_0
,

68 
MT_SYS_OSAL_EVENT_1
,

69 
MT_SYS_OSAL_EVENT_2
,

70 
MT_SYS_OSAL_EVENT_3


74 
	mGPIO_DIR
,

75 
	mGPIO_TRI
,

76 
	mGPIO_SET
,

77 
	mGPIO_CLR
,

78 
	mGPIO_TOG
,

79 
	mGPIO_GET
,

80 
	mGPIO_HiD
 = 0x12

81 } 
	tGPIO_Op_t
;

83 
	#GPIO_MASK
 0x33

	)

88 
uöt16
 
HÆAdcRódVﬁège
();

89 
uöt16
 
HÆAdcRódTem≥øtuª
();

94 #i‡
deföed
 (
MT_SYS_FUNC
)

95 
MT_SysRe£t
(
uöt8
 *
pBuf
);

96 
MT_SysPög
();

97 
MT_SysVîsi⁄
();

98 
MT_SysSëExtAddr
(
uöt8
 *
pBuf
);

99 
MT_SysGëExtAddr
();

100 
MT_SysOßlNVWrôe
(
uöt8
 *
pBuf
);

101 
MT_SysOßlNVRód
(
uöt8
 *
pBuf
);

102 
MT_SysOßlSèπTimî
(
uöt8
 *
pBuf
);

103 
MT_SysOßlSt›Timî
(
uöt8
 *
pBuf
);

104 
MT_SysR™dom
();

105 
MT_SysAdcRód
(
uöt8
 *
pBuf
);

106 
MT_SysGpio
(
uöt8
 *
pBuf
);

107 
MT_SysGëDevi˚Info
(
uöt8
 *
pBuf
);

110 #i‡
deföed
 (
MT_SYS_FUNC
)

123 
uöt8
 
	$MT_SysComm™dPro˚ssög
(
uöt8
 *
pBuf
)

125 
uöt8
 
°©us
 = 
MT_RPC_SUCCESS
;

127 
pBuf
[
MT_RPC_POS_CMD1
])

129 
MT_SYS_RESET_REQ
:

130 
	`MT_SysRe£t
(
pBuf
);

133 
MT_SYS_PING
:

134 
	`MT_SysPög
();

137 
MT_SYS_VERSION
:

138 
	`MT_SysVîsi⁄
();

141 
MT_SYS_SET_EXTADDR
:

142 
	`MT_SysSëExtAddr
(
pBuf
);

145 
MT_SYS_GET_EXTADDR
:

146 
	`MT_SysGëExtAddr
();

149 
MT_SYS_OSAL_NV_READ
:

150 
	`MT_SysOßlNVRód
(
pBuf
);

153 
MT_SYS_OSAL_NV_WRITE
:

154 
	`MT_SysOßlNVWrôe
(
pBuf
);

157 
MT_SYS_OSAL_START_TIMER
:

158 
	`MT_SysOßlSèπTimî
(
pBuf
);

161 
MT_SYS_OSAL_STOP_TIMER
:

162 
	`MT_SysOßlSt›Timî
(
pBuf
);

165 
MT_SYS_RANDOM
:

166 
	`MT_SysR™dom
();

169 
MT_SYS_ADC_READ
:

170 
	`MT_SysAdcRód
(
pBuf
);

173 
MT_SYS_GPIO
:

174 
	`MT_SysGpio
(
pBuf
);

177 
MT_SYS_RESET_IND
:

182 
°©us
 = 
MT_RPC_ERR_COMMAND_ID
;

186  
°©us
;

187 
	}
}

197 
	$MT_SysRe£t
(
uöt8
 *
pBuf
)

199 ()
pBuf
;

200 
	`Sy°emRe£t
();

201 
	}
}

212 
	$MT_SysPög
()

214 
uöt16
 
tmp16
;

215 
uöt8
 
ªtAºay
[2];

218 
tmp16
 = 
MT_CAP_SYS
 | 
MT_CAP_MAC
 | 
MT_CAP_NWK
 | 
MT_CAP_AF
 | 
MT_CAP_ZDO
|

219 
MT_CAP_SAPI
 | 
MT_CAP_UTIL
 | 
MT_CAP_DEBUG
 | 
MT_CAP_APP
 | 
MT_CAP_ZOAD
;

222 
ªtAºay
[0] = 
	`LO_UINT16
–
tmp16
 );

223 
ªtAºay
[1] = 
	`HI_UINT16
–
tmp16
 );

226 
	`MT_BuûdAndSídZToﬁRe•⁄£
(((
uöt8
)
MT_RPC_CMD_SRSP
 | (uöt8)
MT_RPC_SYS_SYS
), 
MT_SYS_PING
,

227  (
tmp16
), 
ªtAºay
 );

228 
	}
}

239 
	$MT_SysVîsi⁄
()

241 
byã
 *
vîSå
 = (byã *)
MTVîsi⁄Såög
;

242 
uöt8
 
ª•Lí
 = (
MTVîsi⁄Såög
);

245 
	`MT_BuûdAndSídZToﬁRe•⁄£
(((
uöt8
)
MT_RPC_CMD_SRSP
 | (uöt8)
MT_RPC_SYS_SYS
), 
MT_SYS_VERSION
,

246 
ª•Lí
, 
vîSå
);

247 
	}
}

258 
	$MT_SysSëExtAddr
(
uöt8
 *
pBuf
)

260 
uöt8
 
ªtVÆue
 = 
ZFaûuª
;

261 
uöt8
 
cmdId
;

264 
cmdId
 = 
pBuf
[
MT_RPC_POS_CMD1
];

265 
pBuf
 +
MT_RPC_FRAME_HDR_SZ
;

267 i‡–
	`ZMacSëReq
(
ZMacExtAddr
, 
pBuf
Ë=
ZMacSuc˚ss
 )

269 
ªtVÆue
 = 
	`oßl_nv_wrôe
(
ZCD_NV_EXTADDR
, 0, 
Z_EXTADDR_LEN
, 
pBuf
);

273 
	`MT_BuûdAndSídZToﬁRe•⁄£
(((
uöt8
)
MT_RPC_CMD_SRSP
 | (uöt8)
MT_RPC_SYS_SYS
), 
cmdId
, 1, &
ªtVÆue
);

275 
	}
}

286 
	$MT_SysGëExtAddr
()

288 
uöt8
 
extAddr
[
Z_EXTADDR_LEN
];

290 
	`ZMacGëReq
–
ZMacExtAddr
, 
extAddr
 );

293 
	`MT_BuûdAndSídZToﬁRe•⁄£
(((
uöt8
)
MT_RPC_CMD_SRSP
 | (uöt8)
MT_RPC_SYS_SYS
), 
MT_SYS_GET_EXTADDR
,

294 
Z_EXTADDR_LEN
, 
extAddr
);

295 
	}
}

306 
	$MT_SysOßlNVRód
(
uöt8
 *
pBuf
)

308 
uöt16
 
nvId
;

309 
uöt8
 
nvIãmLí
=0, 
nvIãmOff£t
=0;

310 
uöt8
 *
pRëBuf
=
NULL
;

311 
uöt8
 
ª•Lí
, 
cmdId
;

314 
cmdId
 = 
pBuf
[
MT_RPC_POS_CMD1
];

315 
pBuf
 +
MT_RPC_FRAME_HDR_SZ
;

318 
nvId
 = 
	`BUILD_UINT16
(
pBuf
[0],ÖBuf[1]);

319 
pBuf
 +(
uöt16
);

322 
nvIãmOff£t
 = *
pBuf
;

324 
nvIãmLí
 = 
	`oßl_nv_ôem_Àn
(
nvId
);

327 i‡(
nvIãmLí
 > 
MT_NV_ITEM_MAX_LENGTH
)

329 
nvIãmLí
 = 
MT_NV_ITEM_MAX_LENGTH
;

332 i‡((
nvIãmLí
 > 0Ë&& (“vIãmLí - 
nvIãmOff£t
) > 0))

334 
ª•Lí
 = 
nvIãmLí
 - 
nvIãmOff£t
 + 2;

338 
ª•Lí
 = 2;

341 
pRëBuf
 = 
	`oßl_mem_Æloc
(
ª•Lí
);

343 i‡(
pRëBuf
 !
NULL
)

345 
	`oßl_mem£t
(
pRëBuf
, 0, 
ª•Lí
);

348 
pRëBuf
[0] = 
ZFaûuª
;

350 i‡(
ª•Lí
 > 2)

352 i‡(((
	`oßl_nv_ªad
–
nvId
, (
uöt16
)
nvIãmOff£t
, (uöt16)
nvIãmLí
, &
pRëBuf
[2])Ë=
ZSUCCESS
Ë&& (
ª•Lí
 > 2))

354 
pRëBuf
[0] = 
ZSuc˚ss
;

356 
pRëBuf
[1] = 
nvIãmLí
 - 
nvIãmOff£t
;

360 
pRëBuf
[1] = 0;

364 
	`MT_BuûdAndSídZToﬁRe•⁄£
(((
uöt8
)
MT_RPC_CMD_SRSP
 | (uöt8)
MT_RPC_SYS_SYS
), 
cmdId
, 
ª•Lí
, 
pRëBuf
 );

366 
	`oßl_mem_‰ì
(
pRëBuf
);

370 
	}
}

381 
	$MT_SysOßlNVWrôe
(
uöt8
 *
pBuf
)

383 
uöt16
 
nvId
;

384 
uöt8
 
nvIãmLí
=0, 
nvIãmOff£t
=0;

385 
uöt8
 
ªtVÆue
, 
cmdId
;

388 
cmdId
 = 
pBuf
[
MT_RPC_POS_CMD1
];

389 
pBuf
 +
MT_RPC_FRAME_HDR_SZ
;

392 
nvId
 = 
	`BUILD_UINT16
(
pBuf
[0],ÖBuf[1]);

393 
pBuf
 +(
uöt16
);

396 
nvIãmOff£t
 = *
pBuf
++;

399 
nvIãmLí
 = *
pBuf
++;

402 
ªtVÆue
 = 
ZFaûuª
;

405 
	`zgSëIãm
–
nvId
, (
uöt16
)
nvIãmLí
, 
pBuf
 );

407 i‡((
	`oßl_nv_wrôe
–
nvId
, (
uöt16
)
nvIãmOff£t
, (uöt16)
nvIãmLí
, 
pBuf
)Ë=
ZSUCCESS
)

409 
ªtVÆue
 = 
ZSuc˚ss
;

413 
	`MT_BuûdAndSídZToﬁRe•⁄£
(((
uöt8
)
MT_RPC_CMD_SRSP
 | (uöt8)
MT_RPC_SYS_SYS
), 
cmdId
, 1, &
ªtVÆue
 );

414 
	}
}

425 
	$MT_SysOßlSèπTimî
(
uöt8
 *
pBuf
)

427 
uöt16
 
evítId
;

428 
uöt8
 
ªtVÆue
 = 
ZFaûuª
;

429 
uöt8
 
cmdId
;

432 
cmdId
 = 
pBuf
[
MT_RPC_POS_CMD1
];

433 
pBuf
 +
MT_RPC_FRAME_HDR_SZ
;

435 i‡(*
pBuf
 <= 3)

437 
evítId
 = (
uöt16
Ë
MT_SysOßlEvítId
[*
pBuf
];

438 
ªtVÆue
 = 
	`oßl_°¨t_timîEx
(
MT_TaskID
, 
evítId
, 
	`BUILD_UINT16
(
pBuf
[1],ÖBuf[2]));

442 
ªtVÆue
 = 
ZInvÆidP¨amëî
;

446 
	`MT_BuûdAndSídZToﬁRe•⁄£
(((
uöt8
)
MT_RPC_CMD_SRSP
 | (uöt8)
MT_RPC_SYS_SYS
), 
cmdId
, 1, &
ªtVÆue
);

447 
	}
}

458 
	$MT_SysOßlSt›Timî
(
uöt8
 *
pBuf
)

460 
uöt16
 
evítId
;

461 
uöt8
 
ªtVÆue
 = 
ZFaûuª
;

462 
uöt8
 
cmdId
;

465 
cmdId
 = 
pBuf
[
MT_RPC_POS_CMD1
];

466 
pBuf
 +
MT_RPC_FRAME_HDR_SZ
;

468 i‡(*
pBuf
 <= 3)

470 
evítId
 = (
uöt16
Ë
MT_SysOßlEvítId
[*
pBuf
];

471 
ªtVÆue
 = 
	`oßl_°›_timîEx
(
MT_TaskID
, 
evítId
);

475 
ªtVÆue
 = 
ZInvÆidP¨amëî
;

479 
	`MT_BuûdAndSídZToﬁRe•⁄£
(((
uöt8
)
MT_RPC_CMD_SRSP
 | (uöt8)
MT_RPC_SYS_SYS
), 
cmdId
, 1, &
ªtVÆue
 );

480 
	}
}

491 
	$MT_SysR™dom
()

493 
uöt16
 
øndVÆue
 = 
	`Onbﬂrd_ønd
();

494 
uöt8
 
ªtAºay
[2];

496 
ªtAºay
[0] = 
	`LO_UINT16
(
øndVÆue
);

497 
ªtAºay
[1] = 
	`HI_UINT16
(
øndVÆue
);

500 
	`MT_BuûdAndSídZToﬁRe•⁄£
(((
uöt8
)
MT_RPC_CMD_SRSP
 | (uöt8)
MT_RPC_SYS_SYS
), 
MT_SYS_RANDOM
, 2, 
ªtAºay
 );

501 
	}
}

512 
	$MT_SysAdcRód
(
uöt8
 *
pBuf
)

514 
uöt8
 
ch™√l
, 
ªsﬁuti⁄
;

515 
uöt16
 
ãmpVÆue
;

516 
uöt8
 
ªtAºay
[2];

517 
uöt8
 
cmdId
;

520 
cmdId
 = 
pBuf
[
MT_RPC_POS_CMD1
];

521 
pBuf
 +
MT_RPC_FRAME_HDR_SZ
;

524 
ch™√l
 = *
pBuf
++;

527 
ªsﬁuti⁄
 = *
pBuf
++;

530 
ch™√l
)

533 
HAL_ADC_CHANNEL_0
:

534 
HAL_ADC_CHANNEL_1
:

535 
HAL_ADC_CHANNEL_2
:

536 
HAL_ADC_CHANNEL_3
:

537 
HAL_ADC_CHANNEL_4
:

538 
HAL_ADC_CHANNEL_5
:

539 
HAL_ADC_CHANNEL_6
:

540 
HAL_ADC_CHANNEL_7
:

541 
ãmpVÆue
 = 
	`HÆAdcRód
(
ch™√l
, 
ªsﬁuti⁄
);

545 (
HAL_ADC_CHANNEL_TEMP
):

546 
ãmpVÆue
 = 
	`HÆAdcRód
(
HAL_ADC_CHANNEL_TEMP
, 
HAL_ADC_RESOLUTION_14
);

550 (
HAL_ADC_CHANNEL_VDD
):

551 
ãmpVÆue
 = 
	`HÆAdcRód
(
HAL_ADC_CHANNEL_VDD
, 
HAL_ADC_RESOLUTION_14
);

558 
ªtAºay
[0] = 
	`LO_UINT16
(
ãmpVÆue
);

559 
ªtAºay
[1] = 
	`HI_UINT16
(
ãmpVÆue
);

562 
	`MT_BuûdAndSídZToﬁRe•⁄£
(((
uöt8
)
MT_RPC_CMD_SRSP
 | (uöt8)
MT_RPC_SYS_SYS
), 
cmdId
, 2, 
ªtAºay
);

563 
	}
}

574 
	$MT_SysGpio
(
uöt8
 *
pBuf
)

576 
uöt8
 
cmd
, 
vÆ
;

578 
cmd
 = 
pBuf
[
MT_RPC_POS_CMD1
];

579 
pBuf
 +
MT_RPC_FRAME_HDR_SZ
;

583 
	`MT_BuûdAndSídZToﬁRe•⁄£
(((
uöt8
)
MT_RPC_CMD_SRSP
 | (uöt8)
MT_RPC_SYS_SYS
), 
cmd
, 1, &
vÆ
);

584 
	}
}

602 
	$MT_SysRe£tInd
()

604 
uöt8
 
ªtAºay
[6];

606 
ªtAºay
[0] = 
	`Re£tRós⁄
();

607 
ªtAºay
[1] = 0x00;

608 
ªtAºay
[2] = 0x00;

609 
ªtAºay
[3] = 0x00;

610 
ªtAºay
[4] = 0x00;

611 
ªtAºay
[5] = 0x00;

614 
	`MT_BuûdAndSídZToﬁRe•⁄£
(((
uöt8
)
MT_RPC_CMD_AREQ
 | (uöt8)
MT_RPC_SYS_SYS
), 
MT_SYS_RESET_IND
,

615 (
ªtAºay
),ÑetArray);

616 
	}
}

628 
	$MT_SysOßlTimîExpúed
(
uöt8
 
Id
)

630 
uöt8
 
ªtVÆue
;

631 
ªtVÆue
 = 
Id
;

632 
	`MT_BuûdAndSídZToﬁRe•⁄£
(((
uöt8
)
MT_RPC_CMD_AREQ
 | (uöt8)
MT_RPC_SYS_SYS
), 
MT_SYS_OSAL_TIMER_EXPIRED
, 1, &
ªtVÆue
);

633 
	}
}

	@Components/mt/MT_SYS.h

39 #i‚de‡
MT_SYS_H


40 
	#MT_SYS_H


	)

42 #ifde‡
__˝lu•lus


51 
	#MT_SYS_OSAL_EVENT_0
 0x0800

	)

52 
	#MT_SYS_OSAL_EVENT_1
 0x0400

	)

53 
	#MT_SYS_OSAL_EVENT_2
 0x0200

	)

54 
	#MT_SYS_OSAL_EVENT_3
 0x0100

	)

55 
	#MT_SYS_OSAL_EVENT_MASK
 
MT_SYS_OSAL_EVENT_0
 | 
MT_SYS_OSAL_EVENT_1
 | 
MT_SYS_OSAL_EVENT_2
 | 
MT_SYS_OSAL_EVENT_3


	)

61 #i‡
deföed
 (
MT_SYS_FUNC
)

65 
uöt8
 
MT_SysComm™dPro˚ssög
(uöt8 *
pBuf
);

71 
MT_SysRe£tInd
( );

76 
MT_SysOßlTimîExpúed
(
uöt8
 
Id
);

78 #ifde‡
__˝lu•lus


	@Components/mt/MT_TASK.c

43 
	~"ZComDef.h
"

44 
	~"MT_TASK.h
"

45 
	~"MT.h
"

46 
	~"MT_DEBUG.h
"

47 
	~"MT_UART.h
"

48 
	~"MT_SYS.h
"

50 
	~"hÆ_u¨t.h
"

52 
	~"OSAL_Mem‹y.h
"

57 
MT_Pro˚ssIncomögComm™d
–
mtOSALSîülD©a_t
 *
msg
 );

73 
	$MT_TaskInô
(
uöt8
 
èsk_id
)

76 
	`MT_Inô
(
èsk_id
);

79 
	`MT_U¨tInô
();

82 
	`MT_U¨tRegi°îTaskID
 (
èsk_id
);

84 
	}
}

96 
UINT16
 
	$MT_Pro˚ssEvít
(
uöt8
 
èsk_id
, 
uöt16
 
evíts
)

98 
uöt8
 *
msg_±r
;

100 ()
èsk_id
;

103 i‡–
evíts
 & 
SYS_EVENT_MSG
 )

105  (
msg_±r
 = 
	`oßl_msg_ª˚ive
–
MT_TaskID
 )) )

107 
	`MT_Pro˚ssIncomögComm™d
((
mtOSALSîülD©a_t
 *)
msg_±r
);

111  (
evíts
 ^ 
SYS_EVENT_MSG
);

114 i‡–
evíts
 & 
MT_ZTOOL_SERIAL_RCV_BUFFER_FULL
 )

117  (
evíts
 ^ 
MT_ZTOOL_SERIAL_RCV_BUFFER_FULL
);

121 #i‡
deföed
 
MT_SYS_FUNC


122 i‡–
evíts
 & (
MT_SYS_OSAL_EVENT_MASK
))

124 i‡(
evíts
 & 
MT_SYS_OSAL_EVENT_0
)

126 
	`MT_SysOßlTimîExpúed
(0x00);

127 
evíts
 ^
MT_SYS_OSAL_EVENT_0
;

130 i‡(
evíts
 & 
MT_SYS_OSAL_EVENT_1
)

132 
	`MT_SysOßlTimîExpúed
(0x01);

133 
evíts
 ^
MT_SYS_OSAL_EVENT_1
;

136 i‡(
evíts
 & 
MT_SYS_OSAL_EVENT_2
)

138 
	`MT_SysOßlTimîExpúed
(0x02);

139 
evíts
 ^
MT_SYS_OSAL_EVENT_2
;

142 i‡(
evíts
 & 
MT_SYS_OSAL_EVENT_3
)

144 
	`MT_SysOßlTimîExpúed
(0x03);

145 
evíts
 ^
MT_SYS_OSAL_EVENT_3
;

148  
evíts
;

155 
	}
}

168 
	$MT_Pro˚ssIncomögComm™d
–
mtOSALSîülD©a_t
 *
msg
 )

170 
byã
 
dóŒoˇã
;

171 
byã
 *
msg_±r
;

172 
byã
 
Àn
;

175 
msg_±r
 = 
msg
->msg;

177 
dóŒoˇã
 = 
åue
;

180  
msg
->
hdr
.
evít
 )

182 
CMD_SERIAL_MSG
:

183 
	`MT_Pro˚ssIncomög
(
msg
->msg);

186 
CMD_DEBUG_MSG
:

187 
	`MT_Pro˚ssDebugMsg
–(
mtDebugMsg_t
 *)
msg
 );

190 
CMD_DEBUG_STR
:

191 
	`MT_Pro˚ssDebugSå
–(
mtDebugSå_t
 *)
msg
 );

194 
CB_FUNC
:

201 
Àn
 = 
SPI_0DATA_MSG_LEN
 + 
msg_±r
[
DATALEN_FIELD
];

207 
msg_±r
[
Àn
-1] = 
	`MT_U¨tCÆcFCS
(msg_±∏+ 1, (
byã
)(len-2));

209 #ifde‡
MT_UART_DEFAULT_PORT


210 
	`HÆUARTWrôe
 ( 
MT_UART_DEFAULT_PORT
, 
msg_±r
, 
Àn
 );

214 #i‡!
	`deföed
 ( 
NONWK
 )

215 
MT_SYS_APP_RSP_MSG
:

216 
Àn
 = 
SPI_0DATA_MSG_LEN
 + 
msg_±r
[
DATALEN_FIELD
];

217 
	`MTPro˚ssAµR•Msg
–
msg_±r
, 
Àn
 );

225 i‡–
dóŒoˇã
 )

227 
	`oßl_msg_dóŒoˇã
–(
uöt8
 *)
msg
 );

229 
	}
}

231 #ifde‡
MT_TASK


242 
uöt8
 *
	$MT_Tøn•‹tAŒoc
(
uöt8
 
cmd0
, uöt8 
Àn
)

244 
uöt8
 *
p
;

246 ()
cmd0
;

249 
p
 = 
	`oßl_msg_Æloˇã
(
Àn
 + 
SPI_0DATA_MSG_LEN
);

251 i‡(
p
)

253 
p
++;

254  
p
;

258  
NULL
;

260 
	}
}

271 
	$MT_Tøn•‹tSíd
(
uöt8
 *
pBuf
)

273 
uöt8
 *
msgPå
;

274 
uöt8
 
d©aLí
 = 
pBuf
[0];

277 
msgPå
 = 
pBuf
-1;

280 
msgPå
[0] = 
MT_UART_SOF
;

283 
msgPå
[
SPI_0DATA_MSG_LEN
 - 1 + 
d©aLí
] = 
	`MT_U¨tCÆcFCS
 (
pBuf
, (3 + dataLen));

286 #ifde‡
MT_UART_DEFAULT_PORT


287 
	`HÆUARTWrôe
(
MT_UART_DEFAULT_PORT
, 
msgPå
, 
d©aLí
 + 
SPI_0DATA_MSG_LEN
);

291 
	`oßl_msg_dóŒoˇã
(
msgPå
);

292 
	}
}

	@Components/mt/MT_TASK.h

40 #i‚de‡
MT_TASK_H


41 
	#MT_TASK_H


	)

43 #ifde‡
__˝lu•lus


59 
MT_TaskInô
(
uöt8
 
èsk_id
);

64 
UINT16
 
MT_Pro˚ssEvít
(
uöt8
 
èsk_id
, 
uöt16
 
evít
);

67 #ifde‡
__˝lu•lus


	@Components/mt/MT_UART.c

43 
	~"ZComDef.h
"

44 
	~"OSAL.h
"

45 
	~"hÆ_u¨t.h
"

46 
	~"MT.h
"

47 
	~"MT_UART.h
"

48 
	~"OSAL_Mem‹y.h
"

59 
	#SOP_STATE
 0x00

	)

60 
	#CMD_STATE1
 0x01

	)

61 
	#CMD_STATE2
 0x02

	)

62 
	#LEN_STATE
 0x03

	)

63 
	#DATA_STATE
 0x04

	)

64 
	#FCS_STATE
 0x05

	)

70 
byã
 
	gAµ_TaskID
;

73 
uöt8
 
	g°©e
;

74 
uöt8
 
	gCMD_Tokí
[2];

75 
uöt8
 
	gLEN_Tokí
;

76 
uöt8
 
	gFSC_Tokí
;

77 
mtOSALSîülD©a_t
 *
	gpMsg
;

78 
uöt8
 
	gãmpD©aLí
;

80 #i‡
deföed
 (
ZAPP_P1
Ë|| deföed (
ZAPP_P2
)

81 
uöt16
 
	gMT_U¨tMaxZAµBufLí
;

82 
boﬁ
 
	gMT_U¨tZAµRxSètus
;

99 
	$MT_U¨tInô
 ()

101 
hÆUARTCfg_t
 
u¨tC⁄fig
;

104 
Aµ_TaskID
 = 0;

107 
u¨tC⁄fig
.
c⁄figuªd
 = 
TRUE
;

108 
u¨tC⁄fig
.
baudR©e
 = 
MT_UART_DEFAULT_BAUDRATE
;

109 
u¨tC⁄fig
.
ÊowC⁄åﬁ
 = 
MT_UART_DEFAULT_OVERFLOW
;

110 
u¨tC⁄fig
.
ÊowC⁄åﬁThªshﬁd
 = 
MT_UART_DEFAULT_THRESHOLD
;

111 
u¨tC⁄fig
.
rx
.
maxBufSize
 = 
MT_UART_DEFAULT_MAX_RX_BUFF
;

112 
u¨tC⁄fig
.
tx
.
maxBufSize
 = 
MT_UART_DEFAULT_MAX_TX_BUFF
;

113 
u¨tC⁄fig
.
idÀTimeout
 = 
MT_UART_DEFAULT_IDLE_TIMEOUT
;

114 
u¨tC⁄fig
.
ötE«bÀ
 = 
TRUE
;

115 #i‡
	`deföed
 (
ZTOOL_P1
Ë|| deföed (
ZTOOL_P2
)

116 
u¨tC⁄fig
.
ˇŒBackFunc
 = 
MT_U¨tPro˚ssZToﬁD©a
;

117 #ñi‡
	`deföed
 (
ZAPP_P1
Ë|| deföed (
ZAPP_P2
)

118 
u¨tC⁄fig
.
ˇŒBackFunc
 = 
MT_U¨tPro˚ssZAµD©a
;

120 
u¨tC⁄fig
.
ˇŒBackFunc
 = 
NULL
;

124 #i‡
	`deföed
 (
MT_UART_DEFAULT_PORT
)

125 
	`HÆUARTO≥n
 (
MT_UART_DEFAULT_PORT
, &
u¨tC⁄fig
);

128 ()
u¨tC⁄fig
;

132 #i‡
	`deföed
 (
ZAPP_P1
Ë|| deföed (
ZAPP_P2
)

134 
MT_U¨tMaxZAµBufLí
 = 1;

135 
MT_U¨tZAµRxSètus
 = 
MT_UART_ZAPP_RX_READY
;

138 
	}
}

150 
	$MT_U¨tRegi°îTaskID
–
byã
 
èskID
 )

152 
Aµ_TaskID
 = 
èskID
;

153 
	}
}

166 
byã
 
	$MT_U¨tCÆcFCS
–
uöt8
 *
msg_±r
, uöt8 
Àn
 )

168 
byã
 
x
;

169 
byã
 
x‹Resu…
;

171 
x‹Resu…
 = 0;

173  
x
 = 0; x < 
Àn
; x++, 
msg_±r
++ )

174 
x‹Resu…
 = x‹Resu… ^ *
msg_±r
;

176  ( 
x‹Resu…
 );

177 
	}
}

195 
	$MT_U¨tPro˚ssZToﬁD©a
 ( 
uöt8
 
p‹t
, uöt8 
evít
 )

197 
uöt8
 
ch
;

198 
uöt8
 
byãsInRxBuf„r
;

200 ()
evít
;

202 
	`HÆ_UART_RxBufLí
(
p‹t
))

204 
	`HÆUARTRód
 (
p‹t
, &
ch
, 1);

206 
°©e
)

208 
SOP_STATE
:

209 i‡(
ch
 =
MT_UART_SOF
)

210 
°©e
 = 
LEN_STATE
;

213 
LEN_STATE
:

214 
LEN_Tokí
 = 
ch
;

216 
ãmpD©aLí
 = 0;

219 
pMsg
 = (
mtOSALSîülD©a_t
 *)
	`oßl_msg_Æloˇã
(  ( mtOSALSerialData_t ) +

220 
MT_RPC_FRAME_HDR_SZ
 + 
LEN_Tokí
 );

222 i‡(
pMsg
)

225 
pMsg
->
hdr
.
evít
 = 
CMD_SERIAL_MSG
;

226 
pMsg
->
msg
 = (
uöt8
*)(pMsg+1);

227 
pMsg
->
msg
[
MT_RPC_POS_LEN
] = 
LEN_Tokí
;

228 
°©e
 = 
CMD_STATE1
;

232 
°©e
 = 
SOP_STATE
;

237 
CMD_STATE1
:

238 
pMsg
->
msg
[
MT_RPC_POS_CMD0
] = 
ch
;

239 
°©e
 = 
CMD_STATE2
;

242 
CMD_STATE2
:

243 
pMsg
->
msg
[
MT_RPC_POS_CMD1
] = 
ch
;

245 i‡(
LEN_Tokí
)

247 
°©e
 = 
DATA_STATE
;

251 
°©e
 = 
FCS_STATE
;

255 
DATA_STATE
:

258 
pMsg
->
msg
[
MT_RPC_FRAME_HDR_SZ
 + 
ãmpD©aLí
++] = 
ch
;

261 
byãsInRxBuf„r
 = 
	`HÆ_UART_RxBufLí
(
p‹t
);

264 i‡(
byãsInRxBuf„r
 <
LEN_Tokí
 - 
ãmpD©aLí
)

266 
	`HÆUARTRód
 (
p‹t
, &
pMsg
->
msg
[
MT_RPC_FRAME_HDR_SZ
 + 
ãmpD©aLí
], 
byãsInRxBuf„r
);

267 
ãmpD©aLí
 +
byãsInRxBuf„r
;

271 
	`HÆUARTRód
 (
p‹t
, &
pMsg
->
msg
[
MT_RPC_FRAME_HDR_SZ
 + 
ãmpD©aLí
], 
LEN_Tokí
 -ÅempDataLen);

272 
ãmpD©aLí
 +(
LEN_Tokí
 -ÅempDataLen);

276 i‡–
ãmpD©aLí
 =
LEN_Tokí
 )

277 
°©e
 = 
FCS_STATE
;

281 
FCS_STATE
:

283 
FSC_Tokí
 = 
ch
;

286 i‡((
	`MT_U¨tCÆcFCS
 ((
uöt8
*)&
pMsg
->
msg
[0], 
MT_RPC_FRAME_HDR_SZ
 + 
LEN_Tokí
Ë=
FSC_Tokí
))

288 
	`oßl_msg_£nd
–
Aµ_TaskID
, (
byã
 *)
pMsg
 );

293 
	`oßl_msg_dóŒoˇã
 ( (
uöt8
 *)
pMsg
 );

297 
°©e
 = 
SOP_STATE
;

305 
	}
}

307 #i‡
deföed
 (
ZAPP_P1
Ë|| deföed (
ZAPP_P2
)

323 
	$MT_U¨tPro˚ssZAµD©a
 ( 
uöt8
 
p‹t
, uöt8 
evít
 )

326 
oßl_evít_hdr_t
 *
msg_±r
;

327 
uöt16
 
Àngth
 = 0;

328 
uöt16
 
rxBufLí
 = 
	`HÆ_UART_RxBufLí
(
MT_UART_DEFAULT_PORT
);

334 i‡((
MT_U¨tMaxZAµBufLí
 !0Ë&& (MT_U¨tMaxZAµBufLí <
rxBufLí
))

336 
Àngth
 = 
MT_U¨tMaxZAµBufLí
;

340 
Àngth
 = 
rxBufLí
;

344 i‡(
evít
 =
HAL_UART_TX_FULL
)

350 i‡(
evít
 & ( 
HAL_UART_RX_FULL
 | 
HAL_UART_RX_ABOUT_FULL
 | 
HAL_UART_RX_TIMEOUT
))

352 i‡–
Aµ_TaskID
 )

358 i‡((
MT_U¨tZAµRxSètus
 =
MT_UART_ZAPP_RX_READY
 ) && (
Àngth
 != 0))

361 
	`MT_U¨tAµFlowC⁄åﬁ
 (
MT_UART_ZAPP_RX_NOT_READY
);

364 
msg_±r
 = (
oßl_evít_hdr_t
 *)
	`oßl_msg_Æloˇã
–
Àngth
 + (osal_event_hdr_t) );

365 i‡–
msg_±r
 )

367 
msg_±r
->
evít
 = 
SPI_INCOMING_ZAPP_DATA
;

368 
msg_±r
->
°©us
 = 
Àngth
;

371 
	`HÆUARTRód
–
MT_UART_DEFAULT_PORT
, (
uöt8
 *)(
msg_±r
 + 1), 
Àngth
 );

374 
	`oßl_msg_£nd
–
Aµ_TaskID
, (
uöt8
 *)
msg_±r
 );

379 
	}
}

391 
	$MT_U¨tZAµBuf„rLígthRegi°î
 ( 
uöt16
 
maxLí
 )

394 i‡(
maxLí
 <
MT_UART_DEFAULT_MAX_RX_BUFF
)

395 
MT_U¨tMaxZAµBufLí
 = 
maxLí
;

397 
MT_U¨tMaxZAµBufLí
 = 1;

398 
	}
}

410 
	$MT_U¨tAµFlowC⁄åﬁ
 ( 
boﬁ
 
°©us
 )

414 i‡(
°©us
 !
MT_U¨tZAµRxSètus
 )

416 
MT_U¨tZAµRxSètus
 = 
°©us
;

420 i‡(
°©us
 =
MT_UART_ZAPP_RX_READY
)

422 
	`MT_U¨tPro˚ssZAµD©a
 (
MT_UART_DEFAULT_PORT
, 
HAL_UART_RX_TIMEOUT
 );

425 
	}
}

	@Components/mt/MT_UART.h

39 #i‚de‡
MT_UART_H


40 
	#MT_UART_H


	)

42 #ifde‡
__˝lu•lus


50 
	~"Onbﬂrd.h
"

51 
	~"OSAL.h
"

58 
	#MT_UART_SOF
 0xFE

	)

61 
	#MT_UART_FRAME_OVHD
 2

	)

64 #i‡
deföed
 (
ZTOOL_P1
Ë|| deföed (
ZTOOL_P2
)

65 
	#MT_UART_DEFAULT_PORT
 
ZTOOL_PORT


	)

66 #ñi‡
deföed
 (
ZAPP_P1
Ë|| deföed (
ZAPP_P2
)

67 
	#MT_UART_DEFAULT_PORT
 
ZAPP_PORT


	)

70 #i‡!
deföed
–
MT_UART_DEFAULT_OVERFLOW
 )

71 
	#MT_UART_DEFAULT_OVERFLOW
 
FALSE


	)

74 
	#MT_UART_DEFAULT_BAUDRATE
 
HAL_UART_BR_38400


	)

75 
	#MT_UART_DEFAULT_THRESHOLD
 
MT_UART_THRESHOLD


	)

76 
	#MT_UART_DEFAULT_MAX_RX_BUFF
 
MT_UART_RX_BUFF_MAX


	)

77 #i‡!
deföed
–
MT_UART_DEFAULT_MAX_TX_BUFF
 )

78 
	#MT_UART_DEFAULT_MAX_TX_BUFF
 
MT_UART_TX_BUFF_MAX


	)

80 
	#MT_UART_DEFAULT_IDLE_TIMEOUT
 
MT_UART_IDLE_TIMEOUT


	)

83 
	#MT_UART_ZAPP_RX_NOT_READY
 0x00

	)

84 
	#MT_UART_ZAPP_RX_READY
 0x01

	)

88 
oßl_evít_hdr_t
 
hdr
;

89 
uöt8
 *
msg
;

90 } 
	tmtOSALSîülD©a_t
;

95 
MT_U¨tInô
 ();

100 
MT_U¨tPro˚ssZToﬁD©a
 ( 
uöt8
 
p‹t
, uöt8 
èskId
 );

105 
MT_U¨tPro˚ssZAµD©a
 ( 
uöt8
 
p‹t
, uöt8 
evít
 );

110 
uöt8
 
MT_U¨tCÆcFCS
–uöt8 *
msg_±r
, uöt8 
Àngth
 );

115 
MT_U¨tRegi°îTaskID
–
uöt8
 
èskID
 );

120 
MT_U¨tZAµBuf„rLígthRegi°î
 ( 
uöt16
 
maxLí
 );

125 
MT_U¨tAµFlowC⁄åﬁ
 ( 
uöt8
 
°©us
 );

	@Components/mt/MT_UTIL.c

43 
	~"ZComDef.h
"

45 
	~"OnBﬂrd.h
"

46 
	~"hÆ_key.h
"

47 
	~"hÆ_Àd.h
"

48 
	~"OSAL_Nv.h
"

49 
	~"NLMEDE.h
"

50 
	~"ZDAµ.h
"

51 
	~"MT.h
"

52 
	~"MT_UTIL.h
"

53 
	~"MT_ZDO.h
"

54 
	~"MT_SAPI.h
"

55 
	~"MT_NWK.h
"

56 
	~"MT_AF.h
"

57 
	~"MT_MAC.h
"

62 
	#MT_UTIL_DEVICE_INFO_RESPONSE_LEN
 14

	)

67 #i‡
deföed
 (
MT_UTIL_FUNC
)

68 
MT_UtûGëDevi˚Info
();

69 
MT_UtûGëNvInfo
();

70 
MT_UtûSëP™ID
(
uöt8
 *
pBuf
);

71 
MT_UtûSëCh™√ls
(
uöt8
 *
pBuf
);

72 
MT_UtûSëSecLevñ
(
uöt8
 *
pBuf
);

73 
MT_UtûSëPªCfgKey
(
uöt8
 *
pBuf
);

74 
MT_UtûCÆlbackSub
(
uöt8
 *
pD©a
);

75 
MT_UtûKeyEvít
(
uöt8
 *
pBuf
);

76 
MT_UtûHóπBót
(
uöt8
 *
pBuf
);

77 
MT_UtûTimeAlive
();

78 
MT_UtûLedC⁄åﬁ
(
uöt8
 *
pBuf
);

81 #i‡
deföed
 (
MT_UTIL_FUNC
)

91 
uöt8
 
	$MT_UtûComm™dPro˚ssög
(
uöt8
 *
pBuf
)

93 
uöt8
 
°©us
 = 
MT_RPC_SUCCESS
;

95 
pBuf
[
MT_RPC_POS_CMD1
])

97 
MT_UTIL_GET_DEVICE_INFO
:

98 
	`MT_UtûGëDevi˚Info
();

101 
MT_UTIL_GET_NV_INFO
:

102 
	`MT_UtûGëNvInfo
();

105 
MT_UTIL_SET_PANID
:

106 
	`MT_UtûSëP™ID
(
pBuf
);

109 
MT_UTIL_SET_CHANNELS
:

110 
	`MT_UtûSëCh™√ls
(
pBuf
);

113 
MT_UTIL_SET_SECLEVEL
:

114 
	`MT_UtûSëSecLevñ
(
pBuf
);

117 
MT_UTIL_SET_PRECFGKEY
:

118 
	`MT_UtûSëPªCfgKey
(
pBuf
);

121 
MT_UTIL_CALLBACK_SUB_CMD
:

122 
	`MT_UtûCÆlbackSub
(
pBuf
);

125 
MT_UTIL_KEY_EVENT
:

126 #i‡(
deföed
 
HAL_KEY
Ë&& (HAL_KEY =
TRUE
)

127 
	`MT_UtûKeyEvít
(
pBuf
);

131 
MT_UTIL_LED_CONTROL
:

132 #i‡(
deföed
 
HAL_LED
Ë&& (HAL_LED =
TRUE
)

133 
	`MT_UtûLedC⁄åﬁ
(
pBuf
);

137 
MT_UTIL_HEARTBEAT
:

138 
	`MT_UtûHóπBót
(
pBuf
);

141 
MT_UTIL_TIME_ALIVE
:

142 
	`MT_UtûTimeAlive
();

146 
°©us
 = 
MT_RPC_ERR_COMMAND_ID
;

150  
°©us
;

151 
	}
}

162 
	$MT_UtûGëDevi˚Info
()

164 
uöt8
 *
buf
;

165 
uöt8
 *
pBuf
;

166 
uöt8
 
bufLí
 = 
MT_UTIL_DEVICE_INFO_RESPONSE_LEN
;

167 #i‡
	`deföed
–
RTR_NWK
 ) && !deföed–
NONWK
 )

168 
uöt8
 
assocC¡
 = 0;

170 
uöt16
 *
assocLi°
 = 
NULL
;

172 #i‡
	`deföed
–
RTR_NWK
 ) && !deföed–
NONWK
 )

173 
assocLi°
 = 
	`AssocMakeLi°
–&
assocC¡
 );

174 
bufLí
 +(
assocC¡
 * (
uöt16
));

177 
buf
 = 
	`oßl_mem_Æloc
–
bufLí
 );

178 i‡–
buf
 )

180 
pBuf
 = 
buf
;

182 *
pBuf
++ = 
ZSUCCESS
;

184 
	`oßl_nv_ªad
–
ZCD_NV_EXTADDR
, 0, 
Z_EXTADDR_LEN
, 
pBuf
 );

185 
pBuf
 +
Z_EXTADDR_LEN
;

187 #i‡
	`deföed
–
NONWK
 )

189 *
pBuf
++ = 0;

190 *
pBuf
++ = 0;

191 *
pBuf
++ = 0;

192 *
pBuf
++ = 0;

193 *
pBuf
 = 0;

196 
uöt16
 
sh‹tAddr
 = 
	`NLME_GëSh‹tAddr
();

197 *
pBuf
++ = 
	`LO_UINT16
–
sh‹tAddr
 );

198 *
pBuf
++ = 
	`HI_UINT16
–
sh‹tAddr
 );

202 *
pBuf
++ = 
ZSTACK_DEVICE_BUILD
;

205 *
pBuf
++ = (
uöt8
)
devSèã
;

207 #i‡
	`deföed
–
RTR_NWK
 )

208 *
pBuf
++ = 
assocC¡
;

210 i‡–
assocC¡
 )

212 
uöt8
 
x
;

213 
uöt16
 *
puöt16
 = 
assocLi°
;

215  
x
 = 0; x < 
assocC¡
; x++, 
puöt16
++ )

217 *
pBuf
++ = 
	`LO_UINT16
–*
puöt16
 );

218 *
pBuf
++ = 
	`HI_UINT16
–*
puöt16
 );

222 *
pBuf
++ = 0;

226 
	`MT_BuûdAndSídZToﬁRe•⁄£
–((
uöt8
)
MT_RPC_CMD_SRSP
 | (uöt8)
MT_RPC_SYS_UTIL
),

227 
MT_UTIL_GET_DEVICE_INFO
,

228 
bufLí
, 
buf
 );

230 
	`oßl_mem_‰ì
–
buf
 );

233 i‡–
assocLi°
 )

235 
	`oßl_mem_‰ì
–
assocLi°
 );

237 
	}
}

248 
	$MT_UtûGëNvInfo
()

250 
uöt8
 
Àn
;

251 
uöt8
 
°©
;

252 
uöt8
 *
buf
;

253 
uöt8
 *
pBuf
;

254 
uöt16
 
tmp16
;

255 
uöt32
 
tmp32
;

261 
Àn
 = 1 + 
Z_EXTADDR_LEN
 + 4 + 2 + 1 + 
SEC_KEY_LEN
;

263 
buf
 = 
	`oßl_mem_Æloc
–
Àn
 );

264 i‡–
buf
 )

267 
	`oßl_mem£t
–
buf
, 0xFF, 
Àn
 );

270 
pBuf
 = 
buf
 + 1;

273 
°©
 = 
	`oßl_nv_ªad
–
ZCD_NV_EXTADDR
, 0, 
Z_EXTADDR_LEN
, 
pBuf
 );

274 i‡–
°©
 ) stat = 0x01;

275 
pBuf
 +
Z_EXTADDR_LEN
;

278 i‡–
	`oßl_nv_ªad
–
ZCD_NV_CHANLIST
, 0, –
tmp32
 ), &tmp32 ) )

279 
°©
 |= 0x02;

282 
pBuf
[0] = 
	`BREAK_UINT32
–
tmp32
, 3 );

283 
pBuf
[1] = 
	`BREAK_UINT32
–
tmp32
, 2 );

284 
pBuf
[2] = 
	`BREAK_UINT32
–
tmp32
, 1 );

285 
pBuf
[3] = 
	`BREAK_UINT32
–
tmp32
, 0 );

287 
pBuf
 +–
tmp32
 );

290 i‡–
	`oßl_nv_ªad
–
ZCD_NV_PANID
, 0, –
tmp16
 ), &tmp16 ) )

291 
°©
 |= 0x04;

294 
pBuf
[0] = 
	`LO_UINT16
–
tmp16
 );

295 
pBuf
[1] = 
	`HI_UINT16
–
tmp16
 );

297 
pBuf
 +–
tmp16
 );

300 i‡–
	`oßl_nv_ªad
–
ZCD_NV_SECURITY_LEVEL
, 0, –
uöt8
 ), 
pBuf
++ ) )

301 
°©
 |= 0x08;

304 i‡–
	`oßl_nv_ªad
–
ZCD_NV_PRECFGKEY
, 0, 
SEC_KEY_LEN
, 
pBuf
 ) )

305 
°©
 |= 0x10;

308 *
buf
 = 
°©
;

310 
	`MT_BuûdAndSídZToﬁRe•⁄£
(((
uöt8
)
MT_RPC_CMD_SRSP
 | (uöt8)
MT_RPC_SYS_UTIL
), 
MT_UTIL_GET_NV_INFO
,

311 
Àn
, 
buf
 );

313 
	`oßl_mem_‰ì
–
buf
 );

315 
	}
}

326 
	$MT_UtûSëP™ID
(
uöt8
 *
pBuf
)

328 
uöt16
 
ãmp16
;

329 
uöt8
 
ªtVÆue
 = 
ZFaûuª
;

330 
uöt8
 
cmdId
;

333 
cmdId
 = 
pBuf
[
MT_RPC_POS_CMD1
];

334 
pBuf
 +
MT_RPC_FRAME_HDR_SZ
;

336 
ãmp16
 = 
	`BUILD_UINT16
(
pBuf
[0],ÖBuf[1]);

337 
pBuf
 +(
uöt16
);

339 
ªtVÆue
 = 
	`oßl_nv_wrôe
(
ZCD_NV_PANID
, 0, 
	`oßl_nv_ôem_Àn
–ZCD_NV_PANID ), &
ãmp16
);

342 
	`MT_BuûdAndSídZToﬁRe•⁄£
(((
uöt8
)
MT_RPC_CMD_SRSP
 | (uöt8)
MT_RPC_SYS_UTIL
), 
cmdId
, 1, &
ªtVÆue
);

343 
	}
}

354 
	$MT_UtûSëCh™√ls
(
uöt8
 *
pBuf
)

356 
uöt32
 
tmp32
;

357 
uöt8
 
ªtVÆue
 = 
ZFaûuª
;

358 
uöt8
 
cmdId
;

361 
cmdId
 = 
pBuf
[
MT_RPC_POS_CMD1
];

362 
pBuf
 +
MT_RPC_FRAME_HDR_SZ
;

364 
tmp32
 = 
	`BUILD_UINT32
(
pBuf
[0],ÖBuf[1],ÖBuf[2],ÖBuf[3]);

366 
ªtVÆue
 = 
	`oßl_nv_wrôe
(
ZCD_NV_CHANLIST
, 0, 
	`oßl_nv_ôem_Àn
–ZCD_NV_CHANLIST ), &
tmp32
);

369 
	`MT_BuûdAndSídZToﬁRe•⁄£
(((
uöt8
)
MT_RPC_CMD_SRSP
 | (uöt8)
MT_RPC_SYS_UTIL
), 
cmdId
, 1, &
ªtVÆue
);

370 
	}
}

381 
	$MT_UtûSëSecLevñ
(
uöt8
 *
pBuf
)

383 
uöt8
 
ªtVÆue
 = 
ZFaûuª
;

384 
uöt8
 
cmdId
;

387 
cmdId
 = 
pBuf
[
MT_RPC_POS_CMD1
];

388 
pBuf
 +
MT_RPC_FRAME_HDR_SZ
;

390 
ªtVÆue
 = 
	`oßl_nv_wrôe
–
ZCD_NV_SECURITY_LEVEL
, 0, 
	`oßl_nv_ôem_Àn
–ZCD_NV_SECURITY_LEVEL ), 
pBuf
);

393 
	`MT_BuûdAndSídZToﬁRe•⁄£
(((
uöt8
)
MT_RPC_CMD_SRSP
 | (uöt8)
MT_RPC_SYS_UTIL
), 
cmdId
, 1, &
ªtVÆue
 );

395 
	}
}

406 
	$MT_UtûSëPªCfgKey
(
uöt8
 *
pBuf
)

408 
uöt8
 
ªtVÆue
 = 
ZFaûuª
;

409 
uöt8
 
cmdId
;

412 
cmdId
 = 
pBuf
[
MT_RPC_POS_CMD1
];

413 
pBuf
 +
MT_RPC_FRAME_HDR_SZ
;

415 
ªtVÆue
 = 
	`oßl_nv_wrôe
–
ZCD_NV_PRECFGKEY
, 0, 
	`oßl_nv_ôem_Àn
–ZCD_NV_PRECFGKEY ), 
pBuf
);

418 
	`MT_BuûdAndSídZToﬁRe•⁄£
(((
uöt8
)
MT_RPC_CMD_SRSP
 | (uöt8)
MT_RPC_SYS_UTIL
), 
cmdId
, 1, &
ªtVÆue
 );

420 
	}
}

431 
	$MT_UtûCÆlbackSub
(
uöt8
 *
pBuf
)

433 
uöt8
 
cmdId
 = 
pBuf
[
MT_RPC_POS_CMD1
];

434 
uöt8
 
ªtVÆue
 = 
ZFaûuª
;

436 #i‡
	`deföed
(
MT_MAC_CB_FUNC
Ë|| deföed(
MT_NWK_CB_FUNC
Ë|| deföed(
MT_ZDO_CB_FUNC
Ë|| deföed(
MT_AF_CB_FUNC
Ë|| deföed(
MT_SAPI_CB_FUNC
) || defined(MT_SAPI_CB_FUNC)

437 
uöt8
 
subSy°em
;

438 
uöt16
 
subs¸ibed_comm™d
;

441 
ªtVÆue
 = 
ZSuc˚ss
;

442 
pBuf
 +
MT_RPC_FRAME_HDR_SZ
;

445 
subs¸ibed_comm™d
 = 
	`BUILD_UINT16
(
pBuf
[0],ÖBuf[1]);

446 
pBuf
 += 2;

449 
subSy°em
 = 
	`HI_UINT16
(
subs¸ibed_comm™d
) & 0x1F ;

452 i‡(*
pBuf
)

455 #i‡
	`deföed
–
MT_MAC_CB_FUNC
 )

456 i‡((
subSy°em
 =
MT_RPC_SYS_MAC
Ë|| (
subs¸ibed_comm™d
 == 0xFFFF))

457 
_macCÆlbackSub
 = 0xFFFF;

460 #i‡
	`deföed
–
MT_NWK_CB_FUNC
 )

461 i‡((
subSy°em
 =
MT_RPC_SYS_NWK
Ë|| (
subs¸ibed_comm™d
 == 0xFFFF))

462 
_nwkCÆlbackSub
 = 0xFFFF;

465 #i‡
	`deföed
–
MT_ZDO_CB_FUNC
 )

466 i‡((
subSy°em
 =
MT_RPC_SYS_ZDO
Ë|| (
subs¸ibed_comm™d
 == 0xFFFF))

467 
_zdoCÆlbackSub
 = 0xFFFFFFFF;

470 #i‡
	`deföed
–
MT_AF_CB_FUNC
 )

471 i‡((
subSy°em
 =
MT_RPC_SYS_AF
Ë|| (
subs¸ibed_comm™d
 == 0xFFFF))

472 
_afCÆlbackSub
 = 0xFFFF;

475 #i‡
	`deföed
–
MT_SAPI_CB_FUNC
 )

476 i‡((
subSy°em
 =
MT_RPC_SYS_SAPI
Ë|| (
subs¸ibed_comm™d
 == 0xFFFF))

477 
_ßpiCÆlbackSub
 = 0xFFFF;

483 #i‡
	`deföed
–
MT_MAC_CB_FUNC
 )

484 i‡((
subSy°em
 =
MT_RPC_SYS_MAC
Ë|| (
subs¸ibed_comm™d
 == 0xFFFF))

485 
_macCÆlbackSub
 = 0x0000;

488 #i‡
	`deföed
–
MT_NWK_CB_FUNC
 )

489 i‡((
subSy°em
 =
MT_RPC_SYS_NWK
Ë|| (
subs¸ibed_comm™d
 == 0xFFFF))

490 
_nwkCÆlbackSub
 = 0x0000;

493 #i‡
	`deföed
–
MT_ZDO_CB_FUNC
 )

494 i‡((
subSy°em
 =
MT_RPC_SYS_ZDO
Ë|| (
subs¸ibed_comm™d
 == 0xFFFF))

495 
_zdoCÆlbackSub
 = 0x00000000;

498 #i‡
	`deföed
–
MT_AF_CB_FUNC
 )

499 i‡((
subSy°em
 =
MT_RPC_SYS_AF
Ë|| (
subs¸ibed_comm™d
 == 0xFFFF))

500 
_afCÆlbackSub
 = 0x0000;

503 #i‡
	`deföed
–
MT_SAPI_CB_FUNC
 )

504 i‡((
subSy°em
 =
MT_RPC_SYS_SAPI
Ë|| (
subs¸ibed_comm™d
 == 0xFFFF))

505 
_ßpiCÆlbackSub
 = 0x0000;

511 
	`MT_BuûdAndSídZToﬁRe•⁄£
(((
uöt8
)
MT_RPC_CMD_SRSP
 | (uöt8)
MT_RPC_SYS_UTIL
), 
cmdId
, 1, &
ªtVÆue
 );

512 
	}
}

514 #i‡(
deföed
 
HAL_KEY
Ë&& (HAL_KEY =
TRUE
)

524 
	$MT_UtûKeyEvít
(
uöt8
 *
pBuf
)

526 
uöt8
 
x
 = 0;

527 
uöt8
 
ªtVÆue
 = 
ZFaûuª
;

528 
uöt8
 
cmdId
;

531 
cmdId
 = 
pBuf
[
MT_RPC_POS_CMD1
];

532 
pBuf
 +
MT_RPC_FRAME_HDR_SZ
;

535 i‡–*
pBuf
 & 0x01 )

536 
x
 |
HAL_KEY_SW_1
;

537 i‡–*
pBuf
 & 0x02 )

538 
x
 |
HAL_KEY_SW_2
;

539 i‡–*
pBuf
 & 0x04 )

540 
x
 |
HAL_KEY_SW_3
;

541 i‡–*
pBuf
 & 0x08 )

542 
x
 |
HAL_KEY_SW_4
;

543 #i‡
	`deföed
 ( 
HAL_KEY_SW_5
 )

544 i‡–*
pBuf
 & 0x10 )

545 
x
 |
HAL_KEY_SW_5
;

547 #i‡
	`deföed
 ( 
HAL_KEY_SW_6
 )

548 i‡–*
pBuf
 & 0x20 )

549 
x
 |
HAL_KEY_SW_6
;

551 #i‡
	`deföed
 ( 
HAL_KEY_SW_7
 )

552 i‡–*
pBuf
 & 0x40 )

553 
x
 |
HAL_KEY_SW_7
;

555 #i‡
	`deföed
 ( 
HAL_KEY_SW_8
 )

556 i‡–*
pBuf
 & 0x80 )

557 
x
 |
HAL_KEY_SW_8
;

559 
pBuf
++;

561 
ªtVÆue
 = 
	`OnBﬂrd_SídKeys
(
x
, *
pBuf
);

564 
	`MT_BuûdAndSídZToﬁRe•⁄£
(((
uöt8
)
MT_RPC_CMD_SRSP
 | (uöt8)
MT_RPC_SYS_UTIL
), 
cmdId
, 1, &
ªtVÆue
 );

565 
	}
}

568 #i‡(
deföed
 
HAL_LED
Ë&& (HAL_LED =
TRUE
)

578 
	$MT_UtûLedC⁄åﬁ
(
uöt8
 *
pBuf
)

580 
uöt8
 
iLed
, 
Led
, 
iMode
, 
Mode
, 
cmdId
;

581 
uöt8
 
ªtVÆue
 = 
ZFaûuª
;

584 
cmdId
 = 
pBuf
[
MT_RPC_POS_CMD1
];

585 
pBuf
 +
MT_RPC_FRAME_HDR_SZ
;

588 
iLed
 = *
pBuf
++;

589 
iMode
 = *
pBuf
;

591 i‡–
iLed
 == 1 )

592 
Led
 = 
HAL_LED_1
;

593 i‡–
iLed
 == 2 )

594 
Led
 = 
HAL_LED_2
;

595 i‡–
iLed
 == 3 )

596 
Led
 = 
HAL_LED_3
;

597 i‡–
iLed
 == 4 )

598 
Led
 = 
HAL_LED_4
;

599 i‡–
iLed
 == 0xFF )

600 
Led
 = 
HAL_LED_ALL
;

602 
Led
 = 0;

604 i‡–
iMode
 == 0 )

605 
Mode
 = 
HAL_LED_MODE_OFF
;

606 i‡–
iMode
 == 1 )

607 
Mode
 = 
HAL_LED_MODE_ON
;

608 i‡–
iMode
 == 2 )

609 
Mode
 = 
HAL_LED_MODE_BLINK
;

610 i‡–
iMode
 == 3 )

611 
Mode
 = 
HAL_LED_MODE_FLASH
;

612 i‡–
iMode
 == 4 )

613 
Mode
 = 
HAL_LED_MODE_TOGGLE
;

615 
Led
 = 0;

617 i‡–
Led
 != 0 )

619 
	`HÆLedSë
 (
Led
, 
Mode
);

620 
ªtVÆue
 = 
ZSuc˚ss
;

624 
	`MT_BuûdAndSídZToﬁRe•⁄£
(((
uöt8
)
MT_RPC_CMD_SRSP
 | (uöt8)
MT_RPC_SYS_UTIL
), 
cmdId
, 1, &
ªtVÆue
 );

626 
	}
}

638 
	$MT_UtûHóπBót
(
uöt8
 *
pBuf
)

641 ()
pBuf
;

642 
	}
}

653 
	$MT_UtûTimeAlive
()

655 
uöt8
 
timeAlive
[4];

656 
uöt32
 
tmp32
;

659 
tmp32
 = 
	`oßl_GëSy°emClock
() / 1000;

662 
timeAlive
[0] = 
	`BREAK_UINT32
(
tmp32
, 0);

663 
timeAlive
[1] = 
	`BREAK_UINT32
(
tmp32
, 1);

664 
timeAlive
[2] = 
	`BREAK_UINT32
(
tmp32
, 2);

665 
timeAlive
[3] = 
	`BREAK_UINT32
(
tmp32
, 3);

668 
	`MT_BuûdAndSídZToﬁRe•⁄£
(((
uöt8
)
MT_RPC_CMD_SRSP
 | (uöt8)
MT_RPC_SYS_UTIL
), 
MT_UTIL_TIME_ALIVE
,

669 (
tmp32
), 
timeAlive
 );

670 
	}
}

	@Components/mt/MT_UTIL.h

41 #i‚de‡
MT_UTIL_H


42 
	#MT_UTIL_H


	)

44 #ifde‡
__˝lu•lus


53 #i‡
deföed
 (
MT_UTIL_FUNC
)

57 
uöt8
 
MT_UtûComm™dPro˚ssög
(uöt8 *
pBuf
);

60 #ifde‡
__˝lu•lus


	@Components/mt/MT_VERSION.c

43 
	~"ZComDef.h
"

44 
	~"MT_VERSION.h
"

51 c⁄° 
uöt8
 
	gMTVîsi⁄Såög
[5] = {

	@Components/mt/MT_VERSION.h

39 #i‚de‡
MT_VERSION_H


40 
	#MT_VERSION_H


	)

42 #ifde‡
__˝lu•lus


47 c⁄° 
uöt8
 
MTVîsi⁄Såög
[5];

49 #ifde‡
__˝lu•lus


	@Components/mt/MT_ZDO.c

40 #ifde‡
MT_ZDO_FUNC


45 
	~"ZComDef.h
"

46 
	~"OSAL.h
"

47 
	~"MT.h
"

48 
	~"MT_ZDO.h
"

49 
	~"APSMEDE.h
"

50 
	~"ZDC⁄fig.h
"

51 
	~"ZDProfûe.h
"

52 
	~"ZDObje˘.h
"

53 
	~"ZDAµ.h
"

55 #i‡!
deföed
–
WIN32
 )

56 
	~"OnBﬂrd.h
"

59 
	~"nwk_utû.h
"

64 
	#MT_ZDO_END_DEVICE_ANNCE_IND_LEN
 0x0D

	)

65 
	#MT_ZDO_ADDR_RSP_LEN
 0x0D

	)

66 
	#MT_ZDO_BIND_UNBIND_RSP_LEN
 0x03

	)

68 
	#MTZDO_RESPONSE_BUFFER_LEN
 100

	)

70 
	#MTZDO_MAX_MATCH_CLUSTERS
 16

	)

71 
	#MTZDO_MAX_ED_BIND_CLUSTERS
 15

	)

76 
uöt32
 
	g_zdoCÆlbackSub
;

81 
uöt8
 
	gmtzdoRe•⁄£Buf„r
[
MTZDO_RESPONSE_BUFFER_LEN
];

86 #i‡
deföed
 (
MT_ZDO_FUNC
)

87 
MT_ZdoNWKAddªssReque°
(
uöt8
 *
pBuf
);

88 
MT_ZdoIEEEAddrReque°
(
uöt8
 *
pBuf
);

89 
MT_ZdoNodeDescReque°
(
uöt8
 *
pBuf
);

90 
MT_ZdoPowîDescReque°
(
uöt8
 *
pBuf
);

91 
MT_ZdoSim∂eDescReque°
(
uöt8
 *
pBuf
);

92 
MT_ZdoA˘iveEpReque°
(
uöt8
 *
pBuf
);

93 
MT_ZdoM©chDescReque°
(
uöt8
 *
pBuf
);

94 
MT_ZdoCom∂exDescReque°
(
uöt8
 *
pBuf
);

95 
MT_ZdoU£rDescReque°
(
uöt8
 *
pBuf
);

96 
MT_ZdoEndDevA¬˚
(
uöt8
 *
pBuf
);

97 
MT_ZdoU£rDescSë
(
uöt8
 *
pBuf
);

98 
MT_ZdoSîvi˚DiscReque°
(
uöt8
 *
pBuf
);

99 
MT_ZdoEndDevBödReque°
(
uöt8
 *
pBuf
);

100 
MT_ZdoBödReque°
(
uöt8
 *
pBuf
);

101 
MT_ZdoUnbödReque°
(
uöt8
 *
pBuf
);

102 
MT_ZdoMgmtNwkDiscReque°
(
uöt8
 *
pBuf
);

103 
MT_ZdoSèπupFromAµ
(
uöt8
 *
pBuf
);

104 #i‡
deföed
 (
MT_ZDO_MGMT
)

105 
MT_ZdoMgmtLqiReque°
(
uöt8
 *
pBuf
);

106 
MT_ZdoMgmtRtgReque°
(
uöt8
 *
pBuf
);

107 
MT_ZdoMgmtBödReque°
(
uöt8
 *
pBuf
);

108 
MT_ZdoMgmtLóveReque°
(
uöt8
 *
pBuf
);

109 
MT_ZdoMgmtDúe˘JoöReque°
(
uöt8
 *
pBuf
);

110 
MT_ZdoMgmtPîmôJoöReque°
(
uöt8
 *
pBuf
);

111 
MT_ZdoMgmtNwkUpd©eReque°
(
uöt8
 *
pBuf
);

115 #i‡
deföed
 (
MT_ZDO_CB_FUNC
)

116 
uöt8
 
MT_ZdoH™dÀEx˚±i⁄s
–
afIncomögMSGPackë_t
 *
pD©a
, 
zdoIncomögMsg_t
 *
öMsg
 );

117 
MT_ZdoAddrR•CB
–
ZDO_NwkIEEEAddrRe•_t
 *
pMsg
, 
uöt16
 
˛u°îID
 );

118 
MT_ZdoEndDevA¬˚CB
–
ZDO_Devi˚A¬˚_t
 *
pMsg
, 
uöt16
 
§cAddr
 );

119 
MT_ZdoBödUnbödR•CB
–
uöt16
 
˛u°îID
, uöt16 
§cAddr
, 
uöt8
 
°©us
 );

122 c⁄° 
uöt8
 
CODE
 
	gmtZdoClu°î2R•
[4][7] =

125 
MT_ZDO_NWK_ADDR_RSP
,

126 
MT_ZDO_IEEE_ADDR_RSP
,

127 
MT_ZDO_NODE_DESC_RSP
,

128 
MT_ZDO_POWER_DESC_RSP
,

129 
MT_ZDO_SIMPLE_DESC_RSP
,

130 
MT_ZDO_ACTIVE_EP_RSP
,

131 
MT_ZDO_MATCH_DESC_RSP


134 
MT_ZDO_COMPLEX_DESC_RSP
,

135 
MT_ZDO_USER_DESC_RSP
,

138 
MT_ZDO_USER_DESC_CONF
,

139 
MT_ZDO_SERVER_DISC_RSP
,

143 
MT_ZDO_END_DEVICE_BIND_RSP
,

144 
MT_ZDO_BIND_RSP
,

145 
MT_ZDO_UNBIND_RSP
,

149 
MT_ZDO_STATUS_ERROR_RSP


152 
MT_ZDO_MGMT_NWK_DISC_RSP
,

153 
MT_ZDO_MGMT_LQI_RSP
,

154 
MT_ZDO_MGMT_RTG_RSP
,

155 
MT_ZDO_MGMT_BIND_RSP
,

156 
MT_ZDO_MGMT_LEAVE_RSP
,

157 
MT_ZDO_MGMT_DIRECT_JOIN_RSP
,

158 
MT_ZDO_MGMT_PERMIT_JOIN_RSP


163 #i‡
deföed
 (
MT_ZDO_FUNC
)

178 
uöt8
 
	$MT_ZdoComm™dPro˚ssög
(
uöt8
* 
pBuf
)

180 
uöt8
 
°©us
 = 
MT_RPC_SUCCESS
;

182 
pBuf
[
MT_RPC_POS_CMD1
])

184 #i‡
	`deföed
 ( 
ZDO_NWKADDR_REQUEST
 )

185 
MT_ZDO_NWK_ADDR_REQ
:

186 
	`MT_ZdoNWKAddªssReque°
(
pBuf
);

190 #i‡
	`deföed
 ( 
ZDO_IEEEADDR_REQUEST
 )

191 
MT_ZDO_IEEE_ADDR_REQ
:

192 
	`MT_ZdoIEEEAddrReque°
(
pBuf
);

196 #i‡
	`deföed
 ( 
ZDO_NODEDESC_REQUEST
 )

197 
MT_ZDO_NODE_DESC_REQ
:

198 
	`MT_ZdoNodeDescReque°
(
pBuf
);

202 #i‡
	`deföed
 ( 
ZDO_POWERDESC_REQUEST
 )

203 
MT_ZDO_POWER_DESC_REQ
:

204 
	`MT_ZdoPowîDescReque°
(
pBuf
);

208 #i‡
	`deföed
 ( 
ZDO_SIMPLEDESC_REQUEST
 )

209 
MT_ZDO_SIMPLE_DESC_REQ
:

210 
	`MT_ZdoSim∂eDescReque°
(
pBuf
);

214 #i‡
	`deföed
 ( 
ZDO_ACTIVEEP_REQUEST
 )

215 
MT_ZDO_ACTIVE_EP_REQ
:

216 
	`MT_ZdoA˘iveEpReque°
(
pBuf
);

220 #i‡
	`deföed
 ( 
ZDO_MATCH_REQUEST
 )

221 
MT_ZDO_MATCH_DESC_REQ
:

222 
	`MT_ZdoM©chDescReque°
(
pBuf
);

226 #i‡
	`deföed
 ( 
ZDO_COMPLEXDESC_REQUEST
 )

227 
MT_ZDO_COMPLEX_DESC_REQ
:

228 
	`MT_ZdoCom∂exDescReque°
(
pBuf
);

232 #i‡
	`deföed
 ( 
ZDO_USERDESC_REQUEST
 )

233 
MT_ZDO_USER_DESC_REQ
:

234 
	`MT_ZdoU£rDescReque°
(
pBuf
);

238 #i‡
	`deföed
 ( 
ZDO_ENDDEVICE_ANNCE
 )

239 
MT_ZDO_END_DEV_ANNCE
:

240 
	`MT_ZdoEndDevA¬˚
(
pBuf
);

244 #i‡
	`deföed
 ( 
ZDO_USERDESCSET_REQUEST
 )

245 
MT_ZDO_USER_DESC_SET
:

246 
	`MT_ZdoU£rDescSë
(
pBuf
);

250 #i‡
	`deföed
 ( 
ZDO_SERVERDISC_REQUEST
 )

251 
MT_ZDO_SERVICE_DISC_REQ
:

252 
	`MT_ZdoSîvi˚DiscReque°
(
pBuf
);

256 #i‡
	`deföed
 ( 
ZDO_ENDDEVICEBIND_REQUEST
 )

257 
MT_ZDO_END_DEV_BIND_REQ
:

258 
	`MT_ZdoEndDevBödReque°
(
pBuf
);

262 #i‡
	`deföed
 ( 
ZDO_BIND_UNBIND_REQUEST
 )

263 
MT_ZDO_BIND_REQ
:

264 
	`MT_ZdoBödReque°
(
pBuf
);

268 #i‡
	`deföed
 ( 
ZDO_BIND_UNBIND_REQUEST
 )

269 
MT_ZDO_UNBIND_REQ
:

270 
	`MT_ZdoUnbödReque°
(
pBuf
);

274 #i‡
	`deföed
 ( 
ZDO_NETWORKSTART_REQUEST
 )

275 
MT_ZDO_STARTUP_FROM_APP
:

276 
	`MT_ZdoSèπupFromAµ
(
pBuf
);

280 #i‡
	`deföed
 ( 
ZDO_MGMT_NWKDISC_REQUEST
 )

281 
MT_ZDO_MGMT_NWKDISC_REQ
:

282 
	`MT_ZdoMgmtNwkDiscReque°
(
pBuf
);

286 #i‡
	`deföed
 ( 
ZDO_MGMT_LQI_REQUEST
 )

287 
MT_ZDO_MGMT_LQI_REQ
:

288 
	`MT_ZdoMgmtLqiReque°
(
pBuf
);

292 #i‡
	`deföed
 ( 
ZDO_MGMT_RTG_REQUEST
 )

293 
MT_ZDO_MGMT_RTG_REQ
:

294 
	`MT_ZdoMgmtRtgReque°
(
pBuf
);

298 #i‡
	`deföed
 ( 
ZDO_MGMT_BIND_REQUEST
 )

299 
MT_ZDO_MGMT_BIND_REQ
:

300 
	`MT_ZdoMgmtBödReque°
(
pBuf
);

304 #i‡
	`deföed
 ( 
ZDO_MGMT_LEAVE_REQUEST
 )

305 
MT_ZDO_MGMT_LEAVE_REQ
:

306 
	`MT_ZdoMgmtLóveReque°
(
pBuf
);

310 #i‡
	`deföed
 ( 
ZDO_MGMT_JOINDIRECT_REQUEST
 )

311 
MT_ZDO_MGMT_DIRECT_JOIN_REQ
:

312 
	`MT_ZdoMgmtDúe˘JoöReque°
(
pBuf
);

316 #i‡
	`deföed
 ( 
ZDO_MGMT_PERMIT_JOIN_REQUEST
 )

317 
MT_ZDO_MGMT_PERMIT_JOIN_REQ
:

318 
	`MT_ZdoMgmtPîmôJoöReque°
(
pBuf
);

322 #i‡
	`deföed
 ( 
ZDO_MGMT_NWKUPDATE_REQUEST
 )

323 
MT_ZDO_MGMT_NWK_UPDATE_REQ
:

324 
	`MT_ZdoMgmtNwkUpd©eReque°
(
pBuf
);

329 
°©us
 = 
MT_RPC_ERR_COMMAND_ID
;

333  
°©us
;

334 
	}
}

345 
	$MT_ZdoNWKAddªssReque°
(
uöt8
 *
pBuf
)

347 
uöt8
 
cmdId
;

348 
uöt8
 
ªtVÆue
;

349 
uöt8
 
ªqTy≥
;

350 
uöt8
 
°¨tIndex
;

351 
uöt8
 *
pExtAddr
;

354 
cmdId
 = 
pBuf
[
MT_RPC_POS_CMD1
];

355 
pBuf
 +
MT_RPC_FRAME_HDR_SZ
;

358 
pExtAddr
 = 
pBuf
;

359 
pBuf
 +
Z_EXTADDR_LEN
;

362 
ªqTy≥
 = *
pBuf
++;

365 
°¨tIndex
 = *
pBuf
;

367 
ªtVÆue
 = (
uöt8
)
	`ZDP_NwkAddrReq
(
pExtAddr
, 
ªqTy≥
, 
°¨tIndex
, 0);

370 
	`MT_BuûdAndSídZToﬁRe•⁄£
(((
uöt8
)
MT_RPC_CMD_SRSP
 | (uöt8)
MT_RPC_SYS_ZDO
), 
cmdId
, 1, &
ªtVÆue
);

371 
	}
}

382 
	$MT_ZdoIEEEAddrReque°
 (
uöt8
 *
pBuf
)

384 
uöt8
 
cmdId
;

385 
uöt8
 
ªtVÆue
;

386 
uöt16
 
sh‹tAddr
;

387 
uöt8
 
ªqTy≥
;

388 
uöt8
 
°¨tIndex
;

391 
cmdId
 = 
pBuf
[
MT_RPC_POS_CMD1
];

392 
pBuf
 +
MT_RPC_FRAME_HDR_SZ
;

395 
sh‹tAddr
 = 
	`BUILD_UINT16
(
pBuf
[0],ÖBuf[1]);

396 
pBuf
 += 2;

399 
ªqTy≥
 = *
pBuf
++;

402 
°¨tIndex
 = *
pBuf
;

404 
ªtVÆue
 = (
uöt8
)
	`ZDP_IEEEAddrReq
(
sh‹tAddr
, 
ªqTy≥
, 
°¨tIndex
, 0);

406 
	`MT_BuûdAndSídZToﬁRe•⁄£
(((
uöt8
)
MT_RPC_CMD_SRSP
 | (uöt8)
MT_RPC_SYS_ZDO
), 
cmdId
, 1, &
ªtVÆue
);

407 
	}
}

418 
	$MT_ZdoNodeDescReque°
 (
uöt8
 *
pBuf
)

420 
uöt8
 
cmdId
;

421 
uöt8
 
ªtVÆue
;

422 
zAddrTy≥_t
 
de°Addr
;

423 
uöt16
 
sh‹tAddr
;

426 
cmdId
 = 
pBuf
[
MT_RPC_POS_CMD1
];

427 
pBuf
 +
MT_RPC_FRAME_HDR_SZ
;

430 
de°Addr
.
addrMode
 = 
Addr16Bô
;

431 
de°Addr
.
addr
.
sh‹tAddr
 = 
	`BUILD_UINT16
–
pBuf
[0],ÖBuf[1] );

432 
pBuf
 += 2;

435 
sh‹tAddr
 = 
	`BUILD_UINT16
–
pBuf
[0],ÖBuf[1] );

436 
pBuf
 += 2;

438 
ªtVÆue
 = (
uöt8
)
	`ZDP_NodeDescReq
–&
de°Addr
, 
sh‹tAddr
, 0);

440 
	`MT_BuûdAndSídZToﬁRe•⁄£
(((
uöt8
)
MT_RPC_CMD_SRSP
 | (uöt8)
MT_RPC_SYS_ZDO
), 
cmdId
, 1, &
ªtVÆue
);

441 
	}
}

452 
	$MT_ZdoPowîDescReque°
(
uöt8
 *
pBuf
)

454 
uöt8
 
cmdId
;

455 
uöt8
 
ªtVÆue
;

456 
zAddrTy≥_t
 
de°Addr
;

457 
uöt16
 
sh‹tAddr
;

460 
cmdId
 = 
pBuf
[
MT_RPC_POS_CMD1
];

461 
pBuf
 +
MT_RPC_FRAME_HDR_SZ
;

464 
de°Addr
.
addrMode
 = 
Addr16Bô
;

465 
de°Addr
.
addr
.
sh‹tAddr
 = 
	`BUILD_UINT16
–
pBuf
[0],ÖBuf[1] );

466 
pBuf
 += 2;

469 
sh‹tAddr
 = 
	`BUILD_UINT16
–
pBuf
[0],ÖBuf[1] );

470 
pBuf
 += 2;

472 
ªtVÆue
 = (
uöt8
)
	`ZDP_PowîDescReq
–&
de°Addr
, 
sh‹tAddr
, 0);

474 
	`MT_BuûdAndSídZToﬁRe•⁄£
(((
uöt8
)
MT_RPC_CMD_SRSP
 | (uöt8)
MT_RPC_SYS_ZDO
), 
cmdId
, 1, &
ªtVÆue
);

475 
	}
}

486 
	$MT_ZdoSim∂eDescReque°
(
uöt8
 *
pBuf
)

488 
uöt8
 
cmdId
;

489 
uöt8
 
ªtVÆue
;

490 
uöt8
 
ïI¡
;

491 
zAddrTy≥_t
 
de°Addr
;

492 
uöt16
 
sh‹tAddr
;

495 
cmdId
 = 
pBuf
[
MT_RPC_POS_CMD1
];

496 
pBuf
 +
MT_RPC_FRAME_HDR_SZ
;

499 
de°Addr
.
addrMode
 = 
Addr16Bô
;

500 
de°Addr
.
addr
.
sh‹tAddr
 = 
	`BUILD_UINT16
–
pBuf
[0],ÖBuf[1] );

501 
pBuf
 += 2;

504 
sh‹tAddr
 = 
	`BUILD_UINT16
–
pBuf
[0],ÖBuf[1] );

505 
pBuf
 += 2;

508 
ïI¡
 = *
pBuf
++;

510 
ªtVÆue
 = (
uöt8
)
	`ZDP_Sim∂eDescReq
–&
de°Addr
, 
sh‹tAddr
, 
ïI¡
, 0);

512 
	`MT_BuûdAndSídZToﬁRe•⁄£
(((
uöt8
)
MT_RPC_CMD_SRSP
 | (uöt8)
MT_RPC_SYS_ZDO
), 
cmdId
, 1, &
ªtVÆue
);

513 
	}
}

524 
	$MT_ZdoA˘iveEpReque°
(
uöt8
 *
pBuf
)

526 
uöt8
 
cmdId
;

527 
uöt8
 
ªtVÆue
;

528 
zAddrTy≥_t
 
de°Addr
;

529 
uöt16
 
sh‹tAddr
;

532 
cmdId
 = 
pBuf
[
MT_RPC_POS_CMD1
];

533 
pBuf
 +
MT_RPC_FRAME_HDR_SZ
;

536 
de°Addr
.
addrMode
 = 
Addr16Bô
;

537 
de°Addr
.
addr
.
sh‹tAddr
 = 
	`BUILD_UINT16
–
pBuf
[0],ÖBuf[1] );

538 
pBuf
 += 2;

541 
sh‹tAddr
 = 
	`BUILD_UINT16
–
pBuf
[0],ÖBuf[1] );

542 
pBuf
 += 2;

544 
ªtVÆue
 = (
uöt8
)
	`ZDP_A˘iveEPReq
–&
de°Addr
, 
sh‹tAddr
, 0);

546 
	`MT_BuûdAndSídZToﬁRe•⁄£
(((
uöt8
)
MT_RPC_CMD_SRSP
 | (uöt8)
MT_RPC_SYS_ZDO
), 
cmdId
, 1, &
ªtVÆue
);

547 
	}
}

558 
	$MT_ZdoM©chDescReque°
(
uöt8
 *
pBuf
)

560 
uöt8
 
cmdId
;

561 
uöt8
 
ªtVÆue
 = 0;

562 
uöt8
 
i
, 
numInClu°îs
, 
numOutClu°îs
;

563 
uöt16
 
¥ofûeId
;

564 
zAddrTy≥_t
 
de°Addr
;

565 
uöt16
 
sh‹tAddr
;

566 
uöt16
 
öClu°îs
[
MTZDO_MAX_MATCH_CLUSTERS
], 
outClu°îs
[MTZDO_MAX_MATCH_CLUSTERS];

569 
cmdId
 = 
pBuf
[
MT_RPC_POS_CMD1
];

570 
pBuf
 +
MT_RPC_FRAME_HDR_SZ
;

573 
de°Addr
.
addrMode
 = 
Addr16Bô
;

574 
de°Addr
.
addr
.
sh‹tAddr
 = 
	`BUILD_UINT16
–
pBuf
[0],ÖBuf[1] );

575 
pBuf
 += 2;

578 
sh‹tAddr
 = 
	`BUILD_UINT16
–
pBuf
[0],ÖBuf[1] );

579 
pBuf
 += 2;

582 
¥ofûeId
 = 
	`BUILD_UINT16
–
pBuf
[0],ÖBuf[1] );

583 
pBuf
 += 2;

586 
numInClu°îs
 = *
pBuf
++;

587 i‡–
numInClu°îs
 <
MTZDO_MAX_MATCH_CLUSTERS
 )

590  
i
 = 0; i < 
numInClu°îs
; i++ )

592 
öClu°îs
[
i
] = 
	`BUILD_UINT16
–
pBuf
[0],ÖBuf[1]);

593 
pBuf
 += 2;

598 
ªtVÆue
 = 
ZDP_INVALID_REQTYPE
;

602 
numOutClu°îs
 = *
pBuf
++;

603 i‡–
numOutClu°îs
 <
MTZDO_MAX_MATCH_CLUSTERS
 )

606  
i
 = 0; i < 
numOutClu°îs
; i++ )

608 
outClu°îs
[
i
] = 
	`BUILD_UINT16
–
pBuf
[0],ÖBuf[1]);

609 
pBuf
 += 2;

614 
ªtVÆue
 = 
ZDP_INVALID_REQTYPE
;

617 i‡–
ªtVÆue
 == 0 )

619 
ªtVÆue
 = (
uöt8
)
	`ZDP_M©chDescReq
–&
de°Addr
, 
sh‹tAddr
, 
¥ofûeId
, 
numInClu°îs
,

620 
öClu°îs
, 
numOutClu°îs
, 
outClu°îs
, 0);

623 
	`MT_BuûdAndSídZToﬁRe•⁄£
(((
uöt8
)
MT_RPC_CMD_SRSP
 | (uöt8)
MT_RPC_SYS_ZDO
), 
cmdId
, 1, &
ªtVÆue
);

624 
	}
}

635 
	$MT_ZdoCom∂exDescReque°
(
uöt8
 *
pBuf
)

637 
uöt8
 
cmdId
;

638 
uöt8
 
ªtVÆue
;

639 
zAddrTy≥_t
 
de°Addr
;

640 
uöt16
 
sh‹tAddr
;

643 
cmdId
 = 
pBuf
[
MT_RPC_POS_CMD1
];

644 
pBuf
 +
MT_RPC_FRAME_HDR_SZ
;

647 
de°Addr
.
addrMode
 = 
Addr16Bô
;

648 
de°Addr
.
addr
.
sh‹tAddr
 = 
	`BUILD_UINT16
–
pBuf
[0],ÖBuf[1] );

649 
pBuf
 += 2;

652 
sh‹tAddr
 = 
	`BUILD_UINT16
–
pBuf
[0],ÖBuf[1] );

653 
pBuf
 += 2;

655 
ªtVÆue
 = (
uöt8
)
	`ZDP_Com∂exDescReq
–&
de°Addr
, 
sh‹tAddr
, 0);

657 
	`MT_BuûdAndSídZToﬁRe•⁄£
(((
uöt8
)
MT_RPC_CMD_SRSP
 | (uöt8)
MT_RPC_SYS_ZDO
), 
cmdId
, 1, &
ªtVÆue
);

658 
	}
}

669 
	$MT_ZdoU£rDescReque°
(
uöt8
 *
pBuf
)

671 
uöt8
 
cmdId
;

672 
uöt8
 
ªtVÆue
;

673 
zAddrTy≥_t
 
de°Addr
;

674 
uöt16
 
sh‹tAddr
;

677 
cmdId
 = 
pBuf
[
MT_RPC_POS_CMD1
];

678 
pBuf
 +
MT_RPC_FRAME_HDR_SZ
;

681 
de°Addr
.
addrMode
 = 
Addr16Bô
;

682 
de°Addr
.
addr
.
sh‹tAddr
 = 
	`BUILD_UINT16
–
pBuf
[0],ÖBuf[1]);

683 
pBuf
 += 2;

686 
sh‹tAddr
 = 
	`BUILD_UINT16
–
pBuf
[0],ÖBuf[1]);

687 
pBuf
 += 2;

689 
ªtVÆue
 = (
uöt8
)
	`ZDP_U£rDescReq
–&
de°Addr
, 
sh‹tAddr
, 0);

691 
	`MT_BuûdAndSídZToﬁRe•⁄£
(((
uöt8
)
MT_RPC_CMD_SRSP
 | (uöt8)
MT_RPC_SYS_ZDO
), 
cmdId
, 1, &
ªtVÆue
);

692 
	}
}

703 
	$MT_ZdoEndDevA¬˚
(
uöt8
 *
pBuf
)

705 
uöt8
 
cmdId
;

706 
uöt8
 
ªtVÆue
;

707 
uöt16
 
sh‹tAddr
;

708 
uöt8
 *
pIEEEAddr
;

711 
cmdId
 = 
pBuf
[
MT_RPC_POS_CMD1
];

712 
pBuf
 +
MT_RPC_FRAME_HDR_SZ
;

715 
sh‹tAddr
 = 
	`BUILD_UINT16
–
pBuf
[0],ÖBuf[1] );

716 
pBuf
 += 2;

719 
pIEEEAddr
 = 
pBuf
;

720 
pBuf
 +
Z_EXTADDR_LEN
;

722 
ªtVÆue
 = (
uöt8
)
	`ZDP_Devi˚A¬˚
–
sh‹tAddr
, 
pIEEEAddr
, *
pBuf
, 0);

724 
	`MT_BuûdAndSídZToﬁRe•⁄£
(((
uöt8
)
MT_RPC_CMD_SRSP
 | (uöt8)
MT_RPC_SYS_ZDO
), 
cmdId
, 1, &
ªtVÆue
);

725 
	}
}

736 
	$MT_ZdoU£rDescSë
(
uöt8
 *
pBuf
)

738 
uöt8
 
cmdId
;

739 
uöt8
 
ªtVÆue
;

740 
zAddrTy≥_t
 
de°Addr
;

741 
uöt16
 
sh‹tAddr
;

742 
U£rDes¸ùt‹F‹m©_t
 
u£rDesc
;

745 
cmdId
 = 
pBuf
[
MT_RPC_POS_CMD1
];

746 
pBuf
 +
MT_RPC_FRAME_HDR_SZ
;

749 
de°Addr
.
addrMode
 = 
Addr16Bô
;

750 
de°Addr
.
addr
.
sh‹tAddr
 = 
	`BUILD_UINT16
–
pBuf
[0],ÖBuf[1] );

751 
pBuf
 += 2;

754 
sh‹tAddr
 = 
	`BUILD_UINT16
–
pBuf
[0],ÖBuf[1] );

755 
pBuf
 += 2;

758 
u£rDesc
.
Àn
 = *
pBuf
++;

759 
	`oßl_mem˝y
–
u£rDesc
.
desc
, 
pBuf
, u£rDesc.
Àn
 );

760 
pBuf
 += 16;

762 
ªtVÆue
 = (
uöt8
)
	`ZDP_U£rDescSë
–&
de°Addr
, 
sh‹tAddr
, &
u£rDesc
, 0);

764 
	`MT_BuûdAndSídZToﬁRe•⁄£
(((
uöt8
)
MT_RPC_CMD_SRSP
 | (uöt8)
MT_RPC_SYS_ZDO
), 
cmdId
, 1, &
ªtVÆue
);

765 
	}
}

776 
	$MT_ZdoSîvi˚DiscReque°
(
uöt8
 *
pBuf
)

778 
uöt8
 
cmdId
;

779 
uöt8
 
ªtVÆue
;

780 
uöt16
 
£rvi˚Mask
;

783 
cmdId
 = 
pBuf
[
MT_RPC_POS_CMD1
];

784 
pBuf
 +
MT_RPC_FRAME_HDR_SZ
;

787 
£rvi˚Mask
 = 
	`BUILD_UINT16
–
pBuf
[0],ÖBuf[1]);

788 
pBuf
 += 2;

790 
ªtVÆue
 = (
uöt8
)
	`ZDP_SîvîDiscReq
–
£rvi˚Mask
, 0);

792 
	`MT_BuûdAndSídZToﬁRe•⁄£
(((
uöt8
)
MT_RPC_CMD_SRSP
 | (uöt8)
MT_RPC_SYS_ZDO
), 
cmdId
, 1, &
ªtVÆue
);

793 
	}
}

804 
	$MT_ZdoEndDevBödReque°
(
uöt8
 *
pBuf
)

806 
uöt8
 
cmdId
;

807 
uöt8
 
ªtVÆue
 = 0;

808 
uöt8
 
i
, 
ïI¡
, 
numInClu°îs
, 
numOutClu°îs
;

809 
zAddrTy≥_t
 
de°Addr
;

810 
uöt16
 
sh‹tAddr
;

811 
uöt16
 
¥ofûeID
, 
öClu°îs
[
MTZDO_MAX_ED_BIND_CLUSTERS
], 
outClu°îs
[MTZDO_MAX_ED_BIND_CLUSTERS];

814 
cmdId
 = 
pBuf
[
MT_RPC_POS_CMD1
];

815 
pBuf
 +
MT_RPC_FRAME_HDR_SZ
;

818 
de°Addr
.
addrMode
 = 
Addr16Bô
;

819 
de°Addr
.
addr
.
sh‹tAddr
 = 
	`BUILD_UINT16
–
pBuf
[0],ÖBuf[1] );

820 
pBuf
 += 2;

823 
sh‹tAddr
 = 
	`BUILD_UINT16
–
pBuf
[0],ÖBuf[1] );

824 
pBuf
 += 2;

827 
pBuf
 +
Z_EXTADDR_LEN
;

830 
ïI¡
 = *
pBuf
++;

833 
¥ofûeID
 = 
	`BUILD_UINT16
–
pBuf
[0],ÖBuf[1] );

834 
pBuf
 += 2;

837 
numInClu°îs
 = *
pBuf
++;

838 i‡–
numInClu°îs
 <
MTZDO_MAX_ED_BIND_CLUSTERS
 )

840  
i
 = 0; i < 
numInClu°îs
; i++ )

842 
öClu°îs
[
i
] = 
	`BUILD_UINT16
(
pBuf
[0],ÖBuf[1]);

843 
pBuf
 += 2;

847 
ªtVÆue
 = 
ZDP_INVALID_REQTYPE
;

850 
numOutClu°îs
 = *
pBuf
++;

851 i‡–
numOutClu°îs
 <
MTZDO_MAX_ED_BIND_CLUSTERS
 )

853  
i
 = 0; i < 
numOutClu°îs
; i++ )

855 
outClu°îs
[
i
] = 
	`BUILD_UINT16
(
pBuf
[0],ÖBuf[1]);

856 
pBuf
 += 2;

860 
ªtVÆue
 = 
ZDP_INVALID_REQTYPE
;

862 i‡–
ªtVÆue
 == 0 )

864 
ªtVÆue
 = (
uöt8
)
	`ZDP_EndDevi˚BödReq
–&
de°Addr
, 
sh‹tAddr
, 
ïI¡
, 
¥ofûeID
,

865 
numInClu°îs
, 
öClu°îs
, 
numOutClu°îs
, 
outClu°îs
, 0);

868 
	`MT_BuûdAndSídZToﬁRe•⁄£
(((
uöt8
)
MT_RPC_CMD_SRSP
 | (uöt8)
MT_RPC_SYS_ZDO
), 
cmdId
, 1, &
ªtVÆue
);

869 
	}
}

880 
	$MT_ZdoBödReque°
(
uöt8
 *
pBuf
)

882 
uöt8
 
cmdId
;

883 
uöt8
 
ªtVÆue
;

884 
zAddrTy≥_t
 
de°Addr
, 
devAddr
;

885 
uöt8
 *
pSrcAddr
, *
±r
;

886 
uöt8
 
§cEPI¡
, 
d°EPI¡
;

887 
uöt16
 
˛u°îID
;

890 
cmdId
 = 
pBuf
[
MT_RPC_POS_CMD1
];

891 
pBuf
 +
MT_RPC_FRAME_HDR_SZ
;

894 
de°Addr
.
addrMode
 = 
Addr16Bô
;

895 
de°Addr
.
addr
.
sh‹tAddr
 = 
	`BUILD_UINT16
–
pBuf
[0],ÖBuf[1] );

896 
pBuf
 += 2;

899 
pSrcAddr
 = 
pBuf
;

900 
pBuf
 +
Z_EXTADDR_LEN
;

903 
§cEPI¡
 = *
pBuf
++;

906 
˛u°îID
 = 
	`BUILD_UINT16
–
pBuf
[0],ÖBuf[1]);

907 
pBuf
 += 2;

910 
devAddr
.
addrMode
 = *
pBuf
++;

913 i‡–
devAddr
.
addrMode
 =
Addr64Bô
 )

915 
±r
 = 
pBuf
;

916 
	`oßl_˝yExtAddr
–
devAddr
.
addr
.
extAddr
, 
±r
 );

920 
devAddr
.
addr
.
sh‹tAddr
 = 
	`BUILD_UINT16
–
pBuf
[0],ÖBuf[1] );

923 
pBuf
 +
Z_EXTADDR_LEN
;

926 
d°EPI¡
 = *
pBuf
;

928 
ªtVÆue
 = (
uöt8
)
	`ZDP_BödReq
–&
de°Addr
, 
pSrcAddr
, 
§cEPI¡
, 
˛u°îID
, &
devAddr
, 
d°EPI¡
, 0);

930 
	`MT_BuûdAndSídZToﬁRe•⁄£
(((
uöt8
)
MT_RPC_CMD_SRSP
 | (uöt8)
MT_RPC_SYS_ZDO
), 
cmdId
, 1, &
ªtVÆue
);

931 
	}
}

942 
	$MT_ZdoUnbödReque°
(
uöt8
 *
pBuf
)

944 
uöt8
 
cmdId
;

945 
uöt8
 
ªtVÆue
;

946 
zAddrTy≥_t
 
de°Addr
, 
devAddr
;

947 
uöt8
 *
pSrcAddr
, *
±r
;

948 
uöt8
 
§cEPI¡
, 
d°EPI¡
;

949 
uöt16
 
˛u°îID
;

952 
cmdId
 = 
pBuf
[
MT_RPC_POS_CMD1
];

953 
pBuf
 +
MT_RPC_FRAME_HDR_SZ
;

956 
de°Addr
.
addrMode
 = 
Addr16Bô
;

957 
de°Addr
.
addr
.
sh‹tAddr
 = 
	`BUILD_UINT16
–
pBuf
[0],ÖBuf[1] );

958 
pBuf
 += 2;

961 
pSrcAddr
 = 
pBuf
;

962 
pBuf
 +
Z_EXTADDR_LEN
;

965 
§cEPI¡
 = *
pBuf
++;

968 
˛u°îID
 = 
	`BUILD_UINT16
–
pBuf
[0],ÖBuf[1]);

969 
pBuf
 += 2;

972 
devAddr
.
addrMode
 = *
pBuf
++;

975 i‡–
devAddr
.
addrMode
 =
Addr64Bô
 )

977 
±r
 = 
pBuf
;

978 
	`oßl_˝yExtAddr
–
devAddr
.
addr
.
extAddr
, 
±r
 );

982 
devAddr
.
addr
.
sh‹tAddr
 = 
	`BUILD_UINT16
–
pBuf
[0],ÖBuf[1] );

985 
pBuf
 +
Z_EXTADDR_LEN
;

988 
d°EPI¡
 = *
pBuf
;

990 
ªtVÆue
 = (
uöt8
)
	`ZDP_UnbödReq
–&
de°Addr
, 
pSrcAddr
, 
§cEPI¡
, 
˛u°îID
, &
devAddr
, 
d°EPI¡
, 0);

992 
	`MT_BuûdAndSídZToﬁRe•⁄£
(((
uöt8
)
MT_RPC_CMD_SRSP
 | (uöt8)
MT_RPC_SYS_ZDO
), 
cmdId
, 1, &
ªtVÆue
);

993 
	}
}

1004 
	$MT_ZdoSèπupFromAµ
(
uöt8
 *
pBuf
)

1006 
uöt8
 
cmdId
;

1007 
uöt8
 
ªtVÆue
;

1010 
cmdId
 = 
pBuf
[
MT_RPC_POS_CMD1
];

1011 
pBuf
 +
MT_RPC_FRAME_HDR_SZ
;

1013 
ªtVÆue
 = 
	`ZDOInôDevi˚
(100);

1015 
	`MT_BuûdAndSídZToﬁRe•⁄£
(((
uöt8
)
MT_RPC_CMD_SRSP
 | (uöt8)
MT_RPC_SYS_ZDO
), 
cmdId
, 1, &
ªtVÆue
);

1016 
	}
}

1018 #i‡
deföed
 (
MT_ZDO_MGMT
)

1028 
	$MT_ZdoMgmtNwkDiscReque°
(
uöt8
 *
pBuf
)

1030 
uöt8
 
cmdId
;

1031 
uöt8
 
ªtVÆue
;

1032 
zAddrTy≥_t
 
de°Addr
;

1033 
uöt32
 
sˇnCh™√ls
;

1034 
uöt8
 
sˇnDuøti⁄
, 
°¨tIndex
;

1037 
cmdId
 = 
pBuf
[
MT_RPC_POS_CMD1
];

1038 
pBuf
 +
MT_RPC_FRAME_HDR_SZ
;

1041 
de°Addr
.
addrMode
 = 
Addr16Bô
;

1042 
de°Addr
.
addr
.
sh‹tAddr
 = 
	`BUILD_UINT16
–
pBuf
[0],ÖBuf[1] );

1043 
pBuf
 += 2;

1046 
sˇnCh™√ls
 = 
	`BUILD_UINT32
–
pBuf
[0],ÖBuf[1],ÖBuf[2],ÖBuf[3] );

1047 
pBuf
 += 4;

1050 
sˇnDuøti⁄
 = *
pBuf
++;

1053 
°¨tIndex
 = *
pBuf
;

1055 
ªtVÆue
 = (
uöt8
)
	`ZDP_MgmtNwkDiscReq
–&
de°Addr
, 
sˇnCh™√ls
, 
sˇnDuøti⁄
, 
°¨tIndex
, 0);

1057 
	`MT_BuûdAndSídZToﬁRe•⁄£
(((
uöt8
)
MT_RPC_CMD_SRSP
 | (uöt8)
MT_RPC_SYS_ZDO
), 
cmdId
, 1, &
ªtVÆue
);

1058 
	}
}

1069 
	$MT_ZdoMgmtLqiReque°
(
uöt8
 *
pBuf
)

1071 
uöt8
 
cmdId
;

1072 
uöt8
 
ªtVÆue
;

1073 
zAddrTy≥_t
 
de°Addr
;

1074 
uöt8
 
°¨tIndex
;

1077 
cmdId
 = 
pBuf
[
MT_RPC_POS_CMD1
];

1078 
pBuf
 +
MT_RPC_FRAME_HDR_SZ
;

1081 
de°Addr
.
addrMode
 = 
Addr16Bô
;

1082 
de°Addr
.
addr
.
sh‹tAddr
 = 
	`BUILD_UINT16
–
pBuf
[0],ÖBuf[1] );

1083 
pBuf
 += 2;

1086 
°¨tIndex
 = *
pBuf
;

1088 
ªtVÆue
 = (
uöt8
)
	`ZDP_MgmtLqiReq
–&
de°Addr
, 
°¨tIndex
, 0);

1090 
	`MT_BuûdAndSídZToﬁRe•⁄£
(((
uöt8
)
MT_RPC_CMD_SRSP
 | (uöt8)
MT_RPC_SYS_ZDO
), 
cmdId
, 1, &
ªtVÆue
);

1091 
	}
}

1102 
	$MT_ZdoMgmtRtgReque°
(
uöt8
 *
pBuf
)

1104 
uöt8
 
cmdId
;

1105 
uöt8
 
ªtVÆue
;

1106 
zAddrTy≥_t
 
de°Addr
;

1107 
uöt8
 
°¨tIndex
;

1110 
cmdId
 = 
pBuf
[
MT_RPC_POS_CMD1
];

1111 
pBuf
 +
MT_RPC_FRAME_HDR_SZ
;

1114 
de°Addr
.
addrMode
 = 
Addr16Bô
;

1115 
de°Addr
.
addr
.
sh‹tAddr
 = 
	`BUILD_UINT16
–
pBuf
[0],ÖBuf[1]);

1116 
pBuf
 += 2;

1119 
°¨tIndex
 = *
pBuf
;

1121 
ªtVÆue
 = (
byã
)
	`ZDP_MgmtRtgReq
–&
de°Addr
, 
°¨tIndex
, 0);

1123 
	`MT_BuûdAndSídZToﬁRe•⁄£
(((
uöt8
)
MT_RPC_CMD_SRSP
 | (uöt8)
MT_RPC_SYS_ZDO
), 
cmdId
, 1, &
ªtVÆue
);

1124 
	}
}

1135 
	$MT_ZdoMgmtBödReque°
(
uöt8
 *
pBuf
)

1137 
uöt8
 
cmdId
;

1138 
uöt8
 
ªtVÆue
;

1139 
zAddrTy≥_t
 
de°Addr
;

1140 
uöt8
 
°¨tIndex
;

1143 
cmdId
 = 
pBuf
[
MT_RPC_POS_CMD1
];

1144 
pBuf
 +
MT_RPC_FRAME_HDR_SZ
;

1147 
de°Addr
.
addrMode
 = 
Addr16Bô
;

1148 
de°Addr
.
addr
.
sh‹tAddr
 = 
	`BUILD_UINT16
–
pBuf
[0],ÖBuf[1] );

1149 
pBuf
 += 2;

1152 
°¨tIndex
 = *
pBuf
;

1154 
ªtVÆue
 = (
uöt8
)
	`ZDP_MgmtBödReq
–&
de°Addr
, 
°¨tIndex
, 0);

1156 
	`MT_BuûdAndSídZToﬁRe•⁄£
(((
uöt8
)
MT_RPC_CMD_SRSP
 | (uöt8)
MT_RPC_SYS_ZDO
), 
cmdId
, 1, &
ªtVÆue
);

1157 
	}
}

1168 
	$MT_ZdoMgmtLóveReque°
(
uöt8
 *
pBuf
)

1170 
uöt8
 
cmdId
;

1171 
uöt8
 
ªtVÆue
;

1172 
zAddrTy≥_t
 
de°Addr
;

1173 
uöt8
 *
pIEEEAddr
;

1174 
uöt8
 
ªmoveChûdªn
, 
ªjoö
;

1177 
cmdId
 = 
pBuf
[
MT_RPC_POS_CMD1
];

1178 
pBuf
 +
MT_RPC_FRAME_HDR_SZ
;

1181 
de°Addr
.
addrMode
 = 
Addr16Bô
;

1182 
de°Addr
.
addr
.
sh‹tAddr
 = 
	`BUILD_UINT16
–
pBuf
[0],ÖBuf[1] );

1183 
pBuf
 += 2;

1186 
pIEEEAddr
 = 
pBuf
;

1187 
pBuf
 +
Z_EXTADDR_LEN
;

1190 
ªmoveChûdªn
 = *
pBuf
++;

1193 
ªjoö
 = *
pBuf
;

1195 
ªtVÆue
 = (
byã
)
	`ZDP_MgmtLóveReq
–&
de°Addr
, 
pIEEEAddr
, 
ªmoveChûdªn
, 
ªjoö
, 0);

1197 
	`MT_BuûdAndSídZToﬁRe•⁄£
(((
uöt8
)
MT_RPC_CMD_SRSP
 | (uöt8)
MT_RPC_SYS_ZDO
), 
cmdId
, 1, &
ªtVÆue
);

1198 
	}
}

1210 
	$MT_ZdoMgmtDúe˘JoöReque°
(
uöt8
 *
pBuf
)

1212 
uöt8
 
cmdId
;

1213 
uöt8
 
ªtVÆue
;

1214 
zAddrTy≥_t
 
de°Addr
;

1215 
uöt8
 *
devi˚Addr
;

1216 
uöt8
 
ˇpInfo
;

1219 
cmdId
 = 
pBuf
[
MT_RPC_POS_CMD1
];

1220 
pBuf
 +
MT_RPC_FRAME_HDR_SZ
;

1223 
de°Addr
.
addrMode
 = 
Addr16Bô
;

1224 
de°Addr
.
addr
.
sh‹tAddr
 = 
	`BUILD_UINT16
–
pBuf
[0],ÖBuf[1] );

1225 
pBuf
 += 2;

1228 
devi˚Addr
 = 
pBuf
;

1229 
pBuf
 +
Z_EXTADDR_LEN
;

1232 
ˇpInfo
 = *
pBuf
;

1234 
ªtVÆue
 = (
uöt8
)
	`ZDP_MgmtDúe˘JoöReq
–&
de°Addr
, 
devi˚Addr
, 
ˇpInfo
, 0);

1236 
	`MT_BuûdAndSídZToﬁRe•⁄£
(((
uöt8
)
MT_RPC_CMD_SRSP
 | (uöt8)
MT_RPC_SYS_ZDO
), 
cmdId
, 1, &
ªtVÆue
);

1237 
	}
}

1248 
	$MT_ZdoMgmtPîmôJoöReque°
(
uöt8
 *
pBuf
)

1250 
uöt8
 
cmdId
;

1251 
uöt8
 
ªtVÆue
;

1252 
zAddrTy≥_t
 
de°Addr
;

1253 
uöt8
 
duøti⁄
, 
tcSignifiˇn˚
;

1256 
cmdId
 = 
pBuf
[
MT_RPC_POS_CMD1
];

1257 
pBuf
 +
MT_RPC_FRAME_HDR_SZ
;

1260 
de°Addr
.
addrMode
 = 
Addr16Bô
;

1261 
de°Addr
.
addr
.
sh‹tAddr
 = 
	`BUILD_UINT16
–
pBuf
[0],ÖBuf[1] );

1262 
pBuf
 += 2;

1265 
duøti⁄
 = *
pBuf
++;

1268 
tcSignifiˇn˚
 = *
pBuf
;

1270 
ªtVÆue
 = (
byã
)
	`ZDP_MgmtPîmôJoöReq
–&
de°Addr
, 
duøti⁄
, 
tcSignifiˇn˚
, 0);

1272 
	`MT_BuûdAndSídZToﬁRe•⁄£
(((
uöt8
)
MT_RPC_CMD_SRSP
 | (uöt8)
MT_RPC_SYS_ZDO
), 
cmdId
, 1, &
ªtVÆue
);

1273 
	}
}

1284 
	$MT_ZdoMgmtNwkUpd©eReque°
(
uöt8
 *
pBuf
)

1286 
uöt8
 
cmdId
;

1287 
uöt8
 
ªtVÆue
;

1288 
zAddrTy≥_t
 
de°Addr
;

1289 
uöt32
 
ch™√lMask
;

1290 
uöt8
 
sˇnDuøti⁄
, 
sˇnCou¡
;

1291 
uöt16
 
nwkM™agîAddr
;

1294 
cmdId
 = 
pBuf
[
MT_RPC_POS_CMD1
];

1295 
pBuf
 +
MT_RPC_FRAME_HDR_SZ
;

1298 
de°Addr
.
addr
.
sh‹tAddr
 = 
	`BUILD_UINT16
–
pBuf
[0],ÖBuf[1] );

1299 
pBuf
 += 2;

1302 
de°Addr
.
addrMode
 = *
pBuf
++;

1304 
ch™√lMask
 = 
	`BUILD_UINT32
–
pBuf
[0],ÖBuf[1],ÖBuf[2],ÖBuf[3]);

1305 
pBuf
 += 4;

1308 
sˇnDuøti⁄
 = *
pBuf
++;

1311 
sˇnCou¡
 = *
pBuf
++;

1314 
nwkM™agîAddr
 = 
	`BUILD_UINT16
–
pBuf
[0],ÖBuf[1] );

1317 
ªtVÆue
 = (
uöt8
)
	`ZDP_MgmtNwkUpd©eReq
–&
de°Addr
, 
ch™√lMask
, 
sˇnDuøti⁄
,

1318 
sˇnCou¡
, 
_NIB
.
nwkUpd©eId
+1, 
nwkM™agîAddr
 );

1324 i‡–
de°Addr
.
addrMode
 =
AddrBrﬂdˇ°
 )

1326 
de°Addr
.
addrMode
 = 
Addr16Bô
;

1327 
de°Addr
.
addr
.
sh‹tAddr
 = 
_NIB
.
nwkDevAddªss
;

1328 
ªtVÆue
 = (
uöt8
Ë
	`ZDP_MgmtNwkUpd©eReq
–&
de°Addr
, 
ch™√lMask
, 
sˇnDuøti⁄
,

1329 
sˇnCou¡
, 
_NIB
.
nwkUpd©eId
+1, 
nwkM™agîAddr
 );

1332 
	`MT_BuûdAndSídZToﬁRe•⁄£
(((
uöt8
)
MT_RPC_CMD_SRSP
 | (uöt8)
MT_RPC_SYS_ZDO
), 
cmdId
, 1, &
ªtVÆue
);

1333 
	}
}

1343 #i‡
deföed
 (
MT_ZDO_CB_FUNC
)

1354 
	$MT_ZdoDúe˘CB
–
afIncomögMSGPackë_t
 *
pD©a
, 
zdoIncomögMsg_t
 *
öMsg
 )

1356 
uöt8
 
d©aLí
;

1357 
uöt8
 
msgLí
;

1358 
uöt8
 *
pBuf
;

1359 
uöt8
 *
p
;

1360 
uöt8
 
id
;

1363 i‡–((
pD©a
->
˛u°îId
 & 
ZDO_RESPONSE_BIT
) == 0)

1364 || 
	`MT_ZdoH™dÀEx˚±i⁄s
–
pD©a
, 
öMsg
 ) )

1371 
id
 = (
uöt8
Ë
pD©a
->
˛u°îId
;

1372 
id
 = 
mtZdoClu°î2R•
[id >> 4][id & 0x0F];

1375 
d©aLí
 = 
pD©a
->
cmd
.
D©aLígth
 - 1;

1378 
msgLí
 = 
d©aLí
 + (
uöt16
);

1381 i‡((
p
 = 
pBuf
 = 
	`MT_Tøn•‹tAŒoc
(((
uöt8
)
MT_RPC_CMD_AREQ
 |(uöt8)
MT_RPC_SYS_ZDO
), 
msgLí
)Ë!
NULL
)

1384 *
p
++ = 
msgLí
;

1385 *
p
++ = (
uöt8
)
MT_RPC_CMD_AREQ
 | (uöt8)
MT_RPC_SYS_ZDO
;

1386 *
p
++ = 
id
;

1389 *
p
++ = 
	`LO_UINT16
(
pD©a
->
§cAddr
.
addr
.
sh‹tAddr
);

1390 *
p
++ = 
	`HI_UINT16
(
pD©a
->
§cAddr
.
addr
.
sh‹tAddr
);

1393 
	`oßl_mem˝y
(
p
, (
pD©a
->
cmd
.
D©a
 + 1), 
d©aLí
);

1396 
	`MT_Tøn•‹tSíd
(
pBuf
);

1398 
	}
}

1409 
uöt8
 
	$MT_ZdoH™dÀEx˚±i⁄s
–
afIncomögMSGPackë_t
 *
pD©a
, 
zdoIncomögMsg_t
 *
öMsg
 )

1411 
uöt8
 
ªt
 = 
TRUE
;

1412 
ZDO_NwkIEEEAddrRe•_t
 *
nwkR•
 = 
NULL
;

1413 
ZDO_Devi˚A¬˚_t
 
devA¬˚
;

1414 
uöt8
 
doDeÁu…
 = 
FALSE
;

1416  
öMsg
->
˛u°îID
 )

1418 
NWK_addr_r•
:

1419 
IEEE_addr_r•
:

1420 
nwkR•
 = 
	`ZDO_P¨£AddrR•
–
öMsg
 );

1421 
	`MT_ZdoAddrR•CB
–
nwkR•
, 
öMsg
->
˛u°îID
 );

1422 i‡–
nwkR•
 )

1423 
	`oßl_mem_‰ì
–
nwkR•
 );

1426 
Devi˚_™n˚
:

1427 
	`ZDO_P¨£Devi˚A¬˚
–
öMsg
, &
devA¬˚
 );

1428 
	`MT_ZdoEndDevA¬˚CB
–&
devA¬˚
, 
öMsg
->
§cAddr
.
addr
.
sh‹tAddr
 );

1431 
Sim∂e_Desc_r•
:

1432 i‡–
pD©a
->
cmd
.
D©aLígth
 > 5 )

1433 
ªt
 = 
FALSE
;

1435 
doDeÁu…
 = 
TRUE
;

1439 
ªt
 = 
FALSE
;

1443 i‡–
doDeÁu…
 )

1445 
ªt
 = 
FALSE
;

1446 
pD©a
->
˛u°îId
 = 0x26;

1447 
pD©a
->
cmd
.
D©aLígth
 = 2;

1450  ( 
ªt
 );

1451 
	}
}

1462 
	$MT_ZdoAddrR•CB
–
ZDO_NwkIEEEAddrRe•_t
 *
pMsg
, 
uöt16
 
˛u°îID
 )

1464 
uöt8
 
li°Lí
;

1465 
uöt8
 
msgLí
;

1466 
uöt8
 *
pBuf
;

1467 
uöt8
 *
p
;

1472 
li°Lí
 = 
pMsg
->
numAssocDevs
;

1475 
msgLí
 = 
MT_ZDO_ADDR_RSP_LEN
 + (
li°Lí
 * (
uöt16
));

1478 i‡((
p
 = 
pBuf
 = 
	`MT_Tøn•‹tAŒoc
(((
uöt8
)
MT_RPC_CMD_AREQ
 | (uöt8)
MT_RPC_SYS_ZDO
), 
msgLí
)Ë!
NULL
)

1481 *
p
++ = 
msgLí
;

1482 *
p
++ = (
uöt8
)
MT_RPC_CMD_AREQ
 | (uöt8)
MT_RPC_SYS_ZDO
;

1483 *
p
++ = (
˛u°îID
 =
IEEE_addr_r•
) ?

1484 
MT_ZDO_IEEE_ADDR_RSP
 : 
MT_ZDO_NWK_ADDR_RSP
;

1488 *
p
++ = 
pMsg
->
°©us
;

1490 
	`oßl_˝yExtAddr
(
p
, 
pMsg
->
extAddr
);

1491 
p
 +
Z_EXTADDR_LEN
;

1493 *
p
++ = 
	`LO_UINT16
(
pMsg
->
nwkAddr
);

1494 *
p
++ = 
	`HI_UINT16
(
pMsg
->
nwkAddr
);

1496 *
p
++ = 
pMsg
->
°¨tIndex
;

1498 *
p
++ = 
li°Lí
;

1500 
	`MT_W‹d2Buf
(
p
, 
pMsg
->
devLi°
, 
li°Lí
);

1503 
	`MT_Tøn•‹tSíd
(
pBuf
);

1505 
	}
}

1516 
	$MT_ZdoEndDevA¬˚CB
–
ZDO_Devi˚A¬˚_t
 *
pMsg
, 
uöt16
 
§cAddr
 )

1518 
uöt8
 *
pBuf
;

1519 
uöt8
 *
p
;

1521 i‡((
p
 = 
pBuf
 = 
	`MT_Tøn•‹tAŒoc
(((
uöt8
)
MT_RPC_CMD_AREQ
 | (uöt8)
MT_RPC_SYS_ZDO
),

1522 
MT_ZDO_END_DEVICE_ANNCE_IND_LEN
)Ë!
NULL
)

1524 *
p
++ = 
MT_ZDO_END_DEVICE_ANNCE_IND_LEN
;

1525 *
p
++ = (
uöt8
)
MT_RPC_CMD_AREQ
 | (uöt8)
MT_RPC_SYS_ZDO
;

1526 *
p
++ = 
MT_ZDO_END_DEVICE_ANNCE_IND
;

1528 *
p
++ = 
	`LO_UINT16
(
§cAddr
);

1529 *
p
++ = 
	`HI_UINT16
(
§cAddr
);

1531 *
p
++ = 
	`LO_UINT16
(
pMsg
->
nwkAddr
);

1532 *
p
++ = 
	`HI_UINT16
(
pMsg
->
nwkAddr
);

1534 
	`oßl_˝yExtAddr
(
p
, 
pMsg
->
extAddr
);

1535 
p
 +
Z_EXTADDR_LEN
;

1537 *
p
 = 
pMsg
->
ˇ∑bûôõs
;

1539 
	`MT_Tøn•‹tSíd
(
pBuf
);

1541 
	}
}

	@Components/mt/MT_ZDO.h

44 
	~"ZComDef.h
"

45 
	~"MT.h
"

46 
	~"APSMEDE.h
"

47 
	~"AF.h
"

48 
	~"ZDProfûe.h
"

49 
	~"ZDObje˘.h
"

50 
	~"ZDAµ.h
"

52 #i‡!
deföed
–
WIN32
 )

53 
	~"OnBﬂrd.h
"

59 
uöt32
 
_zdoCÆlbackSub
;

64 
	#ZDOCB_CHECK
(
cbi
Ë(
_zdoCÆlbackSub
 & (cbi))

	)

73 
uöt8
 
MT_ZdoComm™dPro˚ssög
(uöt8* 
pBuf
);

78 
MT_ZdoDúe˘CB
–
afIncomögMSGPackë_t
 *
pD©a
, 
zdoIncomögMsg_t
 *
öMsg
 );

	@Components/osal/common/OSAL.c

47 
	~<°rög.h
>

49 
	~"comdef.h
"

50 
	~"OSAL.h
"

51 
	~"OSAL_Tasks.h
"

52 
	~"OSAL_Mem‹y.h
"

53 
	~"OSAL_PwrMgr.h
"

54 
	~"OSAL_Clock.h
"

56 
	~"OnBﬂrd.h
"

59 
	~"hÆ_drivîs.h
"

66 
	#OSAL_MSG_LEN
(
msg_±r
Ë((
oßl_msg_hdr_t
 *Ë(msg_±rË- 1)->
Àn


	)

68 
	#OSAL_MSG_ID
(
msg_±r
Ë((
oßl_msg_hdr_t
 *Ë(msg_±rË- 1)->
de°_id


	)

83 
oßl_msg_q_t
 
	goßl_qHód
;

85 #i‡
deföed
–
OSAL_TOTAL_MEM
 )

86 
uöt16
 
	goßl_msg_˙t
;

109 #ifde‡
__KEIL__


110 * 
	$ôﬂ
 ( 
vÆue
, * 
buf„r
, 
ødix
 )

112 (
buf„r
);

113 
	}
}

128 
	$oßl_°æí
–*
pSåög
 )

130  ()–
	`°æí
–
pSåög
 ) );

131 
	}
}

150 *
	$oßl_mem˝y
–*
d°
, c⁄° 
GENERIC
 *
§c
, 
Àn
 )

152 
uöt8
 *
pD°
;

153 c⁄° 
uöt8
 
GENERIC
 *
pSrc
;

155 
pSrc
 = 
§c
;

156 
pD°
 = 
d°
;

158  
Àn
-- )

159 *
pD°
++ = *
pSrc
++;

161  ( 
pD°
 );

162 
	}
}

177 
uöt8
 
	$oßl_memcmp
–c⁄° 
GENERIC
 *
§c1
, c⁄° GENERIC *
§c2
, 
Àn
 )

179 c⁄° 
uöt8
 
GENERIC
 *
pSrc1
;

180 c⁄° 
uöt8
 
GENERIC
 *
pSrc2
;

182 
pSrc1
 = 
§c1
;

183 
pSrc2
 = 
§c2
;

185  
Àn
-- )

187 if–*
pSrc1
++ !*
pSrc2
++ )

188  
FALSE
;

190  
TRUE
;

191 
	}
}

207 *
	$oßl_mem£t
–*
de°
, 
uöt8
 
vÆue
, 
Àn
 )

209  
	`mem£t
–
de°
, 
vÆue
, 
Àn
 );

210 
	}
}

223 
uöt16
 
	$oßl_buûd_uöt16
–
uöt8
 *
sw≠≥d
 )

225  ( 
	`BUILD_UINT16
–
sw≠≥d
[0], swapped[1] ) );

226 
	}
}

240 
uöt32
 
	$oßl_buûd_uöt32
–
uöt8
 *
sw≠≥d
, uöt8 
Àn
 )

242 i‡–
Àn
 == 2 )

243  ( 
	`BUILD_UINT32
–
sw≠≥d
[0], swapped[1], 0L, 0L ) );

244 i‡–
Àn
 == 3 )

245  ( 
	`BUILD_UINT32
–
sw≠≥d
[0], swapped[1], swapped[2], 0L ) );

246 i‡–
Àn
 == 4 )

247  ( 
	`BUILD_UINT32
–
sw≠≥d
[0], swapped[1], swapped[2], swapped[3] ) );

249  ( (
uöt32
)
sw≠≥d
[0] );

250 
	}
}

252 #i‡!
deföed
 ( 
ZBIT
 ) && !deföed ( 
ZBIT2
 ) && !deföed (
UBIT
)

266 * 
	$_…ﬂ
(
l
, *
buf
, 
ødix
)

268 #i‡
	`deföed
–
__GNUC__
 )

269  ( (*)
	`…ﬂ
–
l
, 
buf
, 
ødix
 ) );

271 
tmp1
[10] = "", 
tmp2
[10] = "", 
tmp3
[10] = "";

272 
num1
, 
num2
, 
num3
;

273 
i
;

275 
buf
[0] = '\0';

277 i‡–
ødix
 == 10 )

279 
num1
 = 
l
 % 10000;

280 
num2
 = (
l
 / 10000) % 10000;

281 
num3
 = ()(
l
 / 100000000);

283 i‡(
num3
Ë
	`_ôﬂ
“um3, 
tmp3
, 10);

284 i‡(
num2
Ë
	`_ôﬂ
“um2, 
tmp2
, 10);

285 i‡(
num1
Ë
	`_ôﬂ
“um1, 
tmp1
, 10);

287 i‡(
num3
)

289 
	`°r˝y
((*)
buf
, (c⁄°*)
tmp3
);

290 
i
 = 0; i < 4 - 
	`°æí
((c⁄°*)
tmp2
); i++)

291 
	`°rˇt
((*)
buf
, "0");

293 
	`°rˇt
((*)
buf
, (c⁄°*)
tmp2
);

294 i‡(
num3
 || 
num2
)

296 
i
 = 0; i < 4 - 
	`°æí
((c⁄°*)
tmp1
); i++)

297 
	`°rˇt
((*)
buf
, "0");

299 
	`°rˇt
((*)
buf
, (c⁄°*)
tmp1
);

300 i‡(!
num3
 && !
num2
 && !
num1
)

301 
	`°r˝y
((*)
buf
, "0");

303 i‡–
ødix
 == 16 )

305 
num1
 = 
l
 & 0x0000FFFF;

306 
num2
 = 
l
 >> 16;

308 i‡(
num2
Ë
	`_ôﬂ
“um2, 
tmp2
, 16);

309 i‡(
num1
Ë
	`_ôﬂ
“um1, 
tmp1
, 16);

311 i‡(
num2
)

313 
	`°r˝y
((*)
buf
,(c⁄°*)
tmp2
);

314 
i
 = 0; i < 4 - 
	`°æí
((c⁄°*)
tmp1
); i++)

315 
	`°rˇt
((*)
buf
, "0");

317 
	`°rˇt
((*)
buf
, (c⁄°*)
tmp1
);

318 i‡(!
num2
 && !
num1
)

319 
	`°r˝y
((*)
buf
, "0");

322  
NULL
;

324  
buf
;

326 
	}
}

338 
uöt16
 
	$oßl_ønd
( )

340  ( 
	`Onbﬂrd_ønd
() );

341 
	}
}

369 
uöt8
 * 
	$oßl_msg_Æloˇã
–
uöt16
 
Àn
 )

371 
oßl_msg_hdr_t
 *
hdr
;

373 i‡–
Àn
 == 0 )

374  ( 
NULL
 );

376 
hdr
 = (
oßl_msg_hdr_t
 *Ë
	`oßl_mem_Æloc
–()(
Àn
 + ( osal_msg_hdr_t )) );

377 i‡–
hdr
 )

379 
hdr
->
√xt
 = 
NULL
;

380 
hdr
->
Àn
 =Üen;

381 
hdr
->
de°_id
 = 
TASK_NO_TASK
;

383 #i‡
	`deföed
–
OSAL_TOTAL_MEM
 )

384 
oßl_msg_˙t
++;

386  ( (
uöt8
 *Ë(
hdr
 + 1) );

389  ( 
NULL
 );

390 
	}
}

406 
uöt8
 
	$oßl_msg_dóŒoˇã
–
uöt8
 *
msg_±r
 )

408 
uöt8
 *
x
;

410 i‡–
msg_±r
 =
NULL
 )

411  ( 
INVALID_MSG_POINTER
 );

414 i‡–
	`OSAL_MSG_ID
–
msg_±r
 ) !
TASK_NO_TASK
 )

415  ( 
MSG_BUFFER_NOT_AVAIL
 );

417 
x
 = (
uöt8
 *)((uöt8 *)
msg_±r
 - –
oßl_msg_hdr_t
 ));

419 
	`oßl_mem_‰ì
–(*)
x
 );

421 #i‡
	`deföed
–
OSAL_TOTAL_MEM
 )

422 i‡–
oßl_msg_˙t
 )

423 
oßl_msg_˙t
--;

426  ( 
SUCCESS
 );

427 
	}
}

429 #i‡
deföed
–
OSAL_TOTAL_MEM
 )

441 
uöt16
 
	$oßl_num_msgs
( )

443  ( 
oßl_msg_˙t
 );

444 
	}
}

465 
uöt8
 
	$oßl_msg_£nd
–
uöt8
 
de°ö©i⁄_èsk
, uöt8 *
msg_±r
 )

467 i‡–
msg_±r
 =
NULL
 )

468  ( 
INVALID_MSG_POINTER
 );

470 i‡–
de°ö©i⁄_èsk
 >
èsksC¡
 )

472 
	`oßl_msg_dóŒoˇã
–
msg_±r
 );

473  ( 
INVALID_TASK
 );

477 i‡–
	`OSAL_MSG_NEXT
–
msg_±r
 ) !
NULL
 ||

478 
	`OSAL_MSG_ID
–
msg_±r
 ) !
TASK_NO_TASK
 )

480 
	`oßl_msg_dóŒoˇã
–
msg_±r
 );

481  ( 
INVALID_MSG_POINTER
 );

484 
	`OSAL_MSG_ID
–
msg_±r
 ) = 
de°ö©i⁄_èsk
;

487 
	`oßl_msg_íqueue
–&
oßl_qHód
, 
msg_±r
 );

490 
	`oßl_£t_evít
–
de°ö©i⁄_èsk
, 
SYS_EVENT_MSG
 );

492  ( 
SUCCESS
 );

493 
	}
}

508 
uöt8
 *
	$oßl_msg_ª˚ive
–
uöt8
 
èsk_id
 )

510 
oßl_msg_hdr_t
 *
li°Hdr
;

511 
oßl_msg_hdr_t
 *
¥evHdr
=0;

512 
hÆI¡Sèã_t
 
ötSèã
;

515 
	`HAL_ENTER_CRITICAL_SECTION
(
ötSèã
);

518 
li°Hdr
 = 
oßl_qHód
;

521  
li°Hdr
 !
NULL
 )

523 i‡–(
li°Hdr
 - 1)->
de°_id
 =
èsk_id
 )

527 
¥evHdr
 = 
li°Hdr
;

528 
li°Hdr
 = 
	`OSAL_MSG_NEXT
(ÜistHdr );

532 i‡–
li°Hdr
 =
NULL
 )

535 
	`HAL_EXIT_CRITICAL_SECTION
(
ötSèã
);

536  
NULL
;

540 
	`oßl_msg_exåa˘
–&
oßl_qHód
, 
li°Hdr
, 
¥evHdr
 );

543 
	`HAL_EXIT_CRITICAL_SECTION
(
ötSèã
);

545  ( (
uöt8
*Ë
li°Hdr
 );

546 
	}
}

560 
	$oßl_msg_íqueue
–
oßl_msg_q_t
 *
q_±r
, *
msg_±r
 )

562 *
li°
;

563 
hÆI¡Sèã_t
 
ötSèã
;

566 
	`HAL_ENTER_CRITICAL_SECTION
(
ötSèã
);

568 
	`OSAL_MSG_NEXT
–
msg_±r
 ) = 
NULL
;

570 i‡–*
q_±r
 =
NULL
 )

572 *
q_±r
 = 
msg_±r
;

577  
li°
 = *
q_±r
; 
	`OSAL_MSG_NEXT
–li° ) !
NULL
;Üist = OSAL_MSG_NEXT(Üist ) );

580 
	`OSAL_MSG_NEXT
–
li°
 ) = 
msg_±r
;

584 
	`HAL_EXIT_CRITICAL_SECTION
(
ötSèã
);

585 
	}
}

598 *
	$oßl_msg_dequeue
–
oßl_msg_q_t
 *
q_±r
 )

600 *
msg_±r
;

601 
hÆI¡Sèã_t
 
ötSèã
;

604 
	`HAL_ENTER_CRITICAL_SECTION
(
ötSèã
);

606 i‡–*
q_±r
 =
NULL
 )

608 
	`HAL_EXIT_CRITICAL_SECTION
(
ötSèã
);

609  
NULL
;

613 
msg_±r
 = *
q_±r
;

614 *
q_±r
 = 
	`OSAL_MSG_NEXT
–
msg_±r
 );

615 
	`OSAL_MSG_NEXT
–
msg_±r
 ) = 
NULL
;

616 
	`OSAL_MSG_ID
–
msg_±r
 ) = 
TASK_NO_TASK
;

619 
	`HAL_EXIT_CRITICAL_SECTION
(
ötSèã
);

621  
msg_±r
;

622 
	}
}

637 
	$oßl_msg_push
–
oßl_msg_q_t
 *
q_±r
, *
msg_±r
 )

639 
hÆI¡Sèã_t
 
ötSèã
;

642 
	`HAL_ENTER_CRITICAL_SECTION
(
ötSèã
);

645 
	`OSAL_MSG_NEXT
–
msg_±r
 ) = *
q_±r
;

646 *
q_±r
 = 
msg_±r
;

649 
	`HAL_EXIT_CRITICAL_SECTION
(
ötSèã
);

650 
	}
}

666 
	$oßl_msg_exåa˘
–
oßl_msg_q_t
 *
q_±r
, *
msg_±r
, *
¥ev_±r
 )

668 
hÆI¡Sèã_t
 
ötSèã
;

671 
	`HAL_ENTER_CRITICAL_SECTION
(
ötSèã
);

673 i‡–
msg_±r
 =*
q_±r
 )

676 *
q_±r
 = 
	`OSAL_MSG_NEXT
–
msg_±r
 );

681 
	`OSAL_MSG_NEXT
–
¥ev_±r
 ) = OSAL_MSG_NEXT–
msg_±r
 );

683 
	`OSAL_MSG_NEXT
–
msg_±r
 ) = 
NULL
;

684 
	`OSAL_MSG_ID
–
msg_±r
 ) = 
TASK_NO_TASK
;

687 
	`HAL_EXIT_CRITICAL_SECTION
(
ötSèã
);

688 
	}
}

704 
uöt8
 
	$oßl_msg_íqueue_max
–
oßl_msg_q_t
 *
q_±r
, *
msg_±r
, 
uöt8
 
max
 )

706 *
li°
;

707 
uöt8
 
ªt
 = 
FALSE
;

708 
hÆI¡Sèã_t
 
ötSèã
;

711 
	`HAL_ENTER_CRITICAL_SECTION
(
ötSèã
);

714 i‡–*
q_±r
 =
NULL
 )

716 *
q_±r
 = 
msg_±r
;

717 
ªt
 = 
TRUE
;

722 
li°
 = *
q_±r
;

723 
max
--;

724  (
	`OSAL_MSG_NEXT
–
li°
 ) !
NULL
Ë&& (
max
 > 0) )

726 
li°
 = 
	`OSAL_MSG_NEXT
(Üist );

727 
max
--;

731 i‡–
max
 != 0 )

733 
	`OSAL_MSG_NEXT
–
li°
 ) = 
msg_±r
;

734 
ªt
 = 
TRUE
;

739 
	`HAL_EXIT_CRITICAL_SECTION
(
ötSèã
);

741  
ªt
;

742 
	}
}

757 
uöt8
 
	$oßl_£t_evít
–
uöt8
 
èsk_id
, 
uöt16
 
evít_Êag
 )

759 i‡–
èsk_id
 < 
èsksC¡
 )

761 
hÆI¡Sèã_t
 
ötSèã
;

762 
	`HAL_ENTER_CRITICAL_SECTION
(
ötSèã
);

763 
èsksEvíts
[
èsk_id
] |
evít_Êag
;

764 
	`HAL_EXIT_CRITICAL_SECTION
(
ötSèã
);

767  ( 
INVALID_TASK
 );

769  ( 
SUCCESS
 );

770 
	}
}

785 
uöt8
 
oßl_i§_ªgi°î
–uöt8 
öãºu±_id
, (*
i§_±r
)( uint8* ) )

788 ()
öãºu±_id
;

789 ()
i§_±r
;

790  ( 
SUCCESS
 );

791 
	}
}

810 
uöt8
 
	$oßl_öt_íabÀ
–
uöt8
 
öãºu±_id
 )

813 i‡–
öãºu±_id
 =
INTS_ALL
 )

815 
	`HAL_ENABLE_INTERRUPTS
();

818  ( 
INVALID_INTERRUPT_ID
 );

820  ( 
SUCCESS
 );

821 
	}
}

839 
uöt8
 
	$oßl_öt_dißbÀ
–
uöt8
 
öãºu±_id
 )

842 i‡–
öãºu±_id
 =
INTS_ALL
 )

844 
	`HAL_DISABLE_INTERRUPTS
();

847  ( 
INVALID_INTERRUPT_ID
 );

849  ( 
SUCCESS
 );

850 
	}
}

864 
uöt8
 
	$oßl_öô_sy°em
( )

867 
	`oßl_mem_öô
();

870 
oßl_qHód
 = 
NULL
;

872 #i‡
	`deföed
–
OSAL_TOTAL_MEM
 )

873 
oßl_msg_˙t
 = 0;

877 
	`oßlTimîInô
();

880 
	`oßl_pwrmgr_öô
();

883 
	`oßlInôTasks
();

886 
	`oßl_mem_kick
();

888  ( 
SUCCESS
 );

889 
	}
}

906 
	$oßl_°¨t_sy°em
( )

908 #i‡!
	`deföed
 ( 
ZBIT
 ) && !deföed ( 
UBIT
 )

912 
uöt8
 
idx
 = 0;

914 
	`oßlTimeUpd©e
();

916 
	`HÆ_Pro˚ssPﬁl
();

919 i‡(
èsksEvíts
[
idx
])

923 } ++
idx
 < 
èsksC¡
);

925 i‡(
idx
 < 
èsksC¡
)

927 
uöt16
 
evíts
;

928 
hÆI¡Sèã_t
 
ötSèã
;

930 
	`HAL_ENTER_CRITICAL_SECTION
(
ötSèã
);

931 
evíts
 = 
èsksEvíts
[
idx
];

932 
èsksEvíts
[
idx
] = 0;

933 
	`HAL_EXIT_CRITICAL_SECTION
(
ötSèã
);

935 
evíts
 = (
èsksAº
[
idx
])( idx,Évents );

937 
	`HAL_ENTER_CRITICAL_SECTION
(
ötSèã
);

938 
èsksEvíts
[
idx
] |
evíts
;

939 
	`HAL_EXIT_CRITICAL_SECTION
(
ötSèã
);

941 #i‡
	`deföed
–
POWER_SAVING
 )

944 
	`oßl_pwrmgr_powîc⁄£rve
();

948 
	}
}

962 
uöt8
* 
	$oßl_buf„r_uöt32
–
uöt8
 *
buf
, 
uöt32
 
vÆ
 )

964 *
buf
++ = 
	`BREAK_UINT32
–
vÆ
, 0 );

965 *
buf
++ = 
	`BREAK_UINT32
–
vÆ
, 1 );

966 *
buf
++ = 
	`BREAK_UINT32
–
vÆ
, 2 );

967 *
buf
++ = 
	`BREAK_UINT32
–
vÆ
, 3 );

969  
buf
;

970 
	}
}

985 
uöt8
* 
	$oßl_buf„r_uöt24
–
uöt8
 *
buf
, 
uöt24
 
vÆ
 )

987 *
buf
++ = 
	`BREAK_UINT32
–
vÆ
, 0 );

988 *
buf
++ = 
	`BREAK_UINT32
–
vÆ
, 1 );

989 *
buf
++ = 
	`BREAK_UINT32
–
vÆ
, 2 );

991  
buf
;

992 
	}
}

	@Components/osal/common/OSAL_Clock.c

43 
	~"comdef.h
"

44 
	~"OnBﬂrd.h
"

45 
	~"OSAL.h
"

46 
	~"OSAL_Clock.h
"

58 
	#MAXCALCTICKS
 ((
uöt16
)(8188))

	)

60 
	#BEGYEAR
 2000

61 
	#DAY
 86400UL

62 
	#IsLópYór
(
yr
Ë(!((yrË% 4Ë&& (((yrË% 100Ë|| !((yrË% 400)))

	)

63 
	#YórLígth
(
yr
Ë(
	`IsLópYór
(yrË? 366 : 365)

	)

82 
uöt16
 
macMcuPªcisi⁄Cou¡
();

87 
uöt16
 
	g¥eviousMacTimîTick
 = 0;

88 
uöt16
 
	gªmUsTicks
 = 0;

89 
uöt16
 
	gtimeMSec
 = 0;

93 
UTCTime
 
	gOSAL_timeSec⁄ds
 = 0;

98 
uöt8
 
m⁄thLígth
–uöt8 
Õyr
, uöt8 
m⁄
 );

100 
oßlClockUpd©e
–
uöt16
 
ñ≠£dMSec
 );

120 
	$oßlTimeUpd©e
( )

122 
uöt16
 
tmp
;

123 
uöt16
 
ticks320us
;

124 
uöt16
 
ñ≠£dMSec
 = 0;

127 
tmp
 = 
	`macMcuPªcisi⁄Cou¡
();

129 i‡–
tmp
 !
¥eviousMacTimîTick
 )

132 
ticks320us
 = 
tmp
 - 
¥eviousMacTimîTick
;

135 
¥eviousMacTimîTick
 = 
tmp
;

140  
ticks320us
 > 
MAXCALCTICKS
 )

142 
ticks320us
 -
MAXCALCTICKS
;

143 
ñ≠£dMSec
 +
MAXCALCTICKS
 * 8 / 25;

144 
ªmUsTicks
 +
MAXCALCTICKS
 * 8 % 25;

149 
tmp
 = (
ticks320us
 * 8Ë+ 
ªmUsTicks
;

152 
ñ≠£dMSec
 +
tmp
 / 25;

153 
ªmUsTicks
 = 
tmp
 % 25;

156 i‡–
ñ≠£dMSec
 )

158 
	`oßlClockUpd©e
–
ñ≠£dMSec
 );

159 
	`oßlTimîUpd©e
–
ñ≠£dMSec
 );

162 
	}
}

173 
	$oßlClockUpd©e
–
uöt16
 
ñ≠£dMSec
 )

176 
timeMSec
 +
ñ≠£dMSec
;

179 i‡–
timeMSec
 > 1000 )

181 
OSAL_timeSec⁄ds
 +
timeMSec
 / 1000;

182 
timeMSec
 =ÅimeMSec % 1000;

184 
	}
}

197 
	$oßl_£tClock
–
UTCTime
 
√wTime
 )

199 
OSAL_timeSec⁄ds
 = 
√wTime
;

200 
	}
}

214 
UTCTime
 
	$oßl_gëClock
( )

216  ( 
OSAL_timeSec⁄ds
 );

217 
	}
}

231 
	$oßl_C⁄vîtUTCTime
–
UTCTimeSåu˘
 *
tm
, 
UTCTime
 
£cTime
 )

235 
uöt32
 
day
 = 
£cTime
 % 
DAY
;

236 
tm
->
£c⁄ds
 = 
day
 % 60UL;

237 
tm
->
möuãs
 = (
day
 % 3600UL) / 60;

238 
tm
->
hour
 = 
day
 / 3600UL;

243 
uöt16
 
numDays
 = 
£cTime
 / 
DAY
;

244 
tm
->
yór
 = 
BEGYEAR
;

245  
numDays
 >
	`YórLígth
–
tm
->
yór
 ) )

247 
numDays
 -
	`YórLígth
–
tm
->
yór
 );

248 
tm
->
yór
++;

251 
tm
->
m⁄th
 = 0;

252  
numDays
 >
	`m⁄thLígth
–
	`IsLópYór
–
tm
->
yór
 ),Åm->
m⁄th
 ) )

254 
numDays
 -
	`m⁄thLígth
–
	`IsLópYór
–
tm
->
yór
 ),Åm->
m⁄th
 );

255 
tm
->
m⁄th
++;

258 
tm
->
day
 = 
numDays
;

260 
	}
}

271 
uöt8
 
	$m⁄thLígth
–
uöt8
 
Õyr
, uöt8 
m⁄
 )

273 
uöt8
 
days
 = 31;

275 i‡–
m⁄
 == 1 )

276 
days
 = ( 28 + 
Õyr
 );

279 i‡–
m⁄
 > 6 )

280 
m⁄
--;

282 i‡–(
m⁄
 % 2) == 1 )

283 
days
 = 30;

286  ( 
days
 );

287 
	}
}

	@Components/osal/common/OSAL_Memory.c

44 
	~"comdef.h
"

45 
	~"OSAL_Mem‹y.h
"

46 
	~"OnBﬂrd.h
"

47 
	~"hÆ_as£π.h
"

49 #i‡–
MAXMEMHEAP
 >= 32768 )

50 #îr‹ 
MAXMEMHEAP
 
is
 
too
 
big
 
to
 
m™age
!

54 #i‡!
deföed
 ( 
OSALMEM_MIN_BLKSZ
 )

55 
	#OSALMEM_MIN_BLKSZ
 4

	)

61 #i‡!
deföed
 ( 
OSALMEM_SMALL_BLKSZ
 )

62 
	#OSALMEM_SMALL_BLKSZ
 16

	)

65 #i‡!
deföed
 ( 
OSALMEM_NODEBUG
 )

66 
	#OSALMEM_NODEBUG
 
TRUE


	)

69 #i‡!
deföed
 ( 
OSALMEM_PROFILER
 )

70 
	#OSALMEM_PROFILER
 
FALSE


	)

73 #i‡–
OSALMEM_PROFILER
 )

74 
	#OSALMEM_INIT
 'X'

	)

75 
	#OSALMEM_ALOC
 'A'

	)

76 
	#OSALMEM_REIN
 'F'

	)

92 #i‡–
OSALMEM_NODEBUG
 )

93 
	#OSALMEM_ASSERT
–
ex¥
 )

	)

94 
	#OSALMEM_DEBUG
–
°©emít
 )

	)

96 
	#OSALMEM_ASSERT
–
ex¥
Ë
	`HAL_ASSERT
–ex¥ )

	)

97 
	#OSALMEM_DEBUG
–
°©emít
Ë
	`°
–°©emíà)

	)

104 
uöt16
 
	toßlMemHdr_t
;

110 
	#OSALMEM_IN_USE
 0x8000

	)

116 
	#SMALLBLKHEAP
 232

	)

120 
	#HDRSZ
 ( ( ( 
hÆD©aAlign_t
 ) > –
oßlMemHdr_t
 )Ë? \

	)

121  ( 
hÆD©aAlign_t
 ) : –
oßlMemHdr_t
 ) )

139 
oßlMemHdr_t
 *
ff1
;

140 
oßlMemHdr_t
 *
ff2
;

142 #i‡–
OSALMEM_METRICS
 )

143 
uöt16
 
blkMax
;

144 
uöt16
 
blkC¡
;

145 
uöt16
 
blkFªe
;

146 
uöt16
 
memAlo
;

147 
uöt16
 
memMax
;

150 #i‡–
OSALMEM_PROFILER
 )

151 
	#OSALMEM_PROMAX
 8

	)

156 
uöt16
 
¥oC¡
[
OSALMEM_PROMAX
] = {

157 
OSALMEM_SMALL_BLKSZ
, 48, 112, 176, 192, 224, 256, 65535 
	}
};

158 
uöt16
 
	g¥oCur
[
OSALMEM_PROMAX
] = { 0 };

159 
uöt16
 
	g¥oMax
[
OSALMEM_PROMAX
] = { 0 };

160 
uöt16
 
	g¥oTŸ
[
OSALMEM_PROMAX
] = { 0 };

161 
uöt16
 
	g¥oSmÆlBlkMiss
;

165 #i‡
deföed
–
EXTERNAL_RAM
 )

166 
byã
 *
	gtheHóp
 = (byã *)
EXT_RAM_BEG
;

168 
hÆD©aAlign_t
 
	g_theHóp
[ 
MAXMEMHEAP
 / ( halDataAlign_t ) ];

169 
uöt8
 *
	gtheHóp
 = (uöt8 *)
_theHóp
;

185 
	$oßl_mem_öô
( )

187 
oßlMemHdr_t
 *
tmp
;

189 #i‡–
OSALMEM_PROFILER
 )

190 
	`oßl_mem£t
–
theHóp
, 
OSALMEM_INIT
, 
MAXMEMHEAP
 );

194 
tmp
 = (
oßlMemHdr_t
 *)
theHóp
 + (
MAXMEMHEAP
 / 
HDRSZ
) - 1;

195 *
tmp
 = 0;

198 
tmp
 = (
oßlMemHdr_t
 *)
theHóp
;

199 *
tmp
 = 
SMALLBLKHEAP
;

202 
tmp
 = (
oßlMemHdr_t
 *)
theHóp
 + (
SMALLBLKHEAP
 / 
HDRSZ
);

203 *
tmp
 = ((
MAXMEMHEAP
 / 
HDRSZ
Ë* HDRSZË- 
SMALLBLKHEAP
 - HDRSZ;

207 
ff1
 = 
tmp
;

208 
ff2
 = 
	`oßl_mem_Æloc
( 0 );

209 
ff1
 = (
oßlMemHdr_t
 *)
theHóp
;

211 #i‡–
OSALMEM_METRICS
 )

215 
blkC¡
 = 
blkFªe
 = 2;

217 
	}
}

230 
	$oßl_mem_kick
( )

232 
hÆI¡Sèã_t
 
ötSèã
;

234 
	`HAL_ENTER_CRITICAL_SECTION
–
ötSèã
 );

239 
ff1
 = 
ff2
;

241 
	`HAL_EXIT_CRITICAL_SECTION
–
ötSèã
 );

242 
	}
}

253 *
	$oßl_mem_Æloc
–
uöt16
 
size
 )

255 
oßlMemHdr_t
 *
¥ev
;

256 
oßlMemHdr_t
 *
hdr
;

257 
hÆI¡Sèã_t
 
ötSèã
;

258 
uöt16
 
tmp
;

259 
uöt8
 
cﬂl
 = 0;

261 
	`OSALMEM_ASSERT
–
size
 );

263 
size
 +
HDRSZ
;

266 i‡––
hÆD©aAlign_t
 ) == 2 )

268 
size
 += (size & 0x01);

270 i‡––
hÆD©aAlign_t
 ) != 1 )

272 c⁄° 
uöt8
 
mod
 = 
size
 % –
hÆD©aAlign_t
 );

274 i‡–
mod
 != 0 )

276 
size
 +(–
hÆD©aAlign_t
 ) - 
mod
);

280 
	`HAL_ENTER_CRITICAL_SECTION
–
ötSèã
 );

283 i‡–
size
 <
OSALMEM_SMALL_BLKSZ
 )

285 
hdr
 = 
ff1
;

289 
hdr
 = 
ff2
;

291 
tmp
 = *
hdr
;

295 i‡–
tmp
 & 
OSALMEM_IN_USE
 )

297 
tmp
 ^
OSALMEM_IN_USE
;

298 
cﬂl
 = 0;

302 i‡–
cﬂl
 != 0 )

304 #i‡–
OSALMEM_METRICS
 )

305 
blkC¡
--;

306 
blkFªe
--;

309 *
¥ev
 +*
hdr
;

311 i‡–*
¥ev
 >
size
 )

313 
hdr
 = 
¥ev
;

314 
tmp
 = *
hdr
;

320 i‡–
tmp
 >
size
 )

325 
cﬂl
 = 1;

326 
¥ev
 = 
hdr
;

330 
hdr
 = (
oßlMemHdr_t
 *)((
uöt8
 *)hd∏+ 
tmp
);

332 
tmp
 = *
hdr
;

333 i‡–
tmp
 == 0 )

335 
hdr
 = 
NULL
;

342 i‡–
hdr
 !
NULL
 )

344 
tmp
 -
size
;

347 i‡–
tmp
 >
OSALMEM_MIN_BLKSZ
 )

350 
oßlMemHdr_t
 *
√xt
 = (oßlMemHdr_à*)((
uöt8
 *)
hdr
 + 
size
);

351 *
√xt
 = 
tmp
;

352 *
hdr
 = (
size
 | 
OSALMEM_IN_USE
);

354 #i‡–
OSALMEM_METRICS
 )

355 
blkC¡
++;

356 i‡–
blkMax
 < 
blkC¡
 )

358 
blkMax
 = 
blkC¡
;

360 
memAlo
 +
size
;

365 #i‡–
OSALMEM_METRICS
 )

366 
memAlo
 +*
hdr
;

367 
blkFªe
--;

370 *
hdr
 |
OSALMEM_IN_USE
;

373 #i‡–
OSALMEM_METRICS
 )

374 i‡–
memMax
 < 
memAlo
 )

376 
memMax
 = 
memAlo
;

380 #i‡–
OSALMEM_PROFILER
 )

382 
byã
 
idx
;

383 
size
 = *
hdr
 ^ 
OSALMEM_IN_USE
;

385  
idx
 = 0; idx < 
OSALMEM_PROMAX
; idx++ )

387 i‡–
size
 <
¥oC¡
[
idx
] )

392 
¥oCur
[
idx
]++;

393 i‡–
¥oMax
[
idx
] < 
¥oCur
[idx] )

395 
¥oMax
[
idx
] = 
¥oCur
[idx];

397 
¥oTŸ
[
idx
]++;

401 
hdr
++;

403 #i‡–
OSALMEM_PROFILER
 )

404 
	`oßl_mem£t
–(
byã
 *)
hdr
, 
OSALMEM_ALOC
, (
size
 - 
HDRSZ
) );

414 i‡–(
size
 <
OSALMEM_SMALL_BLKSZ
Ë&& (
hdr
 > 
ff2
) )

416 
¥oSmÆlBlkMiss
++;

421 
	`HAL_EXIT_CRITICAL_SECTION
–
ötSèã
 );

423  (*)
hdr
;

424 
	}
}

435 
	$oßl_mem_‰ì
–*
±r
 )

437 
oßlMemHdr_t
 *
cuºHdr
;

438 
hÆI¡Sèã_t
 
ötSèã
;

440 
	`HAL_ENTER_CRITICAL_SECTION
–
ötSèã
 );

442 
	`OSALMEM_ASSERT
–
±r
 );

444 
cuºHdr
 = (
oßlMemHdr_t
 *)
±r
 - 1;

447 
	`OSALMEM_ASSERT
–*
cuºHdr
 & 
OSALMEM_IN_USE
 );

449 *
cuºHdr
 &~
OSALMEM_IN_USE
;

451 #i‡–
OSALMEM_PROFILER
 )

453 
uöt16
 
size
 = *
cuºHdr
;

454 
byã
 
idx
;

456  
idx
 = 0; idx < 
OSALMEM_PROMAX
; idx++ )

458 i‡–
size
 <
¥oC¡
[
idx
] )

464 
¥oCur
[
idx
]--;

468 #i‡–
OSALMEM_METRICS
 )

469 
memAlo
 -*
cuºHdr
;

470 
blkFªe
++;

473 i‡–
ff1
 > 
cuºHdr
 )

475 
ff1
 = 
cuºHdr
;

478 #i‡–
OSALMEM_PROFILER
 )

479 
	`oßl_mem£t
–(
byã
 *)
cuºHdr
+
HDRSZ
, 
OSALMEM_REIN
, (*currHdr - HDRSZ) );

482 
	`HAL_EXIT_CRITICAL_SECTION
–
ötSèã
 );

483 
	}
}

485 #i‡–
OSALMEM_METRICS
 )

495 
uöt16
 
	$oßl_hóp_block_max
( )

497  
blkMax
;

498 
	}
}

509 
uöt16
 
	$oßl_hóp_block_˙t
( )

511  
blkC¡
;

512 
	}
}

523 
uöt16
 
	$oßl_hóp_block_‰ì
( )

525  
blkFªe
;

526 
	}
}

537 
uöt16
 
	$oßl_hóp_mem_u£d
( )

539  
memAlo
;

540 
	}
}

543 #i‡
deföed
 (
ZTOOL_P1
Ë|| deföed (
ZTOOL_P2
)

553 
uöt16
 
	$oßl_hóp_high_w©î
( )

555 #i‡–
OSALMEM_METRICS
 )

556  
memMax
;

558  
MAXMEMHEAP
;

560 
	}
}

	@Components/osal/common/OSAL_PwrMgr.c

44 
	~"comdef.h
"

45 
	~"OnBﬂrd.h
"

46 
	~"OSAL.h
"

47 
	~"OSAL_Tasks.h
"

48 
	~"OSAL_Timîs.h
"

49 
	~"OSAL_PwrMgr.h
"

69 
pwrmgr_©åibuã_t
 
	gpwrmgr_©åibuã
;

100 
	$oßl_pwrmgr_öô
( )

102 
pwrmgr_©åibuã
.
pwrmgr_devi˚
 = 
PWRMGR_ALWAYS_ON
;

103 
pwrmgr_©åibuã
.
pwrmgr_èsk_°©e
 = 0;

104 
	}
}

118 
	$oßl_pwrmgr_devi˚
–
uöt8
 
pwrmgr_devi˚
 )

120 
pwrmgr_©åibuã
.
pwrmgr_devi˚
 =Öwrmgr_device;

121 
	}
}

135 
uöt8
 
	$oßl_pwrmgr_èsk_°©e
–
uöt8
 
èsk_id
, uöt8 
°©e
 )

137 i‡–
èsk_id
 >
èsksC¡
 )

138  ( 
INVALID_TASK
 );

140 i‡–
°©e
 =
PWRMGR_CONSERVE
 )

143 
pwrmgr_©åibuã
.
pwrmgr_èsk_°©e
 &~(1 << 
èsk_id
 );

148 
pwrmgr_©åibuã
.
pwrmgr_èsk_°©e
 |(1 << 
èsk_id
);

151  ( 
SUCCESS
 );

152 
	}
}

154 #i‡
deföed
–
POWER_SAVING
 )

165 
	$oßl_pwrmgr_powîc⁄£rve
( )

167 
uöt16
 
√xt
;

168 
hÆI¡Sèã_t
 
ötSèã
;

171 i‡–
pwrmgr_©åibuã
.
pwrmgr_devi˚
 !
PWRMGR_ALWAYS_ON
 )

174 i‡–
pwrmgr_©åibuã
.
pwrmgr_èsk_°©e
 == 0 )

177 
	`HAL_ENTER_CRITICAL_SECTION
–
ötSèã
 );

180 
√xt
 = 
	`oßl_√xt_timeout
();

183 
	`HAL_EXIT_CRITICAL_SECTION
–
ötSèã
 );

186 
	`OSAL_SET_CPU_INTO_SLEEP
–
√xt
 );

189 
	}
}

	@Components/osal/common/OSAL_Timers.c

44 
	~"comdef.h
"

45 
	~"OnBﬂrd.h
"

46 
	~"OSAL.h
"

47 
	~"OSAL_Timîs.h
"

48 
	~"hÆ_timî.h
"

64 *
	m√xt
;

65 
uöt16
 
	mtimeout
;

66 
uöt16
 
	mevít_Êag
;

67 
uöt8
 
	mèsk_id
;

68 } 
	toßlTimîRec_t
;

74 
oßlTimîRec_t
 *
	gtimîHód
;

88 
uöt32
 
	goßl_sy°emClock
;

93 
oßlTimîRec_t
 *
oßlAddTimî
–
uöt8
 
èsk_id
, 
uöt16
 
evít_Êag
, uöt16 
timeout
 );

94 
oßlTimîRec_t
 *
oßlFödTimî
–
uöt8
 
èsk_id
, 
uöt16
 
evít_Êag
 );

95 
oßlDñëeTimî
–
oßlTimîRec_t
 *
rmTimî
 );

110 
	$oßlTimîInô
( )

112 
oßl_sy°emClock
 = 0;

113 
	}
}

127 
oßlTimîRec_t
 * 
	$oßlAddTimî
–
uöt8
 
èsk_id
, 
uöt16
 
evít_Êag
, uöt16 
timeout
 )

129 
oßlTimîRec_t
 *
√wTimî
;

130 
oßlTimîRec_t
 *
§chTimî
;

133 
√wTimî
 = 
	`oßlFödTimî
–
èsk_id
, 
evít_Êag
 );

134 i‡–
√wTimî
 )

137 
√wTimî
->
timeout
 =Åimeout;

139  ( 
√wTimî
 );

144 
√wTimî
 = 
	`oßl_mem_Æloc
––
oßlTimîRec_t
 ) );

146 i‡–
√wTimî
 )

149 
√wTimî
->
èsk_id
 =Åask_id;

150 
√wTimî
->
evít_Êag
 =Évent_flag;

151 
√wTimî
->
timeout
 =Åimeout;

152 
√wTimî
->
√xt
 = (*)
NULL
;

155 i‡–
timîHód
 =
NULL
 )

158 
timîHód
 = 
√wTimî
;

163 
§chTimî
 = 
timîHód
;

166  
§chTimî
->
√xt
 )

167 
§chTimî
 = srchTimî->
√xt
;

170 
§chTimî
->
√xt
 = 
√wTimî
;

173  ( 
√wTimî
 );

176  ( (
oßlTimîRec_t
 *)
NULL
 );

178 
	}
}

191 
oßlTimîRec_t
 *
	$oßlFödTimî
–
uöt8
 
èsk_id
, 
uöt16
 
evít_Êag
 )

193 
oßlTimîRec_t
 *
§chTimî
;

196 
§chTimî
 = 
timîHód
;

199  
§chTimî
 )

201 i‡–
§chTimî
->
evít_Êag
 ==Évent_flag &&

202 
§chTimî
->
èsk_id
 ==Åask_id )

206 
§chTimî
 = srchTimî->
√xt
;

209  ( 
§chTimî
 );

210 
	}
}

222 
	$oßlDñëeTimî
–
oßlTimîRec_t
 *
rmTimî
 )

225 i‡–
rmTimî
 )

229 
rmTimî
->
evít_Êag
 = 0;

231 
	}
}

247 
uöt8
 
	$oßl_°¨t_timîEx
–
uöt8
 
èskID
, 
uöt16
 
evít_id
, uöt16 
timeout_vÆue
 )

249 
hÆI¡Sèã_t
 
ötSèã
;

250 
oßlTimîRec_t
 *
√wTimî
;

252 
	`HAL_ENTER_CRITICAL_SECTION
–
ötSèã
 );

255 
√wTimî
 = 
	`oßlAddTimî
–
èskID
, 
evít_id
, 
timeout_vÆue
 );

257 
	`HAL_EXIT_CRITICAL_SECTION
–
ötSèã
 );

259  ( (
√wTimî
 !
NULL
Ë? 
SUCCESS
 : 
NO_TIMER_AVAIL
 );

260 
	}
}

276 
uöt8
 
	$oßl_°›_timîEx
–
uöt8
 
èsk_id
, 
uöt16
 
evít_id
 )

278 
hÆI¡Sèã_t
 
ötSèã
;

279 
oßlTimîRec_t
 *
foundTimî
;

281 
	`HAL_ENTER_CRITICAL_SECTION
–
ötSèã
 );

284 
foundTimî
 = 
	`oßlFödTimî
–
èsk_id
, 
evít_id
 );

285 i‡–
foundTimî
 )

287 
	`oßlDñëeTimî
–
foundTimî
 );

290 
	`HAL_EXIT_CRITICAL_SECTION
–
ötSèã
 );

292  ( (
foundTimî
 !
NULL
Ë? 
SUCCESS
 : 
INVALID_EVENT_ID
 );

293 
	}
}

305 
uöt16
 
	$oßl_gë_timeoutEx
–
uöt8
 
èsk_id
, 
uöt16
 
evít_id
 )

307 
hÆI¡Sèã_t
 
ötSèã
;

308 
uöt16
 
π∫
 = 0;

309 
oßlTimîRec_t
 *
tmr
;

311 
	`HAL_ENTER_CRITICAL_SECTION
–
ötSèã
 );

313 
tmr
 = 
	`oßlFödTimî
–
èsk_id
, 
evít_id
 );

315 i‡–
tmr
 )

317 
π∫
 = 
tmr
->
timeout
;

320 
	`HAL_EXIT_CRITICAL_SECTION
–
ötSèã
 );

322  
π∫
;

323 
	}
}

334 
uöt8
 
	$oßl_timî_num_a˘ive
( )

336 
hÆI¡Sèã_t
 
ötSèã
;

337 
uöt8
 
num_timîs
 = 0;

338 
oßlTimîRec_t
 *
§chTimî
;

340 
	`HAL_ENTER_CRITICAL_SECTION
–
ötSèã
 );

343 
§chTimî
 = 
timîHód
;

346  
§chTimî
 !
NULL
 )

348 
num_timîs
++;

349 
§chTimî
 = srchTimî->
√xt
;

352 
	`HAL_EXIT_CRITICAL_SECTION
–
ötSèã
 );

354  
num_timîs
;

355 
	}
}

366 
	$oßlTimîUpd©e
–
uöt16
 
upd©eTime
 )

368 
hÆI¡Sèã_t
 
ötSèã
;

369 
oßlTimîRec_t
 *
§chTimî
;

370 
oßlTimîRec_t
 *
¥evTimî
;

372 
	`HAL_ENTER_CRITICAL_SECTION
–
ötSèã
 );

374 
oßl_sy°emClock
 +
upd©eTime
;

375 
	`HAL_EXIT_CRITICAL_SECTION
–
ötSèã
 );

378 i‡–
timîHód
 !
NULL
 )

381 
§chTimî
 = 
timîHód
;

382 
¥evTimî
 = (*)
NULL
;

385  
§chTimî
 )

387 
oßlTimîRec_t
 *
‰ìTimî
 = 
NULL
;

389 
	`HAL_ENTER_CRITICAL_SECTION
–
ötSèã
 );

391 i‡(
§chTimî
->
timeout
 <
upd©eTime
)

393 
§chTimî
->
timeout
 = 0;

397 
§chTimî
->
timeout
 = srchTimî->timeouà- 
upd©eTime
;

401 i‡–
§chTimî
->
timeout
 =0 || srchTimî->
evít_Êag
 == 0 )

404 i‡–
¥evTimî
 =
NULL
 )

405 
timîHód
 = 
§chTimî
->
√xt
;

407 
¥evTimî
->
√xt
 = 
§chTimî
->next;

410 
‰ìTimî
 = 
§chTimî
;

413 
§chTimî
 = srchTimî->
√xt
;

418 
¥evTimî
 = 
§chTimî
;

419 
§chTimî
 = srchTimî->
√xt
;

422 
	`HAL_EXIT_CRITICAL_SECTION
–
ötSèã
 );

424 i‡–
‰ìTimî
 )

426 i‡–
‰ìTimî
->
timeout
 == 0 )

428 
	`oßl_£t_evít
–
‰ìTimî
->
èsk_id
, fªeTimî->
evít_Êag
 );

430 
	`oßl_mem_‰ì
–
‰ìTimî
 );

434 
	}
}

436 #ifde‡
POWER_SAVING


446 
	$oßl_adju°_timîs
( )

448 
uöt16
 
eTime
;

450 i‡–
timîHód
 !
NULL
 )

453 
eTime
 = 
	`TimîEœp£d
(Ë/ 
TICK_COUNT
;

455 i‡–
eTime
 )

456 
	`oßlTimîUpd©e
–
eTime
 );

458 
	}
}

472 
uöt16
 
	$oßl_√xt_timeout
( )

474 
uöt16
 
√xtTimeout
;

475 
oßlTimîRec_t
 *
§chTimî
;

477 i‡–
timîHód
 !
NULL
 )

480 
§chTimî
 = 
timîHód
;

481 
√xtTimeout
 = 
OSAL_TIMERS_MAX_TIMEOUT
;

484  
§chTimî
 !
NULL
 )

486 i‡(
§chTimî
->
timeout
 < 
√xtTimeout
)

488 
√xtTimeout
 = 
§chTimî
->
timeout
;

491 
§chTimî
 = srchTimî->
√xt
;

497 
√xtTimeout
 = 0;

500  ( 
√xtTimeout
 );

501 
	}
}

513 
uöt32
 
	$oßl_GëSy°emClock
( )

515  ( 
oßl_sy°emClock
 );

516 
	}
}

	@Components/osal/include/OSAL.h

42 #i‚de‡
OSAL_H


43 
	#OSAL_H


	)

45 #ifde‡
__˝lu•lus


53 
	~"comdef.h
"

54 
	~"OSAL_Mem‹y.h
"

55 
	~"OSAL_Timîs.h
"

61 
	#oßl_off£tof
(
ty≥
, 
membî
Ë((
uöt16
Ë&((—y≥ *Ë0)->membî))

	)

63 
	#OSAL_MSG_NEXT
(
msg_±r
Ë((
oßl_msg_hdr_t
 *Ë(msg_±rË- 1)->
√xt


	)

65 
	#OSAL_MSG_Q_INIT
(
q_±r
Ë*(q_±rË
NULL


	)

67 
	#OSAL_MSG_Q_EMPTY
(
q_±r
Ë(*(q_±rË=
NULL
)

	)

69 
	#OSAL_MSG_Q_HEAD
(
q_±r
Ë(*(q_±r))

	)

76 
	#INTS_ALL
 0xFF

	)

84 *
√xt
;

85 
uöt16
 
Àn
;

86 
uöt8
 
de°_id
;

87 } 
	toßl_msg_hdr_t
;

91 
uöt8
 
evít
;

92 
uöt8
 
°©us
;

93 } 
	toßl_evít_hdr_t
;

95 * 
	toßl_msg_q_t
;

110 
uöt8
 * 
oßl_msg_Æloˇã
(
uöt16
 
Àn
 );

115 
uöt8
 
oßl_msg_dóŒoˇã
–uöt8 *
msg_±r
 );

120 
uöt16
 
oßl_num_msgs
( );

125 
uöt8
 
oßl_msg_£nd
–uöt8 
de°ö©i⁄_èsk
, uöt8 *
msg_±r
 );

130 
uöt8
 *
oßl_msg_ª˚ive
–uöt8 
èsk_id
 );

136 
oßl_msg_íqueue
–
oßl_msg_q_t
 *
q_±r
, *
msg_±r
 );

141 
uöt8
 
oßl_msg_íqueue_max
–
oßl_msg_q_t
 *
q_±r
, *
msg_±r
, uöt8 
max
 );

146 *
oßl_msg_dequeue
–
oßl_msg_q_t
 *
q_±r
 );

151 
oßl_msg_push
–
oßl_msg_q_t
 *
q_±r
, *
msg_±r
 );

156 
oßl_msg_exåa˘
–
oßl_msg_q_t
 *
q_±r
, *
msg_±r
, *
¥ev_±r
 );

164 
uöt8
 
oßl_£t_evít
–uöt8 
èsk_id
, 
uöt16
 
evít_Êag
 );

172 
uöt8
 
oßl_i§_ªgi°î
–uöt8 
öãºu±_id
, (*
i§_±r
)( uint8* ) );

177 
uöt8
 
oßl_öt_íabÀ
–uöt8 
öãºu±_id
 );

182 
uöt8
 
oßl_öt_dißbÀ
–uöt8 
öãºu±_id
 );

190 
uöt8
 
oßl_öô_sy°em
( );

195 #i‡
deföed
 (
ZBIT
)

196 
__de˛•ec
(
dŒexp‹t
Ë
oßl_°¨t_sy°em
( );

198 
oßl_°¨t_sy°em
( );

203 
uöt8
 
oßl_£lf
( );

211 
oßl_°æí
–*
pSåög
 );

216 * 
oßl_mem˝y
–*, c⁄° 
GENERIC
 *, );

221 
uöt8
 
oßl_memcmp
–c⁄° 
GENERIC
 *
§c1
, c⁄° GENERIC *
§c2
, 
Àn
 );

226 *
oßl_mem£t
–*
de°
, 
uöt8
 
vÆue
, 
Àn
 );

231 
uöt16
 
oßl_buûd_uöt16
–
uöt8
 *
sw≠≥d
 );

236 
uöt32
 
oßl_buûd_uöt32
–
uöt8
 *
sw≠≥d
, uöt8 
Àn
 );

241 #i‡!
deföed
 ( 
ZBIT
 ) && !deföed ( 
ZBIT2
 ) && !deföed (
UBIT
)

242 
uöt8
 *
_…ﬂ
–
uöt32
 
l
, uöt8 * 
buf
, uöt8 
ødix
 );

248 
uöt16
 
oßl_ønd
( );

253 
uöt8
* 
oßl_buf„r_uöt32
–uöt8 *
buf
, 
uöt32
 
vÆ
 );

258 
uöt8
* 
oßl_buf„r_uöt24
–uöt8 *
buf
, 
uöt24
 
vÆ
 );

263 #ifde‡
__˝lu•lus


	@Components/osal/include/OSAL_Clock.h

40 #i‚de‡
OSAL_CLOCK_H


41 
	#OSAL_CLOCK_H


	)

43 #ifde‡
__˝lu•lus


66 
uöt32
 
	tUTCTime
;

71 
uöt8
 
£c⁄ds
;

72 
uöt8
 
möuãs
;

73 
uöt8
 
hour
;

74 
uöt8
 
day
;

75 
uöt8
 
m⁄th
;

76 
uöt16
 
yór
;

77 } 
	tUTCTimeSåu˘
;

90 
oßlTimeUpd©e
( );

98 
oßl_£tClock
–
UTCTime
 
√wTime
 );

106 
UTCTime
 
oßl_gëClock
( );

115 
oßl_C⁄vîtUTCTime
–
UTCTimeSåu˘
 * 
tm
, 
UTCTime
 
£cTime
 );

120 #ifde‡
__˝lu•lus


	@Components/osal/include/OSAL_Memory.h

40 #i‚de‡
OSAL_MEMORY_H


41 
	#OSAL_MEMORY_H


	)

43 #ifde‡
__˝lu•lus


51 
	~"comdef.h
"

57 #i‡!
deföed
 ( 
OSALMEM_METRICS
 )

58 
	#OSALMEM_METRICS
 
FALSE


	)

80 
oßl_mem_öô
( );

85 
oßl_mem_kick
( );

90 *
oßl_mem_Æloc
–
uöt16
 
size
 );

95 
oßl_mem_‰ì
–*
±r
 );

97 #i‡–
OSALMEM_METRICS
 )

101 
uöt16
 
oßl_hóp_block_max
( );

106 
uöt16
 
oßl_hóp_block_˙t
( );

111 
uöt16
 
oßl_hóp_block_‰ì
( );

116 
uöt16
 
oßl_hóp_mem_u£d
( );

119 #i‡
deföed
 (
ZTOOL_P1
Ë|| deföed (
ZTOOL_P2
)

123 
uöt16
 
oßl_hóp_high_w©î
( );

129 #ifde‡
__˝lu•lus


	@Components/osal/include/OSAL_Nv.h

40 #i‚de‡
OSAL_NV_H


41 
	#OSAL_NV_H


	)

43 #ifde‡
__˝lu•lus


52 
	~"hÆ_ty≥s.h
"

77 
oßl_nv_öô
–*
p
 );

82 
uöt8
 
oßl_nv_ôem_öô
–
uöt16
 
id
, uöt16 
Àn
, *
buf
 );

87 
uöt8
 
oßl_nv_ªad
–
uöt16
 
id
, uöt16 
off£t
, uöt16 
Àn
, *
buf
 );

92 
uöt8
 
oßl_nv_wrôe
–
uöt16
 
id
, uöt16 
off£t
, uöt16 
Àn
, *
buf
 );

97 
uöt16
 
oßl_nv_ôem_Àn
–uöt16 
id
 );

102 #ifde‡
__˝lu•lus


	@Components/osal/include/OSAL_PwrMgr.h

40 #i‚de‡
OSAL_PWRMGR_H


41 
	#OSAL_PWRMGR_H


	)

43 #ifde‡
__˝lu•lus


65 
uöt16
 
pwrmgr_èsk_°©e
;

66 
uöt16
 
pwrmgr_√xt_timeout
;

67 
uöt16
 
accumuœãd_¶ìp_time
;

68 
uöt8
 
pwrmgr_devi˚
;

69 } 
	tpwrmgr_©åibuã_t
;

75 
	#PWRMGR_ALWAYS_ON
 0

	)

76 
	#PWRMGR_BATTERY
 1

	)

81 
	#PWRMGR_CONSERVE
 0

	)

82 
	#PWRMGR_HOLD
 1

	)

91 
pwrmgr_©åibuã_t
 
pwrmgr_©åibuã
;

102 
oßl_pwrmgr_öô
( );

115 
uöt8
 
oßl_pwrmgr_èsk_°©e
–uöt8 
èsk_id
, uöt8 
°©e
 );

124 
oßl_pwrmgr_devi˚
–
uöt8
 
pwrmgr_devi˚
 );

130 
oßl_pwrmgr_powîc⁄£rve
( );

135 #ifde‡
__˝lu•lus


	@Components/osal/include/OSAL_Tasks.h

40 #i‚de‡
OSAL_TASKS_H


41 
	#OSAL_TASKS_H


	)

43 #ifde‡
__˝lu•lus


59 
	#TASK_NO_TASK
 0xFF

	)

68 (*
	tpTaskEvítH™dÀrFn
)–
	tèsk_id
, 
	tevít
 );

74 c⁄° 
pTaskEvítH™dÀrFn
 
èsksAº
[];

75 c⁄° 
uöt8
 
èsksC¡
;

76 
uöt16
 *
èsksEvíts
;

85 
oßlInôTasks
( );

90 #ifde‡
__˝lu•lus


	@Components/osal/include/OSAL_Timers.h

40 #i‚de‡
OSAL_TIMERS_H


41 
	#OSAL_TIMERS_H


	)

43 #ifde‡
__˝lu•lus


59 
	#OSAL_TIMERS_MAX_TIMEOUT
 0xFFFF

	)

76 
oßlTimîInô
( );

81 
uöt8
 
oßl_°¨t_timîEx
–uöt8 
èsk_id
, 
uöt16
 
evít_id
, uöt16 
timeout_vÆue
 );

86 
uöt8
 
oßl_°›_timîEx
–uöt8 
èsk_id
, 
uöt16
 
evít_id
 );

91 
uöt16
 
oßl_gë_timeoutEx
–
uöt8
 
èsk_id
, uöt16 
evít_id
 );

97 
oßl_timî_ISR
( );

102 
oßl_adju°_timîs
( );

107 
oßlTimîUpd©e
–
uöt16
 
upd©eTime
 );

112 
uöt8
 
oßl_timî_num_a˘ive
( );

118 
oßl_¶ìp_timîs
( );

119 
oßl_un¶ìp_timîs
( );

124 
uöt32
 
oßl_GëSy°emClock
( );

130 
uöt16
 
oßl_√xt_timeout
( );

135 #ifde‡
__˝lu•lus


	@Components/osal/include/ZComDef.h

40 #i‚de‡
ZCOMDEF_H


41 
	#ZCOMDEF_H


	)

43 #ifde‡
__˝lu•lus


52 
	~"comdef.h
"

53 
	~"ßddr.h
"

59 
	#oßl_˝yExtAddr
(
a
, 
b
Ë
	`sAddrExtCpy
(◊), (c⁄° 
uöt8
 *)(b))

	)

60 
	#oßl_ExtAddrEquÆ
(
a
, 
b
Ë
	`sAddrExtCmp
((c⁄° 
uöt8
 *)◊), (c⁄° uöt8 *)(b))

	)

61 
	#oßl_c›yAddªss
(
a
, 
b
Ë
	`sAddrCpy
–(
sAddr_t
 *)◊), (c⁄° sAddr_à*)(bË)

	)

70 
	#DEVICE_BUILD_COORDINATOR
 0x01

	)

71 
	#DEVICE_BUILD_ROUTER
 0x02

	)

72 
	#DEVICE_BUILD_ENDDEVICE
 0x04

	)

75 
	#ZSUCCESS
 
SUCCESS


	)

78 
	#COMPID_OSAL
 0

	)

79 
	#COMPID_MTEL
 1

	)

80 
	#COMPID_MTSPCI
 2

	)

81 
	#COMPID_NWK
 3

	)

82 
	#COMPID_NWKIF
 4

	)

83 
	#COMPID_MACCB
 5

	)

84 
	#COMPID_MAC
 6

	)

85 
	#COMPID_APP
 7

	)

86 
	#COMPID_TEST
 8

	)

88 
	#COMPID_RTG
 9

	)

89 
	#COMPID_DATA
 11

	)

92 
	#COMPID_TEST_NWK_STARTUP
 20

	)

93 
	#COMPID_TEST_SCAN_CONFIRM
 21

	)

94 
	#COMPID_TEST_ASSOC_CONFIRM
 22

	)

95 
	#COMPID_TEST_REMOTE_DATA_CONFIRM
 23

	)

98 
	#ZCD_NV_EXTADDR
 0x0001

	)

99 
	#ZCD_NV_BOOTCOUNTER
 0x0002

	)

100 
	#ZCD_NV_STARTUP_OPTION
 0x0003

	)

101 
	#ZCD_NV_START_DELAY
 0x0004

	)

104 
	#ZCD_NV_NIB
 0x0021

	)

105 
	#ZCD_NV_DEVICE_LIST
 0x0022

	)

106 
	#ZCD_NV_ADDRMGR
 0x0023

	)

107 
	#ZCD_NV_POLL_RATE
 0x0024

	)

108 
	#ZCD_NV_QUEUED_POLL_RATE
 0x0025

	)

109 
	#ZCD_NV_RESPONSE_POLL_RATE
 0x0026

	)

110 
	#ZCD_NV_REJOIN_POLL_RATE
 0x0027

	)

111 
	#ZCD_NV_DATA_RETRIES
 0x0028

	)

112 
	#ZCD_NV_POLL_FAILURE_RETRIES
 0x0029

	)

113 
	#ZCD_NV_STACK_PROFILE
 0x002A

	)

114 
	#ZCD_NV_INDIRECT_MSG_TIMEOUT
 0x002B

	)

115 
	#ZCD_NV_ROUTE_EXPIRY_TIME
 0x002C

	)

116 
	#ZCD_NV_EXTENDED_PAN_ID
 0x002D

	)

117 
	#ZCD_NV_BCAST_RETRIES
 0x002E

	)

118 
	#ZCD_NV_PASSIVE_ACK_TIMEOUT
 0x002F

	)

119 
	#ZCD_NV_BCAST_DELIVERY_TIME
 0x0030

	)

120 
	#ZCD_NV_NWK_MODE
 0x0031

	)

121 
	#ZCD_NV_CONCENTRATOR_ENABLE
 0x0032

	)

122 
	#ZCD_NV_CONCENTRATOR_DISCOVERY
 0x0033

	)

123 
	#ZCD_NV_CONCENTRATOR_RADIUS
 0x0034

	)

124 
	#ZCD_NV_MAX_SOURCE_ROUTE
 0x0035

	)

125 
	#ZCD_NV_CONCENTRATOR_RC
 0x0036

	)

126 
	#ZCD_NV_NWK_MGR_MODE
 0x0037

	)

130 
	#ZCD_NV_BINDING_TABLE
 0x0041

	)

131 
	#ZCD_NV_GROUP_TABLE
 0x0042

	)

132 
	#ZCD_NV_APS_FRAME_RETRIES
 0x0043

	)

133 
	#ZCD_NV_APS_ACK_WAIT_DURATION
 0x0044

	)

134 
	#ZCD_NV_APS_ACK_WAIT_MULTIPLIER
 0x0045

	)

135 
	#ZCD_NV_BINDING_TIME
 0x0046

	)

136 
	#ZCD_NV_APS_USE_EXT_PANID
 0x0047

	)

137 
	#ZCD_NV_APS_USE_INSECURE_JOIN
 0x0048

	)

138 
	#ZCD_NV_APSF_WINDOW_SIZE
 0x0049

139 
	#ZCD_NV_APSF_INTERFRAME_DELAY
 0x004A

140 
	#ZCD_NV_APS_NONMEMBER_RADIUS
 0x004B

141 
	#ZCD_NV_APS_LINK_KEY_TABLE
 0x004C

	)

144 
	#ZCD_NV_SECURITY_LEVEL
 0x0061

	)

145 
	#ZCD_NV_PRECFGKEY
 0x0062

	)

146 
	#ZCD_NV_PRECFGKEYS_ENABLE
 0x0063

	)

147 
	#ZCD_NV_SECURITY_MODE
 0x0064

	)

148 
	#ZCD_NV_SECURE_PERMIT_JOIN
 0x0065

	)

149 
	#ZCD_NV_SECURE_PRECFG_TCLINKKEY
 0x0066

	)

150 
	#ZCD_NV_SECURE_TCLINKKEY_TXFRAME
 0x0067

151 
	#ZCD_NV_SECURE_TCLINKKEY_RXFRAME
 0x0068

152 
	#ZCD_NV_lOCAL_CERTIFICATE
 0x0069

	)

153 
	#ZCD_NV_STATIC_PRIVATE_KEY
 0x006a

	)

154 
	#ZCD_NV_CA_PUBLIC_KEY
 0x006b

	)

155 
	#ZCD_NV_STATIC_PUBLIC_KEY
 0x006c

	)

158 
	#ZCD_NV_USERDESC
 0x0081

	)

159 
	#ZCD_NV_NWKKEY
 0x0082

	)

160 
	#ZCD_NV_PANID
 0x0083

	)

161 
	#ZCD_NV_CHANLIST
 0x0084

	)

162 
	#ZCD_NV_LEAVE_CTRL
 0x0085

	)

163 
	#ZCD_NV_SCAN_DURATION
 0x0086

	)

164 
	#ZCD_NV_LOGICAL_TYPE
 0x0087

	)

167 
	#ZCD_NV_SCENE_TABLE
 0x0091

	)

170 
	#ZCD_NV_SAPI_ENDPOINT
 0x00A1

	)

180 
	#ZCD_STARTOPT_DEFAULT_CONFIG_STATE
 0x01

	)

181 
	#ZCD_STARTOPT_DEFAULT_NETWORK_STATE
 0x02

	)

182 
	#ZCD_STARTOPT_AUTO_START
 0x04

	)

183 
	#ZCD_STARTOPT_CLEAR_CONFIG
 
ZCD_STARTOPT_DEFAULT_CONFIG_STATE


	)

184 
	#ZCD_STARTOPT_CLEAR_STATE
 
ZCD_STARTOPT_DEFAULT_NETWORK_STATE


	)

187 
	#ZCL_KEY_ESTABLISHMENT_PUBLIC_KEY_LENGTH
 22

	)

188 
	#ZCL_KEY_ESTABLSIHMENT_PRIVATE_KEY_LENTGH
 21

	)

189 
	#ZCL_KEY_ESTABLISHMENT_CERTIFICATE_LENGTH
 48

	)

195 
uöt8
 
	tbyã
;

196 
uöt16
 
	tUINT16
;

197 
öt16
 
	tINT16
;

201 
AddrNŸPª£¡
 = 0,

202 
AddrGroup
 = 1,

203 
Addr16Bô
 = 2,

204 
Addr64Bô
 = 3,

205 
AddrBrﬂdˇ°
 = 15

208 
	#Z_EXTADDR_LEN
 8

	)

210 
byã
 
	tZL⁄gAddr_t
[
Z_EXTADDR_LEN
];

216 
uöt16
 
sh‹tAddr
;

217 
ZL⁄gAddr_t
 
extAddr
;

218 } 
addr
;

219 
byã
 
addrMode
;

220 } 
	tzAddrTy≥_t
;

223 
	#ZSuc˚ss
 
SUCCESS


	)

224 
	#ZFaûuª
 
FAILURE


	)

225 
	#ZInvÆidP¨amëî
 
INVALIDPARAMETER


	)

228 
	#ZMemEº‹
 0x10

	)

229 
	#ZBuf„rFuŒ
 0x11

	)

230 
	#ZUnsuµ‹ãdMode
 0x12

	)

231 
	#ZMacMemEº‹
 0x13

	)

233 
	#ZS≠iInProgªss
 0x20

	)

234 
	#ZS≠iTimeout
 0x21

	)

235 
	#ZS≠iInô
 0x22

	)

238 
	#ZApsFaû
 0xb1

	)

239 
	#ZApsTabÀFuŒ
 0xb2

	)

240 
	#ZApsIŒegÆReque°
 0xb3

	)

241 
	#ZApsInvÆidBödög
 0xb4

	)

242 
	#ZApsUnsuµ‹ãdAârib
 0xb5

	)

243 
	#ZApsNŸSuµ‹ãd
 0xb6

	)

244 
	#ZApsNoAck
 0xb7

	)

245 
	#ZApsDu∂iˇãE¡ry
 0xb8

	)

246 
	#ZApsNoBoundDevi˚
 0xb9

	)

247 
	#ZApsNŸAŒowed
 0xba

	)

248 
	#ZApsNŸAuthítiˇãd
 0xbb

	)

251 
	#ZSecNoKey
 0xa1

	)

252 
	#ZSecOldFrmCou¡
 0xa2

	)

253 
	#ZSecMaxFrmCou¡
 0xa3

	)

254 
	#ZSecCcmFaû
 0xa4

	)

257 
	#ZNwkInvÆidP¨am
 0xc1

	)

258 
	#ZNwkInvÆidReque°
 0xc2

	)

259 
	#ZNwkNŸPîmôãd
 0xc3

	)

260 
	#ZNwkSèπupFaûuª
 0xc4

	)

261 
	#ZNwkAÃódyPª£¡
 0xc5

	)

262 
	#ZNwkSyncFaûuª
 0xc6

	)

263 
	#ZNwkTabÀFuŒ
 0xc7

	)

264 
	#ZNwkUnknownDevi˚
 0xc8

	)

265 
	#ZNwkUnsuµ‹ãdAâribuã
 0xc9

	)

266 
	#ZNwkNoNëw‹ks
 0xˇ

	)

267 
	#ZNwkLóveUnc⁄fúmed
 0xcb

	)

268 
	#ZNwkNoAck
 0xcc

269 
	#ZNwkNoRouã
 0xcd

	)

272 
	#ZMacSuc˚ss
 0x00

	)

273 
	#ZMacBóc⁄Loss
 0xe0

	)

274 
	#ZMacCh™√lAc˚ssFaûuª
 0xe1

	)

275 
	#ZMacDíõd
 0xe2

	)

276 
	#ZMacDißbÀTrxFaûuª
 0xe3

	)

277 
	#ZMacFaûedSecurôyCheck
 0xe4

	)

278 
	#ZMacFømeTooL⁄g
 0xe5

	)

279 
	#ZMacInvÆidGTS
 0xe6

	)

280 
	#ZMacInvÆidH™dÀ
 0xe7

	)

281 
	#ZMacInvÆidP¨amëî
 0xe8

	)

282 
	#ZMacNoACK
 0xe9

	)

283 
	#ZMacNoBóc⁄
 0xó

	)

284 
	#ZMacNoD©a
 0xeb

	)

285 
	#ZMacNoSh‹tAddr
 0xec

	)

286 
	#ZMacOutOfC≠
 0xed

	)

287 
	#ZMacPANIDC⁄Êi˘
 0xì

	)

288 
	#ZMacRólignmít
 0xef

	)

289 
	#ZMacTønß˘i⁄Expúed
 0xf0

	)

290 
	#ZMacTønß˘i⁄OvîFlow
 0xf1

	)

291 
	#ZMacTxA˘ive
 0xf2

	)

292 
	#ZMacUnAvaûabÀKey
 0xf3

	)

293 
	#ZMacUnsuµ‹ãdAâribuã
 0xf4

	)

294 
	#ZMacUnsuµ‹ãd
 0xf5

	)

295 
	#ZMacSrcM©chInvÆidIndex
 0xff

	)

297 
Sètus_t
 
	tZSètus_t
;

301 
uöt8
 
txCou¡î
;

302 
uöt8
 
txCo°
;

304 
uöt8
 
rxLqi
;

306 
uöt8
 
öKeySeqNum
;

307 
uöt32
 
öFrmC¡r
;

308 
uöt16
 
txFaûuª
;

309 } 
	tlökInfo_t
;

315 
	#SPI_INCOMING_ZTOOL_PORT
 0x21

316 
	#SPI_INCOMING_ZAPP_DATA
 0x22

317 
	#MT_SYS_APP_MSG
 0x23

318 
	#MT_SYS_APP_RSP_MSG
 0x24

319 

	)

320 
	#AF_DATA_CONFIRM_CMD
 0xFD

321 
	#AF_INCOMING_MSG_CMD
 0x1A

322 
	#AF_INCOMING_KVP_CMD
 0x1B

323 
	#AF_INCOMING_GRP_KVP_CMD
 0x1C

324 

	)

327 
	#ZDO_NEW_DSTADDR
 0xD0

328 
	#ZDO_STATE_CHANGE
 0xD1

329 
	#ZDO_MATCH_DESC_RSP_SENT
 0xD2

330 
	#ZDO_CB_MSG
 0xD3

331 
	#ZDO_NETWORK_REPORT
 0xD4

332 
	#ZDO_NETWORK_UPDATE
 0xD5

333 

	)

334 
	#NM_CHANNEL_INTERFERE
 0x31

335 
	#NM_ED_SCAN_CONFIRM
 0x32

336 
	#SAPS_CHANNEL_CHANGE
 0x33

337 
	#ZCL_INCOMING_MSG
 0x34

338 
	#ZCL_KEY_ESTABLISH_IND
 0x35

339 

	)

355 #ifde‡
__˝lu•lus


	@Components/osal/include/comdef.h

40 #i‚de‡
COMDEF_H


41 
	#COMDEF_H


	)

43 #ifde‡
__˝lu•lus


54 
	~"hÆ_ty≥s.h
"

55 
	~"hÆ_defs.h
"

61 #i‚de‡
Ál£


62 
	#Ál£
 0

	)

65 #i‚de‡
åue


66 
	#åue
 1

	)

69 #i‚de‡
CONST


70 
	#CONST
 c⁄°

	)

73 #i‚de‡
GENERIC


74 
	#GENERIC


	)

78 
	#SUCCESS
 0x00

	)

79 
	#FAILURE
 0x01

	)

80 
	#INVALIDPARAMETER
 0x02

	)

81 
	#INVALID_TASK
 0x03

	)

82 
	#MSG_BUFFER_NOT_AVAIL
 0x04

	)

83 
	#INVALID_MSG_POINTER
 0x05

	)

84 
	#INVALID_EVENT_ID
 0x06

	)

85 
	#INVALID_INTERRUPT_ID
 0x07

	)

86 
	#NO_TIMER_AVAIL
 0x08

	)

87 
	#NV_ITEM_UNINIT
 0x09

	)

88 
	#NV_OPER_FAILED
 0x0A

	)

89 
	#INVALID_MEM_SIZE
 0x0B

	)

90 
	#NV_BAD_ITEM_LEN
 0x0C

	)

97 
uöt8
 
	tSètus_t
;

100 
öt32
 
	töt24
;

101 
uöt32
 
	tuöt24
;

107 
	#SYS_EVENT_MSG
 0x8000

108 

	)

113 
	#KEY_CHANGE
 0xC0

114 

	)

133 #ifde‡
__˝lu•lus


	@Components/osal/mcu/cc2530/OSAL_Nv.c

50 
	~"hÆ_adc.h
"

51 
	~"hÆ_Êash.h
"

52 
	~"hÆ_ty≥s.h
"

53 
	~"ZComdef.h
"

54 
	~"OSAL_Nv.h
"

60 
	#OSAL_NV_PAGE_SIZE
 
HAL_FLASH_PAGE_SIZE


	)

61 
	#OSAL_NV_PAGES_USED
 
HAL_NV_PAGE_CNT


	)

62 
	#OSAL_NV_PAGE_BEG
 
HAL_NV_PAGE_BEG


	)

63 
	#OSAL_NV_PAGE_END
 (
OSAL_NV_PAGE_BEG
 + 
OSAL_NV_PAGES_USED
 - 1)

	)

65 
	#OSAL_NV_ACTIVE
 0x00

	)

66 
	#OSAL_NV_ERASED
 0xFF

	)

67 
	#OSAL_NV_ERASED_ID
 0xFFFF

	)

68 
	#OSAL_NV_ZEROED_ID
 0x0000

	)

70 
	#OSAL_NV_SOURCE_ID
 0x8000

	)

72 
	#OSAL_NV_PAGE_FREE
 
HAL_FLASH_PAGE_SIZE


	)

75 
	#OSAL_NV_PAGE_NULL
 0

	)

78 
	#OSAL_NV_ITEM_NULL
 0

	)

80 
	#OSAL_NV_WORD_SIZE
 
HAL_FLASH_WORD_SIZE


	)

82 
	#OSAL_NV_PAGE_HDR_OFFSET
 0

	)

88 
	#OSAL_NV_CHECK_BUS_VOLTAGE
 (
	`HÆAdcCheckVdd
–
HAL_ADC_VDD_LIMIT_4
 ))

	)

90 
	#OSAL_NV_DATA_SIZE
–
LEN
 ) \

	)

91 ((((
	gLEN
Ë+ 
	gOSAL_NV_WORD_SIZE
 - 1) / OSAL_NV_WORD_SIZE) * OSAL_NV_WORD_SIZE)

93 
	#OSAL_NV_ITEM_SIZE
–
LEN
 ) \

	)

94 (((((
	gLEN
Ë+ 
	gOSAL_NV_WORD_SIZE
 - 1Ë/ OSAL_NV_WORD_SIZEË* OSAL_NV_WORD_SIZEË+ 
	gOSAL_NV_HDR_SIZE
)

102 
uöt16
 
	mid
;

103 
uöt16
 
	mÀn
;

104 
uöt16
 
	mchk
;

105 
uöt16
 
	m°©
;

106 } 
	toßlNvHdr_t
;

108 
	#OSAL_NV_HDR_ID
 0

	)

109 
	#OSAL_NV_HDR_LEN
 2

	)

110 
	#OSAL_NV_HDR_CHK
 4

	)

111 
	#OSAL_NV_HDR_STAT
 6

	)

113 
	#OSAL_NV_HDR_ITEM
 2

114 
	#OSAL_NV_HDR_SIZE
 8

	)

115 
	#OSAL_NV_HDR_HALF
 (
OSAL_NV_HDR_SIZE
 / 2)

	)

119 
uöt16
 
	ma˘ive
;

120 
uöt16
 
	möU£
;

121 
uöt16
 
	mx„r
;

122 
uöt16
 
	m•¨e
;

123 } 
	toßlNvPgHdr_t
;

125 
	#OSAL_NV_PG_ACTIVE
 0

	)

126 
	#OSAL_NV_PG_INUSE
 2

	)

127 
	#OSAL_NV_PG_XFER
 4

	)

128 
	#OSAL_NV_PG_SPARE
 6

	)

130 
	#OSAL_NV_PAGE_HDR_SIZE
 8

	)

131 
	#OSAL_NV_PAGE_HDR_HALF
 (
OSAL_NV_PAGE_HDR_SIZE
 / 2)

	)

135 
	meNvX„r
,

136 
	meNvZîo


137 } 
	teNvHdrEnum
;

141 
	mePgA˘ive
,

142 
	mePgInU£
,

143 
	mePgX„r
,

144 
	mePgS∑ª


145 } 
	tePgHdrEnum
;

151 
boﬁ
 
HÆAdcCheckVdd
(
uöt8
 
limô
);

157 #i‚de‡
OAD_KEEP_NV_PAGES


160 #¥agm®
loˇti⁄
="ZIGNV_ADDRESS_SPACE"

161 
__no_öô
 
uöt8
 
	g_nvBuf
[
OSAL_NV_PAGES_USED
 * 
OSAL_NV_PAGE_SIZE
];

162 #¥agm®
ªquúed
=
_nvBuf


163 #¥agm®
loˇti⁄
="IEEE_ADDRESS_SPACE"

164 
__no_öô
 
uöt8
 
	g_nvIEEE
[
Z_EXTADDR_LEN
];

165 #¥agm®
ªquúed
=
_nvIEEE


173 
uöt16
 
	gpgOff
[
OSAL_NV_PAGES_USED
];

176 
uöt16
 
	gpgLo°
[
OSAL_NV_PAGES_USED
];

178 
uöt8
 
	gpgRes
;

181 
uöt8
 
	gfödPg
;

204 
uöt8
 
	gÁûF
;

210 
uöt8
 
öôNV
( );

212 
£tPageU£
–
uöt8
 
pg
, uöt8 
öU£
 );

213 
uöt16
 
öôPage
–
uöt8
 
pg
, uöt16 
id
, uöt8 
födDups
 );

214 
îa£Page
–
uöt8
 
pg
 );

215 
com∑˘Page
–
uöt8
 
pg
 );

217 
uöt16
 
födIãm
–uöt16 
id
 );

218 
uöt8
 
öôIãm
–uöt8 
Êag
, 
uöt16
 
id
, uöt16 
Àn
, *
buf
 );

219 
£tIãm
–
uöt8
 
pg
, 
uöt16
 
off£t
, 
eNvHdrEnum
 
°©
 );

221 
uöt16
 
ˇlcChkB
–uöt16 
Àn
, 
uöt8
 *
buf
 );

222 
uöt16
 
ˇlcChkF
–
byã
 
pg
, uöt16 
off£t
, uöt16 
Àn
 );

224 
wrôeW‹d
–
uöt8
 
pg
, 
uöt16
 
off£t
, uöt8 *
buf
 );

225 
wrôeW‹dH
–
uöt8
 
pg
, 
uöt16
 
off£t
, uöt8 *
buf
 );

226 
wrôeW‹dM
–
uöt8
 
pg
, 
uöt16
 
off£t
, uöt8 *
buf
, uöt16 
˙t
 );

227 
wrôeBuf
–
uöt8
 
pg
, 
uöt16
 
off£t
, uöt16 
Àn
, uöt8 *
buf
 );

228 
x„rBuf
–
uöt8
 
§cPg
, 
uöt16
 
§cOff
, uöt8 
d°Pg
, uöt16 
d°Off
, uöt16 
Àn
 );

230 
uöt8
 
wrôeIãm
–uöt8 
pg
, 
uöt16
 
id
, uöt16 
Àn
, *
buf
, uöt8 
Êag
 );

241 
uöt8
 
	$öôNV
( )

243 
oßlNvPgHdr_t
 
pgHdr
;

244 
uöt8
 
ﬁdPg
 = 
OSAL_NV_PAGE_NULL
;

245 
uöt8
 
√wPg
 = 
OSAL_NV_PAGE_NULL
;

246 
uöt8
 
födDups
 = 
FALSE
;

247 
uöt8
 
pg
;

249 
pgRes
 = 
OSAL_NV_PAGE_NULL
;

251  
pg
 = 
OSAL_NV_PAGE_BEG
;Ög <
OSAL_NV_PAGE_END
;Ög++ )

253 
	`HÆFœshRód
(
pg
, 
OSAL_NV_PAGE_HDR_OFFSET
, (
uöt8
 *)(&
pgHdr
), 
OSAL_NV_HDR_SIZE
);

255 i‡–
pgHdr
.
a˘ive
 =
OSAL_NV_ERASED_ID
 )

257 i‡–
pgRes
 =
OSAL_NV_PAGE_NULL
 )

259 
pgRes
 = 
pg
;

263 
	`£tPageU£
–
pg
, 
TRUE
 );

269 i‡–
pgHdr
.
öU£
 =
OSAL_NV_ERASED_ID
 )

271 
√wPg
 = 
pg
;

274 i‡–
pgHdr
.
x„r
 !
OSAL_NV_ERASED_ID
 )

276 
ﬁdPg
 = 
pg
;

281 i‡–
	`öôPage
–
pg
, 
OSAL_NV_ITEM_NULL
, 
födDups
 ) != OSAL_NV_ITEM_NULL )

283 
födDups
 = 
TRUE
;

284 
pg
 = 
OSAL_NV_PAGE_BEG
-1;

293 i‡–
√wPg
 !
OSAL_NV_PAGE_NULL
 )

299 i‡–
pgRes
 !
OSAL_NV_PAGE_NULL
 )

301 
	`£tPageU£
–
√wPg
, 
TRUE
 );

306 i‡–
ﬁdPg
 !
OSAL_NV_PAGE_NULL
 )

308 
pgRes
 = 
√wPg
;

314 i‡–
ﬁdPg
 !
OSAL_NV_PAGE_NULL
 )

316 
	`com∑˘Page
–
ﬁdPg
 );

325 i‡–
pgRes
 =
OSAL_NV_PAGE_NULL
 )

327  
pg
 = 
OSAL_NV_PAGE_BEG
;Ög <
OSAL_NV_PAGE_END
;Ög++ )

329 
	`îa£Page
–
pg
 );

331 
	`öôNV
();

334  
TRUE
;

335 
	}
}

347 
	$£tPageU£
–
uöt8
 
pg
, uöt8 
öU£
 )

349 
oßlNvPgHdr_t
 
pgHdr
;

351 
pgHdr
.
a˘ive
 = 
OSAL_NV_ZEROED_ID
;

353 i‡–
öU£
 )

355 
pgHdr
.
öU£
 = 
OSAL_NV_ZEROED_ID
;

359 
pgHdr
.
öU£
 = 
OSAL_NV_ERASED_ID
;

362 
	`wrôeW‹d
–
pg
, 
OSAL_NV_PAGE_HDR_OFFSET
, (
uöt8
*)(&
pgHdr
) );

363 
	}
}

377 
uöt16
 
	$öôPage
–
uöt8
 
pg
, 
uöt16
 
id
, uöt8 
födDups
 )

379 
uöt16
 
off£t
 = 
OSAL_NV_PAGE_HDR_SIZE
;

380 
uöt16
 
sz
, 
lo°
 = 0;

381 
oßlNvHdr_t
 
hdr
;

385 
	`HÆFœshRód
(
pg
, 
off£t
, (
uöt8
 *)(&
hdr
), 
OSAL_NV_HDR_SIZE
);

387 i‡–
hdr
.
id
 =
OSAL_NV_ERASED_ID
 )

391 
off£t
 +
OSAL_NV_HDR_SIZE
;

392 
sz
 = 
	`OSAL_NV_DATA_SIZE
–
hdr
.
Àn
 );

395 i‡–(
off£t
 + 
sz
Ë> 
OSAL_NV_PAGE_FREE
 )

397 
lo°
 +(
OSAL_NV_PAGE_FREE
 - 
off£t
 + 
OSAL_NV_HDR_SIZE
);

398 
off£t
 = 
OSAL_NV_PAGE_FREE
;

402 i‡–
hdr
.
id
 !
OSAL_NV_ZEROED_ID
 )

407 i‡–
id
 !
OSAL_NV_ITEM_NULL
 )

413 i‡–(
id
 & 0x7fffË=
hdr
.id )

415 i‡–(((
id
 & 
OSAL_NV_SOURCE_ID
Ë=0Ë&& (
hdr
.
°©
 =
OSAL_NV_ERASED_ID
)) ||

416 (((
id
 & 
OSAL_NV_SOURCE_ID
Ë!0Ë&& (
hdr
.
°©
 !
OSAL_NV_ERASED_ID
)) )

418  
off£t
;

425 i‡–
hdr
.
chk
 =
	`ˇlcChkF
–
pg
, 
off£t
, hdr.
Àn
 ) )

427 i‡–
födDups
 )

429 i‡–
hdr
.
°©
 =
OSAL_NV_ERASED_ID
 )

435 
uöt16
 
off
 = 
	`födIãm
–(
hdr
.
id
 | 
OSAL_NV_SOURCE_ID
) );

437 i‡–
off
 !
OSAL_NV_ITEM_NULL
 )

439 
	`£tIãm
–
födPg
, 
off
, 
eNvZîo
 );

444 i‡–
hdr
.
°©
 !
OSAL_NV_ERASED_ID
 )

446  
OSAL_NV_ERASED_ID
;

451 
	`£tIãm
–
pg
, 
off£t
, 
eNvZîo
 );

452 
lo°
 +(
OSAL_NV_HDR_SIZE
 + 
sz
);

458 
lo°
 +(
OSAL_NV_HDR_SIZE
 + 
sz
);

460 
off£t
 +
sz
;

462 }  
TRUE
 );

464 
pgOff
[
pg
 - 
OSAL_NV_PAGE_BEG
] = 
off£t
;

465 
pgLo°
[
pg
 - 
OSAL_NV_PAGE_BEG
] = 
lo°
;

467  
OSAL_NV_ITEM_NULL
;

468 
	}
}

479 
	$îa£Page
–
uöt8
 
pg
 )

481 i‡–!
OSAL_NV_CHECK_BUS_VOLTAGE
 )

483 
ÁûF
 = 
TRUE
;

487 
	`HÆFœshEø£
(
pg
);

489 
pgOff
[
pg
 - 
OSAL_NV_PAGE_BEG
] = 
OSAL_NV_PAGE_HDR_SIZE
;

490 
pgLo°
[
pg
 - 
OSAL_NV_PAGE_BEG
] = 0;

491 
	}
}

502 
	$com∑˘Page
–
uöt8
 
§cPg
 )

504 
uöt16
 
d°Off
 = 
pgOff
[
pgRes
-
OSAL_NV_PAGE_BEG
];

505 
uöt16
 
§cOff
 = 
OSAL_NV_ZEROED_ID
;

506 
oßlNvHdr_t
 
hdr
;

509 
	`wrôeW‹dH
–
§cPg
, 
OSAL_NV_PG_XFER
, (
uöt8
*)(&
§cOff
) );

511 
§cOff
 = 
OSAL_NV_PAGE_HDR_SIZE
;

515 
uöt16
 
sz
;

516 
	`HÆFœshRód
(
§cPg
, 
§cOff
, (
uöt8
 *)(&
hdr
), 
OSAL_NV_HDR_SIZE
);

518 i‡–
hdr
.
id
 =
OSAL_NV_ERASED_ID
 )

523 
§cOff
 +
OSAL_NV_HDR_SIZE
;

525 i‡–(
§cOff
 + 
hdr
.
Àn
Ë> 
OSAL_NV_PAGE_FREE
 )

530 
sz
 = 
	`OSAL_NV_DATA_SIZE
–
hdr
.
Àn
 );

532 i‡–
hdr
.
id
 !
OSAL_NV_ZEROED_ID
 )

534 i‡–
hdr
.
chk
 =
	`ˇlcChkF
–
§cPg
, 
§cOff
, hdr.
Àn
 ) )

536 
	`£tIãm
–
§cPg
, 
§cOff
, 
eNvX„r
 );

537 
	`wrôeBuf
–
pgRes
, 
d°Off
, 
OSAL_NV_HDR_SIZE
, (
byã
 *)(&
hdr
) );

538 
d°Off
 +
OSAL_NV_HDR_SIZE
;

539 
	`x„rBuf
–
§cPg
, 
§cOff
, 
pgRes
, 
d°Off
, 
sz
 );

540 
d°Off
 +
sz
;

543 
	`£tIãm
–
§cPg
, 
§cOff
, 
eNvZîo
 );

546 
§cOff
 +
sz
;

548 }  
TRUE
 );

550 
pgOff
[
pgRes
-
OSAL_NV_PAGE_BEG
] = 
d°Off
;

557 
	`îa£Page
–
§cPg
 );

560 
	`£tPageU£
–
pgRes
, 
TRUE
 );

563 
pgRes
 = 
§cPg
;

564 
	}
}

580 
uöt16
 
	$födIãm
–
uöt16
 
id
 )

582 
uöt16
 
off
;

583 
uöt8
 
pg
;

585  
pg
 = 
OSAL_NV_PAGE_BEG
;Ög <
OSAL_NV_PAGE_END
;Ög++ )

587 i‡–(
off
 = 
	`öôPage
–
pg
, 
id
, 
FALSE
 )Ë!
OSAL_NV_ITEM_NULL
 )

589 
födPg
 = 
pg
;

590  
off
;

595 i‡–(
id
 & 
OSAL_NV_SOURCE_ID
) == 0 )

597  
	`födIãm
–
id
 | 
OSAL_NV_SOURCE_ID
 );

601 
födPg
 = 
OSAL_NV_PAGE_NULL
;

602  
OSAL_NV_ITEM_NULL
;

604 
	}
}

617 
uöt8
 
	$öôIãm
–
uöt8
 
Êag
, 
uöt16
 
id
, uöt16 
Àn
, *
buf
 )

619 
uöt16
 
sz
 = 
	`OSAL_NV_ITEM_SIZE
–
Àn
 );

620 
uöt8
 
π∫
 = 
FALSE
;

621 
uöt8
 
˙t
 = 
OSAL_NV_PAGES_USED
;

622 
uöt8
 
pg
 = 
pgRes
+1;

623 
uöt8
 
idx
;

626 i‡(
pg
 >
OSAL_NV_PAGE_BEG
+
OSAL_NV_PAGES_USED
)

628 
pg
 = 
OSAL_NV_PAGE_BEG
;

630 i‡–
pg
 !
pgRes
 )

632 
idx
 = 
pg
 - 
OSAL_NV_PAGE_BEG
;

633 i‡–(
pgOff
[
idx
] - 
pgLo°
[idx] + 
sz
Ë<
OSAL_NV_PAGE_FREE
 )

638 
pg
++;

639 } --
˙t
);

641 i‡(
˙t
)

644 i‡–(
pgOff
[
idx
] + 
sz
Ë> 
OSAL_NV_PAGE_FREE
 )

646 
pg
 = 
pgRes
;

650 
π∫
 = 
	`wrôeIãm
–
pg
, 
id
, 
Àn
, 
buf
, 
Êag
 );

652 i‡–
pg
 =
pgRes
 )

654 i‡–
Êag
 )

656 
	`com∑˘Page
–
OSAL_NV_PAGE_BEG
+
idx
 );

660 *(
uöt8
 *)
buf
 = 
OSAL_NV_PAGE_BEG
+
idx
;

665  
π∫
;

666 
	}
}

680 
	$£tIãm
–
uöt8
 
pg
, 
uöt16
 
off£t
, 
eNvHdrEnum
 
°©
 )

682 
oßlNvHdr_t
 
hdr
;

684 
off£t
 -
OSAL_NV_HDR_SIZE
;

685 
	`HÆFœshRód
(
pg
, 
off£t
, (
uöt8
 *)(&
hdr
), 
OSAL_NV_HDR_SIZE
);

687 i‡–
°©
 =
eNvX„r
 )

689 
hdr
.
°©
 = 
OSAL_NV_ACTIVE
;

690 
	`wrôeW‹d
–
pg
, 
off£t
+
OSAL_NV_HDR_CHK
, (
uöt8
*)(&(
hdr
.
chk
)) );

694 
uöt16
 
sz
 = ((
hdr
.
Àn
 + (
OSAL_NV_WORD_SIZE
-1)) / OSAL_NV_WORD_SIZE) * OSAL_NV_WORD_SIZE +

695 
OSAL_NV_HDR_SIZE
;

696 
hdr
.
id
 = 0;

697 
	`wrôeW‹d
–
pg
, 
off£t
, (
uöt8
 *)(&
hdr
) );

698 
pgLo°
[
pg
-
OSAL_NV_PAGE_BEG
] +
sz
;

700 
	}
}

713 
uöt16
 
	$ˇlcChkB
–
uöt16
 
Àn
, 
uöt8
 *
buf
 )

715 
uöt8
 
fûl
 = 
Àn
 % 
OSAL_NV_WORD_SIZE
;

716 
uöt16
 
chk
;

718 i‡–!
buf
 )

720 
chk
 = 
Àn
 * 
OSAL_NV_ERASED
;

724 
chk
 = 0;

725  
Àn
-- )

727 
chk
 +*
buf
++;

732 i‡–
fûl
 )

734 
chk
 +(
OSAL_NV_WORD_SIZE
 - 
fûl
Ë* 
OSAL_NV_ERASED
;

737  
chk
;

738 
	}
}

751 
uöt16
 
	$ˇlcChkF
–
byã
 
pg
, 
uöt16
 
off£t
, uöt16 
Àn
 )

753 
uöt16
 
chk
 = 0;

755 
Àn
 = (À¿+ (
OSAL_NV_WORD_SIZE
-1)) / OSAL_NV_WORD_SIZE;

757  
Àn
-- )

759 
uöt8
 
˙t
, 
tmp
[
OSAL_NV_WORD_SIZE
];

761 
	`HÆFœshRód
(
pg
, 
off£t
, 
tmp
, 
OSAL_NV_WORD_SIZE
);

762 
off£t
 +
OSAL_NV_WORD_SIZE
;

764  
˙t
 = 0; c¡ < 
OSAL_NV_WORD_SIZE
; cnt++ )

766 
chk
 +
tmp
[
˙t
];

770  
chk
;

771 
	}
}

784 
	$wrôeW‹d
–
uöt8
 
pg
, 
uöt16
 
off£t
, uöt8 *
buf
 )

786 
off£t
 = (off£à>> 2Ë+ ((
uöt16
)
pg
 << 9);

788 i‡–
OSAL_NV_CHECK_BUS_VOLTAGE
 )

790 
	`HÆFœshWrôe
(
off£t
, 
buf
, 1);

794 
ÁûF
 = 
TRUE
;

796 
	}
}

810 
	$wrôeW‹dM
–
uöt8
 
pg
, 
uöt16
 
off£t
, uöt8 *
buf
, uöt16 
˙t
 )

812 
off£t
 = (off£à>> 2Ë+ ((
uöt16
)
pg
 << 9);

814 i‡–
OSAL_NV_CHECK_BUS_VOLTAGE
 )

816 
	`HÆFœshWrôe
(
off£t
, 
buf
, 
˙t
);

820 
ÁûF
 = 
TRUE
;

822 
	}
}

835 
	$wrôeW‹dH
–
uöt8
 
pg
, 
uöt16
 
off£t
, uöt8 *
buf
 )

837 
uöt8
 
tmp
[4];

839 
tmp
[0] = 
buf
[0];

840 
tmp
[1] = 
buf
[1];

841 
tmp
[2] = 
OSAL_NV_ERASED
;

842 
tmp
[3] = 
OSAL_NV_ERASED
;

844 
	`wrôeW‹d
–
pg
, 
off£t
, 
tmp
 );

845 
	}
}

859 
	$wrôeBuf
–
uöt8
 
d°Pg
, 
uöt16
 
d°Off
, uöt16 
Àn
, uöt8 *
buf
 )

861 
uöt8
 
ªm
 = 
d°Off
 % 
OSAL_NV_WORD_SIZE
;

862 
uöt8
 
tmp
[
OSAL_NV_WORD_SIZE
];

864 i‡–
ªm
 )

866 
d°Off
 = (d°Of‡/ 
OSAL_NV_WORD_SIZE
) * OSAL_NV_WORD_SIZE;

867 
	`HÆFœshRód
(
d°Pg
, 
d°Off
, 
tmp
, 
OSAL_NV_WORD_SIZE
);

869  (
ªm
 < 
OSAL_NV_WORD_SIZE
Ë&& 
Àn
 )

871 
tmp
[
ªm
++] = *
buf
++;

872 
Àn
--;

875 
	`wrôeW‹d
–
d°Pg
, 
d°Off
, 
tmp
 );

876 
d°Off
 +
OSAL_NV_WORD_SIZE
;

879 
ªm
 = 
Àn
 % 
OSAL_NV_WORD_SIZE
;

880 
Àn
 /
OSAL_NV_WORD_SIZE
;

882 i‡–
Àn
 )

884 
	`wrôeW‹dM
–
d°Pg
, 
d°Off
, 
buf
, 
Àn
 );

885 
d°Off
 +
OSAL_NV_WORD_SIZE
 * 
Àn
;

886 
buf
 +
OSAL_NV_WORD_SIZE
 * 
Àn
;

889 i‡–
ªm
 )

891 
uöt8
 
idx
 = 0;

892 
	`HÆFœshRód
(
d°Pg
, 
d°Off
, 
tmp
, 
OSAL_NV_WORD_SIZE
);

893  
ªm
-- )

895 
tmp
[
idx
++] = *
buf
++;

897 
	`wrôeW‹d
–
d°Pg
, 
d°Off
, 
tmp
 );

899 
	}
}

908 
	$x„rBuf
–
uöt8
 
§cPg
, 
uöt16
 
§cOff
, uöt8 
d°Pg
, uöt16 
d°Off
, uöt16 
Àn
 )

910 
uöt8
 
ªm
 = 
d°Off
 % 
OSAL_NV_WORD_SIZE
;

911 
uöt8
 
tmp
[
OSAL_NV_WORD_SIZE
];

913 i‡–
ªm
 )

915 
d°Off
 -
ªm
;

916 
	`HÆFœshRód
(
d°Pg
, 
d°Off
, 
tmp
, 
OSAL_NV_WORD_SIZE
);

918  (
ªm
 < 
OSAL_NV_WORD_SIZE
Ë&& 
Àn
 )

920 
	`HÆFœshRód
(
§cPg
, 
§cOff
, 
tmp
+
ªm
, 1);

921 
§cOff
++;

922 
ªm
++;

923 
Àn
--;

926 
	`wrôeW‹d
–
d°Pg
, 
d°Off
, 
tmp
 );

927 
d°Off
 +
OSAL_NV_WORD_SIZE
;

930 
ªm
 = 
Àn
 % 
OSAL_NV_WORD_SIZE
;

931 
Àn
 /
OSAL_NV_WORD_SIZE
;

933  
Àn
-- )

935 
	`HÆFœshRód
(
§cPg
, 
§cOff
, 
tmp
, 
OSAL_NV_WORD_SIZE
);

936 
§cOff
 +
OSAL_NV_WORD_SIZE
;

937 
	`wrôeW‹d
–
d°Pg
, 
d°Off
, 
tmp
 );

938 
d°Off
 +
OSAL_NV_WORD_SIZE
;

941 i‡–
ªm
 )

943 
uöt8
 
idx
 = 0;

944 
	`HÆFœshRód
(
d°Pg
, 
d°Off
, 
tmp
, 
OSAL_NV_WORD_SIZE
);

945  
ªm
-- )

947 
	`HÆFœshRód
(
§cPg
, 
§cOff
, 
tmp
+
idx
, 1);

948 
§cOff
++;

949 
idx
++;

951 
	`wrôeW‹d
–
d°Pg
, 
d°Off
, 
tmp
 );

953 
	}
}

968 
uöt8
 
	$wrôeIãm
–
uöt8
 
pg
, 
uöt16
 
id
, uöt16 
Àn
, *
buf
, uöt8 
Êag
 )

970 
uöt16
 
off£t
 = 
pgOff
[
pg
-
OSAL_NV_PAGE_BEG
];

971 
uöt8
 
π∫
 = 
FALSE
;

972 
oßlNvHdr_t
 
hdr
;

974 i‡–
pg
 =
pgRes
 )

979 
	`£tPageU£
–
pg
, 
FALSE
 );

982 
hdr
.
id
 = id;

983 
hdr
.
Àn
 =Üen;

985 
	`wrôeW‹d
–
pg
, 
off£t
, (
uöt8
 *)&
hdr
 );

986 
	`HÆFœshRód
(
pg
, 
off£t
, (
uöt8
 *)(&
hdr
), 
OSAL_NV_HDR_SIZE
);

988 i‡–(
hdr
.
id
 =idË&& (hdr.
Àn
 ==Üen) )

990 i‡–
Êag
 )

992 
uöt16
 
chk
 = 
	`ˇlcChkB
–
Àn
, 
buf
 );

994 
off£t
 +
OSAL_NV_HDR_SIZE
;

995 i‡–
buf
 !
NULL
 )

997 
	`wrôeBuf
–
pg
, 
off£t
, 
Àn
, 
buf
 );

1000 i‡–
chk
 =
	`ˇlcChkF
–
pg
, 
off£t
, 
Àn
 ) )

1002 
	`wrôeW‹dH
(
pg
, (
off£t
-
OSAL_NV_WORD_SIZE
), (
uöt8
 *)&
chk
);

1003 
	`HÆFœshRód
(
pg
, (
off£t
-
OSAL_NV_HDR_SIZE
), (
uöt8
 *)(&
hdr
), OSAL_NV_HDR_SIZE);

1005 i‡–
chk
 =
hdr
.chk )

1007 
π∫
 = 
pg
;

1013 
π∫
 = 
pg
;

1017 
Àn
 = 
	`OSAL_NV_ITEM_SIZE
–
hdr
.len );

1018 
pgOff
[
pg
-
OSAL_NV_PAGE_BEG
] +
Àn
;

1020  
π∫
;

1021 
	}
}

1032 
	$oßl_nv_öô
–*
p
 )

1034 ()
p
;

1035 ()
	`öôNV
();

1036 
	}
}

1054 
uöt8
 
	$oßl_nv_ôem_öô
–
uöt16
 
id
, uöt16 
Àn
, *
buf
 )

1059 
ÁûF
 = 
FALSE
;

1061 i‡–(
	`födIãm
–
id
 ) !
OSAL_NV_ITEM_NULL
) )

1063  
ZSUCCESS
;

1065 i‡–
	`öôIãm
–
TRUE
, 
id
, 
Àn
, 
buf
 ) )

1067 i‡–
ÁûF
 )

1069 ()
	`öôNV
();

1070  
NV_OPER_FAILED
;

1074  
NV_ITEM_UNINIT
;

1079  
NV_OPER_FAILED
;

1081 
	}
}

1092 
uöt16
 
	$oßl_nv_ôem_Àn
–
uöt16
 
id
 )

1094 
uöt16
 
off£t
 = 
	`födIãm
–
id
 );

1096 i‡–
off£t
 =
OSAL_NV_ITEM_NULL
 )

1102 
oßlNvHdr_t
 
hdr
;

1103 
	`HÆFœshRód
(
födPg
, (
off£t
 - 
OSAL_NV_HDR_SIZE
), (
uöt8
 *)(&
hdr
), OSAL_NV_HDR_SIZE);

1104  
hdr
.
Àn
;

1106 
	}
}

1122 
uöt8
 
	$oßl_nv_wrôe
–
uöt16
 
id
, uöt16 
ndx
, uöt16 
Àn
, *
buf
 )

1124 
uöt8
 
π∫
 = 
ZSUCCESS
;

1129 
ÁûF
 = 
FALSE
;

1131 i‡–
Àn
 != 0 )

1133 
oßlNvHdr_t
 
hdr
;

1134 
uöt16
 
‹igOff
, 
§cOff
;

1135 
uöt16
 
˙t
;

1136 
uöt8
 *
±r
;

1138 
‹igOff
 = 
§cOff
 = 
	`födIãm
–
id
 );

1139 i‡–
§cOff
 =
OSAL_NV_ITEM_NULL
 )

1141  
NV_ITEM_UNINIT
;

1144 
	`HÆFœshRód
(
födPg
, (
§cOff
 - 
OSAL_NV_HDR_SIZE
), (
uöt8
 *)(&
hdr
), OSAL_NV_HDR_SIZE);

1145 i‡–
hdr
.
Àn
 < (
ndx
 +Üen) )

1147  
NV_OPER_FAILED
;

1150 
§cOff
 +
ndx
;

1151 
±r
 = 
buf
;

1152 
˙t
 = 
Àn
;

1153  
˙t
 )

1155 
uöt8
 
tmp
;

1156 
	`HÆFœshRód
(
födPg
, 
§cOff
++, &
tmp
, 1);

1157 i‡–
tmp
 !*
±r
++ )

1161 
˙t
--;

1164 i‡–
˙t
 != 0 )

1166 
uöt8
 
comPg
, 
d°Pg
 = 
	`öôIãm
–
FALSE
, 
id
, 
hdr
.
Àn
, &comPg );

1168 i‡–
d°Pg
 !
OSAL_NV_PAGE_NULL
 )

1170 
uöt16
 
tmp
 = 
	`OSAL_NV_DATA_SIZE
–
hdr
.
Àn
 );

1171 
uöt16
 
d°Off
 = 
pgOff
[
d°Pg
-
OSAL_NV_PAGE_BEG
] - 
tmp
;

1172 
uöt8
 
§cPg
 = 
födPg
;

1173 
§cOff
 = 
‹igOff
;

1175 
	`£tIãm
–
§cPg
, 
§cOff
, 
eNvX„r
 );

1177 
	`x„rBuf
–
§cPg
, 
§cOff
, 
d°Pg
, 
d°Off
, 
ndx
 );

1178 
§cOff
 +
ndx
;

1179 
d°Off
 +
ndx
;

1181 
	`wrôeBuf
–
d°Pg
, 
d°Off
, 
Àn
, 
buf
 );

1182 
§cOff
 +
Àn
;

1183 
d°Off
 +
Àn
;

1185 
	`x„rBuf
–
§cPg
, 
§cOff
, 
d°Pg
, 
d°Off
, (
hdr
.
Àn
-
ndx
-len) );

1188 
d°Off
 = 
pgOff
[
d°Pg
-
OSAL_NV_PAGE_BEG
] - 
tmp
;

1189 
tmp
 = 
	`ˇlcChkF
–
d°Pg
, 
d°Off
, 
hdr
.
Àn
 );

1190 
d°Off
 -
OSAL_NV_HDR_SIZE
;

1191 
	`wrôeW‹dH
–
d°Pg
, (
d°Off
+
OSAL_NV_HDR_CHK
), (
uöt8
 *)&
tmp
 );

1192 
	`HÆFœshRód
(
d°Pg
, 
d°Off
, (
uöt8
 *)(&
hdr
), 
OSAL_NV_HDR_SIZE
);

1194 i‡–
tmp
 =
hdr
.
chk
 )

1196 
	`£tIãm
–
§cPg
, 
‹igOff
, 
eNvZîo
 );

1200 
π∫
 = 
NV_OPER_FAILED
;

1203 i‡–
d°Pg
 =
pgRes
 )

1205 
	`com∑˘Page
–
comPg
 );

1210 
π∫
 = 
NV_OPER_FAILED
;

1215 i‡–
ÁûF
 )

1217 ()
	`öôNV
();

1218 
π∫
 = 
NV_OPER_FAILED
;

1221  
π∫
;

1222 
	}
}

1239 
uöt8
 
	$oßl_nv_ªad
–
uöt16
 
id
, uöt16 
ndx
, uöt16 
Àn
, *
buf
 )

1241 
uöt16
 
off£t
;

1243 
off£t
 = 
	`födIãm
–
id
 );

1244 i‡–
off£t
 =
OSAL_NV_ITEM_NULL
 )

1246  
NV_OPER_FAILED
;

1249 
	`HÆFœshRód
(
födPg
, 
off£t
+
ndx
, 
buf
, 
Àn
);

1251  
ZSUCCESS
;

1252 
	}
}

	@Components/services/saddr/saddr.c

43 
	~"hÆ_ty≥s.h
"

44 
	~"OSAL.h
"

45 
	~"ßddr.h
"

61 
boﬁ
 
	$sAddrCmp
(c⁄° 
sAddr_t
 *
pAddr1
, c⁄° sAddr_à*
pAddr2
)

63 i‡(
pAddr1
->
addrMode
 !
pAddr2
->addrMode)

65  
FALSE
;

67 i‡(
pAddr1
->
addrMode
 =
SADDR_MODE_NONE
)

69  
FALSE
;

71 i‡(
pAddr1
->
addrMode
 =
SADDR_MODE_SHORT
)

73  (
boﬁ
Ë(
pAddr1
->
addr
.
sh‹tAddr
 =
pAddr2
->addr.shortAddr);

75 i‡(
pAddr1
->
addrMode
 =
SADDR_MODE_EXT
)

77  (
	`sAddrExtCmp
(
pAddr1
->
addr
.
extAddr
, 
pAddr2
->addr.extAddr));

81  
FALSE
;

83 
	}
}

100 
	$sAddrCpy
(
sAddr_t
 *
pDe°
, c⁄° sAddr_à*
pSrc
)

102 
pDe°
->
addrMode
 = 
pSrc
->addrMode;

104 i‡(
pDe°
->
addrMode
 =
SADDR_MODE_EXT
)

106 
	`sAddrExtCpy
(
pDe°
->
addr
.
extAddr
, 
pSrc
->addr.extAddr);

110 
pDe°
->
addr
.
sh‹tAddr
 = 
pSrc
->addr.shortAddr;

112 
	}
}

128 
boﬁ
 
	$sAddrExtCmp
(c⁄° 
uöt8
 * 
pAddr1
, c⁄° uöt8 * 
pAddr2
)

130 
uöt8
 
i
;

132 
i
 = 
SADDR_EXT_LEN
; i != 0; i--)

134 i‡(*
pAddr1
++ !*
pAddr2
++)

136  
FALSE
;

139  
TRUE
;

140 
	}
}

157 *
	$sAddrExtCpy
(
uöt8
 * 
pDe°
, c⁄° uöt8 * 
pSrc
)

159  
	`oßl_mem˝y
(
pDe°
, 
pSrc
, 
SADDR_EXT_LEN
);

160 
	}
}

	@Components/services/saddr/saddr.h

40 #i‚de‡
SADDR_H


41 
	#SADDR_H


	)

44 #ifde‡
__˝lu•lus


53 
	#SADDR_EXT_LEN
 8

	)

56 
	#SADDR_MODE_NONE
 0

	)

57 
	#SADDR_MODE_SHORT
 2

	)

58 
	#SADDR_MODE_EXT
 3

	)

65 
uöt8
 
	tsAddrExt_t
[
SADDR_EXT_LEN
];

72 
uöt16
 
sh‹tAddr
;

73 
sAddrExt_t
 
extAddr
;

74 } 
addr
;

75 
uöt8
 
addrMode
;

76 } 
	tsAddr_t
;

92 
boﬁ
 
sAddrCmp
(c⁄° 
sAddr_t
 *
pAddr1
, c⁄° sAddr_à*
pAddr2
);

109 
sAddrCpy
(
sAddr_t
 *
pDe°
, c⁄° sAddr_à*
pSrc
);

125 
boﬁ
 
sAddrExtCmp
(c⁄° 
uöt8
 * 
pAddr1
, c⁄° uöt8 * 
pAddr2
);

142 *
sAddrExtCpy
(
uöt8
 * 
pDe°
, c⁄° uöt8 * 
pSrc
);

144 #ifde‡
__˝lu•lus


	@Components/services/sdata/sdata.h

40 #i‚de‡
SDATA_H


41 
	#SDATA_H


	)

43 #ifde‡
__˝lu•lus


54 
uöt8
 *
p
;

55 
uöt8
 
Àn
;

56 } 
	tsD©a_t
;

58 #ifde‡
__˝lu•lus


	@Components/stack/af/AF.c

44 
	~"OSAL.h
"

45 
	~"AF.h
"

46 
	~"nwk_globÆs.h
"

47 
	~"nwk_utû.h
"

48 
	~"≠s_groups.h
"

49 
	~"ZDProfûe.h
"

50 
	~"≠s_‰ag.h
"

52 #i‡
deföed
 ( 
MT_AF_CB_FUNC
 )

53 
	~"MT_AF.h
"

56 #i‡
deföed
 ( 
INTER_PAN
 )

57 
	~"°ub_≠s.h
"

86 
	#afSíd
–
d°Addr
, 
§cEP
, 
cID
, 
Àn
, 
buf
, 
å™sID
, 
›ti⁄s
, 
ødius
 ) \

	)

87 
AF_D©aReque°
–(
d°Addr
), 
afFödEndPoötDesc
–(
§cEP
) ), \

88 (
cID
), (
Àn
), (
buf
), (
å™sID
), (
›ti⁄s
), (
ødius
) )

102 
ïLi°_t
 *
	gïLi°
;

120 
afBuûdMSGIncomög
–
≠s_FømeF‹m©_t
 *
aff
, 
ídPoötDesc_t
 *
ïDesc
,

121 
zAddrTy≥_t
 *
SrcAddªss
, 
uöt16
 
SrcP™Id
, 
NLDE_Sig«l_t
 *
sig
,

122 
byã
 
SecurôyU£
, 
uöt32
 
time°amp
 );

124 
ïLi°_t
 *
afFödEndPoötDescLi°
–
byã
 
EndPoöt
 );

126 
pDescCB
 
afGëDescCB
–
ídPoötDesc_t
 *
ïDesc
 );

145 
	$afInô
( )

148 
ïLi°
 = 
NULL
;

149 
	}
}

163 
ïLi°_t
 *
	$afRegi°îExãnded
–
ídPoötDesc_t
 *
ïDesc
, 
pDescCB
 
descFn
 )

165 
ïLi°_t
 *
ï
;

166 
ïLi°_t
 *
ïSórch
;

168 
ï
 = 
	`oßl_mem_Æloc
– ( 
ïLi°_t
 ) );

169 i‡–
ï
 )

172 
ï
->
ïDesc
 =ÉpDesc;

175 
ï
->
Êags
 = 
eEP_AŒowM©ch
;

176 
ï
->
p‚DescCB
 = 
descFn
;

177 
ï
->
√xtDesc
 = 
NULL
;

180 i‡–
ïLi°
 =
NULL
 )

181 
ïLi°
 = 
ï
;

185 
ïSórch
 = 
ïLi°
;

186  
ïSórch
->
√xtDesc
 !
NULL
 )

187 
ïSórch
 =ÉpSórch->
√xtDesc
;

190 
ïSórch
->
√xtDesc
 = 
ï
;

194  
ï
;

195 
	}
}

210 
afSètus_t
 
	$afRegi°î
–
ídPoötDesc_t
 *
ïDesc
 )

212 
ïLi°_t
 *
ï
;

215 i‡–
	`afFödEndPoötDescLi°
–
ïDesc
->
ídPoöt
 ) )

216  ( 
afSètus_INVALID_PARAMETER
 );

218 
ï
 = 
	`afRegi°îExãnded
–
ïDesc
, 
NULL
 );

220  ((
ï
 =
NULL
Ë? 
afSètus_MEM_FAIL
 : 
afSètus_SUCCESS
);

221 
	}
}

236 
	$afD©aC⁄fúm
–
uöt8
 
ídPoöt
, uöt8 
å™sID
, 
ZSètus_t
 
°©us
 )

238 
ídPoötDesc_t
 *
ïDesc
;

239 
afD©aC⁄fúm_t
 *
msgPå
;

242 
ïDesc
 = 
	`afFödEndPoötDesc
–
ídPoöt
 );

243 i‡–
ïDesc
 =
NULL
 )

247 
msgPå
 = (
afD©aC⁄fúm_t
 *)
	`oßl_msg_Æloˇã
( (afDataConfirm_t) );

248 i‡–
msgPå
 )

251 
msgPå
->
hdr
.
evít
 = 
AF_DATA_CONFIRM_CMD
;

252 
msgPå
->
hdr
.
°©us
 = status;

253 
msgPå
->
ídpoöt
 = 
ídPoöt
;

254 
msgPå
->
å™sID
 =ÅransID;

256 #i‡
	`deföed
 ( 
MT_AF_CB_FUNC
 )

258 i‡–
	`AFCB_CHECK
(
CB_ID_AF_DATA_CNF
,*(
ïDesc
->
èsk_id
)) )

261 
	`MT_AfD©aC⁄fúm
 ((*)
msgPå
);

263 
	`oßl_msg_dóŒoˇã
–(*)
msgPå
 );

269 
	`oßl_msg_£nd
–*(
ïDesc
->
èsk_id
), (
byã
 *)
msgPå
 );

272 
	}
}

286 
	$afIncomögD©a
–
≠s_FømeF‹m©_t
 *
aff
, 
zAddrTy≥_t
 *
SrcAddªss
, 
uöt16
 
SrcP™Id
,

287 
NLDE_Sig«l_t
 *
sig
, 
byã
 
SecurôyU£
, 
uöt32
 
time°amp
 )

289 
ídPoötDesc_t
 *
ïDesc
 = 
NULL
;

290 
uöt16
 
ïProfûeID
 = 0xFFFF;

291 
ïLi°_t
 *
pLi°
;

292 #i‡!
	`deföed
 ( 
APS_NO_GROUPS
 )

293 
uöt8
 
gΩEp
;

296 i‡–((
aff
->
FrmCål
 & 
APS_DELIVERYMODE_MASK
Ë=
APS_FC_DM_GROUP
) )

298 #i‡!
	`deföed
 ( 
APS_NO_GROUPS
 )

300 
gΩEp
 = 
	`≠s_FödGroupF‹Endpoöt
–
aff
->
GroupID
, 
APS_GROUPS_FIND_FIRST
 );

301 i‡–
gΩEp
 =
APS_GROUPS_EP_NOT_FOUND
 )

304 
ïDesc
 = 
	`afFödEndPoötDesc
–
gΩEp
 );

305 i‡–
ïDesc
 =
NULL
 )

308 
pLi°
 = 
	`afFödEndPoötDescLi°
–
ïDesc
->
ídPoöt
 );

313 i‡–
aff
->
D°EndPoöt
 =
AF_BROADCAST_ENDPOINT
 )

316 i‡–(
pLi°
 = 
ïLi°
) )

318 
ïDesc
 = 
pLi°
->epDesc;

321 i‡–(
ïDesc
 = 
	`afFödEndPoötDesc
–
aff
->
D°EndPoöt
 )) )

323 
pLi°
 = 
	`afFödEndPoötDescLi°
–
ïDesc
->
ídPoöt
 );

326  
ïDesc
 )

328 i‡–
pLi°
->
p‚DescCB
 )

330 
uöt16
 *
pID
 = (uöt16 *)(
pLi°
->
	`p‚DescCB
(

331 
AF_DESCRIPTOR_PROFILE_ID
, 
ïDesc
->
ídPoöt
 ));

332 i‡–
pID
 )

334 
ïProfûeID
 = *
pID
;

335 
	`oßl_mem_‰ì
–
pID
 );

338 i‡–
ïDesc
->
sim∂eDesc
 )

340 
ïProfûeID
 = 
ïDesc
->
sim∂eDesc
->
AµProfId
;

343 i‡–(
aff
->
ProfûeID
 =
ïProfûeID
) ||

344 ((
ïDesc
->
ídPoöt
 =
ZDO_EP
Ë&& (
aff
->
ProfûeID
 =
ZDO_PROFILE_ID
)) )

347 
	`afBuûdMSGIncomög
–
aff
, 
ïDesc
, 
SrcAddªss
, 
SrcP™Id
, 
sig
, 
SecurôyU£
, 
time°amp
 );

351 i‡–((
aff
->
FrmCål
 & 
APS_DELIVERYMODE_MASK
Ë=
APS_FC_DM_GROUP
) )

353 #i‡!
	`deföed
 ( 
APS_NO_GROUPS
 )

355 
gΩEp
 = 
	`≠s_FödGroupF‹Endpoöt
–
aff
->
GroupID
, grpEp );

356 i‡–
gΩEp
 =
APS_GROUPS_EP_NOT_FOUND
 )

359 
ïDesc
 = 
	`afFödEndPoötDesc
–
gΩEp
 );

360 i‡–
ïDesc
 =
NULL
 )

363 
pLi°
 = 
	`afFödEndPoötDescLi°
–
ïDesc
->
ídPoöt
 );

368 i‡–
aff
->
D°EndPoöt
 =
AF_BROADCAST_ENDPOINT
 )

370 
pLi°
 =ÖLi°->
√xtDesc
;

371 i‡–
pLi°
 )

372 
ïDesc
 = 
pLi°
->epDesc;

374 
ïDesc
 = 
NULL
;

377 
ïDesc
 = 
NULL
;

379 
	}
}

390 
	$afBuûdMSGIncomög
–
≠s_FømeF‹m©_t
 *
aff
, 
ídPoötDesc_t
 *
ïDesc
,

391 
zAddrTy≥_t
 *
SrcAddªss
, 
uöt16
 
SrcP™Id
, 
NLDE_Sig«l_t
 *
sig
,

392 
byã
 
SecurôyU£
, 
uöt32
 
time°amp
 )

394 
afIncomögMSGPackë_t
 *
MSGpkt
;

395 c⁄° 
byã
 
Àn
 = –
afIncomögMSGPackë_t
 ) + 
aff
->
asduLígth
;

396 
byã
 *
asdu
 = 
aff
->asdu;

397 
MSGpkt
 = (
afIncomögMSGPackë_t
 *)
	`oßl_msg_Æloˇã
–
Àn
 );

399 i‡–
MSGpkt
 =
NULL
 )

404 
MSGpkt
->
hdr
.
evít
 = 
AF_INCOMING_MSG_CMD
;

405 
MSGpkt
->
groupId
 = 
aff
->
GroupID
;

406 
MSGpkt
->
˛u°îId
 = 
aff
->
Clu°îID
;

407 
	`afC›yAddªss
–&
MSGpkt
->
§cAddr
, 
SrcAddªss
 );

408 
MSGpkt
->
§cAddr
.
ídPoöt
 = 
aff
->
SrcEndPoöt
;

409 
MSGpkt
->
ídPoöt
 = 
ïDesc
->endPoint;

410 
MSGpkt
->
wasBrﬂdˇ°
 = 
aff
->wasBroadcast;

411 
MSGpkt
->
LökQuÆôy
 = 
sig
->LinkQuality;

412 
MSGpkt
->
c‹ªœti⁄
 = 
sig
->correlation;

413 
MSGpkt
->
rssi
 = 
sig
->rssi;

414 
MSGpkt
->
SecurôyU£
 = SecurityUse;

415 
MSGpkt
->
time°amp
 =Åimestamp;

416 
MSGpkt
->
macDe°Addr
 = 
aff
->macDestAddr;

417 
MSGpkt
->
§cAddr
.
∑nId
 = 
SrcP™Id
;

418 
MSGpkt
->
cmd
.
TønsSeqNumbî
 = 0;

419 
MSGpkt
->
cmd
.
D©aLígth
 = 
aff
->
asduLígth
;

421 i‡–
MSGpkt
->
cmd
.
D©aLígth
 )

423 
MSGpkt
->
cmd
.
D©a
 = (
byã
 *)(MSGpkt + 1);

424 
	`oßl_mem˝y
–
MSGpkt
->
cmd
.
D©a
, 
asdu
, MSGpkt->cmd.
D©aLígth
 );

428 
MSGpkt
->
cmd
.
D©a
 = 
NULL
;

431 #i‡
	`deföed
 ( 
MT_AF_CB_FUNC
 )

433 i‡(
	`AFCB_CHECK
(
CB_ID_AF_DATA_IND
, *(
ïDesc
->
èsk_id
)))

435 
	`MT_AfIncomögMsg
–(*)
MSGpkt
 );

437 
	`oßl_msg_dóŒoˇã
–(*)
MSGpkt
 );

443 
	`oßl_msg_£nd
–*(
ïDesc
->
èsk_id
), (
uöt8
 *)
MSGpkt
 );

445 
	}
}

471 
uöt8
 
	gAF_D©aReque°DiscovîRouã
 = 
TRUE
;

472 
afSètus_t
 
	$AF_D©aReque°
–
afAddrTy≥_t
 *
d°Addr
, 
ídPoötDesc_t
 *
§cEP
,

473 
uöt16
 
cID
, uöt16 
Àn
, 
uöt8
 *
buf
, uöt8 *
å™sID
,

474 
uöt8
 
›ti⁄s
, uöt8 
ødius
 )

476 
pDescCB
 
p‚DescCB
;

477 
ZSètus_t
 
°©
;

478 
APSDE_D©aReq_t
 
ªq
;

479 
afD©aReqMTU_t
 
mtu
;

482 i‡–
§cEP
 =
NULL
 )

484  
afSètus_INVALID_PARAMETER
;

487 #i‡!
	`deföed
–
REFLECTOR
 )

488 i‡–
d°Addr
->
addrMode
 =
afAddrNŸPª£¡
 )

490  
afSètus_INVALID_PARAMETER
;

495 i‡––
d°Addr
->
addrMode
 =
afAddr16Bô
 ) ||

496 –
d°Addr
->
addrMode
 =
afAddrBrﬂdˇ°
 ) )

499 if–
ADDR_NOT_BCAST
 !
	`NLME_IsAddªssBrﬂdˇ°
–
d°Addr
->
addr
.
sh‹tAddr
 ) )

502 
d°Addr
->
addrMode
 = 
afAddrBrﬂdˇ°
;

507 i‡–
d°Addr
->
addrMode
 =
afAddrBrﬂdˇ°
 )

509  
afSètus_INVALID_PARAMETER
;

513 i‡–
d°Addr
->
addrMode
 !
afAddr64Bô
 &&

514 
d°Addr
->
addrMode
 !
afAddrGroup
 &&

515 
d°Addr
->
addrMode
 !
afAddrNŸPª£¡
 )

517  
afSètus_INVALID_PARAMETER
;

521 
ªq
.
d°Addr
.
addrMode
 = dstAddr->addrMode;

522 i‡–
d°Addr
->
addrMode
 =
afAddr64Bô
 )

523 
	`oßl_˝yExtAddr
–
ªq
.
d°Addr
.
addr
.
extAddr
, dstAddr->addr.extAddr );

525 
ªq
.
d°Addr
.
addr
.
sh‹tAddr
 = dstAddr->addr.shortAddr;

527 
ªq
.
¥ofûeID
 = 
ZDO_PROFILE_ID
;

529 i‡–(
p‚DescCB
 = 
	`afGëDescCB
–
§cEP
 )) )

531 
uöt16
 *
pID
 = (uöt16 *)(
	`p‚DescCB
(

532 
AF_DESCRIPTOR_PROFILE_ID
, 
§cEP
->
ídPoöt
 ));

533 i‡–
pID
 )

535 
ªq
.
¥ofûeID
 = *
pID
;

536 
	`oßl_mem_‰ì
–
pID
 );

539 i‡–
§cEP
->
sim∂eDesc
 )

541 
ªq
.
¥ofûeID
 = 
§cEP
->
sim∂eDesc
->
AµProfId
;

544 
ªq
.
txO±i⁄s
 = 0;

546 i‡––
›ti⁄s
 & 
AF_ACK_REQUEST
 ) &&

547 –
ªq
.
d°Addr
.
addrMode
 !
AddrBrﬂdˇ°
 ) &&

548 –
ªq
.
d°Addr
.
addrMode
 !
AddrGroup
 ) )

550 
ªq
.
txO±i⁄s
 |
APS_TX_OPTIONS_ACK
;

553 i‡–
›ti⁄s
 & 
AF_SKIP_ROUTING
 )

555 
ªq
.
txO±i⁄s
 |
APS_TX_OPTIONS_SKIP_ROUTING
;

558 i‡–
›ti⁄s
 & 
AF_EN_SECURITY
 )

560 
ªq
.
txO±i⁄s
 |
APS_TX_OPTIONS_SECURITY_ENABLE
;

561 
mtu
.
≠s
.
£cuª
 = 
TRUE
;

565 
mtu
.
≠s
.
£cuª
 = 
FALSE
;

568 
mtu
.
kvp
 = 
FALSE
;

570 
ªq
.
å™sID
 = *transID;

571 
ªq
.
§cEP
 = srcEP->
ídPoöt
;

572 
ªq
.
d°EP
 = 
d°Addr
->
ídPoöt
;

573 
ªq
.
˛u°îID
 = 
cID
;

574 
ªq
.
asduLí
 = 
Àn
;

575 
ªq
.
asdu
 = 
buf
;

576 
ªq
.
discovîRouã
 = 
AF_D©aReque°DiscovîRouã
;

577 
ªq
.
ødiusCou¡î
 = 
ødius
;

578 #i‡
	`deföed
 ( 
INTER_PAN
 )

579 
ªq
.
d°P™Id
 = 
d°Addr
->
∑nId
;

581 i‡–
	`StubAPS_I¡îP™
–
d°Addr
->
∑nId
, d°Addr->
ídPoöt
 ) )

583 i‡–
Àn
 > 
	`INTERP_D©aReqMTU
() )

585 
°©
 = 
afSètus_INVALID_PARAMETER
;

589 
°©
 = 
	`INTERP_D©aReq
–&
ªq
 );

595 i‡(
Àn
 > 
	`afD©aReqMTU
–&
mtu
 ) )

597 i‡(
≠sfSídFøgmíãd
)

599 
°©
 = (*
≠sfSídFøgmíãd
)–&
ªq
 );

603 
°©
 = 
afSètus_INVALID_PARAMETER
;

608 
°©
 = 
	`APSDE_D©aReq
–&
ªq
 );

621 i‡–(
ªq
.
d°Addr
.
addrMode
 =
Addr16Bô
) &&

622 (
ªq
.
d°Addr
.
addr
.
sh‹tAddr
 =
	`NLME_GëSh‹tAddr
()) )

624 
	`afD©aC⁄fúm
–
§cEP
->
ídPoöt
, *
å™sID
, 
°©
 );

627 i‡–
°©
 =
afSètus_SUCCESS
 )

629 (*
å™sID
)++;

632  (
afSètus_t
)
°©
;

633 
	}
}

645 
ïLi°_t
 *
	$afFödEndPoötDescLi°
–
byã
 
EndPoöt
 )

647 
ïLi°_t
 *
ïSórch
;

650 
ïSórch
 = 
ïLi°
;

653  
ïSórch
 )

656 i‡–
ïSórch
->
ïDesc
->
ídPoöt
 =
EndPoöt
 )

658  ( 
ïSórch
 );

661 
ïSórch
 =ÉpSórch->
√xtDesc
;

664  ( (
ïLi°_t
 *)
NULL
 );

665 
	}
}

677 
ídPoötDesc_t
 *
	$afFödEndPoötDesc
–
byã
 
EndPoöt
 )

679 
ïLi°_t
 *
ïSórch
;

682 
ïSórch
 = 
	`afFödEndPoötDescLi°
–
EndPoöt
 );

684 i‡–
ïSórch
 )

685  ( 
ïSórch
->
ïDesc
 );

687  ( (
ídPoötDesc_t
 *)
NULL
 );

688 
	}
}

699 
byã
 
	$afFödSim∂eDesc
–
Sim∂eDes¸ùti⁄F‹m©_t
 **
µDesc
, 
byã
 
EP
 )

701 
ïLi°_t
 *
ïIãm
 = 
	`afFödEndPoötDescLi°
–
EP
 );

702 
byã
 
π∫
 = 
FALSE
;

704 i‡–
ïIãm
 )

706 i‡–
ïIãm
->
p‚DescCB
 )

708 *
µDesc
 = 
ïIãm
->
	`p‚DescCB
–
AF_DESCRIPTOR_SIMPLE
, 
EP
 );

709 
π∫
 = 
TRUE
;

713 *
µDesc
 = 
ïIãm
->
ïDesc
->
sim∂eDesc
;

718 *
µDesc
 = 
NULL
;

721  
π∫
;

722 
	}
}

733 
pDescCB
 
	$afGëDescCB
–
ídPoötDesc_t
 *
ïDesc
 )

735 
ïLi°_t
 *
ïSórch
;

738 
ïSórch
 = 
ïLi°
;

741  
ïSórch
 )

744 i‡–
ïSórch
->
ïDesc
 ==ÉpDesc )

746  ( 
ïSórch
->
p‚DescCB
 );

749 
ïSórch
 =ÉpSórch->
√xtDesc
;

752  ( (
pDescCB
)
NULL
 );

753 
	}
}

764 
uöt8
 
	$afD©aReqMTU
–
afD©aReqMTU_t
* 
fõlds
 )

766 
uöt8
 
Àn
;

767 
uöt8
 
hdr
;

769 i‡–
fõlds
->
kvp
 =
TRUE
 )

771 
hdr
 = 
AF_HDR_KVP_MAX_LEN
;

775 
hdr
 = 
AF_HDR_V1_1_MAX_LEN
;

778 
Àn
 = (
uöt8
)(
	`APSDE_D©aReqMTU
(&
fõlds
->
≠s
Ë- 
hdr
);

780  
Àn
;

781 
	}
}

793 
uöt8
 
	$afGëM©ch
–
uöt8
 
ï
 )

795 
ïLi°_t
 *
ïSórch
;

798 
ïSórch
 = 
	`afFödEndPoötDescLi°
–
ï
 );

800 i‡–
ïSórch
 )

802 i‡–
ïSórch
->
Êags
 & 
eEP_AŒowM©ch
 )

803  ( 
TRUE
 );

805  ( 
FALSE
 );

808  ( 
FALSE
 );

809 
	}
}

821 
uöt8
 
	$afSëM©ch
–
uöt8
 
ï
, uöt8 
a˘i⁄
 )

823 
ïLi°_t
 *
ïSórch
;

826 
ïSórch
 = 
	`afFödEndPoötDescLi°
–
ï
 );

828 i‡–
ïSórch
 )

830 i‡–
a˘i⁄
 )

832 
ïSórch
->
Êags
 |
eEP_AŒowM©ch
;

836 
ïSórch
->
Êags
 &(
eEP_AŒowM©ch
 ^ 0xFFFF);

838  ( 
TRUE
 );

841  ( 
FALSE
 );

842 
	}
}

853 
byã
 
	$afNumEndPoöts
( )

855 
ïLi°_t
 *
ïSórch
;

856 
byã
 
ídpoöts
;

859 
ïSórch
 = 
ïLi°
;

860 
ídpoöts
 = 0;

862  
ïSórch
 )

864 
ídpoöts
++;

865 
ïSórch
 =ÉpSórch->
√xtDesc
;

868  ( 
ídpoöts
 );

869 
	}
}

881 
	$afEndPoöts
–
byã
 *
ïBuf
, byã 
skùZDO
 )

883 
ïLi°_t
 *
ïSórch
;

884 
byã
 
ídPoöt
;

887 
ïSórch
 = 
ïLi°
;

889  
ïSórch
 )

891 
ídPoöt
 = 
ïSórch
->
ïDesc
->endPoint;

893 i‡–!
skùZDO
 || 
ídPoöt
 != 0 )

894 *
ïBuf
++ = 
ídPoöt
;

896 
ïSórch
 =ÉpSórch->
√xtDesc
;

898 
	}
}

901 
	$afC›yAddªss
 ( 
afAddrTy≥_t
 *
afAddr
, 
zAddrTy≥_t
 *
zAddr
 )

903 
afAddr
->
addrMode
 = (
afAddrMode_t
)
zAddr
->addrMode;

904 i‡–
zAddr
->
addrMode
 =
Addr64Bô
 )

905 
	`oßl_˝yExtAddr
–
afAddr
->
addr
.
extAddr
, 
zAddr
->addr.extAddr );

907 
afAddr
->
addr
.
sh‹tAddr
 = 
zAddr
->addr.shortAddr;

908 
	}
}

	@Components/stack/af/AF.h

40 #i‚de‡
AF_H


41 
	#AF_H


	)

43 #ifde‡
__˝lu•lus


52 
	~"ZComDef.h
"

53 
	~"nwk.h
"

54 
	~"APSMEDE.h
"

60 
	#AF_BROADCAST_ENDPOINT
 0xFF

	)

62 
	#AF_ACK_REQUEST
 0x10

	)

63 
	#AF_DISCV_ROUTE
 0x20

	)

64 
	#AF_EN_SECURITY
 0x40

	)

65 
	#AF_SKIP_ROUTING
 0x80

	)

68 
	#AF_TX_OPTIONS_NONE
 0

	)

69 
	#AF_MSG_ACK_REQUEST
 
AF_ACK_REQUEST


	)

72 
	#AF_DEFAULT_RADIUS
 
DEF_NWK_RADIUS


	)

78 
	#AF_MAX_USER_DESCRIPTOR_LEN
 16

	)

79 
	#AF_USER_DESCRIPTOR_FILL
 0x20

	)

82 
byã
 
Àn
;

83 
byã
 
desc
[
AF_MAX_USER_DESCRIPTOR_LEN
];

84 } 
	tU£rDes¸ùt‹F‹m©_t
;

87 
	#NODETYPE_COORDINATOR
 0x00

	)

88 
	#NODETYPE_ROUTER
 0x01

	)

89 
	#NODETYPE_DEVICE
 0x02

	)

92 
	#NODEFREQ_800
 0x01

93 
	#NODEFREQ_900
 0x04

94 
	#NODEFREQ_2400
 0x08

95 

	)

104 
uöt8
 
LogiˇlTy≥
:3;

105 
uöt8
 
Com∂exDescAvaû
:1;

106 
uöt8
 
U£rDescAvaû
:1;

107 
uöt8
 
Re£rved
:3;

108 
uöt8
 
APSFœgs
:3;

109 
uöt8
 
FªquícyB™d
:5;

110 
uöt8
 
C≠abûôyFœgs
;

111 
uöt8
 
M™uÁ˘uªrCode
[2];

112 
uöt8
 
MaxBuf„rSize
;

113 
uöt8
 
MaxInTøns„rSize
[2];

114 
uöt16
 
SîvîMask
;

115 
uöt8
 
MaxOutTøns„rSize
[2];

116 
uöt8
 
Des¸ùt‹C≠abûôy
;

117 } 
	tNodeDes¸ùt‹F‹m©_t
;

120 
	#PRIM_TRUST_CENTER
 0x01

	)

121 
	#BKUP_TRUST_CENTER
 0x02

	)

122 
	#PRIM_BIND_TABLE
 0x04

	)

123 
	#BKUP_BIND_TABLE
 0x08

	)

124 
	#PRIM_DISC_TABLE
 0x10

	)

125 
	#BKUP_DISC_TABLE
 0x20

	)

126 
	#NETWORK_MANAGER
 0x40

	)

134 
	#NODECURPWR_RCVR_ALWAYS_ON
 0x00

	)

137 
	#NODECURPWR_RCVR_AUTO
 0x01

	)

139 
	#NODECURPWR_RCVR_STIM
 0x02

	)

143 
	#NODEAVAILPWR_MAINS
 0x01

144 
	#NODEAVAILPWR_RECHARGE
 0x02

145 
	#NODEAVAILPWR_DISPOSE
 0x04

146 

	)

148 
	#NODEPOWER_LEVEL_CRITICAL
 0x00

149 
	#NODEPOWER_LEVEL_33
 0x04

150 
	#NODEPOWER_LEVEL_66
 0x08

151 
	#NODEPOWER_LEVEL_100
 0x0C

152 

	)

156 
PowîMode
:4;

157 
AvaûabÀPowîSour˚s
:4;

158 
CuºítPowîSour˚
:4;

159 
CuºítPowîSour˚Levñ
:4;

160 } 
	tNodePowîDes¸ùt‹F‹m©_t
;

167 
	#APPDEVVER_1
 0x01

	)

170 
	#APPFLAG_NONE
 0x00

171 

	)

173 
	#AF_APPFLAG_NONE
 0x00

	)

174 
	#AF_APPFLAG_COMPLEXDESC
 0x01

175 
	#AF_APPFLAG_USERDESC
 0x02

176 

	)

177 
uöt16
 
	tcId_t
;

181 
byã
 
EndPoöt
;

182 
uöt16
 
AµProfId
;

183 
uöt16
 
AµDevi˚Id
;

184 
byã
 
AµDevVî
:4;

185 
byã
 
Re£rved
:4;

186 
byã
 
AµNumInClu°îs
;

187 
cId_t
 *
pAµInClu°îLi°
;

188 
byã
 
AµNumOutClu°îs
;

189 
cId_t
 *
pAµOutClu°îLi°
;

190 } 
	tSim∂eDes¸ùti⁄F‹m©_t
;

197 
	#FRAMETYPE_KVP
 0x01

198 
	#FRAMETYPE_MSG
 0x02

199 

	)

200 
	#ERRORCODE_SUCCESS
 0x00

	)

202 
	#AF_HDR_KVP_MAX_LEN
 0x08

203 
	#AF_HDR_V1_0_MAX_LEN
 0x03

204 
	#AF_HDR_V1_1_MAX_LEN
 0x00

205 

	)

209 
byã
 
TønsSeqNumbî
;

210 
uöt16
 
D©aLígth
;

211 
byã
 *
D©a
;

212 } 
	tafMSGComm™dF‹m©_t
;

216 
noL©ícyReqs
,

217 
Á°Bóc⁄s
,

218 
¶owBóc⁄s


219 } 
	tafNëw‹kL©ícyReq_t
;

227 
afAddrNŸPª£¡
 = 
AddrNŸPª£¡
,

228 
afAddr16Bô
 = 
Addr16Bô
,

229 
afAddr64Bô
 = 
Addr64Bô
,

230 
afAddrGroup
 = 
AddrGroup
,

231 
afAddrBrﬂdˇ°
 = 
AddrBrﬂdˇ°


232 } 
	tafAddrMode_t
;

238 
uöt16
 
sh‹tAddr
;

239 
ZL⁄gAddr_t
 
extAddr
;

240 } 
addr
;

241 
afAddrMode_t
 
addrMode
;

242 
byã
 
ídPoöt
;

243 
uöt16
 
∑nId
;

244 } 
	tafAddrTy≥_t
;

249 
oßl_evít_hdr_t
 
hdr
;

250 
uöt16
 
groupId
;

251 
uöt16
 
˛u°îId
;

252 
afAddrTy≥_t
 
§cAddr
;

254 
uöt16
 
macDe°Addr
;

255 
uöt8
 
ídPoöt
;

256 
uöt8
 
wasBrﬂdˇ°
;

257 
uöt8
 
LökQuÆôy
;

258 
uöt8
 
c‹ªœti⁄
;

259 
öt8
 
rssi
;

260 
uöt8
 
SecurôyU£
;

261 
uöt32
 
time°amp
;

262 
afMSGComm™dF‹m©_t
 
cmd
;

263 } 
	tafIncomögMSGPackë_t
;

267 
oßl_evít_hdr_t
 
hdr
;

268 
byã
 
ídpoöt
;

269 
byã
 
å™sID
;

270 } 
	tafD©aC⁄fúm_t
;

278 
byã
 
ídPoöt
;

279 
byã
 *
èsk_id
;

280 
Sim∂eDes¸ùti⁄F‹m©_t
 *
sim∂eDesc
;

281 
afNëw‹kL©ícyReq_t
 
œãncyReq
;

282 } 
	tídPoötDesc_t
;

288 *(*
	tpDescCB
)–
	tuöt8
 
	tty≥
, uöt8 
	tídpoöt
 );

291 
	#AF_DESCRIPTOR_SIMPLE
 1

	)

292 
	#AF_DESCRIPTOR_PROFILE_ID
 2

	)

297 
eEP_AŒowM©ch
 = 1,

298 
eEP_NŸU£d


299 } 
	teEP_Fœgs
;

303 
ídPoötDesc_t
 *
ïDesc
;

304 
eEP_Fœgs
 
Êags
;

305 
pDescCB
 
p‚DescCB
;

306 *
√xtDesc
;

307 } 
	tïLi°_t
;

317 
	#afSètus_SUCCESS
 
ZSuc˚ss


	)

318 
	#afSètus_FAILED
 
ZFaûuª


	)

319 
	#afSètus_MEM_FAIL
 
ZMemEº‹


	)

320 
	#afSètus_INVALID_PARAMETER
 
ZInvÆidP¨amëî


	)

322 
ZSètus_t
 
	tafSètus_t
;

326 
uöt8
 
kvp
;

327 
APSDE_D©aReqMTU_t
 
≠s
;

328 } 
	tafD©aReqMTU_t
;

335 
ïLi°_t
 *
ïLi°
;

344 
afInô
( );

351 
ïLi°_t
 *
afRegi°îExãnded
–
ídPoötDesc_t
 *
ïDesc
, 
pDescCB
 
descFn
 );

357 
afSètus_t
 
afRegi°î
–
ídPoötDesc_t
 *
ïDesc
 );

363 
afD©aC⁄fúm
–
uöt8
 
ídPoöt
, uöt8 
å™sID
, 
ZSètus_t
 
°©us
 );

369 
afIncomögD©a
–
≠s_FømeF‹m©_t
 *
aff
, 
zAddrTy≥_t
 *
SrcAddªss
, 
uöt16
 
SrcP™Id
,

370 
NLDE_Sig«l_t
 *
sig
, 
byã
 
SecurôyU£
, 
uöt32
 
time°amp
 );

372 
afSètus_t
 
AF_D©aReque°
–
afAddrTy≥_t
 *
d°Addr
, 
ídPoötDesc_t
 *
§cEP
,

373 
uöt16
 
cID
, uöt16 
Àn
, 
uöt8
 *
buf
, uöt8 *
å™sID
,

374 
uöt8
 
›ti⁄s
, uöt8 
ødius
 );

384 
ídPoötDesc_t
 *
afFödEndPoötDesc
–
byã
 
ídPoöt
 );

390 
byã
 
afFödSim∂eDesc
–
Sim∂eDes¸ùti⁄F‹m©_t
 **
µDesc
, byã 
EP
 );

395 
uöt8
 
afD©aReqMTU
–
afD©aReqMTU_t
* 
fõlds
 );

401 
uöt8
 
afGëM©ch
–uöt8 
ï
 );

407 
uöt8
 
afSëM©ch
–uöt8 
ï
, uöt8 
a˘i⁄
 );

412 
byã
 
afNumEndPoöts
( );

417 
afEndPoöts
–
byã
 *
ïBuf
, byã 
skùZDO
 );

423 
afC›yAddªss
 (
afAddrTy≥_t
 *
afAddr
, 
zAddrTy≥_t
 *
zAddr
);

428 #ifde‡
__˝lu•lus


	@Components/stack/nwk/APS.h

40 #i‚de‡
APS_H


41 
	#APS_H


	)

43 #ifde‡
__˝lu•lus


50 
	~"APSMEDE.h
"

51 
	~"BödögTabÀ.h
"

52 
	~"ªÊe˘åack.h
"

63 
uöt16
 
nwkSrcAddr
;

64 
uöt8
 
nwkSecuª
;

65 
≠s_FømeF‹m©_t
* 
aff
;

66 } 
	tAPS_CmdInd_t
;

70 
oßl_evít_hdr_t
 
hdr
;

71 
zAddrTy≥_t
 
SrcAddªss
;

72 
uöt16
 
SrcP™Id
;

73 
uöt16
 
macDe°Addr
;

74 
NLDE_Sig«l_t
 
sig
;

75 
byã
 
SecurôyU£
;

76 
uöt32
 
time°amp
;

77 
≠s_FømeF‹m©_t
 
aff
;

78 } 
	t≠sInMsg_t
;

80 (*
p‚BödögTimeoutCB
)( );

84 
uöt16
 
§cAddr
;

85 
uöt8
 
brﬂdˇ°Id
;

86 
uöt16
 
expúyTime
;

87 } 
	t≠sEndDevi˚Brﬂdˇ°_t
;

94 
	#APS_INCOMING_MSG
 0x01

	)

95 
	#APS_CMD_PKT
 0x02

	)

98 
	#APS_MSG_ID
 0x00

	)

99 
	#APS_MSG_ID_LEN
 0x01

	)

102 
	#APS_CMD_PKT_HDR
 ((
uöt8
Ë\

	)

103 ((
APSME_CmdPkt_t
) + \

104 
APS_MSG_ID_LEN
 ))

107 
	#APS_EDBIND_TIMEOUT_TIMER_ID
 0x0001

	)

108 
	#APS_DATA_REQUEST_HOLD
 0x0002

	)

109 
	#APS_SKA_SLOT_TIMER
 0x0004

	)

110 
	#APS_ENDDEVICE_BROADCAST_EVT
 0x0008

	)

113 
	#APS_SKA_SLOT_TIMEOUT
 100

	)

116 
	#APS_REFLECTOR_PUBLIC
 0

	)

117 
	#APS_REFLECTOR_PRIVATE
 1

	)

122 
uöt8
 
APS_Cou¡î
;

123 
byã
 
APS_TaskID
;

124 
uöt16
 
AIB_MaxBödögTime
;

125 
uöt8
 
AIB_≠sU£ExãndedPANID
[
Z_EXTADDR_LEN
];

126 
uöt8
 
AIB_≠sU£In£cuªJoö
;

127 
uöt8
 
APS_AŒowD©aReque°s
;

129 #i‡–
ZG_BUILD_ENDDEVICE_TYPE
 ) && ( 
RFD_RCVC_ALWAYS_ON
==
TRUE
 )

130 
≠sEndDevi˚Brﬂdˇ°_t
 
≠sEndDevi˚Brﬂdˇ°TabÀ
[];

140 
APS_Inô
–
byã
 
èsk_id
 );

145 
UINT16
 
APS_evít_lo›
–
byã
 
èsk_id
, UINT16 
evíts
 );

150 
APS_SëEndDevi˚BödTimeout
–
uöt16
 
timeout
, 
p‚BödögTimeoutCB
 
p‚CB
 );

155 
APS_CmdInd
–
APS_CmdInd_t
* 
öd
 );

162 
APS_ReÊe˘‹Inô
–
uöt8
 
ty≥
 );

164 #i‡–
ZG_BUILD_ENDDEVICE_TYPE
 ) && ( 
RFD_RCVC_ALWAYS_ON
==
TRUE
 )

168 
APS_InôEndDevi˚Brﬂdˇ°TabÀ
( );

173 
uöt8
 
APS_EndDevi˚Brﬂdˇ°Check
–
NLDE_FømeF‹m©_t
 *
ff
 );

181 
ZSètus_t
 (*
pAPS_UnBöd
)–
byã
 
SrcEndpI¡
,

182 
uöt16
 
Clu°îId
, 
zAddrTy≥_t
 *
D°Addr
, 
byã
 
D°EndpI¡
 );

187 
ZSètus_t
 (*
pAPS_GëBöd
)–
uöt16
 
Nth
, 
≠sBödögIãm_t
 *
pIãm
 );

189 (*
pAPS_D©aC⁄fúmReÊe˘
)–
nwkDB_t
 *
ªc
, 
uöt8
 
°©us
 );

191 (*
pAPS_D©aIndReÊe˘
)–
zAddrTy≥_t
 *
SrcAddªss
, 
≠s_FømeF‹m©_t
 *
aff
,

192 
NLDE_Sig«l_t
 *
sig
, 
byã
 
AckReque°
, byã 
SecurôyU£
, 
uöt32
 
time°amp
 );

196 #ifde‡
__˝lu•lus


	@Components/stack/nwk/APSMEDE.h

41 #i‚de‡
APSMEDE_H


42 
	#APSMEDE_H


	)

44 #ifde‡
__˝lu•lus


51 
	~"ZComDef.h
"

52 
	~"nwk_globÆs.h
"

53 
	~"AssocLi°.h
"

54 
	~"nwk_bufs.h
"

55 
	~"BödögTabÀ.h
"

56 
	~"s•.h
"

66 
	#APS_FRAME_TYPE_MASK
 0x03

	)

67 
	#APS_DATA_FRAME
 0x00

	)

68 
	#APS_CMD_FRAME
 0x01

	)

69 
	#APS_ACK_FRAME
 0x02

	)

70 
	#STUB_APS_FRAME
 0x03

	)

72 
	#APS_DELIVERYMODE_MASK
 0x0C

	)

73 
	#APS_FC_DM_UNICAST
 0x00

	)

74 
	#APS_FC_DM_INDIRECT
 0x04

	)

75 
	#APS_FC_DM_BROADCAST
 0x08

	)

76 
	#APS_FC_DM_GROUP
 0x0C

	)

78 
	#APS_FC_ACK_FORMAT
 0x10

	)

79 
	#APS_FC_SECURITY
 0x20

	)

80 
	#APS_FC_ACK_REQ
 0x40

	)

81 
	#APS_FC_EXTENDED
 0x80

	)

83 
	#APS_XFC_FRAG_MASK
 0x03

	)

84 
	#APS_XFC_FIRST_FRAG
 0x01

	)

85 
	#APS_XFC_FRAGMENT
 0x02

	)

87 
	#APS_FRAME_CTRL_FIELD_LEN
 0x01

	)

88 
	#APS_DSTEP_ID_FIELD_LEN
 0x01

	)

89 
	#APS_GROUP_ID_FIELD_LEN
 0x02

	)

90 
	#APS_SRCEP_ID_FIELD_LEN
 0x01

	)

91 
	#APS_CLUSTERID_FIELD_LEN_V1_0
 0x01

	)

92 
	#APS_CLUSTERID_FIELD_LEN
 0x02

	)

93 
	#APS_PROFILEID_FIELD_LEN
 0x02

	)

94 
	#APS_FRAME_CNT_FIELD_LEN
 0x01

	)

95 
	#APS_XFRAME_CTRL_FIELD_LEN
 0x01

	)

96 
	#APS_BLOCK_CNT_FIELD_LEN
 0x01

	)

97 
	#APS_ACK_BITS_FIELD_LEN
 0x01

	)

100 
	#APS_TX_OPTIONS_SECURITY_ENABLE
 0x01

	)

102 
	#APS_TX_OPTIONS_ACK
 0x04

	)

103 
	#APS_TX_OPTIONS_PERMIT_FRAGMENT
 0x08

	)

104 
	#APS_TX_OPTIONS_SKIP_ROUTING
 0x10

	)

105 
	#APS_TX_OPTIONS_FIRST_FRAGMENT
 0x20

	)

108 
	#APS_HDR_FC
 0

	)

111 
	#APSME_CMD_ID
 0

	)

114 
	#APSME_CMD_SKKE_1
 0x01

	)

115 
	#APSME_CMD_SKKE_2
 0x02

	)

116 
	#APSME_CMD_SKKE_3
 0x03

	)

117 
	#APSME_CMD_SKKE_4
 0x04

	)

118 
	#APSME_CMD_TRANSPORT_KEY
 0x05

	)

119 
	#APSME_CMD_UPDATE_DEVICE
 0x06

	)

120 
	#APSME_CMD_REMOVE_DEVICE
 0x07

	)

121 
	#APSME_CMD_REQUEST_KEY
 0x08

	)

122 
	#APSME_CMD_SWITCH_KEY
 0x09

	)

123 
	#APSME_CMD_EA_INIT_CHLNG
 0x0A

	)

124 
	#APSME_CMD_EA_RSP_CHLNG
 0x0B

	)

125 
	#APSME_CMD_EA_INIT_MAC_DATA
 0x0C

	)

126 
	#APSME_CMD_EA_RSP_MAC_DATA
 0x0D

	)

127 
	#APSME_CMD_TUNNEL
 0x0E

	)

130 
	#APSME_SKKE_METHOD
 0

	)

131 
	#APSME_SKKE_INIT_ADDR
 1

	)

132 
	#APSME_SKKE_RESP_ADDR
 9

	)

133 
	#APSME_SKKE_PAYLOAD
 17

	)

134 
	#APSME_SKKE_LEN
 33

	)

137 
	#APSME_TK_KEY_TYPE
 1

	)

138 
	#APSME_TK_KEY
 2

	)

139 
	#APSME_TK_COMMON_LEN
 (
uöt8
Ë\

	)

140 (
APSME_TK_KEY
 + \

141 
SEC_KEY_LEN
 )

142 
	#APSME_TK_KEY_SEQ_LEN
 1

	)

143 
	#APSME_TK_INITIATOR_LEN
 1

	)

145 
	#APSME_TK_TC_DST_ADDR
 18

	)

146 
	#APSME_TK_TC_SRC_ADDR
 26

	)

147 
	#APSME_TK_TC_KEY_LEN
 34

	)

149 
	#APSME_TK_NWK_KEY_SEQ
 18

	)

150 
	#APSME_TK_NWK_DST_ADDR
 19

	)

151 
	#APSME_TK_NWK_SRC_ADDR
 27

	)

152 
	#APSME_TK_NWK_KEY_LEN
 35

	)

154 
	#APSME_TK_APP_PARTNER_ADDR
 18

	)

155 
	#APSME_TK_APP_INITIATOR
 26

	)

156 
	#APSME_TK_APP_KEY_LEN
 27

	)

159 
	#APSME_UD_STANDARD_SECURED_REJOIN
 0

	)

160 
	#APSME_UD_STANDARD_UNSECURED_JOIN
 1

	)

161 
	#APSME_UD_STANDARD_UNSECURED_REJOIN
 3

	)

162 
	#APSME_UD_HIGH_SECURED_REJOIN
 4

	)

163 
	#APSME_UD_HIGH_UNSECURED_JOIN
 5

	)

164 
	#APSME_UD_HIGH_UNSECURED_REJOIN
 7

	)

166 
	#APSME_UD_EADDR
 1

	)

167 
	#APSME_UD_SADDR_LSB
 9

	)

168 
	#APSME_UD_SADDR_MSB
 10

	)

169 
	#APSME_UD_STATUS
 11

	)

170 
	#APSME_UD_LEN
 12

	)

173 
	#APSME_RD_LEN
 9

	)

174 
	#APSME_RD_EADDR
 1

	)

177 
	#APSME_RK_KEY_TYPE
 1

	)

178 
	#APSME_RK_EADDR
 2

	)

179 
	#APSME_RK_SYS_LEN
 2

	)

180 
	#APSME_RK_APP_LEN
 10

	)

183 
	#APSME_SK_SEQ_NUM
 1

	)

184 
	#APSME_SK_LEN
 2

	)

188 
	#APSME_EA_CHLNG_KEY_TYPE
 1

	)

189 
	#APSME_EA_CHLNG_SEQ_NUM
 2

	)

190 
	#APSME_EA_CHLNG_INIT_ADDR
 3

	)

191 
	#APSME_EA_CHLNG_RESP_ADDR
 11

	)

192 
	#APSME_EA_CHLNG_PAYLOAD
 19

	)

193 
	#APSME_EA_CHLNG_LEN
 35

	)

196 
	#APSME_EA_DATA_TAG
 1

	)

197 
	#APSME_EA_DATA_TYPE
 17

	)

198 
	#APSME_EA_DATA_TEXT
 18

	)

199 
	#APSME_EA_DATA_LEN
 22

	)

202 
	#APSME_EA_INITIATE
 0x00

	)

203 
	#APSME_EA_ACCEPT
 0x01

	)

204 
	#APSME_EA_REJECT
 0x02

	)

207 
	#APSME_TUNNEL_DEA
 1

210 
	#APSME_TUNNEL_TCMD
 9

211 
	#APSME_TUNNEL_LEN
 9

	)

214 
	#APSME_TRUSTCENTER_NWKADDR
 
NWK_PAN_COORD_ADDR


	)

223 
≠sAddªssM≠
 = 0xA0,

226 
≠sMaxBödögTime
,

227 
≠sBödögTabÀ
,

228 
≠sNumBödögTabÀE¡rõs
,

229 
≠sU£ExãndedPANID
,

230 
≠sU£In£cuªJoö
,

231 
≠sMAX_AIB_ITEMS


232 } 
	tZApsAâribuãs_t
;

237 
NWK_ADDR_LIST
,

238 
EXT_ADDRESS
,

239 
SIMPLE_DESC
,

240 
NODE_DESC
,

241 
POWER_DESC
,

242 
SVC_MATCH


243 } 
	tAPSME_quîy_t
;

245 
	#APS_ILLEGAL_DEVICES
 0x02

	)

250 
uöt8
 
§cAddr
[
Z_EXTADDR_LEN
];

251 
byã
 
§cEP
;

252 
uöt16
 
˛u°îID
;

253 
zAddrTy≥_t
 
d°Addr
;

254 
byã
 
d°EP
;

255 } 
	t≠sBödögIãm_t
;

259 
byã
 
FrmCål
;

260 
byã
 
XädFrmCål
;

261 
byã
 
D°EndPoöt
;

262 
byã
 
SrcEndPoöt
;

263 
uöt16
 
GroupID
;

264 
uöt16
 
Clu°îID
;

265 
uöt16
 
ProfûeID
;

266 
uöt16
 
macDe°Addr
;

267 
byã
 
wasBrﬂdˇ°
;

268 
byã
 
≠sHdrLí
;

269 
byã
 *
asdu
;

270 
byã
 
asduLígth
;

271 
byã
 
ApsCou¡î
;

272 
uöt8
 
å™sID
;

273 
uöt8
 
BlkCou¡
;

274 
uöt8
 
AckBôs
;

275 } 
	t≠s_FømeF‹m©_t
;

279 
uöt16
 
äa
;

280 
uöt8
* 
dó
;

281 } 
	tAPSDE_FømeTu¬ñ_t
;

286 
zAddrTy≥_t
 
d°Addr
;

287 
uöt8
 
§cEP
;

288 
uöt8
 
d°EP
;

289 
uöt16
 
d°P™Id
;

290 
uöt16
 
˛u°îID
;

291 
uöt16
 
¥ofûeID
;

292 
uöt16
 
asduLí
;

293 
uöt8
* 
asdu
;

294 
uöt16
 
txO±i⁄s
;

295 
uöt8
 
å™sID
;

296 
uöt8
 
discovîRouã
;

297 
uöt8
 
ødiusCou¡î
;

298 
uöt8
 
≠sCou¡
;

299 
uöt8
 
blkCou¡
;

300 } 
	tAPSDE_D©aReq_t
;

304 
uöt16
 
d°Addr
;

305 
uöt8
 
d°EP
;

306 
uöt8
 
§cEP
;

307 
uöt8
 
å™sID
;

308 
uöt8
 
°©us
;

309 } 
	tAPSDE_D©aCnf_t
;

313 
uöt8
 
£cuª
;

314 } 
	tAPSDE_D©aReqMTU_t
;

319 
uöt16
 
d°Addr
;

320 
uöt8
* 
ª•ExtAddr
;

321 
uöt8
 
mëhod
;

322 
uöt8
 
≠sSecuª
;

323 
uöt8
 
nwkSecuª
;

325 } 
	tAPSME_E°ablishKeyReq_t
;

329 
uöt8
* 
∑πExtAddr
;

330 
uöt8
 
°©us
;

331 } 
	tAPSME_E°ablishKeyCfm_t
;

335 
uöt16
 
§cAddr
;

336 
uöt8
* 
öôExtAddr
;

337 
uöt8
 
mëhod
;

338 
uöt8
 
≠sSecuª
;

339 
uöt8
 
nwkSecuª
;

341 } 
	tAPSME_E°ablishKeyInd_t
;

345 
uöt16
 
d°Addr
;

346 
uöt8
* 
öôExtAddr
;

347 
uöt8
 
ac˚±
;

348 
uöt8
 
≠sSecuª
;

349 
uöt8
 
nwkSecuª
;

351 } 
	tAPSME_E°ablishKeyR•_t
;

355 
uöt16
 
d°Addr
;

356 
uöt8
 
keyTy≥
;

357 
uöt8
 
keySeqNum
;

358 
uöt8
* 
key
;

359 
uöt8
* 
extAddr
;

360 
uöt8
 
öôüt‹
;

361 
uöt8
 
≠sSecuª
;

362 
uöt8
 
nwkSecuª
;

363 
APSDE_FømeTu¬ñ_t
* 
tu¬ñ
;

364 } 
	tAPSME_Tøn•‹tKeyReq_t
;

368 
uöt16
 
§cAddr
;

369 
uöt8
 
keyTy≥
;

370 
uöt8
 
keySeqNum
;

371 
uöt8
* 
key
;

372 
uöt8
* 
d°ExtAddr
;

373 
uöt8
* 
§cExtAddr
;

374 
uöt8
 
öôüt‹
;

375 
uöt8
 
£cuª
;

376 } 
	tAPSME_Tøn•‹tKeyInd_t
;

380 
uöt16
 
d°Addr
;

381 
uöt16
 
devAddr
;

382 
uöt8
* 
devExtAddr
;

383 
uöt8
 
°©us
;

384 
uöt8
 
≠sSecuª
;

385 } 
	tAPSME_Upd©eDevi˚Req_t
;

389 
uöt16
 
§cAddr
;

390 
uöt8
* 
devExtAddr
;

391 
uöt16
 
devAddr
;

392 
uöt8
 
°©us
;

393 } 
	tAPSME_Upd©eDevi˚Ind_t
;

397 
uöt16
 
∑ª¡Addr
;

398 
uöt8
* 
chûdExtAddr
;

399 } 
	tAPSME_RemoveDevi˚Req_t
;

403 
uöt16
 
§cAddr
;

404 
uöt8
* 
chûdExtAddr
;

405 } 
	tAPSME_RemoveDevi˚Ind_t
;

409 
uöt8
 
d°Addr
;

410 
uöt8
 
keyTy≥
;

411 
uöt8
* 
∑πExtAddr
;

412 } 
	tAPSME_Reque°KeyReq_t
;

416 
uöt16
 
§cAddr
;

417 
uöt8
 
keyTy≥
;

418 
uöt8
* 
∑πExtAddr
;

419 } 
	tAPSME_Reque°KeyInd_t
;

423 
uöt16
 
d°Addr
;

424 
uöt8
 
keySeqNum
;

425 } 
	tAPSME_SwôchKeyReq_t
;

429 
uöt16
 
§cAddr
;

430 
uöt8
 
keySeqNum
;

431 } 
	tAPSME_SwôchKeyInd_t
;

435 
uöt16
 
nwkAddr
;

436 
uöt8
* 
extAddr
;

437 
uöt8
* 
chÆÀnge
;

438 
uöt8
 
a˘i⁄
;

439 } 
	tAPSME_AuthítiˇãReq_t
;

443 
uöt16
 
öôNwkAddr
;

444 
uöt8
 
öôExtAddr
[
Z_EXTADDR_LEN
];

445 
uöt8
 
chÆÀnge
[
SEC_KEY_LEN
];

446 } 
	tAPSME_AuthítiˇãInd_t
;

450 
uöt8
 
öôüt‹
;

451 
uöt8
 
∑πExtAddr
[
Z_EXTADDR_LEN
];

452 
uöt8
 
°©us
;

453 } 
	tAPSME_AuthítiˇãCfm_t
;

458 
oßl_evít_hdr_t
 
hdr
;

459 
uöt8
* 
asdu
;

460 
uöt8
 
asduLí
;

461 
uöt8
 
£cuª
;

462 
uöt16
 
nwkAddr
;

463 
uöt8
 
nwkSecuª
;

464 } 
	tAPSME_CmdPkt_t
;

475 
uöt8
* 
key
;

476 
uöt32
 
txFrmC¡r
;

477 
uöt32
 
rxFrmC¡r
;

478 } 
	tAPSME_LökKeyD©a_t
;

482 
uöt8
 
‰mCål
;

483 
uöt8
 
xädFrmCål
;

484 
uöt8
 
§cEP
;

485 
uöt8
 
d°EP
;

486 
uöt16
 
groupID
;

487 
uöt16
 
˛u°îID
;

488 
uöt16
 
¥ofûeID
;

489 
uöt8
 
asduLí
;

490 
uöt8
* 
asdu
;

491 
uöt8
 
hdrLí
;

492 
uöt8
 
≠sCou¡î
;

493 
uöt8
 
å™sID
;

494 
uöt8
 
blkCou¡
;

495 
uöt8
 
ackBôs
;

496 } 
	tAPSDE_FømeD©a_t
;

500 
uöt8
 
‰mCål
;

501 
uöt8
 
xädFrmCål
;

502 
uöt8
 
§cEP
;

503 
uöt8
 
d°EP
;

504 
uöt16
 
˛u°îID
;

505 
uöt16
 
¥ofûeID
;

506 
uöt8
 
asduLí
;

507 
uöt16
 
d°Addr
;

508 
uöt8
 
å™sID
;

509 } 
	tAPSDE_St‹edFømeD©a_t
;

514 
NLDE_FømeD©a_t
 
nfd
;

515 
APSDE_FømeD©a_t
 
afd
;

516 } 
	tAPSDE_FømeF‹m©_t
;

520 
uöt16
 
d°Addr
;

521 
uöt8
 
‰mCål
;

522 
uöt8
 
xädFrmCål
;

523 
uöt8
 
asduLí
;

524 
uöt8
 
nwkSecuª
;

525 
APSDE_FømeTu¬ñ_t
* 
tu¬ñ
;

526 } 
	tAPSDE_FømeAŒoc_t
;

531 
APSDE_FømeAŒoc_t
 
Á
;

534 
APSDE_FømeF‹m©_t
* 
aff
;

535 
SSP_Info_t
* 
si
;

536 
uöt8
 
°©us
;

537 } 
	tAPSDE_FømeBlk_t
;

542 
uöt16
 
TCsh‹tAddr
;

552 
ZSètus_t
 
APSDE_D©aReq
–
APSDE_D©aReq_t
* 
ªq
 );

557 
uöt8
 
APSDE_D©aReqMTU
–
APSDE_D©aReqMTU_t
* 
fõlds
 );

563 
APSDE_D©aC⁄fúm
–
nwkDB_t
 *
ªc
, 
ZSètus_t
 
Sètus
 );

564 
APSDE_D©aCnf
–
APSDE_D©aCnf_t
* 
˙f
 );

570 
APSDE_D©aIndiˇti⁄
–
≠s_FømeF‹m©_t
 *
aff
, 
zAddrTy≥_t
 *
SrcAddªss
, 
uöt16
 
SrcP™Id
,

571 
NLDE_Sig«l_t
 *
sig
, 
byã
 
SecurôyU£
, 
uöt32
 
time°amp
 );

586 
ZSètus_t
 
APSME_BödReque°
–
byã
 
SrcEndpI¡
, 
uöt16
 
Clu°îId
,

587 
zAddrTy≥_t
 *
D°Addr
, 
byã
 
D°EndpI¡
);

596 
ZSètus_t
 
APSME_UnBödReque°
–
byã
 
SrcEndpI¡
,

597 
uöt16
 
Clu°îId
, 
zAddrTy≥_t
 *
D°Addr
, 
byã
 
D°EndpI¡
);

603 
ZSètus_t
 
APSME_GëReque°
–
ZApsAâribuãs_t
 
AIBAâribuã
,

604 
uöt16
 
Index
, 
byã
 *
AâribuãVÆue
 );

610 
ZSètus_t
 
APSME_SëReque°
–
ZApsAâribuãs_t
 
AIBAâribuã
,

611 
uöt16
 
Index
, 
byã
 *
AâribuãVÆue
 );

616 
uöt8
 
APSME_LookupExtAddr
–
uöt16
 
nwkAddr
, uöt8* 
extAddr
 );

621 
uöt8
 
APSME_LookupNwkAddr
–uöt8* 
extAddr
, 
uöt16
* 
nwkAddr
 );

628 
APSME_UnbödC⁄fúm
–
zAddrTy≥_t
 
Co‹Addr
,
ZSètus_t
 
Sètus
,

629 
uöt16
 
SrcAddr
, 
byã
 
SrcEndpI¡
, byã 
Obje˘Id
,

630 
uöt16
 
D°Addr
, 
byã
 
D°EndpI¡
);

635 
APSME_BödC⁄fúm
–
zAddrTy≥_t
 
Co‹Addr
,
ZSètus_t
 
Sètus
,

636 
uöt16
 
SrcAddr
, 
byã
 
SrcEndpI¡
, byã 
Obje˘Id
,

637 
uöt16
 
D°Addr
, 
byã
 
D°EndpI¡
);

647 
APSME_CmdPkt
–
APSME_CmdPkt_t
* 
pkt
 );

656 
APSDE_FømeAŒoc
–
APSDE_FømeBlk_t
* 
blk
 );

661 
APSDE_FømeSíd
–
APSDE_FømeBlk_t
* 
blk
 );

666 
APSME_HﬁdD©aReque°s
–
uöt16
 
hﬁdTime
 );

675 
ZSètus_t
 
APSME_FømeSecurôyRemove
(
uöt16
 
§cAddr
,

676 
≠s_FømeF‹m©_t
* 
aff
);

681 
ZSètus_t
 
APSME_FømeSecurôyAµly
(
uöt16
 
d°Addr
,

682 
≠s_FømeF‹m©_t
* 
aff
);

687 
APSME_SecurôyNM
( );

688 
APSME_SecurôyRM_ED
( );

689 
APSME_SecurôyRM_RD
( );

690 
APSME_SecurôyRM_CD
( );

691 
APSME_SecurôyCM_ED
( );

692 
APSME_SecurôyCM_RD
( );

693 
APSME_SecurôyCM_CD
( );

698 
APSME_SKA_SlŸInô
–
uöt8
 
tŸÆ
 );

703 
APSME_SKA_SlŸTimîH™dÀr
( );

721 
ZSètus_t
 
APSME_E°ablishKeyReq
–
APSME_E°ablishKeyReq_t
* 
ªq
 );

726 
ZSètus_t
 
APSME_E°ablishKeyR•
–
APSME_E°ablishKeyR•_t
* 
r•
 );

731 
ZSètus_t
 
APSME_Tøn•‹tKeyReq
–
APSME_Tøn•‹tKeyReq_t
* 
ªq
 );

736 
ZSètus_t
 
APSME_Upd©eDevi˚Req
–
APSME_Upd©eDevi˚Req_t
* 
ªq
 );

741 
ZSètus_t
 
APSME_RemoveDevi˚Req
–
APSME_RemoveDevi˚Req_t
* 
ªq
 );

746 
ZSètus_t
 
APSME_Reque°KeyReq
–
APSME_Reque°KeyReq_t
* 
ªq
 );

751 
ZSètus_t
 
APSME_SwôchKeyReq
–
APSME_SwôchKeyReq_t
* 
ªq
 );

756 
ZSètus_t
 
APSME_AuthítiˇãReq
–
APSME_AuthítiˇãReq_t
* 
ªq
 );

775 
APSME_E°ablishKeyCfm
–
APSME_E°ablishKeyCfm_t
* 
cfm
 );

780 
APSME_E°ablishKeyInd
–
APSME_E°ablishKeyInd_t
* 
öd
 );

785 
APSME_Tøn•‹tKeyInd
–
APSME_Tøn•‹tKeyInd_t
* 
öd
 );

790 
APSME_Upd©eDevi˚Ind
–
APSME_Upd©eDevi˚Ind_t
* 
öd
 );

795 
APSME_RemoveDevi˚Ind
–
APSME_RemoveDevi˚Ind_t
* 
öd
 );

800 
APSME_Reque°KeyInd
–
APSME_Reque°KeyInd_t
* 
öd
 );

805 
APSME_SwôchKeyInd
–
APSME_SwôchKeyInd_t
* 
öd
 );

810 
APSME_AuthítiˇãInd
–
APSME_AuthítiˇãInd_t
* 
öd
 );

815 
APSME_AuthítiˇãCfm
–
APSME_AuthítiˇãCfm_t
* 
cfm
 );

829 
ZSètus_t
 
APSME_Ma°îKeyGë
–
uöt8
* 
extAddr
, uöt8** 
key
 );

834 
ZSètus_t
 
APSME_LökKeySë
–
uöt8
* 
extAddr
, uöt8* 
key
 );

839 
ZSètus_t
 
APSME_LökKeyD©aGë
–
uöt8
* 
extAddr
,

840 
APSME_LökKeyD©a_t
** 
d©a
 );

845 
uöt8
 
APSME_KeyFwdToChûd
–
APSME_Tøn•‹tKeyInd_t
* 
öd
 );

855 
APSME_TCLökKeySëup
–
uöt16
 
sh‹tAddr
, 
APSME_LökKeyD©a_t
 *
lökKey
 );

860 #ifde‡
__˝lu•lus


	@Components/stack/nwk/AddrMgr.h

40 #i‚de‡
ADDRMGR_H


41 
	#ADDRMGR_H


	)

43 #ifde‡
__˝lu•lus


51 
	~"ZComDef.h
"

57 
	#ADDRMGR_REG_ASSOC
 0x00

	)

58 
	#ADDRMGR_REG_SECURITY
 0x01

	)

59 
	#ADDRMGR_REG_BINDING
 0x02

	)

60 
	#ADDRMGR_REG_PRIVATE1
 0x03

	)

63 
	#ADDRMGR_USER_DEFAULT
 0x00

	)

64 
	#ADDRMGR_USER_ASSOC
 0x01

	)

65 
	#ADDRMGR_USER_SECURITY
 0x02

	)

66 
	#ADDRMGR_USER_BINDING
 0x04

	)

67 
	#ADDRMGR_USER_PRIVATE1
 0x08

	)

70 
	#ADDRMGR_ENTRY_NWKADDR_SET
 1

	)

71 
	#ADDRMGR_ENTRY_NWKADDR_DUP
 2

	)

72 
	#ADDRMGR_ENTRY_EXTADDR_SET
 3

	)

75 
	#ADDRMGR_CALLBACK_ENABLED
 0

	)

83 
uöt8
 
u£r
;

84 
uöt16
 
nwkAddr
;

85 
uöt8
 
extAddr
[
Z_EXTADDR_LEN
];

86 
uöt16
 
ödex
;

87 } 
	tAddrMgrE¡ry_t
;

90 (*
AddrMgrU£rCB_t
)–
	tuöt8
 
	tupd©e
,

91 
	tAddrMgrE¡ry_t
* 
	t√wE¡ry
,

92 
	tAddrMgrE¡ry_t
* 
	tﬁdE¡ry
 );

106 
AddrMgrInô
–
uöt16
 
íåyTŸÆ
 );

117 
uöt8
 
AddrMgrInôNV
( );

128 
AddrMgrSëDeÁu…NV
( );

139 
AddrMgrRe°‹eFromNV
( );

150 
AddrMgrWrôeNV
( );

162 
AddrMgrWrôeNVReque°
( );

164 #i‡–
ADDRMGR_CALLBACK_ENABLED
 == 1 )

175 
uöt8
 
AddrMgrRegi°î
–uöt8 
ªg
, 
AddrMgrU£rCB_t
 
cb
 );

189 
AddrMgrExtAddrSë
–
uöt8
* 
d°ExtAddr
, uöt8* 
§cExtAddr
 );

200 
uöt8
 
AddrMgrExtAddrVÆid
–uöt8* 
extAddr
 );

212 
uöt8
 
AddrMgrExtAddrEquÆ
–uöt8* 
extAddr1
, uöt8* 
extAddr2
 );

224 
uöt8
 
AddrMgrExtAddrLookup
–
uöt16
 
nwkAddr
, uöt8* 
extAddr
 );

236 
uöt8
 
AddrMgrNwkAddrLookup
–uöt8* 
extAddr
, 
uöt16
* 
nwkAddr
 );

251 
uöt8
 
AddrMgrE¡ryRñó£
–
AddrMgrE¡ry_t
* 
íåy
 );

266 
uöt8
 
AddrMgrE¡ryAddRef
–
AddrMgrE¡ry_t
* 
íåy
 );

281 
uöt8
 
AddrMgrE¡ryLookupNwk
–
AddrMgrE¡ry_t
* 
íåy
 );

296 
uöt8
 
AddrMgrE¡ryLookupExt
–
AddrMgrE¡ry_t
* 
íåy
 );

311 
uöt8
 
AddrMgrE¡ryGë
–
AddrMgrE¡ry_t
* 
íåy
 );

326 
uöt8
 
AddrMgrE¡ryUpd©e
–
AddrMgrE¡ry_t
* 
íåy
 );

331 #ifde‡
__˝lu•lus


	@Components/stack/nwk/AssocList.h

40 #i‚de‡
ASSOCLIST_H


41 
	#ASSOCLIST_H


	)

43 #ifde‡
__˝lu•lus


51 
	~"ZComDef.h
"

61 
	#NVINDEX_NOT_FOUND
 0xFFFF

	)

62 
	#NVINDEX_THIS_DEVICE
 0xFFFE

	)

64 
	#ASSOC_INDEX_NOT_FOUND
 0xFFFF

	)

67 
	#DEV_LINK_STATUS
 0x01

68 
	#DEV_LINK_REPAIR
 0x02

69 
	#DEV_SEC_INIT_STATUS
 0x04

70 
	#DEV_SEC_AUTH_STATUS
 0x08

71 

	)

72 
	#DEV_SECURED_JOIN
 0x20

73 
	#DEV_REJOIN_STATUS
 0x40

74 
	#DEV_HIGH_SEC_STATUS
 0x80

75 

	)

77 
	#PARENT
 0

	)

78 
	#CHILD_RFD
 1

	)

79 
	#CHILD_RFD_RX_IDLE
 2

	)

80 
	#CHILD_FFD
 3

	)

81 
	#CHILD_FFD_RX_IDLE
 4

	)

82 
	#NEIGHBOR
 5

	)

83 
	#OTHER
 6

	)

84 
	#NOTUSED
 0xFF

	)

92 
UINT16
 
sh‹tAddr
;

93 
uöt16
 
addrIdx
;

94 
byã
 
nodeRñ©i⁄
;

95 
byã
 
devSètus
;

96 
byã
 
assocC¡
;

97 
byã
 
age
;

98 
lökInfo_t
 
lökInfo
;

99 } 
	tassocüãd_devi˚s_t
;

103 
uöt16
 
numRecs
;

104 } 
	tnvDevi˚Li°Hdr_t
;

110 
assocüãd_devi˚s_t
 
AssocüãdDevLi°
[];

119 
AssocInô
( );

124 
assocüãd_devi˚s_t
 *
AssocAddNew
–
uöt16
 
sh‹tAddr
, 
byã
 *
extAddr
,

125 
byã
 
nodeRñ©i⁄
 );

130 
uöt16
 
AssocCou¡
–
byã
 
°¨tRñ©i⁄
, byã 
ídRñ©i⁄
 );

135 
byã
 
AssocIsChûd
–
uöt16
 
sh‹tAddr
 );

140 
byã
 
AssocIsRFChûd
–
uöt16
 
sh‹tAddr
 );

145 
byã
 
AssocIsP¨ít
–
uöt16
 
sh‹tAddr
 );

150 
assocüãd_devi˚s_t
 *
AssocGëWôhSh‹t
–
uöt16
 
sh‹tAddr
 );

155 
assocüãd_devi˚s_t
 *
AssocGëWôhExt
–
byã
 *
extAddr
 );

160 
byã
 
AssocRemove
–byã *
extAddr
 );

165 
uöt16
 
AssocGëNextI«˘iveNode
–uöt16 
sh‹tAddr
 );

170 
uöt16
 
AssocGëNextChûdNode
–uöt16 
sh‹tAddr
 );

175 
AssocRe£t
( );

182 
uöt16
 *
AssocMakeLi°
–
byã
 *
pCou¡
 );

187 
assocüãd_devi˚s_t
 *
AssocM©chDevi˚Sètus
–
uöt8
 
°©us
 );

192 
byã
 
AssocInôNV
( );

197 
AssocSëDeÁu…NV
( );

202 
byã
 
AssocRe°‹eFromNV
( );

207 
AssocWrôeNV
( );

212 
assocüãd_devi˚s_t
 *
AssocFödDevi˚
–
byã
 
numbî
 );

214 
uöt8
 
AssocCh™geNwkAddr
–
uöt16
 
nwkAddr
, uöt8 *
õìAddr
 );

216 
AssocCheckDupNeighb‹s
( );

221 #ifde‡
__˝lu•lus


	@Components/stack/nwk/BindingTable.h

40 #i‚de‡
BINDINGTABLE_H


41 
	#BINDINGTABLE_H


	)

43 #ifde‡
__˝lu•lus


51 
	~"ZComdef.h
"

52 
	~"oßl.h
"

53 
	~"nwk.h
"

54 
	~"AssocLi°.h
"

63 
	#MAX_DEVICE_PAIRS
 255

64 

	)

65 
	#DSTGROUPMODE_ADDR
 0

	)

66 
	#DSTGROUPMODE_GROUP
 1

	)

74 
uöt16
 
numRecs
;

75 } 
	tnvBödögHdr_t
;

82 
uöt8
 
§cEP
;

83 
uöt8
 
d°GroupMode
;

84 
uöt16
 
d°Idx
;

87 
uöt8
 
d°EP
;

88 
uöt8
 
numClu°îIds
;

89 
uöt16
 
˛u°îIdLi°
[
MAX_BINDING_CLUSTER_IDS
];

93 } 
	tBödögE¡ry_t
;

102 
BödögE¡ry_t
 
BödögTabÀ
[];

111 
InôBödögTabÀ
( );

116 
byã
 
bödRemoveE¡ry
–
BödögE¡ry_t
 *
pBöd
 );

121 
byã
 
bödIsClu°îIDöLi°
–
BödögE¡ry_t
 *
íåy
, 
uöt16
 
˛u°îId
 );

126 
byã
 
bödRemoveClu°îIdFromLi°
–
BödögE¡ry_t
 *
íåy
, 
uöt16
 
˛u°îId
 );

131 
byã
 
bödAddClu°îIdToLi°
–
BödögE¡ry_t
 *
íåy
, 
uöt16
 
˛u°îId
 );

136 
BödögE¡ry_t
 *
bödFödExi°ög
–
byã
 
§cEpI¡
,

137 
zAddrTy≥_t
 *
d°Sh‹tAddr
, 
byã
 
d°EpI¡
 );

142 
nwk_ªmove_bödSrc
–
zAddrTy≥_t
 *
§cAddr
, 
byã
 
ïI¡
,

143 
byã
 
numClu°îIds
, 
uöt16
 *
˛u°îIds
 );

148 
bödRemoveDev
–
zAddrTy≥_t
 *
sh‹tAddr
);

153 
bödRemoveSrcDev
–
uöt8
 
ï
 );

158 
byã
 
bödNumBoundTo
–
zAddrTy≥_t
 *
devAddr
, byã 
devEpI¡
, byã 
§cMode
 );

163 
uöt16
 
bödNumReÊe˘i⁄s
–
uöt8
 
ï
, uöt16 
˛u°îID
 );

169 
BödögE¡ry_t
 *
bödFöd
–
uöt8
 
ï
, 
uöt16
 
˛u°îID
, uöt8 
skùpög
 );

174 
nwk_H™dBödögTimeout
( );

179 
byã
 
BödInôNV
( );

184 
BödSëDeÁu…NV
( );

189 
uöt16
 
BödRe°‹eFromNV
( );

194 
BödWrôeNV
( );

199 
bödUpd©eAddr
–
uöt16
 
ﬁdAddr
, uöt16 
√wAddr
 );

204 
BödögE¡ry_t
 *
bödAddE¡ry
–
byã
 
§cEpI¡
,

205 
zAddrTy≥_t
 *
d°Addr
, 
byã
 
d°EpI¡
,

206 
byã
 
numClu°îIds
, 
uöt16
 *
˛u°îIds
 );

211 
uöt16
 
bödNumOfE¡rõs
( );

217 
bödC≠acôy
–
uöt16
 *
maxE¡rõs
, uöt16 *
u£dE¡rõs
 );

226 
BödögE¡ry_t
 *(*
pbödAddE¡ry
)–
byã
 
§cEpI¡
,

227 
zAddrTy≥_t
 *
d°Addr
, 
byã
 
d°EpI¡
,

228 
byã
 
numClu°îIds
, 
uöt16
 *
˛u°îIds
 );

233 
uöt16
 (*
pbödNumOfE¡rõs
)( );

238 (*
pbödRemoveDev
)–
zAddrTy≥_t
 *
Addr
 );

243 
byã
 (*
pBödInôNV
)( );

248 (*
pBödSëDeÁu…NV
)( );

253 
uöt16
 (*
pBödRe°‹eFromNV
)( );

258 (*
pBödWrôeNV
)( );

263 
uöt8
 
bödögAddrMgsHñ≥rC⁄vît
–
uöt16
 
idx
, 
zAddrTy≥_t
 *
addr
 );

268 
uöt16
 
bödögAddrMgsHñ≥rC⁄vîtSh‹t
–uöt16 
idx
 );

273 
BödögE¡ry_t
 *
GëBödögTabÀE¡ry
–
uöt16
 
Nth
 );

277 #ifde‡
__˝lu•lus


	@Components/stack/nwk/NLMEDE.h

40 #i‚de‡
NLMEDE_H


41 
	#NLMEDE_H


	)

43 #ifde‡
__˝lu•lus


50 
	~"ZMAC.h
"

51 
	~"AssocLi°.h
"

52 
	~"nwk_bufs.h
"

63 
	#TX_OPTIONS_GTS
 0x01

	)

64 
	#TX_OPTIONS_SECURITY_ENABLE
 0x02

	)

67 
	#BEACON_ORDER_NO_BEACONS
 15

	)

68 
	#BEACON_ORDER_4_MINUTES
 14

69 
	#BEACON_ORDER_2_MINUTES
 13

70 
	#BEACON_ORDER_1_MINUTE
 12

71 
	#BEACON_ORDER_31_SECONDS
 11

72 
	#BEACON_ORDER_15_SECONDS
 10

73 
	#BEACON_ORDER_7_5_SECONDS
 9

74 
	#BEACON_ORDER_4_SECONDS
 8

75 
	#BEACON_ORDER_2_SECONDS
 7

76 
	#BEACON_ORDER_1_SECOND
 6

77 
	#BEACON_ORDER_480_MSEC
 5

	)

78 
	#BEACON_ORDER_240_MSEC
 4

	)

79 
	#BEACON_ORDER_120_MSEC
 3

	)

80 
	#BEACON_ORDER_60_MSEC
 2

	)

81 
	#BEACON_ORDER_30_MSEC
 1

	)

82 
	#BEACON_ORDER_15_MSEC
 0

	)

84 
	#STARTING_SCAN_DURATION
 5

	)

85 
	#MAX_SCAN_DURATION
 15

	)

86 
	#ENERGY_SCAN_INCREMENT
 16

	)

89 
	#NLME_ED_SCAN
 0

	)

90 
	#NLME_DISC_SCAN
 1

	)

91 
	#NLME_PID_SCAN
 2

	)

94 
	#CAPINFO_ALTPANCOORD
 0x01

	)

95 
	#CAPINFO_DEVICETYPE_FFD
 0x02

	)

96 
	#CAPINFO_DEVICETYPE_RFD
 0x00

	)

97 
	#CAPINFO_POWER_AC
 0x04

	)

98 
	#CAPINFO_RCVR_ON_IDLE
 0x08

	)

99 
	#CAPINFO_SECURITY_CAPABLE
 0x40

	)

100 
	#CAPINFO_ALLOC_ADDR
 0x80

	)

105 
	ebˇ°_addr_e
 {

106 
NWK_BROADCAST_SHORTADDR_RESRVD_F8
 = 0xFFF8,

107 
NWK_BROADCAST_SHORTADDR_RESRVD_F9
,

108 
NWK_BROADCAST_SHORTADDR_RESRVD_FA
,

109 
NWK_BROADCAST_SHORTADDR_RESRVD_FB
,

110 
NWK_BROADCAST_SHORTADDR_DEVZCZR
,

111 
NWK_BROADCAST_SHORTADDR_DEVRXON
,

113 
NWK_BROADCAST_SHORTADDR_DEVALL
 = 0xFFFF

115 
bˇ°_addr_e
 
	tbˇ°_addr_t
;

116 
	#NWK_BROADCAST_SHORTADDR
 
NWK_BROADCAST_SHORTADDR_DEVALL


	)

119 
	#NWK_BROADCAST_FILTER_DEVALL
 ((
uöt8
)0x01)

	)

120 
	#NWK_BROADCAST_FILTER_DEVRXON
 ((
uöt8
)0x02)

	)

121 
	#NWK_BROADCAST_FILTER_DEVZCZR
 ((
uöt8
)0x04)

	)

122 
	#NWK_BROADCAST_FILTER_RESRVD
 ((
uöt8
)0x08)

	)

123 
	#NWK_BROADCAST_FILTER_ANY
 ( \

	)

124 
NWK_BROADCAST_FILTER_DEVALL
 | \

125 
NWK_BROADCAST_FILTER_DEVRXON
 | \

126 
NWK_BROADCAST_FILTER_DEVZCZR
 | \

127 
NWK_BROADCAST_FILTER_RESRVD
 \

129 
	eaddr_fûãr_e
 {

130 
ADDR_NOT_BCAST
,

131 
ADDR_BCAST_NOT_ME
,

132 
ADDR_BCAST_FOR_ME


134 
addr_fûãr_e
 
	taddr_fûãr_t
;

137 
	#NWK_ASSOC_JOIN
 0

	)

138 
	#NWK_ASSOC_REJOIN_UNSECURE
 1

	)

139 
	#NWK_ASSOC_REJOIN_SECURE
 2

	)

144 
	#NWK_NV_NIB_ENABLE
 0x01

	)

145 
	#NWK_NV_DEVICELIST_ENABLE
 0x02

	)

146 
	#NWK_NV_BINDING_ENABLE
 0x04

	)

147 
	#NWK_NV_ADDRMGR_ENABLE
 0x08

	)

154 
nwkSequí˚Num
 = 0x81,

155 
nwkPassiveAckTimeout
,

156 
nwkMaxBrﬂdˇ°Rërõs
,

157 
nwkMaxChûdªn
,

158 
nwkMaxDïth
,

159 
nwkMaxRouãrs
,

160 
nwkNeighb‹TabÀ
,

161 
nwkBrﬂdˇ°DñivîyTime
,

162 
nwkRï‹tC⁄°™tCo°
,

163 
nwkRouãDiscRërõs
,

164 
nwkRoutögTabÀ
,

165 
nwkSecuªAŒFømes
,

166 
nwkSecurôyLevñ
,

167 
nwkSymLök
,

168 
nwkC≠abûôyInfo
,

177 
nwkTønß˘i⁄Pîsi°í˚Time
 = 0x95,

181 
nwkPrŸocﬁVîsi⁄
 = 0x98,

186 
nwkRouãDiscovîyTime
 = 0x9B,

187 
nwkNumNeighb‹TabÀE¡rõs
,

188 
nwkNumRoutögTabÀE¡rõs
,

189 
nwkNwkSèã
,

190 
nwkMAX_NIB_ITEMS


191 }
	tZNwkAâribuãs_t
;

195 
uöt16
 
∑nId
;

196 
byã
 
logiˇlCh™√l
;

197 
byã
 
bóc⁄Ordî
;

198 
byã
 
su≥rFømeOrdî
;

199 
byã
 
rouãrC≠acôy
;

200 
byã
 
devi˚C≠acôy
;

201 
byã
 
vîsi⁄
;

202 
byã
 
°ackProfûe
;

204 
uöt16
 
cho£nRouãr
;

205 
uöt8
 
cho£nRouãrLökQuÆôy
;

206 
uöt8
 
cho£nRouãrDïth
;

207 
uöt8
 
exãndedPANID
[
Z_EXTADDR_LEN
];

208 
byã
 
upd©eId
;

209 *
√xtDesc
;

210 } 
	t√tw‹kDesc_t
;

215 
uöt8
 
ªœyC¡
;

216 
uöt8
 
ªœyIdx
;

217 
uöt16
* 
ªœyLi°
;

218 } 
	tNLDE_SrcFømeF‹m©_t
;

222 
uöt8
 
bufLígth
;

223 
uöt8
 
hdrLí
;

224 
uöt8
 
‰ameTy≥
;

225 
uöt8
 
¥ŸocﬁVîsi⁄
;

226 
uöt8
 
discovîRouã
;

227 
uöt8
 
mu…iˇ°
;

228 
uöt8
 
£cuª
;

229 
uöt8
 
d°ExtAddrSë
;

230 
uöt8
 
§cExtAddrSë
;

231 
uöt16
 
d°Addr
;

232 
uöt16
 
§cAddr
;

233 
uöt16
 
macD°Addr
;

234 
uöt16
 
å™sID
;

235 
uöt8
 
ødius
;

236 
uöt8
 
brﬂdˇ°Id
;

237 
uöt8
* 
d°ExtAddr
;

238 
uöt8
* 
§cExtAddr
;

239 
uöt8
 
nsduLígth
;

240 
uöt8
 
§cRouãSë
;

241 
NLDE_SrcFømeF‹m©_t
 
§cfd
;

242 
uöt8
* 
nsdu
;

243 } 
	tNLDE_FømeF‹m©_t
;

247 
uöt8
 
LökQuÆôy
;

248 
uöt8
 
c‹ªœti⁄
;

249 
öt8
 
rssi
;

250 } 
	tNLDE_Sig«l_t
;

252 
	#NLME_SCAN_FIELDS_RES_SIZE
 1

	)

256 
uöt8
 
‰ameTy≥
;

257 
uöt8
 
hdrLí
;

258 
uöt16
 
d°Addr
;

259 
uöt16
 
§cAddr
;

260 
uöt8
 
§cRouãSë
;

261 
NLDE_SrcFømeF‹m©_t
 
§cfd
;

262 
uöt8
* 
nsdu
;

263 
uöt8
 
nsduLí
;

264 
uöt8
 
nsduH™dÀ
;

265 
uöt16
 
nsduH™dÀO±i⁄s
;

266 
uöt8
 
£cuª
;

267 
uöt8
 
discovîRouã
;

268 
uöt8
 
ødius
;

269 
uöt8
 
£qNum
;

270 
uöt8
 
mu…iˇ°
;

271 
uöt8
 
d°ExtAddrSë
;

272 
uöt8
 
§cExtAddrSë
;

273 
uöt8
* 
d°ExtAddr
;

274 
uöt8
* 
§cExtAddr
;

275 
uöt16
 
å™sID
;

276 * 
fd
;

277 } 
	tNLDE_FømeD©a_t
;

282 
NLDE_FømeD©a_t
 
nfd
;

283 } 
	tNLDE_D©aReq_t
;

287 
uöt8
 
ovîhód
;

288 
uöt8
 
nsduLí
;

289 
uöt8
 
£cuª
;

290 } 
	tNLDE_D©aReqAŒoc_t
;

294 
uöt32
 
ch™√ls
;

295 
uöt8
 
duøti⁄
;

296 
uöt8
 
sˇnTy≥
;

297 
uöt8
 
sˇnAµ
;

298 } 
	tNLME_SˇnFõlds_t
;

302 
nwkDB_t
* 
db
;

303 
ZSètus_t
 
°©us
;

304 } 
	tNLDE_D©aCnf_t
;

308 
uöt8
* 
extAddr
;

309 
uöt8
 
ªmoveChûdªn
;

310 
uöt8
 
ªjoö
;

311 
uöt8
 
sûít
;

312 } 
	tNLME_LóveReq_t
;

316 
uöt8
 
ªmoveChûdªn
;

317 
uöt8
 
ªjoö
;

318 } 
	tNLME_LóveR•_t
;

322 
uöt16
 
d°Addr
;

323 
uöt8
 
extAddr
[
Z_EXTADDR_LEN
];

324 
uöt8
 
ªmoveChûdªn
;

325 
uöt8
 
ªjoö
;

326 
uöt8
 
°©us
;

327 } 
	tNLME_LóveCnf_t
;

331 
uöt16
 
§cAddr
;

332 
uöt8
 
extAddr
[
Z_EXTADDR_LEN
];

333 
uöt8
 
ªque°
;

334 
uöt8
 
ªmoveChûdªn
;

335 
uöt8
 
ªjoö
;

336 } 
	tNLME_LóveInd_t
;

341 
byã
 
NLME_PîmôJoöög
;

342 
byã
 
NLME_AssocPîmissi⁄
;

343 
uöt16
 
ßvedRe•⁄£R©e
;

346 
NLME_SˇnFõlds_t
* 
NLME_SˇnFõlds
;

360 
ZSètus_t
 
NLDE_D©aReq
–
NLDE_D©aReq_t
* 
ªq
 );

367 
NLDE_D©aReq_t
* 
NLDE_D©aReqAŒoc
–
NLDE_D©aReqAŒoc_t
* 
dø
 );

377 
NLDE_D©aCnf
–
NLDE_D©aCnf_t
* 
˙f
 );

385 
NLDE_D©aIndiˇti⁄
–
NLDE_FømeF‹m©_t
 *
ff
, 
NLDE_Sig«l_t
 *
sig
, 
uöt32
 
time°amp
 );

416 
ZSètus_t
 
NLME_Nëw‹kF‹m©i⁄Reque°
–
uöt16
 
P™Id
, 
uöt8
* 
ExãndedPANID
, 
uöt32
 
SˇnCh™√ls
,

417 
byã
 
SˇnDuøti⁄
, byã 
Bóc⁄Ordî
,

418 
byã
 
Su≥r‰ameOrdî
, byã 
B©ãryLi„Exãnsi⁄
 );

427 
NLME_Nëw‹kF‹m©i⁄C⁄fúm
–
ZSètus_t
 
Sètus
 );

434 
ZSètus_t
 
NLME_Nëw‹kDiscovîyReque°
–
uöt32
 
SˇnCh™√ls
, 
byã
 
sˇnDuøti⁄
);

439 
ZSètus_t
 
NLME_NwkDiscReq2
–
NLME_SˇnFõlds_t
* 
fõlds
 );

444 
NLME_NwkDiscTîm
( );

462 
NLME_Nëw‹kDiscovîyC⁄fúm
–
byã
 
Resu…Cou¡
,

463 
√tw‹kDesc_t
 *
Nëw‹kLi°
 );

472 
ZSètus_t
 
NLME_PîmôJoöögReque°
–
byã
 
PîmôDuøti⁄
 );

478 
NLME_PîmôJoöögEvít
( );

487 
ZSètus_t
 
NLME_JoöReque°
–
uöt8
 *
exãndedPANID
, 
uöt16
 
P™Id
, 
byã
 
Ch™√l
, byã 
C≠abûôyInfo
);

497 
ZSètus_t
 
NLME_Dúe˘JoöReque°
–
byã
 *
DevExtAddªss
, byã 
ˇpInfo
 );

506 
ZSètus_t
 
NLME_OΩh™JoöReque°
–
uöt32
 
SˇnCh™√ls
, 
byã
 
SˇnDuøti⁄
 );

512 
ZSètus_t
 
NLME_ReJoöReque°
–
uöt8
 *
ExãndedPANID
, uöt8 
ch™√l
 );

524 
NLME_JoöC⁄fúm
–
uöt16
 
P™Id
, 
ZSètus_t
 
Sètus
 );

533 
ZSètus_t
 
NLME_JoöIndiˇti⁄
–
uöt16
 
Sh‹tAddªss
,

534 
uöt8
 *
ExãndedAddªss
,

535 
uöt8
 
C≠abûôyInf‹m©i⁄
,

536 
uöt8
 
ty≥
 );

547 
ZSètus_t
 
NLME_SèπRouãrReque°
–
byã
 
Bóc⁄Ordî
,

548 
byã
 
Su≥r‰ameOrdî
,

549 
byã
 
B©ãryLi„Exãnsi⁄
 );

558 
NLME_SèπRouãrC⁄fúm
–
ZSètus_t
 
Sètus
 );

567 
ZSètus_t
 
NLME_LóveReq
–
NLME_LóveReq_t
* 
ªq
 );

577 
NLME_LóveCnf
–
NLME_LóveCnf_t
* 
˙f
 );

586 
NLME_LóveInd
–
NLME_LóveInd_t
* 
öd
 );

592 
ZSètus_t
 
NLME_LóveR•
–
NLME_LóveR•_t
* 
r•
 );

601 
ZSètus_t
 
NLME_Re£tReque°
( );

610 
ZSètus_t
 
NLME_SyncReque°
–
byã
 
Tøck
 );

620 
NLME_SyncIndiˇti⁄
–
byã
 
ty≥
, 
uöt16
 
sh‹tAddr
 );

626 
NLME_PîmôJoöögTimeout
( );

636 
NLME_PﬁlC⁄fúm
–
byã
 
°©us
 );

645 
ZSètus_t
 
NLME_GëReque°
–
ZNwkAâribuãs_t
 
NIBAâribuã
, 
uöt16
 
Index
,

646 *
VÆue
 );

655 
ZSètus_t
 
NLME_SëReque°
–
ZNwkAâribuãs_t
 
NIBAâribuã
,

656 
uöt16
 
Index
,

657 *
VÆue
 );

665 
ZSètus_t
 
NLME_RouãDiscovîyReque°
–
uöt16
 
D°Addªss
, 
byã
 
›ti⁄s
, 
uöt8
 
ødius
 );

672 
NLME_C⁄˚¡øt‹Indiˇti⁄
–
uöt16
 
nwkAddr
 );

678 
ZSètus_t
 
NLME_EDSˇnReque°
–
uöt32
 
SˇnCh™√ls
, 
uöt8
 
sˇnDuøti⁄
);

683 
NLME_EDSˇnC⁄fúm
–
uöt8
 
°©us
, 
uöt32
 
sˇ¬edCh™√ls
, uöt8 *
íîgyDëe˘Li°
 );

694 
byã
 *
NLME_GëExtAddr
( );

701 
uöt16
 
NLME_GëSh‹tAddr
( );

709 
uöt16
 
NLME_GëCo‹dSh‹tAddr
( );

717 
NLME_GëCo‹dExtAddr
–
byã
 * );

722 
ZMacSètus_t
 
NwkPﬁlReq
–
byã
 
£curôyE«bÀ
 );

729 
NLME_SëPﬁlR©e
–
uöt16
 
√wR©e
 );

736 
NLME_SëQueuedPﬁlR©e
–
uöt16
 
√wR©e
 );

743 
NLME_SëRe•⁄£R©e
–
uöt16
 
√wR©e
 );

750 
byã
 
NLME_InôNV
( );

755 
NLME_SëDeÁu…NV
( );

760 
byã
 
NLME_Re°‹eFromNV
( );

770 
NLME_Upd©eNV
–
byã
 
íabÀs
 );

788 
ZSètus_t
 
NLME_CheckNewAddrSë
–
uöt16
 
sh‹tAddr
, 
uöt8
 *
extAddr
 );

794 
NLME_Rï‹tAddªssC⁄Êi˘
–
uöt16
 
sh‹tAddr
 );

797 
NLME_Co‹dö©‹Inô
( );

798 
NLME_Devi˚JoöögInô
( );

800 (*
≤wk_SˇnPANCh™Sñe˘
)–
ZMacSˇnCnf_t
 *
∑øm
 );

801 (*
≤wk_SˇnPANCh™Vîify
)–
ZMacSˇnCnf_t
 *
∑øm
 );

802 (*
≤wk_SˇnJoöögOΩh™
)–
ZMacSˇnCnf_t
 *
∑øm
 );

803 (*
pNLME_Nëw‹kF‹m©i⁄C⁄fúm
)–
ZSètus_t
 
Sètus
 );

805 
NLME_InôStocha°icAddªssög
( );

806 
NLME_InôTªeAddªssög
( );

812 #ifde‡
__˝lu•lus


	@Components/stack/nwk/aps_frag.h

40 #i‚de‡
APSF_H


41 
	#APSF_H


	)

43 
	~"AF.h
"

44 
	~"ZDAµ.h
"

46 #ifde‡
__˝lu•lus


54 
	~"ZComDef.h
"

59 
	#APSF_SCHED_EVT
 0x0001

	)

64 
	#APSF_E«bÀd
 (
APSF_èskID
 !0xff)

	)

69 
uöt8
 
APSF_èskID
;

78 
APSF_Inô
(
uöt8
 
èsk_id
);

83 
APSF_Inô
(
uöt8
 
èsk_id
);

84 
UINT16
 
APSF_Pro˚ssEvít
–
uöt8
 
èsk_id
, UINT16 
evíts
 );

85 
afSètus_t
 
APSF_SídFøgmíãd
(
APSDE_D©aReq_t
 *
pReq
);

86 
APSF_Pro˚ssAck
(
≠s_FømeF‹m©_t
 *
aff
, 
uöt16
 
§cAddr
, 
uöt8
 
°©us
);

87 
APSF_SídOßlMsg
(
uöt8
 *
msgPå
);

89 
afSètus_t
 
	tAPSF_SídFøgmíãd_t
(
	tAPSDE_D©aReq_t
 *
	tpReq
);

90 
	tAPSF_Pro˚ssAck_t
(
	t≠s_FømeF‹m©_t
 *
	taff
, 
	tuöt16
 
	t§cAddr
, 
	tuöt8
 
	t°©us
);

91 
	tAPSF_SídOßlMsg_t
(
	tuöt8
 *
	tmsgPå
);

93 
APSF_SídFøgmíãd_t
 *
≠sfSídFøgmíãd
;

94 
APSF_Pro˚ssAck_t
 *
≠sfPro˚ssAck
;

95 
APSF_SídOßlMsg_t
 *
≠sfSídOßlMsg
;

100 #ifde‡
__˝lu•lus


	@Components/stack/nwk/aps_groups.h

40 #i‚de‡
APSGROUPS_H


41 
	#APSGROUPS_H


	)

43 #ifde‡
__˝lu•lus


50 
	~"ZComDef.h
"

55 
	#≠s_GroupsRemaögC≠acôy
(Ë–
APS_MAX_GROUPS
 - 
	`≠s_Cou¡AŒGroups
(Ë)

	)

60 
	#APS_GROUPS_FIND_FIRST
 0xFE

	)

61 
	#APS_GROUPS_EP_NOT_FOUND
 0xFE

	)

63 
	#APS_GROUP_NAME_LEN
 16

	)

72 
uöt16
 
ID
;

73 
uöt8
 
«me
[
APS_GROUP_NAME_LEN
];

74 } 
	t≠s_Group_t
;

76 
	s≠sGroupIãm


78 
≠sGroupIãm
 *
√xt
;

79 
uöt8
 
ídpoöt
;

80 
≠s_Group_t
 
group
;

81 } 
	t≠sGroupIãm_t
;

86 
≠sGroupIãm_t
 *
≠sGroupTabÀ
;

95 
ZSètus_t
 
≠s_AddGroup
–
uöt8
 
ídpoöt
, 
≠s_Group_t
 *
group
 );

101 
≠s_Group_t
 *
≠s_FödGroup
–
uöt8
 
ídpoöt
, 
uöt16
 
groupID
 );

107 
uöt8
 
≠s_FödGroupF‹Endpoöt
–
uöt16
 
groupID
, uöt8 
œ°EP
 );

113 
uöt8
 
≠s_FödAŒGroupsF‹Endpoöt
–uöt8 
ídpoöt
, 
uöt16
 *
groupLi°
 );

119 
uöt8
 
≠s_RemoveGroup
–uöt8 
ídpoöt
, 
uöt16
 
groupID
 );

124 
≠s_RemoveAŒGroup
–
uöt8
 
ídpoöt
 );

129 
uöt8
 
≠s_Cou¡Groups
–uöt8 
ídpoöt
 );

134 
uöt8
 
≠s_Cou¡AŒGroups
( );

139 
uöt8
 
≠s_GroupsInôNV
( );

144 
≠s_GroupsSëDeÁu…NV
( );

149 
≠s_GroupsWrôeNV
( );

154 
uöt16
 
≠s_GroupsRe°‹eFromNV
( );

158 #ifde‡
__˝lu•lus


	@Components/stack/nwk/aps_util.h

40 #i‚de‡
APSUTIL_H


41 
	#APSUTIL_H


	)

43 #ifde‡
__˝lu•lus


50 
	~"ZComDef.h
"

51 
	~"APSMEDE.h
"

76 
byã
 
≠sReÊe˘Msg
–
zAddrTy≥_t
 *
SrcAddªss
,

77 
≠s_FømeF‹m©_t
 *
aff
, 
uöt8
 
LökQuÆôy
,

78 
uöt8
 
ackReq
, uöt8 
SecurôyU£
,

79 
uöt8
 
°¨tögIndex
 );

81 
≠sReReÊe˘Msg
–
nwkDB_t
 *
ªc
 );

86 
APSDE_P¨£Msg
–
NLDE_FømeF‹m©_t
 *
ff
,

87 
≠s_FømeF‹m©_t
 *
aff
 );

89 
≠sGíî©eAck
–
uöt16
 
d°Addr
, 
≠s_FømeF‹m©_t
 *
aff
 );

91 
≠sPro˚ssAck
–
uöt16
 
§cAddr
, 
≠s_FømeF‹m©_t
 *
aff
 );

95 #ifde‡
__˝lu•lus


	@Components/stack/nwk/nwk.h

40 #i‚de‡
NWK_H


41 
	#NWK_H


	)

43 #ifde‡
__˝lu•lus


51 
	~"ZComDef.h
"

52 
	~"ZMAC.h
"

53 
	~"nwk_bufs.h
"

54 
	~"NLMEDE.h
"

55 
	~"s•.h
"

67 
	#MAC_SCAN_REQ
 0x01

	)

68 
	#NWK_NETWORKSTART_REQ
 0x02

	)

69 
	#MAC_ASSOCIATE_REQ
 0x03

	)

70 
	#NWK_REMOTE_GET_REQ
 0x04

	)

71 
	#NWK_REMOTE_SET_REQ
 0x05

	)

72 
	#NWK_ASSOCIATE_RESP
 0x06

	)

73 
	#NWK_DISASSOCIATE_REQ
 0x07

	)

75 
	#NWK_AUTO_POLL_EVT
 0x0001

	)

76 
	#NWK_NOT_EXPECTING_EVT
 0x0004

	)

77 
	#RTG_TIMER_EVENT
 0x0010

	)

78 
	#NWK_DATABUF_SEND
 0x0020

	)

79 
	#NWK_BCAST_TIMER_EVT
 0x0040

	)

80 
	#NWK_PERMITJOIN_EVT
 0x0080

	)

81 
	#NWK_LINK_STATUS_EVT
 0x0100

	)

82 
	#NWK_PID_UPDATE_EVT
 0x0200

	)

83 
	#NWK_REJOIN_TIMEOUT_EVT
 0x0400

	)

86 
	#NWK_CMD_ID
 0

	)

87 
	#NWK_PARAMS_ID
 1

	)

88 
	#NWK_REQ_ATTR_ID
 1

	)

89 
	#NWK_REQ_ATTR
 2

	)

90 
	#NWK_CMD_PYLD_BEGIN
 
NWK_HEADER_LEN


	)

91 
	#NWK_DEVICE_LIST_LEN_FIELD
 
NWK_HEADER_LEN
 + 1

	)

94 
	#ED_SCAN_MAXCHANNELS
 27

	)

97 
	#MAX_DATA_PACKET_LEN
 
MAC_MAX_FRAME_SIZE


	)

99 
	#NWK_TASK_ID
 0

	)

100 
	#ASSOC_CAPABILITY_INFO
 0

	)

101 
	#ASSOC_SECURITY_EN
 0

	)

103 
	#DEF_DEST_EP
 2

	)

104 
	#DEVICE_APPLICATION
 0

	)

106 
	#MAC_ADDR_LEN
 8

	)

108 
	#NWK_TXOPTIONS_ACK
 0x01

	)

109 
	#NWK_TXOPTIONS_INDIRECT
 0x04

	)

112 
	#NWK_TXOPTIONS_COORD
 (
NWK_TXOPTIONS_ACK
 | 
NWK_TXOPTIONS_INDIRECT
)

	)

118 
	#DEF_MAX_NUM_COORDINATORS
 15

119 
	#DEF_CHANNEL_SCAN_BITMAP
 
MAX_CHANNELS_24GHZ


	)

120 
	#SOFT_SCAN_DURATION
 1

121 

	)

122 
	#DEF_SCAN_DURATION
 2

	)

124 
	#NO_BEACONS
 15

	)

126 
	#DEF_BEACON_ORDER
 
NO_BEACONS


	)

134 
	#DEF_SUPERFRAMEORDER
 
DEF_BEACON_ORDER


	)

135 
	#NWK_SECURITY_ENABLE
 
FALSE


	)

136 
	#NWK_MAC_ASSOC_CNF_LEN
 4

	)

137 
	#FIXED_SIZ_MAC_DATA_CNF
 4

138 
	#FIXED_SIZ_MAC_DATA_IND
 26

	)

139 
	#FIXED_SIZ_MAC_SCAN_CNF
 7

	)

141 
	#ALL_PAIRING_TABLE_ENTRIES
 0

	)

142 
	#SIZE_OF_PAIRING_TABLE_ENTRY
 6

143 
	#SIZE_OF_DEVICE_LIST_ENTRY
 2

144 

	)

146 
	#DEF_NWK_RADIUS
 ( 2 * 
BEACON_MAX_DEPTH
 )

	)

148 
	#NWK_SEND_TIMER_INTERVAL
 2

	)

149 
	#NWK_BCAST_TIMER_INTERVAL
 100

150 

	)

151 
	#INVALID_NODE_ADDR
 0xFFFE

	)

152 
	#INVALID_PAN_ID
 0xFFFE

	)

156 
	#DEF_LINK_COST
 1

157 
	#MAX_LINK_COST
 7

158 
	#LINK_DOWN_COST
 0

159 
	#LINK_AGEOUT_COST
 0

161 
	#DEF_LINK_COUNTER
 2

162 
	#MAX_LINK_COUNTER
 4

163 
	#LINK_DOWN_TRIGGER
 3

164 
	#LINK_ACTIVE_TRIGGER
 2

165 

	)

167 
	#CB_ID_APP_ANNOUNCE_CNF
 0x00

	)

168 
	#CB_ID_APP_ASSOCIATE_CNF
 0x01

	)

169 
	#CB_ID_APP_ASSOCIATE_IND
 0x02

	)

170 
	#CB_ID_APP_DATA_CNF
 0x03

	)

171 
	#CB_ID_APP_DATA_IND
 0x04

	)

172 
	#CB_ID_APP_DISASSOCIATE_CNF
 0x05

	)

173 
	#CB_ID_APP_DISASSOCIATE_IND
 0x06

	)

174 
	#CB_ID_APP_NETWORK_DETECT_CNF
 0x07

	)

175 
	#CB_ID_APP_REMOTE_GET_CNF
 0x08

	)

176 
	#SPI_CB_APP_REMOTE_SET_CNF
 0x09

	)

177 
	#CB_ID_APP_SERVICE_CNF
 0x0a

	)

178 
	#CB_ID_APP_SERVICE_IND
 0x0b

	)

179 
	#CB_ID_APP_START_CNF
 0x0c

	)

181 
	#NUM_PING_ROUTE_ADDRS
 12

	)

182 
	#PING_ROUTE_ADDRS_INDEX
 8

	)

184 
	#NWK_GëNodeDïth
(Ë(
_NIB
.
nodeDïth
)

	)

185 
	#NWK_GëTªeDïth
(Ë(0)

	)

187 
	#BEACON_MAX_DEPTH
 0x0F

	)

194 
NWK_INIT
,

195 
NWK_JOINING_ORPHAN
,

196 
NWK_DISC
,

197 
NWK_JOINING
,

198 
NWK_ENDDEVICE
,

199 
PAN_CHNL_SELECTION
,

200 
PAN_CHNL_VERIFY
,

201 
PAN_STARTING
,

202 
NWK_ROUTER
,

203 
NWK_REJOINING


204 } 
	tnwk_°©es_t
;

209 
MACCMDBUF_NONE
,

210 
MACCMDBUF_ASSOC_REQ
,

211 
MACCMDBUF_DISASSOC_REQ


212 } 
	tnwkMacCmds_t
;

217 
byã
 
Sequí˚Num
;

218 
byã
 
PassiveAckTimeout
;

219 
byã
 
MaxBrﬂdˇ°Rërõs
;

220 
byã
 
MaxChûdªn
;

221 
byã
 
MaxDïth
;

222 
byã
 
MaxRouãrs
;

225 
byã
 
dummyNeighb‹TabÀ
;

227 
byã
 
Brﬂdˇ°DñivîyTime
;

228 
byã
 
Rï‹tC⁄°™tCo°
;

229 
byã
 
RouãDiscRërõs
;

232 
byã
 
dummyRoutögTabÀ
;

234 
byã
 
SecuªAŒFømes
;

235 
byã
 
SecurôyLevñ
;

236 
byã
 
SymLök
;

237 
byã
 
C≠abûôyInfo
;

239 
uöt16
 
Tønß˘i⁄Pîsi°í˚Time
;

241 
byã
 
nwkPrŸocﬁVîsi⁄
;

244 
byã
 
RouãDiscovîyTime
;

245 
byã
 
RouãExpúyTime
;

248 
uöt16
 
nwkDevAddªss
;

249 
byã
 
nwkLogiˇlCh™√l
;

250 
uöt16
 
nwkCo‹dAddªss
;

251 
byã
 
nwkCo‹dExtAddªss
[
Z_EXTADDR_LEN
];

252 
uöt16
 
nwkP™Id
;

255 
nwk_°©es_t
 
nwkSèã
;

256 
uöt32
 
ch™√lLi°
;

257 
byã
 
bóc⁄Ordî
;

258 
byã
 
su≥rFømeOrdî
;

259 
byã
 
sˇnDuøti⁄
;

260 
byã
 
b©tLi„Ext
;

261 
uöt32
 
ÆloˇãdRouãrAddªs£s
;

262 
uöt32
 
ÆloˇãdEndDevi˚Addªs£s
;

263 
byã
 
nodeDïth
;

266 
uöt8
 
exãndedPANID
[
Z_EXTADDR_LEN
];

269 
uöt8
 
nwkKeyLﬂded
;

270 
nwkKeyDesc
 
nwkA˘iveKey
;

271 
nwkKeyDesc
 
nwkA…î«ãKey
;

274 
uöt8
 
nwkAddrAŒoc
;

275 
uöt8
 
nwkUniqueAddr
;

276 
uöt8
 
nwkLökSètusPîiod
;

278 
uöt8
 
nwkRouãrAgeLimô
;

281 
uöt8
 
nwkU£Mu…iCa°
;

283 
uöt8
 
nwkIsC⁄˚¡øt‹
;

284 
uöt8
 
nwkC⁄˚¡øt‹DiscovîyTime
;

285 
uöt8
 
nwkC⁄˚¡øt‹Radius
;

286 
uöt8
 
nwkMaxSour˚Rouã
;

288 
uöt16
 
nwkM™agîAddr
;

289 
uöt16
 
nwkTŸÆTønsmissi⁄s
;

290 
uöt8
 
nwkUpd©eId
;

291 } 
	tnwkIB_t
;

296 
uöt16
 
∑nId
;

297 *
√xt
;

298 } 
	tnwkP™Id_t
;

303 
nwkIB_t
 
_NIB
;

304 
byã
 
NWK_TaskID
;

305 
√tw‹kDesc_t
 *
NwkDescLi°
;

306 
byã
 
nwkEx≥˘ögMsgs
;

307 
byã
 
nwk_bóc⁄Paylﬂd
[
ZMAC_MAX_BEACON_PAYLOAD_LEN
];

308 
byã
 
nwk_bóc⁄PaylﬂdSize
;

317 
nwk_öô
–
byã
 
èsk_id
 );

322 
ZSètus_t
 
nwk_d©a_ªq_£nd
–
nwkDB_t
* 
db
 );

327 
UINT16
 
nwk_evít_lo›
–
byã
 
èsk_id
, UINT16 
evíts
 );

337 
ZSètus_t
 
nwk_°¨t_co‹d
( );

342 
nwk_desc_li°_‰ì
( );

343 
√tw‹kDesc_t
 *
nwk_gëNëw‹kDesc
–
uöt8
 *
ExãndedPANID
, 
uöt16
 
P™Id
, 
byã
 
Ch™√l
 );

344 
nwk_Bóc⁄FromN©ive
(
byã
* 
buff
, byã 
size
, 
bóc⁄Paylﬂd_t
* 
bóc⁄
);

345 
nwk_Bóc⁄ToN©ive
(
bóc⁄Paylﬂd_t
* 
bóc⁄
, 
byã
* 
buff
, byã 
size
);

350 
nwk_£tSèãIdÀ
–
uöt8
 
idÀ
 );

355 
uöt8
 
nwk_°©eIdÀ
( );

360 
nwk_SˇnJoöögOΩh™
–
ZMacSˇnCnf_t
 *
∑øm
 );

361 
nwk_SˇnPANCh™Sñe˘
–
ZMacSˇnCnf_t
 *
∑øm
 );

362 
nwk_SˇnPANCh™Vîify
–
ZMacSˇnCnf_t
 *
∑øm
 );

366 #ifde‡
__˝lu•lus


	@Components/stack/nwk/nwk_bufs.h

40 #i‚de‡
NWK_BUFS_H


41 
	#NWK_BUFS_H


	)

43 #ifde‡
__˝lu•lus


51 
	~"ZComDef.h
"

52 
	~"ZMAC.h
"

62 
	#NWK_DATABUF_INIT
 0

63 
	#NWK_DATABUF_WAITING
 1

64 
	#NWK_DATABUF_SENT
 2

65 
	#NWK_DATABUF_CONFIRMED
 3

66 
	#NWK_DATABUF_SCHEDULED
 4

67 
	#NWK_DATABUF_HOLD
 5

68 
	#NWK_DATABUF_DONE
 6

69 

	)

71 
	#HANDLE_NONE
 0x0000

	)

72 
	#HANDLE_CNF
 0x0001

	)

73 
	#HANDLE_WAIT_FOR_ACK
 0x0002

	)

74 
	#HANDLE_BROADCAST
 0x0004

	)

75 
	#HANDLE_REFLECT
 0x0008

	)

76 
	#HANDLE_DELAY
 0x0010

	)

77 
	#HANDLE_HI_DELAY
 0x0020

	)

79 
	#HANDLE_SKIP_ROUTING
 0x0040

	)

80 
	#HANDLE_RTRY_MASK
 0x0380

	)

81 
	#HANDLE_RTRY_SHIFT
 7

	)

82 
	#HANDLE_FORCE_INDIRECT
 0x0400

	)

83 
	#HANDLE_INDIRECT_HOLD
 0x0800

84 
	#HANDLE_MCAST
 0x1000

	)

85 
	#HANDLE_MASK
 \

	)

86 ~–
HANDLE_CNF
 | 
HANDLE_WAIT_FOR_ACK
 | 
HANDLE_BROADCAST
 | 
HANDLE_DELAY
 | \

87 
HANDLE_HI_DELAY
 | 
HANDLE_FORCE_INDIRECT
 | 
HANDLE_MCAST
)

94 
uöt8
 
ty≥
;

95 * 
lﬂd
;

96 } 
	tnwkDB_U£rD©a_t
;

100 
ZMacD©aReq_t
 *
pD©aReq
;

101 *
√xt
;

102 
uöt16
 
d©aX
;

103 
uöt16
 
h™dÀO±i⁄s
;

104 
byã
 
nsduH™dÀ
;

105 
byã
 
°©e
;

106 
byã
 
ªåõs
;

107 
nwkDB_U£rD©a_t
 
ud
;

108 } 
	tnwkDB_t
;

110 
uöt8
 (*
	tnwkDB_FödM©chCB_t
)–
	tnwkDB_t
* 
	tdb
, * 
	tmf
 );

123 
nwkbufs_öô
( );

128 
nwk_SídNextD©aBuf
( );

133 
byã
 
nwk_MacD©aBuf„rsFuŒ
( );

138 
uöt8
 
nwk_MacD©aBuf„rsAdd
–
nwkDB_t
* 
db
, uöt8 
£¡
 );

144 
uöt8
 
nwk_MacD©aBuf„rsDóŒoc
–
byã
 
h™dÀ
 );

153 
nwkDB_t
 *
nwkDB_Cª©eHdr
–
ZMacD©aReq_t
 *
pkt
, 
byã
 
h™dÀ
, 
uöt16
 
h™dÀO±i⁄s
 );

158 
ZSètus_t
 
nwkDB_Add
–
nwkDB_t
 *
pkt
, 
byã
 
ty≥
, 
uöt16
 
d©aX
 );

163 
byã
 
nwkDB_Cou¡Ty≥s
–byã 
ty≥
 );

168 
nwkDB_t
 *
nwkDB_FödNextTy≥
–nwkDB_à*
pkt
, 
byã
 
ty≥
, byã 
dúe˘
 );

173 
nwkDB_t
 *
nwkDB_FödH™dÀ
–
byã
 
h™dÀ
 );

178 
nwkDB_t
 *
nwkDB_FödD°Addr
–
uöt16
 
addr
 );

183 
nwkDB_t
 *
nwkDB_FödD©aPkt
–
ZMacD©aReq_t
 *
pkt
 );

188 
nwkDB_t
* 
nwkDB_FödM©ch
–
nwkDB_FödM©chCB_t
 
cb
, * 
mf
 );

194 
nwkDB_RemoveFromLi°
–
nwkDB_t
 *
pkt
 );

199 
nwkDB_DñëeRecAŒ
–
nwkDB_t
 *
ªc
 );

204 
nwkbufs_hﬁd
–
nwkDB_t
 *
ªc
 );

209 
uöt8
 
nwkDB_Rëu∫Indúe˘HﬁdögC¡
( );

214 
uöt8
 
nwkDB_Cou¡Indúe˘Hﬁd
( );

219 
nwkbufs_ª£t
( );

224 * 
nwkDB_U£rD©aLﬂd
–
nwkDB_U£rD©a_t
* 
ud
 );

228 #ifde‡
__˝lu•lus


	@Components/stack/nwk/nwk_globals.c

43 
	~"ZComdef.h
"

44 
	~"OSAL.h
"

45 
	~"AddrMgr.h
"

46 
	~"AssocLi°.h
"

47 
	~"BödögTabÀ.h
"

48 
	~"nwk_utû.h
"

49 
	~"nwk_globÆs.h
"

50 
	~"APS.h
"

51 
	~"s•.h
"

52 
	~"πg.h
"

53 
	~"ZDC⁄fig.h
"

54 
	~"ZGlobÆs.h
"

56 #i‡
deföed
 ( 
LCD_SUPPORTED
 )

57 
	~"OnBﬂrd.h
"

61 
	~"hÆ_lcd.h
"

72 
	#NWK_MAX_DATABUFS_WAITING
 8

73 
	#NWK_MAX_DATABUFS_SCHEDULED
 5

74 
	#NWK_MAX_DATABUFS_CONFIRMED
 5

75 
	#NWK_MAX_DATABUFS_TOTAL
 12

76 

	)

85 
	#NWK_INDIRECT_CNT_RTG_TMR
 1

	)

96 
	#NWK_INDIRECT_MSG_MAX_PER
 3

	)

98 
	#NWK_INDIRECT_MSG_MAX_ALL
 \

	)

99 (
	gNWK_MAX_DATABUFS_TOTAL
 - 
	gNWK_INDIRECT_MSG_MAX_PER
)

111 
CONST
 
uöt16
 
	ggNWK_MAX_DEVICE_LIST
 = 
NWK_MAX_DEVICES
;

114 
CONST
 
uöt8
 
	ggNWK_MAX_SLEEPING_END_DEVICES
 = 
NWK_MAX_DEVICES
 - 
NWK_MAX_ROUTERS
;

117 
CONST
 
byã
 
	ggNWK_MAX_DATABUFS_WAITING
 = 
NWK_MAX_DATABUFS_WAITING
;

118 
CONST
 
byã
 
	ggNWK_MAX_DATABUFS_SCHEDULED
 = 
NWK_MAX_DATABUFS_SCHEDULED
;

119 
CONST
 
byã
 
	ggNWK_MAX_DATABUFS_CONFIRMED
 = 
NWK_MAX_DATABUFS_CONFIRMED
;

120 
CONST
 
byã
 
	ggNWK_MAX_DATABUFS_TOTAL
 = 
NWK_MAX_DATABUFS_TOTAL
;

122 
CONST
 
byã
 
	ggNWK_INDIRECT_CNT_RTG_TMR
 = 
NWK_INDIRECT_CNT_RTG_TMR
;

123 
CONST
 
byã
 
	ggNWK_INDIRECT_MSG_MAX_PER
 = 
NWK_INDIRECT_MSG_MAX_PER
;

124 
CONST
 
byã
 
	ggNWK_INDIRECT_MSG_MAX_ALL
 = 
NWK_INDIRECT_MSG_MAX_ALL
;

128 
uöt16
 *
	gCskù
;

130 #i‡–
STACK_PROFILE_ID
 =
ZIGBEEPRO_PROFILE
 )

131 
byã
 
	gCskùRås
[1] = {0};

132 
byã
 
	gCskùChld∫
[1] = {0};

133 #ñi‡–
STACK_PROFILE_ID
 =
HOME_CONTROLS
 )

134 
byã
 
	gCskùRås
[
MAX_NODE_DEPTH
+1] = {6,6,6,6,6,0};

135 
byã
 
	gCskùChld∫
[
MAX_NODE_DEPTH
+1] = {20,20,20,20,20,0};

136 #ñi‡–
STACK_PROFILE_ID
 =
GENERIC_STAR
 )

137 
byã
 
	gCskùRås
[
MAX_NODE_DEPTH
+1] = {5,5,5,5,5,0};

138 
byã
 
	gCskùChld∫
[
MAX_NODE_DEPTH
+1] = {5,5,5,5,5,0};

139 #ñi‡–
STACK_PROFILE_ID
 =
NETWORK_SPECIFIC
 )

140 
byã
 
	gCskùRås
[
MAX_NODE_DEPTH
+1] = {5,5,5,5,5,0};

141 
byã
 
	gCskùChld∫
[
MAX_NODE_DEPTH
+1] = {5,5,5,5,5,0};

145 
byã
 
	ggMIN_TREE_LINK_COST
 = 
MIN_LQI_COST_3
;

148 
assocüãd_devi˚s_t
 
	gAssocüãdDevLi°
[
NWK_MAX_DEVICES
];

150 
CONST
 
byã
 
	ggMAX_RTG_ENTRIES
 = 
MAX_RTG_ENTRIES
;

151 
CONST
 
byã
 
	ggMAX_RTG_SRC_ENTRIES
 = 
MAX_RTG_SRC_ENTRIES
;

152 
CONST
 
byã
 
	ggMAX_RREQ_ENTRIES
 = 
MAX_RREQ_ENTRIES
;

154 
CONST
 
byã
 
	ggMAX_NEIGHBOR_ENTRIES
 = 
MAX_NEIGHBOR_ENTRIES
;

157 
√ighb‹E¡ry_t
 
	g√ighb‹TabÀ
[
MAX_NEIGHBOR_ENTRIES
];

160 
πgE¡ry_t
 
	gπgTabÀ
[
MAX_RTG_ENTRIES
];

161 #i‡
deföed
 ( 
ZIGBEE_SOURCE_ROUTING
 )

162 
πgSrcE¡ry_t
 
	gπgSrcTabÀ
[
MAX_RTG_SRC_ENTRIES
];

166 
πDiscE¡ry_t
 
	gπDiscTabÀ
[
MAX_RREQ_ENTRIES
];

169 
bˇ°E¡ry_t
 
	gbˇ°TabÀ
[
MAX_BCAST
];

172 
uöt8
 
	gbˇ°HﬁdH™dÀ
[
MAX_BCAST
];

173 
uöt32
 
	gbˇ°HﬁdAckMask
[
MAX_BCAST
];

175 
CONST
 
byã
 
	ggMAX_BCAST
 = 
MAX_BCAST
;

181 
CONST
 
uöt8
 
	ggNWK_TREE_ALLOCATE_ROUTERADDR_FOR_ENDDEVICE
 = 
FALSE
;

189 
CONST
 
uöt16
 
	ggNWK_MAX_BINDING_ENTRIES
 = 
NWK_MAX_BINDING_ENTRIES
;

191 #i‡
deföed
 ( 
REFLECTOR
 )

194 
CONST
 
byã
 
	ggMAX_BINDING_CLUSTER_IDS
 = 
MAX_BINDING_CLUSTER_IDS
;

196 
CONST
 
uöt16
 
	ggBIND_REC_SIZE
 = –
BödögE¡ry_t
 );

199 
BödögE¡ry_t
 
	gBödögTabÀ
[
NWK_MAX_BINDING_ENTRIES
];

203 
CONST
 
uöt8
 
	ggAPS_MAX_GROUPS
 = 
APS_MAX_GROUPS
;

206 #i‡–
ZG_BUILD_ENDDEVICE_TYPE
 )

207 
≠sEndDevi˚Brﬂdˇ°_t
 
	g≠sEndDevi˚Brﬂdˇ°TabÀ
[
APS_MAX_ENDDEVICE_BROADCAST_ENTRIES
];

208 
uöt8
 
	ggAPS_MAX_ENDDEVICE_BROADCAST_ENTRIES
 = 
APS_MAX_ENDDEVICE_BROADCAST_ENTRIES
;

218 
CONST
 
byã
 
	gdeÁu…Key
[
SEC_KEY_LEN
] =

220 #i‡
deföed
 ( 
APP_TP
 ) || deföed ( 
APP_TP2
 )

233 
CONST
 
byã
 
	gdeÁu…TCLökKey
[
SEC_KEY_LEN
] =

242 #i‡
deföed
 ( 
LCD_SUPPORTED
 )

243 c⁄° 
	gPögSå
[] = "Ping Rcvd from";

244 c⁄° 
	gAssocCnfSå
[] = "Assoc Cnf";

245 c⁄° 
	gSuc˚ssSå
[] = "Success";

246 c⁄° 
	gEndDevi˚Så
[] = "EndDevice:";

247 c⁄° 
	gP¨ítSå
[] = "Parent:";

248 c⁄° 
	gZigbìCo‹dSå
[] = "ZigBee Coord";

249 c⁄° 
	gNëw‹kIDSå
[] = "Network ID:";

250 c⁄° 
	gRouãrSå
[] = "Router:";

251 c⁄° 
	gOΩh™R•Så
[] = "Orphan Response";

252 c⁄° 
	gSítSå
[] = "Sent";

253 c⁄° 
	gFaûedSå
[] = "Failed";

254 c⁄° 
	gAssocR•FaûSå
[] = "Assoc Rsp fail";

255 c⁄° 
	gAssocIndSå
[] = "Assoc Ind";

256 c⁄° 
	gAssocCnfFaûSå
[] = "Assoc Cnf fail";

257 c⁄° 
	gE√rgyLevñSå
[] = "Energy Level";

258 c⁄° 
	gSˇnFaûedSå
[] = "Scan Failed";

274 
	$nwk_globÆs_öô
( )

276 
	`AddrMgrInô
–
NWK_MAX_ADDRESSES
 );

278 #i‡!
	`deföed
 ( 
ZIGBEE_STOCHASTIC_ADDRESSING
 )

279 i‡–
ZSTACK_ROUTER_BUILD
 )

282 
Cskù
 = 
	`oßl_mem_Æloc
((
uöt16
Ë*(
MAX_NODE_DEPTH
+1));

283 
	`RTG_FûlCSkùTabÀ
(
CskùChld∫
, 
CskùRås
, 
MAX_NODE_DEPTH
, 
Cskù
);

289 i‡–
NWK_LINK_STATUS_PERIOD
 )

291 
	`NLME_InôLökSètus
();

294 #i‡
	`deföed
 ( 
ZIGBEE_FREQ_AGILITY
 )

295 
	`NwkFªqAgûôyInô
();

297 
	}
}

310 
	$NIB_öô
()

312 
_NIB
.
Sequí˚Num
 = 
	`LO_UINT16
(
	`oßl_ønd
());

314 
_NIB
.
nwkPrŸocﬁVîsi⁄
 = 
ZB_PROT_VERS
;

315 
_NIB
.
MaxDïth
 = 
MAX_NODE_DEPTH
;

317 #i‡–
NWK_MODE
 =
NWK_MODE_MESH
 )

318 
_NIB
.
bóc⁄Ordî
 = 
BEACON_ORDER_NO_BEACONS
;

319 
_NIB
.
su≥rFømeOrdî
 = 
BEACON_ORDER_NO_BEACONS
;

330 
_NIB
.
Brﬂdˇ°DñivîyTime
 = 
zgBˇ°DñivîyTime
;

331 
_NIB
.
PassiveAckTimeout
 = 
zgPassiveAckTimeout
;

332 
_NIB
.
MaxBrﬂdˇ°Rërõs
 = 
zgMaxBˇ°Rëúes
;

334 
_NIB
.
Rï‹tC⁄°™tCo°
 = 0;

335 
_NIB
.
RouãDiscRërõs
 = 0;

336 
_NIB
.
SecuªAŒFømes
 = 
USE_NWK_SECURITY
;

338 i‡–
ZG_SECURE_ENABLED
 )

340 
_NIB
.
SecurôyLevñ
 = 
SECURITY_LEVEL
;

344 
_NIB
.
SecurôyLevñ
 = 0;

347 #i‡
	`deföed
 ( 
ZIGBEEPRO
 )

348 
_NIB
.
SymLök
 = 
FALSE
;

350 
_NIB
.
SymLök
 = 
TRUE
;

353 
_NIB
.
C≠abûôyInfo
 = 
ZDO_C⁄fig_Node_Des¸ùt‹
.
C≠abûôyFœgs
;

355 
_NIB
.
Tønß˘i⁄Pîsi°í˚Time
 = 
zgIndúe˘MsgTimeout
;

357 
_NIB
.
RouãDiscovîyTime
 = 5;

358 
_NIB
.
RouãExpúyTime
 = 
zgRouãExpúyTime
;

360 
_NIB
.
nwkDevAddªss
 = 
INVALID_NODE_ADDR
;

361 
_NIB
.
nwkLogiˇlCh™√l
 = 0;

362 
_NIB
.
nwkCo‹dAddªss
 = 
INVALID_NODE_ADDR
;

363 
	`oßl_mem£t
–
_NIB
.
nwkCo‹dExtAddªss
, 0, 
Z_EXTADDR_LEN
 );

364 
_NIB
.
nwkP™Id
 = 
INVALID_NODE_ADDR
;

366 
	`oßl_˝yExtAddr
–
_NIB
.
exãndedPANID
, 
zgExãndedPANID
 );

368 
_NIB
.
nwkKeyLﬂded
 = 
FALSE
;

370 #i‡
	`deföed
 ( 
ZIGBEE_STOCHASTIC_ADDRESSING
 )

371 
_NIB
.
nwkAddrAŒoc
 = 
NWK_ADDRESSING_STOCHASTIC
;

372 
_NIB
.
nwkUniqueAddr
 = 
FALSE
;

374 
_NIB
.
nwkAddrAŒoc
 = 
NWK_ADDRESSING_DISTRIBUTED
;

375 
_NIB
.
nwkUniqueAddr
 = 
TRUE
;

378 
_NIB
.
nwkLökSètusPîiod
 = 
NWK_LINK_STATUS_PERIOD
;

379 
_NIB
.
nwkRouãrAgeLimô
 = 
NWK_ROUTE_AGE_LIMIT
;

381 
_NIB
.
nwkC⁄˚¡øt‹DiscovîyTime
 = 
zgC⁄˚¡øt‹DiscovîyTime
;

382 
_NIB
.
nwkIsC⁄˚¡øt‹
 = 0;

383 
_NIB
.
nwkC⁄˚¡øt‹Radius
 = 0x0a;

384 
_NIB
.
nwkMaxSour˚Rouã
 = 0x0c;

386 #i‡
	`deföed
 ( 
ZIGBEE_MULTICAST
 )

387 
_NIB
.
nwkU£Mu…iCa°
 = 
TRUE
;

389 
_NIB
.
nwkU£Mu…iCa°
 = 
FALSE
;

391 
_NIB
.
nwkM™agîAddr
 = 0x0000;

392 
_NIB
.
nwkUpd©eId
 = 0;

393 
_NIB
.
nwkTŸÆTønsmissi⁄s
 = 0;

395 i‡–
ZSTACK_ROUTER_BUILD
 )

397 #i‡
	`deföed
 ( 
ZIGBEE_STOCHASTIC_ADDRESSING
 )

398 
	`NLME_InôStocha°icAddªssög
();

400 
	`NLME_InôTªeAddªssög
();

403 
	}
}

417 
	$nwk_Sètus
–
uöt16
 
°©usCode
, uöt16 
°©usVÆue
 )

419 #i‡
	`deföed
 ( 
LCD_SUPPORTED
 )

420  
°©usCode
 )

422 
NWK_STATUS_COORD_ADDR
:

423 i‡–
ZSTACK_ROUTER_BUILD
 )

425 
	`HÆLcdWrôeSåög
–(*)
ZigbìCo‹dSå
, 
HAL_LCD_LINE_1
 );

426 
	`HÆLcdWrôeSåögVÆue
–(*)
Nëw‹kIDSå
, 
°©usVÆue
, 16, 
HAL_LCD_LINE_2
 );

427 
	`BuzzîC⁄åﬁ
–
BUZZER_BLIP
 );

431 
NWK_STATUS_ROUTER_ADDR
:

432 i‡–
ZSTACK_ROUTER_BUILD
 )

434 
	`HÆLcdWrôeSåögVÆue
–(*)
RouãrSå
, 
°©usVÆue
, 16, 
HAL_LCD_LINE_1
 );

438 
NWK_STATUS_ORPHAN_RSP
:

439 i‡–
ZSTACK_ROUTER_BUILD
 )

441 i‡–
°©usVÆue
 =
ZSuc˚ss
 )

442 
	`HÆLcdWrôeS¸ìn
–(*)
OΩh™R•Så
, (*)
SítSå
 );

444 
	`HÆLcdWrôeS¸ìn
–(*)
OΩh™R•Så
, (*)
FaûedSå
 );

448 
NWK_ERROR_ASSOC_RSP
:

449 i‡–
ZSTACK_ROUTER_BUILD
 )

451 
	`HÆLcdWrôeSåög
–(*)
AssocR•FaûSå
, 
HAL_LCD_LINE_1
 );

452 
	`HÆLcdWrôeVÆue
–(
uöt32
)(
°©usVÆue
), 16, 
HAL_LCD_LINE_2
 );

456 
NWK_STATUS_ED_ADDR
:

457 i‡–
ZSTACK_END_DEVICE_BUILD
 )

459 
	`HÆLcdWrôeSåögVÆue
–(*)
EndDevi˚Så
, 
°©usVÆue
, 16, 
HAL_LCD_LINE_1
 );

463 
NWK_STATUS_PARENT_ADDR
:

464 
	`HÆLcdWrôeSåögVÆue
–(*)
P¨ítSå
, 
°©usVÆue
, 16, 
HAL_LCD_LINE_2
 );

467 
NWK_STATUS_ASSOC_CNF
:

468 
	`HÆLcdWrôeS¸ìn
–(*)
AssocCnfSå
, (*)
Suc˚ssSå
 );

471 
NWK_ERROR_ASSOC_CNF_DENIED
:

472 
	`HÆLcdWrôeSåög
((*)
AssocCnfFaûSå
, 
HAL_LCD_LINE_1
 );

473 
	`HÆLcdWrôeVÆue
–(
uöt32
)(
°©usVÆue
), 16, 
HAL_LCD_LINE_2
 );

476 
NWK_ERROR_ENERGY_SCAN_FAILED
:

477 
	`HÆLcdWrôeS¸ìn
–(*)
E√rgyLevñSå
, (*)
SˇnFaûedSå
 );

481 
	}
}

	@Components/stack/nwk/nwk_globals.h

40 #i‚de‡
NWK_GLOBALS_H


41 
	#NWK_GLOBALS_H


	)

43 #ifde‡
__˝lu•lus


51 
	~"ZComDef.h
"

52 
	~"nwk_bufs.h
"

53 
	~"AssocLi°.h
"

54 
	~"BödögTabÀ.h
"

55 
	~"ZGlobÆs.h
"

67 #i‡
deföed
 ( 
ZIGBEEPRO
 )

68 #i‡!
deföed
 ( 
ZIGBEE_STOCHASTIC_ADDRESSING
 )

69 
	#ZIGBEE_STOCHASTIC_ADDRESSING


	)

70 
	#ZIGBEE_NWK_UNIQUE_ADDR_CHECK


	)

72 #i‡!
deföed
 ( 
NWK_LINK_STATUS_PERIOD
 )

73 
	#NWK_LINK_STATUS_PERIOD
 15

75 #i‡!
	`deföed
 ( 
ZIGBEE_MULTICAST
 )

	)

76 
	#ZIGBEE_MULTICAST


	)

78 #i‡!
deföed
 ( 
ZIGBEE_MANY_TO_ONE
 )

79 
	#ZIGBEE_MANY_TO_ONE


	)

81 #i‡!
deföed
 ( 
ZIGBEE_SOURCE_ROUTING
 )

82 
	#ZIGBEE_SOURCE_ROUTING


	)

84 #i‡!
deföed
 ( 
ZIGBEE_COMMISSIONING
 )

85 
	#ZIGBEE_COMMISSIONING


	)

87 #i‡!
deföed
 ( 
ZIGBEE_FREQ_AGILITY
 )

88 
	#ZIGBEE_FREQ_AGILITY


	)

90 #i‡!
deföed
 ( 
NWK_MANAGER
 )

93 #i‡!
deföed
 ( 
ZIGBEE_FRAGMENTATION
 )

94 
	#ZIGBEE_FRAGMENTATION


	)

97 
	#NWK_LINK_STATUS_PERIOD
 0

	)

100 #i‡–
RFD_RCVC_ALWAYS_ON
==
TRUE
 ) || ( 
ZG_BUILD_RTR_TYPE
 )

103 #i‡!
deföed
 ( 
ZIGBEE_PANID_CONFLICT
 )

104 
	#ZIGBEE_PANID_CONFLICT


	)

109 
	#NWK_MODE_STAR
 0

	)

110 
	#NWK_MODE_TREE
 1

	)

111 
	#NWK_MODE_MESH
 2

	)

114 
	#NETWORK_SPECIFIC
 0

	)

115 
	#HOME_CONTROLS
 1

	)

116 
	#ZIGBEEPRO_PROFILE
 2

	)

117 
	#GENERIC_STAR
 3

	)

118 
	#GENERIC_TREE
 4

	)

121 
	#MAX_CHANNELS_868MHZ
 0x00000001

	)

122 
	#MAX_CHANNELS_915MHZ
 0x000007FE

	)

123 
	#MAX_CHANNELS_24GHZ
 0x07FFF800

	)

125 #i‡
deföed
 ( 
ZIGBEEPRO
 )

126 
	#STACK_PROFILE_ID
 
ZIGBEEPRO_PROFILE


	)

128 
	#STACK_PROFILE_ID
 
HOME_CONTROLS


	)

131 #i‡–
STACK_PROFILE_ID
 =
ZIGBEEPRO_PROFILE
 )

132 
	#MAX_NODE_DEPTH
 20

	)

133 
	#NWK_MODE
 
NWK_MODE_MESH


	)

134 
	#SECURITY_MODE
 
SECURITY_COMMERCIAL


	)

135 #i‡ ( 
SECURE
 != 0 )

136 
	#USE_NWK_SECURITY
 1

137 
	#SECURITY_LEVEL
 5

	)

139 
	#USE_NWK_SECURITY
 0

140 
	#SECURITY_LEVEL
 0

	)

143 #ñi‡–
STACK_PROFILE_ID
 =
HOME_CONTROLS
 )

144 
	#MAX_NODE_DEPTH
 5

	)

145 
	#NWK_MODE
 
NWK_MODE_MESH


	)

146 
	#SECURITY_MODE
 
SECURITY_COMMERCIAL


	)

147 #i‡ ( 
SECURE
 != 0 )

148 
	#USE_NWK_SECURITY
 1

149 
	#SECURITY_LEVEL
 5

	)

151 
	#USE_NWK_SECURITY
 0

152 
	#SECURITY_LEVEL
 0

	)

155 #ñi‡–
STACK_PROFILE_ID
 =
GENERIC_STAR
 )

156 
	#MAX_NODE_DEPTH
 5

	)

157 
	#NWK_MODE
 
NWK_MODE_STAR


	)

158 
	#SECURITY_MODE
 
SECURITY_RESIDENTIAL


	)

159 #i‡ ( 
SECURE
 != 0 )

160 
	#USE_NWK_SECURITY
 1

161 
	#SECURITY_LEVEL
 5

	)

163 
	#USE_NWK_SECURITY
 0

164 
	#SECURITY_LEVEL
 0

	)

167 #ñi‡–
STACK_PROFILE_ID
 =
NETWORK_SPECIFIC
 )

169 
	#MAX_NODE_DEPTH
 5

	)

170 
	#NWK_MODE
 
NWK_MODE_MESH


	)

171 
	#SECURITY_MODE
 
SECURITY_RESIDENTIAL


	)

172 #i‡ ( 
SECURE
 != 0 )

173 
	#USE_NWK_SECURITY
 1

174 
	#SECURITY_LEVEL
 5

	)

176 
	#USE_NWK_SECURITY
 0

177 
	#SECURITY_LEVEL
 0

	)

182 
	#ZB_PROT_V1_0
 1

	)

183 
	#ZB_PROT_V1_1
 2

	)

185 
	#ZB_PROT_VERS
 
ZB_PROT_V1_1


	)

186 
	#ZIGBEE_PROT_ID
 0x00

	)

189 
	#NWK_STATUS_PING_RCVD
 0x0001

	)

190 
	#NWK_STATUS_ASSOC_CNF
 0x0002

	)

191 
	#NWK_STATUS_ED_ADDR
 0x0003

	)

192 
	#NWK_STATUS_PARENT_ADDR
 0x0004

	)

193 
	#NWK_STATUS_COORD_ADDR
 0x0005

	)

194 
	#NWK_STATUS_ROUTER_ADDR
 0x0006

	)

195 
	#NWK_STATUS_ORPHAN_RSP
 0x0007

	)

197 
	#NWK_ERROR_ASSOC_RSP
 0x1001

	)

198 
	#NWK_ERROR_ASSOC_RSP_MF
 0x1002

	)

199 
	#NWK_ERROR_ASSOC_CNF_DENIED
 0x1003

	)

200 
	#NWK_ERROR_ENERGY_SCAN_FAILED
 0x1004

	)

203 #i‡!
deföed
–
NWK_MAX_DEVICE_LIST
 )

204 
	#NWK_MAX_DEVICE_LIST
 20

207 

	)

210 
	#NWK_MAX_DEVICES
 
NWK_MAX_DEVICE_LIST
 + 1

211 

	)

212 
	#NWK_MAX_ROUTERS
 6

	)

214 #i‡–
ZG_BUILD_RTR_TYPE
 )

215 
	#MAX_NEIGHBOR_ENTRIES
 8

	)

217 
	#MAX_NEIGHBOR_ENTRIES
 4

	)

220 #i‡!
deföed
 ( 
APS_MAX_GROUPS
 )

221 
	#APS_MAX_GROUPS
 10

	)

225 #i‡
deföed
 ( 
REFLECTOR
 )

226 
	#NWK_MAX_REFLECTOR_ENTRIES
 ( 
NWK_MAX_BINDING_ENTRIES
 )

	)

228 
	#NWK_MAX_REFLECTOR_ENTRIES
 0

	)

231 #i‡!
deföed
–
MAX_BCAST
 )

232 
	#MAX_BCAST
 4

	)

237 
	#NWK_MAX_SECURE_PARTNERS
 1

	)

240 
	#NWK_MAX_ADDRESSES
 (
uöt16
Ë\

	)

241 ––
NWK_MAX_DEVICES
 ) + \

242 –
NWK_MAX_REFLECTOR_ENTRIES
 ) + \

243 –
NWK_MAX_SECURE_PARTNERS
 ) )

246 
	#NWK_PAN_COORD_ADDR
 0x0000

	)

249 
	#NWK_ADDRESSING_DISTRIBUTED
 0x00

	)

250 
	#NWK_ADDRESSING_STOCHASTIC
 0x02

	)

252 #i‡!
deföed
 ( 
NWK_LINK_STATUS_PERIOD
 )

253 
	#NWK_LINK_STATUS_PERIOD
 15

255 

	)

256 #i‡!
deföed
 ( 
NWK_ROUTE_AGE_LIMIT
 )

257 
	#NWK_ROUTE_AGE_LIMIT
 3

259 

	)

260 #i‡!
deföed
 ( 
MAX_RTG_SRC_ENTRIES
 )

261 
	#MAX_RTG_SRC_ENTRIES
 12

	)

264 #i‡–
ZG_BUILD_ENDDEVICE_TYPE
 )

265 
	#APS_MAX_ENDDEVICE_BROADCAST_ENTRIES
 5

	)

278 
CONST
 
byã
 
gNWK_MAX_DATABUFS_WAITING
;

279 
CONST
 
byã
 
gNWK_MAX_DATABUFS_SCHEDULED
;

280 
CONST
 
byã
 
gNWK_MAX_DATABUFS_CONFIRMED
;

281 
CONST
 
byã
 
gNWK_MAX_DATABUFS_TOTAL
;

283 
CONST
 
byã
 
gNWK_INDIRECT_CNT_RTG_TMR
;

284 
CONST
 
byã
 
gNWK_INDIRECT_MSG_MAX_PER
;

285 
CONST
 
byã
 
gNWK_INDIRECT_MSG_MAX_ALL
;

287 
CONST
 
byã
 
gMAX_NEIGHBOR_ENTRIES
;

289 
CONST
 
byã
 
gMAX_RTG_ENTRIES
;

290 
CONST
 
byã
 
gMAX_RTG_SRC_ENTRIES
;

291 
CONST
 
byã
 
gMAX_RREQ_ENTRIES
;

294 
CONST
 
uöt16
 
gNWK_MAX_DEVICE_LIST
;

297 
CONST
 
uöt8
 
gNWK_MAX_SLEEPING_END_DEVICES
;

299 
CONST
 
uöt8
 
gNWK_TREE_ALLOCATE_ROUTERADDR_FOR_ENDDEVICE
;

301 
uöt16
 *
Cskù
;

302 
byã
 
CskùRås
[];

303 
byã
 
CskùChld∫
[];

305 
byã
 
gMIN_TREE_LINK_COST
;

307 
CONST
 
byã
 
deÁu…Key
[];

308 
CONST
 
byã
 
deÁu…TCLökKey
[];

310 
CONST
 
byã
 
gMAX_BCAST
;

318 
CONST
 
uöt16
 
gNWK_MAX_BINDING_ENTRIES
;

319 
CONST
 
byã
 
gMAX_BINDING_CLUSTER_IDS
;

320 
CONST
 
uöt16
 
gBIND_REC_SIZE
;

322 
CONST
 
uöt8
 
gAPS_MAX_GROUPS
;

324 
uöt8
 
gAPS_MAX_ENDDEVICE_BROADCAST_ENTRIES
;

333 
nwk_globÆs_öô
( );

334 
NIB_öô
( );

336 
nwk_Sètus
–
uöt16
 
°©usCode
, uöt16 
°©usVÆue
 );

340 #ifde‡
__˝lu•lus


	@Components/stack/nwk/nwk_util.h

40 #i‚de‡
NWK_UTIL_H


41 
	#NWK_UTIL_H


	)

43 #ifde‡
__˝lu•lus


50 
	~"NLMEDE.h
"

51 
	~"nwk.h
"

66 
	#CMD_ID_RREQ
 0x01

	)

67 
	#CMD_ID_RREP
 0x02

	)

68 
	#CMD_ID_NETWORK_STATUS
 0x03

69 
	#CMD_ID_LEAVE
 0x04

	)

70 
	#CMD_ID_RREC
 0x05

	)

71 
	#CMD_ID_REJOIN_REQ
 0x06

	)

72 
	#CMD_ID_REJOIN_RSP
 0x07

	)

73 
	#CMD_ID_LINK_STATUS
 0x08

	)

74 
	#CMD_ID_NETWORK_REPORT
 0x09

	)

75 
	#CMD_ID_NETWORK_UPDATE
 0x0A

	)

77 
	#CMD_ID_PING
 7

	)

78 
	#CMD_ID_PING_RSP
 8

	)

79 
	#CMD_ID_TREE_REQ
 9

	)

80 
	#CMD_ID_TREE_RSP
 10

	)

81 
	#CMD_ID_PARENT_REQ
 11

	)

82 
	#CMD_ID_PARENT_RSP
 12

	)

85 
	#NWK_HDR_FRAME_CTRL_LSB
 0

	)

86 
	#NWK_HDR_FRAME_CTRL_MSB
 1

	)

87 
	#NWK_HDR_DST_ADDR_LSB
 2

	)

88 
	#NWK_HDR_DST_ADDR_MSB
 3

	)

89 
	#NWK_HDR_SRC_ADDR_LSB
 4

	)

90 
	#NWK_HDR_SRC_ADDR_MSB
 5

	)

91 
	#NWK_HDR_RADIUS
 6

	)

92 
	#NWK_HDR_SEQ_NUM
 7

	)

93 
	#NWK_HDR_LEN
 8

	)

96 
	#NWK_HDR_DST_EXTADDR_LEN
 
Z_EXTADDR_LEN


	)

97 
	#NWK_HDR_SRC_EXTADDR_LEN
 
Z_EXTADDR_LEN


	)

98 
	#NWK_HDR_MULTICAST_CTRL_LEN
 1

	)

99 
	#NWK_HDR_SRC_ROUTE_SUBFRAME_LEN
 0

	)

100 
	#NWK_HDR_SRCRTG_CNT_LEN
 1

	)

103 
	#NWK_FC_FRAME_TYPE
 0

	)

104 
	#NWK_FC_PROT_VERSION
 2

	)

105 
	#NWK_FC_DISC_ROUTE
 6

	)

106 
	#NWK_FC_MULTICAST
 8

	)

107 
	#NWK_FC_SECURE
 9

	)

108 
	#NWK_FC_SRC_ROUTE
 10

	)

109 
	#NWK_FC_DST_EXTADDR
 11

	)

110 
	#NWK_FC_SRC_EXTADDR
 12

	)

113 
	#NWK_FC_FRAME_TYPE_MASK
 0x03

	)

114 
	#NWK_FC_PROT_VERSION_MASK
 0x0F

	)

115 
	#NWK_FC_DISC_ROUTE_MASK
 0x03

	)

116 
	#NWK_FC_MULTICAST_MASK
 0x01

	)

117 
	#NWK_FC_SECURE_MASK
 0x01

	)

118 
	#NWK_FC_SRC_ROUTE_MASK
 0x01

	)

119 
	#NWK_FC_DST_EXTADDR_MASK
 0x01

	)

120 
	#NWK_FC_SRC_EXTADDR_MASK
 0x01

	)

123 
	#DATA_FRAME_TYPE
 0x00

	)

124 
	#CMD_FRAME_TYPE
 0x01

	)

125 
	#STUB_NWK_FRAME_TYPE
 0x03

	)

128 
	#NWK_CMD_LEAVE_OPTIONS
 1

	)

129 
	#NWK_CMD_LEAVE_SIZE
 2

	)

130 
	#NWK_CMD_LEAVE_RJ
 0x20

131 
	#NWK_CMD_LEAVE_REQ
 0x40

132 
	#NWK_CMD_LEAVE_RC
 0x80

133 

	)

134 
	#NWK_CMD_REJOIN_REQ_SIZE
 2

	)

135 
	#NWK_CMD_REJOIN_RSP_SIZE
 4

	)

138 
	#NSDU_SIZE_RREQ
 6

	)

139 
	#NSDU_SIZE_RREQ_EXT
 
NSDU_SIZE_RREQ
 + 8

	)

140 
	#NSDU_SIZE_RREP
 8

	)

141 
	#NSDU_SIZE_NETWORK_STATUS
 4

	)

142 
	#NSDU_SIZE_LINK_STATUS_DEFAULT
 2

	)

143 
	#NSDU_SIZE_NETWORK_REPORT
 10

	)

144 
	#NSDU_SIZE_NETWORK_UPDATE
 11

	)

146 
	#NWK_AUX_HDR_LEN
 14

	)

148 
	#NWKSTAT_NO_ROUTE_AVAIL
 0x00

	)

149 
	#NWKSTAT_TREE_LINK_FAILURE
 0x01

	)

150 
	#NWKSTAT_NONTREE_LINK_FAILURE
 0x02

	)

151 
	#NWKSTAT_LOW_BATTERY_LEVEL
 0x03

	)

152 
	#NWKSTAT_NO_ROUTING_CAPACITY
 0x04

	)

153 
	#NWKSTAT_NO_INDIRECT_CAPACITY
 0x05

	)

154 
	#NWKSTAT_INDIRECT_TRANS_EXPIRY
 0x06

	)

155 
	#NWKSTAT_TARGET_DEVICE_UNAVAIL
 0x07

	)

156 
	#NWKSTAT_TARGET_ADDRESS_UNALLOCATED
 0x08

	)

157 
	#NWKSTAT_PARENT_LINK_FAILURE
 0x09

	)

158 
	#NWKSTAT_VALIDATE_ROUTE
 0x0a

	)

159 
	#NWKSTAT_SOURCE_ROUTE_FAILURE
 0x0b

	)

160 
	#NWKSTAT_MANY_TO_ONE_ROUTE_FAILURE
 0x0c

	)

161 
	#NWKSTAT_ADDRESS_CONFLICT
 0x0d

	)

162 
	#NWKSTAT_VERIFY_ADDRESSES
 0x0e

	)

163 
	#NWKSTAT_PANID_UPDATE
 0x0f

	)

164 
	#NWKSTAT_NWK_ADDRESS_UPDATE
 0x10

	)

165 
	#NWKSTAT_BAD_FRAME_COUNT
 0x11

	)

166 
	#NWKSTAT_BAD_KEY_SEQ_NUMBER
 0x12

	)

169 
	#LS_OPTION_LAST_FRAME
 0x40

	)

170 
	#LS_OPTION_FIRST_FRAME
 0x20

	)

171 
	#LS_OPTION_ENTRY_COUNT_MASK
 0x1F

	)

173 
	#LS_ENTRY_COST_MASK
 0x07

	)

174 
	#LS_ENTRY_TXCOST_SHIFT
 4

	)

176 
	#LS_TABLE_SIZE
 3

	)

179 
	#NWK_MC_MODE_MASK
 0x03

	)

180 
	#NWK_MC_MODE_NONMEMBER
 0x00

	)

181 
	#NWK_MC_MODE_MEMBER
 0x01

	)

182 
	#NWK_MC_RADIUS_MASK
 0x1C

	)

183 
	#NWK_MC_RADIUS_SHIFT
 2

	)

184 
	#NWK_MC_MAXRADIUS_MASK
 0xE0

	)

185 
	#NWK_MC_MAXRADIUS_SHIFT
 5

	)

186 
	#NWK_MC_RESET_RADIUS_SHIFT
 (
NWK_MC_MAXRADIUS_SHIFT
 - 
NWK_MC_RADIUS_SHIFT
)

	)

187 
	#NWK_MC_INFINITE_RADIUS
 7

	)

190 
	#NWKREPORT_PANID_CONFLICT
 0x00

	)

193 
	#NWKREPORT_INFO_CNT
 0x1F

	)

194 
	#NWKREPORT_CMD_ID
 0xE0

	)

197 
	#NWKUPDATE_PANID_UPDATE
 0x00

	)

200 
	#NWKUPDATE_INFO_CNT
 0x1F

	)

201 
	#NWKUPDATE_CMD_ID
 0xE0

	)

208 
uöt16
 
d°Addr
;

209 
uöt8
* 
extAddr
;

210 
uöt8
 
ªjoö
;

211 
uöt8
 
ªque°
;

212 
uöt8
 
ªmoveChûdªn
;

213 
uöt8
 
˙f
;

214 } 
	tNLME_LóveCmd_t
;

218 
uöt16
 
devAddr
;

219 
uöt8
 
txCo°
;

220 
uöt8
 
rxCo°
;

221 } 
	tlökSètusLi°Iãm_t
;

226 
uöt8
 
°©us
;

227 
uöt32
 
sˇ¬edCh™√ls
;

228 
uöt8
 *
íîgyDëe˘Li°
;

229 } 
	tNLME_EDSˇnC⁄fúm_t
;

234 
uöt16
 
tŸÆTønsmissi⁄s
;

235 
uöt16
 
txFaûuªs
;

236 } 
	tNLME_Ch™I¡î„ªn˚_t
;

249 
ZSètus_t
 
NLDE_D©aIndSíd
–
NLDE_D©aReq_t
* 
ªq
 );

254 
ZSètus_t
 
NLDE_D©aReqSíd
–
NLDE_D©aReq_t
* 
ªq
 );

259 
ZSètus_t
 
NLDE_SídMsg
–
uöt8
* 
msdu
, 
uöt16
 
√xtH›Addr
,

260 
uöt8
 
msduLígth
, uöt8 
nsduH™dÀ
,

261 
uöt16
 
nsduH™dÀO±i⁄s
,

262 
nwkDB_U£rD©a_t
* 
ud
 );

267 
NLDE_P¨£Msg
–
byã
 *
buf
, byã 
bufLígth
, 
NLDE_FømeF‹m©_t
 *
ff
 );

272 
RTG_Upd©eNeighb‹E¡ry
–
uöt16
 
nodeAddªss
, uöt16 
∑nId
,

273 
byã
 
lökQuÆôy
, byã 
°©us
, byã 
£¡
);

278 
nwkNeighb‹RemoveAŒSå™ded
( );

280 
NLME_SëAssocFœgs
( );

282 
NLME_SëUpd©eID
–
uöt8
 
upd©eID
 );

286 
ZSètus_t
 
nwkBuûdD©aCnf
–
byã
 
h™dÀ
, byã 
°©us
 );

291 
ZSètus_t
 
NLME_LóveCmdSíd
–
NLME_LóveCmd_t
* 
cmd
 );

296 
NLME_LóveCmdPro˚ss
–
NLDE_FømeF‹m©_t
 *
ff
 );

301 
NLME_CmdCnf
–
NLDE_D©aCnf_t
* 
˙f
 );

306 
uöt8
 
NLME_CmdBˇ°
–uöt8 
cmdID
 );

311 
NLDE_D©aReq_t
* 
NLME_CmdD©aReqAŒoc


312 –
NLDE_D©aReqAŒoc_t
* 
dø
 );

317 * 
NLDE_FømeD©aLﬂd
–
NLDE_D©aReq_t
* 
ªq
 );

322 
NLME_RejoöR•CmdPro˚ss
–
NLDE_FømeF‹m©_t
* 
ff
 );

327 
ZSètus_t
 
NLME_RejoöR•Síd
–
ZMacAssocüãR•_t
 *
AssocR•
, 
byã
 
ªœti⁄
, 
uöt8
 
ty≥
 );

332 
NLME_RejoöReqCmdPro˚ss
–
NLDE_FømeF‹m©_t
* 
ff
 );

337 
uöt16
 
NLDE_BuûdSrcRtgFøme
–
NLDE_SrcFømeF‹m©_t
* 
sff
, uöt16 
d°Addr
 );

346 
byã
 
NLDE_GëH™dÀ
( );

348 
byã
 
NLME_GëPrŸocﬁVîsi⁄
( );

350 
uöt8
 
NLME_GëE√rgyThªshﬁd
( );

352 
NLME_SëE√rgyThªshﬁd
–
uöt8
 
vÆue
 );

354 
NLME_SëBrﬂdˇ°Fûãr
(
byã
 
ˇ∑bûôõs
);

356 
addr_fûãr_t
 
NLME_IsAddªssBrﬂdˇ°
(
uöt16
 
sh‹tAddªss
);

358 
NLME_RemoveChûd
–
uöt8
* 
extAddr
, uöt8 
dóŒoc
 );

360 
uöt8
 
nwk_mu…iˇ°
–
NLDE_FømeF‹m©_t
* 
ff
 );

362 
NLME_NwkSètusAddrC⁄Êi˘Pro˚ss
–
uöt16
 
addr
 );

364 
uöt8
 
NLME_Pro˚ssAddªssC⁄Êi˘Loˇl
–
uöt16
 
addr
 );

366 
ZSètus_t
 
NLDE_CheckF‹AddrC⁄Êi˘
–
NLDE_FømeF‹m©_t
 *
ff
 );

367 
ZSètus_t
 
NLME_SídNëw‹kSètus
–
uöt16
 
d°Addr
,

368 
uöt16
 
°©usAddr
, 
uöt8
 
°©usCode
 );

370 
uöt8
 
NLME_Pro˚ssNëw‹kSètus
–
NLDE_FømeF‹m©_t
 *
ff
 );

372 
nwkH™dÀBrokíRouã
–
nwkDB_t
 *
ªc
 );

374 
NLDE_P¨£FømeC⁄åﬁ
–
uöt16
 
fc
, 
NLDE_FømeF‹m©_t
 *
ff
 );

377 
NLME_AddªssC⁄Êi˘AssignNewStocha°ic
( );

380 (*
≤wk_AssignNewAddr
)( );

382 
ZSètus_t
 
NLME_SídNëw‹kRï‹t
–
uöt16
 
d°Addr
, 
uöt8
 
ªp‹tTy≥
, uöt8 *
EPID
,

383 
uöt8
 
ªp‹tInfoC¡
, 
uöt16
 *
∑nIDs
 );

384 
NLME_Pro˚ssNëw‹kRï‹t
–
NLDE_FømeF‹m©_t
 *
ff
 );

385 
ZSètus_t
 
NLME_SídNëw‹kUpd©e
–
uöt16
 
d°Addr
, 
uöt8
 
upd©eTy≥
, uöt8 *
EPID
,

386 
uöt8
 
upd©eId
, 
uöt16
 
√wPID
 );

387 
NLME_Pro˚ssNëw‹kUpd©e
–
NLDE_FømeF‹m©_t
 *
ff
 );

388 
nwkAddP™Id
–
uöt16
 
∑nID
 );

389 
nwkPro˚ssP™IdSˇn
( );

390 
nwkCh™geP™ID
( );

391 
nwkFªeP™IdLi°
( );

393 
uöt16
 
nwkTønsmissi⁄Faûuªs
–
uöt8
 
ª£t
 );

395 
uöt8
 
nwk_ExtPANIDVÆid
–
byã
 *
∑nID
 );

401 
NLME_InôLökSètus
( );

402 
NLME_Upd©eLökSètus
( );

403 
NLME_SëLökSètusTimî
( );

404 
ZSètus_t
 
nwkSídLökSètus
( );

405 
ZSètus_t
 
NLME_SídLökSètus
–
uöt8
 
√ighb‹s
, uöt8 
›ti⁄s
,

406 
lökSètusLi°Iãm_t
 *
pLi°
 );

407 
NLME_Pro˚ssLökSètus
–
NLDE_FømeF‹m©_t
 *
ff
 );

409 (*
pNLME_SëLökSètusTimî
)( );

410 (*
pNLME_Upd©eLökSètus
)( );

411 (*
pNLME_Pro˚ssLökSètus
)–
NLDE_FømeF‹m©_t
 *
ff
 );

412 
uöt8
 
nwkC⁄vîtLqiToCo°
–uöt8 
lqi
 );

416 
	#NWKNEIGHBOR_NOT_FOUND
 0x00

417 
	#NWKNEIGHBOR_FOUND_SHORT
 0x0A

419 
	#NWKNEIGHBOR_FOUND_IEEE
 0xA0

421 
	#NWKNEIGHBOR_FOUND
 0xAA

422 

	)

426 
uöt16
 
	g√ighb‹Addªss
;

427 
uöt8
 
	g√ighb‹ExtAddr
[
Z_EXTADDR_LEN
];

428 
uöt16
 
	g∑nId
;

429 
uöt8
 
	gage
;

430 
lökInfo_t
 
	glökInfo
;

431 } 
	t√ighb‹E¡ry_t
;

433 
√ighb‹E¡ry_t
 
√ighb‹TabÀ
[];

435 
√ighb‹E¡ry_t
 *
nwkNeighb‹Föd
–
uöt16
 
nwkAddr
, uöt16 
∑nID
 );

436 
√ighb‹E¡ry_t
 *
nwkNeighb‹FödEm±ySlŸ
( );

437 
uöt16
 
nwkNeighb‹Cou¡
( );

438 
nwkNeighb‹Remove
–
uöt16
 
Neighb‹Addªss
, uöt16 
P™Id
 );

439 
√ighb‹E¡ry_t
 *
nwkNeighb‹GëWôhIndex
–
uöt16
 
Index
 );

440 
nwkNeighb‹InôTabÀ
( );

441 
nwkNeighb‹CÀ¨E¡ry
–
√ighb‹E¡ry_t
 *
íåy
 );

442 
nwkNeighb‹KìpPANID
–
uöt16
 
P™ID
 );

443 
lökInfo_t
 *
nwkNeighb‹GëLökInfo
–
uöt16
 
Neighb‹Addªss
, uöt16 
∑nId
 );

444 
byã
 
nwkNeighb‹CheckAddr
–
uöt16
 
nwkAddr
, 
uöt8
 *
extAddr
 );

445 
nwkNeighb‹Upd©eAge
( );

446 
uöt16
 
nwkNeighb‹FödR™dom
–uöt16 
skùAddr
, uöt16 
skùAddr2
 );

447 
nwkNeighb‹Upd©eNwkAddr
–
uöt16
 
nwkAddr
, 
uöt8
 *
õìAddr
 );

448 
nwkNeighb‹Add
–
uöt16
 
nwkAddr
, uöt16 
∑nId
, 
uöt8
 
lökQuÆôy
 );

449 
nwkNeighb‹Ch™gePANID
–
uöt16
 
ﬁdP™ID
, uöt16 
√wP™ID
 );

455 (*
pNwkFªqAgûôySˇnCfg
)–
ZMacSˇnCnf_t
 *
∑øm
 );

456 (*
pNwkFªqAgûôyIncTŸÆTx
)( );

457 (*
pNwkFªqAgûôyIncEº‹C¡
)–
lökInfo_t
 *
lökInfo
 );

459 
NwkFªqAgûôyInô
( );

463 #ifde‡
__˝lu•lus


	@Components/stack/nwk/reflecttrack.h

40 #i‚de‡
REFLECTTRACK_H


41 
	#REFLECTTRACK_H


	)

43 #ifde‡
__˝lu•lus


51 
	~"ZComdef.h
"

52 
	~"oßl.h
"

65 
	#REFTRACK_MAX_ENTRIES
 5

	)

73 
	#REFTRACK_MAX_SIMUL
 3

	)

79 
	#REFTRACK_MAX_INDIRECTS
 1

	)

82 
	#REFDEST_WAITING
 0x00

	)

83 
	#REFDEST_SENT
 0x01

	)

84 
	#REFDEST_APS_ACK_EXPECTED
 0x02

	)

85 
	#REFDEST_DELIVERED
 0x04

	)

86 
	#REFDEST_FAILED
 0x08

	)

87 
	#REFDEST_INDIRECT
 0x80

	)

95 
uöt8
 
d°AddrMode
;

96 
uöt16
 
d°Addr
;

97 
uöt8
 
d°EP
;

98 
uöt8
 
h™dÀ
;

99 
uöt8
 
›ti⁄s
;

100 } 
	tReÊe˘De°Rec_t
;

104 *
√xt
;

105 
uöt8
 
ID
;

106 
uöt8
 
§cEP
;

107 
uöt16
 
˛u°îID
;

108 
uöt8
 
c⁄fúmed
;

109 
uöt16
 
å™sID
;

110 
uöt8
* 
asdu
;

111 
uöt8
 
numde°s
;

112 
ReÊe˘De°Rec_t
 
de°s
[];

115 } 
	tReÊe˘Tøckög_t
;

130 
ªÊe˘Tøck_SëMaxE¡rõs
–
uöt8
 
√wE¡rõs
 );

139 
ªÊe˘Tøckög_SëMaxSimu…™eous
–
uöt8
 
√wE¡rõs
 );

144 
uöt8
 
ªÊe˘Tøckög_GëMaxSimu…™eous
( );

150 
uöt8
 
ªÊe˘Tøckög_GëMaxSimu…™eousAdju°ed
–
ReÊe˘Tøckög_t
 *
íåy
 );

156 
ªÊe˘Tøckög_SëMaxIndúe˘
–
uöt8
 
√wE¡rõs
 );

162 
uöt8
 
ªÊe˘Tøckög_GëMaxIndúe˘
( );

168 
uöt8
 
ªÊe˘Tøckög_GëMaxIndúe˘Adju°ed
–
ReÊe˘Tøckög_t
 *
íåy
 );

175 
ReÊe˘Tøckög_t
 *
ªÊe˘Tøck_GëNewE¡ry
–
uöt8
 
numDe°s
,

176 
uöt8
 
asduLí
 );

181 
uöt8
 
ªÊe˘Tøck_NumE¡rõs
( );

186 
ªÊe˘Tøck_RemoveE¡ry
–
ReÊe˘Tøckög_t
 *
íåy
 );

191 
ªÊe˘Tøck_RemoveE¡ryNŸify
–
ReÊe˘Tøckög_t
 *
íåy
);

196 
ªÊe˘Tøck_AddToEnd
–
ReÊe˘Tøckög_t
 *
íåy
 );

203 
uöt8
 
ªÊe˘Tøck_AddNewE¡ry
–
ReÊe˘Tøckög_t
 *
√wE¡ry
 );

209 
ReÊe˘Tøckög_t
 *
ªÊe˘Tøck_FödE¡ry
–
byã
 
ªfID
 );

215 
ReÊe˘Tøckög_t
 *
ªÊe˘Tøck_FödH™dÀ
–
byã
 
h™dÀ
 );

220 
ªÊe˘Tøck_Upd©eO±i⁄
–
ReÊe˘Tøckög_t
 *
ªf
, 
byã
 
h™dÀ
, byã 
›ti⁄
 );

226 
ReÊe˘Tøckög_t
 *
ªÊe˘Tøck_FödE¡rySètus
–
uöt8
 
ídpoöt
, 
uöt16
 
˛u°îID
 );

231 
uöt8
 
ªÊe˘Tøckög_GëNumDñivîed
–
ReÊe˘Tøckög_t
 *
íåy
 );

236 
uöt8
 
ªÊe˘Tøckög_GëNumFaûed
–
ReÊe˘Tøckög_t
 *
íåy
 );

241 
ªÊe˘Tøckög_FûlInFaûed
–
ReÊe˘Tøckög_t
 *
íåy
, 
uöt16
 *
li°
 );

245 #ifde‡
__˝lu•lus


	@Components/stack/nwk/rtg.h

40 #i‚de‡
RTG_H


41 
	#RTG_H


	)

43 #ifde‡
__˝lu•lus


52 
	~"ZComDef.h
"

53 
	~"nwk_utû.h
"

54 
	~"nwk_bufs.h
"

55 
	~"ZGlobÆs.h
"

65 
	#RTG_TIMER_INTERVAL
 1000

	)

66 
	#MAX_SRC_RELAYCNT
 12

67 

	)

69 
	#MTO_ROUTE
 0x01

70 
	#NO_ROUTE_CACHE
 0x02

71 
	#RTG_RECORD
 0x04

72 
	#MTO_ROUTE_RC
 0x08

73 
	#MTO_ROUTE_NRC
 0x10

74 
	#DEST_IEEE_ADDR
 0x20

75 
	#MULTICAST_ROUTE
 0x40

76 
	#RREQ_OPTIONS_MASK
 0x78

77 

	)

78 
	#RTG_MTO_DEST_ADDRESS
 
NWK_BROADCAST_SHORTADDR_DEVZCZR


79 

	)

80 
	#RREP_ORI_IEEE
 0x10

	)

81 
	#RREP_RES_IEEE
 0x20

	)

83 
	#RTG_END_DEVICE_ADDR_TYPE
 0

	)

84 
	#RTG_ROUTER_ADDR_TYPE
 1

	)

92 
RTG_SUCCESS
,

93 
RTG_FAIL
,

94 
RTG_TBL_FULL
,

95 
RTG_HIGHER_COST
,

96 
RTG_NO_ENTRY
,

97 
RTG_INVALID_PATH
,

98 
RTG_INVALID_PARAM
,

99 
RTG_SRC_TBL_FULL


100 } 
	tRTG_Sètus_t
;

103 
	#RT_INIT
 0

	)

104 
	#RT_ACTIVE
 1

	)

105 
	#RT_DISC
 2

	)

106 
	#RT_LINK_FAIL
 3

	)

107 
	#RT_REPAIR
 4

	)

114 
uöt16
 
d°Addªss
;

115 
uöt16
 
√xtH›Addªss
;

116 
byã
 
expúyTime
;

117 
byã
 
°©us
;

118 
uöt8
 
›ti⁄s
;

119 } 
	tπgE¡ry_t
;

124 
byã
 
ºeqId
;

125 
uöt16
 
§cAddªss
;

126 
uöt16
 
¥eviousNode
;

127 
byã
 
f‹w¨dCo°
;

128 
byã
 
ªsiduÆCo°
;

129 
byã
 
expúyTime
;

130 } 
	tπDiscE¡ry_t
;

135 
uöt16
 
§cAddr
;

136 
uöt8
 
bdt
;

137 
uöt8
 
∑t
;

138 
uöt8
 
mbr
;

139 
uöt8
 
h™dÀ
;

141 
uöt8
 
ackC¡
;

142 
uöt8
 
id
;

143 } 
	tbˇ°E¡ry_t
;

148 
uöt8
 
expúyTime
;

149 
uöt8
 
ªœyCou¡
;

150 
uöt16
 
d°Addªss
;

151 
uöt16
* 
ªœyLi°
;

152 } 
	tπgSrcE¡ry_t
;

157 
πgE¡ry_t
 
πgTabÀ
[];

158 
πDiscE¡ry_t
 
πDiscTabÀ
[];

160 
πgSrcE¡ry_t
 
πgSrcTabÀ
[];

166 
RTG_Inô
( );

168 
πgE¡ry_t
 *
RTG_GëRtgE¡ry
–
uöt16
 
D°Addªss
, 
uöt8
 
›ti⁄s
);

170 
RTG_Sètus_t
 
RTG_RemoveRtgE¡ry
–
uöt16
 
D°Addªss
, 
uöt8
 
›ti⁄s
 );

172 
uöt16
 
RTG_GëNextH›
–uöt16 
D°Addªss
, 
uöt8
 
›ti⁄s
 );

174 
byã
 
RTG_Pro˚ssRªq
(

175 
NLDE_FømeF‹m©_t
 *
ff
, 
uöt16
 
macSrcAddªss
, uöt16 *
√xtH›Addr
 );

177 
RTG_Pro˚ssRªp
–
NLDE_FømeF‹m©_t
 *
ff
 );

179 
RTG_Pro˚ssRªc
–
NLDE_FømeF‹m©_t
 *
ff
 );

181 
uöt8
 
RTG_Pro˚ssREº
–
NLDE_FømeF‹m©_t
 *
ff
 );

182 
RTG_TimîEvít
( );

184 
uöt16
 
RTG_AŒocNewAddªss
–
byã
 
devi˚Ty≥
 );

186 
RTG_DeAŒocTªeAddªss
–
uöt16
 
sh‹tAddr
 );

188 
RTG_DeAŒocStocha°icAddªss
–
uöt16
 
sh‹tAddr
 );

190 
RTG_Bˇ°TimîH™dÀr
( );

192 
byã
 
RTG_Bˇ°Chk
–
NLDE_FømeF‹m©_t
 *
ff
, 
uöt16
 
macSrcAddr
 );

194 
byã
 
RTG_Bˇ°Add
(
NLDE_FømeF‹m©_t
*
ff
, 
uöt16
 
macSrcAddr
, byã 
h™dÀ
);

196 
RTG_Bˇ°Dñ
–
byã
 
h™dÀ
 );

198 
RTG_D©aReq
–
oßl_evít_hdr_t
 *
öMsg
 );

200 
byã
 
RTG_PoﬁAdd
–
NLDE_FømeF‹m©_t
 *
ff
 );

202 
uöt16
 
RTG_GëTªeRouã
–uöt16 
d°Addªss
 );

204 
uöt16
 
RTG_SrcGëNextH›
–
uöt8
 
πgIndex
, uöt16* 
πgLi°
);

206 
uöt8
 
RTG_VÆid©eSrcRtg
(uöt8 
ªœyC¡
, uöt8 
ªœyIdx
, 
uöt16
* 
ªœyLi°
 );

208 
uöt8
 
RTG_RtgRec‹dInôüti⁄
–
uöt16
 
D°Addªss
, uöt16 
SrcAddªss
, uöt8 
›ti⁄s
);

210 
RTG_GëRtgSrcE¡ry
–
uöt16
 
d°Addr
, 
uöt8
* 
pRñayC¡
, uöt16** 
µRñayLi°
);

211 
RTG_Sètus_t
 
RTG_CheckRtSètus
–
uöt16
 
D°Addªss
, 
byã
 
RtSètus
, 
uöt8
 
›ti⁄s
 );

213 
uöt8
 
RTG_Pro˚ssRtDiscBôs
–uöt8 
πDiscFœg
, 
uöt16
 
d°Addªss
, uöt8* 
pSrcRtgSë
, uöt8 
›ti⁄s
 );

215 
uöt8
 
RTG_RouãMaöè√n˚
–
uöt16
 
D°Addªss
, uöt16 
SrcAddªss
, uöt8 
›ti⁄s
 );

217 
RTG_FûlCSkùTabÀ
–
byã
 *
chûdªn
, byã *
rouãrs
,

218 
byã
 
dïth
, 
uöt16
 *
pTbl
 );

221 
uöt8
 
RTG_IsAn˚°‹
–
uöt16
 
devi˚Addªss
 );

223 
RTG_SídBrokíRouã
–
uöt16
 
nwkSrcAddr
, uöt16 
nwkD°Addr
,

224 
uöt8
 
§cRouãSë
, 
uöt16
 
macD°Addr
 );

226 
uöt16
 
RTG_CÆcTªeAddªss
–
byã
 
devi˚Ty≥
 );

228 
uöt16
 
RTG_GëStocha°ic
–
byã
 
devi˚Ty≥
 );

230 
uöt16
 
RTG_GëNextTªeH›
–uöt16 
d°Addªss
 );

232 
uöt16
 
RTG_ChûdGëNextH›
–uöt16 
D°Addr
 );

234 
uöt8
 
RTG_GëAn˚°‹s
–
uöt16
 
d°Addr
, uöt16 
™˚°‹Addr
, uöt16 *
pRtgD°
 );

236 
RTG_√xtH›IsBad
–
uöt16
 
√xtH›
 );

238 
ZSètus_t
 
RTG_SídREº
–
uöt16
 
SrcAddªss
, uöt16 
D°Addªss
, 
byã
 
Eº‹Code
 );

242 
uöt16
 (*
pRTG_FöishGëNextH›
)–uöt16 
D°Addªss
 );

243 
uöt16
 (*
pRTG_GëNextTªeH›
)–uöt16 
d°Addªss
 );

244 
uöt16
 (*
pRTG_CÆcAddªss
)–
byã
 
devi˚Ty≥
 );

245 
uöt16
 (*
pRTG_GëTªeRouã
)(uöt16 
d°Addªss
 );

246 (*
pRTG_DeAŒocAddªss
)–
uöt16
 
sh‹tAddr
 );

247 
uöt8
 (*
pRTG_GëAn˚°‹s
)–
uöt16
 
d°Addr
, uöt16 
™˚°‹Addr
, uöt16 *
pRtgD°
 );

249 
RTG_öôRtgTabÀ
( );

255 #ifde‡
__˝lu•lus


	@Components/stack/nwk/stub_aps.c

43 
	~"oßl.h
"

44 
	~"mac_•ec.h
"

45 
	~"nwk_utû.h
"

46 
	~"AF.h
"

48 
	~"°ub_≠s.h
"

59 
	#STUB_NWK_HDR_LEN
 2

	)

62 
	#STUB_APS_HDR_FRAME_CTRL
 
STUB_NWK_HDR_LEN


	)

65 
	#CHANNEL_CHANGE_EVT
 0x0001

	)

67 
	#CHANNEL_CHANGE_RETRY_TIMEOUT
 100

	)

74 
zAddrTy≥_t
 
	maddr
;

75 
uöt16
 
	m∑nId
;

76 } 
	t∑n_t
;

82 
uöt8
 
	gStubAPS_TaskID
 = 0xFF;

98 
uöt8
 
	g√wCh™√l
;

99 
uöt8
 
	gch™√lCh™geInProgªss
 = 
FALSE
;

102 
uöt8
 
	g≠pTaskID
 = 0xFF;

103 
uöt8
 
	g≠pEndPoöt
 = 0;

110 
StubNWK_P¨£Msg
–
uöt8
 *
buf
, uöt8 
bufLígth
, 
NLDE_FømeF‹m©_t
 *
¢ff
 );

111 
StubAPS_P¨£Msg
–
NLDE_FømeF‹m©_t
 *
¢ff
, 
≠s_FømeF‹m©_t
 *
ßff
 );

112 
StubNWK_BuûdMsg
–
uöt8
 *
nwkHdr
 );

113 
StubAPS_BuûdMsg
–
uöt8
 *
≠sHdr
, uöt8 
‰mCål
, 
uöt16
 
groupID
, 
APSDE_D©aReq_t
 *
ªq
 );

114 
ZSètus_t
 
StubAPS_BuûdFømeC⁄åﬁ
–
uöt8
 *
‰mCål
, 
zAddrTy≥_t
 *
d°Addr
,

115 
uöt16
 *
groupID
, 
APSDE_D©aReq_t
 *
ªq
 );

116 
ZSètus_t
 
StubAPS_SëNewCh™√l
–
uöt8
 
ch™√l
 );

117 
StubAPS_NŸifyAµ
–
uöt8
 
°©us
 );

119 
uöt8
 
StubAPS_ZMacCÆlback
–uöt8 *
msgPå
 );

130 
	$StubAPS_Inô
–
uöt8
 
èsk_id
 )

132 
StubAPS_TaskID
 = 
èsk_id
;

135 
pZMac_AµCÆlback
 = 
StubAPS_ZMacCÆlback
;

137 
	}
}

150 
UINT16
 
	$StubAPS_Pro˚ssEvít
–
uöt8
 
èsk_id
, 
uöt16
 
evíts
 )

152 ()
èsk_id
;

154 i‡–
evíts
 & 
SYS_EVENT_MSG
 )

156 
oßl_evít_hdr_t
 *
msg_±r
;

158  (
msg_±r
 = (
oßl_evít_hdr_t
 *)
	`oßl_msg_ª˚ive
–
StubAPS_TaskID
 )Ë!
NULL
 )

160 i‡–
msg_±r
->
evít
 =
MAC_MCPS_DATA_CNF
 )

162 
	`INTERP_D©aC⁄fúm
–(
ZMacD©aCnf_t
 *)
msg_±r
 );

164 i‡–
msg_±r
->
evít
 =
MAC_MCPS_DATA_IND
 )

166 
	`INTERP_D©aIndiˇti⁄
–(
macM˝sD©aInd_t
 *)
msg_±r
 );

169 
	`oßl_msg_dóŒoˇã
–(
uöt8
 *)
msg_±r
 );

173  ( 
evíts
 ^ 
SYS_EVENT_MSG
 );

176 i‡–
evíts
 & 
CHANNEL_CHANGE_EVT
 )

179 
ZSètus_t
 
°©us
 = 
	`StubAPS_SëNewCh™√l
–
√wCh™√l
 );

180 i‡–
°©us
 !
ZSuc˚ss
 )

183 
uöt8
 
rxOnIdÀ
 = 
åue
;

184 
	`ZMacSëReq
–
ZMacRxOnIdÀ
, &
rxOnIdÀ
 );

187 
	`nwk_£tSèãIdÀ
–
FALSE
 );

189 
ch™√lCh™geInProgªss
 = 
FALSE
;

193 
	`StubAPS_NŸifyAµ
–
°©us
 );

195  ( 
evíts
 ^ 
CHANNEL_CHANGE_EVT
 );

202 
	}
}

216 
	$StubNWK_P¨£Msg
–
uöt8
 *
buf
, uöt8 
bufLígth
, 
NLDE_FømeF‹m©_t
 *
¢ff
 )

218 
uöt16
 
fc
;

220 
	`oßl_mem£t
–
¢ff
, 0, (
NLDE_FømeF‹m©_t
) );

222 
¢ff
->
bufLígth
 = bufLength;

225 
fc
 = 
	`BUILD_UINT16
–
buf
[
NWK_HDR_FRAME_CTRL_LSB
], buf[
NWK_HDR_FRAME_CTRL_MSB
] );

228 
	`NLDE_P¨£FømeC⁄åﬁ
–
fc
, 
¢ff
 );

230 
¢ff
->
hdrLí
 = 
STUB_NWK_HDR_LEN
;

233 
¢ff
->
nsdu
 = 
buf
 + snff->
hdrLí
;

234 
¢ff
->
nsduLígth
 = snff->
bufLígth
 - snff->
hdrLí
;

236 
	}
}

248 
	$StubAPS_P¨£Msg
–
NLDE_FømeF‹m©_t
 *
¢ff
, 
≠s_FømeF‹m©_t
 *
ßff
 )

250 
uöt8
 
fcb
;

251 
uöt8
 *
asdu
;

253 
	`oßl_mem£t
–
ßff
, 0, (
≠s_FømeF‹m©_t
) );

255 
ßff
->
asduLígth
 = 
¢ff
->
nsduLígth
;

256 
asdu
 = 
¢ff
->
nsdu
;

257 
ßff
->
macDe°Addr
 = 
¢ff
->
macD°Addr
;

260 
ßff
->
FrmCål
 = *
asdu
++;

262 
fcb
 = 
ßff
->
FrmCål
 & 
APS_FRAME_TYPE_MASK
;

263 i‡–
fcb
 =
STUB_APS_FRAME
 )

265 
fcb
 = 
ßff
->
FrmCål
 & 
APS_DELIVERYMODE_MASK
;

266 i‡–
fcb
 =
APS_FC_DM_BROADCAST
 )

267 
ßff
->
wasBrﬂdˇ°
 = 
åue
;

269 
ßff
->
wasBrﬂdˇ°
 = 
Ál£
;

271 i‡–
fcb
 =
APS_FC_DM_GROUP
 )

273 
ßff
->
GroupID
 = 
	`BUILD_UINT16
–
asdu
[0],ásdu[1] );

274 
asdu
 +–
uöt16
 );

278 
ßff
->
Clu°îID
 = 
	`BUILD_UINT16
–
asdu
[0],ásdu[1] );

279 
asdu
 +–
uöt16
 );

282 
ßff
->
ProfûeID
 = 
	`BUILD_UINT16
–
asdu
[0],ásdu[1] );

283 
asdu
 += 2;

286 
ßff
->
asdu
 =ásdu;

287 
ßff
->
asduLígth
 -(
uöt8
Ë(
asdu
 - 
¢ff
->
nsdu
);

288 
ßff
->
≠sHdrLí
 = 
¢ff
->
nsduLígth
 - saff->
asduLígth
;

290 
	}
}

305 
ZSètus_t
 
	$StubAPS_BuûdFømeC⁄åﬁ
–
uöt8
 *
‰mCål
, 
zAddrTy≥_t
 *
d°Addr
,

306 
uöt16
 *
groupID
, 
APSDE_D©aReq_t
 *
ªq
 )

309 i‡–
ªq
->
txO±i⁄s
 & 
APS_TX_OPTIONS_SECURITY_ENABLE
 )

310  ( 
ZApsNŸSuµ‹ãd
 );

313 i‡–
ªq
->
txO±i⁄s
 & 
APS_TX_OPTIONS_ACK
 )

314  ( 
ZApsNŸSuµ‹ãd
 );

317 i‡–
ªq
->
txO±i⁄s
 & 
APS_TX_OPTIONS_PERMIT_FRAGMENT
 )

318  ( 
ZApsNŸSuµ‹ãd
 );

321 i‡–
ªq
->
d°Addr
.
addrMode
 =
AddrNŸPª£¡
 )

322  ( 
ZApsNŸSuµ‹ãd
 );

325 *
‰mCål
 = 
STUB_APS_FRAME
;

328 
d°Addr
->
addrMode
 = 
ªq
->dstAddr.addrMode;

331 i‡–
ªq
->
d°Addr
.
addrMode
 =
AddrBrﬂdˇ°
 )

333 *
‰mCål
 |
APS_FC_DM_BROADCAST
;

336 
d°Addr
->
addrMode
 = 
Addr16Bô
;

337 
d°Addr
->
addr
.
sh‹tAddr
 = 
ªq
->dstAddr.addr.shortAddr;

339 i‡–
ªq
->
d°Addr
.
addrMode
 =
Addr16Bô
 )

341 *
‰mCål
 |
APS_FC_DM_UNICAST
;

342 
d°Addr
->
addr
.
sh‹tAddr
 = 
ªq
->dstAddr.addr.shortAddr;

344 i‡–
ªq
->
d°Addr
.
addrMode
 =
Addr64Bô
 )

346 *
‰mCål
 |
APS_FC_DM_UNICAST
;

347 
	`oßl_˝yExtAddr
–
d°Addr
->
addr
.
extAddr
, 
ªq
->dstAddr.addr.extAddr );

349 i‡–
ªq
->
d°Addr
.
addrMode
 =
AddrGroup
 )

351 *
‰mCål
 |
APS_FC_DM_GROUP
;

354 
d°Addr
->
addrMode
 = 
Addr16Bô
;

357 
d°Addr
->
addr
.
sh‹tAddr
 = 
NWK_BROADCAST_SHORTADDR_DEVALL
;

360 *
groupID
 = 
ªq
->
d°Addr
.
addr
.
sh‹tAddr
;

363  ( 
ZSuc˚ss
 );

365 
	}
}

376 
	$StubNWK_BuûdMsg
–
uöt8
 *
nwkHdr
 )

378 
uöt16
 
‰mCål
 = 0;

379 
uöt8
 
¥ŸoVî
 = 
	`NLME_GëPrŸocﬁVîsi⁄
();

382 
‰mCål
 |(
STUB_NWK_FRAME_TYPE
 << 
NWK_FC_FRAME_TYPE
);

385 
‰mCål
 |(
¥ŸoVî
 << 
NWK_FC_PROT_VERSION
);

388 *
nwkHdr
++ = 
	`LO_UINT16
–
‰mCål
 );

389 *
nwkHdr
++ = 
	`HI_UINT16
–
‰mCål
 );

391 
	}
}

405 
	$StubAPS_BuûdMsg
–
uöt8
 *
≠sHdr
, uöt8 
‰mCål
, 
uöt16
 
groupID
, 
APSDE_D©aReq_t
 *
ªq
 )

408 *
≠sHdr
++ = 
‰mCål
;

411 i‡––
‰mCål
 & 
APS_DELIVERYMODE_MASK
 ) =
APS_FC_DM_GROUP
 )

413 *
≠sHdr
++ = 
	`LO_UINT16
–
groupID
 );

414 *
≠sHdr
++ = 
	`HI_UINT16
–
groupID
 );

418 *
≠sHdr
++ = 
	`LO_UINT16
–
ªq
->
˛u°îID
 );

419 *
≠sHdr
++ = 
	`HI_UINT16
–
ªq
->
˛u°îID
 );

422 *
≠sHdr
++ = 
	`LO_UINT16
–
ªq
->
¥ofûeID
 );

423 *
≠sHdr
++ = 
	`HI_UINT16
–
ªq
->
¥ofûeID
 );

426 
	`oßl_mem˝y
 ( 
≠sHdr
, 
ªq
->
asdu
,Ñeq->
asduLí
 );

428 
	}
}

439 
ZSètus_t
 
	$StubAPS_SëNewCh™√l
–
uöt8
 
ch™√l
 )

441 
uöt8
 
rxOnIdÀ
;

444 i‡––
	`nwkDB_Cou¡Ty≥s
–
NWK_DATABUF_SENT
 ) =0 ) && 
	`ZMacSèãIdÀ
() )

447 
	`ZMacSëReq
–
ZMacCh™√l
, &
ch™√l
 );

450 
rxOnIdÀ
 = 
åue
;

451 
	`ZMacSëReq
–
ZMacRxOnIdÀ
, &
rxOnIdÀ
 );

453 
ch™√lCh™geInProgªss
 = 
FALSE
;

455  ( 
ZSuc˚ss
 );

458  ( 
ZFaûuª
 );

460 
	}
}

472 
	$StubAPS_NŸifyAµ
–
uöt8
 
°©us
 )

474 
oßl_evít_hdr_t
 *
msgPå
;

477 
msgPå
 = (
oßl_evít_hdr_t
 *)
	`oßl_msg_Æloˇã
( (osal_event_hdr_t) );

478 i‡–
msgPå
 )

480 
msgPå
->
evít
 = 
SAPS_CHANNEL_CHANGE
;

481 
msgPå
->
°©us
 = status;

483 
	`oßl_msg_£nd
–
≠pTaskID
, (
uöt8
 *)
msgPå
 );

486 
	}
}

502 
ZSètus_t
 
	$StubAPS_SëI¡îP™Ch™√l
–
uöt8
 
ch™√l
 )

504 
uöt8
 
cuºCh™√l
;

505 
uöt8
 
rxOnIdÀ
;

507 i‡–
ch™√lCh™geInProgªss
 )

508  ( 
ZFaûuª
 );

510 
	`ZMacGëReq
–
ZMacCh™√l
, &
cuºCh™√l
 );

511 i‡–
cuºCh™√l
 =
ch™√l
 )

514  ( 
ZSuc˚ss
 );

518 
ch™√lCh™geInProgªss
 = 
TRUE
;

521 
	`nwk_£tSèãIdÀ
–
TRUE
 );

524 
rxOnIdÀ
 = 
Ál£
;

525 
	`ZMacSëReq
–
ZMacRxOnIdÀ
, &
rxOnIdÀ
 );

528 i‡–
	`StubAPS_SëNewCh™√l
–
ch™√l
 ) =
ZSuc˚ss
 )

529  ( 
ZSuc˚ss
 );

532 
√wCh™√l
 = 
ch™√l
;

535 
	`oßl_°¨t_timîEx
–
StubAPS_TaskID
, 
CHANNEL_CHANGE_EVT
, 
CHANNEL_CHANGE_RETRY_TIMEOUT
 );

537  ( 
ZApsNŸAŒowed
 );

539 
	}
}

550 
ZSètus_t
 
	$StubAPS_SëI¡øP™Ch™√l
( )

552 
uöt8
 
cuºCh™√l
;

553 
uöt8
 
rxOnIdÀ
;

555 i‡–
ch™√lCh™geInProgªss
 )

556  ( 
ZFaûuª
 );

558 
	`ZMacGëReq
–
ZMacCh™√l
, &
cuºCh™√l
 );

559 i‡–
cuºCh™√l
 =
_NIB
.
nwkLogiˇlCh™√l
 )

560  ( 
ZSuc˚ss
 );

562 
ch™√lCh™geInProgªss
 = 
TRUE
;

565 
rxOnIdÀ
 = 
Ál£
;

566 
	`ZMacSëReq
–
ZMacRxOnIdÀ
, &
rxOnIdÀ
 );

569 
	`ZMacSëReq
–
ZMacCh™√l
, &(
_NIB
.
nwkLogiˇlCh™√l
) );

572 
rxOnIdÀ
 = 
åue
;

573 
	`ZMacSëReq
–
ZMacRxOnIdÀ
, &
rxOnIdÀ
 );

576 
	`nwk_£tSèãIdÀ
–
FALSE
 );

578 
ch™√lCh™geInProgªss
 = 
FALSE
;

580  ( 
ZSuc˚ss
 );

582 
	}
}

594 
uöt8
 
	$StubAPS_I¡îP™
–
uöt16
 
∑nId
, 
uöt8
 
ídPoöt
 )

596 
uöt8
 
cuºCh™√l
;

598 i‡–
∑nId
 != 0 )

600 
	`ZMacGëReq
–
ZMacCh™√l
, &
cuºCh™√l
 );

601 i‡–
cuºCh™√l
 !
_NIB
.
nwkLogiˇlCh™√l
 )

604  ( 
TRUE
 );

608 i‡–
∑nId
 !
_NIB
.
nwkP™Id
 )

611  ( 
TRUE
 );

615 i‡–
ídPoöt
 =
STUBAPS_INTER_PAN_EP
 )

618  ( 
TRUE
 );

622  ( 
FALSE
 );

624 
	}
}

639 
	$StubAPS_Regi°îAµ
–
ídPoötDesc_t
 *
ïDesc
 )

641 
≠pTaskID
 = *
ïDesc
->
èsk_id
;

642 
≠pEndPoöt
 = 
ïDesc
->
ídPoöt
;

644 
	}
}

655 
uöt8
 
	$StubAPS_ZMacCÆlback
–
uöt8
 *
msgPå
 )

657 
uöt16
 
nwk_fc
;

658 
uöt8
 
≠s_fc
;

659 
uöt8
 
‰ameTy≥
;

660 
uöt8
 *
buf
 = 
NULL
;

661 
uöt8
 
evít
 = ((
oßl_evít_hdr_t
 *)
msgPå
)->event;

663 i‡–
evít
 =
MAC_MCPS_DATA_IND
 )

665 
buf
 = ((
macM˝sD©aInd_t
 *)
msgPå
)->
msdu
.
p
;

667 i‡–
evít
 =
MAC_MCPS_DATA_CNF
 )

669 
buf
 = ((
macM˝sD©aCnf_t
 *)
msgPå
)->
pD©aReq
->
msdu
.
p
;

672 i‡–
buf
 )

675 
nwk_fc
 = 
	`BUILD_UINT16
–
buf
[
NWK_HDR_FRAME_CTRL_LSB
], buf[
NWK_HDR_FRAME_CTRL_MSB
] );

678 
‰ameTy≥
 = (
uöt8
)((
nwk_fc
 >> 
NWK_FC_FRAME_TYPE
Ë& 
NWK_FC_FRAME_TYPE_MASK
);

681 i‡–
‰ameTy≥
 !
STUB_NWK_FRAME_TYPE
 )

684  ( 
FALSE
 );

688 
≠s_fc
 = 
buf
[
STUB_APS_HDR_FRAME_CTRL
];

691 
‰ameTy≥
 = 
≠s_fc
 & 
APS_FRAME_TYPE_MASK
;

694 i‡–
‰ameTy≥
 !
STUB_APS_FRAME
 )

697  ( 
FALSE
 );

701 
	`oßl_msg_£nd
–
StubAPS_TaskID
, (
uöt8
 *)
msgPå
 );

703  ( 
TRUE
 );

707  ( 
FALSE
 );

709 
	}
}

726 
ZSètus_t
 
	$INTERP_D©aReq
–
APSDE_D©aReq_t
 *
ªq
 )

728 
uöt8
 
≠sFrmCål
;

729 
uöt16
 
groupID
 = 0;

730 
uöt8
 *
buf
;

731 
uöt8
 
hdrLí
;

732 
ZMacD©aReq_t
 
d©aReq
;

733 
ZSètus_t
 
°©us
;

735 i‡–
ch™√lCh™geInProgªss
 || !
	`StubAPS_I¡îP™
–
ªq
->
d°P™Id
,Ñeq->
d°EP
 ) )

736  ( 
ZFaûuª
 );

738 
	`oßl_mem£t
–&
d©aReq
, 0, –
ZMacD©aReq_t
 ) );

741 
°©us
 = 
	`StubAPS_BuûdFømeC⁄åﬁ
–&
≠sFrmCål
, &(
d©aReq
.
D°Addr
), &
groupID
, 
ªq
 );

742 i‡–
°©us
 !
ZSuc˚ss
 )

743  ( 
°©us
 );

746 
hdrLí
 = 
APS_FRAME_CTRL_FIELD_LEN
;

749 i‡––
≠sFrmCål
 & 
APS_DELIVERYMODE_MASK
 ) =
APS_FC_DM_GROUP
 )

750 
hdrLí
 +
APS_GROUP_ID_FIELD_LEN
;

753 
hdrLí
 +
APS_CLUSTERID_FIELD_LEN
;

756 
hdrLí
 +
APS_PROFILEID_FIELD_LEN
;

759 
hdrLí
 +
STUB_NWK_HDR_LEN
;

762 
d©aReq
.
msduLígth
 = 
hdrLí
 + 
ªq
->
asduLí
;

765 
buf
 = 
	`oßl_mem_Æloc
–
d©aReq
.
msduLígth
 );

766 i‡–
buf
 !
NULL
 )

768 
d©aReq
.
msdu
 = 
buf
;

771 
	`StubAPS_BuûdMsg
–&
buf
[
STUB_APS_HDR_FRAME_CTRL
], 
≠sFrmCål
, 
groupID
, 
ªq
 );

774 
	`StubNWK_BuûdMsg
–
buf
 );

777 
d©aReq
.
D°PANId
 = 
ªq
->
d°P™Id
;

778 
d©aReq
.
SrcAddrMode
 = 
Addr64Bô
;

779 
d©aReq
.
H™dÀ
 = 
ªq
->
å™sID
;

781 i‡––
≠sFrmCål
 & 
APS_DELIVERYMODE_MASK
 ) =
APS_FC_DM_UNICAST
 )

782 
d©aReq
.
TxO±i⁄s
 = 
NWK_TXOPTIONS_ACK
;

784 
d©aReq
.
TxO±i⁄s
 = 0;

787 
°©us
 = 
	`ZMacD©aReq
–&
d©aReq
 );

790 
	`oßl_mem_‰ì
–
buf
 );

795 
°©us
 = 
ZMemEº‹
;

798  ( 
°©us
 );

800 
	}
}

812 
uöt8
 
	$INTERP_D©aReqMTU
( )

814 
uöt8
 
mtu
;

815 
uöt8
 
hdrLí
;

818 
hdrLí
 = 
APS_FRAME_CTRL_FIELD_LEN
 +

819 
APS_GROUP_ID_FIELD_LEN
 +

820 
APS_CLUSTERID_FIELD_LEN
 +

821 
APS_PROFILEID_FIELD_LEN
;

823 
mtu
 = 
MAC_A_MAX_FRAME_SIZE
 - 
STUB_NWK_HDR_LEN
 - 
hdrLí
;

825  ( 
mtu
 );

827 
	}
}

838 
	$INTERP_D©aC⁄fúm
–
ZMacD©aCnf_t
 *
d©aCnf
 )

840 
	`afD©aC⁄fúm
–
≠pEndPoöt
, 
d©aCnf
->
msduH™dÀ
, d©aCnf->
hdr
.
Sètus
 );

842 
	}
}

854 
	$INTERP_D©aIndiˇti⁄
–
macM˝sD©aInd_t
 *
d©aInd
 )

856 
NLDE_FømeF‹m©_t
 
¢ff
;

857 
≠s_FømeF‹m©_t
 
ßff
;

858 
zAddrTy≥_t
 
§cAddr
;

859 
NLDE_Sig«l_t
 
sig
;

862 
	`StubNWK_P¨£Msg
–
d©aInd
->
msdu
.
p
, d©aInd->msdu.
Àn
, &
¢ff
 );

865 
¢ff
.
macD°Addr
 = 
d©aInd
->
mac
.
d°Addr
.
addr
.
sh‹tAddr
;

868 
	`oßl_c›yAddªss
–&
§cAddr
, (
zAddrTy≥_t
 *)&(
d©aInd
->
mac
.srcAddr) );

871 i‡–
¢ff
.
‰ameTy≥
 !
STUB_NWK_FRAME_TYPE
 )

875 i‡–
¢ff
.
¥ŸocﬁVîsi⁄
 !
	`NLME_GëPrŸocﬁVîsi⁄
() )

879 i‡––
¢ff
.
discovîRouã
 !0 ) || ( snff.
mu…iˇ°
 != 0 ) ||

880 –
¢ff
.
£cuª
 !0 ) || ( snff.
§cRouãSë
 != 0 ) ||

881 –
¢ff
.
d°ExtAddrSë
 !0 ) || ( snff.
§cExtAddrSë
 != 0 ) )

887 
	`StubAPS_P¨£Msg
–&
¢ff
, &
ßff
 );

890 i‡––
ßff
.
FrmCål
 & 
APS_FRAME_TYPE_MASK
 ) !
STUB_APS_FRAME
 )

894 i‡––
ßff
.
FrmCål
 & 
APS_DELIVERYMODE_MASK
 ) =
APS_FC_DM_INDIRECT
 )

898 i‡–
ßff
.
FrmCål
 & 
APS_FC_SECURITY
 )

902 i‡–
ßff
.
FrmCål
 & 
APS_FC_EXTENDED
 )

906 
ßff
.
D°EndPoöt
 = 
≠pEndPoöt
;

907 
ßff
.
SrcEndPoöt
 = 
STUBAPS_INTER_PAN_EP
;

910 
sig
.
LökQuÆôy
 = 
d©aInd
->
mac
.
mpduLökQuÆôy
;

911 
sig
.
c‹ªœti⁄
 = 
d©aInd
->
mac
.correlation;

912 
sig
.
rssi
 = 
d©aInd
->
mac
.rssi;

914 
	`APSDE_D©aIndiˇti⁄
–&
ßff
, &
§cAddr
, 
d©aInd
->
mac
.
§cP™Id
,

915 &
sig
, 
FALSE
, 
d©aInd
->
mac
.
time°amp
 );

917 
	}
}

	@Components/stack/nwk/stub_aps.h

40 #i‚de‡
SAPS_H


41 
	#SAPS_H


	)

43 #ifde‡
__˝lu•lus


61 
	#STUBAPS_INTER_PAN_EP
 0xFE

	)

70 
uöt8
 
StubAPS_TaskID
;

79 
StubAPS_Inô
–
uöt8
 
èsk_id
 );

84 
UINT16
 
StubAPS_Pro˚ssEvít
–
uöt8
 
èsk_id
, 
uöt16
 
evíts
 );

89 
ZSètus_t
 
StubAPS_SëI¡îP™Ch™√l
–
uöt8
 
ch™√l
 );

94 
ZSètus_t
 
StubAPS_SëI¡øP™Ch™√l
( );

99 
uöt8
 
StubAPS_I¡îP™
–
uöt16
 
∑nId
, uöt8 
ídPoöt
 );

104 
StubAPS_Regi°îAµ
–
ídPoötDesc_t
 *
ïDesc
 );

114 
ZSètus_t
 
INTERP_D©aReq
–
APSDE_D©aReq_t
 *
ªq
 );

120 
uöt8
 
INTERP_D©aReqMTU
( );

125 
INTERP_D©aC⁄fúm
–
ZMacD©aCnf_t
 *
d©aCnf
 );

131 
INTERP_D©aIndiˇti⁄
–
macM˝sD©aInd_t
 *
d©aInd
 );

136 #ifde‡
__˝lu•lus


	@Components/stack/sapi/sapi.c

44 
	~"ZComDef.h
"

45 
	~"hÆ_drivîs.h
"

46 
	~"OSAL.h
"

47 
	~"OSAL_Tasks.h
"

50 #i‡
deföed
 ( 
MT_TASK
 )

51 
	~"MT.h
"

52 
	~"MT_TASK.h
"

55 
	~"nwk.h
"

56 
	~"APS.h
"

57 
	~"ZDAµ.h
"

59 
	~"oßl_nv.h
"

60 
	~"NLMEDE.h
"

61 
	~"AF.h
"

62 
	~"OnBﬂrd.h
"

63 
	~"nwk_utû.h
"

64 
	~"ZDProfûe.h
"

65 
	~"ZDObje˘.h
"

66 
	~"hÆ_Àd.h
"

67 
	~"hÆ_key.h
"

68 
	~"ßpi.h
"

69 
	~"MT_SAPI.h
"

71 
uöt8
 
zgSèπDñay
;

72 
uöt8
 
zgS≠iEndpoöt
;

78 
	#ZB_USER_MSG
 0xE0

	)

79 
	#SAPICB_DATA_CNF
 0xE0

	)

80 
	#SAPICB_BIND_CNF
 0xE1

	)

81 
	#SAPICB_START_CNF
 0xE2

	)

92 c⁄° 
pTaskEvítH™dÀrFn
 
	gèsksAº
[] = {

93 
macEvítLo›
,

94 
nwk_evít_lo›
,

95 
HÆ_Pro˚ssEvít
,

96 #i‡
deföed
–
MT_TASK
 )

97 
MT_Pro˚ssEvít
,

99 
APS_evít_lo›
,

100 
ZDAµ_evít_lo›
,

102 
SAPI_Pro˚ssEvít


105 c⁄° 
uöt8
 
	gèsksC¡
 = –
èsksAº
 ) / (ÅasksArr[0] );

106 
uöt16
 *
	gèsksEvíts
;

108 
ídPoötDesc_t
 
	gßpi_ïDesc
;

109 
uöt8
 
	gßpi_TaskID
;

110 
uöt16
 
	gßpi_bödInProgªss
;

116 
SAPI_Pro˚ssZDOMsgs
–
zdoIncomögMsg_t
 *
öMsg
 );

117 
SAPI_SídCback
–
uöt8
 
evít
, uöt8 
°©us
, 
uöt16
 
d©a
 );

119 
SAPI_SèπC⁄fúm
–
uöt8
 
°©us
 );

120 
SAPI_SídD©aC⁄fúm
–
uöt8
 
h™dÀ
, uöt8 
°©us
 );

121 
SAPI_BödC⁄fúm
–
uöt16
 
comm™dId
, 
uöt8
 
°©us
 );

122 
SAPI_FödDevi˚C⁄fúm
–
uöt8
 
£¨chTy≥
,

123 
uöt8
 *
£¨chKey
, uöt8 *
ªsu…
 );

124 
SAPI_Re˚iveD©aIndiˇti⁄
–
uöt16
 
sour˚
,

125 
uöt16
 
comm™d
, uöt16 
Àn
, 
uöt8
 *
pD©a
 );

126 
SAPI_AŒowBödC⁄fúm
–
uöt16
 
sour˚
 );

140 
	$zb_Sy°emRe£t
 ( )

142 
	`Sy°emRe£t
();

143 
	}
}

158 
	$zb_SèπReque°
()

160 
uöt8
 
logiˇlTy≥
;

164 i‡–
zgSèπDñay
 < 
NWK_START_DELAY
 )

165 
zgSèπDñay
 = 0;

167 
zgSèπDñay
 -
NWK_START_DELAY
;

170 
	`zb_RódC⁄figuøti⁄
–
ZCD_NV_LOGICAL_TYPE
, (
uöt8
), &
logiˇlTy≥
 );

171 i‡––
logiˇlTy≥
 > 
ZG_DEVICETYPE_ENDDEVICE
 ) ||

172 #i‡
	`deföed
–
RTR_NWK
 )

173 #i‡
	`deföed
–
ZDO_COORDINATOR
 )

175 –
logiˇlTy≥
 =
ZG_DEVICETYPE_ENDDEVICE
 ) ||

178 –
logiˇlTy≥
 !
ZG_DEVICETYPE_ROUTER
 ) ||

181 #i‡
	`deföed
–
ZDO_COORDINATOR
 )

186 –
logiˇlTy≥
 !
ZG_DEVICETYPE_ENDDEVICE
 ) ||

192 
	`SAPI_SídCback
–
SAPICB_START_CNF
, 
ZInvÆidP¨amëî
, 0 );

196 
	`ZDOInôDevi˚
(
zgSèπDñay
);

200 
	}
}

217 
	$zb_BödDevi˚
 ( 
uöt8
 
¸óã
, 
uöt16
 
comm™dId
, uöt8 *
pDe°ö©i⁄
 )

219 
zAddrTy≥_t
 
de°ö©i⁄
;

220 
uöt8
 
ªt
 = 
ZB_ALREADY_IN_PROGRESS
;

222 i‡–
¸óã
 )

224 i‡(
ßpi_bödInProgªss
 == 0xffff)

226 i‡–
pDe°ö©i⁄
 )

228 
de°ö©i⁄
.
addrMode
 = 
Addr64Bô
;

229 
	`oßl_˝yExtAddr
–
de°ö©i⁄
.
addr
.
extAddr
, 
pDe°ö©i⁄
 );

231 
ªt
 = 
	`APSME_BödReque°
–
ßpi_ïDesc
.
ídPoöt
, 
comm™dId
,

232 &
de°ö©i⁄
, 
ßpi_ïDesc
.
ídPoöt
 );

234 i‡–
ªt
 =
ZSuc˚ss
 )

237 
	`ZDP_NwkAddrReq
(
pDe°ö©i⁄
, 
ZDP_ADDR_REQTYPE_SINGLE
, 0, 0 );

238 
	`oßl_°¨t_timîEx
–
ZDAµTaskID
, 
ZDO_NWK_UPDATE_NV
, 250 );

243 
ªt
 = 
ZB_INVALID_PARAMETER
;

244 
de°ö©i⁄
.
addrMode
 = 
Addr16Bô
;

245 
de°ö©i⁄
.
addr
.
sh‹tAddr
 = 
NWK_BROADCAST_SHORTADDR
;

246 i‡–
	`ZDO_AnyClu°îM©ches
–1, &
comm™dId
, 
ßpi_ïDesc
.
sim∂eDesc
->
AµNumOutClu°îs
,

247 
ßpi_ïDesc
.
sim∂eDesc
->
pAµOutClu°îLi°
 ) )

250 
ªt
 = 
	`ZDP_M©chDescReq
–&
de°ö©i⁄
, 
NWK_BROADCAST_SHORTADDR
,

251 
ßpi_ïDesc
.
sim∂eDesc
->
AµProfId
, 1, &
comm™dId
, 0, (
cId_t
 *)
NULL
, 0 );

253 i‡–
	`ZDO_AnyClu°îM©ches
–1, &
comm™dId
, 
ßpi_ïDesc
.
sim∂eDesc
->
AµNumInClu°îs
,

254 
ßpi_ïDesc
.
sim∂eDesc
->
pAµInClu°îLi°
 ) )

256 
ªt
 = 
	`ZDP_M©chDescReq
–&
de°ö©i⁄
, 
NWK_BROADCAST_SHORTADDR
,

257 
ßpi_ïDesc
.
sim∂eDesc
->
AµProfId
, 0, (
cId_t
 *)
NULL
, 1, &
comm™dId
, 0 );

260 i‡–
ªt
 =
ZB_SUCCESS
 )

263 #i‡–
ZG_BUILD_RTR_TYPE
 )

264 
	`oßl_°¨t_timîEx
(
ßpi_TaskID
, 
ZB_BIND_TIMER
, 
AIB_MaxBödögTime
);

267 
	`oßl_°¨t_timîEx
(
ßpi_TaskID
, 
ZB_BIND_TIMER
, 
zgApsDeÁu…MaxBödögTime
);

269 
ßpi_bödInProgªss
 = 
comm™dId
;

275 
	`SAPI_SídCback
–
SAPICB_BIND_CNF
, 
ªt
, 
comm™dId
 );

280 
BödögE¡ry_t
 *
pBöd
;

283  
pBöd
 = 
	`bödFöd
–
ßpi_ïDesc
.
sim∂eDesc
->
EndPoöt
, 
comm™dId
, 0 ) )

285 
	`bödRemoveE¡ry
(
pBöd
);

287 
	`oßl_°¨t_timîEx
–
ZDAµTaskID
, 
ZDO_NWK_UPDATE_NV
, 250 );

290 
	}
}

316 
uöt8
 
	$zb_PîmôJoöögReque°
 ( 
uöt16
 
de°ö©i⁄
, 
uöt8
 
timeout
 )

318 #i‡
	`deföed
–
ZDO_MGMT_PERMIT_JOIN_REQUEST
 )

319 
zAddrTy≥_t
 
d°Addr
;

321 
d°Addr
.
addrMode
 = 
Addr16Bô
;

322 
d°Addr
.
addr
.
sh‹tAddr
 = 
de°ö©i⁄
;

324 –(
uöt8
Ë
	`ZDP_MgmtPîmôJoöReq
–&
d°Addr
, 
timeout
, 0, 0 ) );

326 ()
de°ö©i⁄
;

327 ()
timeout
;

328  
ZUnsuµ‹ãdMode
;

330 
	}
}

347 
	$zb_AŒowBöd
 ( 
uöt8
 
timeout
 )

350 
	`oßl_°›_timîEx
(
ßpi_TaskID
, 
ZB_ALLOW_BIND_TIMER
);

352 i‡–
timeout
 == 0 )

354 
	`afSëM©ch
(
ßpi_ïDesc
.
sim∂eDesc
->
EndPoöt
, 
FALSE
);

358 
	`afSëM©ch
(
ßpi_ïDesc
.
sim∂eDesc
->
EndPoöt
, 
TRUE
);

359 i‡–
timeout
 != 0xFF )

361 i‡–
timeout
 > 64 )

363 
timeout
 = 64;

365 
	`oßl_°¨t_timîEx
(
ßpi_TaskID
, 
ZB_ALLOW_BIND_TIMER
, 
timeout
*1000);

369 
	}
}

396 
	$zb_SídD©aReque°
 ( 
uöt16
 
de°ö©i⁄
, uöt16 
comm™dId
, 
uöt8
 
Àn
,

397 
uöt8
 *
pD©a
, uöt8 
h™dÀ
, uöt8 
txO±i⁄s
, uöt8 
ødius
 )

399 
afSètus_t
 
°©us
;

400 
afAddrTy≥_t
 
d°Addr
;

402 
txO±i⁄s
 |
AF_DISCV_ROUTE
;

405 i‡(
de°ö©i⁄
 =
ZB_BINDING_ADDR
)

408 
d°Addr
.
addrMode
 = 
afAddrNŸPª£¡
;

413 
d°Addr
.
addr
.
sh‹tAddr
 = 
de°ö©i⁄
;

414 
d°Addr
.
addrMode
 = 
afAddr16Bô
;

416 i‡–
ADDR_NOT_BCAST
 !
	`NLME_IsAddªssBrﬂdˇ°
–
de°ö©i⁄
 ) )

418 
txO±i⁄s
 &~
AF_ACK_REQUEST
;

423 
d°Addr
.
ídPoöt
 = 
ßpi_ïDesc
.
sim∂eDesc
->
EndPoöt
;

426 
°©us
 = 
	`AF_D©aReque°
(&
d°Addr
, &
ßpi_ïDesc
, 
comm™dId
, 
Àn
,

427 
pD©a
, &
h™dÀ
, 
txO±i⁄s
, 
ødius
);

429 i‡(
°©us
 !
afSètus_SUCCESS
)

431 
	`SAPI_SídCback
–
SAPICB_DATA_CNF
, 
°©us
, 
h™dÀ
 );

433 
	}
}

447 
uöt8
 
	$zb_RódC⁄figuøti⁄
–
uöt8
 
c⁄figId
, uöt8 
Àn
, *
pVÆue
 )

449 
uöt8
 
size
;

451 
size
 = (
uöt8
)
	`oßl_nv_ôem_Àn
–
c⁄figId
 );

452 i‡–
size
 > 
Àn
 )

454  
ZFaûuª
;

458 –
	`oßl_nv_ªad
(
c⁄figId
, 0, 
size
, 
pVÆue
) );

460 
	}
}

474 
uöt8
 
	$zb_WrôeC⁄figuøti⁄
–
uöt8
 
c⁄figId
, uöt8 
Àn
, *
pVÆue
 )

476 –
	`oßl_nv_wrôe
(
c⁄figId
, 0, 
Àn
, 
pVÆue
) );

477 
	}
}

489 
	$zb_GëDevi˚Info
 ( 
uöt8
 
∑øm
, *
pVÆue
 )

491 
∑øm
)

493 
ZB_INFO_DEV_STATE
:

494 
	`oßl_mem˝y
(
pVÆue
, &
devSèã
, (
uöt8
));

496 
ZB_INFO_IEEE_ADDR
:

497 
	`oßl_mem˝y
(
pVÆue
, &
aExãndedAddªss
, 
Z_EXTADDR_LEN
);

499 
ZB_INFO_SHORT_ADDR
:

500 
	`oßl_mem˝y
(
pVÆue
, &
_NIB
.
nwkDevAddªss
, (
uöt16
));

502 
ZB_INFO_PARENT_SHORT_ADDR
:

503 
	`oßl_mem˝y
(
pVÆue
, &
_NIB
.
nwkCo‹dAddªss
, (
uöt16
));

505 
ZB_INFO_PARENT_IEEE_ADDR
:

506 
	`oßl_mem˝y
(
pVÆue
, &
_NIB
.
nwkCo‹dExtAddªss
, 
Z_EXTADDR_LEN
);

508 
ZB_INFO_CHANNEL
:

509 
	`oßl_mem˝y
(
pVÆue
, &
_NIB
.
nwkLogiˇlCh™√l
, (
uöt8
));

511 
ZB_INFO_PAN_ID
:

512 
	`oßl_mem˝y
(
pVÆue
, &
_NIB
.
nwkP™Id
, (
uöt16
));

514 
ZB_INFO_EXT_PAN_ID
:

515 
	`oßl_mem˝y
(
pVÆue
, &
_NIB
.
exãndedPANID
, 
Z_EXTADDR_LEN
);

518 
	}
}

535 
	$zb_FödDevi˚Reque°
–
uöt8
 
£¨chTy≥
, *
£¨chKey
 )

537 i‡(
£¨chTy≥
 =
ZB_IEEE_SEARCH
)

539 
	`ZDP_NwkAddrReq
((
uöt8
*Ë
£¨chKey
, 
ZDP_ADDR_REQTYPE_SINGLE
, 0, 0 );

541 
	}
}

554 
	$SAPI_SèπC⁄fúm
–
uöt8
 
°©us
 )

556 #i‡
	`deföed
 ( 
MT_SAPI_CB_FUNC
 )

559 i‡–
	`SAPICB_CHECK
–
SPI_CB_SAPI_START_CNF
 ) )

561 
	`zb_MTCÆlbackSèπC⁄fúm
–
°©us
 );

566 
	`zb_SèπC⁄fúm
–
°©us
 );

568 
	}
}

581 
	$SAPI_SídD©aC⁄fúm
–
uöt8
 
h™dÀ
, uöt8 
°©us
 )

583 #i‡
	`deföed
 ( 
MT_SAPI_CB_FUNC
 )

586 i‡–
	`SAPICB_CHECK
–
SPI_CB_SAPI_SEND_DATA_CNF
 ) )

588 
	`zb_MTCÆlbackSídD©aC⁄fúm
–
h™dÀ
, 
°©us
 );

593 
	`zb_SídD©aC⁄fúm
–
h™dÀ
, 
°©us
 );

595 
	}
}

611 
	$SAPI_BödC⁄fúm
–
uöt16
 
comm™dId
, 
uöt8
 
°©us
 )

613 #i‡
	`deföed
 ( 
MT_SAPI_CB_FUNC
 )

616 i‡–
	`SAPICB_CHECK
–
SPI_CB_SAPI_BIND_CNF
 ) )

618 
	`zb_MTCÆlbackBödC⁄fúm
–
comm™dId
, 
°©us
 );

623 
	`zb_BödC⁄fúm
–
comm™dId
, 
°©us
 );

625 
	}
}

635 
	$SAPI_AŒowBödC⁄fúm
–
uöt16
 
sour˚
 )

637 #i‡
	`deföed
 ( 
MT_SAPI_CB_FUNC
 )

640 i‡–
	`SAPICB_CHECK
–
SPI_CB_SAPI_ALLOW_BIND_CNF
 ) )

642 
	`zb_MTCÆlbackAŒowBödC⁄fúm
–
sour˚
 );

647 
	`zb_AŒowBödC⁄fúm
–
sour˚
 );

649 
	}
}

662 
	$SAPI_FödDevi˚C⁄fúm
–
uöt8
 
£¨chTy≥
, uöt8 *
£¨chKey
, uöt8 *
ªsu…
 )

664 #i‡
	`deföed
 ( 
MT_SAPI_CB_FUNC
 )

667 i‡–
	`SAPICB_CHECK
–
SPI_CB_SAPI_FIND_DEV_CNF
 ) )

669 
	`zb_MTCÆlbackFödDevi˚C⁄fúm
–
£¨chTy≥
, 
£¨chKey
, 
ªsu…
 );

674 
	`zb_FödDevi˚C⁄fúm
–
£¨chTy≥
, 
£¨chKey
, 
ªsu…
 );

676 
	}
}

691 
	$SAPI_Re˚iveD©aIndiˇti⁄
–
uöt16
 
sour˚
, uöt16 
comm™d
, uöt16 
Àn
, 
uöt8
 *
pD©a
 )

693 #i‡
	`deföed
 ( 
MT_SAPI_CB_FUNC
 )

696 i‡–
	`SAPICB_CHECK
–
SPI_CB_SAPI_RCV_DATA_IND
 ) )

698 
	`zb_MTCÆlbackRe˚iveD©aIndiˇti⁄
–
sour˚
, 
comm™d
, 
Àn
, 
pD©a
 );

703 
	`zb_Re˚iveD©aIndiˇti⁄
–
sour˚
, 
comm™d
, 
Àn
, 
pD©a
 );

705 
	}
}

719 
UINT16
 
	$SAPI_Pro˚ssEvít
–
byã
 
èsk_id
, 
UINT16
 
evíts
 )

721 
oßl_evít_hdr_t
 *
pMsg
;

722 
afIncomögMSGPackë_t
 *
pMSGpkt
;

723 
afD©aC⁄fúm_t
 *
pD©aC⁄fúm
;

725 i‡–
evíts
 & 
SYS_EVENT_MSG
 )

727 
pMsg
 = (
oßl_evít_hdr_t
 *Ë
	`oßl_msg_ª˚ive
–
èsk_id
 );

728  
pMsg
 )

730  
pMsg
->
evít
 )

732 
ZDO_CB_MSG
:

733 
	`SAPI_Pro˚ssZDOMsgs
–(
zdoIncomögMsg_t
 *)
pMsg
 );

736 
AF_DATA_CONFIRM_CMD
:

740 
pD©aC⁄fúm
 = (
afD©aC⁄fúm_t
 *Ë
pMsg
;

741 
	`SAPI_SídD©aC⁄fúm
–
pD©aC⁄fúm
->
å™sID
,ÖD©aC⁄fúm->
hdr
.
°©us
 );

744 
AF_INCOMING_MSG_CMD
:

745 
pMSGpkt
 = (
afIncomögMSGPackë_t
 *Ë
pMsg
;

746 
	`SAPI_Re˚iveD©aIndiˇti⁄
–
pMSGpkt
->
§cAddr
.
addr
.
sh‹tAddr
,ÖMSGpkt->
˛u°îId
,

747 
pMSGpkt
->
cmd
.
D©aLígth
,ÖMSGpkt->cmd.
D©a
);

750 
ZDO_STATE_CHANGE
:

752 i‡(
pMsg
->
°©us
 =
DEV_END_DEVICE
 ||

753 
pMsg
->
°©us
 =
DEV_ROUTER
 ||

754 
pMsg
->
°©us
 =
DEV_ZB_COORD
 )

756 
	`SAPI_SèπC⁄fúm
–
ZB_SUCCESS
 );

758 i‡(
pMsg
->
°©us
 =
DEV_HOLD
 ||

759 
pMsg
->
°©us
 =
DEV_INIT
)

761 
	`SAPI_SèπC⁄fúm
–
ZB_INIT
 );

765 
ZDO_MATCH_DESC_RSP_SENT
:

766 
	`SAPI_AŒowBödC⁄fúm
–((
ZDO_M©chDescR•Sít_t
 *)
pMsg
)->
nwkAddr
 );

769 
KEY_CHANGE
:

770 
	`zb_H™dÀKeys
–((
keyCh™ge_t
 *)
pMsg
)->
°©e
, ((keyCh™ge_à*ÌMsg)->
keys
 );

773 
SAPICB_DATA_CNF
:

774 
	`SAPI_SídD©aC⁄fúm
–(
uöt8
)((
ßpi_CbackEvít_t
 *)
pMsg
)->
d©a
,

775 ((
ßpi_CbackEvít_t
 *)
pMsg
)->
hdr
.
°©us
 );

778 
SAPICB_BIND_CNF
:

779 
	`SAPI_BödC⁄fúm
–((
ßpi_CbackEvít_t
 *)
pMsg
)->
d©a
,

780 ((
ßpi_CbackEvít_t
 *)
pMsg
)->
hdr
.
°©us
 );

783 
SAPICB_START_CNF
:

784 
	`SAPI_SèπC⁄fúm
–((
ßpi_CbackEvít_t
 *)
pMsg
)->
hdr
.
°©us
 );

789 i‡–
pMsg
->
evít
 >
ZB_USER_MSG
 )

797 
	`oßl_msg_dóŒoˇã
–(
uöt8
 *Ë
pMsg
 );

800 
pMsg
 = (
oßl_evít_hdr_t
 *Ë
	`oßl_msg_ª˚ive
–
èsk_id
 );

804  (
evíts
 ^ 
SYS_EVENT_MSG
);

807 i‡–
evíts
 & 
ZB_ALLOW_BIND_TIMER
 )

809 
	`afSëM©ch
(
ßpi_ïDesc
.
sim∂eDesc
->
EndPoöt
, 
FALSE
);

810  (
evíts
 ^ 
ZB_ALLOW_BIND_TIMER
);

813 i‡–
evíts
 & 
ZB_BIND_TIMER
 )

816 
	`SAPI_BödC⁄fúm
–
ßpi_bödInProgªss
, 
ZB_TIMEOUT
 );

817 
ßpi_bödInProgªss
 = 0xffff;

819  (
evíts
 ^ 
ZB_BIND_TIMER
);

822 i‡–
evíts
 & 
ZB_ENTRY_EVENT
 )

824 
uöt8
 
°¨tO±i⁄s
;

827 
	`zb_H™dÀOßlEvít
–
ZB_ENTRY_EVENT
 );

830 
	`HÆLedSë
 (
HAL_LED_4
, 
HAL_LED_MODE_OFF
);

832 
	`zb_RódC⁄figuøti⁄
–
ZCD_NV_STARTUP_OPTION
, (
uöt8
), &
°¨tO±i⁄s
 );

833 i‡–
°¨tO±i⁄s
 & 
ZCD_STARTOPT_AUTO_START
 )

835 
	`zb_SèπReque°
();

840 
	`HÆLedBlök
(
HAL_LED_2
, 0, 50, 500);

843  (
evíts
 ^ 
ZB_ENTRY_EVENT
 );

847 i‡–
evíts
 & ( 
ZB_USER_EVENTS
 ) )

850 
	`zb_H™dÀOßlEvít
–
evíts
 );

857 
	}
}

868 
	$SAPI_Pro˚ssZDOMsgs
–
zdoIncomögMsg_t
 *
öMsg
 )

870  
öMsg
->
˛u°îID
 )

872 
NWK_addr_r•
:

875 
ZDO_NwkIEEEAddrRe•_t
 *
pNwkAddrR•
 = 
	`ZDO_P¨£AddrR•
–
öMsg
 );

876 
	`SAPI_FödDevi˚C⁄fúm
–
ZB_IEEE_SEARCH
, (
uöt8
*)&
pNwkAddrR•
->
nwkAddr
,ÖNwkAddrR•->
extAddr
 );

880 
M©ch_Desc_r•
:

882 
zAddrTy≥_t
 
d°Addr
;

883 
ZDO_A˘iveEndpoötR•_t
 *
pR•
 = 
	`ZDO_P¨£EPLi°R•
–
öMsg
 );

885 i‡–
ßpi_bödInProgªss
 != 0xffff )

888 
d°Addr
.
addrMode
 = 
Addr16Bô
;

889 
d°Addr
.
addr
.
sh‹tAddr
 = 
pR•
->
nwkAddr
;

891 i‡–
	`APSME_BödReque°
–
ßpi_ïDesc
.
sim∂eDesc
->
EndPoöt
,

892 
ßpi_bödInProgªss
, &
d°Addr
, 
pR•
->
ïLi°
[0] ) =
ZSuc˚ss
 )

894 
	`oßl_°›_timîEx
(
ßpi_TaskID
, 
ZB_BIND_TIMER
);

895 
	`oßl_°¨t_timîEx
–
ZDAµTaskID
, 
ZDO_NWK_UPDATE_NV
, 250 );

898 
	`ZDP_IEEEAddrReq
–
pR•
->
nwkAddr
, 
ZDP_ADDR_REQTYPE_SINGLE
, 0, 0 );

901 
	`zb_BödC⁄fúm
–
ßpi_bödInProgªss
, 
ZB_SUCCESS
 );

902 
ßpi_bödInProgªss
 = 0xffff;

908 
	}
}

924 
	$SAPI_Inô
–
byã
 
èsk_id
 )

926 
uöt8
 
°¨tO±i⁄s
;

928 
ßpi_TaskID
 = 
èsk_id
;

930 
ßpi_bödInProgªss
 = 0xffff;

932 
ßpi_ïDesc
.
ídPoöt
 = 
zb_Sim∂eDesc
.
EndPoöt
;

933 
ßpi_ïDesc
.
èsk_id
 = &
ßpi_TaskID
;

934 
ßpi_ïDesc
.
sim∂eDesc
 = (
Sim∂eDes¸ùti⁄F‹m©_t
 *)&
zb_Sim∂eDesc
;

935 
ßpi_ïDesc
.
œãncyReq
 = 
noL©ícyReqs
;

938 
	`afRegi°î
–&
ßpi_ïDesc
 );

941 
	`afSëM©ch
(
ßpi_ïDesc
.
sim∂eDesc
->
EndPoöt
, 
FALSE
);

944 
	`ZDO_Regi°îF‹ZDOMsg
–
ßpi_TaskID
, 
NWK_addr_r•
 );

945 
	`ZDO_Regi°îF‹ZDOMsg
–
ßpi_TaskID
, 
M©ch_Desc_r•
 );

947 #i‡(
deföed
 
HAL_KEY
Ë&& (HAL_KEY =
TRUE
)

949 
	`Regi°îF‹Keys
–
ßpi_TaskID
 );

951 i‡–
	`HÆKeyRód
 (Ë=
HAL_KEY_SW_5
)

954 
°¨tO±i⁄s
 = 
ZCD_STARTOPT_CLEAR_STATE
 | 
ZCD_STARTOPT_CLEAR_CONFIG
;

955 
	`zb_WrôeC⁄figuøti⁄
–
ZCD_NV_STARTUP_OPTION
, (
uöt8
), &
°¨tO±i⁄s
 );

956 
	`zb_Sy°emRe£t
();

961 
	`oßl_£t_evít
(
èsk_id
, 
ZB_ENTRY_EVENT
);

962 
	}
}

971 
	$SAPI_SídCback
–
uöt8
 
evít
, uöt8 
°©us
, 
uöt16
 
d©a
 )

973 
ßpi_CbackEvít_t
 *
pMsg
;

975 
pMsg
 = (
ßpi_CbackEvít_t
 *)
	`oßl_msg_Æloˇã
( (sapi_CbackEvent_t) );

976 if–
pMsg
 )

978 
pMsg
->
hdr
.
evít
 =Évent;

979 
pMsg
->
hdr
.
°©us
 = status;

980 
pMsg
->
d©a
 = data;

982 
	`oßl_msg_£nd
–
ßpi_TaskID
, (
uöt8
 *)
pMsg
 );

985 
	}
}

996 
	$oßlInôTasks
( )

998 
uöt8
 
èskID
 = 0;

1000 
èsksEvíts
 = (
uöt16
 *)
	`oßl_mem_Æloc
––uöt16 ) * 
èsksC¡
);

1001 
	`oßl_mem£t
–
èsksEvíts
, 0, (–
uöt16
 ) * 
èsksC¡
));

1003 
	`macTaskInô
–
èskID
++ );

1004 
	`nwk_öô
–
èskID
++ );

1005 
	`HÆ_Inô
–
èskID
++ );

1006 #i‡
	`deföed
–
MT_TASK
 )

1007 
	`MT_TaskInô
–
èskID
++ );

1009 
	`APS_Inô
–
èskID
++ );

1010 
	`ZDAµ_Inô
–
èskID
++ );

1011 
	`SAPI_Inô
–
èskID
 );

1012 
	}
}

	@Components/stack/sapi/sapi.h

40 #i‚de‡
SAPI_H


41 
	#SAPI_H


	)

46 
	~"ZComDef.h
"

47 
	~"af.h
"

54 
	#ZB_ALLOW_BIND_TIMER
 0x4000

55 
	#ZB_BIND_TIMER
 0x2000

56 
	#ZB_ENTRY_EVENT
 0x1000

57 
	#ZB_USER_EVENTS
 0x00FF

	)

60 
	#ZB_IEEE_SEARCH
 1

	)

63 
	#ZB_INFO_DEV_STATE
 0

	)

64 
	#ZB_INFO_IEEE_ADDR
 1

	)

65 
	#ZB_INFO_SHORT_ADDR
 2

	)

66 
	#ZB_INFO_PARENT_SHORT_ADDR
 3

	)

67 
	#ZB_INFO_PARENT_IEEE_ADDR
 4

	)

68 
	#ZB_INFO_CHANNEL
 5

	)

69 
	#ZB_INFO_PAN_ID
 6

	)

70 
	#ZB_INFO_EXT_PAN_ID
 7

	)

73 
	#ZB_BINDING_ADDR
 
INVALID_NODE_ADDR


	)

74 
	#ZB_BROADCAST_ADDR
 0xffff

	)

77 
	#ZB_SUCCESS
 
ZSuc˚ss


	)

78 
	#ZB_FAILURE
 
ZFaûuª


	)

79 
	#ZB_INVALID_PARAMETER
 
ZInvÆidP¨amëî


	)

80 
	#ZB_ALREADY_IN_PROGRESS
 
ZS≠iInProgªss


	)

81 
	#ZB_TIMEOUT
 
ZS≠iTimeout


	)

82 
	#ZB_INIT
 
ZS≠iInô


	)

83 
	#ZB_AF_FAILURE
 
afSètus_FAILED


	)

84 
	#ZB_AF_MEM_FAIL
 
afSètus_MEM_FAIL


	)

85 
	#ZB_AF_INVALID_PARAMETER
 
afSètus_INVALID_PARAMETER


	)

88 
	#ZB_SCAN_DURATION_0
 0

89 
	#ZB_SCAN_DURATION_1
 1

90 
	#ZB_SCAN_DURATION_2
 2

91 
	#ZB_SCAN_DURATION_3
 3

92 
	#ZB_SCAN_DURATION_4
 4

93 
	#ZB_SCAN_DURATION_5
 5

94 
	#ZB_SCAN_DURATION_6
 6

95 
	#ZB_SCAN_DURATION_7
 7

96 
	#ZB_SCAN_DURATION_8
 8

97 
	#ZB_SCAN_DURATION_9
 9

98 
	#ZB_SCAN_DURATION_10
 10

99 
	#ZB_SCAN_DURATION_11
 11

100 
	#ZB_SCAN_DURATION_12
 12

101 
	#ZB_SCAN_DURATION_13
 13

102 
	#ZB_SCAN_DURATION_14
 14

103 

	)

105 
	#ZG_DEVICETYPE_COORDINATOR
 0x00

	)

106 
	#ZG_DEVICETYPE_ROUTER
 0x01

	)

107 
	#ZG_DEVICETYPE_ENDDEVICE
 0x02

	)

113 
uöt16
 
	m∑nID
;

114 
uöt8
 
	mch™√l
;

115 } 
	tzb_Nëw‹kLi°_t
;

119 
oßl_evít_hdr_t
 
	mhdr
;

120 
uöt16
 
	md©a
;

121 } 
	tßpi_CbackEvít_t
;

127 
uöt8
 
ßpi_TaskID
;

128 
ídPoötDesc_t
 
ßpi_ïDesc
;

134 #ifde‡
__˝lu•lus


139 c⁄° 
Sim∂eDes¸ùti⁄F‹m©_t
 
zb_Sim∂eDesc
;

153 
zb_Sy°emRe£t
 ( );

168 
zb_SèπReque°
 ( );

194 
uöt8
 
zb_PîmôJoöögReque°
 ( 
uöt16
 
de°ö©i⁄
, uöt8 
timeout
 );

213 
zb_BödDevi˚
 ( 
uöt8
 
¸óã
, 
uöt16
 
comm™dId
, uöt8 *
pDe°ö©i⁄
 );

229 
zb_AŒowBöd
 ( 
uöt8
 
timeout
 );

257 
zb_SídD©aReque°
 ( 
uöt16
 
de°ö©i⁄
, uöt16 
comm™dId
, 
uöt8
 
Àn
,

258 
uöt8
 *
pD©a
, uöt8 
h™dÀ
, uöt8 
ack
, uöt8 
ødius
 );

273 
uöt8
 
zb_RódC⁄figuøti⁄
–uöt8 
c⁄figId
, uöt8 
Àn
, *
pVÆue
 );

288 
uöt8
 
zb_WrôeC⁄figuøti⁄
–uöt8 
c⁄figId
, uöt8 
Àn
, *
pVÆue
 );

301 
zb_GëDevi˚Info
 ( 
uöt8
 
∑øm
, *
pVÆue
 );

318 
zb_FödDevi˚Reque°
–
uöt8
 
£¨chTy≥
, *
£¨chKey
 );

330 
zb_H™dÀOßlEvít
–
uöt16
 
evít
 );

344 
zb_SèπC⁄fúm
–
uöt8
 
°©us
 );

357 
zb_SídD©aC⁄fúm
–
uöt8
 
h™dÀ
, uöt8 
°©us
 );

373 
zb_BödC⁄fúm
–
uöt16
 
comm™dId
, 
uöt8
 
°©us
 );

387 
zb_FödDevi˚C⁄fúm
–
uöt8
 
£¨chTy≥
, uöt8 *
£¨chKey
, uöt8 *
ªsu…
 );

403 
zb_Re˚iveD©aIndiˇti⁄
–
uöt16
 
sour˚
, uöt16 
comm™d
, uöt16 
Àn
, 
uöt8
 *
pD©a
 );

405 
zb_AŒowBödC⁄fúm
–
uöt16
 
sour˚
 );

407 
zb_H™dÀKeys
–
uöt8
 
shi·
, uöt8 
keys
 );

411 
UINT16
 
SAPI_Pro˚ssEvít
–
byã
 
èsk_id
, UINT16 
evíts
 );

412 
SAPI_Inô
–
byã
 
èsk_id
 );

413 
oßlAddTasks
( );

415 #ifde‡
__˝lu•lus


	@Components/stack/sec/eccapi.h

52 #i‚de‡
ECCAPI_H


53 
	#ECCAPI_H


	)

55 #ifde‡
__˝lu•lus


59 
	#ZSE_MAJOR
 1

	)

60 
	#ZSE_MINOR
 0

	)

61 
	#ZSE_PATCH
 1

	)

62 
	#ZSE_BUILD
 6

	)

63 
	#ZSE_VERSION
 (()(
ZSE_MAJOR
 & 0x0F)<< 28 | ()(
ZSE_MINOR
 & 0x0FË<< 24 | ()(
ZSE_PATCH
 & 0x0FFFË<< 12 | ()(
ZSE_BUILD
 & 0x0FFF))

	)

66 
	#SECT163K1_COMPRESSED_PUBLIC_KEY_SIZE
 (22)

	)

67 
	#SECT163K1_UNCOMPRESSED_PUBLIC_KEY_SIZE
 (43)

	)

68 
	#SECT163K1_PRIVATE_KEY_SIZE
 (21)

	)

69 
	#SECT163K1_CERTIFICATE_SIZE
 (48)

	)

70 
	#SECT163K1_SHARED_SECRET_SIZE
 (21)

	)

71 
	#SECT163K1_POINT_ORDER_SIZE
 (21)

	)

72 
	#AES_MMO_HASH_SIZE
 (16)

	)

78 
	#MCE_SUCCESS
 0x00

	)

79 
	#MCE_ERR_FAIL_VERIFY
 0x01

	)

80 
	#MCE_ERR_NULL_PRIVATE_KEY
 0x02

	)

81 
	#MCE_ERR_NULL_PUBLIC_KEY
 0x03

	)

82 
	#MCE_ERR_NULL_INPUT_BUF
 0x04

	)

83 
	#MCE_ERR_NULL_OUTPUT_BUF
 0x05

	)

84 
	#MCE_ERR_NULL_FUNC_PTR
 0x06

	)

85 
	#MCE_ERR_NULL_EPHEM_PRI_KEY
 0x07

	)

86 
	#MCE_ERR_NULL_EPHEM_PUB_KEY
 0x08

	)

87 
	#MCE_ERR_BAD_INPUT
 0x09

	)

102 
	tGëR™domD©aFunc
(*
	tbuf„r
, 
	tsz
);

117 
	tHashFunc
(*
	tdige°
, 
	tsz
, *
	td©a
);

128 
	tYõldFunc
();

150 
´sMmoHash
(*
dige°
, 
sz
, *
d©a
);

184 
ZSE_ECDSASign
(*
¥iv©eKey
,

185 *
msgDige°
,

186 
GëR™domD©aFunc
 *
GëR™domD©a
,

187 *
r
,

188 *
s
,

189 
YõldFunc
 *
yõld
,

190 
yõldLevñ
 );

225 
ZSE_ECDSAVîify
(*
publicKey
,

226 *
msgDige°
,

227 *
r
,

228 *
s
,

229 
YõldFunc
 *
yõld
,

230 
yõldLevñ
);

263 
ZSE_ECCGíî©eKey
(*
¥iv©eKey
,

264 *
publicKey
,

265 
GëR™domD©aFunc
 *
GëR™domD©a
,

266 
YõldFunc
 *
yõld
,

267 
yõldLevñ
);

330 
ZSE_ECCKeyBôGíî©e
(*
¥iv©eKey
,

331 *
ïhemîÆPriv©eKey
,

332 *
ïhemîÆPublicKey
,

333 *
ªmŸeCîtifiˇã
,

334 *
ªmŸeEphemîÆPublicKey
,

335 *
ˇPublicKey
,

336 *
keyBôs
,

337 
HashFunc
 *
Hash
,

338 
YõldFunc
 *
yõld
,

339 
yõldLevñ
);

380 
ZSE_ECQVRec⁄°ru˘PublicKey
(* 
˚πifiˇã
,

381 * 
ˇPublicKey
,

382 * 
publicKey
,

383 
HashFunc
 *
Hash
,

384 
YõldFunc
 *
yõld
,

385 
yõldLevñ
);

396 
ZSE_GëVîsi⁄
();

399 #ifde‡
__˝lu•lus


	@Components/stack/sec/ssp.h

40 #i‚de‡
SSP_H


41 
	#SSP_H


	)

43 #ifde‡
__˝lu•lus


51 
	~"ZComDef.h
"

60 
	#SSP_APPLY
 0

	)

61 
	#SSP_REMOVE
 1

	)

64 
	#FRAME_COUNTER_LEN
 4

	)

66 
	#SEC_KEY_LEN
 16

67 

	)

69 
	#SEC_KEYID_LINK
 0x00

	)

70 
	#SEC_KEYID_NWK
 0x01

	)

71 
	#SEC_KEYID_TRANSPORT
 0x02

	)

72 
	#SEC_KEYID_LOAD
 0x03

	)

75 
	#SEC_MASK
 0x07

	)

76 
	#SEC_NONE
 0x00

	)

77 
	#SEC_MIC_32
 0x01

	)

78 
	#SEC_MIC_64
 0x02

	)

80 
	#SEC_MIC_128
 0x03

	)

81 
	#SEC_ENC
 0x04

	)

82 
	#SEC_ENC_MIC_32
 0x05

	)

83 
	#SEC_ENC_MIC_64
 0x06

	)

84 
	#SEC_ENC_MIC_128
 0x07

	)

87 
	#KEY_TYPE_TC_MASTER
 0

88 
	#KEY_TYPE_NWK
 1

89 
	#KEY_TYPE_APP_MASTER
 2

90 
	#KEY_TYPE_APP_LINK
 3

91 
	#KEY_TYPE_TC_LINK
 4

92 
	#KEY_TYPE_NWK_HIGH
 5

93 

	)

94 
	#SSP_AUXHDR_CTRL
 0

	)

95 
	#SSP_AUXHDR_FRAMECNTR
 1

	)

97 
	#SSP_AUXHDR_KEYID_MASK
 0x03

	)

98 
	#SSP_AUXHDR_KEYID_SHIFT
 3

	)

99 
	#SSP_AUXHDR_EXTNONCE_SHIFT
 5

	)

100 
	#SSP_AUXHDR_EXTNONCE_BIT
 0x01

	)

101 
	#SSP_AUXHDR_LEVEL_MASK
 0x07

	)

103 
	#SSP_AUXHDR_MIN_LEN
 5

	)

104 
	#SSP_AUXHDR_SEQNUM_LEN
 1

	)

105 
	#SSP_AUXHDR_EXT_LEN
 ( 
SSP_AUXHDR_MIN_LEN
 + 
Z_EXTADDR_LEN
 )

	)

106 
	#SSP_AUXHDR_NWK_LEN
 ( 
SSP_AUXHDR_EXT_LEN
 + 
SSP_AUXHDR_SEQNUM_LEN
 )

	)

108 
	#SSP_MIC_LEN_MAX
 16

	)

110 
	#SSP_NONCE_LEN
 13

	)

112 
	#SSP_TEXT_LEN
 4

	)

115 
	#SSP_MAC_TAGS_SKKE
 0

	)

116 
	#SSP_MAC_TAGS_EA
 1

	)

124 
byã
 
keySeqNum
;

125 
byã
 
key
[
SEC_KEY_LEN
];

126 } 
	tnwkKeyDesc
;

130 
nwkKeyDesc
 
a˘ive
;

131 
uöt32
 
‰ameCou¡î
;

132 } 
	tnwkA˘iveKeyIãms
;

136 
uöt32
 
öFrmC¡r
;

137 
uöt32
 
outFrmC¡r
;

138 
byã
 
ma°îKey
[
SEC_KEY_LEN
];

139 
byã
 
lökKey
[
SEC_KEY_LEN
];

140 
byã
 
∑π√rDevi˚
[
Z_EXTADDR_LEN
];

141 } 
	tlökKeyDesc
;

145 
byã
 
hdrLí
;

146 
byã
 
auxLí
;

147 
byã
 
msgLí
;

148 
byã
 
£cLevñ
;

149 
byã
 
keyId
;

150 
uöt32
 
‰ameCå
;

151 
byã
 *
key
;

152 } 
	ts•_˘x
;

156 
uöt8
* 
öôExtAddr
;

157 
uöt8
* 
r•ExtAddr
;

158 
uöt8
* 
key
;

159 
uöt8
* 
qeu
;

160 
uöt8
* 
qev
;

161 
uöt8
* 
ãxt1
;

162 
uöt8
* 
ãxt2
;

163 
uöt8
* 
èg1
;

164 
uöt8
* 
èg2
;

165 
uöt8
* 
lökKey
;

166 
uöt8
 
ty≥
;

167 } 
	tSSP_MacTagD©a_t
;

171 
uöt8
 
dú
;

172 
uöt8
 
£cLevñ
;

173 
uöt8
 
hdrLí
;

174 
uöt8
 
sduLí
;

175 
uöt8
* 
pdu
;

176 
uöt8
 
extAddr
[
Z_EXTADDR_LEN
];

177 
uöt8
 
keyID
;

178 
uöt8
* 
key
;

179 
uöt8
 
keySeqNum
;

180 
uöt32
 
‰mC¡r
;

181 
uöt8
 
auxLí
;

182 
uöt8
 
micLí
;

183 } 
	tSSP_Info_t
;

190 
uöt32
 
nwkFømeCou¡î
;

191 
byã
 
zgPªC⁄figKey
[
SEC_KEY_LEN
];

200 
SSP_Inô
( );

205 
SSP_P¨£AuxHdr
–
SSP_Info_t
* 
si
 );

210 
ZSètus_t
 
SSP_Pro˚ss
–
SSP_Info_t
* 
si
 );

215 
ZSètus_t
 
SSP_GëMacTags
–
SSP_MacTagD©a_t
* 
d©a
 );

220 
SSP_GëTrueR™d
–
byã
 
Àn
, byã *
ønd
 );

225 
SSP_RódNwkA˘iveKey
–
nwkA˘iveKeyIãms
 *
ôems
 );

230 
SSP_WrôeNwkA˘iveKey
–
nwkA˘iveKeyIãms
 *
ôems
 );

235 
byã
 *
SSP_GëNwkKey
–byã 
£qNum
 );

240 
ZSètus_t
 
SSP_NwkSecurôy
(
byã
 
ed_Êag
, byã *
msg
, byã 
hdrLí
, byã 
nsduLí
);

245 
SSP_Upd©eNwkKey
–
byã
 *
key
, byã 
keySeqNum
 );

250 
SSP_SwôchNwkKey
–
byã
 
£qNum
 );

252 
SSP_BuûdN⁄˚
–
byã
 *
addr
, 
uöt32
 
‰ameC¡r
, byã 
£cCål
, byã *
n⁄˚
 );

254 
byã
 
SSP_GëMicLí
–byã 
£curôyLevñ
 );

258 #ifde‡
__˝lu•lus


	@Components/stack/sec/ssp_hash.h

40 #i‚de‡
SSP_HASH_H


41 
	#SSP_HASH_H


	)

43 #ifde‡
__˝lu•lus


52 
	~"s•.h
"

75 
s•MMOHash
 (
uöt8
 *, uöt8, uöt8 *, 
uöt16
, uint8 *);

76 
SSP_KeyedHash
 (
uöt8
 *
M
, 
uöt16
 
bôÀn
, uöt8 *
AesKey
, uöt8 *
C°©e
);

80 #ifde‡
__˝lu•lus


	@Components/stack/sys/ZGlobals.c

44 
	~"ZComDef.h
"

45 
	~"OSAL_Nv.h
"

46 
	~"ZDObje˘.h
"

47 
	~"ZGlobÆs.h
"

48 
	~"ZDNwkMgr.h
"

50 #i‡
deföed
(
ZCL_KEY_ESTABLISH
)

51 
	~"z˛_key_e°ablish.h
"

54 
	~"OnBﬂrd.h
"

68 
	szgIãm


70 
uöt16
 
	mid
;

71 
uöt16
 
	mÀn
;

72 *
	mbuf
;

73 } 
	tzgIãm_t
;

80 
uöt16
 
	gzgPﬁlR©e
 = 
POLL_RATE
;

81 
uöt16
 
	gzgQueuedPﬁlR©e
 = 
QUEUED_POLL_RATE
;

82 
uöt16
 
	gzgRe•⁄£PﬁlR©e
 = 
RESPONSE_POLL_RATE
;

83 
uöt16
 
	gzgRejoöPﬁlR©e
 = 
REJOIN_POLL_RATE
;

86 
uöt8
 
	gzgMaxD©aRërõs
 = 
NWK_MAX_DATA_RETRIES
;

87 
uöt8
 
	gzgMaxPﬁlFaûuªRërõs
 = 
MAX_POLL_FAILURE_RETRIES
;

90 
uöt32
 
	gzgDeÁu…Ch™√lLi°
 = 
DEFAULT_CHANLIST
;

93 
uöt8
 
	gzgDeÁu…SèπögSˇnDuøti⁄
 = 
STARTING_SCAN_DURATION
;

96 
uöt8
 
	gzgSèckProfûe
 = 
STACK_PROFILE_ID
;

99 
uöt8
 
	gzgIndúe˘MsgTimeout
 = 
NWK_INDIRECT_MSG_TIMEOUT
;

102 
uöt8
 
	gzgSecurôyMode
 = 
ZG_SECURITY_MODE
;

105 
uöt8
 
	gzgSecuªPîmôJoö
 = 
åue
;

107 #i‡
deföed
(
ZCL_KEY_ESTABLISH
)

109 
uöt8
 
	gzgCAPublicKey
[
ZCL_KEY_ESTABLISHMENT_PUBLIC_KEY_LENGTH
];

112 
uöt8
 
	gzgLoˇlCîtifiˇã
[
ZCL_KEY_ESTABLISHMENT_CERTIFICATE_LENGTH
];

115 
uöt8
 
	gzgSèticPriv©eKey
[
ZCL_KEY_ESTABLSIHMENT_PRIVATE_KEY_LENTGH
];

118 
uöt8
 
	gzgRemŸePublicKey
[
ZCL_KEY_ESTABLISHMENT_PUBLIC_KEY_LENGTH
];

122 
uöt8
 
	gzgRouãExpúyTime
 = 
ROUTE_EXPIRY_TIME
;

125 
uöt8
 
	gzgExãndedPANID
[
Z_EXTADDR_LEN
];

128 
uöt8
 
	gzgMaxBˇ°Rëúes
 = 
MAX_BCAST_RETRIES
;

129 
uöt8
 
	gzgPassiveAckTimeout
 = 
PASSIVE_ACK_TIMEOUT
;

130 
uöt8
 
	gzgBˇ°DñivîyTime
 = 
BCAST_DELIVERY_TIME
;

133 
uöt8
 
	gzgNwkMode
 = 
NWK_MODE
;

136 
uöt8
 
	gzgC⁄˚¡øt‹E«bÀ
 = 
CONCENTRATOR_ENABLE
;

137 
uöt8
 
	gzgC⁄˚¡øt‹DiscovîyTime
 = 
CONCENTRATOR_DISCOVERY_TIME
;

138 
uöt8
 
	gzgC⁄˚¡øt‹Radius
 = 
CONCENTRATOR_RADIUS
;

139 
uöt8
 
	gzgMaxSour˚Rouã
 = 
MAX_SOURCE_ROUTE
;

140 
uöt8
 
	gzgC⁄˚¡øt‹RC
 = 
CONCENTRATOR_ROUTE_CACHE
;

147 
uöt8
 
	gzgApscMaxFømeRërõs
 = 
APSC_MAX_FRAME_RETRIES
;

153 
uöt16
 
	gzgApscAckWaôDuøti⁄PﬁÀd
 = 
APSC_ACK_WAIT_DURATION_POLLED
;

157 
uöt8
 
	gzgApsAckWaôMu…ùlõr
 = 2;

160 
uöt16
 
	gzgApsDeÁu…MaxBödögTime
 = 
APS_DEFAULT_MAXBINDING_TIME
;

164 
uöt8
 
	gzgApsU£ExãndedPANID
[
Z_EXTADDR_LEN
] = {00,00,00,00,00,00,00,00};

168 
uöt8
 
	gzgApsU£In£cuªJoö
 = 
TRUE
;

171 
uöt8
 
	gzgApscMaxWödowSize
 = 
APS_DEFAULT_WINDOW_SIZE
;

174 
uöt16
 
	gzgApsI¡î‰ameDñay
 = 
APS_DEFAULT_INTERFRAME_DELAY
;

177 
uöt8
 
	gzgApsN⁄MembîRadius
 = 
APS_DEFAULT_NONMEMBER_RADIUS
;

183 
uöt8
 
	gzgPªC⁄figKey
[
SEC_KEY_LEN
];

188 
uöt8
 
	gzgPªC⁄figKeys
 = 
FALSE
;

191 
uöt8
 
	gzgPªC⁄figTCLökKey
[
SEC_KEY_LEN
];

199 
uöt16
 
	gzgC⁄figPANID
 = 
ZDAPP_CONFIG_PAN_ID
;

202 
uöt8
 
	gzgDevi˚LogiˇlTy≥
 = 
DEVICE_LOGICAL_TYPE
;

205 
uöt8
 
	gzgSèπDñay
 = 
START_DELAY
;

212 
uöt8
 
	gzgNwkMgrMode
 = 
ZDNWKMGR_ENABLE
;

219 
uöt8
 
	gzgS≠iEndpoöt
 = 
SAPI_ENDPOINT
;

228 
CONST
 
zgIãm_t
 
	gzgIãmTabÀ
[] =

230 #i‡
deföed
 ( 
NV_INIT
 )

232 
ZCD_NV_LOGICAL_TYPE
, (
zgDevi˚LogiˇlTy≥
), &zgDeviceLogicalType

235 
ZCD_NV_POLL_RATE
, (
zgPﬁlR©e
), &zgPollRate

238 
ZCD_NV_QUEUED_POLL_RATE
, (
zgQueuedPﬁlR©e
), &zgQueuedPollRate

241 
ZCD_NV_RESPONSE_POLL_RATE
, (
zgRe•⁄£PﬁlR©e
), &zgResponsePollRate

244 
ZCD_NV_REJOIN_POLL_RATE
, (
zgRejoöPﬁlR©e
), &zgRejoinPollRate

247 
ZCD_NV_DATA_RETRIES
, (
zgMaxD©aRërõs
), &zgMaxDataRetries

250 
ZCD_NV_POLL_FAILURE_RETRIES
, (
zgMaxPﬁlFaûuªRërõs
), &zgMaxPollFailureRetries

253 
ZCD_NV_CHANLIST
, (
zgDeÁu…Ch™√lLi°
), &zgDefaultChannelList

256 
ZCD_NV_SCAN_DURATION
, (
zgDeÁu…SèπögSˇnDuøti⁄
), &zgDefaultStartingScanDuration

259 
ZCD_NV_STACK_PROFILE
, (
zgSèckProfûe
), &zgStackProfile

262 
ZCD_NV_INDIRECT_MSG_TIMEOUT
, (
zgIndúe˘MsgTimeout
), &zgIndirectMsgTimeout

265 
ZCD_NV_ROUTE_EXPIRY_TIME
, (
zgRouãExpúyTime
), &zgRouteExpiryTime

268 
ZCD_NV_EXTENDED_PAN_ID
, 
Z_EXTADDR_LEN
, 
zgExãndedPANID


271 
ZCD_NV_BCAST_RETRIES
, (
zgMaxBˇ°Rëúes
), &zgMaxBcastRetires

274 
ZCD_NV_PASSIVE_ACK_TIMEOUT
, (
zgPassiveAckTimeout
), &zgPassiveAckTimeout

277 
ZCD_NV_BCAST_DELIVERY_TIME
, (
zgBˇ°DñivîyTime
), &zgBcastDeliveryTime

280 
ZCD_NV_NWK_MODE
, (
zgNwkMode
), &zgNwkMode

283 
ZCD_NV_CONCENTRATOR_ENABLE
, (
zgC⁄˚¡øt‹E«bÀ
), &zgConcentratorEnable

286 
ZCD_NV_CONCENTRATOR_DISCOVERY
, (
zgC⁄˚¡øt‹DiscovîyTime
), &zgConcentratorDiscoveryTime

289 
ZCD_NV_CONCENTRATOR_RADIUS
, (
zgC⁄˚¡øt‹Radius
), &zgConcentratorRadius

292 
ZCD_NV_MAX_SOURCE_ROUTE
, (
zgMaxSour˚Rouã
), &zgMaxSourceRoute

295 
ZCD_NV_CONCENTRATOR_RC
, (
zgC⁄˚¡øt‹RC
), &zgConcentratorRC

297 #i‚de‡
NONWK


299 
ZCD_NV_PANID
, (
zgC⁄figPANID
), &zgConfigPANID

302 
ZCD_NV_PRECFGKEY
, 
SEC_KEY_LEN
, &
zgPªC⁄figKey


305 
ZCD_NV_SECURE_PRECFG_TCLINKKEY
, 
SEC_KEY_LEN
, &
zgPªC⁄figTCLökKey


308 
ZCD_NV_PRECFGKEYS_ENABLE
, (
zgPªC⁄figKeys
), &zgPreConfigKeys

311 
ZCD_NV_SECURITY_MODE
, (
zgSecurôyMode
), &zgSecurityMode

314 
ZCD_NV_SECURE_PERMIT_JOIN
, (
zgSecuªPîmôJoö
), &zgSecurePermitJoin

316 #i‡
deföed
(
ZCL_KEY_ESTABLISH
)

318 
ZCD_NV_CA_PUBLIC_KEY
, 
ZCL_KEY_ESTABLISHMENT_PUBLIC_KEY_LENGTH
, 
zgCAPublicKey


321 
ZCD_NV_lOCAL_CERTIFICATE
, 
ZCL_KEY_ESTABLISHMENT_CERTIFICATE_LENGTH
, 
zgLoˇlCîtifiˇã


324 
ZCD_NV_STATIC_PRIVATE_KEY
, 
ZCL_KEY_ESTABLSIHMENT_PRIVATE_KEY_LENTGH
, 
zgSèticPriv©eKey


327 
ZCD_NV_STATIC_PUBLIC_KEY
, 
ZCL_KEY_ESTABLISHMENT_PUBLIC_KEY_LENGTH
, 
zgRemŸePublicKey


332 
ZCD_NV_APS_FRAME_RETRIES
, (
zgApscMaxFømeRërõs
), &zgApscMaxFrameRetries

335 
ZCD_NV_APS_ACK_WAIT_DURATION
, (
zgApscAckWaôDuøti⁄PﬁÀd
), &zgApscAckWaitDurationPolled

338 
ZCD_NV_APS_ACK_WAIT_MULTIPLIER
, (
zgApsAckWaôMu…ùlõr
), &zgApsAckWaitMultiplier

341 
ZCD_NV_BINDING_TIME
, (
zgApsDeÁu…MaxBödögTime
), &zgApsDefaultMaxBindingTime

344 
ZCD_NV_APS_USE_EXT_PANID
, 
Z_EXTADDR_LEN
, 
zgApsU£ExãndedPANID


347 
ZCD_NV_APS_USE_INSECURE_JOIN
, (
zgApsU£In£cuªJoö
), &zgApsUseInsecureJoin

350 
ZCD_NV_APSF_WINDOW_SIZE
, (
zgApscMaxWödowSize
), &zgApscMaxWindowSize

353 
ZCD_NV_APSF_INTERFRAME_DELAY
, (
zgApsI¡î‰ameDñay
), &zgApsInterframeDelay

356 
ZCD_NV_APS_NONMEMBER_RADIUS
, (
zgApsN⁄MembîRadius
), &zgApsNonMemberRadius

359 
ZCD_NV_START_DELAY
, (
zgSèπDñay
), &zgStartDelay

362 
ZCD_NV_SAPI_ENDPOINT
, (
zgS≠iEndpoöt
), &zgSapiEndpoint

365 
ZCD_NV_NWK_MGR_MODE
, (
zgNwkMgrMode
), &zgNwkMgrMode

370 0x00, 0, 
NULL


378 
uöt8
 
zgIãmInô
–
uöt16
 
id
, uöt16 
Àn
, *
buf
, uöt8 
£tDeÁu…
 );

401 
uöt8
 
	$zgIãmInô
–
uöt16
 
id
, uöt16 
Àn
, *
buf
, 
uöt8
 
£tDeÁu…
 )

404 
uöt8
 
°©us
;

408 
°©us
 = 
	`oßl_nv_ôem_öô
–
id
, 
Àn
, 
buf
 );

409 i‡–
°©us
 =
ZSUCCESS
 )

411 i‡–
£tDeÁu…
 )

414 
°©us
 = 
	`oßl_nv_wrôe
–
id
, 0, 
Àn
, 
buf
 );

419 
°©us
 = 
	`oßl_nv_ªad
–
id
, 0, 
Àn
, 
buf
 );

423  (
°©us
);

424 
	}
}

450 
uöt8
 
	$zgInô
( )

452 
uöt8
 
£tDeÁu…
 = 
FALSE
;

455 i‡–
	`zgRódSèπupO±i⁄s
(Ë& 
ZCD_STARTOPT_DEFAULT_CONFIG_STATE
 )

457 
£tDeÁu…
 = 
TRUE
;

463 
uöt16
 
boŸC¡
 = 0;

466 i‡–
	`oßl_nv_ôem_öô
–
ZCD_NV_BOOTCOUNTER
, (
boŸC¡
), &boŸC¡ ) =
ZSUCCESS
 )

469 
	`oßl_nv_ªad
–
ZCD_NV_BOOTCOUNTER
, 0, (
boŸC¡
), &bootCnt );

473 i‡–
£tDeÁu…
 )

474 
boŸC¡
 = 0;

476 
boŸC¡
++;

477 
	`oßl_nv_wrôe
–
ZCD_NV_BOOTCOUNTER
, 0, (
boŸC¡
), &bootCnt );

481 
	`ZMacGëReq
–
ZMacExtAddr
, 
zgExãndedPANID
 );

483 #i‚de‡
NONWK


485 
	`oßl_mem˝y
–
zgPªC⁄figKey
, 
deÁu…Key
, 
SEC_KEY_LEN
 );

488 
	`oßl_mem˝y
–
zgPªC⁄figTCLökKey
, 
deÁu…TCLökKey
, 
SEC_KEY_LEN
 );

492 
	`zgInôIãms
–
£tDeÁu…
 );

495 i‡–
£tDeÁu…
 )

497 
	`zgWrôeSèπupO±i⁄s
–
ZG_STARTUP_CLEAR
, 
ZCD_STARTOPT_DEFAULT_CONFIG_STATE
 );

500  ( 
ZSUCCESS
 );

501 
	}
}

514 
	$zgInôIãms
–
uöt8
 
£tDeÁu…
 )

516 
uöt8
 
i
 = 0;

518  
zgIãmTabÀ
[
i
].
id
 != 0x00 )

521 
	`zgIãmInô
–
zgIãmTabÀ
[
i
].
id
, zgIãmTabÀ[i].
Àn
, zgIãmTabÀ[i].
buf
, 
£tDeÁu…
 );

524 
i
++;

526 
	}
}

537 
uöt8
 
	$zgRódSèπupO±i⁄s
( )

540 
uöt8
 
°¨tupO±i⁄
 = 0;

543 i‡–
	`oßl_nv_ôem_öô
–
ZCD_NV_STARTUP_OPTION
,

544 (
°¨tupO±i⁄
),

545 &
°¨tupO±i⁄
 ) =
ZSUCCESS
 )

548 
	`oßl_nv_ªad
–
ZCD_NV_STARTUP_OPTION
,

550 –
°¨tupO±i⁄
 ),

551 &
°¨tupO±i⁄
);

553  ( 
°¨tupO±i⁄
 );

554 
	}
}

571 
uöt8
 
	$zgWrôeSèπupO±i⁄s
–
uöt8
 
a˘i⁄
, uöt8 
bôO±i⁄s
 )

573 
uöt8
 
°©us
;

574 
uöt8
 
°¨tupO±i⁄s
 = 0;

576 
°©us
 = 
	`oßl_nv_ªad
–
ZCD_NV_STARTUP_OPTION
,

578 –
°¨tupO±i⁄s
 ),

579 &
°¨tupO±i⁄s
 );

581 i‡–
°©us
 =
ZSUCCESS
 )

583 i‡–
a˘i⁄
 =
ZG_STARTUP_SET
 )

586 
°¨tupO±i⁄s
 |
bôO±i⁄s
;

591 
°¨tupO±i⁄s
 &(
bôO±i⁄s
 ^ 0xFF);

595 
°©us
 = 
	`oßl_nv_wrôe
–
ZCD_NV_STARTUP_OPTION
,

597 –
°¨tupO±i⁄s
 ),

598 &
°¨tupO±i⁄s
 );

601  ( 
°©us
 );

602 
	}
}

615 
	$zgSëIãm
–
uöt16
 
id
, uöt16 
Àn
, *
buf
 )

618 
uöt8
 
i
 = 0;

621  
zgIãmTabÀ
[
i
].
id
 != 0x00 )

623 if–
zgIãmTabÀ
[
i
].
id
 == id )

625 i‡–
zgIãmTabÀ
[
i
].
Àn
 ==Üen )

627 
	`oßl_mem˝y
–
zgIãmTabÀ
[
i
].
buf
, buf, 
Àn
 );

632 
i
++;

635 
	}
}

	@Components/stack/sys/ZGlobals.h

40 #i‚de‡
ZGLOBALS_H


41 
	#ZGLOBALS_H


	)

43 #ifde‡
__˝lu•lus


50 
	~"ZComDef.h
"

55 #i‡
deföed
–
BUILD_ALL_DEVICES
 ) && !deföed–
ZSTACK_DEVICE_BUILD
 )

56 
	#ZSTACK_DEVICE_BUILD
 (
DEVICE_BUILD_COORDINATOR
 | 
DEVICE_BUILD_ROUTER
 | 
DEVICE_BUILD_ENDDEVICE
)

	)

60 #i‡!
deföed
 ( 
ZSTACK_DEVICE_BUILD
 )

61 #i‡
deföed
 ( 
ZDO_COORDINATOR
 )

62 
	#ZSTACK_DEVICE_BUILD
 (
DEVICE_BUILD_COORDINATOR
)

	)

63 #ñi‡
deföed
 ( 
RTR_NWK
 )

64 
	#ZSTACK_DEVICE_BUILD
 (
DEVICE_BUILD_ROUTER
)

	)

66 
	#ZSTACK_DEVICE_BUILD
 (
DEVICE_BUILD_ENDDEVICE
)

	)

71 
	#ZG_BUILD_COORDINATOR_TYPE
 (
ZSTACK_DEVICE_BUILD
 & 
DEVICE_BUILD_COORDINATOR
)

	)

72 
	#ZG_BUILD_RTR_TYPE
 (
ZSTACK_DEVICE_BUILD
 & (
DEVICE_BUILD_COORDINATOR
 | 
DEVICE_BUILD_ROUTER
))

	)

73 
	#ZG_BUILD_ENDDEVICE_TYPE
 (
ZSTACK_DEVICE_BUILD
 & 
DEVICE_BUILD_ENDDEVICE
)

	)

74 
	#ZG_BUILD_RTRONLY_TYPE
 (
ZSTACK_DEVICE_BUILD
 =
DEVICE_BUILD_ROUTER
)

	)

75 
	#ZG_BUILD_JOINING_TYPE
 (
ZSTACK_DEVICE_BUILD
 & (
DEVICE_BUILD_ROUTER
 | 
DEVICE_BUILD_ENDDEVICE
))

	)

77 #i‡–
ZSTACK_DEVICE_BUILD
 =
DEVICE_BUILD_COORDINATOR
 )

78 
	#ZG_DEVICE_COORDINATOR_TYPE
 1

	)

80 
	#ZG_DEVICE_COORDINATOR_TYPE
 (
zgDevi˚LogiˇlTy≥
 =
ZG_DEVICETYPE_COORDINATOR
)

	)

83 #i‡–
ZSTACK_DEVICE_BUILD
 =(
DEVICE_BUILD_ROUTER
 | 
DEVICE_BUILD_COORDINATOR
) )

84 
	#ZG_DEVICE_RTR_TYPE
 1

	)

86 
	#ZG_DEVICE_RTR_TYPE
 ((
zgDevi˚LogiˇlTy≥
 =
ZG_DEVICETYPE_COORDINATOR
Ë|| (zgDevi˚LogiˇlTy≥ =
ZG_DEVICETYPE_ROUTER
))

	)

89 #i‡–
ZSTACK_DEVICE_BUILD
 =
DEVICE_BUILD_ENDDEVICE
 )

90 
	#ZG_DEVICE_ENDDEVICE_TYPE
 1

	)

92 
	#ZG_DEVICE_ENDDEVICE_TYPE
 (
zgDevi˚LogiˇlTy≥
 =
ZG_DEVICETYPE_ENDDEVICE
)

	)

95 
	#ZG_DEVICE_JOINING_TYPE
 ((
zgDevi˚LogiˇlTy≥
 =
ZG_DEVICETYPE_ROUTER
Ë|| (zgDevi˚LogiˇlTy≥ =
ZG_DEVICETYPE_ENDDEVICE
))

	)

97 #i‡–
ZG_BUILD_RTR_TYPE
 )

98 #i‡–
ZG_BUILD_ENDDEVICE_TYPE
 )

99 
	#ZSTACK_ROUTER_BUILD
 (
ZG_BUILD_RTR_TYPE
 && 
ZG_DEVICE_RTR_TYPE
)

	)

101 
	#ZSTACK_ROUTER_BUILD
 1

	)

104 
	#ZSTACK_ROUTER_BUILD
 0

	)

107 #i‡–
ZG_BUILD_ENDDEVICE_TYPE
 )

108 #i‡–
ZG_BUILD_RTR_TYPE
 )

109 
	#ZSTACK_END_DEVICE_BUILD
 (
ZG_BUILD_ENDDEVICE_TYPE
 && 
ZG_DEVICE_ENDDEVICE_TYPE
)

	)

111 
	#ZSTACK_END_DEVICE_BUILD
 1

	)

114 
	#ZSTACK_END_DEVICE_BUILD
 0

	)

123 
	#ZG_DEVICETYPE_COORDINATOR
 0x00

	)

124 
	#ZG_DEVICETYPE_ROUTER
 0x01

	)

125 
	#ZG_DEVICETYPE_ENDDEVICE
 0x02

	)

130 #i‡!
deföed
 ( 
DEVICE_LOGICAL_TYPE
 )

131 #i‡–
ZG_BUILD_COORDINATOR_TYPE
 )

133 
	#DEVICE_LOGICAL_TYPE
 
ZG_DEVICETYPE_COORDINATOR


	)

134 #ñi‡–
ZG_BUILD_RTR_TYPE
 )

135 
	#DEVICE_LOGICAL_TYPE
 
ZG_DEVICETYPE_ROUTER


	)

136 #ñi‡–
ZG_BUILD_ENDDEVICE_TYPE
 )

138 
	#DEVICE_LOGICAL_TYPE
 
ZG_DEVICETYPE_ENDDEVICE


	)

140 #îr‹ 
ZSTACK_DEVICE_BUILD
 
mu°
 
be
 
deföed
 
as
 
somëhög
!

145 #i‡!
deföed
 ( 
MAX_POLL_FAILURE_RETRIES
 )

146 
	#MAX_POLL_FAILURE_RETRIES
 1

	)

148 #i‡!
deföed
 ( 
MAX_DATA_RETRIES
 )

149 
	#MAX_DATA_RETRIES
 2

	)

153 #i‡!
deföed
 ( 
MAX_BCAST_RETRIES
 )

154 
	#MAX_BCAST_RETRIES
 2

	)

156 #i‡!
deföed
 ( 
PASSIVE_ACK_TIMEOUT
 )

157 
	#PASSIVE_ACK_TIMEOUT
 5

	)

159 #i‡!
deföed
 ( 
BCAST_DELIVERY_TIME
 )

160 
	#BCAST_DELIVERY_TIME
 30

	)

163 #i‡!
deföed
 ( 
APS_DEFAULT_MAXBINDING_TIME
 )

164 
	#APS_DEFAULT_MAXBINDING_TIME
 16000

	)

167 #i‡!
deföed
 ( 
APSF_DEFAULT_WINDOW_SIZE
 )

168 
	#APS_DEFAULT_WINDOW_SIZE
 3

	)

171 #i‡!
deföed
 ( 
APSF_DEFAULT_INTERFRAME_DELAY
 )

172 
	#APS_DEFAULT_INTERFRAME_DELAY
 50

	)

175 #i‡!
deföed
 ( 
APS_DEFAULT_NONMEMBER_RADIUS
 )

176 
	#APS_DEFAULT_NONMEMBER_RADIUS
 2

	)

180 #i‡!
deföed
 ( 
CONCENTRATOR_ENABLE
 )

181 
	#CONCENTRATOR_ENABLE
 
Ál£


183 

	)

184 #i‡!
deföed
 ( 
CONCENTRATOR_DISCOVERY_TIME
 )

185 
	#CONCENTRATOR_DISCOVERY_TIME
 0

	)

188 #i‡!
deföed
 ( 
CONCENTRATOR_RADIUS
 )

189 
	#CONCENTRATOR_RADIUS
 0x0a

	)

192 #i‡!
deföed
 ( 
CONCENTRATOR_ROUTE_CACHE
 )

193 
	#CONCENTRATOR_ROUTE_CACHE
 
Ál£


195 

	)

196 #i‡!
deföed
 ( 
MAX_SOURCE_ROUTE
 )

197 
	#MAX_SOURCE_ROUTE
 0x0c

	)

200 #i‡!
deföed
 ( 
START_DELAY
 )

201 
	#START_DELAY
 0x0a

	)

204 #i‡!
deföed
 ( 
SAPI_ENDPOINT
 )

205 
	#SAPI_ENDPOINT
 0xe0

	)

208 
	#ZG_STARTUP_CLEAR
 0x00

	)

209 
	#ZG_STARTUP_SET
 0xFF

	)

212 #i‡
deföed
 ( 
AMI_PROFILE
 )

213 
	#SE_PROFILE


	)

219 
	#ZG_SECURITY_NONE
 0

	)

220 
	#ZG_SECURITY_RESIDENTIAL
 1

	)

221 
	#ZG_SECURITY_PRO_STANDARD
 1

222 
	#ZG_SECURITY_PRO_HIGH
 3

	)

223 
	#ZG_SECURITY_SE_STANDARD
 4

	)

225 #i‡–
SECURE
 == 0 )

226 #unde‡
ZG_SECURITY_MODE


227 
	#ZG_SECURITY_MODE
 
ZG_SECURITY_NONE


	)

229 #i‡!
deföed
 ( 
ZG_SECURITY_MODE
 )

230 #i‡
deföed
 ( 
SE_PROFILE
 )

231 
	#ZG_SECURITY_MODE
 
ZG_SECURITY_SE_STANDARD


	)

233 #i‡!
deföed
 ( 
ZIGBEEPRO
 )

234 
	#ZG_SECURITY_MODE
 
ZG_SECURITY_RESIDENTIAL


	)

237 
	#ZG_SECURITY_MODE
 
ZG_SECURITY_PRO_STANDARD


242 

	)

246 #i‡!
deföed
 ( 
ZG_SECURE_DYNAMIC
 )

247 
	#ZG_SECURE_DYNAMIC
 1

	)

250 #i‡–
ZG_SECURE_DYNAMIC
 == 1 )

251 
	#ZG_SECURE_ENABLED
 ( 
SECURE
 && ( 
zgSecurôyMode
 !
ZG_SECURITY_NONE
 ) )

	)

252 
	#ZG_CHECK_SECURITY_MODE
 ( 
zgSecurôyMode
 )

	)

254 
	#ZG_SECURE_ENABLED
 ( 
SECURE
 )

	)

255 
	#ZG_CHECK_SECURITY_MODE
 ( 
ZG_SECURITY_MODE
 )

	)

266 
uöt16
 
zgPﬁlR©e
;

267 
uöt16
 
zgQueuedPﬁlR©e
;

268 
uöt16
 
zgRe•⁄£PﬁlR©e
;

269 
uöt16
 
zgRejoöPﬁlR©e
;

272 
uöt8
 
zgMaxD©aRërõs
;

273 
uöt8
 
zgMaxPﬁlFaûuªRërõs
;

275 
uöt32
 
zgDeÁu…Ch™√lLi°
;

276 
uöt8
 
zgDeÁu…SèπögSˇnDuøti⁄
;

278 
uöt8
 
zgSèckProfûe
;

280 
uöt8
 
zgIndúe˘MsgTimeout
;

281 
uöt8
 
zgSecurôyMode
;

282 
uöt8
 
zgSecuªPîmôJoö
;

283 
uöt8
 
zgCAPublicKey
[];

284 
uöt8
 
zgLoˇlCîtifiˇã
[];

285 
uöt8
 
zgSèticPriv©eKey
[];

286 
uöt8
 
zgRemŸePublicKey
[];

287 
uöt8
 
zgRouãExpúyTime
;

289 
uöt8
 
zgExãndedPANID
[];

291 
uöt8
 
zgMaxBˇ°Rëúes
;

292 
uöt8
 
zgPassiveAckTimeout
;

293 
uöt8
 
zgBˇ°DñivîyTime
;

295 
uöt8
 
zgNwkMode
;

297 
uöt8
 
zgC⁄˚¡øt‹E«bÀ
;

298 
uöt8
 
zgC⁄˚¡øt‹DiscovîyTime
;

299 
uöt8
 
zgC⁄˚¡øt‹Radius
;

300 
uöt8
 
zgMaxSour˚Rouã
;

301 
uöt8
 
zgC⁄˚¡øt‹RC
;

307 
uöt8
 
zgApscMaxFømeRërõs
;

308 
uöt16
 
zgApscAckWaôDuøti⁄PﬁÀd
;

309 
uöt8
 
zgApsAckWaôMu…ùlõr
;

310 
uöt16
 
zgApsDeÁu…MaxBödögTime
;

311 
uöt8
 
zgApsU£ExãndedPANID
[
Z_EXTADDR_LEN
];

312 
uöt8
 
zgApsU£In£cuªJoö
;

313 
uöt8
 
zgApscMaxWödowSize
;

314 
uöt16
 
zgApsI¡î‰ameDñay
;

315 
uöt8
 
zgApsN⁄MembîRadius
;

321 
uöt8
 
zgPªC⁄figKey
[];

322 
uöt8
 
zgPªC⁄figKeys
;

323 
uöt8
 
zgPªC⁄figTCLökKey
[];

329 
uöt16
 
zgC⁄figPANID
;

330 
uöt8
 
zgDevi˚LogiˇlTy≥
;

337 
uöt8
 
zgNwkMgrMode
;

347 
uöt8
 
zgInô
( );

354 
zgInôIãms
–
uöt8
 
£tDeÁu…
 );

359 
uöt8
 
zgRódSèπupO±i⁄s
( );

373 
uöt8
 
zgWrôeSèπupO±i⁄s
–uöt8 
a˘i⁄
, uöt8 
bôO±i⁄s
 );

379 
zgSëIãm
–
uöt16
 
id
, uöt16 
Àn
, *
buf
 );

383 #ifde‡
__˝lu•lus


	@Components/stack/zcl/zcl.c

43 
	~"ZComDef.h
"

44 
	~"OSAL.h
"

45 
	~"OSAL_Tasks.h
"

46 
	~"AF.h
"

47 
	~"ZDC⁄fig.h
"

49 
	~"z˛.h
"

50 
	~"z˛_gíîÆ.h
"

52 #i‡
deföed
 ( 
INTER_PAN
 )

53 
	~"°ub_≠s.h
"

60 
	#z˛_FCTy≥
–
a
 ) ( (aË& 
ZCL_FRAME_CONTROL_TYPE
 )

	)

61 
	#z˛_FCM™uS≥cific
–
a
 ) ( (aË& 
ZCL_FRAME_CONTROL_MANU_SPECIFIC
 )

	)

62 
	#z˛_FCDúe˘i⁄
–
a
 ) ( (aË& 
ZCL_FRAME_CONTROL_DIRECTION
 )

	)

63 
	#z˛_FCDißbÀDeÁu…R•
–
a
 ) ( (aË& 
ZCL_FRAME_CONTROL_DISABLE_DEFAULT_RSP
 )

	)

66 
	#z˛_Ac˚ssCålRód
–
a
 ) ( (aË& 
ACCESS_CONTROL_READ
 )

	)

67 
	#z˛_Ac˚ssCålWrôe
–
a
 ) ( (aË& 
ACCESS_CONTROL_WRITE
 )

	)

68 
	#z˛_Ac˚ssCålCmd
–
a
 ) ( (aË& 
ACCESS_CONTROL_CMD
 )

	)

70 
	#z˛P¨£Cmd
–
a
, 
b
 ) 
z˛CmdTabÀ
[◊)].
	`p‚P¨£InProfûe
–(bË)

	)

71 
	#z˛Pro˚ssCmd
–
a
, 
b
 ) 
z˛CmdTabÀ
[◊)].
	`p‚Pro˚ssInProfûe
–(bË)

	)

73 
	#z˛_DeÁu…R•Cmd
–
z˛Hdr
 ) ( 
	`z˛_ProfûeCmd
–(z˛Hdr).
fc
.
ty≥
 ) && \

	)

74 (
	gz˛Hdr
).
	gfc
.
	gm™uS≥cific
 == 0 && \

75 (
z˛Hdr
).
comm™dID
 =
ZCL_CMD_DEFAULT_RSP
 )

78 
	#CMD_HAS_RSP
–
cmd
 ) ( (cmdË=
ZCL_CMD_READ
 || \

	)

79 (
cmd
Ë=
ZCL_CMD_WRITE
 || \

80 (
cmd
Ë=
ZCL_CMD_WRITE_UNDIVIDED
 || \

81 (
cmd
Ë=
ZCL_CMD_CONFIG_REPORT
 || \

82 (
cmd
Ë=
ZCL_CMD_READ_REPORT_CFG
 || \

83 (
cmd
Ë=
ZCL_CMD_DISCOVER
 || \

84 (
cmd
Ë=
ZCL_CMD_DEFAULT_RSP
 )

93 
	sz˛LibPlugö


95 
z˛LibPlugö
 *
√xt
;

96 
uöt16
 
	m°¨tClu°îID
;

97 
uöt16
 
	mídClu°îID
;

98 
z˛InHdÃ_t
 
	mp‚IncomögHdÃ
;

99 } 
	tz˛LibPlugö_t
;

102 
	sz˛AârRecsLi°


104 
z˛AârRecsLi°
 *
	m√xt
;

105 
uöt8
 
	mídpoöt
;

106 
uöt8
 
	mnumAâribuãs
;

107 
CONST
 
z˛AârRec_t
 *
	m©ås
;

108 } 
	tz˛AârRecsLi°
;

111 
	sz˛Clu°îO±i⁄Li°


113 
z˛Clu°îO±i⁄Li°
 *
	m√xt
;

114 
uöt8
 
	mídpoöt
;

115 
uöt8
 
	mnumO±i⁄s
;

116 
z˛O±i⁄Rec_t
 *
	m›ti⁄s
;

117 } 
	tz˛Clu°îO±i⁄Li°
;

119 *(*
	tz˛P¨£InProfûeCmd_t
)–
	tz˛P¨£Cmd_t
 *
	tpCmd
 );

120 
	$uöt8
 (*
	tz˛Pro˚ssInProfûeCmd_t
)–
	tz˛Incomög_t
 *
	tpInMsg
 );

124 
z˛P¨£InProfûeCmd_t
 
p‚P¨£InProfûe
;

125 
z˛Pro˚ssInProfûeCmd_t
 
p‚Pro˚ssInProfûe
;

126 } 
	tz˛CmdIãms_t
;

132 
uöt8
 
z˛_TaskID
;

136 
uöt8
 
z˛_Regi°îedMsgTaskID
 = 
TASK_NO_TASK
;

139 
z˛VÆid©eAârD©a_t
 
z˛_VÆid©eAârD©aCB
 = 
NULL
;

142 
uöt8
 
z˛_SeqNum
 = 0x00;

155 
z˛LibPlugö_t
 *
∂ugös
;

156 
z˛AârRecsLi°
 *
©åLi°
;

157 
z˛Clu°îO±i⁄Li°
 *
˛u°îO±i⁄Li°
;

158 
uöt8
 
z˛_TønsID
 = 0;

163 
	`z˛Pro˚ssMesßgeMSG
–
afIncomögMSGPackë_t
 *
pkt
 );

164 
uöt8
 *
	`z˛BuûdHdr
–
z˛FømeHdr_t
 *
hdr
, uöt8 *
pD©a
 );

165 
uöt8
 
	`z˛CÆcHdrSize
–
z˛FømeHdr_t
 *
hdr
 );

166 
z˛LibPlugö_t
 *
	`z˛FödPlugö
–
uöt16
 
˛u°îID
, uöt16 
¥ofûeID
 );

167 
z˛O±i⁄Rec_t
 *
	`z˛FödClu°îO±i⁄
–
uöt8
 
ídpoöt
, 
uöt16
 
˛u°îID
 );

168 
uöt8
 
	`z˛GëClu°îO±i⁄
–uöt8 
ídpoöt
, 
uöt16
 
˛u°îID
 );

169 
	`z˛SëSecurôyO±i⁄
–
uöt8
 
ídpoöt
, 
uöt16
 
˛u°îID
, uöt8 
íabÀ
 );

171 
uöt8
 
	`z˛_Devi˚O≥øti⁄Æ
–uöt8 
§cEP
, 
uöt16
 
˛u°îID
, uöt8 
‰ameTy≥
, uöt8 
cmd
, uöt16 
¥ofûeID
 );

173 #i‡
	`deföed
(
ZCL_READ
Ë|| deföed(
ZCL_WRITE
Ë|| deföed(
ZCL_REPORT
)

174 
	`z˛SîülizeD©a
–
uöt8
 
d©aTy≥
, *
©åD©a
, uöt8 *
buf
 );

177 #ifde‡
ZCL_READ


178 *
	`z˛P¨£InRódR•Cmd
–
z˛P¨£Cmd_t
 *
pCmd
 );

179 
uöt8
 
	`z˛Pro˚ssInRódCmd
–
z˛Incomög_t
 *
pInMsg
 );

182 #ifde‡
ZCL_WRITE


183 
uöt8
 
	`z˛WrôeAârD©a
–
z˛AârRec_t
 *
pAâr
, 
z˛WrôeRec_t
 *
pWrôeRec
 );

184 *
	`z˛P¨£InWrôeR•Cmd
–
z˛P¨£Cmd_t
 *
pCmd
 );

185 
uöt8
 
	`z˛Pro˚ssInWrôeCmd
–
z˛Incomög_t
 *
pInMsg
 );

186 
uöt8
 
	`z˛Pro˚ssInWrôeUndividedCmd
–
z˛Incomög_t
 *
pInMsg
 );

189 #ifde‡
ZCL_REPORT


190 *
	`z˛P¨£InC⁄figRï‹tR•Cmd
–
z˛P¨£Cmd_t
 *
pCmd
 );

191 *
	`z˛P¨£InRódRï‹tCfgR•Cmd
–
z˛P¨£Cmd_t
 *
pCmd
 );

194 *
	`z˛P¨£InDeÁu…R•Cmd
–
z˛P¨£Cmd_t
 *
pCmd
 );

196 #ifde‡
ZCL_DISCOVER


197 
uöt8
 
	`z˛FödNextAârRec
–uöt8 
ídpoöt
, 
uöt16
 
˛u°îID
, uöt16 *
©åId
, 
z˛AârRec_t
 *
pAâr
 );

198 *
	`z˛P¨£InDiscR•Cmd
–
z˛P¨£Cmd_t
 *
pCmd
 );

199 
uöt8
 
	`z˛Pro˚ssInDiscCmd
–
z˛Incomög_t
 *
pInMsg
 );

202 
uöt8
 
	`z˛SídMsg
–
z˛Incomög_t
 *
pInMsg
 );

207 
CONST
 
z˛CmdIãms_t
 
z˛CmdTabÀ
[] =

209 #ifde‡
ZCL_READ


210  { 
z˛P¨£InRódCmd
, 
z˛Pro˚ssInRódCmd
 },

211  { 
z˛P¨£InRódR•Cmd
, 
z˛SídMsg
 },

213  { 
NULL
, NULL },

214  { 
NULL
, NULL },

217 #ifde‡
ZCL_WRITE


218  { 
z˛P¨£InWrôeCmd
, 
z˛Pro˚ssInWrôeCmd
 },

219  { 
z˛P¨£InWrôeCmd
, 
z˛Pro˚ssInWrôeUndividedCmd
 },

220  { 
z˛P¨£InWrôeR•Cmd
, 
z˛SídMsg
 },

221  { 
z˛P¨£InWrôeCmd
, 
z˛Pro˚ssInWrôeCmd
 },

223  { 
NULL
, NULL },

224  { 
NULL
, NULL },

225  { 
NULL
, NULL },

226  { 
NULL
, NULL },

229 #ifde‡
ZCL_REPORT


230  { 
z˛P¨£InC⁄figRï‹tCmd
, 
z˛SídMsg
 },

231  { 
z˛P¨£InC⁄figRï‹tR•Cmd
, 
z˛SídMsg
 },

232  { 
z˛P¨£InRódRï‹tCfgCmd
, 
z˛SídMsg
 },

233  { 
z˛P¨£InRódRï‹tCfgR•Cmd
, 
z˛SídMsg
 },

234  { 
z˛P¨£InRï‹tCmd
, 
z˛SídMsg
 },

236  { 
NULL
, NULL },

237  { 
NULL
, NULL },

238  { 
NULL
, NULL },

239  { 
NULL
, NULL },

240  { 
NULL
, NULL },

243  { 
z˛P¨£InDeÁu…R•Cmd
, 
z˛SídMsg
 },

245 #ifde‡
ZCL_DISCOVER


246  { 
z˛P¨£InDiscCmd
, 
z˛Pro˚ssInDiscCmd
 },

247  { 
z˛P¨£InDiscR•Cmd
, 
z˛SídMsg
 }

249  { 
NULL
, NULL },

250  { 
NULL
, NULL }

252 
	}
};

267 
	$z˛_Inô
–
uöt8
 
èsk_id
 )

269 
z˛_TaskID
 = 
èsk_id
;

271 
∂ugös
 = (
z˛LibPlugö_t
 *)
NULL
;

272 
©åLi°
 = (
z˛AârRecsLi°
 *)
NULL
;

273 
˛u°îO±i⁄Li°
 = (
z˛Clu°îO±i⁄Li°
 *)
NULL
;

274 
	}
}

286 
uöt16
 
	$z˛_evít_lo›
–
uöt8
 
èsk_id
, 
uöt16
 
evíts
 )

288 
uöt8
 *
msgPå
;

290 ()
èsk_id
;

292 i‡–
evíts
 & 
SYS_EVENT_MSG
 )

294 
msgPå
 = 
	`oßl_msg_ª˚ive
–
z˛_TaskID
 );

295  
msgPå
 !
NULL
 )

297 
uöt8
 
dóŒoc
 = 
TRUE
;

299 i‡–*
msgPå
 =
AF_INCOMING_MSG_CMD
 )

301 
	`z˛Pro˚ssMesßgeMSG
–(
afIncomögMSGPackë_t
 *)
msgPå
 );

303 i‡–
z˛_Regi°îedMsgTaskID
 !
TASK_NO_TASK
 )

306 
	`oßl_msg_£nd
–
z˛_Regi°îedMsgTaskID
, 
msgPå
 );

307 
dóŒoc
 = 
FALSE
;

311 i‡–
dóŒoc
 )

313 
	`oßl_msg_dóŒoˇã
–
msgPå
 );

317 
msgPå
 = 
	`oßl_msg_ª˚ive
–
z˛_TaskID
 );

321  (
evíts
 ^ 
SYS_EVENT_MSG
);

326 
	}
}

339 
ZSètus_t
 
	$z˛_ªgi°îPlugö
–
uöt16
 
°¨tClu°îID
,

340 
uöt16
 
ídClu°îID
, 
z˛InHdÃ_t
 
p‚IncomögHdÃ
 )

342 
z˛LibPlugö_t
 *
pNewIãm
;

343 
z˛LibPlugö_t
 *
pLo›
;

346 
pNewIãm
 = 
	`oßl_mem_Æloc
––
z˛LibPlugö_t
 ) );

347 i‡–
pNewIãm
 =
NULL
 )

348  (
ZMemEº‹
);

351 
pNewIãm
->
√xt
 = (
z˛LibPlugö_t
 *)
NULL
;

352 
pNewIãm
->
°¨tClu°îID
 = startClusterID;

353 
pNewIãm
->
ídClu°îID
 =ÉndClusterID;

354 
pNewIãm
->
p‚IncomögHdÃ
 =ÖfnIncomingHdlr;

357 i‡–
∂ugös
 =
NULL
 )

359 
∂ugös
 = 
pNewIãm
;

364 
pLo›
 = 
∂ugös
;

365  
pLo›
->
√xt
 !
NULL
 )

366 
pLo›
 =ÖLo›->
√xt
;

369 
pLo›
->
√xt
 = 
pNewIãm
;

372  ( 
ZSuc˚ss
 );

373 
	}
}

389 
ZSètus_t
 
	$z˛_ªgi°îAârLi°
–
uöt8
 
ídpoöt
, uöt8 
numAâr
, 
CONST
 
z˛AârRec_t
 
√wAârLi°
[] )

391 
z˛AârRecsLi°
 *
pNewIãm
;

392 
z˛AârRecsLi°
 *
pLo›
;

395 
pNewIãm
 = 
	`oßl_mem_Æloc
––
z˛AârRecsLi°
 ) );

396 i‡–
pNewIãm
 =
NULL
 )

397  (
ZMemEº‹
);

399 
pNewIãm
->
√xt
 = (
z˛AârRecsLi°
 *)
NULL
;

400 
pNewIãm
->
ídpoöt
 =Éndpoint;

401 
pNewIãm
->
numAâribuãs
 = 
numAâr
;

402 
pNewIãm
->
©ås
 = 
√wAârLi°
;

405 i‡–
©åLi°
 =
NULL
 )

407 
©åLi°
 = 
pNewIãm
;

412 
pLo›
 = 
©åLi°
;

413  
pLo›
->
√xt
 !
NULL
 )

414 
pLo›
 =ÖLo›->
√xt
;

417 
pLo›
->
√xt
 = 
pNewIãm
;

420  ( 
ZSuc˚ss
 );

421 
	}
}

441 
ZSètus_t
 
	$z˛_ªgi°îClu°îO±i⁄Li°
–
uöt8
 
ídpoöt
, uöt8 
numO±i⁄
, 
z˛O±i⁄Rec_t
 
›ti⁄Li°
[] )

443 
z˛Clu°îO±i⁄Li°
 *
pNewIãm
;

444 
z˛Clu°îO±i⁄Li°
 *
pLo›
;

447 
pNewIãm
 = 
	`oßl_mem_Æloc
––
z˛Clu°îO±i⁄Li°
 ) );

448 i‡–
pNewIãm
 =
NULL
 )

449  (
ZMemEº‹
);

451 
pNewIãm
->
√xt
 = (
z˛Clu°îO±i⁄Li°
 *)
NULL
;

452 
pNewIãm
->
ídpoöt
 =Éndpoint;

453 
pNewIãm
->
numO±i⁄s
 = 
numO±i⁄
;

454 
pNewIãm
->
›ti⁄s
 = 
›ti⁄Li°
;

457 i‡–
˛u°îO±i⁄Li°
 =
NULL
 )

459 
˛u°îO±i⁄Li°
 = 
pNewIãm
;

464 
pLo›
 = 
˛u°îO±i⁄Li°
;

465  
pLo›
->
√xt
 !
NULL
 )

466 
pLo›
 =ÖLo›->
√xt
;

469 
pLo›
->
√xt
 = 
pNewIãm
;

472  ( 
ZSuc˚ss
 );

473 
	}
}

484 
ZSètus_t
 
	$z˛_ªgi°îVÆid©eAârD©a
–
z˛VÆid©eAârD©a_t
 
p‚VÆid©eAârD©a
 )

486 
z˛_VÆid©eAârD©aCB
 = 
p‚VÆid©eAârD©a
;

488  ( 
ZSuc˚ss
 );

489 
	}
}

502 
uöt8
 
	$z˛_ªgi°îF‹Msg
–
uöt8
 
èskId
 )

505 i‡–
z˛_Regi°îedMsgTaskID
 =
TASK_NO_TASK
 )

507 
z˛_Regi°îedMsgTaskID
 = 
èskId
;

509  ( 
åue
 );

512  ( 
Ál£
 );

513 
	}
}

528 
uöt8
 
	$z˛_Devi˚O≥øti⁄Æ
–
uöt8
 
§cEP
, 
uöt16
 
˛u°îID
,

529 
uöt8
 
‰ameTy≥
, uöt8 
cmd
, 
uöt16
 
¥ofûeID
 )

531 
z˛AârRec_t
 
©åRec
;

532 
uöt8
 
devi˚E«bÀd
 = 
DEVICE_ENABLED
;

534 ()
¥ofûeID
;

540 i‡–
	`z˛_ProfûeCmd
–
‰ameTy≥
 ) && 
cmd
 <
ZCL_CMD_WRITE_NO_RSP
 )

541  ( 
TRUE
 );

543 i‡–
˛u°îID
 =
ZCL_CLUSTER_ID_GEN_IDENTIFY
 )

544  ( 
TRUE
 );

547 i‡–
	`z˛FödAârRec
–
§cEP
, 
ZCL_CLUSTER_ID_GEN_BASIC
, 
ATTRID_BASIC_DEVICE_ENABLED
, &
©åRec
 ) )

548 
	`z˛RódAârD©a
–&
devi˚E«bÀd
, &
©åRec
 );

550  ( 
devi˚E«bÀd
 =
DEVICE_ENABLED
 ? 
TRUE
 : 
FALSE
 );

551 
	}
}

575 
ZSètus_t
 
	$z˛_SídComm™d
–
uöt8
 
§cEP
, 
afAddrTy≥_t
 *
de°Addr
,

576 
uöt16
 
˛u°îID
, 
uöt8
 
cmd
, uöt8 
•ecific
, uöt8 
dúe˘i⁄
,

577 
uöt8
 
dißbÀDeÁu…R•
, 
uöt16
 
m™uCode
, uöt8 
£qNum
,

578 
uöt8
 
cmdF‹m©Lí
, uöt8 *
cmdF‹m©
 )

580 
ídPoötDesc_t
 *
ïDesc
;

581 
z˛FømeHdr_t
 
hdr
;

582 
uöt8
 *
msgBuf
;

583 
uöt8
 
msgLí
;

584 
uöt8
 *
pBuf
;

585 
afAddrTy≥_t
 
d°Addr
;

586 
uöt8
 
›ti⁄s
;

587 
ZSètus_t
 
°©us
;

589 
	`oßl_mem˝y
–&
d°Addr
, 
de°Addr
,  ( 
afAddrTy≥_t
 ) );

591 
ïDesc
 = 
	`afFödEndPoötDesc
–
§cEP
 );

592 i‡–
ïDesc
 =
NULL
 )

593  ( 
ZInvÆidP¨amëî
 );

595 i‡–
˛u°îID
 =
ZCL_INVALID_CLUSTER_ID
 )

596  ( 
ZInvÆidP¨amëî
 );

598 #i‡
	`deföed
 ( 
INTER_PAN
 )

599 i‡–
	`StubAPS_I¡îP™
–
de°Addr
->
∑nId
, de°Addr->
ídPoöt
 ) )

600 
›ti⁄s
 = 
AF_TX_OPTIONS_NONE
;

603 
›ti⁄s
 = 
	`z˛GëClu°îO±i⁄
–
§cEP
, 
˛u°îID
 );

605 
	`oßl_mem£t
–&
hdr
, 0, –
z˛FømeHdr_t
 ) );

608 i‡–
•ecific
 )

609 
hdr
.
fc
.
ty≥
 = 
ZCL_FRAME_TYPE_SPECIFIC_CMD
;

611 
hdr
.
fc
.
ty≥
 = 
ZCL_FRAME_TYPE_PROFILE_CMD
;

613 i‡–
	`z˛_Devi˚O≥øti⁄Æ
–
§cEP
, 
˛u°îID
, 
hdr
.
fc
.
ty≥
, 
cmd
, 
ïDesc
->
sim∂eDesc
->
AµProfId
 ) =
FALSE
 )

614  ( 
ZFaûuª
 );

617 i‡–
m™uCode
 != 0 )

619 
hdr
.
fc
.
m™uS≥cific
 = 1;

620 
hdr
.
m™uCode
 = manuCode;

624 i‡–
dúe˘i⁄
 )

625 
hdr
.
fc
.
dúe˘i⁄
 = 
ZCL_FRAME_SERVER_CLIENT_DIR
;

627 
hdr
.
fc
.
dúe˘i⁄
 = 
ZCL_FRAME_CLIENT_SERVER_DIR
;

630 i‡–
dißbÀDeÁu…R•
 )

631 
hdr
.
fc
.
dißbÀDeÁu…R•
 = 1;

633 
hdr
.
fc
.
dißbÀDeÁu…R•
 = 0;

636 
hdr
.
å™sSeqNum
 = 
£qNum
;

639 
hdr
.
comm™dID
 = 
cmd
;

642 
msgLí
 = 
	`z˛CÆcHdrSize
–&
hdr
 );

643 
msgLí
 +
cmdF‹m©Lí
;

646 
msgBuf
 = 
	`oßl_mem_Æloc
–
msgLí
 );

647 i‡–
msgBuf
 !
NULL
 )

650 
pBuf
 = 
	`z˛BuûdHdr
–&
hdr
, 
msgBuf
 );

653 
	`oßl_mem˝y
–
pBuf
, 
cmdF‹m©
, 
cmdF‹m©Lí
 );

655 
°©us
 = 
	`AF_D©aReque°
–&
d°Addr
, 
ïDesc
, 
˛u°îID
, 
msgLí
, 
msgBuf
,

656 &
z˛_TønsID
, 
›ti⁄s
, 
AF_DEFAULT_RADIUS
 );

657 
	`oßl_mem_‰ì
 ( 
msgBuf
 );

660 
°©us
 = 
ZMemEº‹
;

662  ( 
°©us
 );

663 
	}
}

665 #ifde‡
ZCL_READ


680 
ZSètus_t
 
	$z˛_SídRód
–
uöt8
 
§cEP
, 
afAddrTy≥_t
 *
d°Addr
,

681 
uöt16
 
˛u°îID
, 
z˛RódCmd_t
 *
ªadCmd
,

682 
uöt8
 
dúe˘i⁄
, uöt8 
dißbÀDeÁu…R•
, uöt8 
£qNum
)

684 
uöt8
 
d©aLí
;

685 
uöt8
 *
buf
;

686 
uöt8
 *
pBuf
;

687 
ZSètus_t
 
°©us
;

689 
d©aLí
 = 
ªadCmd
->
numAâr
 * 2;

691 
buf
 = 
	`oßl_mem_Æloc
–
d©aLí
 );

692 i‡–
buf
 !
NULL
 )

694 
uöt8
 
i
;

697 
pBuf
 = 
buf
;

698 
i
 = 0; i < 
ªadCmd
->
numAâr
; i++)

700 *
pBuf
++ = 
	`LO_UINT16
–
ªadCmd
->
©åID
[
i
] );

701 *
pBuf
++ = 
	`HI_UINT16
–
ªadCmd
->
©åID
[
i
] );

704 
°©us
 = 
	`z˛_SídComm™d
–
§cEP
, 
d°Addr
, 
˛u°îID
, 
ZCL_CMD_READ
, 
FALSE
,

705 
dúe˘i⁄
, 
dißbÀDeÁu…R•
, 0, 
£qNum
, 
d©aLí
, 
buf
 );

706 
	`oßl_mem_‰ì
–
buf
 );

709 
°©us
 = 
ZMemEº‹
;

711  ( 
°©us
 );

712 
	}
}

728 
ZSètus_t
 
	$z˛_SídRódR•
–
uöt8
 
§cEP
, 
afAddrTy≥_t
 *
d°Addr
,

729 
uöt16
 
˛u°îID
, 
z˛RódR•Cmd_t
 *
ªadR•Cmd
,

730 
uöt8
 
dúe˘i⁄
, uöt8 
dißbÀDeÁu…R•
, uöt8 
£qNum
 )

732 
uöt8
 *
buf
;

733 
uöt8
 *
pBuf
;

734 
z˛RódR•Sètus_t
 *
°©usRec
;

735 
uöt8
 
Àn
 = 0;

736 
uöt8
 
i
;

737 
ZSètus_t
 
°©us
;

740  
i
 = 0; i < 
ªadR•Cmd
->
numAâr
; i++ )

742 
°©usRec
 = &(
ªadR•Cmd
->
©åLi°
[
i
]);

744 
Àn
 += 2 + 1;

746 i‡–
°©usRec
->
°©us
 =
ZCL_STATUS_SUCCESS
 )

748 
Àn
++;

749 
Àn
 +
	`z˛GëAârD©aLígth
–
°©usRec
->
d©aTy≥
, sètusRec->
d©a
);

753 
buf
 = 
	`oßl_mem_Æloc
–
Àn
 );

754 i‡–
buf
 !
NULL
 )

757 
pBuf
 = 
buf
;

758  
i
 = 0; i < 
ªadR•Cmd
->
numAâr
; i++ )

760 
°©usRec
 = &(
ªadR•Cmd
->
©åLi°
[
i
]);

762 *
pBuf
++ = 
	`LO_UINT16
–
°©usRec
->
©åID
 );

763 *
pBuf
++ = 
	`HI_UINT16
–
°©usRec
->
©åID
 );

764 *
pBuf
++ = 
°©usRec
->
°©us
;

766 i‡–
°©usRec
->
°©us
 =
ZCL_STATUS_SUCCESS
 )

768 *
pBuf
++ = 
°©usRec
->
d©aTy≥
;

769 
	`z˛SîülizeD©a
–
°©usRec
->
d©aTy≥
, sètusRec->
d©a
, 
pBuf
 );

772 
pBuf
 +
	`z˛GëAârD©aLígth
–
°©usRec
->
d©aTy≥
, sètusRec->
d©a
 );

776 
°©us
 = 
	`z˛_SídComm™d
–
§cEP
, 
d°Addr
, 
˛u°îID
, 
ZCL_CMD_READ_RSP
, 
FALSE
,

777 
dúe˘i⁄
, 
dißbÀDeÁu…R•
, 0, 
£qNum
, 
Àn
, 
buf
 );

778 
	`oßl_mem_‰ì
–
buf
 );

781 
°©us
 = 
ZMemEº‹
;

783  ( 
°©us
 );

784 
	}
}

787 #ifde‡
ZCL_WRITE


802 
ZSètus_t
 
	$z˛_SídWrôeReque°
–
uöt8
 
§cEP
, 
afAddrTy≥_t
 *
d°Addr
, 
uöt16
 
˛u°îID
,

803 
z˛WrôeCmd_t
 *
wrôeCmd
, 
uöt8
 
cmd
, uöt8 
dúe˘i⁄
,

804 
uöt8
 
dißbÀDeÁu…R•
, uöt8 
£qNum
 )

806 
uöt8
 *
buf
;

807 
uöt8
 *
pBuf
;

808 
z˛WrôeRec_t
 *
°©usRec
;

809 
uöt8
 
©åD©aLí
;

810 
uöt8
 
d©aLí
 = 0;

811 
uöt8
 
i
;

812 
ZSètus_t
 
°©us
;

814  
i
 = 0; i < 
wrôeCmd
->
numAâr
; i++ )

816 
°©usRec
 = &(
wrôeCmd
->
©åLi°
[
i
]);

818 
©åD©aLí
 = 
	`z˛GëAârD©aLígth
–
°©usRec
->
d©aTy≥
, sètusRec->
©åD©a
 );

819 
d©aLí
 +2 + 1 + 
©åD©aLí
;

822 
buf
 = 
	`oßl_mem_Æloc
–
d©aLí
 );

823 i‡–
buf
 !
NULL
 )

826 
pBuf
 = 
buf
;

827  
i
 = 0; i < 
wrôeCmd
->
numAâr
; i++ )

829 
°©usRec
 = &(
wrôeCmd
->
©åLi°
[
i
]);

831 *
pBuf
++ = 
	`LO_UINT16
–
°©usRec
->
©åID
 );

832 *
pBuf
++ = 
	`HI_UINT16
–
°©usRec
->
©åID
 );

833 *
pBuf
++ = 
°©usRec
->
d©aTy≥
;

835 
	`z˛SîülizeD©a
–
°©usRec
->
d©aTy≥
, sètusRec->
©åD©a
, 
pBuf
 );

837 
©åD©aLí
 = 
	`z˛GëAârD©aLígth
–
°©usRec
->
d©aTy≥
, sètusRec->
©åD©a
 );

838 
pBuf
 +
©åD©aLí
;

841 
°©us
 = 
	`z˛_SídComm™d
–
§cEP
, 
d°Addr
, 
˛u°îID
, 
cmd
, 
FALSE
,

842 
dúe˘i⁄
, 
dißbÀDeÁu…R•
, 0, 
£qNum
, 
d©aLí
, 
buf
 );

843 
	`oßl_mem_‰ì
–
buf
 );

846 
°©us
 = 
ZMemEº‹
;

848  ( 
°©us
);

849 
	}
}

864 
ZSètus_t
 
	$z˛_SídWrôeR•
–
uöt8
 
§cEP
, 
afAddrTy≥_t
 *
d°Addr
,

865 
uöt16
 
˛u°îID
, 
z˛WrôeR•Cmd_t
 *
wrôeR•Cmd
,

866 
uöt8
 
dúe˘i⁄
, uöt8 
dißbÀDeÁu…R•
, uöt8 
£qNum
 )

868 
uöt8
 
d©aLí
;

869 
uöt8
 *
buf
;

870 
uöt8
 *
pBuf
;

871 
uöt8
 
i
;

872 
ZSètus_t
 
°©us
;

874 
d©aLí
 = 
wrôeR•Cmd
->
numAâr
 * ( 1 + 2 );

876 
buf
 = 
	`oßl_mem_Æloc
–
d©aLí
 );

877 i‡–
buf
 !
NULL
 )

880 
pBuf
 = 
buf
;

881  
i
 = 0; i < 
wrôeR•Cmd
->
numAâr
; i++ )

883 *
pBuf
++ = 
wrôeR•Cmd
->
©åLi°
[
i
].
°©us
;

884 *
pBuf
++ = 
	`LO_UINT16
–
wrôeR•Cmd
->
©åLi°
[
i
].
©åID
 );

885 *
pBuf
++ = 
	`HI_UINT16
–
wrôeR•Cmd
->
©åLi°
[
i
].
©åID
 );

890 i‡–
wrôeR•Cmd
->
numAâr
 =1 && wrôeR•Cmd->
©åLi°
[0].
°©us
 =
ZCL_STATUS_SUCCESS
 )

891 
d©aLí
 = 1;

893 
°©us
 = 
	`z˛_SídComm™d
–
§cEP
, 
d°Addr
, 
˛u°îID
, 
ZCL_CMD_WRITE_RSP
, 
FALSE
,

894 
dúe˘i⁄
, 
dißbÀDeÁu…R•
, 0, 
£qNum
, 
d©aLí
, 
buf
 );

895 
	`oßl_mem_‰ì
–
buf
 );

898 
°©us
 = 
ZMemEº‹
;

900  ( 
°©us
 );

901 
	}
}

904 #ifde‡
ZCL_REPORT


918 
ZSètus_t
 
	$z˛_SídC⁄figRï‹tCmd
–
uöt8
 
§cEP
, 
afAddrTy≥_t
 *
d°Addr
,

919 
uöt16
 
˛u°îID
, 
z˛CfgRï‹tCmd_t
 *
cfgRï‹tCmd
,

920 
uöt8
 
dúe˘i⁄
, uöt8 
dißbÀDeÁu…R•
, uöt8 
£qNum
 )

922 
uöt8
 *
buf
;

923 
uöt8
 *
pBuf
;

924 
uöt8
 
d©aLí
 = 0;

925 
z˛CfgRï‹tRec_t
 *
ªp‹tRec
;

926 
uöt8
 
ªp‹tCh™geLí
;

927 
uöt8
 
i
;

928 
ZSètus_t
 
°©us
;

931  
i
 = 0; i < 
cfgRï‹tCmd
->
numAâr
; i++ )

933 
ªp‹tRec
 = &(
cfgRï‹tCmd
->
©åLi°
[
i
]);

935 
d©aLí
 += 1 + 2;

936 
ªp‹tCh™geLí
 = 0;

938 i‡–
ªp‹tRec
->
dúe˘i⁄
 =
ZCL_SEND_ATTR_REPORTS
 )

940 
d©aLí
 += 1 + 2 + 2;

943 i‡–
	`z˛A«logD©aTy≥
–
ªp‹tRec
->
d©aTy≥
 ) )

945 
ªp‹tCh™geLí
 = 
	`z˛GëD©aTy≥Lígth
–
ªp‹tRec
->
d©aTy≥
 );

946 
d©aLí
 +
ªp‹tCh™geLí
;

951 
d©aLí
 += 2;

955 
buf
 = 
	`oßl_mem_Æloc
–
d©aLí
 );

956 i‡–
buf
 !
NULL
 )

959 
pBuf
 = 
buf
;

960  
i
 = 0; i < 
cfgRï‹tCmd
->
numAâr
; i++ )

962 
ªp‹tRec
 = &(
cfgRï‹tCmd
->
©åLi°
[
i
]);

964 *
pBuf
++ = 
ªp‹tRec
->
dúe˘i⁄
;

965 *
pBuf
++ = 
	`LO_UINT16
–
ªp‹tRec
->
©åID
 );

966 *
pBuf
++ = 
	`HI_UINT16
–
ªp‹tRec
->
©åID
 );

968 i‡–
ªp‹tRec
->
dúe˘i⁄
 =
ZCL_SEND_ATTR_REPORTS
 )

970 *
pBuf
++ = 
ªp‹tRec
->
d©aTy≥
;

971 *
pBuf
++ = 
	`LO_UINT16
–
ªp‹tRec
->
möRï‹tI¡
 );

972 *
pBuf
++ = 
	`HI_UINT16
–
ªp‹tRec
->
möRï‹tI¡
 );

973 *
pBuf
++ = 
	`LO_UINT16
–
ªp‹tRec
->
maxRï‹tI¡
 );

974 *
pBuf
++ = 
	`HI_UINT16
–
ªp‹tRec
->
maxRï‹tI¡
 );

976 i‡–
	`z˛A«logD©aTy≥
–
ªp‹tRec
->
d©aTy≥
 ) )

978 
	`z˛SîülizeD©a
–
ªp‹tRec
->
d©aTy≥
,Ñï‹tRec->
ªp‹èbÀCh™ge
, 
pBuf
 );

979 
ªp‹tCh™geLí
 = 
	`z˛GëD©aTy≥Lígth
–
ªp‹tRec
->
d©aTy≥
 );

980 
pBuf
 +
ªp‹tCh™geLí
;

985 *
pBuf
++ = 
	`LO_UINT16
–
ªp‹tRec
->
timeoutPîiod
 );

986 *
pBuf
++ = 
	`HI_UINT16
–
ªp‹tRec
->
timeoutPîiod
 );

990 
°©us
 = 
	`z˛_SídComm™d
–
§cEP
, 
d°Addr
, 
˛u°îID
, 
ZCL_CMD_CONFIG_REPORT
, 
FALSE
,

991 
dúe˘i⁄
, 
dißbÀDeÁu…R•
, 0, 
£qNum
, 
d©aLí
, 
buf
 );

992 
	`oßl_mem_‰ì
–
buf
 );

995 
°©us
 = 
ZMemEº‹
;

997  ( 
°©us
 );

998 
	}
}

1013 
ZSètus_t
 
	$z˛_SídC⁄figRï‹tR•Cmd
–
uöt8
 
§cEP
, 
afAddrTy≥_t
 *
d°Addr
,

1014 
uöt16
 
˛u°îID
, 
z˛CfgRï‹tR•Cmd_t
 *
cfgRï‹tR•Cmd
,

1015 
uöt8
 
dúe˘i⁄
, uöt8 
dißbÀDeÁu…R•
, uöt8 
£qNum
 )

1017 
uöt8
 
d©aLí
;

1018 
uöt8
 *
buf
;

1019 
uöt8
 *
pBuf
;

1020 
uöt8
 
i
;

1021 
ZSètus_t
 
°©us
;

1024 
d©aLí
 = 
cfgRï‹tR•Cmd
->
numAâr
 * ( 1 + 1 + 2 );

1026 
buf
 = 
	`oßl_mem_Æloc
–
d©aLí
 );

1027 i‡–
buf
 !
NULL
 )

1030 
pBuf
 = 
buf
;

1031  
i
 = 0; i < 
cfgRï‹tR•Cmd
->
numAâr
; i++ )

1033 *
pBuf
++ = 
cfgRï‹tR•Cmd
->
©åLi°
[
i
].
°©us
;

1034 *
pBuf
++ = 
cfgRï‹tR•Cmd
->
©åLi°
[
i
].
dúe˘i⁄
;

1035 *
pBuf
++ = 
	`LO_UINT16
–
cfgRï‹tR•Cmd
->
©åLi°
[
i
].
©åID
 );

1036 *
pBuf
++ = 
	`HI_UINT16
–
cfgRï‹tR•Cmd
->
©åLi°
[
i
].
©åID
 );

1041 i‡–
cfgRï‹tR•Cmd
->
numAâr
 =1 && cfgRï‹tR•Cmd->
©åLi°
[0].
°©us
 =
ZCL_STATUS_SUCCESS
 )

1042 
d©aLí
 = 1;

1044 
°©us
 = 
	`z˛_SídComm™d
–
§cEP
, 
d°Addr
, 
˛u°îID
,

1045 
ZCL_CMD_CONFIG_REPORT_RSP
, 
FALSE
, 
dúe˘i⁄
,

1046 
dißbÀDeÁu…R•
, 0, 
£qNum
, 
d©aLí
, 
buf
 );

1047 
	`oßl_mem_‰ì
–
buf
 );

1050 
°©us
 = 
ZMemEº‹
;

1052  ( 
°©us
 );

1053 
	}
}

1068 
ZSètus_t
 
	$z˛_SídRódRï‹tCfgCmd
–
uöt8
 
§cEP
, 
afAddrTy≥_t
 *
d°Addr
,

1069 
uöt16
 
˛u°îID
, 
z˛RódRï‹tCfgCmd_t
 *
ªadRï‹tCfgCmd
,

1070 
uöt8
 
dúe˘i⁄
, uöt8 
dißbÀDeÁu…R•
, uöt8 
£qNum
 )

1072 
uöt8
 
d©aLí
;

1073 
uöt8
 *
buf
;

1074 
uöt8
 *
pBuf
;

1075 
uöt8
 
i
;

1076 
ZSètus_t
 
°©us
;

1078 
d©aLí
 = 
ªadRï‹tCfgCmd
->
numAâr
 * ( 1 + 2 );

1080 
buf
 = 
	`oßl_mem_Æloc
–
d©aLí
 );

1081 i‡–
buf
 !
NULL
 )

1084 
pBuf
 = 
buf
;

1085  
i
 = 0; i < 
ªadRï‹tCfgCmd
->
numAâr
; i++ )

1087 *
pBuf
++ = 
ªadRï‹tCfgCmd
->
©åLi°
[
i
].
dúe˘i⁄
;

1088 *
pBuf
++ = 
	`LO_UINT16
–
ªadRï‹tCfgCmd
->
©åLi°
[
i
].
©åID
 );

1089 *
pBuf
++ = 
	`HI_UINT16
–
ªadRï‹tCfgCmd
->
©åLi°
[
i
].
©åID
 );

1092 
°©us
 = 
	`z˛_SídComm™d
–
§cEP
, 
d°Addr
, 
˛u°îID
, 
ZCL_CMD_READ_REPORT_CFG
, 
FALSE
,

1093 
dúe˘i⁄
, 
dißbÀDeÁu…R•
, 0, 
£qNum
, 
d©aLí
, 
buf
 );

1094 
	`oßl_mem_‰ì
–
buf
 );

1097 
°©us
 = 
ZMemEº‹
;

1099  ( 
°©us
 );

1100 
	}
}

1115 
ZSètus_t
 
	$z˛_SídRódRï‹tCfgR•Cmd
–
uöt8
 
§cEP
, 
afAddrTy≥_t
 *
d°Addr
,

1116 
uöt16
 
˛u°îID
, 
z˛RódRï‹tCfgR•Cmd_t
 *
ªadRï‹tCfgR•Cmd
,

1117 
uöt8
 
dúe˘i⁄
, uöt8 
dißbÀDeÁu…R•
, uöt8 
£qNum
 )

1119 
uöt8
 *
buf
;

1120 
uöt8
 *
pBuf
;

1121 
uöt8
 
d©aLí
 = 0;

1122 
z˛Rï‹tCfgR•Rec_t
 *
ªp‹tR•Rec
;

1123 
uöt8
 
ªp‹tCh™geLí
;

1124 
uöt8
 
i
;

1125 
ZSètus_t
 
°©us
;

1128  
i
 = 0; i < 
ªadRï‹tCfgR•Cmd
->
numAâr
; i++ )

1130 
ªp‹tR•Rec
 = &(
ªadRï‹tCfgR•Cmd
->
©åLi°
[
i
]);

1132 
d©aLí
 += 1 + 1 + 2 ;

1134 i‡–
ªp‹tR•Rec
->
°©us
 =
ZCL_STATUS_SUCCESS
 )

1136 i‡–
ªp‹tR•Rec
->
dúe˘i⁄
 =
ZCL_SEND_ATTR_REPORTS
 )

1138 
d©aLí
 += 1 + 2 + 2;

1140 i‡–
	`z˛A«logD©aTy≥
–
ªp‹tR•Rec
->
d©aTy≥
 ) )

1142 
ªp‹tCh™geLí
 = 
	`z˛GëD©aTy≥Lígth
–
ªp‹tR•Rec
->
d©aTy≥
 );

1143 
d©aLí
 +
ªp‹tCh™geLí
;

1148 
d©aLí
 += 2;

1153 
buf
 = 
	`oßl_mem_Æloc
–
d©aLí
 );

1154 i‡–
buf
 !
NULL
 )

1157 
pBuf
 = 
buf
;

1159  
i
 = 0; i < 
ªadRï‹tCfgR•Cmd
->
numAâr
; i++ )

1161 
ªp‹tR•Rec
 = &(
ªadRï‹tCfgR•Cmd
->
©åLi°
[
i
]);

1163 *
pBuf
++ = 
ªp‹tR•Rec
->
°©us
;

1164 *
pBuf
++ = 
ªp‹tR•Rec
->
dúe˘i⁄
;

1165 *
pBuf
++ = 
	`LO_UINT16
–
ªp‹tR•Rec
->
©åID
 );

1166 *
pBuf
++ = 
	`HI_UINT16
–
ªp‹tR•Rec
->
©åID
 );

1168 i‡–
ªp‹tR•Rec
->
°©us
 =
ZCL_STATUS_SUCCESS
 )

1170 i‡–
ªp‹tR•Rec
->
dúe˘i⁄
 =
ZCL_SEND_ATTR_REPORTS
 )

1172 *
pBuf
++ = 
ªp‹tR•Rec
->
d©aTy≥
;

1173 *
pBuf
++ = 
	`LO_UINT16
–
ªp‹tR•Rec
->
möRï‹tI¡
 );

1174 *
pBuf
++ = 
	`HI_UINT16
–
ªp‹tR•Rec
->
möRï‹tI¡
 );

1175 *
pBuf
++ = 
	`LO_UINT16
–
ªp‹tR•Rec
->
maxRï‹tI¡
 );

1176 *
pBuf
++ = 
	`HI_UINT16
–
ªp‹tR•Rec
->
maxRï‹tI¡
 );

1178 i‡–
	`z˛A«logD©aTy≥
–
ªp‹tR•Rec
->
d©aTy≥
 ) )

1180 
	`z˛SîülizeD©a
–
ªp‹tR•Rec
->
d©aTy≥
,

1181 
ªp‹tR•Rec
->
ªp‹èbÀCh™ge
, 
pBuf
 );

1182 
ªp‹tCh™geLí
 = 
	`z˛GëD©aTy≥Lígth
–
ªp‹tR•Rec
->
d©aTy≥
 );

1183 
pBuf
 +
ªp‹tCh™geLí
;

1188 *
pBuf
++ = 
	`LO_UINT16
–
ªp‹tR•Rec
->
timeoutPîiod
 );

1189 *
pBuf
++ = 
	`HI_UINT16
–
ªp‹tR•Rec
->
timeoutPîiod
 );

1194 
°©us
 = 
	`z˛_SídComm™d
–
§cEP
, 
d°Addr
, 
˛u°îID
,

1195 
ZCL_CMD_READ_REPORT_CFG_RSP
, 
FALSE
,

1196 
dúe˘i⁄
, 
dißbÀDeÁu…R•
, 0, 
£qNum
, 
d©aLí
, 
buf
 );

1197 
	`oßl_mem_‰ì
–
buf
 );

1200 
°©us
 = 
ZMemEº‹
;

1202  ( 
°©us
 );

1203 
	}
}

1218 
ZSètus_t
 
	$z˛_SídRï‹tCmd
–
uöt8
 
§cEP
, 
afAddrTy≥_t
 *
d°Addr
,

1219 
uöt16
 
˛u°îID
, 
z˛Rï‹tCmd_t
 *
ªp‹tCmd
,

1220 
uöt8
 
dúe˘i⁄
, uöt8 
dißbÀDeÁu…R•
, uöt8 
£qNum
 )

1222 
z˛Rï‹t_t
 *
ªp‹tRec
;

1223 
uöt8
 
©åD©aLí
;

1224 
uöt8
 
d©aLí
 = 0;

1225 
uöt8
 *
buf
;

1226 
uöt8
 *
pBuf
;

1227 
uöt8
 
i
;

1228 
ZSètus_t
 
°©us
;

1231  
i
 = 0; i < 
ªp‹tCmd
->
numAâr
; i++ )

1233 
ªp‹tRec
 = &(
ªp‹tCmd
->
©åLi°
[
i
]);

1235 
d©aLí
 += 2 + 1;

1237 
©åD©aLí
 = 
	`z˛GëAârD©aLígth
–
ªp‹tRec
->
d©aTy≥
,Ñï‹tRec->
©åD©a
 );

1238 
d©aLí
 +
©åD©aLí
;

1241 
buf
 = 
	`oßl_mem_Æloc
–
d©aLí
 );

1242 i‡–
buf
 !
NULL
 )

1245 
pBuf
 = 
buf
;

1246  
i
 = 0; i < 
ªp‹tCmd
->
numAâr
; i++ )

1248 
ªp‹tRec
 = &(
ªp‹tCmd
->
©åLi°
[
i
]);

1250 *
pBuf
++ = 
	`LO_UINT16
–
ªp‹tRec
->
©åID
 );

1251 *
pBuf
++ = 
	`HI_UINT16
–
ªp‹tRec
->
©åID
 );

1252 *
pBuf
++ = 
ªp‹tRec
->
d©aTy≥
;

1254 
	`z˛SîülizeD©a
–
ªp‹tRec
->
d©aTy≥
,Ñï‹tRec->
©åD©a
, 
pBuf
 );

1255 
©åD©aLí
 = 
	`z˛GëAârD©aLígth
–
ªp‹tRec
->
d©aTy≥
,Ñï‹tRec->
©åD©a
 );

1256 
pBuf
 +
©åD©aLí
;

1259 
°©us
 = 
	`z˛_SídComm™d
–
§cEP
, 
d°Addr
, 
˛u°îID
, 
ZCL_CMD_REPORT
, 
FALSE
,

1260 
dúe˘i⁄
, 
dißbÀDeÁu…R•
, 0, 
£qNum
, 
d©aLí
, 
buf
 );

1261 
	`oßl_mem_‰ì
–
buf
 );

1264 
°©us
 = 
ZMemEº‹
;

1266  ( 
°©us
 );

1267 
	}
}

1283 
ZSètus_t
 
	$z˛_SídDeÁu…R•Cmd
–
uöt8
 
§cEP
, 
afAddrTy≥_t
 *
d°Addr
,

1284 
uöt16
 
˛u°îID
, 
z˛DeÁu…R•Cmd_t
 *
deÁu…R•Cmd
,

1285 
uöt8
 
dúe˘i⁄
, uöt8 
dißbÀDeÁu…R•
, uöt8 
£qNum
 )

1287 
uöt8
 
buf
[2];

1290 
buf
[0] = 
deÁu…R•Cmd
->
comm™dID
;

1291 
buf
[1] = 
deÁu…R•Cmd
->
°©usCode
;

1293  ( 
	`z˛_SídComm™d
–
§cEP
, 
d°Addr
, 
˛u°îID
, 
ZCL_CMD_DEFAULT_RSP
, 
FALSE
,

1294 
dúe˘i⁄
, 
dißbÀDeÁu…R•
, 0, 
£qNum
, 2, 
buf
 ) );

1295 
	}
}

1297 #ifde‡
ZCL_DISCOVER


1311 
ZSètus_t
 
	$z˛_SídDiscovîCmd
–
uöt8
 
§cEP
, 
afAddrTy≥_t
 *
d°Addr
,

1312 
uöt16
 
˛u°îID
, 
z˛DiscovîCmd_t
 *
discovîCmd
,

1313 
uöt8
 
dúe˘i⁄
, uöt8 
dißbÀDeÁu…R•
, uöt8 
£qNum
 )

1315 
uöt8
 
d©aLí
 = 2 + 1;

1316 
uöt8
 *
buf
;

1317 
uöt8
 *
pBuf
;

1318 
ZSètus_t
 
°©us
;

1320 
buf
 = 
	`oßl_mem_Æloc
–
d©aLí
 );

1321 i‡–
buf
 !
NULL
 )

1324 
pBuf
 = 
buf
;

1325 *
pBuf
++ = 
	`LO_UINT16
(
discovîCmd
->
°¨tAâr
);

1326 *
pBuf
++ = 
	`HI_UINT16
(
discovîCmd
->
°¨tAâr
);

1327 *
pBuf
++ = 
discovîCmd
->
maxAârIDs
;

1329 
°©us
 = 
	`z˛_SídComm™d
–
§cEP
, 
d°Addr
, 
˛u°îID
, 
ZCL_CMD_DISCOVER
, 
FALSE
,

1330 
dúe˘i⁄
, 
dißbÀDeÁu…R•
, 0, 
£qNum
, 
d©aLí
, 
buf
 );

1331 
	`oßl_mem_‰ì
–
buf
 );

1334 
°©us
 = 
ZMemEº‹
;

1336  ( 
°©us
 );

1337 
	}
}

1352 
ZSètus_t
 
	$z˛_SídDiscovîR•Cmd
–
uöt8
 
§cEP
, 
afAddrTy≥_t
 *
d°Addr
,

1353 
uöt16
 
˛u°îID
, 
z˛DiscovîR•Cmd_t
 *
discovîR•Cmd
,

1354 
uöt8
 
dúe˘i⁄
, uöt8 
dißbÀDeÁu…R•
, uöt8 
£qNum
 )

1356 
uöt8
 
d©aLí
 = 1;

1357 
uöt8
 *
buf
;

1358 
uöt8
 *
pBuf
;

1359 
uöt8
 
i
;

1360 
ZSètus_t
 
°©us
;

1363 
d©aLí
 +
discovîR•Cmd
->
numAâr
 * (2 + 1);

1365 
buf
 = 
	`oßl_mem_Æloc
–
d©aLí
 );

1366 i‡–
buf
 !
NULL
 )

1369 
pBuf
 = 
buf
;

1370 *
pBuf
++ = 
discovîR•Cmd
->
discCom∂ëe
;

1371  
i
 = 0; i < 
discovîR•Cmd
->
numAâr
; i++ )

1373 *
pBuf
++ = 
	`LO_UINT16
(
discovîR•Cmd
->
©åLi°
[
i
].
©åID
);

1374 *
pBuf
++ = 
	`HI_UINT16
(
discovîR•Cmd
->
©åLi°
[
i
].
©åID
);

1375 *
pBuf
++ = 
discovîR•Cmd
->
©åLi°
[
i
].
d©aTy≥
;

1378 
°©us
 = 
	`z˛_SídComm™d
–
§cEP
, 
d°Addr
, 
˛u°îID
, 
ZCL_CMD_DISCOVER_RSP
, 
FALSE
,

1379 
dúe˘i⁄
, 
dißbÀDeÁu…R•
, 0, 
£qNum
, 
d©aLí
, 
buf
 );

1380 
	`oßl_mem_‰ì
–
buf
 );

1383 
°©us
 = 
ZMemEº‹
;

1385  ( 
°©us
 );

1386 
	}
}

1404 
	$z˛Pro˚ssMesßgeMSG
–
afIncomögMSGPackë_t
 *
pkt
 )

1406 
ídPoötDesc_t
 *
ïDesc
;

1407 
z˛Incomög_t
 
öMsg
;

1408 
z˛LibPlugö_t
 *
pInPlugö
;

1409 
z˛DeÁu…R•Cmd_t
 
deÁuéR•Cmd
;

1410 
uöt8
 
›ti⁄s
;

1411 
uöt8
 
£curôyE«bÀ
;

1412 
uöt8
 
öãrP™Msg
;

1413 
ZSètus_t
 
°©us
 = 
ZFaûuª
;

1415 i‡–
pkt
->
cmd
.
D©aLígth
 == 0 )

1419 
öMsg
.
msg
 = 
pkt
;

1420 
öMsg
.
©åCmd
 = 
NULL
;

1421 
öMsg
.
pD©a
 = 
NULL
;

1422 
öMsg
.
pD©aLí
 = 0;

1424 
öMsg
.
pD©a
 = 
	`z˛P¨£Hdr
–&(öMsg.
hdr
), 
pkt
->
cmd
.
D©a
 );

1425 
öMsg
.
pD©aLí
 = 
pkt
->
cmd
.
D©aLígth
;

1426 
öMsg
.
pD©aLí
 -(
uöt8
)(öMsg.
pD©a
 - 
pkt
->
cmd
.
D©a
);

1429 
ïDesc
 = 
	`afFödEndPoötDesc
–
pkt
->
ídPoöt
 );

1430 i‡–
ïDesc
 =
NULL
 )

1433 i‡–
pkt
->
˛u°îId
 =
ZCL_INVALID_CLUSTER_ID
 )

1436 i‡–
	`z˛_Devi˚O≥øti⁄Æ
–
pkt
->
ídPoöt
,Ökt->
˛u°îId
,

1437 
öMsg
.
hdr
.
fc
.
ty≥
, inMsg.hdr.
comm™dID
, 
ïDesc
->
sim∂eDesc
->
AµProfId
 ) =
FALSE
 )

1442 #i‡
	`deföed
 ( 
INTER_PAN
 )

1443 i‡–
	`StubAPS_I¡îP™
–
pkt
->
§cAddr
.
∑nId
,Ökt->§cAddr.
ídPoöt
 ) )

1446 i‡–
	`z˛_ProfûeCmd
–
öMsg
.
hdr
.
fc
.
ty≥
 ) )

1449 
öãrP™Msg
 = 
TRUE
;

1450 
›ti⁄s
 = 
AF_TX_OPTIONS_NONE
;

1455 
öãrP™Msg
 = 
FALSE
;

1456 
›ti⁄s
 = 
	`z˛GëClu°îO±i⁄
–
pkt
->
ídPoöt
,Ökt->
˛u°îId
 );

1460 i‡–!
	`z˛_DeÁu…R•Cmd
–
öMsg
.
hdr
 ) )

1462 
£curôyE«bÀ
 = ( 
›ti⁄s
 & 
AF_EN_SECURITY
 ) ? 
TRUE
 : 
FALSE
;

1463 i‡–
pkt
->
SecurôyU£
 !
£curôyE«bÀ
 )

1465 i‡–
	`UNICAST_MSG
–
öMsg
.
msg
 ) )

1468 i‡–
£curôyE«bÀ
 )

1469 
	`z˛SëSecurôyO±i⁄
–
pkt
->
ídPoöt
,Ökt->
˛u°îId
, 
FALSE
 );

1471 
deÁuéR•Cmd
.
°©usCode
 = 
°©us
;

1472 
deÁuéR•Cmd
.
comm™dID
 = 
öMsg
.
hdr
.commandID;

1473 
	`z˛_SídDeÁu…R•Cmd
–
öMsg
.
msg
->
ídPoöt
, &(öMsg.msg->
§cAddr
),

1474 
öMsg
.
msg
->
˛u°îId
, &
deÁuéR•Cmd
,

1475 
ZCL_FRAME_SERVER_CLIENT_DIR
, 
åue
, 
öMsg
.
hdr
.
å™sSeqNum
 );

1476 i‡–
£curôyE«bÀ
 )

1477 
	`z˛SëSecurôyO±i⁄
–
pkt
->
ídPoöt
,Ökt->
˛u°îId
, 
TRUE
 );

1485 i‡–
	`z˛_ProfûeCmd
–
öMsg
.
hdr
.
fc
.
ty≥
 ) )

1487 i‡–
öMsg
.
hdr
.
fc
.
m™uS≥cific
 )

1490 
°©us
 = 
ZCL_STATUS_UNSUP_MANU_GENERAL_COMMAND
;

1492 i‡––
öMsg
.
hdr
.
comm™dID
 <
ZCL_CMD_MAX
 ) &&

1493 –
z˛CmdTabÀ
[
öMsg
.
hdr
.
comm™dID
].
p‚P¨£InProfûe
 !
NULL
 ) )

1495 
z˛P¨£Cmd_t
 
∑r£Cmd
;

1497 
∑r£Cmd
.
ídpoöt
 = 
pkt
->
ídPoöt
;

1498 
∑r£Cmd
.
d©aLí
 = 
öMsg
.
pD©aLí
;

1499 
∑r£Cmd
.
pD©a
 = 
öMsg
.pData;

1502 
öMsg
.
©åCmd
 = 
	`z˛P¨£Cmd
–öMsg.
hdr
.
comm™dID
, &
∑r£Cmd
 );

1503 i‡–(
öMsg
.
©åCmd
 !
NULL
Ë&& (
z˛CmdTabÀ
[öMsg.
hdr
.
comm™dID
].
p‚Pro˚ssInProfûe
 != NULL) )

1506 i‡–
	`z˛Pro˚ssCmd
–
öMsg
.
hdr
.
comm™dID
, &öMsg ) =
FALSE
 )

1513 i‡–
öMsg
.
©åCmd
 )

1514 
	`oßl_mem_‰ì
–
öMsg
.
©åCmd
 );

1516 i‡–
	`CMD_HAS_RSP
–
öMsg
.
hdr
.
comm™dID
 ) )

1519 
°©us
 = 
ZSuc˚ss
;

1524 
°©us
 = 
ZCL_STATUS_UNSUP_GENERAL_COMMAND
;

1532 
pInPlugö
 = 
	`z˛FödPlugö
–
pkt
->
˛u°îId
, 
ïDesc
->
sim∂eDesc
->
AµProfId
 );

1533 i‡–
pInPlugö
 &&ÖInPlugö->
p‚IncomögHdÃ
 )

1542 
°©us
 = 
pInPlugö
->
	`p‚IncomögHdÃ
–&
öMsg
 );

1543 i‡–
°©us
 =
ZCL_STATUS_CMD_HAS_RSP
 || ( 
öãrP™Msg
 && sètu†=
ZSuc˚ss
 ) )

1547 i‡–
°©us
 =
ZFaûuª
 )

1550 i‡–
öMsg
.
hdr
.
fc
.
m™uS≥cific
 )

1551 
°©us
 = 
ZCL_STATUS_UNSUP_MANU_CLUSTER_COMMAND
;

1553 
°©us
 = 
ZCL_STATUS_UNSUP_CLUSTER_COMMAND
;

1557 i‡–
	`UNICAST_MSG
–
öMsg
.
msg
 ) && inMsg.
hdr
.
fc
.
dißbÀDeÁu…R•
 == 0 )

1560 
deÁuéR•Cmd
.
°©usCode
 = 
°©us
;

1561 
deÁuéR•Cmd
.
comm™dID
 = 
öMsg
.
hdr
.commandID;

1562 
	`z˛_SídDeÁu…R•Cmd
–
öMsg
.
msg
->
ídPoöt
, &(öMsg.msg->
§cAddr
),

1563 
öMsg
.
msg
->
˛u°îId
, &
deÁuéR•Cmd
,

1564 
ZCL_FRAME_SERVER_CLIENT_DIR
, 
åue
, 
öMsg
.
hdr
.
å™sSeqNum
 );

1566 
	}
}

1578 
uöt8
 *
	$z˛P¨£Hdr
–
z˛FømeHdr_t
 *
hdr
, 
uöt8
 *
pD©a
 )

1581 
	`oßl_mem£t
–(
uöt8
 *)
hdr
, 0,  ( 
z˛FømeHdr_t
 ) );

1584 
hdr
->
fc
.
ty≥
 = 
	`z˛_FCTy≥
–*
pD©a
 );

1585 
hdr
->
fc
.
m™uS≥cific
 = 
	`z˛_FCM™uS≥cific
–*
pD©a
 ) ? 1 : 0;

1586 i‡–
	`z˛_FCDúe˘i⁄
–*
pD©a
 ) )

1587 
hdr
->
fc
.
dúe˘i⁄
 = 
ZCL_FRAME_SERVER_CLIENT_DIR
;

1589 
hdr
->
fc
.
dúe˘i⁄
 = 
ZCL_FRAME_CLIENT_SERVER_DIR
;

1591 
hdr
->
fc
.
dißbÀDeÁu…R•
 = 
	`z˛_FCDißbÀDeÁu…R•
–*
pD©a
 ) ? 1 : 0;

1592 
pD©a
++;

1595 i‡–
hdr
->
fc
.
m™uS≥cific
 )

1597 
hdr
->
m™uCode
 = 
	`BUILD_UINT16
–
pD©a
[0],ÖData[1] );

1598 
pD©a
 += 2;

1602 
hdr
->
å™sSeqNum
 = *
pD©a
++;

1605 
hdr
->
comm™dID
 = *
pD©a
++;

1608  ( 
pD©a
 );

1609 
	}
}

1621 
uöt8
 *
	$z˛BuûdHdr
–
z˛FømeHdr_t
 *
hdr
, 
uöt8
 *
pD©a
 )

1624 *
pD©a
 = 
hdr
->
fc
.
ty≥
;

1625 *
pD©a
 |
hdr
->
fc
.
m™uS≥cific
 << 2;

1626 *
pD©a
 |
hdr
->
fc
.
dúe˘i⁄
 << 3;

1627 *
pD©a
 |
hdr
->
fc
.
dißbÀDeÁu…R•
 << 4;

1628 
pD©a
++;

1631 i‡–
hdr
->
fc
.
m™uS≥cific
 )

1633 *
pD©a
++ = 
	`LO_UINT16
–
hdr
->
m™uCode
 );

1634 *
pD©a
++ = 
	`HI_UINT16
–
hdr
->
m™uCode
 );

1638 *
pD©a
++ = 
hdr
->
å™sSeqNum
;

1641 *
pD©a
++ = 
hdr
->
comm™dID
;

1644  ( 
pD©a
 );

1645 
	}
}

1657 
uöt8
 
	$z˛CÆcHdrSize
–
z˛FømeHdr_t
 *
hdr
 )

1659 
uöt8
 
√eded
 = (1 + 1 + 1);

1662 i‡–
hdr
->
fc
.
m™uS≥cific
 )

1663 
√eded
 += 2;

1665  ( 
√eded
 );

1666 
	}
}

1678 
z˛LibPlugö_t
 *
	$z˛FödPlugö
–
uöt16
 
˛u°îID
, uöt16 
¥ofûeID
 )

1680 
z˛LibPlugö_t
 *
pLo›
;

1682 ()
¥ofûeID
;

1684 i‡–
˛u°îID
 !
ZCL_INVALID_CLUSTER_ID
 )

1686 
pLo›
 = 
∂ugös
;

1687  
pLo›
 !
NULL
 )

1689 i‡–
˛u°îID
 >
pLo›
->
°¨tClu°îID
 && clu°îID <pLo›->
ídClu°îID
 )

1690  ( 
pLo›
 );

1691 
pLo›
 =ÖLo›->
√xt
;

1694  ( (
z˛LibPlugö_t
 *)
NULL
 );

1695 
	}
}

1708 
uöt8
 
	$z˛FödAârRec
–
uöt8
 
ídpoöt
, 
uöt16
 
˛u°îID
, uöt16 
©åId
, 
z˛AârRec_t
 *
pAâr
 )

1710 
uöt8
 
x
;

1711 
z˛AârRecsLi°
 *
pLo›
;

1713 
pLo›
 = 
©åLi°
;

1715  
pLo›
 !
NULL
 )

1717 i‡–
pLo›
->
ídpoöt
 ==Éndpoint )

1719  
x
 = 0; x < 
pLo›
->
numAâribuãs
; x++ )

1721 i‡–
pLo›
->
©ås
[
x
].
˛u°îID
 =˛u°îID &&ÖLo›->©ås[x].
©å
.
©åId
 ==áttrId )

1723 *
pAâr
 = 
pLo›
->
©ås
[
x
];

1724  ( 
TRUE
 );

1728 
pLo›
 =ÖLo›->
√xt
;

1731  ( 
FALSE
 );

1732 
	}
}

1744 
z˛O±i⁄Rec_t
 *
	$z˛FödClu°îO±i⁄
–
uöt8
 
ídpoöt
, 
uöt16
 
˛u°îID
 )

1746 
uöt8
 
x
;

1747 
z˛Clu°îO±i⁄Li°
 *
pLo›
;

1749 
pLo›
 = 
˛u°îO±i⁄Li°
;

1751  
pLo›
 !
NULL
 )

1753 i‡–
pLo›
->
ídpoöt
 ==Éndpoint )

1755  
x
 = 0; x < 
pLo›
->
numO±i⁄s
; x++ )

1757 i‡–
pLo›
->
›ti⁄s
[
x
].
˛u°îID
 == clusterID )

1758  ( &(
pLo›
->
›ti⁄s
[
x
]) );

1761 
pLo›
 =ÖLo›->
√xt
;

1764  ( 
NULL
 );

1765 
	}
}

1777 
uöt8
 
	$z˛GëClu°îO±i⁄
–
uöt8
 
ídpoöt
, 
uöt16
 
˛u°îID
 )

1779 
uöt8
 
›ti⁄
;

1780 
z˛O±i⁄Rec_t
 *
pO±i⁄
;

1782 
pO±i⁄
 = 
	`z˛FödClu°îO±i⁄
–
ídpoöt
, 
˛u°îID
 );

1783 i‡–
pO±i⁄
 !
NULL
 )

1785 
›ti⁄
 = 
pO±i⁄
->option;

1786 i‡–!
ZG_SECURE_ENABLED
 )

1787 
›ti⁄
 &(
AF_EN_SECURITY
 ^ 0xFF);

1789  ( 
›ti⁄
 );

1792  ( 
AF_TX_OPTIONS_NONE
 );

1793 
	}
}

1806 
	$z˛SëSecurôyO±i⁄
–
uöt8
 
ídpoöt
, 
uöt16
 
˛u°îID
, uöt8 
íabÀ
 )

1808 
z˛O±i⁄Rec_t
 *
pO±i⁄
;

1810 
pO±i⁄
 = 
	`z˛FödClu°îO±i⁄
–
ídpoöt
, 
˛u°îID
 );

1811 i‡–
pO±i⁄
 !
NULL
 )

1813 i‡–
íabÀ
 )

1814 
pO±i⁄
->
›ti⁄
 |
AF_EN_SECURITY
;

1816 
pO±i⁄
->
›ti⁄
 &(
AF_EN_SECURITY
 ^ 0xFF);

1818 
	}
}

1820 #ifde‡
ZCL_DISCOVER


1832 
uöt8
 
	$z˛FödNextAârRec
–
uöt8
 
ídpoöt
, 
uöt16
 
˛u°îID
,

1833 
uöt16
 *
©åId
, 
z˛AârRec_t
 *
pAâr
 )

1835 
uöt16
 
x
;

1836 
z˛AârRecsLi°
 *
pLo›
;

1838 
pLo›
 = 
©åLi°
;

1840  
pLo›
 !
NULL
 )

1842 i‡–
pLo›
->
ídpoöt
 ==Éndpoint )

1844  
x
 = 0; x < 
pLo›
->
numAâribuãs
; x++ )

1846 i‡–
pLo›
->
©ås
[
x
].
˛u°îID
 =˛u°îID &&ÖLo›->©ås[x].
©å
.
©åId
 >= *attrId )

1848 *
pAâr
 = 
pLo›
->
©ås
[
x
];

1851 *
©åId
 = 
pAâr
->
©å
.attrId;

1852  ( 
TRUE
 );

1856 
pLo›
 =ÖLo›->
√xt
;

1859  ( 
FALSE
 );

1860 
	}
}

1863 #i‡
deföed
(
ZCL_READ
Ë|| deföed(
ZCL_WRITE
Ë|| deföed(
ZCL_REPORT
)

1876 
	$z˛SîülizeD©a
–
uöt8
 
d©aTy≥
, *
©åD©a
, uöt8 *
buf
 )

1878 
uöt8
 *
pSå
;

1879 
uöt8
 
Àn
;

1881  
d©aTy≥
 )

1883 
ZCL_DATATYPE_DATA8
:

1884 
ZCL_DATATYPE_BOOLEAN
:

1885 
ZCL_DATATYPE_BITMAP8
:

1886 
ZCL_DATATYPE_INT8
:

1887 
ZCL_DATATYPE_UINT8
:

1888 
ZCL_DATATYPE_ENUM8
:

1889 *
buf
 = *((
uöt8
 *)
©åD©a
);

1892 
ZCL_DATATYPE_DATA16
:

1893 
ZCL_DATATYPE_BITMAP16
:

1894 
ZCL_DATATYPE_UINT16
:

1895 
ZCL_DATATYPE_INT16
:

1896 
ZCL_DATATYPE_ENUM16
:

1897 
ZCL_DATATYPE_SEMI_PREC
:

1898 
ZCL_DATATYPE_CLUSTER_ID
:

1899 
ZCL_DATATYPE_ATTR_ID
:

1900 *
buf
++ = 
	`LO_UINT16
–*((
uöt16
*)
©åD©a
) );

1901 *
buf
++ = 
	`HI_UINT16
–*((
uöt16
*)
©åD©a
) );

1904 
ZCL_DATATYPE_DATA24
:

1905 
ZCL_DATATYPE_BITMAP24
:

1906 
ZCL_DATATYPE_UINT24
:

1907 
ZCL_DATATYPE_INT24
:

1908 *
buf
++ = 
	`BREAK_UINT32
–*((
uöt32
*)
©åD©a
), 0 );

1909 *
buf
++ = 
	`BREAK_UINT32
–*((
uöt32
*)
©åD©a
), 1 );

1910 *
buf
++ = 
	`BREAK_UINT32
–*((
uöt32
*)
©åD©a
), 2 );

1913 
ZCL_DATATYPE_DATA32
:

1914 
ZCL_DATATYPE_BITMAP32
:

1915 
ZCL_DATATYPE_UINT32
:

1916 
ZCL_DATATYPE_INT32
:

1917 
ZCL_DATATYPE_SINGLE_PREC
:

1918 
ZCL_DATATYPE_TOD
:

1919 
ZCL_DATATYPE_DATE
:

1920 
ZCL_DATATYPE_UTC
:

1921 
ZCL_DATATYPE_BAC_OID
:

1922 
buf
 = 
	`oßl_buf„r_uöt32
–buf, *((
uöt32
*)
©åD©a
) );

1925 
ZCL_DATATYPE_UINT40
:

1926 
pSå
 = (
uöt8
*)
©åD©a
;

1927 
	`oßl_mem˝y
–
buf
, 
pSå
, 5 );

1930 
ZCL_DATATYPE_UINT48
:

1931 
pSå
 = (
uöt8
*)
©åD©a
;

1932 
	`oßl_mem˝y
–
buf
, 
pSå
, 6 );

1935 
ZCL_DATATYPE_IEEE_ADDR
:

1936 
pSå
 = (
uöt8
*)
©åD©a
;

1937 
	`oßl_mem˝y
–
buf
, 
pSå
, 8 );

1940 
ZCL_DATATYPE_CHAR_STR
:

1941 
ZCL_DATATYPE_OCTET_STR
:

1942 
pSå
 = (
uöt8
*)
©åD©a
;

1943 
Àn
 = *
pSå
++;

1944 *
buf
++ = 
Àn
;

1945 
	`oßl_mem˝y
–
buf
, 
pSå
, 
Àn
 );

1948 
ZCL_DATATYPE_NO_DATA
:

1949 
ZCL_DATATYPE_UNKNOWN
:

1955 
	}
}

1958 #ifde‡
ZCL_REPORT


1968 
uöt8
 
	$z˛A«logD©aTy≥
–
uöt8
 
d©aTy≥
 )

1970 
uöt8
 
™Æog
;

1972  
d©aTy≥
 )

1974 
ZCL_DATATYPE_UINT8
:

1975 
ZCL_DATATYPE_UINT16
:

1976 
ZCL_DATATYPE_UINT24
:

1977 
ZCL_DATATYPE_UINT32
:

1978 
ZCL_DATATYPE_UINT40
:

1979 
ZCL_DATATYPE_UINT48
:

1980 
ZCL_DATATYPE_INT8
:

1981 
ZCL_DATATYPE_INT16
:

1982 
ZCL_DATATYPE_INT24
:

1983 
ZCL_DATATYPE_INT32
:

1984 
ZCL_DATATYPE_SEMI_PREC
:

1985 
ZCL_DATATYPE_SINGLE_PREC
:

1986 
ZCL_DATATYPE_DOUBLE_PREC
:

1987 
ZCL_DATATYPE_TOD
:

1988 
ZCL_DATATYPE_DATE
:

1989 
ZCL_DATATYPE_UTC
:

1990 
™Æog
 = 
TRUE
;

1994 
™Æog
 = 
FALSE
;

1998  ( 
™Æog
 );

1999 
	}
}

2012 
	$z˛_BuûdA«logD©a
–
uöt8
 
d©aTy≥
, uöt8 *
pD©a
, uöt8 *
pBuf
)

2014  
d©aTy≥
 )

2016 
ZCL_DATATYPE_UINT8
:

2017 
ZCL_DATATYPE_INT8
:

2018 *
pD©a
 = *
pBuf
;

2021 
ZCL_DATATYPE_UINT16
:

2022 
ZCL_DATATYPE_INT16
:

2023 
ZCL_DATATYPE_SEMI_PREC
:

2024 *((
uöt16
*)
pD©a
Ë
	`BUILD_UINT16
–
pBuf
[0],ÖBuf[1] );

2027 
ZCL_DATATYPE_UINT24
:

2028 
ZCL_DATATYPE_INT24
:

2029 *((
uöt32
*)
pD©a
Ë
	`oßl_buûd_uöt32
–
pBuf
, 3 );

2032 
ZCL_DATATYPE_UINT32
:

2033 
ZCL_DATATYPE_INT32
:

2034 
ZCL_DATATYPE_SINGLE_PREC
:

2035 
ZCL_DATATYPE_TOD
:

2036 
ZCL_DATATYPE_DATE
:

2037 
ZCL_DATATYPE_UTC
:

2038 *((
uöt32
*)
pD©a
Ë
	`oßl_buûd_uöt32
–
pBuf
, 4 );

2041 
ZCL_DATATYPE_DOUBLE_PREC
:

2042 *
pD©a
 = 0;

2048 
	}
}

2062 
uöt8
 
	$z˛GëD©aTy≥Lígth
–
uöt8
 
d©aTy≥
 )

2064 
uöt8
 
Àn
;

2066  
d©aTy≥
 )

2068 
ZCL_DATATYPE_DATA8
:

2069 
ZCL_DATATYPE_BOOLEAN
:

2070 
ZCL_DATATYPE_BITMAP8
:

2071 
ZCL_DATATYPE_INT8
:

2072 
ZCL_DATATYPE_UINT8
:

2073 
ZCL_DATATYPE_ENUM8
:

2074 
Àn
 = 1;

2077 
ZCL_DATATYPE_DATA16
:

2078 
ZCL_DATATYPE_BITMAP16
:

2079 
ZCL_DATATYPE_UINT16
:

2080 
ZCL_DATATYPE_INT16
:

2081 
ZCL_DATATYPE_ENUM16
:

2082 
ZCL_DATATYPE_SEMI_PREC
:

2083 
ZCL_DATATYPE_CLUSTER_ID
:

2084 
ZCL_DATATYPE_ATTR_ID
:

2085 
Àn
 = 2;

2088 
ZCL_DATATYPE_DATA24
:

2089 
ZCL_DATATYPE_BITMAP24
:

2090 
ZCL_DATATYPE_UINT24
:

2091 
ZCL_DATATYPE_INT24
:

2092 
Àn
 = 3;

2095 
ZCL_DATATYPE_DATA32
:

2096 
ZCL_DATATYPE_BITMAP32
:

2097 
ZCL_DATATYPE_UINT32
:

2098 
ZCL_DATATYPE_INT32
:

2099 
ZCL_DATATYPE_SINGLE_PREC
:

2100 
ZCL_DATATYPE_TOD
:

2101 
ZCL_DATATYPE_DATE
:

2102 
ZCL_DATATYPE_UTC
:

2103 
ZCL_DATATYPE_BAC_OID
:

2104 
Àn
 = 4;

2107 
ZCL_DATATYPE_UINT40
:

2108 
Àn
 = 5;

2111 
ZCL_DATATYPE_UINT48
:

2112 
Àn
 = 6;

2115 
ZCL_DATATYPE_DOUBLE_PREC
:

2116 
ZCL_DATATYPE_IEEE_ADDR
:

2117 
Àn
 = 8;

2120 
ZCL_DATATYPE_NO_DATA
:

2121 
ZCL_DATATYPE_UNKNOWN
:

2125 
Àn
 = 0;

2129  ( 
Àn
 );

2130 
	}
}

2142 
uöt8
 
	$z˛GëAârD©aLígth
–
uöt8
 
d©aTy≥
, uöt8 *
pD©a
)

2144 
uöt8
 
d©aLí
 = 0;

2146 i‡–
d©aTy≥
 =
ZCL_DATATYPE_CHAR_STR
 || d©aTy≥ =
ZCL_DATATYPE_OCTET_STR
 )

2148 
d©aLí
 = *
pD©a
 + 1;

2152 
d©aLí
 = 
	`z˛GëD©aTy≥Lígth
–
d©aTy≥
 );

2155  ( 
d©aLí
 );

2156 
	}
}

2168 
uöt8
 
	$z˛RódAârD©a
–
uöt8
 *
pAârD©a
, 
z˛AârRec_t
 *
pAâr
 )

2170 
uöt8
 
d©aLí
;

2172 
d©aLí
 = 
	`z˛GëAârD©aLígth
–
pAâr
->
©å
.
d©aTy≥
, (
uöt8
*)’Aâr->©å.
d©aPå
) );

2173 
	`oßl_mem˝y
–
pAârD©a
, 
pAâr
->
©å
.
d©aPå
, 
d©aLí
 );

2175  ( 
ZCL_STATUS_SUCCESS
 );

2176 
	}
}

2178 #ifde‡
ZCL_WRITE


2189 
uöt8
 
	$z˛WrôeAârD©a
–
z˛AârRec_t
 *
pAâr
, 
z˛WrôeRec_t
 *
pWrôeRec
 )

2191 
uöt8
 
Àn
;

2193 i‡–
	`z˛_Ac˚ssCålWrôe
–
pAâr
->
©å
.
ac˚ssC⁄åﬁ
 ) )

2195 i‡–
z˛_VÆid©eAârD©aCB
 && !
	`z˛_VÆid©eAârD©aCB
–
pAâr
, 
pWrôeRec
 ) )

2196  ( 
ZCL_STATUS_INVALID_VALUE
 );

2198 
Àn
 = 
	`z˛GëAârD©aLígth
–
pAâr
->
©å
.
d©aTy≥
, 
pWrôeRec
->
©åD©a
 );

2199 
	`oßl_mem˝y
–
pAâr
->
©å
.
d©aPå
, 
pWrôeRec
->
©åD©a
, 
Àn
 );

2200  ( 
ZCL_STATUS_SUCCESS
 );

2203  ( 
ZCL_STATUS_READ_ONLY
 );

2204 
	}
}

2207 #ifde‡
ZCL_READ


2220 *
	$z˛P¨£InRódCmd
–
z˛P¨£Cmd_t
 *
pCmd
 )

2222 
z˛RódCmd_t
 *
ªadCmd
;

2223 
uöt8
 *
pBuf
 = 
pCmd
->
pD©a
;

2225 
ªadCmd
 = (
z˛RódCmd_t
 *)
	`oßl_mem_Æloc
– ( z˛RódCmd_àË+ 
pCmd
->
d©aLí
 );

2226 i‡–
ªadCmd
 !
NULL
 )

2228 
uöt8
 
i
;

2230 
ªadCmd
->
numAâr
 = 
pCmd
->
d©aLí
 / 2;

2231  
i
 = 0; i < 
ªadCmd
->
numAâr
; i++ )

2233 
ªadCmd
->
©åID
[
i
] = 
	`BUILD_UINT16
–
pBuf
[0],ÖBuf[1] );

2234 
pBuf
 += 2;

2238  ( (*)
ªadCmd
 );

2239 
	}
}

2253 *
	$z˛P¨£InRódR•Cmd
–
z˛P¨£Cmd_t
 *
pCmd
 )

2255 
z˛RódR•Cmd_t
 *
ªadR•Cmd
;

2256 
z˛RódR•Sètus_t
 *
°©usRec
;

2257 
uöt8
 *
pBuf
 = 
pCmd
->
pD©a
;

2258 
uöt8
 *
d©aPå
;

2259 
uöt8
 
numAâr
 = 0;

2260 
uöt8
 
hdrLí
;

2261 
uöt8
 
d©aLí
 = 0;

2262 
uöt8
 
©åD©aLí
;

2263 
uöt8
 
d©aTy≥
;

2264 
uöt8
 
°©us
;

2265 
uöt8
 
i
;

2268  
pBuf
 < ( 
pCmd
->
pD©a
 +ÖCmd->
d©aLí
 ) )

2270 
numAâr
++;

2272 
pBuf
 += 2;

2274 
°©us
 = *
pBuf
++;

2275 i‡–
°©us
 =
ZCL_STATUS_SUCCESS
 )

2277 
d©aTy≥
 = *
pBuf
++;

2279 
©åD©aLí
 = 
	`z˛GëAârD©aLígth
–
d©aTy≥
, 
pBuf
 );

2280 
pBuf
 +
©åD©aLí
;

2283 i‡–
	`PADDING_NEEDED
–
©åD©aLí
 ) )

2284 
©åD©aLí
++;

2285 
d©aLí
 +
©åD©aLí
;

2290 
hdrLí
 = –
z˛RódR•Cmd_t
 ) + ( 
numAâr
 * –
z˛RódR•Sètus_t
 ) );

2292 
ªadR•Cmd
 = (
z˛RódR•Cmd_t
 *)
	`oßl_mem_Æloc
–
hdrLí
 + 
d©aLí
 );

2293 i‡–
ªadR•Cmd
 !
NULL
 )

2295 
pBuf
 = 
pCmd
->
pD©a
;

2296 
d©aPå
 = (
uöt8
 *)–(uöt8 *)
ªadR•Cmd
 + 
hdrLí
 );

2298 
ªadR•Cmd
->
numAâr
 =ÇumAttr;

2299  
i
 = 0; i < 
numAâr
; i++ )

2301 
°©usRec
 = &(
ªadR•Cmd
->
©åLi°
[
i
]);

2303 
°©usRec
->
©åID
 = 
	`BUILD_UINT16
–
pBuf
[0],ÖBuf[1] );

2304 
pBuf
 += 2;

2306 
°©usRec
->
°©us
 = *
pBuf
++;

2307 i‡–
°©usRec
->
°©us
 =
ZCL_STATUS_SUCCESS
 )

2309 
°©usRec
->
d©aTy≥
 = *
pBuf
++;

2311 
©åD©aLí
 = 
	`z˛GëAârD©aLígth
–
°©usRec
->
d©aTy≥
, 
pBuf
 );

2312 
	`oßl_mem˝y
–
d©aPå
, 
pBuf
, 
©åD©aLí
);

2313 
°©usRec
->
d©a
 = 
d©aPå
;

2315 
pBuf
 +
©åD©aLí
;

2318 i‡–
	`PADDING_NEEDED
–
©åD©aLí
 ) )

2319 
©åD©aLí
++;

2320 
d©aPå
 +
©åD©aLí
;

2325  ( (*)
ªadR•Cmd
 );

2326 
	}
}

2329 #ifde‡
ZCL_WRITE


2343 *
	$z˛P¨£InWrôeCmd
–
z˛P¨£Cmd_t
 *
pCmd
 )

2345 
z˛WrôeCmd_t
 *
wrôeCmd
;

2346 
z˛WrôeRec_t
 *
°©usRec
;

2347 
uöt8
 *
pBuf
 = 
pCmd
->
pD©a
;

2348 
uöt8
 
©åD©aLí
;

2349 
uöt8
 *
d©aPå
;

2350 
uöt8
 
numAâr
 = 0;

2351 
uöt8
 
hdrLí
;

2352 
uöt8
 
d©aLí
 = 0;

2353 
uöt8
 
d©aTy≥
;

2354 
uöt8
 
i
;

2357  
pBuf
 < ( 
pCmd
->
pD©a
 +ÖCmd->
d©aLí
 ) )

2359 
numAâr
++;

2361 
pBuf
 += 2;

2363 
d©aTy≥
 = *
pBuf
++;

2365 
©åD©aLí
 = 
	`z˛GëAârD©aLígth
–
d©aTy≥
, 
pBuf
 );

2366 
pBuf
 +
©åD©aLí
;

2369 i‡–
	`PADDING_NEEDED
–
©åD©aLí
 ) )

2370 
©åD©aLí
++;

2371 
d©aLí
 +
©åD©aLí
;

2375 
hdrLí
 = –
z˛WrôeCmd_t
 ) + ( 
numAâr
 * –
z˛WrôeRec_t
 ) );

2377 
wrôeCmd
 = (
z˛WrôeCmd_t
 *)
	`oßl_mem_Æloc
–
hdrLí
 + 
d©aLí
 );

2378 i‡–
wrôeCmd
 !
NULL
 )

2380 
pBuf
 = 
pCmd
->
pD©a
;

2381 
d©aPå
 = (
uöt8
 *)–(uöt8 *)
wrôeCmd
 + 
hdrLí
 );

2383 
wrôeCmd
->
numAâr
 =ÇumAttr;

2384  
i
 = 0; i < 
numAâr
; i++ )

2386 
°©usRec
 = &(
wrôeCmd
->
©åLi°
[
i
]);

2388 
°©usRec
->
©åID
 = 
	`BUILD_UINT16
–
pBuf
[0],ÖBuf[1] );

2389 
pBuf
 += 2;

2390 
°©usRec
->
d©aTy≥
 = *
pBuf
++;

2392 
©åD©aLí
 = 
	`z˛GëAârD©aLígth
–
°©usRec
->
d©aTy≥
, 
pBuf
 );

2393 
	`oßl_mem˝y
–
d©aPå
, 
pBuf
, 
©åD©aLí
);

2394 
°©usRec
->
©åD©a
 = 
d©aPå
;

2396 
pBuf
 +
©åD©aLí
;

2399 i‡–
	`PADDING_NEEDED
–
©åD©aLí
 ) )

2400 
©åD©aLí
++;

2401 
d©aPå
 +
©åD©aLí
;

2405  ( (*)
wrôeCmd
 );

2406 
	}
}

2420 *
	$z˛P¨£InWrôeR•Cmd
–
z˛P¨£Cmd_t
 *
pCmd
 )

2422 
z˛WrôeR•Cmd_t
 *
wrôeR•Cmd
;

2423 
uöt8
 *
pBuf
 = 
pCmd
->
pD©a
;

2424 
uöt8
 
i
 = 0;

2426 
wrôeR•Cmd
 = (
z˛WrôeR•Cmd_t
 *)
	`oßl_mem_Æloc
– ( z˛WrôeR•Cmd_àË+ 
pCmd
->
d©aLí
 );

2427 i‡–
wrôeR•Cmd
 !
NULL
 )

2429 i‡–
pCmd
->
d©aLí
 == 1 )

2432 
wrôeR•Cmd
->
©åLi°
[
i
++].
°©us
 = *
pBuf
;

2436  
pBuf
 < ( 
pCmd
->
pD©a
 +ÖCmd->
d©aLí
 ) )

2438 
wrôeR•Cmd
->
©åLi°
[
i
].
°©us
 = *
pBuf
++;

2439 
wrôeR•Cmd
->
©åLi°
[
i
++].
©åID
 = 
	`BUILD_UINT16
–
pBuf
[0],ÖBuf[1] );

2440 
pBuf
 += 2;

2444 
wrôeR•Cmd
->
numAâr
 = 
i
;

2447  ( (*)
wrôeR•Cmd
 );

2448 
	}
}

2451 #ifde‡
ZCL_REPORT


2464 *
	$z˛P¨£InC⁄figRï‹tCmd
–
z˛P¨£Cmd_t
 *
pCmd
 )

2466 
z˛CfgRï‹tCmd_t
 *
cfgRï‹tCmd
;

2467 
z˛CfgRï‹tRec_t
 *
ªp‹tRec
;

2468 
uöt8
 *
pBuf
 = 
pCmd
->
pD©a
;

2469 
uöt8
 *
d©aPå
;

2470 
uöt8
 
numAâr
 = 0;

2471 
uöt8
 
dúe˘i⁄
;

2472 
uöt8
 
d©aTy≥
;

2473 
uöt8
 
hdrLí
;

2474 
uöt8
 
d©aLí
 = 0;

2475 
uöt8
 
ªp‹tCh™geLí
;

2476 
uöt8
 
i
;

2479  
pBuf
 < ( 
pCmd
->
pD©a
 +ÖCmd->
d©aLí
 ) )

2481 
numAâr
++;

2483 
dúe˘i⁄
 = *
pBuf
++;

2484 
pBuf
 += 2;

2487 i‡–
dúe˘i⁄
 =
ZCL_SEND_ATTR_REPORTS
 )

2489 
d©aTy≥
 = *
pBuf
++;

2490 
pBuf
 += 4;

2493 i‡–
	`z˛A«logD©aTy≥
–
d©aTy≥
 ) )

2495 
ªp‹tCh™geLí
 = 
	`z˛GëD©aTy≥Lígth
–
d©aTy≥
 );

2496 
pBuf
 +
ªp‹tCh™geLí
;

2499 i‡–
	`PADDING_NEEDED
–
ªp‹tCh™geLí
 ) )

2500 
ªp‹tCh™geLí
++;

2501 
d©aLí
 +
ªp‹tCh™geLí
;

2506 
pBuf
 += 2;

2510 
hdrLí
 = –
z˛CfgRï‹tCmd_t
 ) + ( 
numAâr
 * –
z˛CfgRï‹tRec_t
 ) );

2512 
cfgRï‹tCmd
 = (
z˛CfgRï‹tCmd_t
 *)
	`oßl_mem_Æloc
–
hdrLí
 + 
d©aLí
 );

2513 i‡–
cfgRï‹tCmd
 !
NULL
 )

2515 
pBuf
 = 
pCmd
->
pD©a
;

2516 
d©aPå
 = (
uöt8
 *)–(uöt8 *)
cfgRï‹tCmd
 + 
hdrLí
 );

2518 
cfgRï‹tCmd
->
numAâr
 =ÇumAttr;

2519  
i
 = 0; i < 
numAâr
; i++ )

2521 
ªp‹tRec
 = &(
cfgRï‹tCmd
->
©åLi°
[
i
]);

2523 
	`oßl_mem£t
–
ªp‹tRec
, 0, –
z˛CfgRï‹tRec_t
 ) );

2525 
ªp‹tRec
->
dúe˘i⁄
 = *
pBuf
++;

2526 
ªp‹tRec
->
©åID
 = 
	`BUILD_UINT16
–
pBuf
[0],ÖBuf[1] );

2527 
pBuf
 += 2;

2528 i‡–
ªp‹tRec
->
dúe˘i⁄
 =
ZCL_SEND_ATTR_REPORTS
 )

2531 
ªp‹tRec
->
d©aTy≥
 = *
pBuf
++;

2532 
ªp‹tRec
->
möRï‹tI¡
 = 
	`BUILD_UINT16
–
pBuf
[0],ÖBuf[1] );

2533 
pBuf
 += 2;

2534 
ªp‹tRec
->
maxRï‹tI¡
 = 
	`BUILD_UINT16
–
pBuf
[0],ÖBuf[1] );

2535 
pBuf
 += 2;

2538 i‡–
	`z˛A«logD©aTy≥
–
ªp‹tRec
->
d©aTy≥
 ) )

2540 
	`z˛_BuûdA«logD©a
–
ªp‹tRec
->
d©aTy≥
, 
d©aPå
, 
pBuf
);

2541 
ªp‹tRec
->
ªp‹èbÀCh™ge
 = 
d©aPå
;

2543 
ªp‹tCh™geLí
 = 
	`z˛GëD©aTy≥Lígth
–
ªp‹tRec
->
d©aTy≥
 );

2544 
pBuf
 +
ªp‹tCh™geLí
;

2547 i‡–
	`PADDING_NEEDED
–
ªp‹tCh™geLí
 ) )

2548 
ªp‹tCh™geLí
++;

2549 
d©aPå
 +
ªp‹tCh™geLí
;

2555 
ªp‹tRec
->
timeoutPîiod
 = 
	`BUILD_UINT16
–
pBuf
[0],ÖBuf[1] );

2556 
pBuf
 += 2;

2561  ( (*)
cfgRï‹tCmd
 );

2562 
	}
}

2576 *
	$z˛P¨£InC⁄figRï‹tR•Cmd
–
z˛P¨£Cmd_t
 *
pCmd
 )

2578 
z˛CfgRï‹tR•Cmd_t
 *
cfgRï‹tR•Cmd
;

2579 
uöt8
 *
pBuf
 = 
pCmd
->
pD©a
;

2580 
uöt8
 
numAâr
;

2581 
uöt8
 
i
;

2583 
numAâr
 = 
pCmd
->
d©aLí
 / ( 1 + 1 + 2 );

2585 
cfgRï‹tR•Cmd
 = (
z˛CfgRï‹tR•Cmd_t
 *)
	`oßl_mem_Æloc
( ( zclCfgReportRspCmd_t )

2586 + ( 
numAâr
 * –
z˛CfgRï‹tSètus_t
 ) ) );

2587 i‡–
cfgRï‹tR•Cmd
 !
NULL
 )

2589 
cfgRï‹tR•Cmd
->
numAâr
 =ÇumAttr;

2590  
i
 = 0; i < 
cfgRï‹tR•Cmd
->
numAâr
; i++ )

2592 
cfgRï‹tR•Cmd
->
©åLi°
[
i
].
°©us
 = *
pBuf
++;

2593 
cfgRï‹tR•Cmd
->
©åLi°
[
i
].
dúe˘i⁄
 = *
pBuf
++;

2594 
cfgRï‹tR•Cmd
->
©åLi°
[
i
].
©åID
 = 
	`BUILD_UINT16
–
pBuf
[0],ÖBuf[1] );

2595 
pBuf
 += 2;

2599  ( (*)
cfgRï‹tR•Cmd
 );

2600 
	}
}

2614 *
	$z˛P¨£InRódRï‹tCfgCmd
–
z˛P¨£Cmd_t
 *
pCmd
 )

2616 
z˛RódRï‹tCfgCmd_t
 *
ªadRï‹tCfgCmd
;

2617 
uöt8
 *
pBuf
 = 
pCmd
->
pD©a
;

2618 
uöt8
 
numAâr
;

2619 
uöt8
 
i
;

2621 
numAâr
 = 
pCmd
->
d©aLí
 / ( 1 + 2 );

2623 
ªadRï‹tCfgCmd
 = (
z˛RódRï‹tCfgCmd_t
 *)
	`oßl_mem_Æloc
( ( zclReadReportCfgCmd_t )

2624 + ( 
numAâr
 * –
z˛RódRï‹tCfgRec_t
 ) ) );

2625 i‡–
ªadRï‹tCfgCmd
 !
NULL
 )

2627 
ªadRï‹tCfgCmd
->
numAâr
 =ÇumAttr;

2628  
i
 = 0; i < 
ªadRï‹tCfgCmd
->
numAâr
; i++)

2630 
ªadRï‹tCfgCmd
->
©åLi°
[
i
].
dúe˘i⁄
 = *
pBuf
++;;

2631 
ªadRï‹tCfgCmd
->
©åLi°
[
i
].
©åID
 = 
	`BUILD_UINT16
–
pBuf
[0],ÖBuf[1] );

2632 
pBuf
 += 2;

2636  ( (*)
ªadRï‹tCfgCmd
 );

2637 
	}
}

2651 *
	$z˛P¨£InRódRï‹tCfgR•Cmd
–
z˛P¨£Cmd_t
 *
pCmd
 )

2653 
z˛RódRï‹tCfgR•Cmd_t
 *
ªadRï‹tCfgR•Cmd
;

2654 
z˛Rï‹tCfgR•Rec_t
 *
ªp‹tR•Rec
;

2655 
uöt8
 
ªp‹tCh™geLí
;

2656 
uöt8
 *
pBuf
 = 
pCmd
->
pD©a
;

2657 
uöt8
 *
d©aPå
;

2658 
uöt8
 
numAâr
 = 0;

2659 
uöt8
 
hdrLí
;

2660 
uöt8
 
d©aLí
 = 0;

2661 
uöt8
 
°©us
;

2662 
uöt8
 
dúe˘i⁄
;

2663 
uöt8
 
d©aTy≥
;

2664 
uöt8
 
i
;

2667  
pBuf
 < ( 
pCmd
->
pD©a
 +ÖCmd->
d©aLí
 ) )

2669 
numAâr
++;

2671 
°©us
 = *
pBuf
++;

2672 
dúe˘i⁄
 = *
pBuf
++;

2673 
pBuf
 += 2;

2675 i‡–
°©us
 =
ZCL_STATUS_SUCCESS
 )

2677 i‡–
dúe˘i⁄
 =
ZCL_SEND_ATTR_REPORTS
 )

2679 
d©aTy≥
 = *
pBuf
++;

2680 
pBuf
 += 4;

2683 i‡–
	`z˛A«logD©aTy≥
–
d©aTy≥
 ) )

2685 
ªp‹tCh™geLí
 = 
	`z˛GëD©aTy≥Lígth
–
d©aTy≥
 );

2686 
pBuf
 +
ªp‹tCh™geLí
;

2689 i‡–
	`PADDING_NEEDED
–
ªp‹tCh™geLí
 ) )

2690 
ªp‹tCh™geLí
++;

2691 
d©aLí
 +
ªp‹tCh™geLí
;

2696 
pBuf
 += 2;

2701 
hdrLí
 = –
z˛RódRï‹tCfgR•Cmd_t
 ) + ( 
numAâr
 * –
z˛Rï‹tCfgR•Rec_t
 ) );

2703 
ªadRï‹tCfgR•Cmd
 = (
z˛RódRï‹tCfgR•Cmd_t
 *)
	`oßl_mem_Æloc
–
hdrLí
 + 
d©aLí
 );

2704 i‡–
ªadRï‹tCfgR•Cmd
 !
NULL
 )

2706 
pBuf
 = 
pCmd
->
pD©a
;

2707 
d©aPå
 = (
uöt8
 *)–(uöt8 *)
ªadRï‹tCfgR•Cmd
 + 
hdrLí
 );

2709 
ªadRï‹tCfgR•Cmd
->
numAâr
 =ÇumAttr;

2710  
i
 = 0; i < 
numAâr
; i++ )

2712 
ªp‹tR•Rec
 = &(
ªadRï‹tCfgR•Cmd
->
©åLi°
[
i
]);

2714 
ªp‹tR•Rec
->
°©us
 = *
pBuf
++;

2715 
ªp‹tR•Rec
->
dúe˘i⁄
 = *
pBuf
++;

2716 
ªp‹tR•Rec
->
©åID
 = 
	`BUILD_UINT16
–
pBuf
[0],ÖBuf[1] );

2717 
pBuf
 += 2;

2719 i‡–
ªp‹tR•Rec
->
°©us
 =
ZCL_STATUS_SUCCESS
 )

2721 i‡–
ªp‹tR•Rec
->
dúe˘i⁄
 =
ZCL_SEND_ATTR_REPORTS
 )

2723 
ªp‹tR•Rec
->
d©aTy≥
 = *
pBuf
++;

2724 
ªp‹tR•Rec
->
möRï‹tI¡
 = 
	`BUILD_UINT16
–
pBuf
[0],ÖBuf[1] );

2725 
pBuf
 += 2;

2726 
ªp‹tR•Rec
->
maxRï‹tI¡
 = 
	`BUILD_UINT16
–
pBuf
[0],ÖBuf[1] );

2727 
pBuf
 += 2;

2729 i‡–
	`z˛A«logD©aTy≥
–
ªp‹tR•Rec
->
d©aTy≥
 ) )

2731 
	`z˛_BuûdA«logD©a
–
ªp‹tR•Rec
->
d©aTy≥
, 
d©aPå
, 
pBuf
);

2732 
ªp‹tR•Rec
->
ªp‹èbÀCh™ge
 = 
d©aPå
;

2734 
ªp‹tCh™geLí
 = 
	`z˛GëD©aTy≥Lígth
–
ªp‹tR•Rec
->
d©aTy≥
 );

2735 
pBuf
 +
ªp‹tCh™geLí
;

2738 i‡–
	`PADDING_NEEDED
–
ªp‹tCh™geLí
 ) )

2739 
ªp‹tCh™geLí
++;

2740 
d©aPå
 +
ªp‹tCh™geLí
;

2745 
ªp‹tR•Rec
->
timeoutPîiod
 = 
	`BUILD_UINT16
–
pBuf
[0],ÖBuf[1] );

2746 
pBuf
 += 2;

2752  ( (*)
ªadRï‹tCfgR•Cmd
 );

2753 
	}
}

2767 *
	$z˛P¨£InRï‹tCmd
–
z˛P¨£Cmd_t
 *
pCmd
 )

2769 
z˛Rï‹tCmd_t
 *
ªp‹tCmd
;

2770 
z˛Rï‹t_t
 *
ªp‹tRec
;

2771 
uöt8
 *
pBuf
 = 
pCmd
->
pD©a
;

2772 
uöt8
 
©åD©aLí
;

2773 
uöt8
 *
d©aPå
;

2774 
uöt8
 
numAâr
 = 0;

2775 
uöt8
 
hdrLí
;

2776 
uöt8
 
d©aLí
 = 0;

2777 
uöt8
 
d©aTy≥
;

2778 
uöt8
 
i
;

2781  
pBuf
 < ( 
pCmd
->
pD©a
 +ÖCmd->
d©aLí
 ) )

2783 
numAâr
++;

2785 
pBuf
 += 2;

2787 
d©aTy≥
 = *
pBuf
++;

2789 
©åD©aLí
 = 
	`z˛GëAârD©aLígth
–
d©aTy≥
, 
pBuf
 );

2790 
pBuf
 +
©åD©aLí
;

2793 i‡–
	`PADDING_NEEDED
–
©åD©aLí
 ) )

2794 
©åD©aLí
++;

2795 
d©aLí
 +
©åD©aLí
;

2798 
hdrLí
 = –
z˛Rï‹tCmd_t
 ) + ( 
numAâr
 * –
z˛Rï‹t_t
 ) );

2800 
ªp‹tCmd
 = (
z˛Rï‹tCmd_t
 *)
	`oßl_mem_Æloc
–
hdrLí
 + 
d©aLí
 );

2801 i‡(
ªp‹tCmd
 !
NULL
 )

2803 
pBuf
 = 
pCmd
->
pD©a
;

2804 
d©aPå
 = (
uöt8
 *)–(uöt8 *)
ªp‹tCmd
 + 
hdrLí
 );

2806 
ªp‹tCmd
->
numAâr
 =ÇumAttr;

2807  
i
 = 0; i < 
numAâr
; i++ )

2809 
ªp‹tRec
 = &(
ªp‹tCmd
->
©åLi°
[
i
]);

2811 
ªp‹tRec
->
©åID
 = 
	`BUILD_UINT16
–
pBuf
[0],ÖBuf[1] );

2812 
pBuf
 += 2;

2813 
ªp‹tRec
->
d©aTy≥
 = *
pBuf
++;

2815 
©åD©aLí
 = 
	`z˛GëAârD©aLígth
–
ªp‹tRec
->
d©aTy≥
, 
pBuf
 );

2816 
	`oßl_mem˝y
–
d©aPå
, 
pBuf
, 
©åD©aLí
 );

2817 
ªp‹tRec
->
©åD©a
 = 
d©aPå
;

2819 
pBuf
 +
©åD©aLí
;

2822 i‡–
	`PADDING_NEEDED
–
©åD©aLí
 ) )

2823 
©åD©aLí
++;

2824 
d©aPå
 +
©åD©aLí
;

2828  ( (*)
ªp‹tCmd
 );

2829 
	}
}

2844 *
	$z˛P¨£InDeÁu…R•Cmd
–
z˛P¨£Cmd_t
 *
pCmd
 )

2846 
z˛DeÁu…R•Cmd_t
 *
deÁu…R•Cmd
;

2847 
uöt8
 *
pBuf
 = 
pCmd
->
pD©a
;

2849 
deÁu…R•Cmd
 = (
z˛DeÁu…R•Cmd_t
 *)
	`oßl_mem_Æloc
(  ( zclDefaultRspCmd_t ) );

2850 i‡–
deÁu…R•Cmd
 !
NULL
 )

2852 
deÁu…R•Cmd
->
comm™dID
 = *
pBuf
++;

2853 
deÁu…R•Cmd
->
°©usCode
 = *
pBuf
;

2856  ( (*)
deÁu…R•Cmd
 );

2857 
	}
}

2859 #ifde‡
ZCL_DISCOVER


2872 *
	$z˛P¨£InDiscCmd
–
z˛P¨£Cmd_t
 *
pCmd
 )

2874 
z˛DiscovîCmd_t
 *
discovîCmd
;

2875 
uöt8
 *
pBuf
 = 
pCmd
->
pD©a
;

2877 
discovîCmd
 = (
z˛DiscovîCmd_t
 *)
	`oßl_mem_Æloc
(  ( zclDiscoverCmd_t ) );

2878 i‡–
discovîCmd
 !
NULL
 )

2880 
discovîCmd
->
°¨tAâr
 = 
	`BUILD_UINT16
–
pBuf
[0],ÖBuf[1] );

2881 
pBuf
 += 2;

2882 
discovîCmd
->
maxAârIDs
 = *
pBuf
;

2885  ( (*)
discovîCmd
 );

2886 
	}
}

2900 
	#ZCLDISCRSPCMD_DATALEN
(
a
) ((a)-1)

2901 *
	`z˛P¨£InDiscR•Cmd
–
z˛P¨£Cmd_t
 *
pCmd
 )

	)

2903 
z˛DiscovîR•Cmd_t
 *
	gdiscovîR•Cmd
;

2904 
uöt8
 *
	gpBuf
 = 
pCmd
->
pD©a
;

2905 
uöt8
 
	gnumAâr
 = 
ZCLDISCRSPCMD_DATALEN
(
pCmd
->
d©aLí
) / ( 2 + 1 );

2906 
uöt8
 
	gi
;

2908 
	gdiscovîR•Cmd
 = (
z˛DiscovîR•Cmd_t
 *)
oßl_mem_Æloc
(  ( zclDiscoverRspCmd_t )

2909 + ( 
numAâr
 * (
z˛DiscovîInfo_t
) ) );

2910 i‡–
	gdiscovîR•Cmd
 !
NULL
 )

2912 
discovîR•Cmd
->
discCom∂ëe
 = *
pBuf
++;

2913 
	gdiscovîR•Cmd
->
	gnumAâr
 = 
numAâr
;

2915  
	gi
 = 0; i < 
	gnumAâr
; i++ )

2917 
	gdiscovîR•Cmd
->
	g©åLi°
[
i
].
	g©åID
 = 
BUILD_UINT16
–
pBuf
[0],ÖBuf[1] );

2918 
	gpBuf
 += 2;

2919 
	gdiscovîR•Cmd
->
	g©åLi°
[
i
].
	gd©aTy≥
 = *
pBuf
++;;

2923  ( (*)
	gdiscovîR•Cmd
 );

2927 #ifde‡
ZCL_READ


2937 
uöt8
 
	$z˛Pro˚ssInRódCmd
–
z˛Incomög_t
 *
pInMsg
 )

2939 
z˛RódCmd_t
 *
ªadCmd
;

2940 
z˛RódR•Cmd_t
 *
ªadR•Cmd
;

2941 
z˛RódR•Sètus_t
 *
°©usRec
;

2942 
z˛AârRec_t
 
©åRec
;

2943 
uöt8
 
Àn
;

2944 
uöt8
 
i
;

2946 
ªadCmd
 = (
z˛RódCmd_t
 *)
pInMsg
->
©åCmd
;

2949 
Àn
 = –
z˛RódR•Cmd_t
 ) + (
ªadCmd
->
numAâr
 * –
z˛RódR•Sètus_t
 ));

2951 
ªadR•Cmd
 = 
	`oßl_mem_Æloc
–
Àn
 );

2952 i‡–
ªadR•Cmd
 =
NULL
 )

2953  
FALSE
;

2955 
ªadR•Cmd
->
numAâr
 = 
ªadCmd
->numAttr;

2956 
i
 = 0; i < 
ªadCmd
->
numAâr
; i++)

2958 
°©usRec
 = &(
ªadR•Cmd
->
©åLi°
[
i
]);

2960 
°©usRec
->
©åID
 = 
ªadCmd
->©åID[
i
];

2962 i‡–
	`z˛FödAârRec
–
pInMsg
->
msg
->
ídPoöt
,ÖInMsg->msg->
˛u°îId
, 
ªadCmd
->
©åID
[
i
], &
©åRec
 ) )

2964 
°©usRec
->
d©a
 = 
©åRec
.
©å
.
d©aPå
;

2965 
°©usRec
->
°©us
 = 
ZCL_STATUS_SUCCESS
;

2966 
°©usRec
->
d©aTy≥
 = 
©åRec
.
©å
.dataType;

2970 
°©usRec
->
°©us
 = 
ZCL_STATUS_UNSUPPORTED_ATTRIBUTE
;

2975 
	`z˛_SídRódR•
–
pInMsg
->
msg
->
ídPoöt
, &’InMsg->msg->
§cAddr
),ÖInMsg->msg->
˛u°îId
,

2976 
ªadR•Cmd
, 
ZCL_FRAME_SERVER_CLIENT_DIR
,

2977 
åue
, 
pInMsg
->
hdr
.
å™sSeqNum
 );

2978 
	`oßl_mem_‰ì
–
ªadR•Cmd
 );

2980  
TRUE
;

2981 
	}
}

2984 #ifde‡
ZCL_WRITE


2994 
uöt8
 
	$z˛Pro˚ssInWrôeCmd
–
z˛Incomög_t
 *
pInMsg
 )

2996 
z˛WrôeCmd_t
 *
wrôeCmd
;

2997 
z˛WrôeRec_t
 *
°©usRec
;

2998 
z˛WrôeR•Cmd_t
 *
wrôeR•Cmd
;

2999 
z˛AârRec_t
 
©åRec
;

3000 
uöt8
 
£ndR•
 = 
FALSE
;

3001 
uöt8
 
°©us
;

3002 
uöt8
 
i
, 
j
 = 0;

3004 
wrôeCmd
 = (
z˛WrôeCmd_t
 *)
pInMsg
->
©åCmd
;

3005 i‡–
pInMsg
->
hdr
.
comm™dID
 =
ZCL_CMD_WRITE
 )

3008 
wrôeR•Cmd
 = (
z˛WrôeR•Cmd_t
 *)
	`oßl_mem_Æloc
( ( zclWriteRspCmd_t )

3009 + –
z˛WrôeR•Sètus_t
 ) * 
wrôeCmd
->
numAâr
 );

3010 i‡–
wrôeR•Cmd
 =
NULL
 )

3011  
FALSE
;

3012 
£ndR•
 = 
TRUE
;

3015 
i
 = 0; i < 
wrôeCmd
->
numAâr
; i++)

3017 
°©usRec
 = &(
wrôeCmd
->
©åLi°
[
i
]);

3019 i‡–
	`z˛FödAârRec
–
pInMsg
->
msg
->
ídPoöt
,ÖInMsg->msg->
˛u°îId
, 
°©usRec
->
©åID
, &
©åRec
 ) )

3021 i‡–
°©usRec
->
d©aTy≥
 =
©åRec
.
©å
.dataType )

3023 
°©us
 = 
	`z˛WrôeAârD©a
–&
©åRec
, 
°©usRec
 );

3026 i‡–
£ndR•
 && 
°©us
 !
ZCL_STATUS_SUCCESS
 )

3029 
wrôeR•Cmd
->
©åLi°
[
j
].
°©us
 = status;

3030 
wrôeR•Cmd
->
©åLi°
[
j
++].
©åID
 = 
°©usRec
->attrID;

3036 i‡–
£ndR•
 )

3038 
wrôeR•Cmd
->
©åLi°
[
j
].
°©us
 = 
ZCL_STATUS_INVALID_DATA_TYPE
;

3039 
wrôeR•Cmd
->
©åLi°
[
j
++].
©åID
 = 
°©usRec
->attrID;

3046 i‡–
£ndR•
 )

3048 
wrôeR•Cmd
->
©åLi°
[
j
].
°©us
 = 
ZCL_STATUS_UNSUPPORTED_ATTRIBUTE
;

3049 
wrôeR•Cmd
->
©åLi°
[
j
++].
©åID
 = 
°©usRec
->attrID;

3054 i‡–
£ndR•
 )

3056 
wrôeR•Cmd
->
numAâr
 = 
j
;

3057 i‡–
wrôeR•Cmd
->
numAâr
 == 0 )

3062 
wrôeR•Cmd
->
©åLi°
[0].
°©us
 = 
ZCL_STATUS_SUCCESS
;

3063 
wrôeR•Cmd
->
numAâr
 = 1;

3066 
	`z˛_SídWrôeR•
–
pInMsg
->
msg
->
ídPoöt
, &’InMsg->msg->
§cAddr
),

3067 
pInMsg
->
msg
->
˛u°îId
, 
wrôeR•Cmd
, 
ZCL_FRAME_SERVER_CLIENT_DIR
,

3068 
åue
, 
pInMsg
->
hdr
.
å™sSeqNum
 );

3069 
	`oßl_mem_‰ì
–
wrôeR•Cmd
 );

3072  
TRUE
;

3073 
	}
}

3086 
	$z˛RevîtWrôeUndividedCmd
–
z˛Incomög_t
 *
pInMsg
,

3087 
z˛WrôeRec_t
 *
curWrôeRec
, 
uöt16
 
numAâr
 )

3089 
z˛WrôeRec_t
 *
°©usRec
;

3090 
z˛AârRec_t
 
©åRec
;

3091 
uöt8
 
d©aLí
;

3092 
uöt8
 
i
;

3094 
°©usRec
 = 
curWrôeRec
;

3095 
i
 = 0; i < 
numAâr
; i++)

3097 
°©usRec
 = &(
curWrôeRec
[
i
]);

3099 i‡–!
	`z˛FödAârRec
–
pInMsg
->
msg
->
ídPoöt
,ÖInMsg->msg->
˛u°îId
, 
°©usRec
->
©åID
, &
©åRec
 ) )

3103 
d©aLí
 = 
	`z˛GëAârD©aLígth
–
©åRec
.
©å
.
d©aTy≥
, 
°©usRec
->
©åD©a
 );

3104 
	`oßl_mem˝y
–
©åRec
.
©å
.
d©aPå
, 
°©usRec
->
©åD©a
, 
d©aLí
 );

3106 
	}
}

3117 
uöt8
 
	$z˛Pro˚ssInWrôeUndividedCmd
–
z˛Incomög_t
 *
pInMsg
 )

3119 
z˛WrôeCmd_t
 *
wrôeCmd
;

3120 
z˛WrôeRec_t
 *
°©usRec
;

3121 
z˛WrôeRec_t
 *
curWrôeRec
;

3122 
z˛WrôeRec_t
 *
curSètusRec
;

3123 
z˛WrôeR•Cmd_t
 *
wrôeR•Cmd
;

3124 
z˛AârRec_t
 
©åRec
;

3125 
uöt8
 *
curD©aPå
;

3126 
uöt8
 
hdrLí
;

3127 
uöt8
 
d©aLí
;

3128 
uöt8
 
curLí
 = 0;

3129 
uöt8
 
°©us
;

3130 
uöt8
 
i
, 
j
 = 0;

3132 
wrôeCmd
 = (
z˛WrôeCmd_t
 *)
pInMsg
->
©åCmd
;

3135 
wrôeR•Cmd
 = (
z˛WrôeR•Cmd_t
 *)
	`oßl_mem_Æloc
( ( zclWriteRspCmd_t )

3136 + –
z˛WrôeR•Sètus_t
 )* 
wrôeCmd
->
numAâr
 );

3137 i‡–
wrôeR•Cmd
 =
NULL
 )

3138  
FALSE
;

3142 
i
 = 0; i < 
wrôeCmd
->
numAâr
; i++)

3144 
°©usRec
 = &(
wrôeCmd
->
©åLi°
[
i
]);

3146 i‡–!
	`z˛FödAârRec
–
pInMsg
->
msg
->
ídPoöt
,ÖInMsg->msg->
˛u°îId
, 
°©usRec
->
©åID
, &
©åRec
 ) )

3149 
wrôeR•Cmd
->
©åLi°
[
j
].
°©us
 = 
ZCL_STATUS_UNSUPPORTED_ATTRIBUTE
;

3150 
wrôeR•Cmd
->
©åLi°
[
j
++].
©åID
 = 
°©usRec
->attrID;

3154 i‡–
°©usRec
->
d©aTy≥
 !
©åRec
.
©å
.dataType )

3157 
wrôeR•Cmd
->
©åLi°
[
j
].
°©us
 = 
ZCL_STATUS_INVALID_DATA_TYPE
;

3158 
wrôeR•Cmd
->
©åLi°
[
j
++].
©åID
 = 
°©usRec
->attrID;

3162 i‡–!
	`z˛_Ac˚ssCålWrôe
–
©åRec
.
©å
.
ac˚ssC⁄åﬁ
 ) )

3165 
wrôeR•Cmd
->
©åLi°
[
j
].
°©us
 = 
ZCL_STATUS_READ_ONLY
;

3166 
wrôeR•Cmd
->
©åLi°
[
j
++].
©åID
 = 
°©usRec
->attrID;

3170 
d©aLí
 = 
	`z˛GëAârD©aLígth
–
°©usRec
->
d©aTy≥
, sètusRec->
©åD©a
 );

3173 i‡–
	`PADDING_NEEDED
–
d©aLí
 ) )

3174 
d©aLí
++;

3175 
curLí
 +
d©aLí
;

3178 
wrôeR•Cmd
->
numAâr
 = 
j
;

3179 i‡–
wrôeR•Cmd
->
numAâr
 == 0 )

3182 
hdrLí
 = 
j
 * –
z˛WrôeRec_t
 );

3185 
curWrôeRec
 = (
z˛WrôeRec_t
 *Ë
	`oßl_mem_Æloc
–
hdrLí
 + 
curLí
 );

3186 i‡–
curWrôeRec
 =
NULL
 )

3188 
	`oßl_mem_‰ì
(
wrôeR•Cmd
 );

3189  
FALSE
;

3192 
curD©aPå
 = (
uöt8
 *)((uöt8 *)
curWrôeRec
 + 
hdrLí
);

3195 
i
 = 0; i < 
wrôeCmd
->
numAâr
; i++)

3197 
°©usRec
 = &(
wrôeCmd
->
©åLi°
[
i
]);

3198 
curSètusRec
 = &(
curWrôeRec
[
i
]);

3200 i‡–!
	`z˛FödAârRec
–
pInMsg
->
msg
->
ídPoöt
,ÖInMsg->msg->
˛u°îId
, 
°©usRec
->
©åID
, &
©åRec
 ) )

3204 
curSètusRec
->
©åID
 = 
°©usRec
->attrID;

3205 
	`z˛RódAârD©a
–
curD©aPå
, &
©åRec
 );

3206 
curSètusRec
->
©åD©a
 = 
curD©aPå
;

3208 
°©us
 = 
	`z˛WrôeAârD©a
–&
©åRec
, 
°©usRec
 );

3211 i‡–
°©us
 !
ZCL_STATUS_SUCCESS
 )

3213 
wrôeR•Cmd
->
©åLi°
[
j
].
°©us
 = status;

3214 
wrôeR•Cmd
->
©åLi°
[
j
++].
©åID
 = 
°©usRec
->attrID;

3217 
	`z˛RevîtWrôeUndividedCmd
–
pInMsg
, 
curWrôeRec
, 
i
);

3221 
d©aLí
 = 
	`z˛GëAârD©aLígth
–
°©usRec
->
d©aTy≥
, sètusRec->
©åD©a
 );

3224 i‡–
	`PADDING_NEEDED
–
d©aLí
 ) )

3225 
d©aLí
++;

3226 
curD©aPå
 +
d©aLí
;

3229 
wrôeR•Cmd
->
numAâr
 = 
j
;

3230 i‡–
wrôeR•Cmd
->
numAâr
 == 0 )

3235 
wrôeR•Cmd
->
©åLi°
[0].
°©us
 = 
ZCL_STATUS_SUCCESS
;

3236 
wrôeR•Cmd
->
numAâr
 = 1;

3239 
	`oßl_mem_‰ì
–
curWrôeRec
 );

3242 
	`z˛_SídWrôeR•
–
pInMsg
->
msg
->
ídPoöt
, &’InMsg->msg->
§cAddr
),

3243 
pInMsg
->
msg
->
˛u°îId
, 
wrôeR•Cmd
, 
ZCL_FRAME_SERVER_CLIENT_DIR
,

3244 
åue
, 
pInMsg
->
hdr
.
å™sSeqNum
 );

3245 
	`oßl_mem_‰ì
–
wrôeR•Cmd
 );

3247  
TRUE
;

3248 
	}
}

3251 #ifde‡
ZCL_DISCOVER


3261 
uöt8
 
	$z˛Pro˚ssInDiscCmd
–
z˛Incomög_t
 *
pInMsg
 )

3263 
z˛DiscovîCmd_t
 *
discovîCmd
;

3264 
z˛DiscovîR•Cmd_t
 *
discovîR•Cmd
;

3265 
uöt8
 
discCom∂ëe
 = 
TRUE
;

3266 
z˛AârRec_t
 
©åRec
;

3267 
uöt16
 
©åID
;

3268 
uöt8
 
i
;

3270 
discovîCmd
 = (
z˛DiscovîCmd_t
 *)
pInMsg
->
©åCmd
;

3273  
i
 = 0, 
©åID
 = 
discovîCmd
->
°¨tAâr
; i < discovîCmd->
maxAârIDs
; i++,áttrID++ )

3275 i‡–!
	`z˛FödNextAârRec
–
pInMsg
->
msg
->
ídPoöt
,ÖInMsg->msg->
˛u°îId
, &
©åID
, &
©åRec
 ) )

3280 
discovîR•Cmd
 = (
z˛DiscovîR•Cmd_t
 *)
	`oßl_mem_Æloc
(  (zclDiscoverRspCmd_t)

3281 +  ( 
z˛DiscovîInfo_t
 ) * 
i
 );

3282 i‡–
discovîR•Cmd
 =
NULL
 )

3283  
FALSE
;

3285 
discovîR•Cmd
->
numAâr
 = 
i
;

3286 i‡–
discovîR•Cmd
->
numAâr
 != 0 )

3288  
i
 = 0, 
©åID
 = 
discovîCmd
->
°¨tAâr
; i < 
discovîR•Cmd
->
numAâr
; i++,áttrID++ )

3290 i‡–!
	`z˛FödNextAârRec
–
pInMsg
->
msg
->
ídPoöt
,ÖInMsg->msg->
˛u°îId
, &
©åID
, &
©åRec
 ) )

3293 
discovîR•Cmd
->
©åLi°
[
i
].
©åID
 = 
©åRec
.
©å
.
©åId
;

3294 
discovîR•Cmd
->
©åLi°
[
i
].
d©aTy≥
 = 
©åRec
.
©å
.dataType;

3298 i‡–
	`z˛FödNextAârRec
–
pInMsg
->
msg
->
ídPoöt
,ÖInMsg->msg->
˛u°îId
, &
©åID
, &
©åRec
 ) )

3299 
discCom∂ëe
 = 
FALSE
;

3302 
discovîR•Cmd
->
discCom∂ëe
 = discComplete;

3303 
	`z˛_SídDiscovîR•Cmd
–
pInMsg
->
msg
->
ídPoöt
, &pInMsg->msg->
§cAddr
,

3304 
pInMsg
->
msg
->
˛u°îId
, 
discovîR•Cmd
, 
ZCL_FRAME_SERVER_CLIENT_DIR
,

3305 
åue
, 
pInMsg
->
hdr
.
å™sSeqNum
 );

3306 
	`oßl_mem_‰ì
–
discovîR•Cmd
 );

3308  
TRUE
;

3309 
	}
}

3321 
uöt8
 
	$z˛SídMsg
–
z˛Incomög_t
 *
pInMsg
 )

3323 
z˛IncomögMsg_t
 *
pCmd
;

3325 i‡–
z˛_Regi°îedMsgTaskID
 =
TASK_NO_TASK
 )

3326  ( 
TRUE
 );

3328 
pCmd
 = (
z˛IncomögMsg_t
 *)
	`oßl_msg_Æloˇã
(  ( zclIncomingMsg_t ) );

3329 i‡–
pCmd
 !
NULL
 )

3332 
pCmd
->
hdr
.
evít
 = 
ZCL_INCOMING_MSG
;

3333 
pCmd
->
z˛Hdr
 = 
pInMsg
->
hdr
;

3334 
pCmd
->
˛u°îId
 = 
pInMsg
->
msg
->clusterId;

3335 
pCmd
->
§cAddr
 = 
pInMsg
->
msg
->srcAddr;

3336 
pCmd
->
©åCmd
 = 
pInMsg
->attrCmd;

3339 
pInMsg
->
©åCmd
 = 
NULL
;

3342 
	`oßl_msg_£nd
–
z˛_Regi°îedMsgTaskID
, (
uöt8
 *)
pCmd
 );

3345  ( 
TRUE
 );

3346 
	}
}

	@Components/stack/zcl/zcl.h

40 #i‚de‡
ZCL_H


41 
	#ZCL_H


	)

43 #ifde‡
__˝lu•lus


51 
	~"AF.h
"

52 
	~"≠s_groups.h
"

59 
	#ZCL_CLUSTER_ID_GEN_BASIC
 0x0000

	)

60 
	#ZCL_CLUSTER_ID_GEN_POWER_CFG
 0x0001

	)

61 
	#ZCL_CLUSTER_ID_GEN_DEVICE_TEMP_CONFIG
 0x0002

	)

62 
	#ZCL_CLUSTER_ID_GEN_IDENTIFY
 0x0003

	)

63 
	#ZCL_CLUSTER_ID_GEN_GROUPS
 0x0004

	)

64 
	#ZCL_CLUSTER_ID_GEN_SCENES
 0x0005

	)

65 
	#ZCL_CLUSTER_ID_GEN_ON_OFF
 0x0006

	)

66 
	#ZCL_CLUSTER_ID_GEN_ON_OFF_SWITCH_CONFIG
 0x0007

	)

67 
	#ZCL_CLUSTER_ID_GEN_LEVEL_CONTROL
 0x0008

	)

68 
	#ZCL_CLUSTER_ID_GEN_ALARMS
 0x0009

	)

69 
	#ZCL_CLUSTER_ID_GEN_TIME
 0x000A

	)

70 
	#ZCL_CLUSTER_ID_GEN_LOCATION
 0x000B

	)

71 
	#ZCL_CLUSTER_ID_GEN_KEY_ESTABLISHMENT
 0x0800

	)

74 
	#ZCL_CLUSTER_ID_CLOSURES_SHADE_CONFIG
 0x0100

	)

77 
	#ZCL_CLUSTER_ID_HVAC_PUMP_CONFIG_CONTROL
 0x0200

	)

78 
	#ZCL_CLUSTER_ID_HAVC_THERMOSTAT
 0x0201

	)

79 
	#ZCL_CLUSTER_ID_HAVC_FAN_CONTROL
 0x0202

	)

80 
	#ZCL_CLUSTER_ID_HAVC_DIHUMIDIFICATION_CONTROL
 0x0203

	)

81 
	#ZCL_CLUSTER_ID_HAVC_USER_INTERFACE_CONFIG
 0x0204

	)

84 
	#ZCL_CLUSTER_ID_LIGHTING_COLOR_CONTROL
 0x0300

	)

85 
	#ZCL_CLUSTER_ID_LIGHTING_BALLAST_CONFIG
 0x0301

	)

88 
	#ZCL_CLUSTER_ID_MS_ILLUMINANCE_MEASUREMENT
 0x0400

	)

89 
	#ZCL_CLUSTER_ID_MS_ILLUMINANCE_LEVEL_SENSING_CONFIG
 0x0401

	)

90 
	#ZCL_CLUSTER_ID_MS_TEMPERATURE_MEASUREMENT
 0x0402

	)

91 
	#ZCL_CLUSTER_ID_MS_PRESSURE_MEASUREMENT
 0x0403

	)

92 
	#ZCL_CLUSTER_ID_MS_FLOW_MEASUREMENT
 0x0404

	)

93 
	#ZCL_CLUSTER_ID_MS_RELATIVE_HUMIDITY
 0x0405

	)

94 
	#ZCL_CLUSTER_ID_MS_OCCUPANCY_SENSING
 0x0406

	)

97 
	#ZCL_CLUSTER_ID_SS_IAS_ZONE
 0x0500

	)

98 
	#ZCL_CLUSTER_ID_SS_IAS_ACE
 0x0501

	)

99 
	#ZCL_CLUSTER_ID_SS_IAS_WD
 0x0502

	)

102 
	#ZCL_CLUSTER_ID_SE_PRICING
 0x0700

	)

103 
	#ZCL_CLUSTER_ID_SE_LOAD_CONTROL
 0x0701

	)

104 
	#ZCL_CLUSTER_ID_SE_SIMPLE_METERING
 0x0702

	)

105 
	#ZCL_CLUSTER_ID_SE_MESSAGE
 0x0703

	)

106 
	#ZCL_CLUSTER_ID_SE_REGISTRATION
 0x0704

	)

107 
	#ZCL_CLUSTER_ID_SE_SE_TUNNELING
 0x0705

	)

108 
	#ZCL_CLUSTER_ID_SE_PRE_PAYMENT
 0x0706

	)

111 
	#ZCL_FRAME_CONTROL_TYPE
 0x03

	)

112 
	#ZCL_FRAME_CONTROL_MANU_SPECIFIC
 0x04

	)

113 
	#ZCL_FRAME_CONTROL_DIRECTION
 0x08

	)

114 
	#ZCL_FRAME_CONTROL_DISABLE_DEFAULT_RSP
 0x10

	)

117 
	#ZCL_FRAME_TYPE_PROFILE_CMD
 0x00

	)

118 
	#ZCL_FRAME_TYPE_SPECIFIC_CMD
 0x01

	)

121 
	#ZCL_FRAME_CLIENT_SERVER_DIR
 0x00

	)

122 
	#ZCL_FRAME_SERVER_CLIENT_DIR
 0x01

	)

125 
	#CC_MANUFACTURER_CODE
 0x1001

	)

128 
	#ZCL_CMD_READ
 0x00

	)

129 
	#ZCL_CMD_READ_RSP
 0x01

	)

130 
	#ZCL_CMD_WRITE
 0x02

	)

131 
	#ZCL_CMD_WRITE_UNDIVIDED
 0x03

	)

132 
	#ZCL_CMD_WRITE_RSP
 0x04

	)

133 
	#ZCL_CMD_WRITE_NO_RSP
 0x05

	)

134 
	#ZCL_CMD_CONFIG_REPORT
 0x06

	)

135 
	#ZCL_CMD_CONFIG_REPORT_RSP
 0x07

	)

136 
	#ZCL_CMD_READ_REPORT_CFG
 0x08

	)

137 
	#ZCL_CMD_READ_REPORT_CFG_RSP
 0x09

	)

138 
	#ZCL_CMD_REPORT
 0x0a

	)

139 
	#ZCL_CMD_DEFAULT_RSP
 0x0b

	)

140 
	#ZCL_CMD_DISCOVER
 0x0c

	)

141 
	#ZCL_CMD_DISCOVER_RSP
 0x0d

	)

143 
	#ZCL_CMD_MAX
 
ZCL_CMD_DISCOVER_RSP


	)

146 
	#ZCL_DATATYPE_NO_DATA
 0x00

	)

147 
	#ZCL_DATATYPE_DATA8
 0x08

	)

148 
	#ZCL_DATATYPE_DATA16
 0x09

	)

149 
	#ZCL_DATATYPE_DATA24
 0x0a

	)

150 
	#ZCL_DATATYPE_DATA32
 0x0b

	)

151 
	#ZCL_DATATYPE_BOOLEAN
 0x10

	)

152 
	#ZCL_DATATYPE_BITMAP8
 0x18

	)

153 
	#ZCL_DATATYPE_BITMAP16
 0x19

	)

154 
	#ZCL_DATATYPE_BITMAP24
 0x1a

	)

155 
	#ZCL_DATATYPE_BITMAP32
 0x1b

	)

156 
	#ZCL_DATATYPE_UINT8
 0x20

	)

157 
	#ZCL_DATATYPE_UINT16
 0x21

	)

158 
	#ZCL_DATATYPE_UINT24
 0x22

	)

159 
	#ZCL_DATATYPE_UINT32
 0x23

	)

160 
	#ZCL_DATATYPE_UINT40
 0x24

	)

161 
	#ZCL_DATATYPE_UINT48
 0x25

	)

162 
	#ZCL_DATATYPE_INT8
 0x28

	)

163 
	#ZCL_DATATYPE_INT16
 0x29

	)

164 
	#ZCL_DATATYPE_INT24
 0x2a

	)

165 
	#ZCL_DATATYPE_INT32
 0x2b

	)

166 
	#ZCL_DATATYPE_ENUM8
 0x30

	)

167 
	#ZCL_DATATYPE_ENUM16
 0x31

	)

168 
	#ZCL_DATATYPE_SEMI_PREC
 0x38

	)

169 
	#ZCL_DATATYPE_SINGLE_PREC
 0x39

	)

170 
	#ZCL_DATATYPE_DOUBLE_PREC
 0x3a

	)

171 
	#ZCL_DATATYPE_OCTET_STR
 0x41

	)

172 
	#ZCL_DATATYPE_CHAR_STR
 0x42

	)

173 
	#ZCL_DATATYPE_TOD
 0xe0

	)

174 
	#ZCL_DATATYPE_DATE
 0xe1

	)

175 
	#ZCL_DATATYPE_UTC
 0xe2

	)

176 
	#ZCL_DATATYPE_CLUSTER_ID
 0xe8

	)

177 
	#ZCL_DATATYPE_ATTR_ID
 0xe9

	)

178 
	#ZCL_DATATYPE_BAC_OID
 0xó

	)

179 
	#ZCL_DATATYPE_IEEE_ADDR
 0xf0

	)

180 
	#ZCL_DATATYPE_UNKNOWN
 0xff

	)

183 
	#ZCL_STATUS_SUCCESS
 0x00

	)

184 
	#ZCL_STATUS_FAILURE
 0x01

	)

186 
	#ZCL_STATUS_MALFORMED_COMMAND
 0x80

	)

187 
	#ZCL_STATUS_UNSUP_CLUSTER_COMMAND
 0x81

	)

188 
	#ZCL_STATUS_UNSUP_GENERAL_COMMAND
 0x82

	)

189 
	#ZCL_STATUS_UNSUP_MANU_CLUSTER_COMMAND
 0x83

	)

190 
	#ZCL_STATUS_UNSUP_MANU_GENERAL_COMMAND
 0x84

	)

191 
	#ZCL_STATUS_INVALID_FIELD
 0x85

	)

192 
	#ZCL_STATUS_UNSUPPORTED_ATTRIBUTE
 0x86

	)

193 
	#ZCL_STATUS_INVALID_VALUE
 0x87

	)

194 
	#ZCL_STATUS_READ_ONLY
 0x88

	)

195 
	#ZCL_STATUS_INSUFFICIENT_SPACE
 0x89

	)

196 
	#ZCL_STATUS_DUPLICATE_EXISTS
 0x8a

	)

197 
	#ZCL_STATUS_NOT_FOUND
 0x8b

	)

198 
	#ZCL_STATUS_UNREPORTABLE_ATTRIBUTE
 0x8c

	)

199 
	#ZCL_STATUS_INVALID_DATA_TYPE
 0x8d

	)

201 
	#ZCL_STATUS_HARDWARE_FAILURE
 0xc0

	)

202 
	#ZCL_STATUS_SOFTWARE_FAILURE
 0xc1

	)

203 
	#ZCL_STATUS_CALIBRATION_ERROR
 0xc2

	)

205 
	#ZCL_STATUS_CMD_HAS_RSP
 0xFF

206 

	)

208 
	#ACCESS_CONTROL_READ
 0x01

	)

209 
	#ACCESS_CONTROL_WRITE
 0x02

	)

210 
	#ACCESS_CONTROL_COMMAND
 0x04

	)

212 
	#ZCL_INVALID_CLUSTER_ID
 0xFFFF

	)

213 
	#ZCL_ATTR_ID_MAX
 0xFFFF

	)

216 
	#ZCL_SEND_ATTR_REPORTS
 0x00

	)

217 
	#ZCL_EXPECT_ATTR_REPORTS
 0x01

	)

220 
	#MAX_UTF8_STRING_LEN
 50

	)

225 
	#z˛_ProfûeCmd
–
a
 ) ( (aË=
ZCL_FRAME_TYPE_PROFILE_CMD
 )

	)

226 
	#z˛_Clu°îCmd
–
a
 ) ( (aË=
ZCL_FRAME_TYPE_SPECIFIC_CMD
 )

	)

228 
	#z˛_SîvîCmd
–
a
 ) ( (aË=
ZCL_FRAME_CLIENT_SERVER_DIR
 )

	)

229 
	#z˛_Clõ¡Cmd
–
a
 ) ( (aË=
ZCL_FRAME_SERVER_CLIENT_DIR
 )

	)

231 
	#UNICAST_MSG
–
msg
 ) ( (msg)->
wasBrﬂdˇ°
 =
Ál£
 && (msg)->
groupId
 =0 )

	)

234 
	#PADDING_NEEDED
–
bufLí
 ) ( (bufLíË% 2 )

	)

237 
	#ZCL_CLUSTER_ID_GEN
–
id
 ) ( \

	)

238 (
id
Ë<
ZCL_CLUSTER_ID_GEN_LOCATION
 )

239 
	#ZCL_CLUSTER_ID_CLOSURES
–
id
 ) ( (idË=
ZCL_CLUSTER_ID_CLOSURES_SHADE_CONFIG
 )

	)

240 
	#ZCL_CLUSTER_ID_HVAC
–
id
 ) ( (idË>
ZCL_CLUSTER_ID_HVAC_PUMP_CONFIG_CONTROL
 && \

	)

241 (
id
Ë<
ZCL_CLUSTER_ID_HAVC_USER_INTERFACE_CONFIG
 )

242 
	#ZCL_CLUSTER_ID_LIGHTING
–
id
 ) ( (idË>
ZCL_CLUSTER_ID_LIGHTING_COLOR_CONTROL
 && \

	)

243 (
id
Ë<
ZCL_CLUSTER_ID_LIGHTING_BALLAST_CONFIG
 )

244 
	#ZCL_CLUSTER_ID_MS
–
id
 ) ( (idË>
ZCL_CLUSTER_ID_MS_ILLUMINANCE_MEASUREMENT
 && \

	)

245 (
id
Ë<
ZCL_CLUSTER_ID_MS_OCCUPANCY_SENSING
 )

246 
	#ZCL_CLUSTER_ID_SS
–
id
 ) ( (idË>
ZCL_CLUSTER_ID_SS_IAS_ZONE
 && \

	)

247 (
id
Ë<
ZCL_CLUSTER_ID_SS_IAS_WD
 )

248 
	#ZCL_CLUSTER_ID_KEY
–
id
 ) ( (idË=
ZCL_CLUSTER_ID_GEN_KEY_ESTABLISHMENT
 )

	)

249 
	#ZCL_CLUSTER_ID_SE
–
id
 ) ( (idË>
ZCL_CLUSTER_ID_SE_PRICING
 && \

	)

250 (
id
Ë<
ZCL_CLUSTER_ID_SE_PRE_PAYMENT
 )

259 
ty≥
:2;

260 
m™uS≥cific
:1;

261 
dúe˘i⁄
:1;

262 
dißbÀDeÁu…R•
:1;

263 
ª£rved
:3;

264 } 
	tz˛FømeC⁄åﬁ_t
;

269 
z˛FømeC⁄åﬁ_t
 
fc
;

270 
uöt16
 
m™uCode
;

271 
uöt8
 
å™sSeqNum
;

272 
uöt8
 
comm™dID
;

273 } 
	tz˛FømeHdr_t
;

275 #ifde‡
ZCL_READ


279 
uöt8
 
numAâr
;

280 
uöt16
 
©åID
[];

282 } 
	tz˛RódCmd_t
;

287 
uöt16
 
©åID
;

288 
uöt8
 
°©us
;

289 
uöt8
 
d©aTy≥
;

290 
uöt8
 *
d©a
;

292 } 
	tz˛RódR•Sètus_t
;

297 
uöt8
 
numAâr
;

298 
z˛RódR•Sètus_t
 
©åLi°
[];

299 } 
	tz˛RódR•Cmd_t
;

305 
uöt16
 
©åID
;

306 
uöt8
 
d©aTy≥
;

307 
uöt8
 *
©åD©a
;

309 } 
	tz˛WrôeRec_t
;

314 
uöt8
 
numAâr
;

315 
z˛WrôeRec_t
 
©åLi°
[];

316 } 
	tz˛WrôeCmd_t
;

321 
uöt8
 
°©us
;

322 
uöt16
 
©åID
;

323 } 
	tz˛WrôeR•Sètus_t
;

328 
uöt8
 
numAâr
;

329 
z˛WrôeR•Sètus_t
 
©åLi°
[];

330 } 
	tz˛WrôeR•Cmd_t
;

335 
uöt8
 
dúe˘i⁄
;

336 
uöt16
 
©åID
;

337 
uöt8
 
d©aTy≥
;

338 
uöt16
 
möRï‹tI¡
;

339 
uöt16
 
maxRï‹tI¡
;

340 
uöt16
 
timeoutPîiod
;

341 
uöt8
 *
ªp‹èbÀCh™ge
;

343 } 
	tz˛CfgRï‹tRec_t
;

347 
uöt8
 
numAâr
;

348 
z˛CfgRï‹tRec_t
 
©åLi°
[];

349 } 
	tz˛CfgRï‹tCmd_t
;

354 
uöt8
 
°©us
;

355 
uöt8
 
dúe˘i⁄
;

356 
uöt16
 
©åID
;

357 } 
	tz˛CfgRï‹tSètus_t
;

362 
uöt8
 
numAâr
;

363 
z˛CfgRï‹tSètus_t
 
©åLi°
[];

364 } 
	tz˛CfgRï‹tR•Cmd_t
;

369 
uöt8
 
dúe˘i⁄
;

370 
uöt16
 
©åID
;

371 } 
	tz˛RódRï‹tCfgRec_t
;

375 
uöt8
 
numAâr
;

376 
z˛RódRï‹tCfgRec_t
 
©åLi°
[];

377 } 
	tz˛RódRï‹tCfgCmd_t
;

382 
uöt8
 
°©us
;

383 
uöt8
 
dúe˘i⁄
;

384 
uöt16
 
©åID
;

385 
uöt8
 
d©aTy≥
;

386 
uöt16
 
möRï‹tI¡
;

387 
uöt16
 
maxRï‹tI¡
;

388 
uöt16
 
timeoutPîiod
;

389 
uöt8
 *
ªp‹èbÀCh™ge
;

391 } 
	tz˛Rï‹tCfgR•Rec_t
;

396 
uöt8
 
numAâr
;

397 
z˛Rï‹tCfgR•Rec_t
 
©åLi°
[];

398 } 
	tz˛RódRï‹tCfgR•Cmd_t
;

403 
uöt16
 
©åID
;

404 
uöt8
 
d©aTy≥
;

405 
uöt8
 *
©åD©a
;

407 } 
	tz˛Rï‹t_t
;

412 
uöt8
 
numAâr
;

413 
z˛Rï‹t_t
 
©åLi°
[];

414 } 
	tz˛Rï‹tCmd_t
;

419 
uöt8
 
comm™dID
;

420 
uöt8
 
°©usCode
;

421 } 
	tz˛DeÁu…R•Cmd_t
;

426 
uöt16
 
°¨tAâr
;

428 
uöt8
 
maxAârIDs
;

430 } 
	tz˛DiscovîCmd_t
;

435 
uöt16
 
©åID
;

436 
uöt8
 
d©aTy≥
;

437 } 
	tz˛DiscovîInfo_t
;

442 
uöt8
 
discCom∂ëe
;

443 
uöt8
 
numAâr
;

444 
z˛DiscovîInfo_t
 
©åLi°
[];

445 } 
	tz˛DiscovîR•Cmd_t
;

450 
uöt8
 
°rLí
;

451 
uöt8
 *
pSå
;

452 } 
	tUTF8Såög_t
;

462 
afIncomögMSGPackë_t
 *
msg
;

463 
z˛FømeHdr_t
 
hdr
;

464 
uöt8
 *
pD©a
;

465 
uöt8
 
pD©aLí
;

466 *
©åCmd
;

467 } 
	tz˛Incomög_t
;

472 
z˛FømeHdr_t
 
hdr
;

473 
uöt16
 
ªÆClu°îID
;

474 
uöt16
 
©åID
;

475 *
cmdSåu˘
;

476 
uöt8
 
cmdLí
;

477 
uöt8
 *
cmdD©a
;

478 } 
	tz˛OutgoögCmd_t
;

487 
oßl_evít_hdr_t
 
hdr
;

488 
z˛FømeHdr_t
 
z˛Hdr
;

489 
uöt16
 
˛u°îId
;

490 
afAddrTy≥_t
 
§cAddr
;

491 *
©åCmd
;

492 } 
	tz˛IncomögMsg_t
;

497 
ZSètus_t
 (*
	tz˛InHdÃ_t
)–
	tz˛Incomög_t
 *
	tpInHdÃMsg
 );

503 
ZSètus_t
 (*
	tz˛InWπHdÃ_t
)–
	tz˛Incomög_t
 *
	tmsg
, 
	tuöt16
 
	tlogiˇlClu°îID
, 
	tz˛WrôeRec_t
 *
	twrôeRec
 );

508 
uöt16
 
©åId
;

509 
uöt8
 
d©aTy≥
;

510 
uöt8
 
ac˚ssC⁄åﬁ
;

511 *
d©aPå
;

512 } 
	tz˛Aâribuã_t
;

516 
uöt16
 
˛u°îID
;

517 
z˛Aâribuã_t
 
©å
;

518 } 
	tz˛AârRec_t
;

523 
uöt8
 (*
	tz˛VÆid©eAârD©a_t
)–
	tz˛AârRec_t
 *
	tpAâr
, 
	tz˛WrôeRec_t
 *
	tpAârInfo
 );

527 
uöt16
 
˛u°îID
;

528 
uöt8
 
›ti⁄
;

529 } 
	tz˛O±i⁄Rec_t
;

534 
uöt8
 
ídpoöt
;

535 
uöt8
 
d©aLí
;

536 
uöt8
 *
pD©a
;

537 } 
	tz˛P¨£Cmd_t
;

542 
uöt8
 
z˛_TaskID
;

543 
uöt8
 
z˛_SeqNum
;

548 #ifde‡
ZCL_WRITE


554 
	#z˛_SídWrôe
(
a
,
b
,
c
,
d
,
e
,
f
,
g
Ë(
	`z˛_SídWrôeReque°
–◊), (b), (c), (d), 
ZCL_CMD_WRITE
, (e), (f), (gË))

	)

561 
	#z˛_SídWrôeUndivided
(
a
,
b
,
c
,
d
,
e
,
f
,
g
Ë(
	`z˛_SídWrôeReque°
–◊), (b), (c), (d), 
ZCL_CMD_WRITE_UNDIVIDED
, (e), (f), (gË))

	)

568 
	#z˛_SídWrôeNoR•
(
a
,
b
,
c
,
d
,
e
,
f
,
g
Ë(
	`z˛_SídWrôeReque°
–◊), (b), (c), (d), 
ZCL_CMD_WRITE_NO_RSP
, (e), (f), (gË))

	)

578 
z˛_Inô
–
byã
 
èsk_id
 );

583 
UINT16
 
z˛_evít_lo›
–
byã
 
èsk_id
, UINT16 
evíts
 );

588 
ZSètus_t
 
z˛_ªgi°îPlugö
–
uöt16
 
°¨tLogClu°î
, uöt16 
ídLogClu°î
,

589 
z˛InHdÃ_t
 
p‚IncomögHdÃ
 );

594 
ZSètus_t
 
z˛_ªgi°îAârLi°
–
uöt8
 
ídpoöt
, uöt8 
numAâr
, 
CONST
 
z˛AârRec_t
 
©åLi°
[] );

599 
ZSètus_t
 
z˛_ªgi°îClu°îO±i⁄Li°
–
uöt8
 
ídpoöt
, uöt8 
numO±i⁄
, 
z˛O±i⁄Rec_t
 
›ti⁄Li°
[] );

604 
ZSètus_t
 
z˛_ªgi°îVÆid©eAârD©a
–
z˛VÆid©eAârD©a_t
 
p‚VÆid©eAârD©a
 );

609 
uöt8
 
z˛_ªgi°îF‹Msg
–uöt8 
èskId
 );

614 
ZSètus_t
 
z˛_SídComm™d
–
uöt8
 
§cEP
, 
afAddrTy≥_t
 *
d°Addr
,

615 
uöt16
 
˛u°îID
, 
uöt8
 
cmd
, uöt8 
•ecific
, uöt8 
dúe˘i⁄
,

616 
uöt8
 
dißbÀDeÁu…R•
, 
uöt16
 
m™uCode
, uöt8 
£qNum
,

617 
uöt8
 
cmdF‹m©Lí
, uöt8 *
cmdF‹m©
 );

619 #ifde‡
ZCL_READ


623 
ZSètus_t
 
z˛_SídRód
–
uöt8
 
§cEP
, 
afAddrTy≥_t
 *
d°Addr
,

624 
uöt16
 
ªÆClu°îID
, 
z˛RódCmd_t
 *
ªadCmd
,

625 
uöt8
 
dúe˘i⁄
, uöt8 
dißbÀDeÁu…R•
, uöt8 
£qNum
 );

630 
ZSètus_t
 
z˛_SídRódR•
–
uöt8
 
§cEP
, 
afAddrTy≥_t
 *
d°Addr
,

631 
uöt16
 
ªÆClu°îID
, 
z˛RódR•Cmd_t
 *
ªadR•Cmd
,

632 
uöt8
 
dúe˘i⁄
, uöt8 
dißbÀDeÁu…R•
, uöt8 
£qNum
 );

635 #ifde‡
ZCL_WRITE


639 
ZSètus_t
 
z˛_SídWrôeReque°
–
uöt8
 
§cEP
, 
afAddrTy≥_t
 *
d°Addr
,

640 
uöt16
 
ªÆClu°îID
, 
z˛WrôeCmd_t
 *
wrôeCmd
,

641 
uöt8
 
cmd
, uöt8 
dúe˘i⁄
, uöt8 
dißbÀDeÁu…R•
, uöt8 
£qNum
 );

646 
ZSètus_t
 
z˛_SídWrôeR•
–
uöt8
 
§cEP
, 
afAddrTy≥_t
 *
d°Addr
,

647 
uöt16
 
ªÆClu°îID
, 
z˛WrôeR•Cmd_t
 *
wrôeR•Cmd
,

648 
uöt8
 
dúe˘i⁄
, uöt8 
dißbÀDeÁu…R•
, uöt8 
£qNum
 );

651 #ifde‡
ZCL_REPORT


655 
ZSètus_t
 
z˛_SídC⁄figRï‹tCmd
–
uöt8
 
§cEP
, 
afAddrTy≥_t
 *
d°Addr
,

656 
uöt16
 
ªÆClu°îID
, 
z˛CfgRï‹tCmd_t
 *
cfgRï‹tCmd
,

657 
uöt8
 
dúe˘i⁄
, uöt8 
dißbÀDeÁu…R•
, uöt8 
£qNum
 );

662 
ZSètus_t
 
z˛_SídC⁄figRï‹tR•Cmd
–
uöt8
 
§cEP
, 
afAddrTy≥_t
 *
d°Addr
,

663 
uöt16
 
ªÆClu°îID
, 
z˛CfgRï‹tR•Cmd_t
 *
cfgRï‹tR•Cmd
,

664 
uöt8
 
dúe˘i⁄
, uöt8 
dißbÀDeÁu…R•
, uöt8 
£qNum
 );

669 
ZSètus_t
 
z˛_SídRódRï‹tCfgCmd
–
uöt8
 
§cEP
, 
afAddrTy≥_t
 *
d°Addr
,

670 
uöt16
 
ªÆClu°îID
, 
z˛RódRï‹tCfgCmd_t
 *
ªadRï‹tCfgCmd
,

671 
uöt8
 
dúe˘i⁄
, uöt8 
dißbÀDeÁu…R•
, uöt8 
£qNum
 );

676 
ZSètus_t
 
z˛_SídRódRï‹tCfgR•Cmd
–
uöt8
 
§cEP
, 
afAddrTy≥_t
 *
d°Addr
,

677 
uöt16
 
ªÆClu°îID
, 
z˛RódRï‹tCfgR•Cmd_t
 *
ªadRï‹tCfgR•Cmd
,

678 
uöt8
 
dúe˘i⁄
, uöt8 
dißbÀDeÁu…R•
, uöt8 
£qNum
 );

683 
ZSètus_t
 
z˛_SídRï‹tCmd
–
uöt8
 
§cEP
, 
afAddrTy≥_t
 *
d°Addr
,

684 
uöt16
 
ªÆClu°îID
, 
z˛Rï‹tCmd_t
 *
ªp‹tCmd
,

685 
uöt8
 
dúe˘i⁄
, uöt8 
dißbÀDeÁu…R•
, uöt8 
£qNum
 );

691 
ZSètus_t
 
z˛_SídDeÁu…R•Cmd
–
uöt8
 
§cEP
, 
afAddrTy≥_t
 *
d°Addr
,

692 
uöt16
 
ªÆClu°îID
, 
z˛DeÁu…R•Cmd_t
 *
deÁu…R•Cmd
,

693 
uöt8
 
dúe˘i⁄
, uöt8 
dißbÀDeÁu…R•
, uöt8 
£qNum
 );

695 #ifde‡
ZCL_DISCOVER


699 
ZSètus_t
 
z˛_SídDiscovîCmd
–
uöt8
 
§cEP
, 
afAddrTy≥_t
 *
d°Addr
,

700 
uöt16
 
ªÆClu°îID
, 
z˛DiscovîCmd_t
 *
discovîCmd
,

701 
uöt8
 
dúe˘i⁄
, uöt8 
dißbÀDeÁu…R•
, uöt8 
£qNum
 );

706 
ZSètus_t
 
z˛_SídDiscovîR•Cmd
–
uöt8
 
§cEP
, 
afAddrTy≥_t
 *
d°Addr
,

707 
uöt16
 
ªÆClu°îID
, 
z˛DiscovîR•Cmd_t
 *
discovîR•Cmd
,

708 
uöt8
 
dúe˘i⁄
, uöt8 
dißbÀDeÁu…R•
, uöt8 
£qNum
 );

711 #ifde‡
ZCL_READ


715 *
z˛P¨£InRódCmd
–
z˛P¨£Cmd_t
 *
pCmd
 );

718 #ifde‡
ZCL_WRITE


723 *
z˛P¨£InWrôeCmd
–
z˛P¨£Cmd_t
 *
pCmd
 );

726 #ifde‡
ZCL_REPORT


730 *
z˛P¨£InC⁄figRï‹tCmd
–
z˛P¨£Cmd_t
 *
pCmd
 );

734 *
z˛P¨£InRódRï‹tCfgCmd
–
z˛P¨£Cmd_t
 *
pCmd
 );

738 *
z˛P¨£InRï‹tCmd
–
z˛P¨£Cmd_t
 *
pCmd
 );

743 
uöt8
 
z˛A«logD©aTy≥
–uöt8 
d©aTy≥
 );

746 #ifde‡
ZCL_DISCOVER


750 *
z˛P¨£InDiscCmd
–
z˛P¨£Cmd_t
 *
pCmd
 );

756 
uöt8
 *
z˛P¨£Hdr
–
z˛FømeHdr_t
 *
hdr
, uöt8 *
pD©a
 );

761 
uöt8
 
z˛FödAârRec
–uöt8 
ídpoöt
, 
uöt16
 
ªÆClu°îID
, uöt16 
©åId
, 
z˛AârRec_t
 *
pAâr
 );

766 
uöt8
 
z˛RódAârD©a
–uöt8 *
pAârD©a
, 
z˛AârRec_t
 *
pAâr
 );

771 
uöt8
 
z˛GëD©aTy≥Lígth
–uöt8 
d©aTy≥
 );

776 
uöt8
 
z˛GëAârD©aLígth
–uöt8 
d©aTy≥
, uöt8 *
pD©a
);

781 #ifde‡
__˝lu•lus


	@Components/stack/zcl/zcl_closures.c

44 
	~"ZComDef.h
"

45 
	~"OSAL.h
"

46 
	~"z˛.h
"

47 
	~"z˛_gíîÆ.h
"

48 
	~"z˛_˛osuªs.h
"

50 #i‡
deföed
 ( 
INTER_PAN
 )

51 
	~"°ub_≠s.h
"

66 
	sz˛ClosuªsCBRec


68 
z˛ClosuªsCBRec
 *
	m√xt
;

69 
uöt8
 
	mídpoöt
;

70 
z˛Closuªs_AµCÆlbacks_t
 *
	mCBs
;

71 } 
	tz˛ClosuªsCBRec_t
;

84 
z˛ClosuªsCBRec_t
 *
	gz˛ClosuªsCBs
 = (z˛ClosuªsCBRec_à*)
NULL
;

85 
uöt8
 
	gz˛ClosuªsPlugöRegi°ed
 = 
FALSE
;

90 
ZSètus_t
 
z˛Closuªs_HdlIncomög
–
z˛Incomög_t
 *
pInMsg
 );

91 
ZSètus_t
 
z˛Closuªs_HdlInS≥cificComm™ds
–
z˛Incomög_t
 *
pInMsg
 );

92 
z˛Closuªs_AµCÆlbacks_t
 *
z˛Closuªs_FödCÆlbacks
–
uöt8
 
ídpoöt
 );

93 
ZSètus_t
 
z˛Closuªs_Pro˚ssInClosuªsCmds
–
z˛Incomög_t
 *
pInMsg
 );

105 
ZSètus_t
 
	$z˛Closuªs_Regi°îCmdCÆlbacks
–
uöt8
 
ídpoöt
, 
z˛Closuªs_AµCÆlbacks_t
 *
ˇŒbacks
 )

107 
z˛ClosuªsCBRec_t
 *
pNewIãm
;

108 
z˛ClosuªsCBRec_t
 *
pLo›
;

111 i‡–!
z˛ClosuªsPlugöRegi°ed
 )

113 
	`z˛_ªgi°îPlugö
–
ZCL_CLOSURES_LOGICAL_CLUSTER_ID_SHADE_CONFIG
,

114 
ZCL_CLOSURES_LOGICAL_CLUSTER_ID_SHADE_CONFIG
,

115 
z˛Closuªs_HdlIncomög
 );

116 
z˛ClosuªsPlugöRegi°ed
 = 
TRUE
;

120 
pNewIãm
 = 
	`oßl_mem_Æloc
––
z˛ClosuªsCBRec_t
 ) );

121 i‡–
pNewIãm
 =
NULL
 )

122  (
ZMemEº‹
);

124 
pNewIãm
->
√xt
 = (
z˛ClosuªsCBRec_t
 *)
NULL
;

125 
pNewIãm
->
ídpoöt
 =Éndpoint;

126 
pNewIãm
->
CBs
 = 
ˇŒbacks
;

129 i‡–
z˛ClosuªsCBs
 =
NULL
 )

131 
z˛ClosuªsCBs
 = 
pNewIãm
;

136 
pLo›
 = 
z˛ClosuªsCBs
;

137  
pLo›
->
√xt
 !
NULL
 )

138 
pLo›
 =ÖLo›->
√xt
;

141 
pLo›
->
√xt
 = 
pNewIãm
;

143  ( 
ZSuc˚ss
 );

144 
	}
}

155 
z˛Closuªs_AµCÆlbacks_t
 *
	$z˛Closuªs_FödCÆlbacks
–
uöt8
 
ídpoöt
 )

157 
z˛ClosuªsCBRec_t
 *
pCBs
;

159 
pCBs
 = 
z˛ClosuªsCBs
;

160  
pCBs
 )

162 i‡–
pCBs
->
ídpoöt
 ==Éndpoint )

163  ( 
pCBs
->
CBs
 );

164 
pCBs
 =ÖCBs->
√xt
;

166  ( (
z˛Closuªs_AµCÆlbacks_t
 *)
NULL
 );

167 
	}
}

181 
ZSètus_t
 
	$z˛Closuªs_HdlIncomög
–
z˛Incomög_t
 *
pInMsg
 )

183 
ZSètus_t
 
°©
 = 
ZSuc˚ss
;

185 #i‡
	`deföed
 ( 
INTER_PAN
 )

186 i‡–
	`StubAPS_I¡îP™
–
pInMsg
->
msg
->
§cAddr
.
∑nId
,ÖInMsg->msg->§cAddr.
ídPoöt
 ) )

187  ( 
°©
 );

189 i‡–
	`z˛_Clu°îCmd
–
pInMsg
->
hdr
.
fc
.
ty≥
 ) )

192 i‡–
pInMsg
->
hdr
.
fc
.
m™uS≥cific
 == 0 )

194 
°©
 = 
	`z˛Closuªs_HdlInS≥cificComm™ds
–
pInMsg
 );

199 
°©
 = 
ZFaûuª
;

205 
°©
 = 
ZFaûuª
;

207  ( 
°©
 );

208 
	}
}

220 
ZSètus_t
 
	$z˛Closuªs_HdlInS≥cificComm™ds
–
z˛Incomög_t
 *
pInMsg
 )

222 
ZSètus_t
 
°©
;

223 
z˛Closuªs_AµCÆlbacks_t
 *
pCBs
;

226 
pCBs
 = 
	`z˛Closuªs_FödCÆlbacks
–
pInMsg
->
msg
->
ídPoöt
 );

227 i‡–
pCBs
 =
NULL
 )

228  ( 
ZFaûuª
 );

230  
pInMsg
->
msg
->
˛u°îId
 )

232 
ZCL_CLOSURES_LOGICAL_CLUSTER_ID_SHADE_CONFIG
:

233 
°©
 = 
	`z˛Closuªs_Pro˚ssInClosuªsCmds
–
pInMsg
 );

237 
°©
 = 
ZFaûuª
;

241  ( 
°©
 );

242 
	}
}

254 
ZSètus_t
 
	$z˛Closuªs_Pro˚ssInClosuªsCmds
–
z˛Incomög_t
 *
pInMsg
 )

256 
ZSètus_t
 
°©
 = 
ZFaûuª
;

261 ()
pInMsg
;

262 i‡–
°©
 !
ZFaûuª
 )

263 
	`z˛Closuªs_FödCÆlbacks
( 0 );

265  ( 
°©
 );

266 
	}
}

	@Components/stack/zcl/zcl_closures.h

40 #i‚de‡
ZCL_CLOSURES_H


41 
	#ZCL_CLOSURES_H


	)

43 #ifde‡
__˝lu•lus


51 
	~"z˛.h
"

61 
	#ATTRID_CLOSURES_PHYSICAL_CLOSED_LIMIT
 0x0000

	)

62 
	#ATTRID_CLOSURES_MOTOR_STEP_SIZE
 0x0001

	)

63 
	#ATTRID_CLOSURES_STATUS
 0x0002

	)

65 
	#CLOSURES_STATUS_SHADE_IS_OPERATIONAL
 0x01

	)

66 
	#CLOSURES_STATUS_SHADE_IS_ADJUSTING
 0x02

	)

67 
	#CLOSURES_STATUS_SHADE_DIRECTION
 0x04

	)

68 
	#CLOSURES_STATUS_SHADE_MOTOR_FORWARD_DIRECTION
 0x08

	)

70 
	#ATTRID_CLOSURES_CLOSED_LIMIT
 0x0010

	)

71 
	#ATTRID_CLOSURES_MODE
 0x0012

	)

73 
	#CLOSURES_MODE_NORMAL_MODE
 0x00

	)

74 
	#CLOSURES_MODE_CONFIGURE_MODE
 0x01

	)

81 
	#ZCL_CLOSURES_LOGICAL_CLUSTER_ID_SHADE_CONFIG
 0x0010

	)

89 (*
z˛Closuªs_Pœ˚Hﬁdî_t
)( );

95 
z˛Closuªs_Pœ˚Hﬁdî_t
 
p‚Pœ˚Hﬁdî
;

97 } 
	tz˛Closuªs_AµCÆlbacks_t
;

103 
ZSètus_t
 
z˛Closuªs_Regi°îCmdCÆlbacks
–
uöt8
 
ídpoöt
, 
z˛Closuªs_AµCÆlbacks_t
 *
ˇŒbacks
 );

124 #ifde‡
__˝lu•lus


	@Components/stack/zcl/zcl_general.c

44 
	~"ZComDef.h
"

45 
	~"OSAL.h
"

46 
	~"OSAL_Nv.h
"

47 
	~"z˛.h
"

48 
	~"z˛_gíîÆ.h
"

49 
	~"ZDAµ.h
"

51 #i‡
deföed
 ( 
INTER_PAN
 )

52 
	~"°ub_≠s.h
"

58 
	#loˇti⁄Ty≥Absﬁuã
–
a
 ) ( (aË& 
LOCATION_TYPE_ABSOLUTE
 )

	)

59 
	#loˇti⁄Ty≥2D
–
a
 ) ( (aË& 
LOCATION_TYPE_2_D
 )

	)

60 
	#loˇti⁄Ty≥Co‹dö©eSy°em
–
a
 ) ( (aË& 
LOCATION_TYPE_COORDINATE_SYSTEM
 )

	)

62 #ifde‡
ZCL_SCENES


63 
	#z˛GíîÆ_S˚√sRemaögC≠acôy
(Ë–
ZCL_GEN_MAX_SCENES
 - 
	`z˛GíîÆ_Cou¡AŒS˚√s
(Ë)

	)

73 
	sz˛GíCBRec


75 
z˛GíCBRec
 *
	m√xt
;

76 
uöt8
 
	mídpoöt
;

77 
z˛GíîÆ_AµCÆlbacks_t
 *
	mCBs
;

78 } 
	tz˛GíCBRec_t
;

80 
	sz˛GíS˚√Iãm


82 
z˛GíS˚√Iãm
 *
	m√xt
;

83 
uöt8
 
	mídpoöt
;

84 
z˛GíîÆ_S˚√_t
 
	ms˚√
;

85 } 
	tz˛GíS˚√Iãm_t
;

87 
	sz˛GíAœrmIãm


89 
z˛GíAœrmIãm
 *
	m√xt
;

90 
uöt8
 
	mídpoöt
;

91 
z˛GíîÆ_Aœrm_t
 
	mÆ¨m
;

92 } 
	tz˛GíAœrmIãm_t
;

97 
uöt16
 
	mnumRecs
;

98 } 
	tnvGíS˚√sHdr_t
;

100 
	sz˛GíS˚√NVIãm


102 
uöt8
 
	mídpoöt
;

103 
z˛GíîÆ_S˚√_t
 
	ms˚√
;

104 } 
	tz˛GíS˚√NVIãm_t
;

117 
z˛GíCBRec_t
 *
	gz˛GíCBs
 = (z˛GíCBRec_à*)
NULL
;

118 
uöt8
 
	gz˛GíPlugöRegi°ed
 = 
FALSE
;

119 #ifde‡
ZCL_SCENES


120 
z˛GíS˚√Iãm_t
 *
	gz˛GíS˚√TabÀ
 = (z˛GíS˚√Iãm_à*)
NULL
;

122 #ifde‡
ZCL_ALARMS


123 
z˛GíAœrmIãm_t
 *
	gz˛GíAœrmTabÀ
 = (z˛GíAœrmIãm_à*)
NULL
;

129 
ZSètus_t
 
z˛GíîÆ_HdlIncomög
–
z˛Incomög_t
 *
pInMsg
 );

130 
ZSètus_t
 
z˛GíîÆ_HdlInS≥cificComm™ds
–
z˛Incomög_t
 *
pInMsg
 );

131 
z˛GíîÆ_AµCÆlbacks_t
 *
z˛GíîÆ_FödCÆlbacks
–
uöt8
 
ídpoöt
 );

134 #ifde‡
ZCL_BASIC


135 
ZSètus_t
 
z˛GíîÆ_Pro˚ssInBasic
–
z˛Incomög_t
 *
pInMsg
, 
z˛GíîÆ_AµCÆlbacks_t
 *
pCBs
 );

138 #ifde‡
ZCL_IDENTIFY


139 
ZSètus_t
 
z˛GíîÆ_Pro˚ssInIdítôy
–
z˛Incomög_t
 *
pInMsg
, 
z˛GíîÆ_AµCÆlbacks_t
 *
pCBs
 );

143 #ifde‡
ZCL_GROUPS


144 
ZSètus_t
 
z˛GíîÆ_Pro˚ssInGroupsSîvî
–
z˛Incomög_t
 *
pInMsg
 );

145 
ZSètus_t
 
z˛GíîÆ_Pro˚ssInGroupsClõ¡
–
z˛Incomög_t
 *
pInMsg
, 
z˛GíîÆ_AµCÆlbacks_t
 *
pCBs
 );

146 
ZSètus_t
 
z˛GíîÆ_AddGroup
–
uöt8
 
ídPoöt
, 
≠s_Group_t
 *
group
, uöt8 *
pD©a
 );

149 #ifde‡
ZCL_SCENES


150 
ZSètus_t
 
z˛GíîÆ_Pro˚ssInS˚√sSîvî
–
z˛Incomög_t
 *
pInMsg
, 
z˛GíîÆ_AµCÆlbacks_t
 *
pCBs
 );

151 
ZSètus_t
 
z˛GíîÆ_Pro˚ssInS˚√sClõ¡
–
z˛Incomög_t
 *
pInMsg
, 
z˛GíîÆ_AµCÆlbacks_t
 *
pCBs
 );

155 #ifde‡
ZCL_ON_OFF


156 
ZSètus_t
 
z˛GíîÆ_Pro˚ssInOnOff
–
z˛Incomög_t
 *
pInMsg
, 
z˛GíîÆ_AµCÆlbacks_t
 *
pCBs
 );

159 #ifde‡
ZCL_LEVEL_CTRL


160 
ZSètus_t
 
z˛GíîÆ_Pro˚ssInLevñC⁄åﬁ
–
z˛Incomög_t
 *
pInMsg
, 
z˛GíîÆ_AµCÆlbacks_t
 *
pCBs
 );

164 #ifde‡
ZCL_ALARMS


165 
ZSètus_t
 
z˛GíîÆ_Pro˚ssInAœrmsSîvî
–
z˛Incomög_t
 *
pInMsg
, 
z˛GíîÆ_AµCÆlbacks_t
 *
pCBs
 );

166 
ZSètus_t
 
z˛GíîÆ_Pro˚ssInAœrmsClõ¡
–
z˛Incomög_t
 *
pInMsg
, 
z˛GíîÆ_AµCÆlbacks_t
 *
pCBs
 );

170 #ifde‡
ZCL_LOCATION


171 
ZSètus_t
 
z˛GíîÆ_Pro˚ssInLoˇti⁄Sîvî
–
z˛Incomög_t
 *
pInMsg
, 
z˛GíîÆ_AµCÆlbacks_t
 *
pCBs
 );

172 
ZSètus_t
 
z˛GíîÆ_Pro˚ssInLoˇti⁄Clõ¡
–
z˛Incomög_t
 *
pInMsg
, 
z˛GíîÆ_AµCÆlbacks_t
 *
pCBs
 );

175 #ifde‡
ZCL_SCENES


176 
uöt8
 
z˛GíîÆ_S˚√sInôNV
( );

177 
z˛GíîÆ_S˚√sSëDeÁu…NV
( );

178 
z˛GíîÆ_S˚√sWrôeNV
( );

179 
uöt16
 
z˛GíîÆ_S˚√sRe°‹eFromNV
( );

192 
ZSètus_t
 
	$z˛GíîÆ_Regi°îCmdCÆlbacks
–
uöt8
 
ídpoöt
, 
z˛GíîÆ_AµCÆlbacks_t
 *
ˇŒbacks
 )

194 
z˛GíCBRec_t
 *
pNewIãm
;

195 
z˛GíCBRec_t
 *
pLo›
;

198 i‡–
z˛GíPlugöRegi°ed
 =
FALSE
 )

200 
	`z˛_ªgi°îPlugö
–
ZCL_CLUSTER_ID_GEN_BASIC
,

201 
ZCL_CLUSTER_ID_GEN_LOCATION
,

202 
z˛GíîÆ_HdlIncomög
 );

204 #ifde‡
ZCL_SCENES


206 
	`z˛GíîÆ_S˚√sInôNV
();

209 
	`z˛GíîÆ_S˚√sRe°‹eFromNV
();

212 
z˛GíPlugöRegi°ed
 = 
TRUE
;

216 
pNewIãm
 = 
	`oßl_mem_Æloc
––
z˛GíCBRec_t
 ) );

217 i‡–
pNewIãm
 =
NULL
 )

218  (
ZMemEº‹
);

220 
pNewIãm
->
√xt
 = (
z˛GíCBRec_t
 *)
NULL
;

221 
pNewIãm
->
ídpoöt
 =Éndpoint;

222 
pNewIãm
->
CBs
 = 
ˇŒbacks
;

225 i‡–
z˛GíCBs
 =
NULL
 )

227 
z˛GíCBs
 = 
pNewIãm
;

232 
pLo›
 = 
z˛GíCBs
;

233  
pLo›
->
√xt
 !
NULL
 )

234 
pLo›
 =ÖLo›->
√xt
;

237 
pLo›
->
√xt
 = 
pNewIãm
;

240  ( 
ZSuc˚ss
 );

241 
	}
}

243 #ifde‡
ZCL_IDENTIFY


256 
ZSètus_t
 
	$z˛GíîÆ_SídIdítify
–
uöt8
 
§cEP
, 
afAddrTy≥_t
 *
d°Addr
,

257 
uöt16
 
idítifyTime
, 
uöt8
 
dißbÀDeÁu…R•
, uöt8 
£qNum
 )

259 
uöt8
 
buf
[2];

261 
buf
[0] = 
	`LO_UINT16
–
idítifyTime
 );

262 
buf
[1] = 
	`HI_UINT16
–
idítifyTime
 );

264  
	`z˛_SídComm™d
–
§cEP
, 
d°Addr
, 
ZCL_CLUSTER_ID_GEN_IDENTIFY
,

265 
COMMAND_IDENTIFY
, 
TRUE
, 
ZCL_FRAME_CLIENT_SERVER_DIR
,

266 
dißbÀDeÁu…R•
, 0, 
£qNum
, 2, 
buf
 );

267 
	}
}

281 
ZSètus_t
 
	$z˛GíîÆ_SídIdítifyQuîyRe•⁄£
–
uöt8
 
§cEP
, 
afAddrTy≥_t
 *
d°Addr
,

282 
uöt16
 
timeout
, 
uöt8
 
dißbÀDeÁu…R•
, uöt8 
£qNum
 )

284 
uöt8
 
buf
[2];

286 
buf
[0] = 
	`LO_UINT16
–
timeout
 );

287 
buf
[1] = 
	`HI_UINT16
–
timeout
 );

289  
	`z˛_SídComm™d
–
§cEP
, 
d°Addr
, 
ZCL_CLUSTER_ID_GEN_IDENTIFY
,

290 
COMMAND_IDENTIFY_QUERY_RSP
, 
TRUE
,

291 
ZCL_FRAME_SERVER_CLIENT_DIR
, 
dißbÀDeÁu…R•
, 0, 
£qNum
, 2, 
buf
 );

292 
	}
}

295 #ifde‡
ZCL_GROUPS


311 
ZSètus_t
 
	$z˛GíîÆ_SídGroupReque°
–
uöt8
 
§cEP
, 
afAddrTy≥_t
 *
d°Addr
,

312 
uöt8
 
cmd
, 
uöt16
 
groupID
, uöt8 
dißbÀDeÁu…R•
, uöt8 
£qNum
 )

314 
uöt8
 
buf
[2];

316 
buf
[0] = 
	`LO_UINT16
–
groupID
 );

317 
buf
[1] = 
	`HI_UINT16
–
groupID
 );

319  ( 
	`z˛_SídComm™d
–
§cEP
, 
d°Addr
, 
ZCL_CLUSTER_ID_GEN_GROUPS
,

320 
cmd
, 
TRUE
, 
ZCL_FRAME_CLIENT_SERVER_DIR
,

321 
dißbÀDeÁu…R•
, 0, 
£qNum
, 2, 
buf
 ) );

322 
	}
}

341 
ZSètus_t
 
	$z˛GíîÆ_SídAddGroupReque°
–
uöt8
 
§cEP
, 
afAddrTy≥_t
 *
d°Addr
,

342 
uöt8
 
cmd
, 
uöt16
 
groupID
, uöt8 *
groupName
,

343 
uöt8
 
dißbÀDeÁu…R•
, uöt8 
£qNum
 )

345 
uöt8
 *
buf
;

346 
uöt8
 *
pBuf
;

347 
uöt8
 
Àn
;

348 
ZSètus_t
 
°©us
;

350 
Àn
 = 2;

351 
Àn
 +
groupName
[0] + 1;

353 
buf
 = 
	`oßl_mem_Æloc
–
Àn
 );

354 i‡–
buf
 )

356 
pBuf
 = 
buf
;

357 *
pBuf
++ = 
	`LO_UINT16
–
groupID
 );

358 *
pBuf
++ = 
	`HI_UINT16
–
groupID
 );

359 *
pBuf
++ = 
groupName
[0];

360 
	`oßl_mem˝y
–
pBuf
, &(
groupName
[1]), groupName[0] );

362 
°©us
 = 
	`z˛_SídComm™d
–
§cEP
, 
d°Addr
, 
ZCL_CLUSTER_ID_GEN_GROUPS
,

363 
cmd
, 
TRUE
, 
ZCL_FRAME_CLIENT_SERVER_DIR
,

364 
dißbÀDeÁu…R•
, 0, 
£qNum
, 
Àn
, 
buf
 );

365 
	`oßl_mem_‰ì
–
buf
 );

368 
°©us
 = 
ZMemEº‹
;

370  ( 
°©us
 );

371 
	}
}

390 
ZSètus_t
 
	$z˛GíîÆ_SídGroupGëMembîshùReque°
–
uöt8
 
§cEP
, 
afAddrTy≥_t
 *
d°Addr
,

391 
uöt8
 
cmd
, uöt8 
r•Cmd
, uöt8 
dúe˘i⁄
, uöt8 
ˇ∑côy
,

392 
uöt8
 
gΩC¡
, 
uöt16
 *
gΩLi°
, uöt8 
dißbÀDeÁu…R•
, uöt8 
£qNum
 )

394 
uöt8
 *
buf
;

395 
uöt8
 *
pBuf
;

396 
uöt8
 
Àn
 = 0;

397 
uöt8
 
i
;

398 
ZSètus_t
 
°©us
;

400 i‡–
r•Cmd
 )

401 
Àn
++;

403 
Àn
++;

404 
Àn
 + ( 
uöt16
 ) * 
gΩC¡
;

406 
buf
 = 
	`oßl_mem_Æloc
–
Àn
 );

407 i‡–
buf
 )

409 
pBuf
 = 
buf
;

410 i‡–
r•Cmd
 )

411 *
pBuf
++ = 
ˇ∑côy
;

413 *
pBuf
++ = 
gΩC¡
;

414  
i
 = 0; i < 
gΩC¡
; i++ )

416 *
pBuf
++ = 
	`LO_UINT16
–
gΩLi°
[
i
] );

417 *
pBuf
++ = 
	`HI_UINT16
–
gΩLi°
[
i
] );

420 
°©us
 = 
	`z˛_SídComm™d
–
§cEP
, 
d°Addr
, 
ZCL_CLUSTER_ID_GEN_GROUPS
,

421 
cmd
, 
TRUE
, 
dúe˘i⁄
,

422 
dißbÀDeÁu…R•
, 0, 
£qNum
, 
Àn
, 
buf
 );

423 
	`oßl_mem_‰ì
–
buf
 );

426 
°©us
 = 
ZMemEº‹
;

428  ( 
°©us
 );

429 
	}
}

444 
ZSètus_t
 
	$z˛GíîÆ_SídGroupRe•⁄£
–
uöt8
 
§cEP
, 
afAddrTy≥_t
 *
d°Addr
,

445 
uöt8
 
cmd
, uöt8 
°©us
, 
uöt16
 
groupID
,

446 
uöt8
 
dißbÀDeÁu…R•
, uöt8 
£qNum
 )

448 
uöt8
 
buf
[3];

450 
buf
[0] = 
°©us
;

451 
buf
[1] = 
	`LO_UINT16
–
groupID
 );

452 
buf
[2] = 
	`HI_UINT16
–
groupID
 );

454  
	`z˛_SídComm™d
–
§cEP
, 
d°Addr
, 
ZCL_CLUSTER_ID_GEN_GROUPS
,

455 
cmd
, 
TRUE
, 
ZCL_FRAME_SERVER_CLIENT_DIR
,

456 
dißbÀDeÁu…R•
, 0, 
£qNum
, 3, 
buf
 );

457 
	}
}

472 
ZSètus_t
 
	$z˛GíîÆ_SídGroupVõwRe•⁄£
–
uöt8
 
§cEP
, 
afAddrTy≥_t
 *
d°Addr
,

473 
uöt8
 
°©us
, 
≠s_Group_t
 *
gΩ
, uöt8 
dißbÀDeÁu…R•
, uöt8 
£qNum
 )

475 
uöt8
 *
buf
;

476 
uöt8
 
Àn
;

477 
ZSètus_t
 
°©
;

479 
Àn
 = 1 + 2;

481 i‡–
°©us
 =
ZCL_STATUS_SUCCESS
 )

482 
Àn
 +
gΩ
->
«me
[0] + 1;

484 
buf
 = 
	`oßl_mem_Æloc
–
Àn
 );

485 i‡–
buf
 )

487 
buf
[0] = 
°©us
;

488 
buf
[1] = 
	`LO_UINT16
–
gΩ
->
ID
 );

489 
buf
[2] = 
	`HI_UINT16
–
gΩ
->
ID
 );

491 i‡–
°©us
 =
ZCL_STATUS_SUCCESS
 )

493 
buf
[3] = 
gΩ
->
«me
[0];

494 
	`oßl_mem˝y
–&
buf
[4], (&
gΩ
->
«me
[1]), grp->name[0] );

497 
°©
 = 
	`z˛_SídComm™d
–
§cEP
, 
d°Addr
, 
ZCL_CLUSTER_ID_GEN_GROUPS
,

498 
COMMAND_GROUP_VIEW_RSP
, 
TRUE
, 
ZCL_FRAME_SERVER_CLIENT_DIR
,

499 
dißbÀDeÁu…R•
, 0, 
£qNum
, 
Àn
, 
buf
 );

500 
	`oßl_mem_‰ì
–
buf
 );

503 
°©
 = 
ZMemEº‹
;

505  ( 
°©
 );

506 
	}
}

509 #ifde‡
ZCL_SCENES


521 
ZSètus_t
 
	$z˛GíîÆ_SídAddS˚√
–
uöt8
 
§cEP
, 
afAddrTy≥_t
 *
d°Addr
,

522 
z˛GíîÆ_S˚√_t
 *
s˚√
, 
uöt8
 
dißbÀDeÁu…R•
, uöt8 
£qNum
 )

524 
uöt8
 *
buf
;

525 
uöt8
 *
pBuf
;

526 
uöt8
 
Àn
;

527 
ZSètus_t
 
°©us
;

529 
Àn
 = 2 + 1 + 2;

530 
Àn
 +
s˚√
->
«me
[0] + 1;

533 
Àn
 +
s˚√
->
extLí
;

535 
buf
 = 
	`oßl_mem_Æloc
–
Àn
 );

536 i‡–
buf
 )

538 
pBuf
 = 
buf
;

539 *
pBuf
++ = 
	`LO_UINT16
–
s˚√
->
groupID
 );

540 *
pBuf
++ = 
	`HI_UINT16
–
s˚√
->
groupID
 );

541 *
pBuf
++ = 
s˚√
->
ID
;

542 *
pBuf
++ = 
	`LO_UINT16
–
s˚√
->
å™sTime
 );

543 *
pBuf
++ = 
	`HI_UINT16
–
s˚√
->
å™sTime
 );

544 *
pBuf
++ = 
s˚√
->
«me
[0];

545 
	`oßl_mem˝y
–
pBuf
, &(
s˚√
->
«me
[1]), scene->name[0] );

546 
pBuf
 +
s˚√
->
«me
[0];

549 i‡–
s˚√
->
extLí
 > 0 )

550 
	`oßl_mem˝y
–
pBuf
, 
s˚√
->
extFõld
, s˚√->
extLí
 );

552 
°©us
 = 
	`z˛_SídComm™d
–
§cEP
, 
d°Addr
, 
ZCL_CLUSTER_ID_GEN_SCENES
,

553 
COMMAND_SCENE_ADD
, 
TRUE
, 
ZCL_FRAME_CLIENT_SERVER_DIR
,

554 
dißbÀDeÁu…R•
, 0, 
£qNum
, 
Àn
, 
buf
 );

555 
	`oßl_mem_‰ì
–
buf
 );

558 
°©us
 = 
ZMemEº‹
;

560  ( 
°©us
 );

561 
	}
}

583 
ZSètus_t
 
	$z˛GíîÆ_SídS˚√Reque°
–
uöt8
 
§cEP
, 
afAddrTy≥_t
 *
d°Addr
,

584 
uöt8
 
cmd
, 
uöt16
 
groupID
, uöt8 
s˚√ID
,

585 
uöt8
 
dißbÀDeÁu…R•
, uöt8 
£qNum
 )

587 
uöt8
 
buf
[3];

588 
uöt8
 
Àn
 = 2;

590 
buf
[0] = 
	`LO_UINT16
–
groupID
 );

591 
buf
[1] = 
	`HI_UINT16
–
groupID
 );

593 i‡–
cmd
 !
COMMAND_SCENE_REMOVE_ALL
 && cmd !
COMMAND_SCENE_GET_MEMBERSHIP
 )

595 
buf
[2] = 
s˚√ID
;

596 
Àn
++;

599  ( 
	`z˛_SídComm™d
–
§cEP
, 
d°Addr
, 
ZCL_CLUSTER_ID_GEN_SCENES
,

600 
cmd
, 
TRUE
, 
ZCL_FRAME_CLIENT_SERVER_DIR
,

601 
dißbÀDeÁu…R•
, 0, 
£qNum
, 
Àn
, 
buf
 ) );

602 
	}
}

619 
ZSètus_t
 
	$z˛GíîÆ_SídS˚√Re•⁄£
–
uöt8
 
§cEP
, 
afAddrTy≥_t
 *
d°Addr
,

620 
uöt8
 
cmd
, uöt8 
°©us
, 
uöt16
 
groupID
,

621 
uöt8
 
s˚√ID
, uöt8 
dißbÀDeÁu…R•
, uöt8 
£qNum
 )

623 
uöt8
 
buf
[4];

624 
uöt8
 
Àn
 = 1 + 2;

626 
buf
[0] = 
°©us
;

627 
buf
[1] = 
	`LO_UINT16
–
groupID
 );

628 
buf
[2] = 
	`HI_UINT16
–
groupID
 );

630 i‡–
cmd
 !
COMMAND_SCENE_REMOVE_ALL_RSP
 )

632 
buf
[3] = 
s˚√ID
;

633 
Àn
++;

636  
	`z˛_SídComm™d
–
§cEP
, 
d°Addr
, 
ZCL_CLUSTER_ID_GEN_SCENES
,

637 
cmd
, 
TRUE
, 
ZCL_FRAME_SERVER_CLIENT_DIR
,

638 
dißbÀDeÁu…R•
, 0, 
£qNum
, 
Àn
, 
buf
 );

639 
	}
}

653 
ZSètus_t
 
	$z˛GíîÆ_SídS˚√VõwRe•⁄£
–
uöt8
 
§cEP
, 
afAddrTy≥_t
 *
d°Addr
,

654 
uöt8
 
°©us
, 
z˛GíîÆ_S˚√_t
 *
s˚√
,

655 
uöt8
 
dißbÀDeÁu…R•
, uöt8 
£qNum
 )

657 
uöt8
 *
buf
;

658 
uöt8
 *
pBuf
;

659 
uöt8
 
Àn
 = 1 + 2 + 1;

660 
ZSètus_t
 
°©
;

662 i‡–
°©us
 =
ZCL_STATUS_SUCCESS
 )

664 
Àn
 += 2;

665 
Àn
 +
s˚√
->
«me
[0] + 1;

668 
Àn
 +
s˚√
->
extLí
;

671 
buf
 = 
	`oßl_mem_Æloc
–
Àn
 );

672 i‡–
buf
 )

674 
pBuf
 = 
buf
;

675 *
pBuf
++ = 
°©us
;

676 *
pBuf
++ = 
	`LO_UINT16
–
s˚√
->
groupID
 );

677 *
pBuf
++ = 
	`HI_UINT16
–
s˚√
->
groupID
 );

678 *
pBuf
++ = 
s˚√
->
ID
;

679 i‡–
°©us
 =
ZCL_STATUS_SUCCESS
 )

681 *
pBuf
++ = 
	`LO_UINT16
–
s˚√
->
å™sTime
 );

682 *
pBuf
++ = 
	`HI_UINT16
–
s˚√
->
å™sTime
 );

683 *
pBuf
++ = 
s˚√
->
«me
[0];

684 i‡–
s˚√
->
«me
[0] != 0 )

686 
	`oßl_mem˝y
–
pBuf
, &(
s˚√
->
«me
[1]), scene->name[0] );

687 
pBuf
 +
s˚√
->
«me
[0];

691 i‡–
s˚√
->
extLí
 > 0 )

692 
	`oßl_mem˝y
–
pBuf
, 
s˚√
->
extFõld
, s˚√->
extLí
 );

695 
°©
 = 
	`z˛_SídComm™d
–
§cEP
, 
d°Addr
, 
ZCL_CLUSTER_ID_GEN_SCENES
,

696 
COMMAND_SCENE_VIEW_RSP
, 
TRUE
, 
ZCL_FRAME_SERVER_CLIENT_DIR
,

697 
dißbÀDeÁu…R•
, 0, 
£qNum
, 
Àn
, 
buf
 );

698 
	`oßl_mem_‰ì
–
buf
 );

701 
°©
 = 
ZMemEº‹
;

703  ( 
°©
 );

704 
	}
}

722 
ZSètus_t
 
	$z˛GíîÆ_SídS˚√GëMembîshùRe•⁄£
–
uöt8
 
§cEP
, 
afAddrTy≥_t
 *
d°Addr
,

723 
uöt8
 
°©us
, uöt8 
ˇ∑côy
, uöt8 
s˚√C¡
, uöt8 *
s˚√Li°
,

724 
uöt16
 
groupID
, 
uöt8
 
dißbÀDeÁu…R•
, uöt8 
£qNum
 )

726 
uöt8
 *
buf
;

727 
uöt8
 *
pBuf
;

728 
uöt8
 
Àn
 = 1 + 1 + 2;

729 
uöt8
 
i
;

730 
ZSètus_t
 
°©
;

732 i‡–
°©us
 =
ZCL_STATUS_SUCCESS
 )

734 
Àn
++;

735 
Àn
 +
s˚√C¡
;

738 
buf
 = 
	`oßl_mem_Æloc
–
Àn
 );

739 i‡–
buf
 )

741 
pBuf
 = 
buf
;

742 *
pBuf
++ = 
°©us
;

743 *
pBuf
++ = 
ˇ∑côy
;

744 *
pBuf
++ = 
	`LO_UINT16
–
groupID
 );

745 *
pBuf
++ = 
	`HI_UINT16
–
groupID
 );

746 i‡–
°©us
 =
ZCL_STATUS_SUCCESS
 )

748 *
pBuf
++ = 
s˚√C¡
;

749  
i
 = 0; i < 
s˚√C¡
; i++ )

750 *
pBuf
++ = 
s˚√Li°
[
i
];

753 
°©
 = 
	`z˛_SídComm™d
–
§cEP
, 
d°Addr
, 
ZCL_CLUSTER_ID_GEN_SCENES
,

754 
COMMAND_SCENE_GET_MEMBERSHIP_RSP
, 
TRUE
,

755 
ZCL_FRAME_SERVER_CLIENT_DIR
, 
dißbÀDeÁu…R•
, 0, 
£qNum
, 
Àn
, 
buf
 );

756 
	`oßl_mem_‰ì
–
buf
 );

759 
°©
 = 
ZMemEº‹
;

761  ( 
°©
 );

762 
	}
}

765 #ifde‡
ZCL_LEVEL_CTRL


782 
ZSètus_t
 
	$z˛GíîÆ_SídLevñC⁄åﬁMoveToLevñReque°
–
uöt8
 
§cEP
, 
afAddrTy≥_t
 *
d°Addr
,

783 
uöt8
 
cmd
, uöt8 
Àvñ
, 
uöt16
 
å™sTime
,

784 
uöt8
 
dißbÀDeÁu…R•
, uöt8 
£qNum
 )

786 
uöt8
 
buf
[3];

788 
buf
[0] = 
Àvñ
;

789 
buf
[1] = 
	`LO_UINT16
–
å™sTime
 );

790 
buf
[2] = 
	`HI_UINT16
–
å™sTime
 );

792  
	`z˛_SídComm™d
–
§cEP
, 
d°Addr
, 
ZCL_CLUSTER_ID_GEN_LEVEL_CONTROL
,

793 
cmd
, 
TRUE
, 
ZCL_FRAME_CLIENT_SERVER_DIR
,

794 
dißbÀDeÁu…R•
, 0, 
£qNum
, 3, 
buf
 );

795 
	}
}

814 
ZSètus_t
 
	$z˛GíîÆ_SídLevñC⁄åﬁMoveReque°
–
uöt8
 
§cEP
, 
afAddrTy≥_t
 *
d°Addr
,

815 
uöt8
 
cmd
, uöt8 
moveMode
, uöt8 
øã
,

816 
uöt8
 
dißbÀDeÁu…R•
, uöt8 
£qNum
 )

818 
uöt8
 
buf
[2];

820 
buf
[0] = 
moveMode
;

821 
buf
[1] = 
øã
;

823  
	`z˛_SídComm™d
–
§cEP
, 
d°Addr
, 
ZCL_CLUSTER_ID_GEN_LEVEL_CONTROL
,

824 
cmd
, 
TRUE
, 
ZCL_FRAME_CLIENT_SERVER_DIR
,

825 
dißbÀDeÁu…R•
, 0, 
£qNum
, 2, 
buf
 );

826 
	}
}

846 
ZSètus_t
 
	$z˛GíîÆ_SídLevñC⁄åﬁSãpReque°
–
uöt8
 
§cEP
, 
afAddrTy≥_t
 *
d°Addr
,

847 
uöt8
 
cmd
, uöt8 
°ïMode
, uöt8 
°ïSize
, 
uöt16
 
å™sTime
,

848 
uöt8
 
dißbÀDeÁu…R•
, uöt8 
£qNum
 )

850 
uöt8
 
buf
[4];

852 
buf
[0] = 
°ïMode
;

853 
buf
[1] = 
°ïSize
;

854 
buf
[2] = 
	`LO_UINT16
–
å™sTime
 );

855 
buf
[3] = 
	`HI_UINT16
–
å™sTime
 );

857  
	`z˛_SídComm™d
–
§cEP
, 
d°Addr
, 
ZCL_CLUSTER_ID_GEN_LEVEL_CONTROL
,

858 
cmd
, 
TRUE
, 
ZCL_FRAME_CLIENT_SERVER_DIR
,

859 
dißbÀDeÁu…R•
, 0, 
£qNum
, 4, 
buf
 );

860 
	}
}

863 #ifde‡
ZCL_ALARMS


877 
ZSètus_t
 
	$z˛GíîÆ_SídAœrmReque°
–
uöt8
 
§cEP
, 
afAddrTy≥_t
 *
d°Addr
,

878 
uöt8
 
cmd
, uöt8 
Æ¨mCode
, 
uöt16
 
˛u°îID
,

879 
uöt8
 
dißbÀDeÁu…R•
, uöt8 
£qNum
 )

881 
uöt8
 
buf
[3];

883 
buf
[0] = 
Æ¨mCode
;

884 
buf
[1] = 
	`LO_UINT16
–
˛u°îID
 );

885 
buf
[2] = 
	`HI_UINT16
–
˛u°îID
 );

887  
	`z˛_SídComm™d
–
§cEP
, 
d°Addr
, 
ZCL_CLUSTER_ID_GEN_ALARMS
,

888 
cmd
, 
TRUE
, 
ZCL_FRAME_CLIENT_SERVER_DIR
,

889 
dißbÀDeÁu…R•
, 0, 
£qNum
, 3, 
buf
 );

890 
	}
}

906 
ZSètus_t
 
	$z˛GíîÆ_SídAœrmGëRe•no£
–
uöt8
 
§cEP
, 
afAddrTy≥_t
 *
d°Addr
,

907 
uöt8
 
°©us
, uöt8 
Æ¨mCode
, 
uöt16
 
˛u°îID
,

908 
uöt32
 
timeSèmp
, 
uöt8
 
dißbÀDeÁu…R•
, uöt8 
£qNum
 )

910 
uöt8
 
buf
[8];

911 
uöt8
 
Àn
 = 1;

913 
buf
[0] = 
°©us
;

914 i‡–
°©us
 =
ZCL_STATUS_SUCCESS
 )

916 
Àn
 += 1 + 2 + 4;

917 
buf
[1] = 
Æ¨mCode
;

918 
buf
[2] = 
	`LO_UINT16
–
˛u°îID
 );

919 
buf
[3] = 
	`HI_UINT16
–
˛u°îID
 );

920 
	`oßl_buf„r_uöt32
–&
buf
[4], 
timeSèmp
 );

923  
	`z˛_SídComm™d
–
§cEP
, 
d°Addr
, 
ZCL_CLUSTER_ID_GEN_ALARMS
,

924 
COMMAND_ALARMS_GET_RSP
, 
TRUE
, 
ZCL_FRAME_SERVER_CLIENT_DIR
,

925 
dißbÀDeÁu…R•
, 0, 
£qNum
, 
Àn
, 
buf
 );

926 
	}
}

929 #ifde‡
ZCL_LOCATION


941 
ZSètus_t
 
	$z˛GíîÆ_SídLoˇti⁄SëAbsﬁuã
–
uöt8
 
§cEP
, 
afAddrTy≥_t
 *
d°Addr
,

942 
z˛Loˇti⁄Absﬁuã_t
 *
absLoc
,

943 
uöt8
 
dißbÀDeÁu…R•
, uöt8 
£qNum
 )

945 
uöt8
 
buf
[10];

947 
buf
[0] = 
	`LO_UINT16
–
absLoc
->
co‹dö©e1
 );

948 
buf
[1] = 
	`HI_UINT16
–
absLoc
->
co‹dö©e1
 );

949 
buf
[2] = 
	`LO_UINT16
–
absLoc
->
co‹dö©e2
 );

950 
buf
[3] = 
	`HI_UINT16
–
absLoc
->
co‹dö©e2
 );

951 
buf
[4] = 
	`LO_UINT16
–
absLoc
->
co‹dö©e3
 );

952 
buf
[5] = 
	`HI_UINT16
–
absLoc
->
co‹dö©e3
 );

953 
buf
[6] = 
	`LO_UINT16
–
absLoc
->
powî
 );

954 
buf
[7] = 
	`HI_UINT16
–
absLoc
->
powî
 );

955 
buf
[8] = 
	`LO_UINT16
–
absLoc
->
∑thLossExp⁄ít
 );

956 
buf
[9] = 
	`HI_UINT16
–
absLoc
->
∑thLossExp⁄ít
 );

958  
	`z˛_SídComm™d
–
§cEP
, 
d°Addr
, 
ZCL_CLUSTER_ID_GEN_LOCATION
,

959 
COMMAND_LOCATION_SET_ABSOLUTE
, 
TRUE
,

960 
ZCL_FRAME_CLIENT_SERVER_DIR
, 
dißbÀDeÁu…R•
, 0, 
£qNum
, 10, 
buf
 );

961 
	}
}

974 
ZSètus_t
 
	$z˛GíîÆ_SídLoˇti⁄SëDevCfg
–
uöt8
 
§cEP
, 
afAddrTy≥_t
 *
d°Addr
,

975 
z˛Loˇti⁄DevCfg_t
 *
devCfg
,

976 
uöt8
 
dißbÀDeÁu…R•
, uöt8 
£qNum
 )

978 
uöt8
 
buf
[9];

980 
buf
[0] = 
	`LO_UINT16
–
devCfg
->
powî
 );

981 
buf
[1] = 
	`HI_UINT16
–
devCfg
->
powî
 );

982 
buf
[2] = 
	`LO_UINT16
–
devCfg
->
∑thLossExp⁄ít
 );

983 
buf
[3] = 
	`HI_UINT16
–
devCfg
->
∑thLossExp⁄ít
 );

984 
buf
[4] = 
	`LO_UINT16
–
devCfg
->
ˇlcPîiod
 );

985 
buf
[5] = 
	`HI_UINT16
–
devCfg
->
ˇlcPîiod
 );

986 
buf
[6] = 
devCfg
->
numMósuªmíts
;

987 
buf
[7] = 
	`LO_UINT16
–
devCfg
->
ªp‹tPîiod
 );

988 
buf
[8] = 
	`HI_UINT16
–
devCfg
->
ªp‹tPîiod
 );

990  
	`z˛_SídComm™d
–
§cEP
, 
d°Addr
, 
ZCL_CLUSTER_ID_GEN_LOCATION
,

991 
COMMAND_LOCATION_SET_DEV_CFG
, 
TRUE
,

992 
ZCL_FRAME_CLIENT_SERVER_DIR
, 
dißbÀDeÁu…R•
, 0, 
£qNum
, 9, 
buf
 );

993 
	}
}

1006 
ZSètus_t
 
	$z˛GíîÆ_SídLoˇti⁄GëDevCfg
–
uöt8
 
§cEP
, 
afAddrTy≥_t
 *
d°Addr
,

1007 
uöt8
 *
èrgëAddr
, uöt8 
dißbÀDeÁu…R•
, uöt8 
£qNum
 )

1009 
uöt8
 
buf
[8];

1011 
	`oßl_˝yExtAddr
–
buf
, 
èrgëAddr
 );

1013  
	`z˛_SídComm™d
–
§cEP
, 
d°Addr
, 
ZCL_CLUSTER_ID_GEN_LOCATION
,

1014 
COMMAND_LOCATION_GET_DEV_CFG
, 
TRUE
,

1015 
ZCL_FRAME_CLIENT_SERVER_DIR
, 
dißbÀDeÁu…R•
, 0, 
£qNum
, 8, 
buf
 );

1016 
	}
}

1029 
ZSètus_t
 
	$z˛GíîÆ_SídLoˇti⁄GëD©a
–
uöt8
 
§cEP
, 
afAddrTy≥_t
 *
d°Addr
,

1030 
z˛Loˇti⁄GëD©a_t
 *
locD©a
,

1031 
uöt8
 
dißbÀDeÁu…R•
, uöt8 
£qNum
 )

1033 
uöt8
 
buf
[10];

1034 
uöt8
 *
pBuf
 = 
buf
;

1035 
uöt8
 
Àn
 = 2;

1037 *
pBuf
 = 
locD©a
->
absﬁuãO∆y
;

1038 *
pBuf
 |
locD©a
->
ªˇlcuœã
 << 1;

1039 *
pBuf
 |
locD©a
->
brdˇ°Indiˇt‹
 << 2;

1040 *
pBuf
 |
locD©a
->
brdˇ°Re•⁄£
 << 3;

1041 *
pBuf
 |
locD©a
->
com∑˘Re•⁄£
 << 4;

1042 
pBuf
++;

1044 *
pBuf
++ = 
locD©a
->
numRe•⁄£s
;

1046 i‡–
locD©a
->
brdˇ°Indiˇt‹
 == 0 )

1048 
	`oßl_˝yExtAddr
–
pBuf
, 
locD©a
->
èrgëAddr
 );

1049 
Àn
 += 8;

1052  
	`z˛_SídComm™d
–
§cEP
, 
d°Addr
, 
ZCL_CLUSTER_ID_GEN_LOCATION
,

1053 
COMMAND_LOCATION_GET_DATA
, 
TRUE
,

1054 
ZCL_FRAME_CLIENT_SERVER_DIR
, 
dißbÀDeÁu…R•
, 0, 
£qNum
, 
Àn
, 
buf
 );

1055 
	}
}

1068 
ZSètus_t
 
	$z˛GíîÆ_SídLoˇti⁄DevCfgRe•⁄£
–
uöt8
 
§cEP
, 
afAddrTy≥_t
 *
d°Addr
,

1069 
z˛Loˇti⁄DevCfgR•_t
 *
devCfg
,

1070 
uöt8
 
dißbÀDeÁu…R•
, uöt8 
£qNum
 )

1072 
uöt8
 
buf
[10];

1073 
uöt8
 
Àn
 = 1;

1075 
buf
[0] = 
devCfg
->
°©us
;

1076 i‡–
devCfg
->
°©us
 =
ZCL_STATUS_SUCCESS
 )

1078 
buf
[1] = 
	`LO_UINT16
–
devCfg
->
d©a
.
powî
 );

1079 
buf
[2] = 
	`HI_UINT16
–
devCfg
->
d©a
.
powî
 );

1080 
buf
[3] = 
	`LO_UINT16
–
devCfg
->
d©a
.
∑thLossExp⁄ít
 );

1081 
buf
[4] = 
	`HI_UINT16
–
devCfg
->
d©a
.
∑thLossExp⁄ít
 );

1082 
buf
[5] = 
	`LO_UINT16
–
devCfg
->
d©a
.
ˇlcPîiod
 );

1083 
buf
[6] = 
	`HI_UINT16
–
devCfg
->
d©a
.
ˇlcPîiod
 );

1084 
buf
[7] = 
devCfg
->
d©a
.
numMósuªmíts
;

1085 
buf
[8] = 
	`LO_UINT16
–
devCfg
->
d©a
.
ªp‹tPîiod
 );

1086 
buf
[9] = 
	`HI_UINT16
–
devCfg
->
d©a
.
ªp‹tPîiod
 );

1087 
Àn
 += 9;

1090  
	`z˛_SídComm™d
–
§cEP
, 
d°Addr
, 
ZCL_CLUSTER_ID_GEN_LOCATION
,

1091 
COMMAND_LOCATION_DEV_CFG_RSP
, 
TRUE
,

1092 
ZCL_FRAME_SERVER_CLIENT_DIR
, 
dißbÀDeÁu…R•
, 0, 
£qNum
, 
Àn
, 
buf
 );

1093 
	}
}

1107 
ZSètus_t
 
	$z˛GíîÆ_SídLoˇti⁄D©a
–
uöt8
 
§cEP
, 
afAddrTy≥_t
 *
d°Addr
, uöt8 
cmd
,

1108 
uöt8
 
°©us
, 
z˛Loˇti⁄D©a_t
 *
locD©a
,

1109 
uöt8
 
dißbÀDeÁu…R•
, uöt8 
£qNum
 )

1111 
uöt8
 
buf
[16];

1112 
uöt8
 *
pBuf
 = 
buf
;

1113 
uöt8
 
Àn
 = 0;

1115 i‡–
cmd
 =
COMMAND_LOCATION_DATA_RSP
 )

1118 *
pBuf
++ = 
°©us
;

1119 
Àn
++;

1122 i‡–
cmd
 !
COMMAND_LOCATION_DATA_RSP
 || 
°©us
 =
ZCL_STATUS_SUCCESS
 )

1125 *
pBuf
++ = 
locD©a
->
ty≥
;

1126 *
pBuf
++ = 
	`LO_UINT16
–
locD©a
->
absLoc
.
co‹dö©e1
 );

1127 *
pBuf
++ = 
	`HI_UINT16
–
locD©a
->
absLoc
.
co‹dö©e1
 );

1128 *
pBuf
++ = 
	`LO_UINT16
–
locD©a
->
absLoc
.
co‹dö©e2
 );

1129 *
pBuf
++ = 
	`HI_UINT16
–
locD©a
->
absLoc
.
co‹dö©e2
 );

1130 
Àn
 += 5;

1132 i‡–
	`loˇti⁄Ty≥2D
(
locD©a
->
ty≥
) == 0 )

1135 *
pBuf
++ = 
	`LO_UINT16
–
locD©a
->
absLoc
.
co‹dö©e3
 );

1136 *
pBuf
++ = 
	`HI_UINT16
–
locD©a
->
absLoc
.
co‹dö©e3
 );

1137 
Àn
 += 2;

1140 i‡–
cmd
 !
COMMAND_LOCATION_COMPACT_DATA_NOTIF
 )

1143 *
pBuf
++ = 
	`LO_UINT16
–
locD©a
->
absLoc
.
powî
 );

1144 *
pBuf
++ = 
	`HI_UINT16
–
locD©a
->
absLoc
.
powî
 );

1145 *
pBuf
++ = 
	`LO_UINT16
–
locD©a
->
absLoc
.
∑thLossExp⁄ít
 );

1146 *
pBuf
++ = 
	`HI_UINT16
–
locD©a
->
absLoc
.
∑thLossExp⁄ít
 );

1147 
Àn
 += 4;

1150 i‡–
	`loˇti⁄Ty≥Absﬁuã
(
locD©a
->
ty≥
) == 0 )

1153 i‡–
cmd
 !
COMMAND_LOCATION_COMPACT_DATA_NOTIF
 )

1156 *
pBuf
++ = 
locD©a
->
ˇlcLoc
.
loˇti⁄Mëhod
;

1157 
Àn
++;

1160 *
pBuf
++ = 
locD©a
->
ˇlcLoc
.
quÆôyMósuª
;

1161 *
pBuf
++ = 
	`LO_UINT16
–
locD©a
->
ˇlcLoc
.
loˇti⁄Age
 );

1162 *
pBuf
++ = 
	`HI_UINT16
–
locD©a
->
ˇlcLoc
.
loˇti⁄Age
 );

1163 
Àn
 += 3;

1167  
	`z˛_SídComm™d
–
§cEP
, 
d°Addr
, 
ZCL_CLUSTER_ID_GEN_LOCATION
,

1168 
cmd
, 
TRUE
, 
ZCL_FRAME_SERVER_CLIENT_DIR
,

1169 
dißbÀDeÁu…R•
, 0, 
£qNum
, 
Àn
, 
buf
 );

1170 
	}
}

1182 
z˛GíîÆ_AµCÆlbacks_t
 *
	$z˛GíîÆ_FödCÆlbacks
–
uöt8
 
ídpoöt
 )

1184 
z˛GíCBRec_t
 *
pCBs
;

1186 
pCBs
 = 
z˛GíCBs
;

1187  
pCBs
 )

1189 i‡–
pCBs
->
ídpoöt
 ==Éndpoint )

1190  ( 
pCBs
->
CBs
 );

1191 
pCBs
 =ÖCBs->
√xt
;

1193  ( (
z˛GíîÆ_AµCÆlbacks_t
 *)
NULL
 );

1194 
	}
}

1208 
ZSètus_t
 
	$z˛GíîÆ_HdlIncomög
–
z˛Incomög_t
 *
pInMsg
 )

1210 
ZSètus_t
 
°©
 = 
ZSuc˚ss
;

1212 #i‡
	`deföed
 ( 
INTER_PAN
 )

1213 i‡–
	`StubAPS_I¡îP™
–
pInMsg
->
msg
->
§cAddr
.
∑nId
,ÖInMsg->msg->§cAddr.
ídPoöt
 ) )

1214  ( 
°©
 );

1216 i‡–
	`z˛_Clu°îCmd
–
pInMsg
->
hdr
.
fc
.
ty≥
 ) )

1219 i‡–
pInMsg
->
hdr
.
fc
.
m™uS≥cific
 == 0 )

1221 
°©
 = 
	`z˛GíîÆ_HdlInS≥cificComm™ds
–
pInMsg
 );

1226 
°©
 = 
ZFaûuª
;

1232 
°©
 = 
ZFaûuª
;

1234  ( 
°©
 );

1235 
	}
}

1247 
ZSètus_t
 
	$z˛GíîÆ_HdlInS≥cificComm™ds
–
z˛Incomög_t
 *
pInMsg
 )

1249 
ZSètus_t
 
°©
;

1250 
z˛GíîÆ_AµCÆlbacks_t
 *
pCBs
;

1253 
pCBs
 = 
	`z˛GíîÆ_FödCÆlbacks
–
pInMsg
->
msg
->
ídPoöt
 );

1254 i‡–
pCBs
 =
NULL
 )

1255  ( 
ZFaûuª
 );

1257  
pInMsg
->
msg
->
˛u°îId
 )

1259 #ifde‡
ZCL_BASIC


1260 
ZCL_CLUSTER_ID_GEN_BASIC
:

1261 
°©
 = 
	`z˛GíîÆ_Pro˚ssInBasic
–
pInMsg
, 
pCBs
 );

1265 #ifde‡
ZCL_IDENTIFY


1266 
ZCL_CLUSTER_ID_GEN_IDENTIFY
:

1267 
°©
 = 
	`z˛GíîÆ_Pro˚ssInIdítôy
–
pInMsg
, 
pCBs
 );

1271 #ifde‡
ZCL_GROUPS


1272 
ZCL_CLUSTER_ID_GEN_GROUPS
:

1273 i‡–
	`z˛_SîvîCmd
–
pInMsg
->
hdr
.
fc
.
dúe˘i⁄
 ) )

1274 
°©
 = 
	`z˛GíîÆ_Pro˚ssInGroupsSîvî
–
pInMsg
 );

1276 
°©
 = 
	`z˛GíîÆ_Pro˚ssInGroupsClõ¡
–
pInMsg
, 
pCBs
 );

1280 #ifde‡
ZCL_SCENES


1281 
ZCL_CLUSTER_ID_GEN_SCENES
:

1282 i‡–
	`z˛_SîvîCmd
–
pInMsg
->
hdr
.
fc
.
dúe˘i⁄
 ) )

1283 
°©
 = 
	`z˛GíîÆ_Pro˚ssInS˚√sSîvî
–
pInMsg
, 
pCBs
 );

1285 
°©
 = 
	`z˛GíîÆ_Pro˚ssInS˚√sClõ¡
–
pInMsg
, 
pCBs
 );

1289 #ifde‡
ZCL_ON_OFF


1290 
ZCL_CLUSTER_ID_GEN_ON_OFF
:

1291 
°©
 = 
	`z˛GíîÆ_Pro˚ssInOnOff
–
pInMsg
, 
pCBs
 );

1295 #ifde‡
ZCL_LEVEL_CTRL


1296 
ZCL_CLUSTER_ID_GEN_LEVEL_CONTROL
:

1297 
°©
 = 
	`z˛GíîÆ_Pro˚ssInLevñC⁄åﬁ
–
pInMsg
, 
pCBs
 );

1301 #ifde‡
ZCL_ALARMS


1302 
ZCL_CLUSTER_ID_GEN_ALARMS
:

1303 i‡–
	`z˛_SîvîCmd
–
pInMsg
->
hdr
.
fc
.
dúe˘i⁄
 ) )

1304 
°©
 = 
	`z˛GíîÆ_Pro˚ssInAœrmsSîvî
–
pInMsg
, 
pCBs
 );

1306 
°©
 = 
	`z˛GíîÆ_Pro˚ssInAœrmsClõ¡
–
pInMsg
, 
pCBs
 );

1310 #ifde‡
ZCL_LOCATION


1311 
ZCL_CLUSTER_ID_GEN_LOCATION
:

1312 i‡–
	`z˛_SîvîCmd
–
pInMsg
->
hdr
.
fc
.
dúe˘i⁄
 ) )

1313 
°©
 = 
	`z˛GíîÆ_Pro˚ssInLoˇti⁄Sîvî
–
pInMsg
, 
pCBs
 );

1315 
°©
 = 
	`z˛GíîÆ_Pro˚ssInLoˇti⁄Clõ¡
–
pInMsg
, 
pCBs
 );

1319 
ZCL_CLUSTER_ID_GEN_POWER_CFG
:

1320 
ZCL_CLUSTER_ID_GEN_DEVICE_TEMP_CONFIG
:

1321 
ZCL_CLUSTER_ID_GEN_ON_OFF_SWITCH_CONFIG
:

1322 
ZCL_CLUSTER_ID_GEN_TIME
:

1324 
°©
 = 
ZFaûuª
;

1328  ( 
°©
 );

1329 
	}
}

1331 #ifde‡
ZCL_BASIC


1341 
ZSètus_t
 
	$z˛GíîÆ_Pro˚ssInBasic
–
z˛Incomög_t
 *
pInMsg
,

1342 
z˛GíîÆ_AµCÆlbacks_t
 *
pCBs
 )

1344 i‡–
	`z˛_SîvîCmd
–
pInMsg
->
hdr
.
fc
.
dúe˘i⁄
 ) )

1346 i‡–
pInMsg
->
hdr
.
comm™dID
 > 
COMMAND_BASIC_RESET_FACT_DEFAULT
 )

1347  ( 
ZFaûuª
 );

1349 i‡–
pCBs
->
p‚BasicRe£t
 )

1350 
pCBs
->
	`p‚BasicRe£t
();

1354  ( 
ZSuc˚ss
 );

1355 
	}
}

1358 #ifde‡
ZCL_IDENTIFY


1368 
ZSètus_t
 
	$z˛GíîÆ_Pro˚ssInIdítôy
–
z˛Incomög_t
 *
pInMsg
,

1369 
z˛GíîÆ_AµCÆlbacks_t
 *
pCBs
 )

1371 i‡–
	`z˛_SîvîCmd
–
pInMsg
->
hdr
.
fc
.
dúe˘i⁄
 ) )

1373 i‡–
pInMsg
->
hdr
.
comm™dID
 > 
COMMAND_IDENTIFY_QUERY
 )

1374  ( 
ZFaûuª
 );

1376 i‡–
pInMsg
->
hdr
.
comm™dID
 =
COMMAND_IDENTIFY
 )

1378 i‡–
pCBs
->
p‚Idítify
 )

1380 
z˛Idítify_t
 
cmd
;

1382 
cmd
.
§cAddr
 = &(
pInMsg
->
msg
->srcAddr);

1383 
cmd
.
idítifyTime
 = 
	`BUILD_UINT16
–
pInMsg
->
pD©a
[0],ÖInMsg->pData[1] );

1385 
pCBs
->
	`p‚Idítify
–&
cmd
 );

1390 
z˛AârRec_t
 
©åRec
;

1391 
uöt16
 
idítifyTime
 = 0;

1394 i‡–
	`z˛FödAârRec
–
pInMsg
->
msg
->
ídPoöt
,ÖInMsg->msg->
˛u°îId
, 
ATTRID_IDENTIFY_TIME
, &
©åRec
 ) )

1395 
	`z˛RódAârD©a
–(
uöt8
 *)&
idítifyTime
, &
©åRec
 );

1398 i‡–
idítifyTime
 > 0 )

1400 
	`z˛GíîÆ_SídIdítifyQuîyRe•⁄£
–
pInMsg
->
msg
->
ídPoöt
, &pInMsg->msg->
§cAddr
,

1401 
idítifyTime
, 
åue
, 
pInMsg
->
hdr
.
å™sSeqNum
 );

1404  ( 
ZCL_STATUS_CMD_HAS_RSP
 );

1409 i‡–
pInMsg
->
hdr
.
comm™dID
 > 
COMMAND_IDENTIFY_QUERY_RSP
 )

1410  ( 
ZFaûuª
 );

1412 i‡–
pCBs
->
p‚IdítifyQuîyR•
 )

1414 
z˛IdítifyQuîyR•_t
 
r•
;

1416 
r•
.
§cAddr
 = &(
pInMsg
->
msg
->srcAddr);

1417 
r•
.
timeout
 = 
	`BUILD_UINT16
–
pInMsg
->
pD©a
[0],ÖInMsg->pData[1] );

1419 
pCBs
->
	`p‚IdítifyQuîyR•
–&
r•
 );

1423  ( 
ZSuc˚ss
 );

1424 
	}
}

1427 #ifde‡
ZCL_GROUPS


1440 
ZSètus_t
 
	$z˛GíîÆ_AddGroup
–
uöt8
 
ídPoöt
, 
≠s_Group_t
 *
group
, uöt8 *
pD©a
 )

1442 
z˛AârRec_t
 
©åRec
;

1443 
uöt8
 
«meLí
;

1444 
uöt8
 
«meSuµ‹t
 = 
FALSE
;

1446 
pD©a
 += 2;

1447 
«meLí
 = *
pD©a
++;

1450 i‡–
	`z˛FödAârRec
–
ídPoöt
, 
ZCL_CLUSTER_ID_GEN_GROUPS
, 
ATTRID_GROUP_NAME_SUPPORT
, &
©åRec
 ) )

1451 
	`z˛RódAârD©a
–&
«meSuµ‹t
, &
©åRec
 );

1453 i‡–
«meSuµ‹t
 )

1455 i‡–
«meLí
 > (
APS_GROUP_NAME_LEN
-1) )

1456 
«meLí
 = (
APS_GROUP_NAME_LEN
-1);

1457 
group
->
«me
[0] = 
«meLí
;

1458 
	`oßl_mem˝y
–&(
group
->
«me
[1]), 
pD©a
, 
«meLí
 );

1461  ( 
	`≠s_AddGroup
–
ídPoöt
, 
group
 ) );

1462 
	}
}

1473 
ZSètus_t
 
	$z˛GíîÆ_Pro˚ssInGroupsSîvî
–
z˛Incomög_t
 *
pInMsg
 )

1475 
z˛AârRec_t
 
©åRec
;

1476 
≠s_Group_t
 
group
;

1477 
≠s_Group_t
 *
pGroup
;

1478 
uöt8
 *
pD©a
;

1479 
uöt8
 
°©us
;

1480 
uöt8
 
gΩC¡
;

1481 
uöt8
 
gΩR•C¡
 = 0;

1482 
uöt16
 *
gΩLi°
;

1483 
uöt16
 
idítifyTime
 = 0;

1484 
uöt8
 
i
;

1485 
ZSètus_t
 
°©
 = 
ZSuc˚ss
;

1487 
	`oßl_mem£t
–(
uöt8
*)&
group
, 0, –
≠s_Group_t
 ) );

1489 
pD©a
 = 
pInMsg
->pData;

1490 
group
.
ID
 = 
	`BUILD_UINT16
–
pD©a
[0],ÖData[1] );

1491  
pInMsg
->
hdr
.
comm™dID
 )

1493 
COMMAND_GROUP_ADD
:

1494 
°©us
 = 
	`z˛GíîÆ_AddGroup
–
pInMsg
->
msg
->
ídPoöt
, &
group
, 
pD©a
 );

1495 i‡–
°©us
 !
ZSuc˚ss
 )

1497 i‡–
°©us
 =
ZApsDu∂iˇãE¡ry
 )

1498 
°©us
 = 
ZCL_STATUS_DUPLICATE_EXISTS
;

1500 
°©us
 = 
ZCL_STATUS_INSUFFICIENT_SPACE
;

1503 
	`z˛GíîÆ_SídGroupAddRe•⁄£
–
pInMsg
->
msg
->
ídPoöt
, &pInMsg->msg->
§cAddr
,

1504 
°©us
, 
group
.
ID
, 
åue
, 
pInMsg
->
hdr
.
å™sSeqNum
 );

1505 
°©
 = 
ZCL_STATUS_CMD_HAS_RSP
;

1508 
COMMAND_GROUP_VIEW
:

1509 
pGroup
 = 
	`≠s_FödGroup
–
pInMsg
->
msg
->
ídPoöt
, 
group
.
ID
 );

1510 i‡–
pGroup
 )

1512 
°©us
 = 
ZCL_STATUS_SUCCESS
;

1517 
°©us
 = 
ZCL_STATUS_NOT_FOUND
;

1518 
pGroup
 = &
group
;

1520 
	`z˛GíîÆ_SídGroupVõwRe•⁄£
–
pInMsg
->
msg
->
ídPoöt
, &pInMsg->msg->
§cAddr
,

1521 
°©us
, 
pGroup
, 
åue
, 
pInMsg
->
hdr
.
å™sSeqNum
 );

1522 
°©
 = 
ZCL_STATUS_CMD_HAS_RSP
;

1525 
COMMAND_GROUP_GET_MEMBERSHIP
:

1526 
gΩC¡
 = *
pD©a
++;

1529 
gΩLi°
 = 
	`oßl_mem_Æloc
––
uöt16
 ) * 
APS_MAX_GROUPS
 );

1530 i‡–
gΩLi°
 !
NULL
 )

1532 i‡–
gΩC¡
 == 0 )

1535 
gΩR•C¡
 = 
	`≠s_FödAŒGroupsF‹Endpoöt
–
pInMsg
->
msg
->
ídPoöt
, 
gΩLi°
 );

1540  
i
 = 0; i < 
gΩC¡
; i++ )

1542 
group
.
ID
 = 
	`BUILD_UINT16
–
pD©a
[0],ÖData[1] );

1543 
pD©a
 += 2;

1545 i‡–
	`≠s_FödGroup
–
pInMsg
->
msg
->
ídPoöt
, 
group
.
ID
 ) )

1546 
gΩLi°
[
gΩR•C¡
++] = 
group
.
ID
;

1550 i‡–
gΩC¡
 =0 || 
gΩR•C¡
 != 0 )

1552 
	`z˛GíîÆ_SídGroupGëMembîshùRe•⁄£
–
pInMsg
->
msg
->
ídPoöt
, &pInMsg->msg->
§cAddr
,

1553 
	`≠s_GroupsRemaögC≠acôy
(), 
gΩR•C¡
,

1554 
gΩLi°
, 
åue
, 
pInMsg
->
hdr
.
å™sSeqNum
 );

1557 
	`oßl_mem_‰ì
–
gΩLi°
 );

1562 
z˛DeÁu…R•Cmd_t
 
deÁu…R•Cmd
;

1564 
deÁu…R•Cmd
.
comm™dID
 = 
pInMsg
->
hdr
.commandID;

1565 
deÁu…R•Cmd
.
°©usCode
 = 
ZCL_STATUS_INSUFFICIENT_SPACE
;

1566 
	`z˛_SídDeÁu…R•Cmd
–
pInMsg
->
msg
->
ídPoöt
, &’InMsg->msg->
§cAddr
),

1567 
pInMsg
->
msg
->
˛u°îId
, &
deÁu…R•Cmd
,

1568 
ZCL_FRAME_SERVER_CLIENT_DIR
, 
åue
, 
pInMsg
->
hdr
.
å™sSeqNum
 );

1571 
°©
 = 
ZCL_STATUS_CMD_HAS_RSP
;

1574 
COMMAND_GROUP_REMOVE
:

1575 i‡–
	`≠s_RemoveGroup
–
pInMsg
->
msg
->
ídPoöt
, 
group
.
ID
 ) )

1576 
°©us
 = 
ZCL_STATUS_SUCCESS
;

1578 
°©us
 = 
ZCL_STATUS_NOT_FOUND
;

1579 
	`z˛GíîÆ_SídGroupRemoveRe•⁄£
–
pInMsg
->
msg
->
ídPoöt
, &pInMsg->msg->
§cAddr
,

1580 
°©us
, 
group
.
ID
, 
åue
, 
pInMsg
->
hdr
.
å™sSeqNum
 );

1581 
°©
 = 
ZCL_STATUS_CMD_HAS_RSP
;

1584 
COMMAND_GROUP_REMOVE_ALL
:

1585 
	`≠s_RemoveAŒGroup
–
pInMsg
->
msg
->
ídPoöt
 );

1588 
COMMAND_GROUP_ADD_IF_IDENTIFYING
:

1590 i‡–
	`z˛FödAârRec
–
pInMsg
->
msg
->
ídPoöt
, 
ZCL_CLUSTER_ID_GEN_IDENTIFY
, 
ATTRID_IDENTIFY_TIME
, &
©åRec
 ) )

1591 
	`z˛RódAârD©a
–(
uöt8
 *)&
idítifyTime
, &
©åRec
 );

1594 i‡–
idítifyTime
 > 0 )

1595 
	`z˛GíîÆ_AddGroup
–
pInMsg
->
msg
->
ídPoöt
, &
group
, 
pD©a
 );

1599 
°©
 = 
ZFaûuª
;

1603  ( 
°©
 );

1604 
	}
}

1615 
ZSètus_t
 
	$z˛GíîÆ_Pro˚ssInGroupsClõ¡
–
z˛Incomög_t
 *
pInMsg
,

1616 
z˛GíîÆ_AµCÆlbacks_t
 *
pCBs
 )

1618 
≠s_Group_t
 
group
;

1619 
uöt8
 *
pD©a
 = 
pInMsg
->pData;

1620 
uöt16
 *
gΩLi°
;

1621 
uöt8
 
gΩC¡
;

1622 
uöt8
 
«meLí
;

1623 
z˛GroupR•_t
 
r•
;

1624 
uöt8
 
i
;

1625 
ZSètus_t
 
°©
 = 
ZSuc˚ss
;

1627 
	`oßl_mem£t
–(
uöt8
*)&
group
, 0, –
≠s_Group_t
 ) );

1628 
	`oßl_mem£t
–(
uöt8
*)&
r•
, 0, –
z˛GroupR•_t
 ) );

1630  
pInMsg
->
hdr
.
comm™dID
 )

1632 
COMMAND_GROUP_ADD_RSP
:

1633 
COMMAND_GROUP_VIEW_RSP
:

1634 
COMMAND_GROUP_REMOVE_RSP
:

1635 
r•
.
°©us
 = *
pD©a
++;

1636 
group
.
ID
 = 
	`BUILD_UINT16
–
pD©a
[0],ÖData[1] );

1638 i‡–
r•
.
°©us
 =
ZCL_STATUS_SUCCESS
 && 
pInMsg
->
hdr
.
comm™dID
 =
COMMAND_GROUP_VIEW_RSP
 )

1640 
pD©a
 += 2;

1641 
«meLí
 = *
pD©a
++;

1642 i‡–
«meLí
 > (
APS_GROUP_NAME_LEN
-1) )

1643 
«meLí
 = (
APS_GROUP_NAME_LEN
-1);

1644 
group
.
«me
[0] = 
«meLí
;

1645 
	`oßl_mem˝y
–&(
group
.
«me
[1]), 
pD©a
, 
«meLí
 );

1646 
r•
.
gΩName
 = 
group
.
«me
;

1649 i‡–
pCBs
->
p‚GroupR•
 )

1651 
r•
.
§cAddr
 = &(
pInMsg
->
msg
->srcAddr);

1652 
r•
.
cmdID
 = 
pInMsg
->
hdr
.
comm™dID
;

1653 
r•
.
gΩC¡
 = 1;

1654 
r•
.
gΩLi°
 = &
group
.
ID
;

1655 
r•
.
ˇ∑côy
 = 0;

1657 
pCBs
->
	`p‚GroupR•
–&
r•
 );

1661 
COMMAND_GROUP_GET_MEMBERSHIP_RSP
:

1662 
r•
.
ˇ∑côy
 = *
pD©a
++;

1663 
gΩC¡
 = *
pD©a
++;

1665 i‡–
gΩC¡
 > 0 )

1668 
gΩLi°
 = 
	`oßl_mem_Æloc
––
uöt16
 ) * 
gΩC¡
 );

1669 i‡–
gΩLi°
 !
NULL
 )

1671 
r•
.
gΩC¡
 = grpCnt;

1672  
i
 = 0; i < 
gΩC¡
; i++ )

1674 
gΩLi°
[
i
] = 
	`BUILD_UINT16
–
pD©a
[0],ÖData[1] );

1675 
pD©a
 += 2;

1680 i‡–
pCBs
->
p‚GroupR•
 )

1682 
r•
.
§cAddr
 = &(
pInMsg
->
msg
->srcAddr);

1683 
r•
.
cmdID
 = 
pInMsg
->
hdr
.
comm™dID
;

1684 
r•
.
gΩLi°
 = grpList;

1686 
pCBs
->
	`p‚GroupR•
–&
r•
 );

1689 i‡–
gΩLi°
 !
NULL
 )

1690 
	`oßl_mem_‰ì
–
gΩLi°
 );

1694 
°©
 = 
ZFaûuª
;

1698  ( 
°©
 );

1699 
	}
}

1702 #ifde‡
ZCL_SCENES


1713 
ZSètus_t
 
	$z˛GíîÆ_AddS˚√
–
uöt8
 
ídpoöt
, 
z˛GíîÆ_S˚√_t
 *
s˚√
 )

1715 
z˛GíS˚√Iãm_t
 *
pNewIãm
;

1716 
z˛GíS˚√Iãm_t
 *
pLo›
;

1719 
pNewIãm
 = 
	`oßl_mem_Æloc
––
z˛GíS˚√Iãm_t
 ) );

1720 i‡–
pNewIãm
 =
NULL
 )

1721  ( 
ZMemEº‹
 );

1724 
pNewIãm
->
√xt
 = (
z˛GíS˚√Iãm_t
 *)
NULL
;

1725 
pNewIãm
->
ídpoöt
 =Éndpoint;

1726 
	`oßl_mem˝y
–(
uöt8
*)&(
pNewIãm
->
s˚√
), (uöt8*)s˚√,  ( 
z˛GíîÆ_S˚√_t
 ));

1729 i‡–
z˛GíS˚√TabÀ
 =
NULL
 )

1731 
z˛GíS˚√TabÀ
 = 
pNewIãm
;

1736 
pLo›
 = 
z˛GíS˚√TabÀ
;

1737  
pLo›
->
√xt
 !
NULL
 )

1738 
pLo›
 =ÖLo›->
√xt
;

1741 
pLo›
->
√xt
 = 
pNewIãm
;

1745 
	`z˛GíîÆ_S˚√sWrôeNV
();

1747  ( 
ZSuc˚ss
 );

1748 
	}
}

1761 
z˛GíîÆ_S˚√_t
 *
	$z˛GíîÆ_FödS˚√
–
uöt8
 
ídpoöt
, 
uöt16
 
groupID
, uöt8 
s˚√ID
 )

1763 
z˛GíS˚√Iãm_t
 *
pLo›
;

1766 
pLo›
 = 
z˛GíS˚√TabÀ
;

1767  
pLo›
 )

1769 i‡–(
pLo›
->
ídpoöt
 ==Éndpoint ||Éndpoint == 0xFF)

1770 && 
pLo›
->
s˚√
.
groupID
 =groupID &&ÖLo›->s˚√.
ID
 =
s˚√ID
 )

1772  ( &(
pLo›
->
s˚√
) );

1774 
pLo›
 =ÖLo›->
√xt
;

1777  ( (
z˛GíîÆ_S˚√_t
 *)
NULL
 );

1778 
	}
}

1790 
uöt8
 
	$z˛GíîÆ_FödAŒS˚√sF‹Group
–
uöt8
 
ídpoöt
, 
uöt16
 
groupID
, uöt8 *
s˚√Li°
 )

1792 
z˛GíS˚√Iãm_t
 *
pLo›
;

1793 
uöt8
 
˙t
 = 0;

1796 
pLo›
 = 
z˛GíS˚√TabÀ
;

1797  
pLo›
 )

1799 i‡–
pLo›
->
ídpoöt
 =ídpoöà&&ÖLo›->
s˚√
.
groupID
 == groupID )

1800 
s˚√Li°
[
˙t
++] = 
pLo›
->
s˚√
.
ID
;

1801 
pLo›
 =ÖLo›->
√xt
;

1803  ( 
˙t
 );

1804 
	}
}

1817 
uöt8
 
	$z˛GíîÆ_RemoveS˚√
–
uöt8
 
ídpoöt
, 
uöt16
 
groupID
, uöt8 
s˚√ID
 )

1819 
z˛GíS˚√Iãm_t
 *
pLo›
;

1820 
z˛GíS˚√Iãm_t
 *
pPªv
;

1823 
pLo›
 = 
z˛GíS˚√TabÀ
;

1824 
pPªv
 = 
NULL
;

1825  
pLo›
 )

1827 i‡–
pLo›
->
ídpoöt
 ==Éndpoint

1828 && 
pLo›
->
s˚√
.
groupID
 =groupID &&ÖLo›->s˚√.
ID
 =
s˚√ID
 )

1830 i‡–
pPªv
 =
NULL
 )

1831 
z˛GíS˚√TabÀ
 = 
pLo›
->
√xt
;

1833 
pPªv
->
√xt
 = 
pLo›
->next;

1836 
	`oßl_mem_‰ì
–
pLo›
 );

1839 
	`z˛GíîÆ_S˚√sWrôeNV
();

1841  ( 
TRUE
 );

1843 
pPªv
 = 
pLo›
;

1844 
pLo›
 =ÖLo›->
√xt
;

1847  ( 
FALSE
 );

1848 
	}
}

1860 
	$z˛GíîÆ_RemoveAŒS˚√s
–
uöt8
 
ídpoöt
, 
uöt16
 
groupID
 )

1862 
z˛GíS˚√Iãm_t
 *
pLo›
;

1863 
z˛GíS˚√Iãm_t
 *
pPªv
;

1864 
z˛GíS˚√Iãm_t
 *
pNext
;

1867 
pLo›
 = 
z˛GíS˚√TabÀ
;

1868 
pPªv
 = 
NULL
;

1869  
pLo›
 )

1871 i‡–
pLo›
->
ídpoöt
 =ídpoöà&&ÖLo›->
s˚√
.
groupID
 == groupID )

1873 i‡–
pPªv
 =
NULL
 )

1874 
z˛GíS˚√TabÀ
 = 
pLo›
->
√xt
;

1876 
pPªv
->
√xt
 = 
pLo›
->next;

1877 
pNext
 = 
pLo›
->
√xt
;

1880 
	`oßl_mem_‰ì
–
pLo›
 );

1881 
pLo›
 = 
pNext
;

1885 
pPªv
 = 
pLo›
;

1886 
pLo›
 =ÖLo›->
√xt
;

1891 
	`z˛GíîÆ_S˚√sWrôeNV
();

1892 
	}
}

1903 
uöt8
 
	$z˛GíîÆ_Cou¡S˚√s
–
uöt8
 
ídpoöt
 )

1905 
z˛GíS˚√Iãm_t
 *
pLo›
;

1906 
uöt8
 
˙t
 = 0;

1909 
pLo›
 = 
z˛GíS˚√TabÀ
;

1910  
pLo›
 )

1912 i‡–
pLo›
->
ídpoöt
 ==Éndpoint )

1913 
˙t
++;

1914 
pLo›
 =ÖLo›->
√xt
;

1916  ( 
˙t
 );

1917 
	}
}

1928 
uöt8
 
	$z˛GíîÆ_Cou¡AŒS˚√s
( )

1930 
z˛GíS˚√Iãm_t
 *
pLo›
;

1931 
uöt8
 
˙t
 = 0;

1934 
pLo›
 = 
z˛GíS˚√TabÀ
;

1935  
pLo›
 )

1937 
˙t
++;

1938 
pLo›
 =ÖLo›->
√xt
;

1940  ( 
˙t
 );

1941 
	}
}

1952 
ZSètus_t
 
	$z˛GíîÆ_Pro˚ssInS˚√sSîvî
–
z˛Incomög_t
 *
pInMsg
,

1953 
z˛GíîÆ_AµCÆlbacks_t
 *
pCBs
 )

1955 
z˛AârRec_t
 
©åRec
;

1956 
z˛GíîÆ_S˚√_t
 
s˚√
;

1957 
z˛GíîÆ_S˚√_t
 *
pS˚√
;

1958 
uöt8
 *
pD©a
 = 
pInMsg
->pData;

1959 
uöt8
 
«meLí
;

1960 
uöt8
 
°©us
;

1961 
uöt8
 
s˚√C¡
 = 0;

1962 
uöt8
 *
s˚√Li°
 = 
NULL
;

1963 
uöt8
 
£ndR•
 = 
FALSE
;

1964 
uöt8
 
«meSuµ‹t
 = 
FALSE
;

1965 
ZSètus_t
 
°©
 = 
ZSuc˚ss
;

1967 
	`oßl_mem£t
–(
uöt8
*)&
s˚√
, 0, –
z˛GíîÆ_S˚√_t
 ) );

1969 
s˚√
.
groupID
 = 
	`BUILD_UINT16
–
pD©a
[0],ÖData[1] );

1970 
pD©a
 += 2;

1971 
s˚√
.
ID
 = *
pD©a
++;

1973  
pInMsg
->
hdr
.
comm™dID
 )

1975 
COMMAND_SCENE_ADD
:

1977 
s˚√
.
å™sTime
 = 
	`BUILD_UINT16
–
pD©a
[0],ÖData[1] );

1978 
pD©a
 += 2;

1979 
«meLí
*
pD©a
++;

1982 i‡–
	`z˛FödAârRec
–
pInMsg
->
msg
->
ídPoöt
, 
ZCL_CLUSTER_ID_GEN_SCENES
, 
ATTRID_SCENES_NAME_SUPPORT
, &
©åRec
 ) )

1983 
	`z˛RódAârD©a
–&
«meSuµ‹t
, &
©åRec
 );

1985 i‡–
«meSuµ‹t
 )

1987 i‡–
«meLí
 > (
ZCL_GEN_SCENE_NAME_LEN
-1) )

1988 
«meLí
 = (
ZCL_GEN_SCENE_NAME_LEN
-1);

1989 
s˚√
.
«me
[0] = 
«meLí
;

1990 
	`oßl_mem˝y
–&(
s˚√
.
«me
[1]), 
pD©a
, 
«meLí
 );

1993 
pD©a
 +
«meLí
;

1995 
s˚√
.
extLí
 = 
pInMsg
->
pD©aLí
 - ( (
uöt8
)–
pD©a
 -ÖInMsg->pData ) );

1996 i‡–
s˚√
.
extLí
 > 0 )

1999 i‡–
s˚√
.
extLí
 > 
ZCL_GEN_SCENE_EXT_LEN
 )

2000 
s˚√
.
extLí
 = 
ZCL_GEN_SCENE_EXT_LEN
;

2001 
	`oßl_mem˝y
–
s˚√
.
extFõld
, 
pD©a
, s˚√.
extLí
 );

2004 i‡–
s˚√
.
groupID
 == 0x0000 ||

2005 
	`≠s_FödGroup
–
pInMsg
->
msg
->
ídPoöt
, 
s˚√
.
groupID
 ) !
NULL
 )

2009 
pS˚√
 = 
	`z˛GíîÆ_FödS˚√
–
pInMsg
->
msg
->
ídPoöt
, 
s˚√
.
groupID
, s˚√.
ID
 );

2010 i‡–
pS˚√
 || ( 
	`z˛GíîÆ_Cou¡AŒS˚√s
(Ë< 
ZCL_GEN_MAX_SCENES
 ) )

2012 
°©us
 = 
ZCL_STATUS_SUCCESS
;

2013 i‡–
pS˚√
 !
NULL
 )

2016 
pS˚√
->
å™sTime
 = 
s˚√
.transTime;

2017 
	`oßl_mem˝y
–
pS˚√
->
«me
, 
s˚√
.«me, 
ZCL_GEN_SCENE_NAME_LEN
 );

2020 
	`oßl_mem˝y
–
pS˚√
->
extFõld
, 
s˚√
.extFõld, s˚√.
extLí
 );

2021 
pS˚√
->
extLí
 = 
s˚√
.extLen;

2024 
	`z˛GíîÆ_S˚√sWrôeNV
();

2029 
	`z˛GíîÆ_AddS˚√
–
pInMsg
->
msg
->
ídPoöt
, &
s˚√
 );

2033 
°©us
 = 
ZCL_STATUS_INSUFFICIENT_SPACE
;

2036 
°©us
 = 
ZCL_STATUS_INVALID_FIELD
;

2038 
	`z˛GíîÆ_SídS˚√AddRe•⁄£
–
pInMsg
->
msg
->
ídPoöt
, &pInMsg->msg->
§cAddr
,

2039 
°©us
, 
s˚√
.
groupID
, s˚√.
ID
,

2040 
åue
, 
pInMsg
->
hdr
.
å™sSeqNum
 );

2041 
°©
 = 
ZCL_STATUS_CMD_HAS_RSP
;

2044 
COMMAND_SCENE_VIEW
:

2045 
pS˚√
 = 
	`z˛GíîÆ_FödS˚√
–
pInMsg
->
msg
->
ídPoöt
, 
s˚√
.
groupID
, s˚√.
ID
 );

2046 i‡–
pS˚√
 !
NULL
 )

2048 
°©us
 = 
ZCL_STATUS_SUCCESS
;

2053 i‡–
s˚√
.
groupID
 != 0x0000 &&

2054 
	`≠s_FödGroup
–
pInMsg
->
msg
->
ídPoöt
, 
s˚√
.
groupID
 ) =
NULL
 )

2056 
°©us
 = 
ZCL_STATUS_INVALID_FIELD
;

2059 
°©us
 = 
ZCL_STATUS_NOT_FOUND
;

2060 
pS˚√
 = &
s˚√
;

2062 
	`z˛GíîÆ_SídS˚√VõwRe•⁄£
–
pInMsg
->
msg
->
ídPoöt
, &pInMsg->msg->
§cAddr
,

2063 
°©us
, 
pS˚√
, 
åue
, 
pInMsg
->
hdr
.
å™sSeqNum
 );

2064 
°©
 = 
ZCL_STATUS_CMD_HAS_RSP
;

2067 
COMMAND_SCENE_REMOVE
:

2068 i‡–
	`z˛GíîÆ_RemoveS˚√
–
pInMsg
->
msg
->
ídPoöt
, 
s˚√
.
groupID
, s˚√.
ID
 ) )

2070 
°©us
 = 
ZCL_STATUS_SUCCESS
;

2075 i‡–
	`≠s_FödGroup
–
pInMsg
->
msg
->
ídPoöt
, 
s˚√
.
groupID
 ) =
NULL
 )

2078 
°©us
 = 
ZCL_STATUS_INVALID_FIELD
;

2081 
°©us
 = 
ZCL_STATUS_NOT_FOUND
;

2084 i‡–
	`UNICAST_MSG
–
pInMsg
->
msg
 ) )

2087 
	`z˛GíîÆ_SídS˚√RemoveRe•⁄£
–
pInMsg
->
msg
->
ídPoöt
, &pInMsg->msg->
§cAddr
,

2088 
°©us
, 
s˚√
.
groupID
,

2089 
s˚√
.
ID
, 
åue
, 
pInMsg
->
hdr
.
å™sSeqNum
 );

2091 
°©
 = 
ZCL_STATUS_CMD_HAS_RSP
;

2094 
COMMAND_SCENE_REMOVE_ALL
:

2095 i‡–
s˚√
.
groupID
 == 0x0000 ||

2096 
	`≠s_FödGroup
–
pInMsg
->
msg
->
ídPoöt
, 
s˚√
.
groupID
 ) !
NULL
 )

2098 
	`z˛GíîÆ_RemoveAŒS˚√s
–
pInMsg
->
msg
->
ídPoöt
, 
s˚√
.
groupID
 );

2099 
°©us
 = 
ZCL_STATUS_SUCCESS
;

2102 
°©us
 = 
ZCL_STATUS_INVALID_FIELD
;

2104 i‡–
	`UNICAST_MSG
–
pInMsg
->
msg
 ) )

2107 
	`z˛GíîÆ_SídS˚√RemoveAŒRe•⁄£
–
pInMsg
->
msg
->
ídPoöt
, &pInMsg->msg->
§cAddr
,

2108 
°©us
, 
s˚√
.
groupID
, 
åue
, 
pInMsg
->
hdr
.
å™sSeqNum
 );

2110 
°©
 = 
ZCL_STATUS_CMD_HAS_RSP
;

2113 
COMMAND_SCENE_STORE
:

2114 i‡–
s˚√
.
groupID
 == 0x0000 ||

2115 
	`≠s_FödGroup
–
pInMsg
->
msg
->
ídPoöt
, 
s˚√
.
groupID
 ) !
NULL
 )

2119 
pS˚√
 = 
	`z˛GíîÆ_FödS˚√
–
pInMsg
->
msg
->
ídPoöt
, 
s˚√
.
groupID
, s˚√.
ID
 );

2120 i‡–
pS˚√
 || ( 
	`z˛GíîÆ_Cou¡AŒS˚√s
(Ë< 
ZCL_GEN_MAX_SCENES
 ) )

2122 
uöt8
 
s˚√Ch™ged
 = 
FALSE
;

2124 
°©us
 = 
ZCL_STATUS_SUCCESS
;

2125 i‡–
pS˚√
 =
NULL
 )

2128 
pS˚√
 = &
s˚√
;

2131 i‡–
pCBs
->
p‚S˚√St‹eReq
 )

2133 
z˛S˚√Req_t
 
ªq
;

2135 
ªq
.
§cAddr
 = &(
pInMsg
->
msg
->srcAddr);

2136 
ªq
.
s˚√
 = 
pS˚√
;

2139 i‡–
pCBs
->
	`p‚S˚√St‹eReq
–&
ªq
 ) )

2140 
s˚√Ch™ged
 = 
TRUE
;

2143 i‡–
pS˚√
 =&
s˚√
 )

2146 
	`z˛GíîÆ_AddS˚√
–
pInMsg
->
msg
->
ídPoöt
, &
s˚√
 );

2148 i‡–
s˚√Ch™ged
 )

2151 
	`z˛GíîÆ_S˚√sWrôeNV
();

2155 
°©us
 = 
ZCL_STATUS_INSUFFICIENT_SPACE
;

2158 
°©us
 = 
ZCL_STATUS_INVALID_FIELD
;

2160 i‡–
	`UNICAST_MSG
–
pInMsg
->
msg
 ) )

2163 
	`z˛GíîÆ_SídS˚√St‹eRe•⁄£
–
pInMsg
->
msg
->
ídPoöt
, &pInMsg->msg->
§cAddr
,

2164 
°©us
, 
s˚√
.
groupID
, s˚√.
ID
,

2165 
åue
, 
pInMsg
->
hdr
.
å™sSeqNum
 );

2167 
°©
 = 
ZCL_STATUS_CMD_HAS_RSP
;

2170 
COMMAND_SCENE_RECALL
:

2171 
pS˚√
 = 
	`z˛GíîÆ_FödS˚√
–
pInMsg
->
msg
->
ídPoöt
, 
s˚√
.
groupID
, s˚√.
ID
 );

2172 i‡–
pS˚√
 && 
pCBs
->
p‚S˚√ReˇŒReq
 )

2174 
z˛S˚√Req_t
 
ªq
;

2176 
ªq
.
§cAddr
 = &(
pInMsg
->
msg
->srcAddr);

2177 
ªq
.
s˚√
 = 
pS˚√
;

2179 
pCBs
->
	`p‚S˚√ReˇŒReq
–&
ªq
 );

2184 
COMMAND_SCENE_GET_MEMBERSHIP
:

2186 i‡–
s˚√
.
groupID
 == 0x0000 ||

2187 
	`≠s_FödGroup
–
pInMsg
->
msg
->
ídPoöt
, 
s˚√
.
groupID
 ) !
NULL
 )

2190 
s˚√Li°
 = 
	`oßl_mem_Æloc
–
ZCL_GEN_MAX_SCENES
 );

2191 i‡–
s˚√Li°
 !
NULL
 )

2193 
s˚√C¡
 = 
	`z˛GíîÆ_FödAŒS˚√sF‹Group
–
pInMsg
->
msg
->
ídPoöt
,

2194 
s˚√
.
groupID
, 
s˚√Li°
 );

2195 
°©us
 = 
ZCL_STATUS_SUCCESS
;

2196 i‡–
	`UNICAST_MSG
–
pInMsg
->
msg
 ) )

2199 
£ndR•
 = 
TRUE
;

2205 i‡–
s˚√C¡
 != 0 )

2206 
£ndR•
 = 
TRUE
;

2212 
°©us
 = 
ZCL_STATUS_INSUFFICIENT_SPACE
;

2213 
£ndR•
 = 
TRUE
;

2219 
°©us
 = 
ZCL_STATUS_INVALID_FIELD
;

2220 
£ndR•
 = 
TRUE
;

2223 i‡–
£ndR•
 )

2225 
	`z˛GíîÆ_SídS˚√GëMembîshùRe•⁄£
–
pInMsg
->
msg
->
ídPoöt
, &pInMsg->msg->
§cAddr
,

2226 
°©us
, 
	`z˛GíîÆ_S˚√sRemaögC≠acôy
(), 
s˚√C¡
, 
s˚√Li°
,

2227 
s˚√
.
groupID
, 
åue
, 
pInMsg
->
hdr
.
å™sSeqNum
 );

2230 i‡–
s˚√Li°
 !
NULL
 )

2231 
	`oßl_mem_‰ì
–
s˚√Li°
 );

2233 
°©
 = 
ZCL_STATUS_CMD_HAS_RSP
;

2237 
°©
 = 
ZFaûuª
;

2241  ( 
°©
 );

2242 
	}
}

2253 
ZSètus_t
 
	$z˛GíîÆ_Pro˚ssInS˚√sClõ¡
–
z˛Incomög_t
 *
pInMsg
,

2254 
z˛GíîÆ_AµCÆlbacks_t
 *
pCBs
 )

2256 
z˛GíîÆ_S˚√_t
 
s˚√
;

2257 
uöt8
 *
pD©a
 = 
pInMsg
->pData;

2258 
uöt8
 
«meLí
;

2259 
uöt8
 *
s˚√Li°
 = 
NULL
;

2260 
z˛S˚√R•_t
 
r•
;

2261 
uöt8
 
i
;

2262 
ZSètus_t
 
°©
 = 
ZSuc˚ss
;

2264 
	`oßl_mem£t
–(
uöt8
*)&
s˚√
, 0, –
z˛GíîÆ_S˚√_t
 ) );

2265 
	`oßl_mem£t
–(
uöt8
*)&
r•
, 0, –
z˛S˚√R•_t
 ) );

2268 
r•
.
°©us
 = *
pD©a
++;

2270 i‡–
pInMsg
->
hdr
.
comm™dID
 =
COMMAND_SCENE_GET_MEMBERSHIP_RSP
 )

2271 
r•
.
ˇ∑côy
 = *
pD©a
++;

2273 
s˚√
.
groupID
 = 
	`BUILD_UINT16
–
pD©a
[0],ÖData[1] );

2274 
pD©a
 += 2;

2276  
pInMsg
->
hdr
.
comm™dID
 )

2278 
COMMAND_SCENE_VIEW_RSP
:

2280 
s˚√
.
ID
 = *
pD©a
++;

2281 
s˚√
.
å™sTime
 = 
	`BUILD_UINT16
–
pD©a
[0],ÖData[1] );

2282 
pD©a
 += 2;

2283 
«meLí
 = *
pD©a
++;

2284 i‡–
«meLí
 > (
ZCL_GEN_SCENE_NAME_LEN
-1) )

2285 
«meLí
 = (
ZCL_GEN_SCENE_NAME_LEN
-1);

2286 
s˚√
.
«me
[0] = 
«meLí
;

2287 
	`oßl_mem˝y
–&(
s˚√
.
«me
[1]), 
pD©a
, 
«meLí
 );

2288 
pD©a
 +
«meLí
;

2294 
COMMAND_SCENE_ADD_RSP
:

2295 
COMMAND_SCENE_REMOVE_RSP
:

2296 
COMMAND_SCENE_REMOVE_ALL_RSP
:

2297 
COMMAND_SCENE_STORE_RSP
:

2298 i‡–
pCBs
->
p‚S˚√R•
 )

2300 
r•
.
§cAddr
 = &(
pInMsg
->
msg
->srcAddr);

2301 
r•
.
cmdID
 = 
pInMsg
->
hdr
.
comm™dID
;

2302 
r•
.
s˚√
 = &scene;

2304 
pCBs
->
	`p‚S˚√R•
–&
r•
 );

2308 
COMMAND_SCENE_GET_MEMBERSHIP_RSP
:

2309 i‡–
r•
.
°©us
 =
ZCL_STATUS_SUCCESS
 )

2311 
uöt8
 
s˚√C¡
 = *
pD©a
++;

2313 i‡–
s˚√C¡
 > 0 )

2316 
s˚√Li°
 = 
	`oßl_mem_Æloc
–
s˚√C¡
 );

2317 i‡–
s˚√Li°
 !
NULL
 )

2319 
r•
.
s˚√C¡
 = sceneCnt;

2320  
i
 = 0; i < 
s˚√C¡
; i++ )

2321 
s˚√Li°
[
i
] = *
pD©a
++;

2326 i‡–
pCBs
->
p‚S˚√R•
 )

2328 
r•
.
§cAddr
 = &(
pInMsg
->
msg
->srcAddr);

2329 
r•
.
cmdID
 = 
pInMsg
->
hdr
.
comm™dID
;

2330 
r•
.
s˚√Li°
 = sceneList;

2331 
r•
.
s˚√
 = &scene;

2333 
pCBs
->
	`p‚S˚√R•
–&
r•
);

2336 i‡–
s˚√Li°
 !
NULL
 )

2337 
	`oßl_mem_‰ì
–
s˚√Li°
 );

2341 
°©
 = 
ZFaûuª
;

2345  ( 
°©
 );

2346 
	}
}

2349 #ifde‡
ZCL_ON_OFF


2359 
ZSètus_t
 
	$z˛GíîÆ_Pro˚ssInOnOff
–
z˛Incomög_t
 *
pInMsg
,

2360 
z˛GíîÆ_AµCÆlbacks_t
 *
pCBs
 )

2362 i‡–
	`z˛_SîvîCmd
–
pInMsg
->
hdr
.
fc
.
dúe˘i⁄
 ) )

2364 i‡–
pInMsg
->
hdr
.
comm™dID
 > 
COMMAND_TOGGLE
 )

2365  ( 
ZFaûuª
 );

2367 i‡–
pCBs
->
p‚OnOff
 )

2368 
pCBs
->
	`p‚OnOff
–
pInMsg
->
hdr
.
comm™dID
 );

2372  ( 
ZSuc˚ss
 );

2373 
	}
}

2376 #ifde‡
ZCL_LEVEL_CTRL


2386 
ZSètus_t
 
	$z˛GíîÆ_Pro˚ssInLevñC⁄åﬁ
–
z˛Incomög_t
 *
pInMsg
,

2387 
z˛GíîÆ_AµCÆlbacks_t
 *
pCBs
 )

2389 
uöt8
 
wôhOnOff
 = 
FALSE
;

2390 
ZSètus_t
 
°©
 = 
ZSuc˚ss
;

2392 i‡–
	`z˛_SîvîCmd
–
pInMsg
->
hdr
.
fc
.
dúe˘i⁄
 ) )

2394  
pInMsg
->
hdr
.
comm™dID
 )

2396 
COMMAND_LEVEL_MOVE_TO_LEVEL_WITH_ON_OFF
:

2397 
wôhOnOff
 = 
TRUE
;

2399 
COMMAND_LEVEL_MOVE_TO_LEVEL
:

2400 i‡–
pCBs
->
p‚LevñC⁄åﬁMoveToLevñ
 )

2402 
z˛LCMoveToLevñ_t
 
cmd
;

2404 
cmd
.
Àvñ
 = 
pInMsg
->
pD©a
[0];

2405 
cmd
.
å™sôi⁄Time
 = 
	`BUILD_UINT16
–
pInMsg
->
pD©a
[1],ÖInMsg->pData[2] );

2406 
cmd
.
wôhOnOff
 = withOnOff;

2408 
pCBs
->
	`p‚LevñC⁄åﬁMoveToLevñ
–&
cmd
 );

2412 
COMMAND_LEVEL_MOVE_WITH_ON_OFF
:

2413 
wôhOnOff
 = 
TRUE
;

2415 
COMMAND_LEVEL_MOVE
:

2416 i‡–
pCBs
->
p‚LevñC⁄åﬁMove
 )

2418 
z˛LCMove_t
 
cmd
;

2420 
cmd
.
moveMode
 = 
pInMsg
->
pD©a
[0];

2421 
cmd
.
øã
 = 
pInMsg
->
pD©a
[1];

2422 
cmd
.
wôhOnOff
 = withOnOff;

2424 
pCBs
->
	`p‚LevñC⁄åﬁMove
–&
cmd
 );

2428 
COMMAND_LEVEL_STEP_WITH_ON_OFF
:

2429 
wôhOnOff
 = 
TRUE
;

2431 
COMMAND_LEVEL_STEP
:

2432 i‡–
pCBs
->
p‚LevñC⁄åﬁSãp
 )

2434 
z˛LCSãp_t
 
cmd
;

2436 
cmd
.
°ïMode
 = 
pInMsg
->
pD©a
[0];

2437 
cmd
.
amou¡
 = 
pInMsg
->
pD©a
[1];

2438 
cmd
.
å™sôi⁄Time
 = 
	`BUILD_UINT16
–
pInMsg
->
pD©a
[2],ÖInMsg->pData[3] );

2439 
cmd
.
wôhOnOff
 = withOnOff;

2441 
pCBs
->
	`p‚LevñC⁄åﬁSãp
–&
cmd
 );

2445 
COMMAND_LEVEL_STOP
:

2446 
COMMAND_LEVEL_STOP_WITH_ON_OFF
:

2448 i‡–
pCBs
->
p‚LevñC⁄åﬁSt›
 )

2450 
pCBs
->
	`p‚LevñC⁄åﬁSt›
();

2455 
°©
 = 
ZFaûuª
;

2461  ( 
°©
 );

2462 
	}
}

2465 #ifde‡
ZCL_ALARMS


2476 
ZSètus_t
 
	$z˛GíîÆ_AddAœrm
–
uöt8
 
ídpoöt
, 
z˛GíîÆ_Aœrm_t
 *
Æ¨m
 )

2478 
z˛GíAœrmIãm_t
 *
pNewIãm
;

2479 
z˛GíAœrmIãm_t
 *
pLo›
;

2482 
pNewIãm
 = 
	`oßl_mem_Æloc
––
z˛GíAœrmIãm_t
 ) );

2483 i‡–
pNewIãm
 =
NULL
 )

2484  ( 
ZMemEº‹
 );

2487 
pNewIãm
->
√xt
 = (
z˛GíAœrmIãm_t
 *)
NULL
;

2488 
pNewIãm
->
ídpoöt
 =Éndpoint;

2489 
	`oßl_mem˝y
–(
uöt8
*)(&
pNewIãm
->
Æ¨m
), (uöt8*Ôœrm,  ( 
z˛GíîÆ_Aœrm_t
 ) );

2492 i‡–
z˛GíAœrmTabÀ
 =
NULL
 )

2494 
z˛GíAœrmTabÀ
 = 
pNewIãm
;

2499 
pLo›
 = 
z˛GíAœrmTabÀ
;

2500  
pLo›
->
√xt
 !
NULL
 )

2501 
pLo›
 =ÖLo›->
√xt
;

2504 
pLo›
->
√xt
 = 
pNewIãm
;

2507  ( 
ZSuc˚ss
 );

2508 
	}
}

2521 
z˛GíîÆ_Aœrm_t
 *
	$z˛GíîÆ_FödAœrm
–
uöt8
 
ídpoöt
, uöt8 
Æ¨mCode
, 
uöt16
 
˛u°îID
 )

2523 
z˛GíAœrmIãm_t
 *
pLo›
;

2526 
pLo›
 = 
z˛GíAœrmTabÀ
;

2527  
pLo›
 )

2529 i‡–
pLo›
->
ídpoöt
 ==Éndpoint &&

2530 
pLo›
->
Æ¨m
.
code
 =
Æ¨mCode
 &&ÖLo›->Æ¨m.
˛u°îID
 == clusterID )

2532  ( &(
pLo›
->
Æ¨m
) );

2534 
pLo›
 =ÖLo›->
√xt
;

2537  ( (
z˛GíîÆ_Aœrm_t
 *)
NULL
 );

2538 
	}
}

2549 
z˛GíîÆ_Aœrm_t
 *
	$z˛GíîÆ_FödE¨lõ°Aœrm
–
uöt8
 
ídpoöt
 )

2551 
z˛GíAœrmIãm_t
 *
pLo›
;

2552 
z˛GíAœrmIãm_t
 
óæõ°Aœrm
;

2553 
z˛GíAœrmIãm_t
 *
pE¨lõ°Aœrm
 = &
óæõ°Aœrm
;

2555 
pE¨lõ°Aœrm
->
Æ¨m
.
timeSèmp
 = 0xFFFFFFFF;

2558 
pLo›
 = 
z˛GíAœrmTabÀ
;

2559  
pLo›
 )

2561 i‡–
pLo›
->
ídpoöt
 ==Éndpoint &&

2562 
pLo›
->
Æ¨m
.
timeSèmp
 < 
pE¨lõ°Aœrm
->alarm.timeStamp )

2564 
pE¨lõ°Aœrm
 = 
pLo›
;

2566 
pLo›
 =ÖLo›->
√xt
;

2569 i‡–
pE¨lõ°Aœrm
->
Æ¨m
.
timeSèmp
 != 0xFFFFFFFF )

2570  ( &(
pE¨lõ°Aœrm
->
Æ¨m
) );

2573  ( (
z˛GíîÆ_Aœrm_t
 *)
NULL
 );

2574 
	}
}

2587 
	$z˛GíîÆ_Re£tAœrm
–
uöt8
 
ídpoöt
, uöt8 
Æ¨mCode
, 
uöt16
 
˛u°îID
 )

2589 
z˛GíAœrmIãm_t
 *
pLo›
;

2590 
z˛GíAœrmIãm_t
 *
pPªv
;

2593 
pLo›
 = 
z˛GíAœrmTabÀ
;

2594 
pPªv
 = 
NULL
;

2595  
pLo›
 )

2597 i‡–
pLo›
->
ídpoöt
 ==Éndpoint &&

2598 
pLo›
->
Æ¨m
.
code
 =
Æ¨mCode
 &&ÖLo›->Æ¨m.
˛u°îID
 == clusterID )

2600 i‡–
pPªv
 =
NULL
 )

2601 
z˛GíAœrmTabÀ
 = 
pLo›
->
√xt
;

2603 
pPªv
->
√xt
 = 
pLo›
->next;

2606 
	`oßl_mem_‰ì
–
pLo›
 );

2614 
pPªv
 = 
pLo›
;

2615 
pLo›
 =ÖLo›->
√xt
;

2617 
	}
}

2629 
	$z˛GíîÆ_Re£tAŒAœrms
–
uöt8
 
ídpoöt
, uöt8 
nŸifyAµ
 )

2631 
z˛GíAœrmIãm_t
 *
pLo›
;

2632 
z˛GíAœrmIãm_t
 *
pPªv
;

2633 
z˛GíAœrmIãm_t
 *
pNext
;

2636 
pLo›
 = 
z˛GíAœrmTabÀ
;

2637 
pPªv
 = 
NULL
;

2638  
pLo›
 )

2640 i‡–
pLo›
->
ídpoöt
 ==Éndpoint )

2642 i‡–
pPªv
 =
NULL
 )

2643 
z˛GíAœrmTabÀ
 = 
pLo›
->
√xt
;

2645 
pPªv
->
√xt
 = 
pLo›
->next;

2647 
pNext
 = 
pLo›
->
√xt
;

2650 
	`oßl_mem_‰ì
–
pLo›
 );

2652 
pLo›
 = 
pNext
;

2656 
pPªv
 = 
pLo›
;

2657 
pLo›
 =ÖLo›->
√xt
;

2661 i‡–
nŸifyAµ
 )

2668 
	}
}

2679 
ZSètus_t
 
	$z˛GíîÆ_Pro˚ssInAœrmsSîvî
–
z˛Incomög_t
 *
pInMsg
,

2680 
z˛GíîÆ_AµCÆlbacks_t
 *
pCBs
 )

2682 
z˛GíîÆ_Aœrm_t
 *
pAœrm
;

2683 
uöt8
 *
pD©a
 = 
pInMsg
->pData;

2684 
ZSètus_t
 
°©
 = 
ZSuc˚ss
;

2686  
pInMsg
->
hdr
.
comm™dID
 )

2688 
COMMAND_ALARMS_RESET
:

2689 
	`z˛GíîÆ_Re£tAœrm
–
pInMsg
->
msg
->
ídPoöt
, 
pD©a
[0],

2690 
	`BUILD_UINT16
–
pD©a
[1],ÖData[2] ) );

2693 
COMMAND_ALARMS_RESET_ALL
:

2694 
	`z˛GíîÆ_Re£tAŒAœrms
–
pInMsg
->
msg
->
ídPoöt
, 
TRUE
 );

2697 
COMMAND_ALARMS_GET
:

2698 
pAœrm
 = 
	`z˛GíîÆ_FödE¨lõ°Aœrm
–
pInMsg
->
msg
->
ídPoöt
 );

2699 i‡–
pAœrm
 )

2702 
	`z˛GíîÆ_SídAœrmGëRe•no£
–
pInMsg
->
msg
->
ídPoöt
, &pInMsg->msg->
§cAddr
,

2703 
ZCL_STATUS_SUCCESS
, 
pAœrm
->
code
,

2704 
pAœrm
->
˛u°îID
,ÖAœrm->
timeSèmp
,

2705 
åue
, 
pInMsg
->
hdr
.
å™sSeqNum
 );

2707 
	`z˛GíîÆ_Re£tAœrm
–
pInMsg
->
msg
->
ídPoöt
, 
pAœrm
->
code
,ÖAœrm->
˛u°îID
 );

2712 
	`z˛GíîÆ_SídAœrmGëRe•no£
–
pInMsg
->
msg
->
ídPoöt
, &pInMsg->msg->
§cAddr
,

2713 
ZCL_STATUS_NOT_FOUND
, 0, 0, 0,

2714 
åue
, 
pInMsg
->
hdr
.
å™sSeqNum
 );

2716 
°©
 = 
ZCL_STATUS_CMD_HAS_RSP
;

2719 
COMMAND_ALARMS_RESET_LOG
:

2720 
	`z˛GíîÆ_Re£tAŒAœrms
–
pInMsg
->
msg
->
ídPoöt
, 
FALSE
 );

2724 
°©
 = 
ZFaûuª
;

2728  ( 
°©
 );

2729 
	}
}

2740 
ZSètus_t
 
	$z˛GíîÆ_Pro˚ssInAœrmsClõ¡
–
z˛Incomög_t
 *
pInMsg
,

2741 
z˛GíîÆ_AµCÆlbacks_t
 *
pCBs
 )

2743 
uöt8
 *
pD©a
 = 
pInMsg
->pData;

2744 
z˛Aœrm_t
 
Æ¨m
;

2745 
ZSètus_t
 
°©
 = 
ZSuc˚ss
;

2747 
	`oßl_mem£t
–(
uöt8
*)&
Æ¨m
, 0, –
z˛Aœrm_t
 ) );

2749  
pInMsg
->
hdr
.
comm™dID
 )

2751 
COMMAND_ALARMS_ALARM
:

2752 i‡–
pCBs
->
p‚Aœrm
 )

2754 
Æ¨m
.
§cAddr
 = &(
pInMsg
->
msg
->srcAddr);

2755 
Æ¨m
.
cmdID
 = 
pInMsg
->
hdr
.
comm™dID
;

2756 
Æ¨m
.
°©us
 = *
pD©a
++;

2757 
Æ¨m
.
Æ¨mCode
 = *
pD©a
++;

2758 
Æ¨m
.
˛u°îID
 = 
	`BUILD_UINT16
–
pD©a
[0],ÖData[1] );

2759 
pD©a
 += 2;

2760 
Æ¨m
.
timeSèmp
 = 
	`oßl_buûd_uöt32
–
pD©a
, 4 );

2762 
pCBs
->
	`p‚Aœrm
–&
Æ¨m
 );

2766 
COMMAND_ALARMS_GET_RSP
:

2767 i‡–
pCBs
->
p‚Aœrm
 )

2769 
Æ¨m
.
§cAddr
 = &(
pInMsg
->
msg
->srcAddr);

2770 
Æ¨m
.
cmdID
 = 
pInMsg
->
hdr
.
comm™dID
;

2771 
Æ¨m
.
Æ¨mCode
 = *
pD©a
++;

2772 
Æ¨m
.
˛u°îID
 = 
	`BUILD_UINT16
–
pD©a
[0],ÖData[1] );

2774 
pCBs
->
	`p‚Aœrm
–&
Æ¨m
 );

2779 
°©
 = 
ZFaûuª
;

2783  ( 
°©
 );

2784 
	}
}

2787 #ifde‡
ZCL_LOCATION


2797 
ZSètus_t
 
	$z˛GíîÆ_Pro˚ssInLoˇti⁄Sîvî
–
z˛Incomög_t
 *
pInMsg
,

2798 
z˛GíîÆ_AµCÆlbacks_t
 *
pCBs
 )

2800 
uöt8
 *
pD©a
 = 
pInMsg
->pData;

2801 
z˛Loˇti⁄_t
 
cmd
;

2802 
ZSètus_t
 
°©
 = 
ZSuc˚ss
;

2804 
	`oßl_mem£t
–(
uöt8
*)&
cmd
, 0, –
z˛Loˇti⁄_t
 ) );

2806  
pInMsg
->
hdr
.
comm™dID
 )

2808 
COMMAND_LOCATION_SET_ABSOLUTE
:

2809 
cmd
.
un
.
absLoc
.
co‹dö©e1
 = 
	`BUILD_UINT16
–
pD©a
[0],ÖData[1] );

2810 
pD©a
 += 2;

2811 
cmd
.
un
.
absLoc
.
co‹dö©e2
 = 
	`BUILD_UINT16
–
pD©a
[0],ÖData[1] );

2812 
pD©a
 += 2;

2813 
cmd
.
un
.
absLoc
.
co‹dö©e3
 = 
	`BUILD_UINT16
–
pD©a
[0],ÖData[1] );

2814 
pD©a
 += 2;

2815 
cmd
.
un
.
absLoc
.
powî
 = 
	`BUILD_UINT16
–
pD©a
[0],ÖData[1] );

2816 
pD©a
 += 2;

2817 
cmd
.
un
.
absLoc
.
∑thLossExp⁄ít
 = 
	`BUILD_UINT16
–
pD©a
[0],ÖData[1] );

2819 i‡–
pCBs
->
p‚Loˇti⁄
 )

2821 
cmd
.
§cAddr
 = &(
pInMsg
->
msg
->srcAddr);

2822 
cmd
.
cmdID
 = 
pInMsg
->
hdr
.
comm™dID
;

2825 
pCBs
->
	`p‚Loˇti⁄
–&
cmd
 );

2829 
COMMAND_LOCATION_SET_DEV_CFG
:

2830 
cmd
.
un
.
devCfg
.
powî
 = 
	`BUILD_UINT16
–
pD©a
[0],ÖData[1] );

2831 
pD©a
 += 2;

2832 
cmd
.
un
.
devCfg
.
∑thLossExp⁄ít
 = 
	`BUILD_UINT16
–
pD©a
[0],ÖData[1] );

2833 
pD©a
 += 2;

2834 
cmd
.
un
.
devCfg
.
ˇlcPîiod
 = 
	`BUILD_UINT16
–
pD©a
[0],ÖData[1] );

2835 
pD©a
 += 2;

2836 
cmd
.
un
.
devCfg
.
numMósuªmíts
 = *
pD©a
++;

2837 
cmd
.
un
.
devCfg
.
ªp‹tPîiod
 = 
	`BUILD_UINT16
–
pD©a
[0],ÖData[1] );

2839 i‡–
pCBs
->
p‚Loˇti⁄
 )

2841 
cmd
.
§cAddr
 = &(
pInMsg
->
msg
->srcAddr);

2842 
cmd
.
cmdID
 = 
pInMsg
->
hdr
.
comm™dID
;

2845 
pCBs
->
	`p‚Loˇti⁄
–&
cmd
 );

2849 
COMMAND_LOCATION_GET_DEV_CFG
:

2850 
cmd
.
un
.
õìAddr
 = 
pD©a
;

2852 i‡–
pCBs
->
p‚Loˇti⁄
 )

2854 
cmd
.
§cAddr
 = &(
pInMsg
->
msg
->srcAddr);

2855 
cmd
.
cmdID
 = 
pInMsg
->
hdr
.
comm™dID
;

2856 
cmd
.
£qNum
 = 
pInMsg
->
hdr
.
å™sSeqNum
;

2859 
pCBs
->
	`p‚Loˇti⁄
–&
cmd
 );

2861 
°©
 = 
ZCL_STATUS_CMD_HAS_RSP
;

2864 
COMMAND_LOCATION_GET_DATA
:

2865 
cmd
.
un
.
loc
.
bôm≠
.
locByã
 = *
pD©a
++;

2866 
cmd
.
un
.
loc
.
numRe•⁄£s
 = *
pD©a
++;

2868 i‡–
cmd
.
un
.
loc
.
brdˇ°Re•⁄£
 == 0 )

2869 
	`oßl_˝yExtAddr
–
cmd
.
un
.
loc
.
èrgëAddr
, 
pD©a
 );

2871 i‡–
pCBs
->
p‚Loˇti⁄
 )

2873 
cmd
.
§cAddr
 = &(
pInMsg
->
msg
->srcAddr);

2874 
cmd
.
cmdID
 = 
pInMsg
->
hdr
.
comm™dID
;

2875 
cmd
.
£qNum
 = 
pInMsg
->
hdr
.
å™sSeqNum
;

2878 
pCBs
->
	`p‚Loˇti⁄
–&
cmd
 );

2880 
°©
 = 
ZCL_STATUS_CMD_HAS_RSP
;

2884 
°©
 = 
ZFaûuª
;

2888  ( 
°©
 );

2889 
	}
}

2900 
	$z˛GíîÆ_Pro˚ssInLoˇti⁄D©aR•
–
z˛Incomög_t
 *
pInMsg
,

2901 
z˛GíîÆ_AµCÆlbacks_t
 *
pCBs
 )

2903 
uöt8
 *
pD©a
 = 
pInMsg
->pData;

2904 
z˛Loˇti⁄R•_t
 
r•
;

2906 
	`oßl_mem£t
–(
uöt8
*)&
r•
, 0, –
z˛Loˇti⁄R•_t
 ) );

2908 i‡–
pCBs
->
p‚Loˇti⁄R•
 )

2910 i‡–
pInMsg
->
hdr
.
comm™dID
 =
COMMAND_LOCATION_DATA_RSP
 )

2911 
r•
.
un
.
loc
.
°©us
 = *
pD©a
++;

2913 i‡–
pInMsg
->
hdr
.
comm™dID
 !
COMMAND_LOCATION_DATA_RSP
 ||

2914 
r•
.
un
.
loc
.
°©us
 =
ZCL_STATUS_SUCCESS
 )

2916 
r•
.
un
.
loc
.
d©a
.
ty≥
 = *
pD©a
++;

2917 
r•
.
un
.
loc
.
d©a
.
absLoc
.
co‹dö©e1
 = 
	`BUILD_UINT16
–
pD©a
[0],ÖData[1] );

2918 
pD©a
 += 2;

2919 
r•
.
un
.
loc
.
d©a
.
absLoc
.
co‹dö©e2
 = 
	`BUILD_UINT16
–
pD©a
[0],ÖData[1] );

2920 
pD©a
 += 2;

2922 i‡–
	`loˇti⁄Ty≥2D
–
r•
.
un
.
loc
.
d©a
.
ty≥
 ) == 0 )

2924 
r•
.
un
.
loc
.
d©a
.
absLoc
.
co‹dö©e3
 = 
	`BUILD_UINT16
–
pD©a
[0],ÖData[1] );

2925 
pD©a
 += 2;

2928 i‡–
pInMsg
->
hdr
.
comm™dID
 !
COMMAND_LOCATION_COMPACT_DATA_NOTIF
 )

2930 
r•
.
un
.
loc
.
d©a
.
absLoc
.
powî
 = 
	`BUILD_UINT16
–
pD©a
[0],ÖData[1] );

2931 
pD©a
 += 2;

2932 
r•
.
un
.
loc
.
d©a
.
absLoc
.
∑thLossExp⁄ít
 = 
	`BUILD_UINT16
–
pD©a
[0],ÖData[1] );

2933 
pD©a
 += 2;

2936 i‡–
	`loˇti⁄Ty≥Absﬁuã
–
r•
.
un
.
loc
.
d©a
.
ty≥
 ) == 0 )

2938 i‡–
pInMsg
->
hdr
.
comm™dID
 !
COMMAND_LOCATION_COMPACT_DATA_NOTIF
 )

2939 
r•
.
un
.
loc
.
d©a
.
ˇlcLoc
.
loˇti⁄Mëhod
 = *
pD©a
++;

2941 
r•
.
un
.
loc
.
d©a
.
ˇlcLoc
.
quÆôyMósuª
 = *
pD©a
++;

2942 
r•
.
un
.
loc
.
d©a
.
ˇlcLoc
.
loˇti⁄Age
 = 
	`BUILD_UINT16
–
pD©a
[0],ÖData[1] );

2946 
r•
.
§cAddr
 = &(
pInMsg
->
msg
->srcAddr);

2947 
r•
.
cmdID
 = 
pInMsg
->
hdr
.
comm™dID
;

2950 
pCBs
->
	`p‚Loˇti⁄R•
–&
r•
 );

2952 
	}
}

2963 
ZSètus_t
 
	$z˛GíîÆ_Pro˚ssInLoˇti⁄Clõ¡
–
z˛Incomög_t
 *
pInMsg
,

2964 
z˛GíîÆ_AµCÆlbacks_t
 *
pCBs
 )

2966 
uöt8
 *
pD©a
 = 
pInMsg
->pData;

2967 
z˛Loˇti⁄R•_t
 
r•
;

2968 
ZSètus_t
 
°©
 = 
ZSuc˚ss
;

2970 
	`oßl_mem£t
–(
uöt8
*)&
r•
, 0, –
z˛Loˇti⁄R•_t
 ) );

2972  
pInMsg
->
hdr
.
comm™dID
 )

2974 
COMMAND_LOCATION_DEV_CFG_RSP
:

2975 i‡–
pCBs
->
p‚Loˇti⁄R•
 )

2977 
r•
.
un
.
devCfg
.
°©us
 = *
pD©a
++;

2978 i‡–
r•
.
un
.
devCfg
.
°©us
 =
ZCL_STATUS_SUCCESS
 )

2980 
r•
.
un
.
devCfg
.
d©a
.
powî
 = 
	`BUILD_UINT16
–
pD©a
[0],ÖData[1] );

2981 
pD©a
 += 2;

2982 
r•
.
un
.
devCfg
.
d©a
.
∑thLossExp⁄ít
 = 
	`BUILD_UINT16
–
pD©a
[0],ÖData[1] );

2983 
pD©a
 += 2;

2984 
r•
.
un
.
devCfg
.
d©a
.
ˇlcPîiod
 = 
	`BUILD_UINT16
–
pD©a
[0],ÖData[1] );

2985 
pD©a
 += 2;

2986 
r•
.
un
.
devCfg
.
d©a
.
numMósuªmíts
 = *
pD©a
++;

2987 
r•
.
un
.
devCfg
.
d©a
.
ªp‹tPîiod
 = 
	`BUILD_UINT16
–
pD©a
[0],ÖData[1] );

2989 
r•
.
§cAddr
 = &(
pInMsg
->
msg
->srcAddr);

2990 
r•
.
cmdID
 = 
pInMsg
->
hdr
.
comm™dID
;

2993 
pCBs
->
	`p‚Loˇti⁄R•
–&
r•
 );

2998 
COMMAND_LOCATION_DATA_RSP
:

2999 
COMMAND_LOCATION_DATA_NOTIF
:

3000 
COMMAND_LOCATION_COMPACT_DATA_NOTIF
:

3001 
	`z˛GíîÆ_Pro˚ssInLoˇti⁄D©aR•
–
pInMsg
, 
pCBs
 );

3004 
COMMAND_LOCATION_RSSI_PING
:

3005 i‡–
pCBs
->
p‚Loˇti⁄R•
 )

3007 
r•
.
un
.
loˇti⁄Ty≥
 = *
pD©a
;

3009 
r•
.
§cAddr
 = &(
pInMsg
->
msg
->srcAddr);

3010 
r•
.
cmdID
 = 
pInMsg
->
hdr
.
comm™dID
;

3013 
pCBs
->
	`p‚Loˇti⁄R•
–&
r•
 );

3018 
°©
 = 
ZFaûuª
;

3022  ( 
°©
 );

3023 
	}
}

3026 #ifde‡
ZCL_SCENES


3036 
uöt8
 
	$z˛GíîÆ_S˚√sInôNV
( )

3038 
uöt8
 
°©us
;

3039 
uöt16
 
size
;

3041 
size
 = (
uöt16
)(( ( 
nvGíS˚√sHdr_t
 ))

3042 + ( –
z˛GíS˚√NVIãm_t
 ) * 
ZCL_GEN_MAX_SCENES
 ));

3044 
°©us
 = 
	`oßl_nv_ôem_öô
–
ZCD_NV_SCENE_TABLE
, 
size
, 
NULL
 );

3046 i‡–
°©us
 !
ZSUCCESS
 )

3048 
	`z˛GíîÆ_S˚√sSëDeÁu…NV
();

3051  
°©us
;

3052 
	}
}

3063 
	$z˛GíîÆ_S˚√sSëDeÁu…NV
( )

3065 
nvGíS˚√sHdr_t
 
hdr
;

3068 
hdr
.
numRecs
 = 0;

3071 
	`oßl_nv_wrôe
–
ZCD_NV_SCENE_TABLE
, 0, –
nvGíS˚√sHdr_t
 ), &
hdr
 );

3072 
	}
}

3083 
	$z˛GíîÆ_S˚√sWrôeNV
( )

3085 
nvGíS˚√sHdr_t
 
hdr
;

3086 
z˛GíS˚√Iãm_t
 *
pLo›
;

3087 
z˛GíS˚√NVIãm_t
 
ôem
;

3089 
hdr
.
numRecs
 = 0;

3092 
pLo›
 = 
z˛GíS˚√TabÀ
;

3093  
pLo›
 )

3096 
ôem
.
ídpoöt
 = 
pLo›
->endpoint;

3097 
	`oßl_mem˝y
–&(
ôem
.
s˚√
), &(
pLo›
->s˚√),  ( 
z˛GíîÆ_S˚√_t
 ) );

3100 
	`oßl_nv_wrôe
–
ZCD_NV_SCENE_TABLE
,

3101 (
uöt16
)((–
nvGíS˚√sHdr_t
 )Ë+ (
hdr
.
numRecs
 *  ( 
z˛GíS˚√NVIãm_t
 ))),

3102  ( 
z˛GíS˚√NVIãm_t
 ), &
ôem
 );

3104 
hdr
.
numRecs
++;

3106 
pLo›
 =ÖLo›->
√xt
;

3110 
	`oßl_nv_wrôe
–
ZCD_NV_SCENE_TABLE
, 0, –
nvGíS˚√sHdr_t
 ), &
hdr
 );

3111 
	}
}

3122 
uöt16
 
	$z˛GíîÆ_S˚√sRe°‹eFromNV
( )

3124 
uöt16
 
x
;

3125 
nvGíS˚√sHdr_t
 
hdr
;

3127 
z˛GíS˚√NVIãm_t
 
ôem
;

3128 
uöt16
 
numAdded
 = 0;

3130 i‡–
	`oßl_nv_ªad
–
ZCD_NV_SCENE_TABLE
, 0, (
nvGíS˚√sHdr_t
), &
hdr
 ) =
ZSuc˚ss
 )

3133  
x
 = 0; x < 
hdr
.
numRecs
; x++ )

3135 i‡–
	`oßl_nv_ªad
–
ZCD_NV_SCENE_TABLE
,

3136 (
uöt16
)((
nvGíS˚√sHdr_t
Ë+ (
x
 *  ( 
z˛GíS˚√NVIãm_t
 ))),

3137  ( 
z˛GíS˚√NVIãm_t
 ), &
ôem
 ) =
ZSUCCESS
 )

3140 i‡–
	`z˛GíîÆ_AddS˚√
–
ôem
.
ídpoöt
, &(ôem.
s˚√
ËË=
ZSuc˚ss
 )

3142 
numAdded
++;

3148  ( 
numAdded
 );

3149 
	}
}

	@Components/stack/zcl/zcl_general.h

40 #i‚de‡
ZCL_GENERAL_H


41 
	#ZCL_GENERAL_H


	)

43 #ifde‡
__˝lu•lus


51 
	~"z˛.h
"

56 
	#ZCL_SCENE_NAME_LEN
 16

	)

62 
	#ATTRID_BASIC_ZCL_VERSION
 0x0000

	)

63 
	#ATTRID_BASIC_APPL_VERSION
 0x0001

	)

64 
	#ATTRID_BASIC_STACK_VERSION
 0x0002

	)

65 
	#ATTRID_BASIC_HW_VERSION
 0x0003

	)

66 
	#ATTRID_BASIC_MANUFACTURER_NAME
 0x0004

	)

67 
	#ATTRID_BASIC_MODEL_ID
 0x0005

	)

68 
	#ATTRID_BASIC_DATE_CODE
 0x0006

	)

69 
	#ATTRID_BASIC_POWER_SOURCE
 0x0007

	)

71 
	#ATTRID_BASIC_LOCATION_DESC
 0x0010

	)

72 
	#ATTRID_BASIC_PHYSICAL_ENV
 0x0011

	)

73 
	#ATTRID_BASIC_DEVICE_ENABLED
 0x0012

	)

74 
	#ATTRID_BASIC_ALARM_MASK
 0x0013

	)

78 
	#POWER_SOURCE_UNKNOWN
 0x00

	)

79 
	#POWER_SOURCE_MAINS_1_PHASE
 0x01

	)

80 
	#POWER_SOURCE_MAINS_3_PHASE
 0x02

	)

81 
	#POWER_SOURCE_BATTERY
 0x03

	)

82 
	#POWER_SOURCE_DC
 0x04

	)

83 
	#POWER_SOURCE_EMERG_MAINS_CONST_PWR
 0x05

	)

84 
	#POWER_SOURCE_EMERG_MAINS_XFER_SW
 0x06

	)

89 
	#POWER_SOURCE_PRIMARY
 0x7F

	)

90 
	#POWER_SOURCE_SECONDARY
 0x80

	)

93 
	#PHY_UNSPECIFIED_ENV
 0x00

	)

95 
	#PHY_UNKNOWN_ENV
 0xFF

	)

98 
	#DEVICE_DISABLED
 0x00

	)

99 
	#DEVICE_ENABLED
 0x01

	)

102 
	#ALARM_MASK_GEN_HW_FAULT
 0x01

	)

103 
	#ALARM_MASK_GEN_SW_FAULT
 0x02

	)

108 
	#COMMAND_BASIC_RESET_FACT_DEFAULT
 0x00

	)

114 
	#ATTRID_POWER_CFG_MAINS_VOLTAGE
 0x0000

	)

115 
	#ATTRID_POWER_CFG_MAINS_FREQUENCY
 0x0001

	)

117 
	#ATTRID_POWER_CFG_MAINS_ALARM_MASK
 0x0010

	)

118 
	#ATTRID_POWER_CFG_MAINS_VOLT_MIN_THRES
 0x0011

	)

119 
	#ATTRID_POWER_CFG_MAINS_VOLT_MAX_THRES
 0x0012

	)

120 
	#ATTRID_POWER_CFG_MAINS_DWELL_TRIP_POINT
 0x0013

	)

122 
	#ATTRID_POWER_CFG_BATTERY_VOLTAGE
 0x0020

	)

124 
	#ATTRID_POWER_CFG_BAT_MANU
 0x0030

	)

125 
	#ATTRID_POWER_CFG_BAT_SIZE
 0x0031

	)

126 
	#ATTRID_POWER_CFG_BAT_AHR_RATING
 0x0032

	)

127 
	#ATTRID_POWER_CFG_BAT_QUANTITY
 0x0033

	)

128 
	#ATTRID_POWER_CFG_BAT_RATED_VOLTAGE
 0x0034

	)

129 
	#ATTRID_POWER_CFG_BAT_ALARM_MASK
 0x0035

	)

130 
	#ATTRID_POWER_CFG_BAT_VOLT_MIN_THRES
 0x0036

	)

133 
	#MAINS_ALARM_MASK_VOLT_2_LOW
 0x01

	)

134 
	#MAINS_ALARM_MASK_VOLT_2_HI
 0x02

	)

137 
	#BAT_SIZE_NO_BATTERY
 0x00

	)

138 
	#BAT_SIZE_BUILT_IN
 0x01

	)

139 
	#BAT_SIZE_OTHER
 0x02

	)

140 
	#BAT_SIZE_AA
 0x03

	)

141 
	#BAT_SIZE_AAA
 0x04

	)

142 
	#BAT_SIZE_C
 0x05

	)

143 
	#BAT_SIZE_D
 0x06

	)

144 
	#BAT_SIZE_UNKNOWN
 0xFF

	)

147 
	#BAT_ALARM_MASK_VOLT_2_LOW
 0x01

	)

158 
	#ATTRID_DEV_TEMP_CURRENT
 0x0000

	)

159 
	#ATTRID_DEV_TEMP_MIN_EXPERIENCED
 0x0001

	)

160 
	#ATTRID_DEV_TEMP_MAX_EXPERIENCED
 0x0002

	)

161 
	#ATTRID_DEV_TEMP_OVER_TOTAL_DWELL
 0x0003

	)

163 
	#ATTRID_DEV_TEMP_ALARM_MASK
 0x0010

	)

164 
	#ATTRID_DEV_TEMP_LOW_THRES
 0x0011

	)

165 
	#ATTRID_DEV_TEMP_HI_THRES
 0x0012

	)

166 
	#ATTRID_DEV_TEMP_LOW_DWELL_TRIP_POINT
 0x0013

	)

167 
	#ATTRID_DEV_TEMP_HI_DWELL_TRIP_POINT
 0x0014

	)

170 
	#DEV_TEMP_ALARM_MASK_2_LOW
 0x01

	)

171 
	#DEV_TEMP_ALARM_MASK_2_HI
 0x02

	)

181 
	#ATTRID_IDENTIFY_TIME
 0x0000

	)

186 
	#COMMAND_IDENTIFY
 0x00

	)

187 
	#COMMAND_IDENTIFY_QUERY
 0x01

	)

189 
	#COMMAND_IDENTIFY_QUERY_RSP
 0x00

	)

194 
	#ATTRID_GROUP_NAME_SUPPORT
 0x0000

	)

199 
	#COMMAND_GROUP_ADD
 0x00

	)

200 
	#COMMAND_GROUP_VIEW
 0x01

	)

201 
	#COMMAND_GROUP_GET_MEMBERSHIP
 0x02

	)

202 
	#COMMAND_GROUP_REMOVE
 0x03

	)

203 
	#COMMAND_GROUP_REMOVE_ALL
 0x04

	)

204 
	#COMMAND_GROUP_ADD_IF_IDENTIFYING
 0x05

	)

206 
	#COMMAND_GROUP_ADD_RSP
 0x00

	)

207 
	#COMMAND_GROUP_VIEW_RSP
 0x01

	)

208 
	#COMMAND_GROUP_GET_MEMBERSHIP_RSP
 0x02

	)

209 
	#COMMAND_GROUP_REMOVE_RSP
 0x03

	)

215 
	#ATTRID_SCENES_COUNT
 0x0000

	)

216 
	#ATTRID_SCENES_CURRENT_SCENE
 0x0001

	)

217 
	#ATTRID_SCENES_CURRENT_GROUP
 0x0002

	)

218 
	#ATTRID_SCENES_SCENE_VALID
 0x0003

	)

219 
	#ATTRID_SCENES_NAME_SUPPORT
 0x0004

	)

220 
	#ATTRID_SCENES_LAST_CFG_BY
 0x0005

	)

225 
	#COMMAND_SCENE_ADD
 0x00

	)

226 
	#COMMAND_SCENE_VIEW
 0x01

	)

227 
	#COMMAND_SCENE_REMOVE
 0x02

	)

228 
	#COMMAND_SCENE_REMOVE_ALL
 0x03

	)

229 
	#COMMAND_SCENE_STORE
 0x04

	)

230 
	#COMMAND_SCENE_RECALL
 0x05

	)

231 
	#COMMAND_SCENE_GET_MEMBERSHIP
 0x06

	)

233 
	#COMMAND_SCENE_ADD_RSP
 0x00

	)

234 
	#COMMAND_SCENE_VIEW_RSP
 0x01

	)

235 
	#COMMAND_SCENE_REMOVE_RSP
 0x02

	)

236 
	#COMMAND_SCENE_REMOVE_ALL_RSP
 0x03

	)

237 
	#COMMAND_SCENE_STORE_RSP
 0x04

	)

238 
	#COMMAND_SCENE_GET_MEMBERSHIP_RSP
 0x06

	)

243 
	#ATTRID_ON_OFF
 0x0000

	)

248 
	#COMMAND_OFF
 0x00

	)

249 
	#COMMAND_ON
 0x01

	)

250 
	#COMMAND_TOGGLE
 0x02

	)

256 
	#ATTRID_ON_OFF_SWITCH_TYPE
 0x0000

	)

258 
	#ATTRID_ON_OFF_SWITCH_ACTIONS
 0x0010

	)

261 
	#ON_OFF_SWITCH_TYPE_TOGGLE
 0x00

	)

262 
	#ON_OFF_SWITCH_TYPE_MOMENTARY
 0x01

	)

265 
	#ON_OFF_SWITCH_ACTIONS_0
 0x00

	)

266 
	#ON_OFF_SWITCH_ACTIONS_1
 0x01

	)

267 
	#ON_OFF_SWITCH_ACTIONS_2
 0x02

	)

277 
	#ATTRID_LEVEL_CURRENT_LEVEL
 0x0000

	)

278 
	#ATTRID_LEVEL_REMAINING_TIME
 0x0001

	)

279 
	#ATTRID_LEVEL_ON_OFF_TRANSITION_TIME
 0x0010

	)

280 
	#ATTRID_LEVEL_ON_LEVEL
 0x0011

	)

285 
	#COMMAND_LEVEL_MOVE_TO_LEVEL
 0x00

	)

286 
	#COMMAND_LEVEL_MOVE
 0x01

	)

287 
	#COMMAND_LEVEL_STEP
 0x02

	)

288 
	#COMMAND_LEVEL_STOP
 0x03

	)

289 
	#COMMAND_LEVEL_MOVE_TO_LEVEL_WITH_ON_OFF
 0x04

	)

290 
	#COMMAND_LEVEL_MOVE_WITH_ON_OFF
 0x05

	)

291 
	#COMMAND_LEVEL_STEP_WITH_ON_OFF
 0x06

	)

292 
	#COMMAND_LEVEL_STOP_WITH_ON_OFF
 0x07

	)

295 
	#LEVEL_MOVE_UP
 0x00

	)

296 
	#LEVEL_MOVE_DOWN
 0x01

	)

299 
	#LEVEL_STEP_UP
 0x00

	)

300 
	#LEVEL_STEP_DOWN
 0x01

	)

306 
	#ATTRID_ALARM_COUNT
 0x0000

	)

311 
	#COMMAND_ALARMS_RESET
 0x00

	)

312 
	#COMMAND_ALARMS_RESET_ALL
 0x01

	)

313 
	#COMMAND_ALARMS_GET
 0x02

	)

314 
	#COMMAND_ALARMS_RESET_LOG
 0x03

	)

316 
	#COMMAND_ALARMS_ALARM
 0x00

	)

317 
	#COMMAND_ALARMS_GET_RSP
 0x01

	)

322 
	#ATTRID_TIME_TIME
 0x00

	)

323 
	#ATTRID_TIME_STATUS
 0x01

	)

326 
	#TIME_STATUS_MASTER
 0x01

	)

327 
	#TIME_STATUS_SYNCH
 0x02

	)

338 
	#ATTRID_LOCATION_TYPE
 0x0000

	)

339 
	#ATTRID_LOCATION_METHOD
 0x0001

	)

340 
	#ATTRID_LOCATION_AGE
 0x0002

	)

341 
	#ATTRID_LOCATION_QUALITY_MEASURE
 0x0003

	)

342 
	#ATTRID_LOCATION_NUM_DEVICES
 0x0004

	)

345 
	#ATTRID_LOCATION_COORDINATE1
 0x0010

	)

346 
	#ATTRID_LOCATION_COORDINATE2
 0x0011

	)

347 
	#ATTRID_LOCATION_COORDINATE3
 0x0012

	)

348 
	#ATTRID_LOCATION_POWER
 0x0013

	)

349 
	#ATTRID_LOCATION_PATH_LOSS_EXPONENT
 0x0014

	)

350 
	#ATTRID_LOCATION_REPORT_PERIOD
 0x0015

	)

351 
	#ATTRID_LOCATION_CALC_PERIOD
 0x0016

	)

352 
	#ATTRID_LOCATION_NUM_RSSI_MEASUREMENTS
 0x0017

	)

355 
	#LOCATION_TYPE_ABSOLUTE
 0x01

	)

356 
	#LOCATION_TYPE_2_D
 0x02

	)

357 
	#LOCATION_TYPE_COORDINATE_SYSTEM
 0x0C

	)

360 
	#LOCATION_METHOD_LATERATION
 0x00

	)

361 
	#LOCATION_METHOD_SIGNPOSTING
 0x01

	)

362 
	#LOCATION_METHOD_RF_FINGER_PRINT
 0x02

	)

363 
	#LOCATION_METHOD_OUT_OF_BAND
 0x03

	)

368 
	#COMMAND_LOCATION_SET_ABSOLUTE
 0x00

	)

369 
	#COMMAND_LOCATION_SET_DEV_CFG
 0x01

	)

370 
	#COMMAND_LOCATION_GET_DEV_CFG
 0x02

	)

371 
	#COMMAND_LOCATION_GET_DATA
 0x03

	)

373 
	#COMMAND_LOCATION_DEV_CFG_RSP
 0x00

	)

374 
	#COMMAND_LOCATION_DATA_RSP
 0x01

	)

375 
	#COMMAND_LOCATION_DATA_NOTIF
 0x02

	)

376 
	#COMMAND_LOCATION_COMPACT_DATA_NOTIF
 0x03

	)

377 
	#COMMAND_LOCATION_RSSI_PING
 0x04

	)

381 
	#ZCL_GEN_SCENE_NAME_LEN
 16

	)

387 
	#ZCL_GEN_SCENE_EXT_LEN
 15

	)

390 
	#ZCL_GEN_MAX_SCENES
 16

	)

399 
uöt16
 
groupID
;

400 
uöt8
 
ID
;

401 
uöt16
 
å™sTime
;

402 
uöt8
 
«me
[
ZCL_GEN_SCENE_NAME_LEN
];

403 
uöt8
 
extLí
;

404 
uöt8
 
extFõld
[
ZCL_GEN_SCENE_EXT_LEN
];

405 } 
	tz˛GíîÆ_S˚√_t
;

410 
uöt8
 
code
;

411 
uöt16
 
˛u°îID
;

412 
uöt32
 
timeSèmp
;

413 } 
	tz˛GíîÆ_Aœrm_t
;

419 
öt16
 
co‹dö©e1
;

420 
öt16
 
co‹dö©e2
;

421 
öt16
 
co‹dö©e3
;

422 
öt16
 
powî
;

423 
uöt16
 
∑thLossExp⁄ít
;

424 } 
	tz˛Loˇti⁄Absﬁuã_t
;

429 
öt16
 
powî
;

430 
uöt16
 
∑thLossExp⁄ít
;

431 
uöt16
 
ˇlcPîiod
;

432 
uöt8
 
numMósuªmíts
;

433 
uöt16
 
ªp‹tPîiod
;

434 } 
	tz˛Loˇti⁄DevCfg_t
;

439 
absO∆y
:1;

440 
ªˇlc
:1;

441 
brdˇ°Indic
:1;

442 
brdˇ°R•
:1;

443 
com∑˘R•
:1;

444 
ª£rved
:3;

445 } 
	tloˇti⁄bôs_t
;

449 
loˇti⁄bôs_t
 
locBôs
;

450 
uöt8
 
locByã
;

451 } 
	tloˇti⁄_t
;

455 
loˇti⁄_t
 
bôm≠
;

456 
uöt8
 
numRe•⁄£s
;

457 
uöt8
 
èrgëAddr
[8];

459 
	#absﬁuãO∆y
 
bôm≠
.
locBôs
.
absO∆y


	)

460 
	#ªˇlcuœã
 
bôm≠
.
locBôs
.
ªˇlc


	)

461 
	#brdˇ°Indiˇt‹
 
bôm≠
.
locBôs
.
brdˇ°Indic


	)

462 
	#brdˇ°Re•⁄£
 
bôm≠
.
locBôs
.
brdˇ°R•


	)

463 
	#com∑˘Re•⁄£
 
bôm≠
.
locBôs
.
com∑˘R•


	)

464 } 
	tz˛Loˇti⁄GëD©a_t
;

469 
uöt8
 
°©us
;

470 
z˛Loˇti⁄DevCfg_t
 
d©a
;

471 } 
	tz˛Loˇti⁄DevCfgR•_t
;

476 
uöt8
 
loˇti⁄Mëhod
;

477 
uöt8
 
quÆôyMósuª
;

478 
uöt16
 
loˇti⁄Age
;

479 } 
	tz˛Loˇti⁄CÆcuœãd_t
;

484 
uöt8
 
ty≥
;

485 
z˛Loˇti⁄Absﬁuã_t
 
absLoc
;

486 
z˛Loˇti⁄CÆcuœãd_t
 
ˇlcLoc
;

487 } 
	tz˛Loˇti⁄D©a_t
;

492 
uöt8
 
°©us
;

493 
z˛Loˇti⁄D©a_t
 
d©a
;

494 } 
	tz˛Loˇti⁄D©aR•_t
;

499 
afAddrTy≥_t
 *
§cAddr
;

500 
uöt16
 
idítifyTime
;

501 } 
	tz˛Idítify_t
;

505 
afAddrTy≥_t
 *
§cAddr
;

506 
uöt16
 
timeout
;

507 } 
	tz˛IdítifyQuîyR•_t
;

511 
uöt8
 
Àvñ
;

512 
uöt16
 
å™sôi⁄Time
;

513 
uöt8
 
wôhOnOff
;

514 } 
	tz˛LCMoveToLevñ_t
;

518 
uöt8
 
moveMode
;

520 
uöt8
 
øã
;

521 
uöt8
 
wôhOnOff
;

522 } 
	tz˛LCMove_t
;

526 
uöt8
 
°ïMode
;

528 
uöt8
 
amou¡
;

529 
uöt16
 
å™sôi⁄Time
;

530 
uöt8
 
wôhOnOff
;

531 } 
	tz˛LCSãp_t
;

535 
afAddrTy≥_t
 *
§cAddr
;

536 
uöt8
 
cmdID
;

538 
uöt8
 
°©us
;

541 
uöt8
 
gΩC¡
;

542 
uöt16
 *
gΩLi°
;

543 
uöt8
 
ˇ∑côy
;

544 
uöt8
 *
gΩName
;

545 } 
	tz˛GroupR•_t
;

549 
afAddrTy≥_t
 *
§cAddr
;

550 
z˛GíîÆ_S˚√_t
 *
s˚√
;

551 } 
	tz˛S˚√Req_t
;

555 
afAddrTy≥_t
 *
§cAddr
;

556 
uöt8
 
cmdID
;

559 
uöt8
 
°©us
;

560 
uöt8
 
s˚√C¡
;

562 
uöt8
 *
s˚√Li°
;

563 
uöt8
 
ˇ∑côy
;

565 
z˛GíîÆ_S˚√_t
 *
s˚√
;

566 } 
	tz˛S˚√R•_t
;

570 
afAddrTy≥_t
 *
§cAddr
;

571 
uöt8
 
cmdID
;

572 
uöt8
 
°©us
;

573 
uöt8
 
Æ¨mCode
;

574 
uöt16
 
˛u°îID
;

575 
uöt32
 
timeSèmp
;

577 } 
	tz˛Aœrm_t
;

581 
afAddrTy≥_t
 *
§cAddr
;

582 
uöt8
 
cmdID
;

586 
z˛Loˇti⁄Absﬁuã_t
 
absLoc
;

587 
z˛Loˇti⁄GëD©a_t
 
loc
;

588 
z˛Loˇti⁄DevCfg_t
 
devCfg
;

589 
uöt8
 *
õìAddr
;

590 } 
un
;

591 
uöt8
 
£qNum
;

592 } 
	tz˛Loˇti⁄_t
;

596 
afAddrTy≥_t
 *
§cAddr
;

597 
uöt8
 
cmdID
;

602 
z˛Loˇti⁄D©aR•_t
 
loc
;

603 
z˛Loˇti⁄DevCfgR•_t
 
devCfg
;

605 
uöt8
 
loˇti⁄Ty≥
;

606 } 
un
;

607 } 
	tz˛Loˇti⁄R•_t
;

612 (*
z˛GCB_BasicRe£t_t
)( );

617 (*
z˛GCB_Idítify_t
)–
	tz˛Idítify_t
 *
	tpCmd
 );

622 (*
z˛GCB_IdítifyQuîyR•_t
)–
	tz˛IdítifyQuîyR•_t
 *
	tpR•
 );

627 (*
z˛GCB_OnOff_t
)–
	tuöt8
 
	tcmd
 );

633 (*
z˛GCB_LevñC⁄åﬁMoveToLevñ_t
)–
	tz˛LCMoveToLevñ_t
 *
	tpCmd
 );

640 (*
z˛GCB_LevñC⁄åﬁMove_t
)–
	tz˛LCMove_t
 *
	tpCmd
 );

648 (*
z˛GCB_LevñC⁄åﬁSãp_t
)–
	tz˛LCSãp_t
 *
	tpCmd
 );

651 (*
z˛GCB_LevñC⁄åﬁSt›_t
)( );

665 (*
z˛GCB_GroupR•_t
)–
	tz˛GroupR•_t
 *
	tpR•
 );

673 
uöt8
 (*
	tz˛GCB_S˚√St‹eReq_t
)–
	tz˛S˚√Req_t
 *
	tpReq
 );

679 (*
z˛GCB_S˚√ReˇŒReq_t
)–
	tz˛S˚√Req_t
 *
	tpReq
 );

695 (*
z˛GCB_S˚√R•_t
)–
	tz˛S˚√R•_t
 *
	tpR•
 );

705 (*
z˛GCB_Aœrm_t
)–
	tz˛Aœrm_t
 *
	tpAœrm
 );

716 (*
z˛GCB_Loˇti⁄_t
)–
	tz˛Loˇti⁄_t
 *
	tpCmd
 );

728 (*
z˛GCB_Loˇti⁄R•_t
)–
	tz˛Loˇti⁄R•_t
 *
	tpR•
 );

734 
z˛GCB_BasicRe£t_t
 
p‚BasicRe£t
;

735 
z˛GCB_Idítify_t
 
p‚Idítify
;

736 
z˛GCB_IdítifyQuîyR•_t
 
p‚IdítifyQuîyR•
;

737 
z˛GCB_OnOff_t
 
p‚OnOff
;

738 
z˛GCB_LevñC⁄åﬁMoveToLevñ_t
 
p‚LevñC⁄åﬁMoveToLevñ
;

739 
z˛GCB_LevñC⁄åﬁMove_t
 
p‚LevñC⁄åﬁMove
;

740 
z˛GCB_LevñC⁄åﬁSãp_t
 
p‚LevñC⁄åﬁSãp
;

741 
z˛GCB_LevñC⁄åﬁSt›_t
 
p‚LevñC⁄åﬁSt›
;

742 
z˛GCB_GroupR•_t
 
p‚GroupR•
;

743 
z˛GCB_S˚√St‹eReq_t
 
p‚S˚√St‹eReq
;

744 
z˛GCB_S˚√ReˇŒReq_t
 
p‚S˚√ReˇŒReq
;

745 
z˛GCB_S˚√R•_t
 
p‚S˚√R•
;

746 
z˛GCB_Aœrm_t
 
p‚Aœrm
;

747 
z˛GCB_Loˇti⁄_t
 
p‚Loˇti⁄
;

748 
z˛GCB_Loˇti⁄R•_t
 
p‚Loˇti⁄R•
;

749 } 
	tz˛GíîÆ_AµCÆlbacks_t
;

754 #ifde‡
ZCL_BASIC


760 
	#z˛GíîÆ_SídBasicRe£tFa˘‹yDeÁu…s
(
a
,
b
,
c
,
d
Ë
	`z˛_SídComm™d
–◊), (b), 
ZCL_CLUSTER_ID_GEN_BASIC
, 
COMMAND_BASIC_RESET_FACT_DEFAULT
, 
TRUE
, 
ZCL_FRAME_CLIENT_SERVER_DIR
, (c), 0, (d), 0, 
NULL
 )

	)

763 #ifde‡
ZCL_IDENTIFY


769 
	#z˛GíîÆ_SídIdítifyQuîy
(
a
,
b
,
c
,
d
Ë
	`z˛_SídComm™d
–◊), (b), 
ZCL_CLUSTER_ID_GEN_IDENTIFY
, 
COMMAND_IDENTIFY_QUERY
, 
TRUE
, 
ZCL_FRAME_CLIENT_SERVER_DIR
, (c), 0, (d), 0, 
NULL
 )

	)

772 #ifde‡
ZCL_GROUPS


778 
	#z˛GíîÆ_SídGroupAdd
(
a
,
b
,
c
,
d
,
e
,
f
Ë
	`z˛GíîÆ_SídAddGroupReque°
–◊), (b), 
COMMAND_GROUP_ADD
, (c), (d), (e), (fË)

	)

785 
	#z˛GíîÆ_SídGroupVõw
(
a
,
b
,
c
,
d
,
e
Ë
	`z˛GíîÆ_SídGroupReque°
–◊), (b), 
COMMAND_GROUP_VIEW
, (c), (d), (eË)

	)

792 
	#z˛GíîÆ_SídGroupGëMembîshù
(
a
,
b
,
c
,
d
,
e
,
f
Ë
	`z˛GíîÆ_SídGroupGëMembîshùReque°
–◊), (b), 
COMMAND_GROUP_GET_MEMBERSHIP
, 
FALSE
, 
ZCL_FRAME_CLIENT_SERVER_DIR
, 0, (c), (d), (e), (fË)

	)

799 
	#z˛GíîÆ_SídGroupRemove
(
a
,
b
,
c
,
d
,
e
Ë
	`z˛GíîÆ_SídGroupReque°
–◊), (b), 
COMMAND_GROUP_REMOVE
, (c), (d), (eË)

	)

806 
	#z˛GíîÆ_SídGroupRemoveAŒ
(
a
,
b
,
c
,
d
Ë
	`z˛_SídComm™d
–◊), (b), 
ZCL_CLUSTER_ID_GEN_GROUPS
, 
COMMAND_GROUP_REMOVE_ALL
, 
TRUE
, 
ZCL_FRAME_CLIENT_SERVER_DIR
, (c), 0, (d), 0, 
NULL
 )

	)

813 
	#z˛GíîÆ_SídGroupAddIfIdítifyög
(
a
,
b
,
c
,
d
,
e
,
f
Ë
	`z˛GíîÆ_SídAddGroupReque°
–◊), (b), 
COMMAND_GROUP_ADD_IF_IDENTIFYING
, (c), (d), (e), (fË)

	)

820 
	#z˛GíîÆ_SídGroupAddRe•⁄£
(
a
,
b
,
c
,
d
,
e
,
f
Ë
	`z˛GíîÆ_SídGroupRe•⁄£
–◊), (b), 
COMMAND_GROUP_ADD_RSP
, (c), (d), (e), (fË)

	)

827 
	#z˛GíîÆ_SídGroupGëMembîshùRe•⁄£
(
a
,
b
,
c
,
d
,
e
,
f
,
g
Ë
	`z˛GíîÆ_SídGroupGëMembîshùReque°
–◊), (b), 
COMMAND_GROUP_GET_MEMBERSHIP_RSP
, 
TRUE
, 
ZCL_FRAME_SERVER_CLIENT_DIR
, (c), (d), (e), (f), (gË)

	)

834 
	#z˛GíîÆ_SídGroupRemoveRe•⁄£
(
a
,
b
,
c
,
d
,
e
,
f
Ë
	`z˛GíîÆ_SídGroupRe•⁄£
–◊), (b), 
COMMAND_GROUP_REMOVE_RSP
, (c), (d), (e), (fË)

	)

837 #ifde‡
ZCL_SCENES


843 
	#z˛GíîÆ_SídS˚√Võw
(
a
,
b
,
c
,
d
,
e
,
f
Ë
	`z˛GíîÆ_SídS˚√Reque°
–◊), (b), 
COMMAND_SCENE_VIEW
, (c), (d), (e), (fË)

	)

850 
	#z˛GíîÆ_SídS˚√Remove
(
a
,
b
,
c
,
d
,
e
,
f
Ë
	`z˛GíîÆ_SídS˚√Reque°
–◊), (b), 
COMMAND_SCENE_REMOVE
, (c), (d), (e), (fË)

	)

857 
	#z˛GíîÆ_SídS˚√St‹e
(
a
,
b
,
c
,
d
,
e
,
f
Ë
	`z˛GíîÆ_SídS˚√Reque°
–◊), (b), 
COMMAND_SCENE_STORE
, (c), (d), (e), (fË)

	)

864 
	#z˛GíîÆ_SídS˚√ReˇŒ
(
a
,
b
,
c
,
d
,
e
,
f
Ë
	`z˛GíîÆ_SídS˚√Reque°
–◊), (b), 
COMMAND_SCENE_RECALL
, (c), (d), (e), (fË)

	)

871 
	#z˛GíîÆ_SídS˚√RemoveAŒ
(
a
,
b
,
c
,
d
,
e
Ë
	`z˛GíîÆ_SídS˚√Reque°
–◊), (b), 
COMMAND_SCENE_REMOVE_ALL
, (c), 0, (d), (eË)

	)

878 
	#z˛GíîÆ_SídS˚√GëMembîshù
(
a
,
b
,
c
,
d
,
e
Ë
	`z˛GíîÆ_SídS˚√Reque°
–◊), (b), 
COMMAND_SCENE_GET_MEMBERSHIP
, (c), 0, (d), (eË)

	)

885 
	#z˛GíîÆ_SídS˚√AddRe•⁄£
(
a
,
b
,
c
,
d
,
e
,
f
,
g
Ë
	`z˛GíîÆ_SídS˚√Re•⁄£
–◊), (b), 
COMMAND_SCENE_ADD_RSP
, (c), (d), (e), (f), (gË)

	)

892 
	#z˛GíîÆ_SídS˚√RemoveRe•⁄£
(
a
,
b
,
c
,
d
,
e
,
f
,
g
Ë
	`z˛GíîÆ_SídS˚√Re•⁄£
–◊), (b), 
COMMAND_SCENE_REMOVE_RSP
, (c), (d), (e), (f), (gË)

	)

899 
	#z˛GíîÆ_SídS˚√RemoveAŒRe•⁄£
(
a
,
b
,
c
,
d
,
e
,
f
Ë
	`z˛GíîÆ_SídS˚√Re•⁄£
–◊), (b), 
COMMAND_SCENE_REMOVE_ALL_RSP
, (c), (d), 0, (e), (fË)

	)

906 
	#z˛GíîÆ_SídS˚√St‹eRe•⁄£
(
a
,
b
,
c
,
d
,
e
,
f
,
g
Ë
	`z˛GíîÆ_SídS˚√Re•⁄£
–◊), (b), 
COMMAND_SCENE_STORE_RSP
, (c), (d), (e), (f), (gË)

	)

909 #ifde‡
ZCL_ON_OFF


915 
	#z˛GíîÆ_SídOnOff_CmdOff
(
a
,
b
,
c
,
d
Ë
	`z˛_SídComm™d
–◊), (b), 
ZCL_CLUSTER_ID_GEN_ON_OFF
, 
COMMAND_OFF
, 
TRUE
, 
ZCL_FRAME_CLIENT_SERVER_DIR
, (c), 0, (d), 0, 
NULL
 )

	)

922 
	#z˛GíîÆ_SídOnOff_CmdOn
(
a
,
b
,
c
,
d
Ë
	`z˛_SídComm™d
–◊), (b), 
ZCL_CLUSTER_ID_GEN_ON_OFF
, 
COMMAND_ON
, 
TRUE
, 
ZCL_FRAME_CLIENT_SERVER_DIR
, (c), 0, (d), 0, 
NULL
 )

	)

929 
	#z˛GíîÆ_SídOnOff_CmdToggÀ
(
a
,
b
,
c
,
d
Ë
	`z˛_SídComm™d
–◊), (b), 
ZCL_CLUSTER_ID_GEN_ON_OFF
, 
COMMAND_TOGGLE
, 
TRUE
, 
ZCL_FRAME_CLIENT_SERVER_DIR
, (c), 0, (d), 0, 
NULL
 )

	)

932 #ifde‡
ZCL_LEVEL_CTRL


938 
	#z˛GíîÆ_SídLevñC⁄åﬁMoveToLevñ
(
a
,
b
,
c
,
d
,
e
,
f
Ë
	`z˛GíîÆ_SídLevñC⁄åﬁMoveToLevñReque°
–◊), (b), 
COMMAND_LEVEL_MOVE_TO_LEVEL
, (c), (d), (eË,(fË)

	)

945 
	#z˛GíîÆ_SídLevñC⁄åﬁMove
(
a
,
b
,
c
,
d
,
e
,
f
Ë
	`z˛GíîÆ_SídLevñC⁄åﬁMoveReque°
–◊), (b), 
COMMAND_LEVEL_MOVE
, (c), (d), (e), (fË)

	)

953 
	#z˛GíîÆ_SídLevñC⁄åﬁSãp
(
a
,
b
,
c
,
d
,
e
,
f
,
g
Ë
	`z˛GíîÆ_SídLevñC⁄åﬁSãpReque°
–◊), (b), 
COMMAND_LEVEL_STEP
, (c), (d), (e), (f), (gË)

	)

960 
	#z˛GíîÆ_SídLevñC⁄åﬁSt›
(
a
,
b
,
c
,
d
Ë
	`z˛_SídComm™d
–◊), (b), 
ZCL_CLUSTER_ID_GEN_LEVEL_CONTROL
, 
COMMAND_LEVEL_STOP
, 
TRUE
, 
ZCL_FRAME_CLIENT_SERVER_DIR
, (c), 0, (d), 0, 
NULL
 )

	)

967 
	#z˛GíîÆ_SídLevñC⁄åﬁMoveToLevñWôhOnOff
(
a
,
b
,
c
,
d
,
e
,
f
Ë
	`z˛GíîÆ_SídLevñC⁄åﬁMoveToLevñReque°
–◊), (b), 
COMMAND_LEVEL_MOVE_TO_LEVEL_WITH_ON_OFF
, (c), (d), (eË,(fË)

	)

974 
	#z˛GíîÆ_SídLevñC⁄åﬁMoveWôhOnOff
(
a
,
b
,
c
,
d
,
e
,
f
Ë
	`z˛GíîÆ_SídLevñC⁄åﬁMoveReque°
–◊), (b), 
COMMAND_LEVEL_MOVE_WITH_ON_OFF
, (c), (d), (e), (fË)

	)

982 
	#z˛GíîÆ_SídLevñC⁄åﬁSãpWôhOnOff
(
a
,
b
,
c
,
d
,
e
,
f
,
g
Ë
	`z˛GíîÆ_SídLevñC⁄åﬁSãpReque°
–◊), (b), 
COMMAND_LEVEL_STEP_WITH_ON_OFF
, (c), (d), (e), (f), (gË)

	)

989 
	#z˛GíîÆ_SídLevñC⁄åﬁSt›WôhOnOff
(
a
,
b
,
c
,
d
Ë
	`z˛_SídComm™d
–◊), (b), 
ZCL_CLUSTER_ID_GEN_LEVEL_CONTROL
, 
COMMAND_LEVEL_STOP_WITH_ON_OFF
, 
TRUE
, 
ZCL_FRAME_CLIENT_SERVER_DIR
, (c), 0, (d), 0, 
NULL
 )

	)

992 #ifde‡
ZCL_ALARMS


998 
	#z˛GíîÆ_SídAœrmRe£t
(
a
,
b
,
c
,
d
,
e
,
f
Ë
	`z˛GíîÆ_SídAœrmReque°
–◊), (b), 
COMMAND_ALARMS_RESET
, (c), (d), (e), (fË)

	)

1005 
	#z˛GíîÆ_SídAœrmRe£tAŒ
(
a
,
b
,
c
,
d
Ë
	`z˛_SídComm™d
–◊), (b), 
ZCL_CLUSTER_ID_GEN_ALARMS
, 
COMMAND_ALARMS_RESET_ALL
, 
TRUE
, 
ZCL_FRAME_CLIENT_SERVER_DIR
, (c), 0, (d), 0, 
NULL
 )

	)

1013 
	#z˛GíîÆ_SídAœrmGë
(
a
,
b
,
c
,
d
Ë
	`z˛_SídComm™d
–◊), (b), 
ZCL_CLUSTER_ID_GEN_ALARMS
, 
COMMAND_ALARMS_GET
, 
TRUE
, 
ZCL_FRAME_CLIENT_SERVER_DIR
, (c), 0, (d), 0, 
NULL
 )

	)

1020 
	#z˛GíîÆ_SídAœrmRe£tLog
(
a
,
b
,
c
,
d
Ë
	`z˛_SídComm™d
–◊), (b), 
ZCL_CLUSTER_ID_GEN_ALARMS
, 
COMMAND_ALARMS_RESET_LOG
, 
TRUE
, 
ZCL_FRAME_CLIENT_SERVER_DIR
, (c), 0, (d), 0, 
NULL
 )

	)

1027 
	#z˛GíîÆ_SídAœrm
(
a
,
b
,
c
,
d
,
e
,
f
Ë
	`z˛GíîÆ_SídAœrmReque°
–◊), (b), 
COMMAND_ALARMS_ALARM
, (c), (d), (e), (fË)

	)

1030 #ifde‡
ZCL_LOCATION


1036 
	#z˛GíîÆ_SídLoˇti⁄D©aRe•⁄£
(
a
,
b
,
c
,
d
,
e
Ë
	`z˛GíîÆ_SídLoˇti⁄D©a
–◊), (b), 
COMMAND_LOCATION_DATA_RSP
, ((c)->
°©us
), (&((c)->
d©a
)), (d), (eË)

	)

1043 
	#z˛GíîÆ_SídLoˇti⁄D©aNŸif
(
a
,
b
,
c
,
d
Ë
	`z˛GíîÆ_SídLoˇti⁄D©a
–◊), (b), 
COMMAND_LOCATION_DATA_NOTIF
, 0, (c), (dË)

	)

1050 
	#z˛GíîÆ_SídLoˇti⁄D©aCom∑˘NŸif
(
a
,
b
,
c
,
d
Ë
	`z˛GíîÆ_SídLoˇti⁄D©a
–◊), (b), 
COMMAND_LOCATION_DATA_COMPACT_NOTIF
, 0, (c), (dË)

	)

1057 
	#z˛GíîÆ_SídRSSIPög
(
a
,
b
,
c
,
d
,
e
Ë
	`z˛_SídComm™d
–◊), (b), 
ZCL_CLUSTER_ID_GEN_LOCATION
, 
COMMAND_LOCATION_RSSI_PING
, 
TRUE
, 
ZCL_FRAME_SERVER_CLIENT_DIR
, (d), 0, (e), 1, (cË)

	)

1067 
ZSètus_t
 
z˛GíîÆ_Regi°îCmdCÆlbacks
–
uöt8
 
ídpoöt
, 
z˛GíîÆ_AµCÆlbacks_t
 *
ˇŒbacks
 );

1069 #ifde‡
ZCL_LEVEL_CTRL


1076 
ZSètus_t
 
z˛GíîÆ_SídLevñC⁄åﬁMoveToLevñReque°
–
uöt8
 
§cEP
, 
afAddrTy≥_t
 *
d°Addr
,

1077 
uöt8
 
cmd
, uöt8 
Àvñ
, 
uöt16
 
å™sTime
,

1078 
uöt8
 
dißbÀDeÁu…R•
, uöt8 
£qNum
 );

1087 
ZSètus_t
 
z˛GíîÆ_SídLevñC⁄åﬁMoveReque°
–
uöt8
 
§cEP
, 
afAddrTy≥_t
 *
d°Addr
,

1088 
uöt8
 
cmd
, uöt8 
moveMode
, uöt8 
øã
,

1089 
uöt8
 
dißbÀDeÁu…R•
, uöt8 
£qNum
 );

1099 
ZSètus_t
 
z˛GíîÆ_SídLevñC⁄åﬁSãpReque°
–
uöt8
 
§cEP
, 
afAddrTy≥_t
 *
d°Addr
,

1100 
uöt8
 
cmd
, uöt8 
°ïMode
, uöt8 
°ïSize
, 
uöt16
 
å™sTime
,

1101 
uöt8
 
dißbÀDeÁu…R•
, uöt8 
£qNum
 );

1104 #ifde‡
ZCL_GROUPS


1110 
ZSètus_t
 
z˛GíîÆ_SídGroupRe•⁄£
–
uöt8
 
§cEP
, 
afAddrTy≥_t
 *
d°Addr
,

1111 
uöt8
 
cmd
, uöt8 
°©us
, 
uöt16
 
groupID
,

1112 
uöt8
 
dißbÀDeÁu…R•
, uöt8 
£qNum
 );

1117 
ZSètus_t
 
z˛GíîÆ_SídGroupVõwRe•⁄£
–
uöt8
 
§cEP
, 
afAddrTy≥_t
 *
d°Addr
,

1118 
uöt8
 
°©us
, 
≠s_Group_t
 *
gΩ
,

1119 
uöt8
 
dißbÀDeÁu…R•
, uöt8 
£qNum
 );

1124 
ZSètus_t
 
z˛GíîÆ_SídGroupGëMembîshùReque°
–
uöt8
 
§cEP
, 
afAddrTy≥_t
 *
d°Addr
,

1125 
uöt8
 
cmd
, uöt8 
r•Cmd
, uöt8 
dúe˘i⁄
, uöt8 
ˇ∑côy
,

1126 
uöt8
 
gΩC¡
, 
uöt16
 *
gΩLi°
, uöt8 
dißbÀDeÁu…R•
, uöt8 
£qNum
 );

1129 #ifde‡
ZCL_SCENES


1133 
ZSètus_t
 
z˛GíîÆ_AddS˚√
–
uöt8
 
ídpoöt
, 
z˛GíîÆ_S˚√_t
 *
s˚√
 );

1138 
z˛GíîÆ_S˚√_t
 *
z˛GíîÆ_FödS˚√
–
uöt8
 
ídpoöt
, 
uöt16
 
groupID
, uöt8 
s˚√ID
 );

1143 
uöt8
 
z˛GíîÆ_FödAŒS˚√sF‹Group
–uöt8 
ídpoöt
, 
uöt16
 
groupID
, uöt8 *
s˚√Li°
 );

1148 
uöt8
 
z˛GíîÆ_RemoveS˚√
–uöt8 
ídpoöt
, 
uöt16
 
groupID
, uöt8 
s˚√ID
 );

1153 
z˛GíîÆ_RemoveAŒS˚√s
–
uöt8
 
ídpoöt
, 
uöt16
 
groupID
 );

1158 
uöt8
 
z˛GíîÆ_Cou¡S˚√s
–uöt8 
ídpoöt
 );

1163 
uöt8
 
z˛GíîÆ_Cou¡AŒS˚√s
( );

1168 
ZSètus_t
 
z˛GíîÆ_SídAddS˚√
–
uöt8
 
§cEP
, 
afAddrTy≥_t
 *
d°Addr
,

1169 
z˛GíîÆ_S˚√_t
 *
s˚√
,

1170 
uöt8
 
dißbÀDeÁu…R•
, uöt8 
£qNum
 );

1174 
ZSètus_t
 
z˛GíîÆ_SídS˚√Reque°
–
uöt8
 
§cEP
, 
afAddrTy≥_t
 *
d°Addr
,

1175 
uöt8
 
cmd
, 
uöt16
 
groupID
, uöt8 
s˚√ID
,

1176 
uöt8
 
dißbÀDeÁu…R•
, uöt8 
£qNum
 );

1182 
ZSètus_t
 
z˛GíîÆ_SídS˚√Re•⁄£
–
uöt8
 
§cEP
, 
afAddrTy≥_t
 *
d°Addr
,

1183 
uöt8
 
cmd
, uöt8 
°©us
, 
uöt16
 
groupID
,

1184 
uöt8
 
s˚√ID
, uöt8 
dißbÀDeÁu…R•
, uöt8 
£qNum
 );

1189 
ZSètus_t
 
z˛GíîÆ_SídS˚√VõwRe•⁄£
–
uöt8
 
§cEP
, 
afAddrTy≥_t
 *
d°Addr
,

1190 
uöt8
 
°©us
, 
z˛GíîÆ_S˚√_t
 *
s˚√
,

1191 
uöt8
 
dißbÀDeÁu…R•
, uöt8 
£qNum
 );

1196 
ZSètus_t
 
z˛GíîÆ_SídS˚√GëMembîshùRe•⁄£
–
uöt8
 
§cEP
, 
afAddrTy≥_t
 *
d°Addr
,

1197 
uöt8
 
s˚√Sètus
, uöt8 
ˇ∑côy
, uöt8 
s˚√C¡
, uöt8 *
s˚√Li°
,

1198 
uöt16
 
groupID
, 
uöt8
 
dißbÀDeÁu…R•
, uöt8 
£qNum
 );

1201 #ifde‡
ZCL_GROUPS


1205 
ZSètus_t
 
z˛GíîÆ_SídGroupReque°
–
uöt8
 
§cEP
, 
afAddrTy≥_t
 *
d°Addr
,

1206 
uöt8
 
cmd
, 
uöt16
 
groupID
,

1207 
uöt8
 
dißbÀDeÁu…R•
, uöt8 
£qNum
 );

1215 
ZSètus_t
 
z˛GíîÆ_SídAddGroupReque°
–
uöt8
 
§cEP
, 
afAddrTy≥_t
 *
d°Addr
,

1216 
uöt8
 
cmd
, 
uöt16
 
groupID
, uöt8 *
groupName
,

1217 
uöt8
 
dißbÀDeÁu…R•
, uöt8 
£qNum
 );

1220 #ifde‡
ZCL_IDENTIFY


1224 
ZSètus_t
 
z˛GíîÆ_SídIdítify
–
uöt8
 
§cEP
, 
afAddrTy≥_t
 *
d°Addr
,

1225 
uöt16
 
idítifyTime
, 
uöt8
 
dißbÀDeÁu…R•
, uöt8 
£qNum
 );

1229 
ZSètus_t
 
z˛GíîÆ_SídIdítifyQuîyRe•⁄£
–
uöt8
 
§cEP
, 
afAddrTy≥_t
 *
d°Addr
,

1230 
uöt16
 
timeout
, 
uöt8
 
dißbÀDeÁu…R•
, uöt8 
£qNum
 );

1233 #ifde‡
ZCL_ALARMS


1237 
ZSètus_t
 
z˛GíîÆ_SídAœrmReque°
–
uöt8
 
§cEP
, 
afAddrTy≥_t
 *
d°Addr
,

1238 
uöt8
 
cmd
, uöt8 
Æ¨mCode
, 
uöt16
 
˛u°îID
,

1239 
uöt8
 
dißbÀDeÁu…R•
, uöt8 
£qNum
 );

1244 
ZSètus_t
 
z˛GíîÆ_SídAœrmGëRe•no£
–
uöt8
 
§cEP
, 
afAddrTy≥_t
 *
d°Addr
,

1245 
uöt8
 
°©us
, uöt8 
Æ¨mCode
, 
uöt16
 
˛u°îID
,

1246 
uöt32
 
timeSèmp
, 
uöt8
 
dißbÀDeÁu…R•
, uöt8 
£qNum
 );

1249 #ifde‡
ZCL_LOCATION


1253 
ZSètus_t
 
z˛GíîÆ_SídLoˇti⁄SëAbsﬁuã
–
uöt8
 
§cEP
, 
afAddrTy≥_t
 *
d°Addr
,

1254 
z˛Loˇti⁄Absﬁuã_t
 *
absLoc
,

1255 
uöt8
 
dißbÀDeÁu…R•
, uöt8 
£qNum
 );

1260 
ZSètus_t
 
z˛GíîÆ_SídLoˇti⁄SëDevCfg
–
uöt8
 
§cEP
, 
afAddrTy≥_t
 *
d°Addr
,

1261 
z˛Loˇti⁄DevCfg_t
 *
devCfg
,

1262 
uöt8
 
dißbÀDeÁu…R•
, uöt8 
£qNum
 );

1267 
ZSètus_t
 
z˛GíîÆ_SídLoˇti⁄GëDevCfg
–
uöt8
 
§cEP
, 
afAddrTy≥_t
 *
d°Addr
,

1268 
uöt8
 *
èrgëAddr
, uöt8 
dißbÀDeÁu…R•
, uöt8 
£qNum
 );

1273 
ZSètus_t
 
z˛GíîÆ_SídLoˇti⁄GëD©a
–
uöt8
 
§cEP
, 
afAddrTy≥_t
 *
d°Addr
,

1274 
z˛Loˇti⁄GëD©a_t
 *
locD©a
,

1275 
uöt8
 
dißbÀDeÁu…R•
, uöt8 
£qNum
 );

1280 
ZSètus_t
 
z˛GíîÆ_SídLoˇti⁄DevCfgRe•⁄£
–
uöt8
 
§cEP
, 
afAddrTy≥_t
 *
d°Addr
,

1281 
z˛Loˇti⁄DevCfgR•_t
 *
devCfg
,

1282 
uöt8
 
dißbÀDeÁu…R•
, uöt8 
£qNum
 );

1288 
ZSètus_t
 
z˛GíîÆ_SídLoˇti⁄D©a
–
uöt8
 
§cEP
, 
afAddrTy≥_t
 *
d°Addr
, uöt8 
cmd
,

1289 
uöt8
 
°©us
, 
z˛Loˇti⁄D©a_t
 *
locD©a
,

1290 
uöt8
 
dißbÀDeÁu…R•
, uöt8 
£qNum
 );

1293 #ifde‡
ZCL_ALARMS


1297 
ZSètus_t
 
z˛GíîÆ_AddAœrm
–
uöt8
 
ídpoöt
, 
z˛GíîÆ_Aœrm_t
 *
Æ¨m
 );

1302 
z˛GíîÆ_Aœrm_t
 *
z˛GíîÆ_FödAœrm
–
uöt8
 
ídpoöt
, uöt8 
Æ¨mCode
, 
uöt16
 
˛u°îID
 );

1307 
z˛GíîÆ_Aœrm_t
 *
z˛GíîÆ_FödE¨lõ°Aœrm
–
uöt8
 
ídpoöt
 );

1312 
z˛GíîÆ_Re£tAœrm
–
uöt8
 
ídpoöt
, uöt8 
Æ¨mCode
, 
uöt16
 
˛u°îID
 );

1317 
z˛GíîÆ_Re£tAŒAœrms
–
uöt8
 
ídpoöt
, uöt8 
nŸifyAµ
 );

1323 #ifde‡
__˝lu•lus


	@Components/stack/zcl/zcl_hvac.c

44 
	~"ZComDef.h
"

45 
	~"OSAL.h
"

46 
	~"z˛.h
"

47 
	~"z˛_gíîÆ.h
"

48 
	~"z˛_hvac.h
"

50 #i‡
deföed
 ( 
INTER_PAN
 )

51 
	~"°ub_≠s.h
"

65 
	sz˛HVACCBRec


67 
z˛HVACCBRec
 *
	m√xt
;

68 
uöt8
 
	mídpoöt
;

69 
z˛HVAC_AµCÆlbacks_t
 *
	mCBs
;

70 } 
	tz˛HVACCBRec_t
;

83 
z˛HVACCBRec_t
 *
	gz˛HVACCBs
 = (z˛HVACCBRec_à*)
NULL
;

84 
uöt8
 
	gz˛HVACPlugöRegi°ed
 = 
FALSE
;

90 
ZSètus_t
 
z˛HVAC_HdlIncomög
–
z˛Incomög_t
 *
pInMsg
 );

91 
ZSètus_t
 
z˛HVAC_HdlInS≥cificComm™ds
–
z˛Incomög_t
 *
pInMsg
 );

92 
z˛HVAC_AµCÆlbacks_t
 *
z˛HVAC_FödCÆlbacks
–
uöt8
 
ídpoöt
 );

94 
ZSètus_t
 
z˛HVAC_Pro˚ssInPumpCmds
–
z˛Incomög_t
 *
pInMsg
 );

95 
ZSètus_t
 
z˛HVAC_Pro˚ssInThîmo°©Cmds
–
z˛Incomög_t
 *
pInMsg
, 
z˛HVAC_AµCÆlbacks_t
 *
pCBs
 );

107 
ZSètus_t
 
	$z˛HVAC_Regi°îCmdCÆlbacks
–
uöt8
 
ídpoöt
, 
z˛HVAC_AµCÆlbacks_t
 *
ˇŒbacks
 )

109 
z˛HVACCBRec_t
 *
pNewIãm
;

110 
z˛HVACCBRec_t
 *
pLo›
;

113 i‡–!
z˛HVACPlugöRegi°ed
 )

115 
	`z˛_ªgi°îPlugö
–
ZCL_CLUSTER_ID_HVAC_PUMP_CONFIG_CONTROL
,

116 
ZCL_CLUSTER_ID_HAVC_USER_INTERFACE_CONFIG
,

117 
z˛HVAC_HdlIncomög
 );

118 
z˛HVACPlugöRegi°ed
 = 
TRUE
;

122 
pNewIãm
 = 
	`oßl_mem_Æloc
––
z˛HVACCBRec_t
 ) );

123 i‡–
pNewIãm
 =
NULL
 )

124  (
ZMemEº‹
);

126 
pNewIãm
->
√xt
 = (
z˛HVACCBRec_t
 *)
NULL
;

127 
pNewIãm
->
ídpoöt
 =Éndpoint;

128 
pNewIãm
->
CBs
 = 
ˇŒbacks
;

131 i‡–
z˛HVACCBs
 =
NULL
 )

133 
z˛HVACCBs
 = 
pNewIãm
;

138 
pLo›
 = 
z˛HVACCBs
;

139  
pLo›
->
√xt
 !
NULL
 )

140 
pLo›
 =ÖLo›->
√xt
;

143 
pLo›
->
√xt
 = 
pNewIãm
;

145  ( 
ZSuc˚ss
 );

146 
	}
}

161 
ZSètus_t
 
	$z˛HVAC_SídSëpoötRai£Lowî
–
uöt8
 
§cEP
, 
afAddrTy≥_t
 *
d°Addr
,

162 
uöt8
 
mode
, uöt8 
amou¡
,

163 
uöt8
 
dißbÀDeÁu…R•
, uöt8 
£qNum
 )

165 
uöt8
 
buf
[2];

167 
buf
[0] = 
mode
;

168 
buf
[1] = 
amou¡
;

170  
	`z˛_SídComm™d
–
§cEP
, 
d°Addr
, 
ZCL_CLUSTER_ID_HAVC_THERMOSTAT
,

171 
COMMAND_THERMOSTAT_SETPOINT_RAISE_LOWER
, 
TRUE
,

172 
ZCL_FRAME_CLIENT_SERVER_DIR
, 
dißbÀDeÁu…R•
, 0, 
£qNum
, 2, 
buf
 );

173 
	}
}

184 
z˛HVAC_AµCÆlbacks_t
 *
	$z˛HVAC_FödCÆlbacks
–
uöt8
 
ídpoöt
 )

186 
z˛HVACCBRec_t
 *
pCBs
;

187 
pCBs
 = 
z˛HVACCBs
;

188  
pCBs
 )

190 i‡–
pCBs
->
ídpoöt
 ==Éndpoint )

191  ( 
pCBs
->
CBs
 );

192 
pCBs
 =ÖCBs->
√xt
;

194  ( (
z˛HVAC_AµCÆlbacks_t
 *)
NULL
 );

195 
	}
}

208 
ZSètus_t
 
	$z˛HVAC_HdlIncomög
–
z˛Incomög_t
 *
pInMsg
 )

210 
ZSètus_t
 
°©
 = 
ZSuc˚ss
;

212 #i‡
	`deföed
 ( 
INTER_PAN
 )

213 i‡–
	`StubAPS_I¡îP™
–
pInMsg
->
msg
->
§cAddr
.
∑nId
,ÖInMsg->msg->§cAddr.
ídPoöt
 ) )

214  ( 
°©
 );

216 i‡–
	`z˛_Clu°îCmd
–
pInMsg
->
hdr
.
fc
.
ty≥
 ) )

219 i‡–
pInMsg
->
hdr
.
fc
.
m™uS≥cific
 == 0 )

221 
°©
 = 
	`z˛HVAC_HdlInS≥cificComm™ds
–
pInMsg
 );

226 
°©
 = 
ZFaûuª
;

232 
°©
 = 
ZFaûuª
;

234  ( 
°©
 );

235 
	}
}

247 
ZSètus_t
 
	$z˛HVAC_HdlInS≥cificComm™ds
–
z˛Incomög_t
 *
pInMsg
 )

249 
ZSètus_t
 
°©
 = 
ZSuc˚ss
;

250 
z˛HVAC_AµCÆlbacks_t
 *
pCBs
;

253 
pCBs
 = (*)
	`z˛HVAC_FödCÆlbacks
–
pInMsg
->
msg
->
ídPoöt
 );

254 i‡–
pCBs
 =
NULL
 )

255  ( 
ZFaûuª
 );

257  
pInMsg
->
msg
->
˛u°îId
 )

259 
ZCL_CLUSTER_ID_HVAC_PUMP_CONFIG_CONTROL
:

260 
°©
 = 
	`z˛HVAC_Pro˚ssInPumpCmds
–
pInMsg
 );

263 
ZCL_CLUSTER_ID_HAVC_THERMOSTAT
:

264 
°©
 = 
	`z˛HVAC_Pro˚ssInThîmo°©Cmds
–
pInMsg
, 
pCBs
 );

268 
°©
 = 
ZFaûuª
;

272  ( 
°©
 );

273 
	}
}

285 
ZSètus_t
 
	$z˛HVAC_Pro˚ssInPumpCmds
–
z˛Incomög_t
 *
pInMsg
 )

287 
ZSètus_t
 
°©
 = 
ZFaûuª
;

292 ()
pInMsg
;

293 i‡–
°©
 !
ZFaûuª
 )

294 
	`z˛HVAC_FödCÆlbacks
( 0 );

296  ( 
°©
 );

297 
	}
}

309 
ZSètus_t
 
	$z˛HVAC_Pro˚ssInThîmo°©Cmds
–
z˛Incomög_t
 *
pInMsg
,

310 
z˛HVAC_AµCÆlbacks_t
 *
pCBs
 )

312 i‡–
pInMsg
->
hdr
.
comm™dID
 !
COMMAND_THERMOSTAT_SETPOINT_RAISE_LOWER
 )

313  (
ZFaûuª
);

315 i‡–
pCBs
->
p‚HVAC_SëpoötRai£Lowî
 )

317 
z˛CmdThîmo°©SëpoötRai£LowîPaylﬂd_t
 
cmd
;

319 
cmd
.
mode
 = 
pInMsg
->
pD©a
[0];

320 
cmd
.
amou¡
 = 
pInMsg
->
pD©a
[1];

322 
pCBs
->
	`p‚HVAC_SëpoötRai£Lowî
–&
cmd
 );

325  ( 
ZSuc˚ss
 );

326 
	}
}

	@Components/stack/zcl/zcl_hvac.h

40 #i‚de‡
ZCL_HVAC_H


41 
	#ZCL_HVAC_H


	)

43 #ifde‡
__˝lu•lus


51 
	~"z˛.h
"

61 
	#ATTRID_HVAC_PUMP_MAX_PRESSURE
 0x0000

	)

62 
	#ATTRID_HVAC_PUMP_MAX_SPEED
 0x0001

	)

63 
	#ATTRID_HVAC_PUMP_MAX_FLOW
 0x0002

	)

64 
	#ATTRID_HVAC_PUMP_MIN_CONST_PRESSURE
 0x0003

	)

65 
	#ATTRID_HVAC_PUMP_MAX_CONST_PRESSURE
 0x0004

	)

66 
	#ATTRID_HVAC_PUMP_MIN_COMP_PRESSURE
 0x0005

	)

67 
	#ATTRID_HVAC_PUMP_MAX_COMP_PRESSURE
 0x0006

	)

68 
	#ATTRID_HVAC_PUMP_MIN_CONST_SPEED
 0x0007

	)

69 
	#ATTRID_HVAC_PUMP_MAX_CONST_SPEED
 0x0008

	)

70 
	#ATTRID_HVAC_PUMP_MIN_CONST_FLOW
 0x0009

	)

71 
	#ATTRID_HVAC_PUMP_MAX_CONST_FLOW
 0x000A

	)

72 
	#ATTRID_HVAC_PUMP_MIN_CONST_TEMP
 0x000B

	)

73 
	#ATTRID_HVAC_PUMP_MAX_CONST_TEMP
 0x000C

	)

75 
	#ATTRID_HVAC_PUMP_STATUS
 0x0010

	)

76 
	#ATTRID_HVAC_PUMP_EFECTIVE_OPERATION_MODE
 0x0011

	)

77 
	#ATTRID_HVAC_PUMP_EFFECTIVE_CONTROL_MODE
 0x0012

	)

78 
	#ATTRID_HVAC_PUMP_CAPACITY
 0x0013

	)

79 
	#ATTRID_HVAC_PUMP_SPEED
 0x0014

	)

80 
	#ATTRID_HVAC_PUMP_LIFETIME_RUNNING_HOURS
 0x0015

	)

81 
	#ATTRID_HVAC_PUMP_POWER
 0x0016

	)

82 
	#ATTRID_HVAC_LIFETIME_ENERGY_CONSUMED
 0x0017

	)

84 
	#HVAC_PUMP_DEVICE_FAULT
 0x0000

	)

85 
	#HVAC_PUMP_SUPPLY_FAULT
 0x0001

	)

86 
	#HVAC_PUMP_SPEED_LOW
 0x0002

	)

87 
	#HVAC_PUMP_SPEED_HIGH
 0x0003

	)

88 
	#HVAC_PUMP_LOCAL_OVERRIDE
 0x0004

	)

89 
	#HVAC_PUMP_RUNNING
 0x0005

	)

90 
	#HVAC_PUMP_REMOTE_PRESSURE
 0x0006

	)

91 
	#HVAC_PUMP_REMOTE_FLOW
 0x0007

	)

92 
	#HVAC_PUMP_REMOTE_TEMPERATURE
 0x0008

	)

94 
	#ATTRID_HVAC_PUMP_OPERATION_MODE
 0x0020

	)

95 
	#ATTRID_HVAC_PUMP_CONTROL_MODE
 0x0021

	)

96 
	#ATTRID_HVAC_PUMP_ALARM_MASK
 0x0022

	)

100 
	#HVAC_PUMP_OPERATION_MODE_NORMAL
 0x00

	)

101 
	#HVAC_PUMP_OPERATION_MODE_MINIMUM
 0x01

	)

102 
	#HVAC_PUMP_OPERATION_MODE_MAXIMUM
 0x02

	)

103 
	#HVAC_PUMP_OPERATION_MODE_LOCAL
 0x03

	)

105 
	#HVAC_PUMP_CONTROL_MODE_CONSTANT_SPEED
 0x00

	)

106 
	#HVAC_PUMP_CONTROL_MODE_CONSTANT_PRESSURE
 0x01

	)

107 
	#HVAC_PUMP_CONTROL_MODE_PR0PORTIONAL_PRESSURE
 0x02

	)

108 
	#HVAC_PUMP_CONTROL_MODE_CONSTANT_FLOW
 0x03

	)

109 
	#HVAC_PUMP_CONTROL_MODE_CONSTANT_TEMPERATURE
 0x05

	)

110 
	#HVAC_PUMP_CONTROL_MODE_CONSTANT_AUTOMATIC
 0x07

	)

112 
	#HVAC_PUMP_SUPPLY_VOLTAGE_TOO_LOW
 0x0001

	)

113 
	#HVAC_PUMP_SUPPLY_VOLTAGE_TOO_HIGH
 0x0002

	)

114 
	#HVAC_PUMP_POWER_MISSING_PHASE
 0x0004

	)

115 
	#HVAC_PUMP_SYSTEM_PRESSURE_TOO_LOW
 0x0008

	)

116 
	#HVAC_PUMP_SYSTEM_PRESSURE_TOO_HIGH
 0x0010

	)

117 
	#HVAC_PUMP_DRY_RUNNING
 0x0020

	)

118 
	#HVAC_PUMP_MOTOR_TEMPERATURE_TOO_HIGH
 0x0040

	)

119 
	#HVAC_PUMP_MOTOR_HAS_FATAL_FAILURE
 0x0080

	)

120 
	#HVAC_PUMP_ELECTRONIC_TEMPERATURE_TOO_HIGH
 0x0100

	)

121 
	#HVAC_PUMP_BLOCKED
 0x0200

	)

122 
	#HVAC_PUMP_SENSOR_FAILURE
 0x0400

	)

123 
	#HVAC_PUMP_ELECTRONIC_NON_FATAL_FAILURE
 0x0800

	)

124 
	#HVAC_PUMP_ELECTRONIC_FATAL_FAILURE
 0x1000

	)

125 
	#HVAC_PUMP_GENERAL_FAULT
 0x2000

	)

136 
	#ATTRID_HVAC_THERMOSTAT_LOCAL_TEMPERATURE
 0x0000

	)

137 
	#ATTRID_HVAC_THERMOSTAT_OUTDOOR_TEMPERATURE
 0x0001

	)

138 
	#ATTRID_HVAC_THERMOSTAT_OCCUPANCY
 0x0002

	)

139 
	#ATTRID_HVAC_THERMOSTAT_ABS_MIN_HEAT_SETPOINT_LIMIT
 0x0003

	)

140 
	#ATTRID_HVAC_THERMOSTAT_ABS_MAX_HEAT_SETPOINT_LIMIT
 0x0004

	)

141 
	#ATTRID_HVAC_THERMOSTAT_ABS_MIN_COOL_SETPOINT_LIMIT
 0x0005

	)

142 
	#ATTRID_HVAC_THERMOSTAT_ABS_MAX_COOL_SETPOINT_LIMIT
 0x0006

	)

143 
	#ATTRID_HVAC_THERMOSTAT_PI_COOLING_DEMAND
 0x0007

	)

144 
	#ATTRID_HVAC_THERMOSTAT_PI_HEATING_DEMAND
 0x0008

	)

147 
	#ATTRID_HVAC_THERMOSTAT_LOCAL_TEMP_CALIBRATION
 0x0010

	)

148 
	#ATTRID_HVAC_THERMOSTAT_OCCUPIED_COOLING_SETPOINT
 0x0011

	)

149 
	#ATTRID_HVAC_THERMOSTAT_OCCUPIED_HEATING_SETPOINT
 0x0012

	)

150 
	#ATTRID_HVAC_THERMOSTAT_UNOCCUPIED_COOLING_SETPOINT
 0x0013

	)

151 
	#ATTRID_HVAC_THERMOSTAT_UNOCCUPIED_HEATING_SETPOINT
 0x0014

	)

152 
	#ATTRID_HVAC_THERMOSTAT_MIN_HEAT_SETPOINT_LIMIT
 0x0015

	)

153 
	#ATTRID_HVAC_THERMOSTAT_MAX_HEAT_SETPOINT_LIMIT
 0x0016

	)

154 
	#ATTRID_HVAC_THERMOSTAT_MIN_COOL_SETPOINT_LIMIT
 0x0017

	)

155 
	#ATTRID_HVAC_THERMOSTAT_MAX_COOL_SETPOINT_LIMIT
 0x0018

	)

156 
	#ATTRID_HVAC_THERMOSTAT_MIN_SETPOINT_DEAD_BAND
 0x0019

	)

157 
	#ATTRID_HVAC_THERMOSTAT_REMOTE_SENSING
 0x001A

	)

158 
	#ATTRID_HVAC_THERMOSTAT_CTRL_SEQ_OF_OPER
 0x001B

	)

159 
	#ATTRID_HVAC_THERMOSTAT_SYSTEM_MODE
 0x001C

	)

160 
	#ATTRID_HVAC_THERMOSTAT_ALAM_MASK
 0x001D

	)

162 
	#HVAC_THERMOSTAT_REMOTE_SENSING_LOCAL_TEMPERATURE
 0x0001

	)

163 
	#HVAC_THERMOSTAT_REMOTE_SENSING_OUTDOOR_TEMPERATURE
 0x0002

	)

164 
	#HVAC_THERMOSTAT_REMOTE_SENSING_OCCUPANCY
 0x0004

	)

166 
	#HVAC_THERMOSTAT_CTRL_SEQ_OF_OPER_COOLING_ONLY
 0x00

	)

167 
	#HVAC_THERMOSTAT_CTRL_SEQ_OF_OPER_COOLING_WITH_REHEAT
 0x01

	)

168 
	#HVAC_THERMOSTAT_CTRL_SEQ_OF_OPER_HEATING_ONLY
 0x02

	)

169 
	#HVAC_THERMOSTAT_CTRL_SEQ_OF_OPER_HEATING_WITH_REHEAT
 0x03

	)

170 
	#HVAC_THERMOSTAT_CTRL_SEQ_OF_OPER_COOLING_HEATING
 0x04

	)

171 
	#HVAC_THERMOSTAT_CTRL_SEQ_OF_OPER_COOLING_HEATING_WITH_REHEAT
 0x05

	)

173 
	#HVAC_THERMOSTAT_SYSTEM_MODE_OFF
 0x00

	)

174 
	#HVAC_THERMOSTAT_SYSTEM_MODE_AUTO
 0x01

	)

175 
	#HVAC_THERMOSTAT_SYSTEM_MODE_COOL
 0x03

	)

176 
	#HVAC_THERMOSTAT_SYSTEM_MODE_HEAT
 0x04

	)

177 
	#HVAC_THERMOSTAT_SYSTEM_MODE_EMERGENCY_HEATING
 0x05

	)

178 
	#HVAC_THERMOSTAT_SYSTEM_MODE_PRECOOLING
 0x06

	)

179 
	#HVAC_THERMOSTAT_SYSTEM_MODE_FAN_ONLY
 0x07

	)

181 
	#HVAC_THERMOSTAT_INITIALIZATION_FAILURE
 0x01

	)

182 
	#HVAC_THERMOSTAT_HARDWARE_FAILURE
 0x02

	)

183 
	#HVAC_THERMOSTAT_SELF_CALIBRATION_FAILURE
 0x03

	)

186 
	#COMMAND_THERMOSTAT_SETPOINT_RAISE_LOWER
 0x00

	)

189 
	#HVAC_THERMOSTAT_MODE_HEAT
 0x00

	)

190 
	#HVAC_THERMOSTAT_MODE_COOL
 0x01

	)

191 
	#HVAC_THERMOSTAT_MODE_BOTH
 0x02

	)

197 
	#ATTRID_HVAC_FAN_CTRL_FAN_MODE
 0x0000

	)

198 
	#ATTRID_HVAC_FAN_CTRL_FAN_SEQUENCE
 0x0001

	)

200 
	#HVAC_FAN_CTRL_FAN_MODE_OFF
 0x00

	)

201 
	#HVAC_FAN_CTRL_FAN_MODE_LOW
 0x01

	)

202 
	#HVAC_FAN_CTRL_FAN_MODE_MEDIUM
 0x02

	)

203 
	#HVAC_FAN_CTRL_FAN_MODE_HIGH
 0x03

	)

204 
	#HVAC_FAN_CTRL_FAN_MODE_ON
 0x04

	)

205 
	#HVAC_FAN_CTRL_FAN_MODE_AUTO
 0x05

	)

206 
	#HVAC_FAN_CTRL_FAN_MODE_SMART
 0x06

	)

208 
	#HVAC_FAN_CTRL_FAN_MODE_SEQ_LOW_MED_HI
 0x00

	)

209 
	#HVAC_FAN_CTRL_FAN_MODE_SEQ_LOW_HI
 0x01

	)

210 
	#HVAC_FAN_CTRL_FAN_MODE_SEQ_LOW_MED_HI_AUTO
 0x02

	)

211 
	#HVAC_FAN_CTRL_FAN_MODE_SEQ_LOW_HI_AUTO
 0x03

	)

212 
	#HVAC_FAN_CTRL_FAN_MODE_SEQ_ON_AUTO
 0x04

	)

218 
	#ATTRID_HVAC_DEHUMIDIFICATION_CTRL_RELATIVE_HUMIDITY
 0x0000

	)

219 
	#ATTRID_HVAC_DEHUMIDIFICATION_CTRL_DEHUMID_COOLING
 0x0001

	)

222 
	#ATTRID_HVAC_DEHUMIDIFICATION_CTRL_RHDEHUMID_SETPOINT
 0x0010

	)

223 
	#ATTRID_HVAC_DEHUMIDIFICATION_CTRL_RELATIVE_HUMIDITY_MODE
 0x0011

	)

224 
	#ATTRID_HVAC_DEHUMIDIFICATION_CTRL_DEHUMID_LOCKOUT
 0x0012

	)

225 
	#ATTRID_HVAC_DEHUMIDIFICATION_CTRL_DEHUMID_HYSTERESIS
 0x0013

	)

226 
	#ATTRID_HVAC_DEHUMIDIFICATION_CTRL_DEHUMID_MAX_COOL
 0x0014

	)

227 
	#ATTRID_HVAC_DEHUMIDIFICATION_CTRL_RELATIVE_HUMIDITY_DISPLAY
 0x0015

	)

229 
	#HVAC_DEHUMIDIFICATION_CTRL_RELATIVE_HUMIDITY_MEASURED_LOCALLY
 0x00

	)

230 
	#HVAC_DEHUMIDIFICATION_CTRL_RELATIVE_HUMIDITY_UPDATED_OVER_NET
 0x00

	)

232 
	#HVAC_DEHUMIDIFICATION_CTRL_DEHIMID_NOT_ALLOWED
 0x00

	)

233 
	#HVAC_DEHUMIDIFICATION_CTRL_DEHIMID_ALLOWED
 0x01

	)

235 
	#HVAC_DEHUMIDIFICATION_CTRL_RELATIVE_HUMIDITY_NOT_DISPLAYED
 0x00

	)

236 
	#HVAC_DEHUMIDIFICATION_CTRL_RELATIVE_HUMIDITY_DISPLAYED
 0x01

	)

242 
	#ATTRID_HVAC_THERMOSTAT_UI_CONFIG_TEMP_DISPLAY_MODE
 0x0000

	)

243 
	#ATTRID_HVAC_THERMOSTAT_UI_CONFIG_KEYPAD_LOCKOUT
 0x0001

	)

245 
	#ATTRID_HVAC_THERMOSTAT_UI_CONFIG_DISPLAY_MODE_IN_C
 0x00

	)

246 
	#ATTRID_HVAC_THERMOSTAT_UI_CONFIG_DISPLAY_MODE_IN_F
 0x01

	)

249 
	#ATTRID_HVAC_THERMOSTAT_UI_KEYPAD_NO_LOCOUT
 0x00

	)

250 
	#ATTRID_HVAC_THERMOSTAT_UI_KEYPAD_LEVEL1_LOCOUT
 0x01

	)

251 
	#ATTRID_HVAC_THERMOSTAT_UI_KEYPAD_LEVEL2_LOCOUT
 0x02

	)

252 
	#ATTRID_HVAC_THERMOSTAT_UI_KEYPAD_LEVEL3_LOCOUT
 0x03

	)

253 
	#ATTRID_HVAC_THERMOSTAT_UI_KEYPAD_LEVEL4_LOCOUT
 0x04

	)

254 
	#ATTRID_HVAC_THERMOSTAT_UI_KEYPAD_LEVEL5_LOCOUT
 0x05

	)

273 
uöt8
 
mode
;

274 
uöt8
 
amou¡
;

275 } 
	tz˛CmdThîmo°©SëpoötRai£LowîPaylﬂd_t
;

280 (*
z˛HVAC_SëpoötRai£Lowî_t
)–
	tz˛CmdThîmo°©SëpoötRai£LowîPaylﬂd_t
 *
	tpCmd
 );

286 
z˛HVAC_SëpoötRai£Lowî_t
 
p‚HVAC_SëpoötRai£Lowî
;

287 } 
	tz˛HVAC_AµCÆlbacks_t
;

301 
ZSètus_t
 
z˛HVAC_Regi°îCmdCÆlbacks
–
uöt8
 
ídpoöt
, 
z˛HVAC_AµCÆlbacks_t
 *
ˇŒbacks
 );

306 
ZSètus_t
 
z˛HVAC_SídSëpoötRai£Lowî
–
uöt8
 
§cEP
, 
afAddrTy≥_t
 *
d°Addr
,

307 
uöt8
 
mode
, uöt8 
amou¡
,

308 
uöt8
 
dißbÀDeÁu…R•
, uöt8 
£qNum
 );

313 #ifde‡
__˝lu•lus


	@Components/stack/zcl/zcl_key_establish.c

46 
	~"ZComDef.h
"

47 
	~"OSAL.h
"

48 
	~"OSAL_Nv.h
"

49 
	~"z˛.h
"

50 
	~"ZDAµ.h
"

51 
	~"s•_hash.h
"

52 
	~"AddrMgr.h
"

53 
	~"ZDSecMgr.h
"

54 
	~"APSMEDE.h
"

55 
	~"ecˇpi.h
"

56 
	~"z˛_key_e°ablish.h
"

57 
	~"DebugTø˚.h
"

58 
	~"£.h
"

60 #i‡
deföed
 ( 
INTER_PAN
 )

61 
	~"°ub_≠s.h
"

72 
	#KEY_ESTABLISHMENT_DEVICE_VERSION
 0

	)

73 
	#KEY_ESTABLISHMENT_FLAGS
 0

	)

74 
	#KEY_ESTABLISHMENT_SUITE
 1

75 
	#KEY_ESTABLISHMENT_AVG_TIMEOUT
 ( 2 * ( 
ZCL_KEY_ESTABLISHMENT_KEY_GENERATE_TIMEOUT
 + \

	)

76 
	gZCL_KEY_ESTABLISHMENT_MAC_GENERATE_TIMEOUT
 ) )

78 
	#ZCL_KEY_ESTABLISH_DEVICE_VERSION
 0

	)

79 
	#ZCL_KEY_ESTABLISH_FLAGS
 0

	)

81 
	#INVALID_TASK_ID
 0xFF

	)

92 #i‡
deföed
 (
DEBUG_STATIC_ECC
)

93 
uöt8
 
	gpublic1
[22] = {

98 
uöt8
 
	g¥iv©e1
[21] = {

103 
uöt8
 
	gpublic2
[22] = {

108 
uöt8
 
	g¥iv©e2
[21] = {

116 
z˛O±i⁄Rec_t
 
	gz˛KeyE°ablish_O±i⁄s
[1] =

119 
ZCL_CLUSTER_ID_GEN_KEY_ESTABLISHMENT
,

120 –
AF_ACK_REQUEST
 ),

125 
YõldFunc
 *
	gz˛KeyE°ablish_YõldFunc
 = 
NULL
;

126 
uöt8
 
	gz˛KeyE°ablish_YõldLevñ
 = 0;

131 
uöt8
* 
SSP_MemCpyRevî£
–uöt8* 
d°
, uöt8* 
§c
, 
Àn
 );

136 #i‡
deföed
(
ZCL_KEY_ESTABLISH
)

137 
uöt8
 
	gz˛_KeyE°ablishmít_TaskID
;

144 
	#ZCL_KEY_ESTABLISH_MAX_INCLUSTERS
 1

	)

145 c⁄° 
cId_t
 
	gz˛KeyE°ablish_InClu°îLi°
[
ZCL_KEY_ESTABLISH_MAX_INCLUSTERS
] =

147 
ZCL_CLUSTER_ID_GEN_KEY_ESTABLISHMENT
,

150 
	#ZCL_KEY_ESTABLISH_MAX_OUTCLUSTERS
 1

	)

151 c⁄° 
cId_t
 
	gz˛KeyE°ablish_OutClu°îLi°
[
ZCL_KEY_ESTABLISH_MAX_OUTCLUSTERS
] =

153 
ZCL_CLUSTER_ID_GEN_KEY_ESTABLISHMENT
,

156 
Sim∂eDes¸ùti⁄F‹m©_t
 
	gz˛KeyE°ablish_Sim∂eDesc
 =

158 
ZCL_KEY_ESTABLISHMENT_ENDPOINT
,

159 
ZCL_SE_PROFILE_ID
,

160 
ZCL_SE_DEVICEID_ESP
,

161 
ZCL_KEY_ESTABLISH_DEVICE_VERSION
,

162 
ZCL_KEY_ESTABLISH_FLAGS
,

163 
ZCL_KEY_ESTABLISH_MAX_INCLUSTERS
,

164 (
cId_t
 *)
z˛KeyE°ablish_InClu°îLi°
,

165 
ZCL_KEY_ESTABLISH_MAX_OUTCLUSTERS
,

166 (
cId_t
 *)
z˛KeyE°ablish_OutClu°îLi°


169 #i‡
deföed
 (
ZCL_KEY_ESTABLISH
)

171 
ídPoötDesc_t
 
	gz˛KeyE°ablish_Ep
 =

173 
ZCL_KEY_ESTABLISHMENT_ENDPOINT
,

174 &
z˛_TaskID
,

175 (
Sim∂eDes¸ùti⁄F‹m©_t
 *)&
z˛KeyE°ablish_Sim∂eDesc
,

176 (
afNëw‹kL©ícyReq_t
)0

181 #i‡
deföed
 ( 
ZCL_KEY_ESTABLISH
)

182 
uöt8
 
	gz˛KeyE°ablishPlugöRegi°ed
 = 
FALSE
;

184 
z˛KeyE°ablishRec_t
 
	gkeyE°ablishRec
[
MAX_KEY_ESTABLISHMENT_REC_ENTRY
];

189 
ZSètus_t
 
z˛GíîÆ_KeyE°ablish_HdlIncomög
–
z˛Incomög_t
 *
pInMsg
 );

191 
ZSètus_t
 
z˛GíîÆ_KeyE°ablish_HdlInS≥cificComm™ds
–
z˛Incomög_t
 *
pInMsg
 );

194 
ZSètus_t
 
z˛GíîÆ_Pro˚ssInCmd_InôüãKeyE°ablish
–
z˛Incomög_t
 *
pInMsg
 );

195 
ZSètus_t
 
z˛GíîÆ_Pro˚ssInCmd_InôüãKeyE°ablishR•
–
z˛Incomög_t
 *
pInMsg
 );

196 
ZSètus_t
 
z˛GíîÆ_Pro˚ssInCmd_EphemîÆD©aReq
–
z˛Incomög_t
 *
pInMsg
 );

197 
ZSètus_t
 
z˛GíîÆ_Pro˚ssInCmd_EphemîÆD©aR•
–
z˛Incomög_t
 *
pInMsg
 );

198 
ZSètus_t
 
z˛GíîÆ_Pro˚ssInCmd_C⁄fúmKey
–
z˛Incomög_t
 *
pInMsg
 );

199 
ZSètus_t
 
z˛GíîÆ_Pro˚ssInCmd_C⁄fúmKeyR•
–
z˛Incomög_t
 *
pInMsg
 );

200 
ZSètus_t
 
z˛GíîÆ_Pro˚ssInCmd_Tîmö©eKeyE°ablish
–
z˛Incomög_t
 *
pInMsg
 );

203 
ZSètus_t
 
z˛GíîÆ_InôüãKeyE°ablish_Cmd_CÆcuœãKey
();

204 
ZSètus_t
 
z˛GíîÆ_InôüãKeyE°ablish_R•_CÆcuœãKey
();

207 
z˛GíîÆ_InôKeyE°ablishRecTabÀ
( );

208 
uöt8
 
z˛GíîÆ_GëKeyE°ablishRecIndex
–
uöt16
 
∑π√rAddªss
 );

209 
uöt8
 
z˛GíîÆ_GëKeyE°ablishRecIndex_Sèã
–
KeyE°ablishSèã_t
 
°©e
 );

210 
ZSètus_t
 
z˛GíîÆ_RemoveKeyE°ablishRec
–
uöt16
 
∑π√rAddªss
 );

211 
uöt8
 
z˛GíîÆ_AddKeyE°ablishRec
–
afAddrTy≥_t
 *
addr
 );

212 
z˛GíîÆ_AgeKeyE°ablishRec
( );

215 
z˛GíîÆ_KeyE°ablishmít_GëR™dom
(*
buf„r
, 
Àn
);

216 
z˛GíîÆ_KeyE°ablishmít_HashFunc
(*
dige°
, 
Àn
, *
d©a
);

219 
z˛GíîÆ_KeyE°ablishmít_KeyDîiveFun˘i⁄
–
uöt8
 *
zD©a
,

220 
uöt8
 
keyBôLí
,

221 
uöt8
 *
keyBô
 );

223 
ZSètus_t
 
z˛GíîÆ_KeyE°ablishmít_Gíî©eMAC
(
uöt8
 
ªcIndex
,

224 
uöt8
 
ifMACu
,

225 
uöt8
 *
MAC
);

237 
	$z˛GíîÆ_KeyE°ablish_Inô
–
uöt8
 
èsk_id
 )

239 
z˛_KeyE°ablishmít_TaskID
 = 
èsk_id
;

242 
	`afRegi°î
–&
z˛KeyE°ablish_Ep
 );

244 
	`z˛_ªgi°îClu°îO±i⁄Li°
–
ZCL_KEY_ESTABLISHMENT_ENDPOINT
, 1,

245 
z˛KeyE°ablish_O±i⁄s
 );

248 i‡–!
z˛KeyE°ablishPlugöRegi°ed
 )

250 
	`z˛_ªgi°îPlugö
–
ZCL_CLUSTER_ID_GEN_KEY_ESTABLISHMENT
,

251 
ZCL_CLUSTER_ID_GEN_KEY_ESTABLISHMENT
,

252 
z˛GíîÆ_KeyE°ablish_HdlIncomög
 );

253 
z˛KeyE°ablishPlugöRegi°ed
 = 
åue
;

257 
	`z˛GíîÆ_InôKeyE°ablishRecTabÀ
();

260 
	`oßl_°¨t_timîEx
–
èsk_id
, 
KEY_ESTABLISHMENT_REC_AGING_EVT
,

261 
KEY_ESTABLISHMENT_REC_AGING_INTERVAL
 );

262 
	}
}

274 
uöt16
 
	$z˛KeyE°ablish_evít_lo›
–
uöt8
 
èsk_id
, 
uöt16
 
evíts
 )

276 
afIncomögMSGPackë_t
 *
MSGpkt
;

278 i‡–
evíts
 & 
SYS_EVENT_MSG
 )

280  (
MSGpkt
 = (
afIncomögMSGPackë_t
 *)
	`oßl_msg_ª˚ive
–
èsk_id
 )) )

282  
MSGpkt
->
hdr
.
evít
 )

289 
	`oßl_msg_dóŒoˇã
–(
uöt8
 *)
MSGpkt
 );

293  (
evíts
 ^ 
SYS_EVENT_MSG
);

296 i‡–
evíts
 & 
KEY_ESTABLISHMENT_REC_AGING_EVT
 )

299 
	`oßl_°¨t_timîEx
(
èsk_id
, 
KEY_ESTABLISHMENT_REC_AGING_EVT
,

300 
KEY_ESTABLISHMENT_REC_AGING_INTERVAL
 );

302 
	`z˛GíîÆ_AgeKeyE°ablishRec
();

304  ( 
evíts
 ^ 
KEY_ESTABLISHMENT_REC_AGING_EVT
 );

307 i‡–
evíts
 & 
KEY_ESTABLISHMENT_CMD_PROCESS_EVT
 )

309 
	`z˛GíîÆ_InôüãKeyE°ablish_Cmd_CÆcuœãKey
();

311  ( 
evíts
 ^ 
KEY_ESTABLISHMENT_CMD_PROCESS_EVT
 );

314 i‡–
evíts
 & 
KEY_ESTABLISHMENT_RSP_PROCESS_EVT
 )

316 
	`z˛GíîÆ_InôüãKeyE°ablish_R•_CÆcuœãKey
();

317  ( 
evíts
 ^ 
KEY_ESTABLISHMENT_RSP_PROCESS_EVT
 );

321 
	}
}

334 
ZSètus_t
 
	$z˛GíîÆ_KeyE°ablish_InôüãKeyE°ablishmít
(
uöt8
 
≠pTaskID
,

335 
afAddrTy≥_t
 *
∑π√rAddr
,

336 
uöt8
 
£qNum
)

338 
uöt8
 
ödex
;

341 
z˛_SeqNum
 = 
£qNum
;

344 
ödex
 = 
	`z˛GíîÆ_AddKeyE°ablishRec
–
∑π√rAddr
 );

346 if–
ödex
 < 
MAX_KEY_ESTABLISHMENT_REC_ENTRY
 )

348 
keyE°ablishRec
[
ödex
].
rﬁe
 = 
KEY_ESTABLISHMENT_INITIATOR
;

351 
keyE°ablishRec
[
ödex
].
≠pTaskID
 =áppTaskID;

355  
ZFaûuª
;

359 
	`ZSE_ECCGíî©eKey
––*)
keyE°ablishRec
[
ödex
].
pLoˇlEPriv©eKey
,

360 –*)
keyE°ablishRec
[
ödex
].
pLoˇlEPublicKey
,

361 
z˛GíîÆ_KeyE°ablishmít_GëR™dom
,

362 
z˛KeyE°ablish_YõldFunc
, 
z˛KeyE°ablish_YõldLevñ
);

364 #i‡
	`deföed
 (
DEBUG_STATIC_ECC
)

367 
	`oßl_mem˝y
–
keyE°ablishRec
[
ödex
].
pLoˇlEPriv©eKey
, 
¥iv©e1
, 21 );

368 
	`oßl_mem˝y
–
keyE°ablishRec
[
ödex
].
pLoˇlEPublicKey
, 
public1
, 22 );

371 
keyE°ablishRec
[
ödex
].
°©e
 = 
KeyE°ablishSèã_InôüãPídög
;

374 
	`z˛GíîÆ_KeyE°ablish_Síd_InôüãKeyE°ablishmít
–
ZCL_KEY_ESTABLISHMENT_ENDPOINT
,

375 
∑π√rAddr
,

376 
KEY_ESTABLISHMENT_SUITE
,

377 
ZCL_KEY_ESTABLISHMENT_EKEY_GENERATE_TIMEOUT
,

378 
ZCL_KEY_ESTABLISHMENT_MAC_GENERATE_TIMEOUT
 + 
ZCL_KEY_ESTABLISHMENT_KEY_GENERATE_TIMEOUT
,

379 
zgLoˇlCîtifiˇã
,

380 
åue
, 
z˛_SeqNum
++ );

382  
ZSuc˚ss
;

383 
	}
}

401 
ZSètus_t
 
	$z˛GíîÆ_KeyE°ablish_Síd_InôüãKeyE°ablishmít
–
uöt8
 
§cEP
, 
afAddrTy≥_t
 *
d°Addr
,

402 
uöt16
 
keyE°ablishmítSuôe
,

403 
uöt8
 
keyGíî©eTime
,

404 
uöt8
 
macGíî©eTime
,

405 
uöt8
 *
˚πifiˇã
,

406 
uöt8
 
dißbÀDeÁu…R•
, uöt8 
£qNum
 )

408 
uöt8
 *
buf
;

409 
uöt8
 *
pBuf
;

410 
uöt8
 
°©us
;

411 
uöt8
 
bufLí
;

413 ()
§cEP
;

416 
bufLí
 = 2 + 1 + 1 + 
ZCL_KEY_ESTABLISHMENT_CERTIFICATE_LENGTH
;

418 i‡((
buf
 = 
	`oßl_mem_Æloc
(
bufLí
)Ë=
NULL
)

420  
ZMemEº‹
;

423 
pBuf
 = 
buf
;

425 *
pBuf
++ = 
	`LO_UINT16
–
keyE°ablishmítSuôe
 );

426 *
pBuf
++ = 
	`HI_UINT16
–
keyE°ablishmítSuôe
 );

427 *
pBuf
++ = 
keyGíî©eTime
;

428 *
pBuf
++ = 
macGíî©eTime
;

429 
	`oßl_mem˝y
–
pBuf
, 
˚πifiˇã
, 
ZCL_KEY_ESTABLISHMENT_CERTIFICATE_LENGTH
 );

431 
°©us
 = 
	`z˛_SídComm™d
–
ZCL_KEY_ESTABLISHMENT_ENDPOINT
, 
d°Addr
,

432 
ZCL_CLUSTER_ID_GEN_KEY_ESTABLISHMENT
,

433 
COMMAND_INITIATE_KEY_ESTABLISHMENT
, 
TRUE
,

434 
ZCL_FRAME_CLIENT_SERVER_DIR
, 
dißbÀDeÁu…R•
,

435 0, 
£qNum
, 
bufLí
, 
buf
 );

437 
	`oßl_mem_‰ì
(
buf
);

439  
°©us
;

440 
	}
}

455 
ZSètus_t
 
	$z˛GíîÆ_KeyE°ablish_Síd_EphemîÆD©aReq
–
uöt8
 
§cEP
, 
afAddrTy≥_t
 *
d°Addr
,

456 
uöt8
 *
eD©a
,

457 
uöt8
 
dißbÀDeÁu…R•
, uöt8 
£qNum
 )

459  
	`z˛_SídComm™d
–
§cEP
, 
d°Addr
,

460 
ZCL_CLUSTER_ID_GEN_KEY_ESTABLISHMENT
,

461 
COMMAND_EPHEMERAL_DATA_REQUEST
, 
TRUE
,

462 
ZCL_FRAME_CLIENT_SERVER_DIR
, 
dißbÀDeÁu…R•
,

463 0, 
£qNum
, 
ZCL_KEY_ESTABLISHMENT_PUBLIC_KEY_LENGTH
, 
eD©a
 );

464 
	}
}

480 
ZSètus_t
 
	$z˛GíîÆ_KeyE°ablish_Síd_C⁄fúmKey
–
uöt8
 
§cEP
, 
afAddrTy≥_t
 *
d°Addr
,

481 
uöt8
 *
mac
,

482 
uöt8
 
dißbÀDeÁu…R•
, uöt8 
£qNum
 )

484  (
	`z˛_SídComm™d
(
§cEP
, 
d°Addr
,

485 
ZCL_CLUSTER_ID_GEN_KEY_ESTABLISHMENT
,

486 
COMMAND_CONFIRM_KEY
, 
TRUE
,

487 
ZCL_FRAME_CLIENT_SERVER_DIR
, 
dißbÀDeÁu…R•
,

488 0, 
£qNum
, 
KEY_ESTABLISH_MAC_LENGTH
, 
mac
 ));

489 
	}
}

504 
ZSètus_t
 
	$z˛GíîÆ_KeyE°ablish_Síd_Tîmö©eKeyE°ablishmít
–
uöt8
 
§cEP
,

505 
afAddrTy≥_t
 *
d°Addr
,

506 
TîmKeySètus_t
 
°©us
,

507 
uöt8
 
waôTime
,

508 
uöt16
 
keyE°ablishmítSuôe
,

509 
uöt8
 
dißbÀDeÁu…R•
, uöt8 
£qNum
 )

511 
uöt8
 
buf
[4];

513 
buf
[0] = 
°©us
;

514 
buf
[1] = 
waôTime
;

515 
buf
[2] = 
	`LO_UINT16
(
keyE°ablishmítSuôe
);

516 
buf
[3] = 
	`HI_UINT16
(
keyE°ablishmítSuôe
);

518  
	`z˛_SídComm™d
(
§cEP
, 
d°Addr
,

519 
ZCL_CLUSTER_ID_GEN_KEY_ESTABLISHMENT
,

520 
COMMAND_TERMINATE_KEY_ESTABLISHMENT
, 
TRUE
,

521 
ZCL_FRAME_CLIENT_SERVER_DIR
, 
dißbÀDeÁu…R•
,

522 0, 
£qNum
, 4, 
buf
 );

523 
	}
}

542 
ZSètus_t
 
	$z˛GíîÆ_KeyE°ablish_Síd_InôüãKeyE°ablishmítR•
–
uöt8
 
§cEP
, 
afAddrTy≥_t
 *
d°Addr
,

543 
uöt16
 
keyE°ablishmítSuôe
,

544 
uöt8
 
keyGíî©eTime
,

545 
uöt8
 
macGíî©eTime
,

546 
uöt8
 *
˚πifiˇã
,

547 
uöt8
 
dißbÀDeÁu…R•
, uöt8 
£qNum
 )

549 
uöt8
 *
buf
;

550 
uöt8
 
bufLí
;

551 
uöt8
 
ªt
;

552 
uöt8
 *
pBuf
;

554 
bufLí
 = 2 + 1 + 1 + 
ZCL_KEY_ESTABLISHMENT_CERTIFICATE_LENGTH
;

556 i‡((
buf
 = 
	`oßl_mem_Æloc
(
bufLí
)Ë=
NULL
)

558  
ZMemEº‹
;

561 
pBuf
 = 
buf
;

563 *
pBuf
++ = 
	`LO_UINT16
–
keyE°ablishmítSuôe
 );

564 *
pBuf
++ = 
	`HI_UINT16
–
keyE°ablishmítSuôe
 );

565 *
pBuf
++ = 
keyGíî©eTime
;

566 *
pBuf
++ = 
macGíî©eTime
;

567 
	`oßl_mem˝y
–
pBuf
, 
˚πifiˇã
, 
ZCL_KEY_ESTABLISHMENT_CERTIFICATE_LENGTH
 );

569 
ªt
 = 
	`z˛_SídComm™d
–
§cEP
, 
d°Addr
,

570 
ZCL_CLUSTER_ID_GEN_KEY_ESTABLISHMENT
,

571 
COMMAND_INITIATE_KEY_ESTABLISHMENT_RESPONSE
, 
TRUE
,

572 
ZCL_FRAME_SERVER_CLIENT_DIR
, 
dißbÀDeÁu…R•
,

573 0, 
£qNum
, 
bufLí
, 
buf
 );

574 
	`oßl_mem_‰ì
(
buf
);

576  
ªt
;

577 
	}
}

593 
ZSètus_t
 
	$z˛GíîÆ_KeyE°ablish_Síd_EphemîÆD©aR•
–
uöt8
 
§cEP
, 
afAddrTy≥_t
 *
d°Addr
,

594 
uöt8
 *
eD©a
,

595 
uöt8
 
dißbÀDeÁu…R•
, uöt8 
£qNum
 )

597  (
	`z˛_SídComm™d
–
§cEP
, 
d°Addr
,

598 
ZCL_CLUSTER_ID_GEN_KEY_ESTABLISHMENT
,

599 
COMMAND_EPHEMERAL_DATA_RESPONSE
, 
TRUE
,

600 
ZCL_FRAME_SERVER_CLIENT_DIR
, 
dißbÀDeÁu…R•
,

601 0, 
£qNum
, 
ZCL_KEY_ESTABLISHMENT_PUBLIC_KEY_LENGTH
, 
eD©a
 ));

602 
	}
}

617 
ZSètus_t
 
	$z˛GíîÆ_KeyE°ablish_Síd_C⁄fúmKeyR•
–
uöt8
 
§cEP
, 
afAddrTy≥_t
 *
d°Addr
,

618 
uöt8
 *
mac
,

619 
uöt8
 
dißbÀDeÁu…R•
, uöt8 
£qNum
 )

621  (
	`z˛_SídComm™d
(
§cEP
, 
d°Addr
,

622 
ZCL_CLUSTER_ID_GEN_KEY_ESTABLISHMENT
,

623 
COMMAND_CONFIRM_KEY_RESPONSE
, 
TRUE
,

624 
ZCL_FRAME_SERVER_CLIENT_DIR
, 
dißbÀDeÁu…R•
,

625 0, 
£qNum
, 
KEY_ESTABLISH_MAC_LENGTH
, 
mac
 ));

626 
	}
}

640 
	$z˛GíîÆ_KeyE°ablishmít_RegYõldCB
–
YõldFunc
 *
pFnYõld
,

641 
uöt8
 
yõldLevñ
 )

643 if–
pFnYõld
 =
NULL
 )

645 
z˛KeyE°ablish_YõldLevñ
 = 0;

649 
z˛KeyE°ablish_YõldFunc
 = 
pFnYõld
;

650 
z˛KeyE°ablish_YõldLevñ
 = 
yõldLevñ
;

652 
	}
}

664 
ZSètus_t
 
	$z˛GíîÆ_KeyE°ablish_HdlIncomög
–
z˛Incomög_t
 *
pInMsg
 )

666 
ZSètus_t
 
°©
 = 
ZSuc˚ss
;

668 #i‡
	`deföed
 ( 
INTER_PAN
 )

669 i‡–
	`StubAPS_I¡îP™
–
pInMsg
->
msg
->
§cAddr
.
∑nId
,ÖInMsg->msg->§cAddr.
ídPoöt
 ) )

670  ( 
°©
 );

673 i‡–
	`z˛_Clu°îCmd
–
pInMsg
->
hdr
.
fc
.
ty≥
 ) )

676 i‡–
pInMsg
->
hdr
.
fc
.
m™uS≥cific
 == 0 )

678 
°©
 = 
	`z˛GíîÆ_KeyE°ablish_HdlInS≥cificComm™ds
–
pInMsg
 );

683 
°©
 = 
ZFaûuª
;

689 
°©
 = 
ZFaûuª
;

691  ( 
°©
 );

692 
	}
}

704 
ZSètus_t
 
	$z˛GíîÆ_KeyE°ablish_HdlInS≥cificComm™ds
–
z˛Incomög_t
 *
pInMsg
 )

706 
ZSètus_t
 
°©
;

708 i‡–
	`z˛_SîvîCmd
–
pInMsg
->
hdr
.
fc
.
dúe˘i⁄
 ) )

710  
pInMsg
->
hdr
.
comm™dID
 )

712 
COMMAND_INITIATE_KEY_ESTABLISHMENT
:

713 
°©
 = 
	`z˛GíîÆ_Pro˚ssInCmd_InôüãKeyE°ablish
–
pInMsg
 );

716 
COMMAND_EPHEMERAL_DATA_REQUEST
:

717 
°©
 = 
	`z˛GíîÆ_Pro˚ssInCmd_EphemîÆD©aReq
–
pInMsg
 );

720 
COMMAND_CONFIRM_KEY
:

721 
°©
 = 
	`z˛GíîÆ_Pro˚ssInCmd_C⁄fúmKey
–
pInMsg
 );

724 
COMMAND_TERMINATE_KEY_ESTABLISHMENT
:

725 
°©
 = 
	`z˛GíîÆ_Pro˚ssInCmd_Tîmö©eKeyE°ablish
–
pInMsg
 );

729 
°©
 = 
ZFaûuª
;

735 i‡–
pInMsg
->
hdr
.
comm™dID
 =
COMMAND_INITIATE_KEY_ESTABLISHMENT_RESPONSE
 )

737 
°©
 = 
	`z˛GíîÆ_Pro˚ssInCmd_InôüãKeyE°ablishR•
–
pInMsg
 );

739 i‡–
pInMsg
->
hdr
.
comm™dID
 =
COMMAND_EPHEMERAL_DATA_RESPONSE
 )

741 
°©
 = 
	`z˛GíîÆ_Pro˚ssInCmd_EphemîÆD©aR•
–
pInMsg
 );

743 i‡–
pInMsg
->
hdr
.
comm™dID
 =
COMMAND_CONFIRM_KEY_RESPONSE
 )

745 
°©
 = 
	`z˛GíîÆ_Pro˚ssInCmd_C⁄fúmKeyR•
–
pInMsg
 );

749 
°©
 = 
ZFaûuª
;

753  ( 
°©
 );

754 
	}
}

768 
ZSètus_t
 
	$z˛GíîÆ_Pro˚ssInCmd_InôüãKeyE°ablish
–
z˛Incomög_t
 *
pInMsg
 )

770 
uöt8
 
ödex
;

771 
TîmKeySètus_t
 
°©us
 = 
TîmKeySètus_Suc˚ss
;

772 
uöt16
 
ªmŸeKeyE°ablishmítSuôe
;

777 
ödex
 = 
	`z˛GíîÆ_AddKeyE°ablishRec
–&
pInMsg
->
msg
->
§cAddr
 );

779 if–
ödex
 =
MAX_KEY_ESTABLISHMENT_REC_ENTRY
 )

782 
	`z˛GíîÆ_KeyE°ablish_Síd_Tîmö©eKeyE°ablishmít
–
ZCL_KEY_ESTABLISHMENT_ENDPOINT
,

783 &
pInMsg
->
msg
->
§cAddr
,

784 
TîmKeySètus_NoResour˚s
,

785 
KEY_ESTABLISHMENT_AVG_TIMEOUT
,

786 
KEY_ESTABLISHMENT_SUITE
,

787 
Ál£
, 
z˛_SeqNum
++ );

788  
ZCL_STATUS_CMD_HAS_RSP
;

793 
	`oßl_mem˝y
(
keyE°ablishRec
[
ödex
].
pRemŸeCîtifiˇã
, &(
pInMsg
->
pD©a
[
KEY_ESTABLISH_CERT_IDX
]),

794 
ZCL_KEY_ESTABLISHMENT_CERTIFICATE_LENGTH
 );

797 
ªmŸeKeyE°ablishmítSuôe
 = 
	`BUILD_UINT16
–
pInMsg
->
pD©a
[0],ÖInMsg->pData[1] );

798 i‡–
ªmŸeKeyE°ablishmítSuôe
 !
KEY_ESTABLISHMENT_SUITE
 )

800 
°©us
 = 
TîmKeySètus_UnSuµ‹ãdSuôe
;

803 i‡–!
	`oßl_memcmp
–&(
keyE°ablishRec
[
ödex
].
pRemŸeCîtifiˇã
[
KEY_ESTABLISH_CERT_ISSUER_IDX
]),

804 &(
zgLoˇlCîtifiˇã
[
KEY_ESTABLISH_CERT_ISSUER_IDX
]),

805 
KEY_ESTABLISH_CERT_ISSUER_LENTGH
 ) )

807 
°©us
 = 
TîmKeySètus_UnknowIssuî
;

810 i‡–
°©us
 !
ZSuc˚ss
 )

812 
	`z˛GíîÆ_KeyE°ablish_Síd_Tîmö©eKeyE°ablishmít
–
ZCL_KEY_ESTABLISHMENT_ENDPOINT
,

813 &
pInMsg
->
msg
->
§cAddr
,

814 
°©us
,

815 
KEY_ESTABLISHMENT_AVG_TIMEOUT
,

816 
KEY_ESTABLISHMENT_SUITE
,

817 
Ál£
, 
z˛_SeqNum
++ );

818  
ZCL_STATUS_CMD_HAS_RSP
;

822 
	`SSP_MemCpyRevî£
–
keyE°ablishRec
[
ödex
].
∑π√rExtAddr
,

823 &(
keyE°ablishRec
[
ödex
].
pRemŸeCîtifiˇã
[
KEY_ESTABLISH_CERT_EXT_ADDR_IDX
]),

824 
Z_EXTADDR_LEN
);

827 
keyE°ablishRec
[
ödex
].
œ°SeqNum
 = 
pInMsg
->
hdr
.
å™sSeqNum
;

828 
keyE°ablishRec
[
ödex
].
°©e
 = 
KeyE°ablishSèã_ED©aPídög
;

829 
keyE°ablishRec
[
ödex
].
rﬁe
 = 
KEY_ESTABLISHMENT_RESPONDER
;

831 
	`z˛GíîÆ_KeyE°ablish_Síd_InôüãKeyE°ablishmítR•
–
ZCL_KEY_ESTABLISHMENT_ENDPOINT
,

832 &
pInMsg
->
msg
->
§cAddr
,

833 
KEY_ESTABLISHMENT_SUITE
,

834 
ZCL_KEY_ESTABLISHMENT_EKEY_GENERATE_TIMEOUT
 + 
ZCL_KEY_ESTABLISHMENT_KEY_GENERATE_TIMEOUT
,

835 
ZCL_KEY_ESTABLISHMENT_MAC_GENERATE_TIMEOUT
 * 2 ,

836 
zgLoˇlCîtifiˇã
,

837 
Ál£
, 
pInMsg
->
hdr
.
å™sSeqNum
 );

839  
ZCL_STATUS_CMD_HAS_RSP
;

840 
	}
}

853 
ZSètus_t
 
	$z˛GíîÆ_Pro˚ssInCmd_EphemîÆD©aReq
–
z˛Incomög_t
 *
pInMsg
 )

855 
uöt8
 
ödex
;

860 i‡––
ödex
 = 
	`z˛GíîÆ_GëKeyE°ablishRecIndex
–
pInMsg
->
msg
->
§cAddr
.
addr
.
sh‹tAddr
 ) )

861 < 
MAX_KEY_ESTABLISHMENT_REC_ENTRY
 )

863 i‡–
keyE°ablishRec
[
ödex
].
rﬁe
 =
KEY_ESTABLISHMENT_RESPONDER
 &&

864 
keyE°ablishRec
[
ödex
].
°©e
 =
KeyE°ablishSèã_ED©aPídög
 )

867 
	`oßl_mem˝y
–
keyE°ablishRec
[
ödex
].
pRemŸePublicKey
,

868 &(
pInMsg
->
pD©a
[0]),

869 
ZCL_KEY_ESTABLISHMENT_PUBLIC_KEY_LENGTH
 );

875 
	`z˛GíîÆ_KeyE°ablish_Síd_Tîmö©eKeyE°ablishmít
–
ZCL_KEY_ESTABLISHMENT_ENDPOINT
,

876 &
pInMsg
->
msg
->
§cAddr
,

877 
TîmKeySètus_BadMesßge
,

878 
KEY_ESTABLISHMENT_AVG_TIMEOUT
,

879 
KEY_ESTABLISHMENT_SUITE
,

880 
Ál£
, 
z˛_SeqNum
++ );

884 
	`ZSE_ECCGíî©eKey
–(*)
keyE°ablishRec
[
ödex
].
pLoˇlEPriv©eKey
,

885 (*)
keyE°ablishRec
[
ödex
].
pLoˇlEPublicKey
,

886 
z˛GíîÆ_KeyE°ablishmít_GëR™dom
,

887 
z˛KeyE°ablish_YõldFunc
, 
z˛KeyE°ablish_YõldLevñ
 );

889 #i‡
	`deföed
 (
DEBUG_STATIC_ECC
)

893 
	`oßl_mem˝y
–
keyE°ablishRec
[
ödex
].
pLoˇlEPriv©eKey
, 
¥iv©e2
, 21 );

894 
	`oßl_mem˝y
–
keyE°ablishRec
[
ödex
].
pLoˇlEPublicKey
, 
public2
, 22 );

898 
keyE°ablishRec
[
ödex
].
°©e
 = 
KeyE°ablishSèã_KeyCÆcuœãPídög
;

900 
	`oßl_°¨t_timîEx
–
z˛_KeyE°ablishmít_TaskID
, 
KEY_ESTABLISHMENT_CMD_PROCESS_EVT
,

901 
KEY_ESTABLISHMENT_WAIT_PERIOD
 );

904  
ZCL_STATUS_CMD_HAS_RSP
;

905 
	}
}

920 
ZSètus_t
 
	$z˛GíîÆ_Pro˚ssInCmd_InôüãKeyE°ablishR•
–
z˛Incomög_t
 *
pInMsg
 )

922 
uöt8
 
ödex
;

923 
uöt8
 
°©us
 = 
ZFaûuª
;

924 
TîmKeySètus_t
 
keySètus
 = 
TîmKeySètus_Suc˚ss
;

925 
uöt16
 
ªmŸeKeyE°ablishmítSuôe
;

928 i‡––
ödex
 = 
	`z˛GíîÆ_GëKeyE°ablishRecIndex
–
pInMsg
->
msg
->
§cAddr
.
addr
.
sh‹tAddr
 ) )

929 < 
MAX_KEY_ESTABLISHMENT_REC_ENTRY
 )

931 i‡–
keyE°ablishRec
[
ödex
].
rﬁe
 =
KEY_ESTABLISHMENT_INITIATOR
 &&

932 
keyE°ablishRec
[
ödex
].
°©e
 =
KeyE°ablishSèã_InôüãPídög
 )

934 
°©us
 = 
ZSuc˚ss
;

938 
	`oßl_mem˝y
–
keyE°ablishRec
[
ödex
].
pRemŸeCîtifiˇã
, &(
pInMsg
->
pD©a
[
KEY_ESTABLISH_CERT_IDX
]),

939 
ZCL_KEY_ESTABLISHMENT_CERTIFICATE_LENGTH
 );

941 
	`SSP_MemCpyRevî£
–
keyE°ablishRec
[
ödex
].
∑π√rExtAddr
,

942 &(
keyE°ablishRec
[
ödex
].
pRemŸeCîtifiˇã
[
KEY_ESTABLISH_CERT_EXT_ADDR_IDX
]), 
Z_EXTADDR_LEN
);

947 
	`z˛GíîÆ_RemoveKeyE°ablishRec
–
pInMsg
->
msg
->
§cAddr
.
addr
.
sh‹tAddr
 );

951 i‡–
°©us
 =
ZFaûuª
 )

954 
	`z˛GíîÆ_KeyE°ablish_Síd_Tîmö©eKeyE°ablishmít
–
ZCL_KEY_ESTABLISHMENT_ENDPOINT
,

955 &
pInMsg
->
msg
->
§cAddr
,

956 
TîmKeySètus_BadMesßge
,

957 
KEY_ESTABLISHMENT_AVG_TIMEOUT
,

958 
KEY_ESTABLISHMENT_SUITE
,

959 
Ál£
, 
z˛_SeqNum
++ );

960  
ZCL_STATUS_CMD_HAS_RSP
;

964 
ªmŸeKeyE°ablishmítSuôe
 = 
	`BUILD_UINT16
–
pInMsg
->
pD©a
[0],ÖInMsg->pData[1] );

965 i‡–
ªmŸeKeyE°ablishmítSuôe
 !
KEY_ESTABLISHMENT_SUITE
 )

967 
keySètus
 = 
TîmKeySètus_UnSuµ‹ãdSuôe
;

970 i‡–!
	`oßl_memcmp
–&(
keyE°ablishRec
[
ödex
].
pRemŸeCîtifiˇã
[
KEY_ESTABLISH_CERT_ISSUER_IDX
]),

971 &(
zgLoˇlCîtifiˇã
[
KEY_ESTABLISH_CERT_ISSUER_IDX
]),

972 
KEY_ESTABLISH_CERT_ISSUER_LENTGH
 ) )

974 
keySètus
 = 
TîmKeySètus_UnknowIssuî
;

977 i‡–
keySètus
 !
ZSuc˚ss
 )

979 
	`z˛GíîÆ_KeyE°ablish_Síd_Tîmö©eKeyE°ablishmít
–
ZCL_KEY_ESTABLISHMENT_ENDPOINT
,

980 &
pInMsg
->
msg
->
§cAddr
,

981 
keySètus
,

982 
KEY_ESTABLISHMENT_AVG_TIMEOUT
,

983 
KEY_ESTABLISHMENT_SUITE
,

984 
Ál£
, 
z˛_SeqNum
++ );

985  
ZCL_STATUS_CMD_HAS_RSP
;

988 
keyE°ablishRec
[
ödex
].
°©e
 = 
KeyE°ablishSèã_ED©aPídög
;

991 
	`z˛GíîÆ_KeyE°ablish_Síd_EphemîÆD©aReq
–
ZCL_KEY_ESTABLISHMENT_ENDPOINT
,

992 &
pInMsg
->
msg
->
§cAddr
,

993 
keyE°ablishRec
[
ödex
].
pLoˇlEPublicKey
,

994 
Ál£
, 
z˛_SeqNum
++ );

998  
ZCL_STATUS_CMD_HAS_RSP
;

999 
	}
}

1013 
ZSètus_t
 
	$z˛GíîÆ_Pro˚ssInCmd_EphemîÆD©aR•
–
z˛Incomög_t
 *
pInMsg
 )

1015 
uöt8
 
ödex
;

1016 
uöt8
 
°©us
 = 
ZFaûuª
;

1019 i‡––
ödex
 = 
	`z˛GíîÆ_GëKeyE°ablishRecIndex
–
pInMsg
->
msg
->
§cAddr
.
addr
.
sh‹tAddr
 ) )

1020 < 
MAX_KEY_ESTABLISHMENT_REC_ENTRY
 )

1022 i‡–
keyE°ablishRec
[
ödex
].
rﬁe
 =
KEY_ESTABLISHMENT_INITIATOR
 &&

1023 
keyE°ablishRec
[
ödex
].
°©e
 =
KeyE°ablishSèã_ED©aPídög
 )

1025 
°©us
 = 
ZSuc˚ss
;

1028 
	`oßl_mem˝y
–
keyE°ablishRec
[
ödex
].
pRemŸePublicKey
,

1029 &(
pInMsg
->
pD©a
[0]),

1030 
ZCL_KEY_ESTABLISHMENT_PUBLIC_KEY_LENGTH
 );

1035 
	`z˛GíîÆ_RemoveKeyE°ablishRec
–
pInMsg
->
msg
->
§cAddr
.
addr
.
sh‹tAddr
 );

1039 i‡–
°©us
 =
ZFaûuª
 )

1042 
	`z˛GíîÆ_KeyE°ablish_Síd_Tîmö©eKeyE°ablishmít
–
ZCL_KEY_ESTABLISHMENT_ENDPOINT
,

1043 &
pInMsg
->
msg
->
§cAddr
,

1044 
TîmKeySètus_BadMesßge
,

1045 
KEY_ESTABLISHMENT_AVG_TIMEOUT
,

1046 
KEY_ESTABLISHMENT_SUITE
,

1047 
Ál£
, 
z˛_SeqNum
++ );

1048  
ZCL_STATUS_CMD_HAS_RSP
;

1051 
keyE°ablishRec
[
ödex
].
°©e
 = 
KeyE°ablishSèã_KeyCÆcuœãPídög
;

1053 
	`oßl_°¨t_timîEx
–
z˛_KeyE°ablishmít_TaskID
, 
KEY_ESTABLISHMENT_RSP_PROCESS_EVT
,

1054 
KEY_ESTABLISHMENT_WAIT_PERIOD
 );

1058  
ZCL_STATUS_CMD_HAS_RSP
;

1059 
	}
}

1072 
ZSètus_t
 
	$z˛GíîÆ_Pro˚ssInCmd_C⁄fúmKey
–
z˛Incomög_t
 *
pInMsg
 )

1074 
uöt8
 
ödex
;

1075 
uöt8
 
°©us
 = 
ZFaûuª
;

1076 
uöt8
 
MACu
[
KEY_ESTABLISH_MAC_KEY_LENGTH
];

1077 
uöt8
 
MACv
[
KEY_ESTABLISH_MAC_KEY_LENGTH
];

1080 i‡––
ödex
 = 
	`z˛GíîÆ_GëKeyE°ablishRecIndex
–
pInMsg
->
msg
->
§cAddr
.
addr
.
sh‹tAddr
 ) )

1081 < 
MAX_KEY_ESTABLISHMENT_REC_ENTRY
 )

1083 i‡–
keyE°ablishRec
[
ödex
].
rﬁe
 =
KEY_ESTABLISHMENT_RESPONDER
 &&

1084 
keyE°ablishRec
[
ödex
].
°©e
 =
KeyE°ablishSèã_C⁄fúmPídög
 )

1086 
°©us
 = 
ZSuc˚ss
;

1091 
	`z˛GíîÆ_RemoveKeyE°ablishRec
–
pInMsg
->
msg
->
§cAddr
.
addr
.
sh‹tAddr
 );

1095 i‡–
°©us
 =
ZFaûuª
 )

1098 
	`z˛GíîÆ_KeyE°ablish_Síd_Tîmö©eKeyE°ablishmít
–
ZCL_KEY_ESTABLISHMENT_ENDPOINT
,

1099 &
pInMsg
->
msg
->
§cAddr
,

1100 
TîmKeySètus_BadMesßge
,

1101 
KEY_ESTABLISHMENT_AVG_TIMEOUT
,

1102 
KEY_ESTABLISHMENT_SUITE
,

1103 
Ál£
, 
z˛_SeqNum
++ );

1104  
ZCL_STATUS_CMD_HAS_RSP
;

1108 
	`z˛GíîÆ_KeyE°ablishmít_Gíî©eMAC
–
ödex
, 
TRUE
, 
MACu
 );

1111 i‡–
	`oßl_memcmp
–
MACu
, 
pInMsg
->
pD©a
, 
KEY_ESTABLISH_MAC_LENGTH
 ) =
TRUE
 )

1114 
keyE°ablishRec
[
ödex
].
°©e
 = 
KeyE°ablishSèã_Tîmö©i⁄Pídög
;

1118 
	`ZDSecMgrAddLökKey
–
pInMsg
->
msg
->
§cAddr
.
addr
.
sh‹tAddr
,

1119 
keyE°ablishRec
[
ödex
].
∑π√rExtAddr
,

1120 
keyE°ablishRec
[
ödex
].
pKey
 );

1123 
	`z˛GíîÆ_KeyE°ablishmít_Gíî©eMAC
–
ödex
, 
FALSE
, 
MACv
 );

1125 
	`z˛GíîÆ_KeyE°ablish_Síd_C⁄fúmKeyR•
–
pInMsg
->
msg
->
ídPoöt
,

1126 &
pInMsg
->
msg
->
§cAddr
,

1127 
MACv
,

1128 
Ál£
, 
pInMsg
->
hdr
.
å™sSeqNum
 );

1133 
	`z˛GíîÆ_KeyE°ablish_Síd_Tîmö©eKeyE°ablishmít
–
ZCL_KEY_ESTABLISHMENT_ENDPOINT
,

1134 &
pInMsg
->
msg
->
§cAddr
,

1135 
TîmKeySètus_BadKeyC⁄fúm
,

1136 
KEY_ESTABLISHMENT_AVG_TIMEOUT
,

1137 
KEY_ESTABLISHMENT_SUITE
,

1138 
Ál£
, 
z˛_SeqNum
++ );

1141  
ZCL_STATUS_CMD_HAS_RSP
;

1142 
	}
}

1156 
ZSètus_t
 
	$z˛GíîÆ_Pro˚ssInCmd_C⁄fúmKeyR•
–
z˛Incomög_t
 *
pInMsg
 )

1158 
uöt8
 
ödex
;

1159 
uöt8
 
°©us
 = 
ZFaûuª
;

1160 
uöt8
 
MACv
[
KEY_ESTABLISH_MAC_LENGTH
];

1163 i‡––
ödex
 = 
	`z˛GíîÆ_GëKeyE°ablishRecIndex
–
pInMsg
->
msg
->
§cAddr
.
addr
.
sh‹tAddr
 ) )

1164 < 
MAX_KEY_ESTABLISHMENT_REC_ENTRY
 )

1166 i‡–
keyE°ablishRec
[
ödex
].
rﬁe
 =
KEY_ESTABLISHMENT_INITIATOR
 &&

1167 
keyE°ablishRec
[
ödex
].
°©e
 =
KeyE°ablishSèã_C⁄fúmPídög
 )

1169 
°©us
 = 
ZSuc˚ss
;

1173 i‡–
°©us
 =
ZFaûuª
 )

1175 
°©us
 = 
TîmKeySètus_BadMesßge
;

1180 
	`z˛GíîÆ_KeyE°ablishmít_Gíî©eMAC
–
ödex
, 
FALSE
, 
MACv
);

1183 i‡–
	`oßl_memcmp
–
MACv
, 
pInMsg
->
pD©a
, 
KEY_ESTABLISH_MAC_LENGTH
 ) =
TRUE
 )

1185 
°©us
 = 
TîmKeySètus_Suc˚ss
;

1188 
	`ZDSecMgrAddLökKey
–
pInMsg
->
msg
->
§cAddr
.
addr
.
sh‹tAddr
,

1189 
keyE°ablishRec
[
ödex
].
∑π√rExtAddr
,

1190 
keyE°ablishRec
[
ödex
].
pKey
 );

1195 
°©us
 = 
TîmKeySètus_BadKeyC⁄fúm
;

1199 if–
°©us
 !
TîmKeySètus_Suc˚ss
 )

1201 
	`z˛GíîÆ_KeyE°ablish_Síd_Tîmö©eKeyE°ablishmít
–
ZCL_KEY_ESTABLISHMENT_ENDPOINT
,

1202 &
pInMsg
->
msg
->
§cAddr
,

1203 (
TîmKeySètus_t
)
°©us
,

1204 
KEY_ESTABLISHMENT_AVG_TIMEOUT
,

1205 
KEY_ESTABLISHMENT_SUITE
,

1206 
Ál£
, 
z˛_SeqNum
++ );

1210 i‡–
keyE°ablishRec
[
ödex
].
≠pTaskID
 !
INVALID_TASK_ID
 )

1212 
keyE°ablishmítInd_t
 *
öd
;

1214 
öd
 = (
keyE°ablishmítInd_t
 *)
	`oßl_msg_Æloˇã
( ( keyEstablishmentInd_t ) );

1215 i‡–
öd
 )

1217 
öd
->
hdr
.
evít
 = 
ZCL_KEY_ESTABLISH_IND
;

1218 
öd
->
hdr
.
°©us
 = status;

1221 
öd
->
waôTime
 = 0;

1222 
öd
->
keyE°ablishmítSuôe
 = 0;

1224 
	`oßl_msg_£nd
–
keyE°ablishRec
[
ödex
].
≠pTaskID
, (
uöt8
*)
öd
 );

1229 
	`z˛GíîÆ_RemoveKeyE°ablishRec
–
pInMsg
->
msg
->
§cAddr
.
addr
.
sh‹tAddr
 );

1231  
ZCL_STATUS_CMD_HAS_RSP
;

1232 
	}
}

1244 
ZSètus_t
 
	$z˛GíîÆ_Pro˚ssInCmd_Tîmö©eKeyE°ablish
–
z˛Incomög_t
 *
pInMsg
 )

1246 
uöt8
 
ödex
;

1249 i‡––
ödex
 = 
	`z˛GíîÆ_GëKeyE°ablishRecIndex
–
pInMsg
->
msg
->
§cAddr
.
addr
.
sh‹tAddr
 ) )

1250 < 
MAX_KEY_ESTABLISHMENT_REC_ENTRY
 )

1252 i‡–
keyE°ablishRec
[
ödex
].
≠pTaskID
 !
INVALID_TASK_ID
 )

1254 
keyE°ablishmítInd_t
 *
öd
;

1257 
öd
 = (
keyE°ablishmítInd_t
 *)
	`oßl_msg_Æloˇã
( ( keyEstablishmentInd_t ) );

1258 i‡–
öd
 )

1260 
öd
->
hdr
.
evít
 = 
ZCL_KEY_ESTABLISH_IND
;

1261 
öd
->
hdr
.
°©us
 = 
pInMsg
->
pD©a
[0];

1262 
öd
->
waôTime
 = 
pInMsg
->
pD©a
[1];

1263 
öd
->
keyE°ablishmítSuôe
 = 
	`BUILD_UINT16
–
pInMsg
->
pD©a
[2],ÖInMsg->pData[3] );

1264 
	`oßl_msg_£nd
–
keyE°ablishRec
[
ödex
].
≠pTaskID
, (
uöt8
*)
öd
 );

1268 
	`z˛GíîÆ_RemoveKeyE°ablishRec
–
pInMsg
->
msg
->
§cAddr
.
addr
.
sh‹tAddr
 );

1270  
ZSuc˚ss
;

1272 
	}
}

1285 
ZSètus_t
 
	$z˛GíîÆ_InôüãKeyE°ablish_Cmd_CÆcuœãKey
( )

1287 
uöt8
 
ödex
;

1288 
uöt8
 
°©us
;

1289 
uöt8
 
tmp
;

1291 
uöt8
 
zD©a
[
KEY_ESTABLISH_SHARED_SECRET_LENGTH
];

1292 
uöt8
 *
keyBô
;

1299 i‡–(
ödex
 = 
	`z˛GíîÆ_GëKeyE°ablishRecIndex_Sèã
–
KeyE°ablishSèã_KeyCÆcuœãPídög
 ))

1300 >
MAX_KEY_ESTABLISHMENT_REC_ENTRY
 )

1302  
ZFaûuª
;

1306 
tmp
 = 
Ál£
;

1307 
	`ZMacSëReq
–
ZMacRxOnIdÀ
, &
tmp
 );

1309 
°©us
 = 
	`ZSE_ECCKeyBôGíî©e
–
zgSèticPriv©eKey
, 
keyE°ablishRec
[
ödex
].
pLoˇlEPriv©eKey
,

1310 
keyE°ablishRec
[
ödex
].
pLoˇlEPublicKey
,

1311 
keyE°ablishRec
[
ödex
].
pRemŸeCîtifiˇã
,

1312 
keyE°ablishRec
[
ödex
].
pRemŸePublicKey
,

1313 
zgCAPublicKey
, 
zD©a
,

1314 
z˛GíîÆ_KeyE°ablishmít_HashFunc
,

1315 
z˛KeyE°ablish_YõldFunc
, 
z˛KeyE°ablish_YõldLevñ
);

1316 
tmp
 = 
åue
;

1317 
	`ZMacSëReq
–
ZMacRxOnIdÀ
, &
tmp
 );

1319 if–
°©us
 =
MCE_SUCCESS
 )

1322 i‡–(
keyBô
 = 
	`oßl_mem_Æloc
–
KEY_ESTABLISH_KEY_DATA_LENGTH
 +

1323 
KEY_ESTABLISH_MAC_KEY_LENGTH
)Ë=
NULL
 )

1325  
ZCL_STATUS_SOFTWARE_FAILURE
;

1329 
	`z˛GíîÆ_KeyE°ablishmít_KeyDîiveFun˘i⁄
(
zD©a
,

1330 
KEY_ESTABLISH_SHARED_SECRET_LENGTH
,

1331 
keyBô
 );

1334 
	`oßl_mem˝y
–
keyE°ablishRec
[
ödex
].
pMacKey
, 
keyBô
, 
KEY_ESTABLISH_MAC_KEY_LENGTH
 );

1335 
	`oßl_mem˝y
–
keyE°ablishRec
[
ödex
].
pKey
, &(
keyBô
[
KEY_ESTABLISH_MAC_KEY_LENGTH
]),

1336 
KEY_ESTABLISH_KEY_DATA_LENGTH
);

1337 
	`oßl_mem_‰ì
–
keyBô
 );

1340 
	`z˛GíîÆ_KeyE°ablish_Síd_EphemîÆD©aR•
–
ZCL_KEY_ESTABLISHMENT_ENDPOINT
,

1341 &(
keyE°ablishRec
[
ödex
].
d°Addr
),

1342 
keyE°ablishRec
[
ödex
].
pLoˇlEPublicKey
,

1343 
Ál£
, 
keyE°ablishRec
[
ödex
].
œ°SeqNum
 );

1348 
	`z˛GíîÆ_KeyE°ablish_Síd_Tîmö©eKeyE°ablishmít
–
ZCL_KEY_ESTABLISHMENT_ENDPOINT
,

1349 &(
keyE°ablishRec
[
ödex
].
d°Addr
),

1350 
TîmKeySètus_BadKeyC⁄fúm
,

1351 
KEY_ESTABLISHMENT_AVG_TIMEOUT
,

1352 
KEY_ESTABLISHMENT_SUITE
,

1353 
Ál£
, 
z˛_SeqNum
++ );

1354  
ZFaûuª
;

1357 
keyE°ablishRec
[
ödex
].
°©e
 = 
KeyE°ablishSèã_C⁄fúmPídög
;

1358  
ZSuc˚ss
;

1359 
	}
}

1373 
ZSètus_t
 
	$z˛GíîÆ_InôüãKeyE°ablish_R•_CÆcuœãKey
( )

1375 
uöt8
 
ödex
;

1376 
uöt8
 
ªt
,
tmp
;

1377 
uöt8
 
zD©a
[
KEY_ESTABLISH_SHARED_SECRET_LENGTH
];

1378 
uöt8
 *
keyBô
;

1379 
uöt8
 
MACu
[
KEY_ESTABLISH_MAC_LENGTH
];

1386 i‡–(
ödex
 = 
	`z˛GíîÆ_GëKeyE°ablishRecIndex_Sèã
–
KeyE°ablishSèã_KeyCÆcuœãPídög
 ))

1387 >
MAX_KEY_ESTABLISHMENT_REC_ENTRY
 )

1389  
ZFaûuª
;

1393 
tmp
 = 
Ál£
;

1394 
	`ZMacSëReq
–
ZMacRxOnIdÀ
, &
tmp
 );

1397 
ªt
 = 
	`ZSE_ECCKeyBôGíî©e
–
zgSèticPriv©eKey
, 
keyE°ablishRec
[
ödex
].
pLoˇlEPriv©eKey
,

1398 
keyE°ablishRec
[
ödex
].
pLoˇlEPublicKey
,

1399 
keyE°ablishRec
[
ödex
].
pRemŸeCîtifiˇã
,

1400 
keyE°ablishRec
[
ödex
].
pRemŸePublicKey
,

1401 
zgCAPublicKey
, 
zD©a
,

1402 
z˛GíîÆ_KeyE°ablishmít_HashFunc
,

1403 
z˛KeyE°ablish_YõldFunc
, 
z˛KeyE°ablish_YõldLevñ
);

1405 
tmp
 = 
åue
;

1406 
	`ZMacSëReq
–
ZMacRxOnIdÀ
, &
tmp
 );

1408 i‡–
ªt
 !
MCE_SUCCESS
 )

1411 
	`z˛GíîÆ_KeyE°ablish_Síd_Tîmö©eKeyE°ablishmít
–
ZCL_KEY_ESTABLISHMENT_ENDPOINT
,

1412 &(
keyE°ablishRec
[
ödex
].
d°Addr
),

1413 
TîmKeySètus_BadKeyC⁄fúm
,

1414 
KEY_ESTABLISHMENT_AVG_TIMEOUT
,

1415 
KEY_ESTABLISHMENT_SUITE
,

1416 
Ál£
, 
z˛_SeqNum
++ );

1417  
ZFaûuª
;

1423 i‡–(
keyBô
 = 
	`oßl_mem_Æloc
–
KEY_ESTABLISH_KEY_DATA_LENGTH
 +

1424 
KEY_ESTABLISH_MAC_KEY_LENGTH
)Ë=
NULL
 )

1426  
ZCL_STATUS_SOFTWARE_FAILURE
;

1430 
	`z˛GíîÆ_KeyE°ablishmít_KeyDîiveFun˘i⁄
(
zD©a
,

1431 
KEY_ESTABLISH_SHARED_SECRET_LENGTH
,

1432 
keyBô
 );

1435 
	`oßl_mem˝y
–
keyE°ablishRec
[
ödex
].
pMacKey
, 
keyBô
, 
KEY_ESTABLISH_KEY_DATA_LENGTH
);

1436 
	`oßl_mem˝y
–
keyE°ablishRec
[
ödex
].
pKey
, &(
keyBô
[
KEY_ESTABLISH_MAC_KEY_LENGTH
]),

1437 
KEY_ESTABLISH_KEY_DATA_LENGTH
);

1440 
	`z˛GíîÆ_KeyE°ablishmít_Gíî©eMAC
–
ödex
, 
TRUE
, 
MACu
 );

1441 
	`oßl_mem_‰ì
–
keyBô
 );

1444 
	`z˛GíîÆ_KeyE°ablish_Síd_C⁄fúmKey
–
ZCL_KEY_ESTABLISHMENT_ENDPOINT
,

1445 &(
keyE°ablishRec
[
ödex
].
d°Addr
),

1446 
MACu
,

1447 
Ál£
, 
z˛_SeqNum
++ );

1449 
keyE°ablishRec
[
ödex
].
°©e
 = 
KeyE°ablishSèã_C⁄fúmPídög
;

1451  
ZSuc˚ss
;

1453 
	}
}

1464 
	$z˛GíîÆ_InôKeyE°ablishRecTabÀ
( )

1466 
uöt8
 
i
;

1468  
i
 = 0; i < 
MAX_KEY_ESTABLISHMENT_REC_ENTRY
; i++ )

1470 
keyE°ablishRec
[
i
].
d°Addr
.
addrMode
 = 
afAddrNŸPª£¡
;

1471 
keyE°ablishRec
[
i
].
d°Addr
.
addr
.
sh‹tAddr
 = 
INVALID_PARTNER_ADDR
;

1472 
keyE°ablishRec
[
i
].
°©e
 = 
KeyE°ablishSèã_IdÀ
;

1473 
keyE°ablishRec
[
i
].
≠pTaskID
 = 
INVALID_TASK_ID
;

1475 
	}
}

1488 
uöt8
 
	$z˛GíîÆ_GëKeyE°ablishRecIndex
–
uöt16
 
∑π√rAddªss
 )

1490 
uöt8
 
i
;

1493  
i
 = 0; i < 
MAX_KEY_ESTABLISHMENT_REC_ENTRY
 ; i++ )

1495 i‡–
keyE°ablishRec
[
i
].
d°Addr
.
addr
.
sh‹tAddr
 =
∑π√rAddªss
 )

1502  
i
;

1503 
	}
}

1515 
uöt8
 
	$z˛GíîÆ_GëKeyE°ablishRecIndex_Sèã
–
KeyE°ablishSèã_t
 
°©e
 )

1517 
uöt8
 
i
;

1520  
i
 = 0; i < 
MAX_KEY_ESTABLISHMENT_REC_ENTRY
 ; i++ )

1522 i‡–
keyE°ablishRec
[
i
].
°©e
 == state )

1529  
i
;

1530 
	}
}

1541 
ZSètus_t
 
	$z˛GíîÆ_RemoveKeyE°ablishRec
–
uöt16
 
∑π√rAddªss
 )

1543 
uöt8
 
ödex
;

1545 
ödex
 = 
	`z˛GíîÆ_GëKeyE°ablishRecIndex
–
∑π√rAddªss
 );

1547 i‡–
ödex
 < 
MAX_KEY_ESTABLISHMENT_REC_ENTRY
 )

1550 
keyE°ablishRec
[
ödex
].
d°Addr
.
addrMode
 = 
afAddrNŸPª£¡
;

1551 
keyE°ablishRec
[
ödex
].
d°Addr
.
addr
.
sh‹tAddr
 = 
INVALID_PARTNER_ADDR
;

1554 
	`oßl_mem_‰ì
–
keyE°ablishRec
[
ödex
].
pLoˇlEPriv©eKey
 );

1556  
ZSuc˚ss
;

1559  
ZFaûuª
;

1560 
	}
}

1576 
uöt8
 
	$z˛GíîÆ_AddKeyE°ablishRec
–
afAddrTy≥_t
 *
addr
 )

1578 
uöt8
 
ödex
;

1579 
uöt8
 *
pBuf
;

1583 i‡––
ödex
 = 
	`z˛GíîÆ_GëKeyE°ablishRecIndex
(
addr
->addr.
sh‹tAddr
) )

1584 < 
MAX_KEY_ESTABLISHMENT_REC_ENTRY
 )

1587 
	`z˛GíîÆ_RemoveKeyE°ablishRec
–
addr
->addr.
sh‹tAddr
 );

1591 i‡–(
ödex
 = 
	`z˛GíîÆ_GëKeyE°ablishRecIndex
(
INVALID_PARTNER_ADDR
))

1592 < 
MAX_KEY_ESTABLISHMENT_REC_ENTRY
 )

1594 
	`oßl_mem£t
–&(
keyE°ablishRec
[
ödex
]), 0,  ( 
z˛KeyE°ablishRec_t
 ) );

1597 
keyE°ablishRec
[
ödex
].
d°Addr
.
addrMode
 = 
addr
->addrMode;

1598 
keyE°ablishRec
[
ödex
].
d°Addr
.
addr
.
sh‹tAddr
 =áddr->addr.shortAddr;

1599 
keyE°ablishRec
[
ödex
].
d°Addr
.
ídPoöt
 = 
addr
->endPoint;

1600 
keyE°ablishRec
[
ödex
].
age
 = 
KEY_ESTABLISHMENT_REC_EXPIRY_TIME
;

1601 
keyE°ablishRec
[
ödex
].
°©e
 = 
KeyE°ablishSèã_IdÀ
;

1607 if––
pBuf
 = 
	`oßl_mem_Æloc
–
ZCL_KEY_ESTABLSIHMENT_PRIVATE_KEY_LENTGH
 +

1608 
ZCL_KEY_ESTABLISHMENT_PUBLIC_KEY_LENGTH
 +

1609 
ZCL_KEY_ESTABLISHMENT_PUBLIC_KEY_LENGTH
 +

1610 
ZCL_KEY_ESTABLISHMENT_CERTIFICATE_LENGTH
 +

1611 
KEY_ESTABLISH_KEY_DATA_LENGTH
 +

1612 
KEY_ESTABLISH_MAC_KEY_LENGTH
 )Ë!
NULL
 )

1614 
keyE°ablishRec
[
ödex
].
pLoˇlEPriv©eKey
 = 
pBuf
;

1615 
pBuf
 +
ZCL_KEY_ESTABLSIHMENT_PRIVATE_KEY_LENTGH
;

1616 
keyE°ablishRec
[
ödex
].
pLoˇlEPublicKey
 = 
pBuf
;

1617 
pBuf
 +
ZCL_KEY_ESTABLISHMENT_PUBLIC_KEY_LENGTH
;

1618 
keyE°ablishRec
[
ödex
].
pRemŸePublicKey
 = 
pBuf
;

1619 
pBuf
 +
ZCL_KEY_ESTABLISHMENT_PUBLIC_KEY_LENGTH
;

1620 
keyE°ablishRec
[
ödex
].
pRemŸeCîtifiˇã
 = 
pBuf
;

1621 
pBuf
 +
ZCL_KEY_ESTABLISHMENT_CERTIFICATE_LENGTH
;

1622 
keyE°ablishRec
[
ödex
].
pKey
 = 
pBuf
;

1623 
pBuf
 +
KEY_ESTABLISH_KEY_DATA_LENGTH
;

1624 
keyE°ablishRec
[
ödex
].
pMacKey
 = 
pBuf
;

1627  
ZMemEº‹
;

1630  
ödex
;

1631 
	}
}

1644 
	$z˛GíîÆ_AgeKeyE°ablishRec
( )

1646 
uöt8
 
i
;

1648  
i
 = 0; i < 
MAX_KEY_ESTABLISHMENT_REC_ENTRY
; i++ )

1651 i‡(
keyE°ablishRec
[
i
].
d°Addr
.
addrMode
 =
afAddrNŸPª£¡
)

1654 i‡(--(
keyE°ablishRec
[
i
].
age
) == 0)

1656 
keyE°ablishRec
[
i
].
d°Addr
.
addrMode
 = 
afAddrNŸPª£¡
;

1657 
keyE°ablishRec
[
i
].
d°Addr
.
addr
.
sh‹tAddr
 = 
INVALID_PARTNER_ADDR
;

1660 
	}
}

1672 
	$z˛GíîÆ_KeyE°ablishmít_GëR™dom
(*
buf„r
, 
Àn
)

1674 
uöt8
 
i
;

1675 
uöt8
 *
pBuf
;

1677 
pBuf
 = 
buf„r
;

1679  
i
 = 0; i < 
Àn
; i++ )

1681 *
pBuf
++ = 
	`LO_UINT16
–
	`oßl_ønd
() );

1684  
MCE_SUCCESS
;

1685 
	}
}

1698 
	$z˛GíîÆ_KeyE°ablishmít_HashFunc
(*
dige°
, 
Àn
, *
d©a
)

1700 
Àn
 *= 8;

1701 
	`s•MMOHash
–
NULL
, 0, 
d©a
, (
uöt16
)
Àn
, 
dige°
 );

1702  
MCE_SUCCESS
;

1703 
	}
}

1719 
	$z˛GíîÆ_KeyE°ablishmít_KeyDîiveFun˘i⁄
–
uöt8
 *
zD©a
,

1720 
uöt8
 
keyBôLí
,

1721 
uöt8
 *
keyBô
 )

1723 
uöt8
 
hashCou¡î
[4] = {0x00, 0x00, 0x00, 0x01};

1724 
uöt8
 
hashedD©a
[
KEY_ESTABLISH_SHARED_SECRET_LENGTH
 + 4];

1725 
uöt8
 
bôLí
;

1727 
bôLí
 = (
keyBôLí
 + 4 ) * 8;

1730 
	`oßl_mem˝y
–
hashedD©a
, 
zD©a
, 
KEY_ESTABLISH_SHARED_SECRET_LENGTH
 );

1731 
	`oßl_mem˝y
–&(
hashedD©a
[
KEY_ESTABLISH_SHARED_SECRET_LENGTH
]), 
hashCou¡î
, 4);

1733 
	`s•MMOHash
(
NULL
, 0, 
hashedD©a
, 
bôLí
, 
keyBô
);

1736 
hashedD©a
[
KEY_ESTABLISH_SHARED_SECRET_LENGTH
 + 3] = 0x02;

1738 
	`s•MMOHash
(
NULL
, 0, 
hashedD©a
, 
bôLí
, &(
keyBô
[
KEY_ESTABLISH_KEY_DATA_LENGTH
]));

1739 
	}
}

1755 
ZSètus_t
 
	$z˛GíîÆ_KeyE°ablishmít_Gíî©eMAC
(
uöt8
 
ªcIndex
,

1756 
uöt8
 
ifMACu
,

1757 
uöt8
 *
MAC
)

1759 
uöt8
 
M
;

1760 
uöt8
 *
hashBuf
;

1761 
uöt16
 
bufLí
;

1764 if–
ifMACu
 =
TRUE
 )

1766 
M
 = 0x02;

1770 
M
 = 0x03;

1775 i‡–
keyE°ablishRec
[
ªcIndex
].
∑π√rExtAddr
 =
NULL
 )

1777  
ZFaûuª
;

1781 
bufLí
 = (1 + (
Z_EXTADDR_LEN
 * 2Ë+ (
ZCL_KEY_ESTABLISHMENT_PUBLIC_KEY_LENGTH
 * 2));

1782 if––
hashBuf
 = 
	`oßl_mem_Æloc
–(
bufLí
Ë)Ë=
NULL
 )

1784  
ZMemEº‹
;

1788 
hashBuf
[0] = 
M
;

1789 
bufLí
 = bufLen * 8;

1791 i‡–(
keyE°ablishRec
[
ªcIndex
].
rﬁe
 =
KEY_ESTABLISHMENT_INITIATOR
 && 
ifMACu
 =
TRUE
) ||

1792 (
keyE°ablishRec
[
ªcIndex
].
rﬁe
 =
KEY_ESTABLISHMENT_RESPONDER
 && 
ifMACu
 =
FALSE
))

1796 
	`SSP_MemCpyRevî£
–&(
hashBuf
[1]), 
	`NLME_GëExtAddr
(), 
Z_EXTADDR_LEN
);

1797 
	`SSP_MemCpyRevî£
–&(
hashBuf
[1+
Z_EXTADDR_LEN
]), 
keyE°ablishRec
[
ªcIndex
].
∑π√rExtAddr
,

1798 
Z_EXTADDR_LEN
);

1799 
	`oßl_mem˝y
–&(
hashBuf
[1 + (2 * 
Z_EXTADDR_LEN
)]),

1800 
keyE°ablishRec
[
ªcIndex
].
pLoˇlEPublicKey
,

1801 
ZCL_KEY_ESTABLISHMENT_PUBLIC_KEY_LENGTH
 );

1802 
	`oßl_mem˝y
–&(
hashBuf
[1 + (2 * 
Z_EXTADDR_LEN
Ë+ 
ZCL_KEY_ESTABLISHMENT_PUBLIC_KEY_LENGTH
]),

1803 
keyE°ablishRec
[
ªcIndex
].
pRemŸePublicKey
, 
ZCL_KEY_ESTABLISHMENT_PUBLIC_KEY_LENGTH
 );

1805 
	`SSP_KeyedHash
 (
hashBuf
, 
bufLí
, 
keyE°ablishRec
[
ªcIndex
].
pMacKey
, 
MAC
);

1811 
	`SSP_MemCpyRevî£
–&(
hashBuf
[1]), 
keyE°ablishRec
[
ªcIndex
].
∑π√rExtAddr
,

1812 
Z_EXTADDR_LEN
);

1813 
	`SSP_MemCpyRevî£
–&(
hashBuf
[1 + 
Z_EXTADDR_LEN
]), 
	`NLME_GëExtAddr
(), Z_EXTADDR_LEN);

1814 
	`oßl_mem˝y
–&(
hashBuf
[ 1 + (2 * 
Z_EXTADDR_LEN
)]),

1815 
keyE°ablishRec
[
ªcIndex
].
pRemŸePublicKey
,

1816 
ZCL_KEY_ESTABLISHMENT_PUBLIC_KEY_LENGTH
 );

1817 
	`oßl_mem˝y
–&(
hashBuf
[1 + (2 * 
Z_EXTADDR_LEN
Ë+ 
ZCL_KEY_ESTABLISHMENT_PUBLIC_KEY_LENGTH
]),

1818 
keyE°ablishRec
[
ªcIndex
].
pLoˇlEPublicKey
,

1819 
ZCL_KEY_ESTABLISHMENT_PUBLIC_KEY_LENGTH
 );

1820 
	`SSP_KeyedHash
 (
hashBuf
, 
bufLí
, 
keyE°ablishRec
[
ªcIndex
].
pMacKey
, 
MAC
);

1823 
	`oßl_mem_‰ì
(
hashBuf
);

1824  
ZSuc˚ss
;

1825 
	}
}

1842 
ZSètus_t
 
	$z˛GíîÆ_KeyE°ablishmít_ECDSASign
–
uöt8
 *
öput
, uöt8 
öputLí
,

1843 
uöt8
 *
ouçut
)

1846 
uöt8
 
msgDige°
[
KEY_ESTABLISH_AES_MMO_HASH_SIZE
];

1847 
uöt16
 
bôLí
;

1848 #i‡
	`deföed
 (
ZCL_KEY_ESTABLISH
)

1849 
uöt8
 
°©us
;

1851 
bôLí
 = 
öputLí
 * 8;

1854 
	`s•MMOHash
(
NULL
, 0, 
öput
, 
bôLí
, 
msgDige°
);

1856 #i‡
	`deföed
 (
ZCL_KEY_ESTABLISH
)

1857 
°©us
 = 
	`ZSE_ECDSASign
–(*)
zgSèticPriv©eKey
, (*)
msgDige°
,

1858 
z˛GíîÆ_KeyE°ablishmít_GëR™dom
,

1859 (*)
ouçut
, (*)ouçuà+ 
KEY_ESTABLISH_POINT_ORDER_SIZE
,

1860 
z˛KeyE°ablish_YõldFunc
, 
z˛KeyE°ablish_YõldLevñ
 );

1861 i‡(
°©us
 =
MCE_SUCCESS
 )

1862  
ZSuc˚ss
;

1864  
ZFaûuª
;

1865 
	}
}

1881 
ZSètus_t
 
	$z˛GíîÆ_KeyE°ablishmít_ECDSAVîify
–
uöt8
 *
öput
, uöt8 
öputLí
,

1882 
uöt8
 *
sig«tuª
)

1885 
uöt8
 
msgDige°
[
KEY_ESTABLISH_AES_MMO_HASH_SIZE
];

1886 
uöt16
 
bôLí
;

1887 #i‡
	`deföed
 (
ZCL_KEY_ESTABLISH
)

1888 
uöt8
 
ªt
;

1890 
bôLí
 = 
öputLí
 * 8;

1893 
	`s•MMOHash
(
NULL
, 0, 
öput
, 
bôLí
, 
msgDige°
);

1895 #i‡
	`deföed
 (
ZCL_KEY_ESTABLISH
)

1896 
ªt
 = 
	`ZSE_ECDSAVîify
–(*)
zgRemŸePublicKey
, (*)
msgDige°
,

1897 (*)
sig«tuª
, (*)sig«tuª + 
KEY_ESTABLISH_POINT_ORDER_SIZE
,

1898 
z˛KeyE°ablish_YõldFunc
, 
z˛KeyE°ablish_YõldLevñ
 );

1899 i‡–
ªt
 =
MCE_SUCCESS
 )

1900  
ZSuc˚ss
;

1903  
ZFaûuª
;

1905 
	}
}

	@Components/stack/zcl/zcl_key_establish.h

40 #i‚de‡
ZCL_KEY_ESTABLISH_H


41 
	#ZCL_KEY_ESTABLISH_H


	)

43 #ifde‡
__˝lu•lus


51 
	~"z˛.h
"

52 
	~"ecˇpi.h
"

58 
	#ZCL_KEY_ESTABLISHMENT_ENDPOINT
 10

59 

	)

61 
	#KEY_ESTABLISHMENT_REC_AGING_EVT
 0x01

	)

62 
	#KEY_ESTABLISHMENT_CMD_PROCESS_EVT
 0x02

	)

63 
	#KEY_ESTABLISHMENT_RSP_PROCESS_EVT
 0x04

	)

64 
	#KEY_ESTABLISHMENT_REC_AGING_INTERVAL
 1000

	)

65 
	#KEY_ESTABLISHMENT_WAIT_PERIOD
 500

	)

68 
	#ATTRID_KEY_ESTABLISH_SUITE
 0x0000

	)

69 
	#CERTIFICATE_BASED_KEY_ESTABLISHMENT
 0x0000

	)

72 
	#COMMAND_INITIATE_KEY_ESTABLISHMENT
 0x00

	)

73 
	#COMMAND_EPHEMERAL_DATA_REQUEST
 0x01

	)

74 
	#COMMAND_CONFIRM_KEY
 0x02

	)

75 
	#COMMAND_TERMINATE_KEY_ESTABLISHMENT
 0x03

	)

76 
	#COMMAND_INITIATE_KEY_ESTABLISHMENT_RESPONSE
 0x00

	)

77 
	#COMMAND_EPHEMERAL_DATA_RESPONSE
 0x01

	)

78 
	#COMMAND_CONFIRM_KEY_RESPONSE
 0x02

	)

80 
	#COMMAND_GET_LINK_KEY
 0x04

	)

83 
	#KEY_ESTABLISH_SHARED_SECRET_LENGTH
 21

	)

84 
	#KEY_ESTABLISH_KEY_DATA_LENGTH
 16

	)

85 
	#KEY_ESTABLISH_MAC_KEY_LENGTH
 16

	)

86 
	#KEY_ESTABLISH_MAC_LENGTH
 16

	)

87 
	#KEY_ESTABLISH_POINT_ORDER_SIZE
 21

	)

88 
	#KEY_ESTABLISH_AES_MMO_HASH_SIZE
 16

	)

90 
	#KEY_ESTABLISH_CERT_EXT_ADDR_IDX
 22

	)

91 
	#KEY_ESTABLISH_CERT_ISSUER_IDX
 30

	)

92 
	#KEY_ESTABLISH_CERT_IDX
 4

	)

93 
	#KEY_ESTABLISH_CERT_ISSUER_LENTGH
 
Z_EXTADDR_LEN


	)

96 
	#MAX_KEY_ESTABLISHMENT_REC_ENTRY
 2

	)

98 
	#INVALID_PARTNER_ADDR
 0xFFFE

	)

101 
	#KEY_ESTABLISHMENT_INITIATOR
 0

	)

102 
	#KEY_ESTABLISHMENT_RESPONDER
 1

	)

104 
	#KEY_ESTABLISHMENT_REC_EXPIRY_TIME
 0xFF

105 

	)

107 #i‡!
deföed
 ( 
ZCL_KEY_ESTABLISHMENT_KEY_GENERATE_TIMEOUT
 )

108 
	#ZCL_KEY_ESTABLISHMENT_KEY_GENERATE_TIMEOUT
 4

	)

110 #i‡!
deföed
 ( 
ZCL_KEY_ESTABLISHMENT_MAC_GENERATE_TIMEOUT
 )

111 
	#ZCL_KEY_ESTABLISHMENT_MAC_GENERATE_TIMEOUT
 1

	)

113 #i‡!
deföed
 ( 
ZCL_KEY_ESTABLISHMENT_EKEY_GENERATE_TIMEOUT
 )

114 
	#ZCL_KEY_ESTABLISHMENT_EKEY_GENERATE_TIMEOUT
 1

	)

124 
afAddrTy≥_t
 
d°Addr
;

125 
uöt8
 
œ°SeqNum
;

126 
uöt8
 
≠pTaskID
;

127 
uöt8
 
∑π√rExtAddr
[
Z_EXTADDR_LEN
];

128 
uöt8
 
rﬁe
;

130 
uöt8
 
age
;

131 
uöt8
 
°©e
;

134 
uöt8
 *
pLoˇlEPriv©eKey
;

135 
uöt8
 *
pLoˇlEPublicKey
;

136 
uöt8
 *
pRemŸePublicKey
;

137 
uöt8
 *
pRemŸeCîtifiˇã
;

139 
uöt8
 *
pKey
;

140 
uöt8
 *
pMacKey
;

142 } 
	tz˛KeyE°ablishRec_t
;

147 
KeyE°ablishSèã_IdÀ
 = 0,

148 
KeyE°ablishSèã_InôüãPídög
,

149 
KeyE°ablishSèã_ED©aPídög
,

150 
KeyE°ablishSèã_KeyCÆcuœãPídög
,

151 
KeyE°ablishSèã_C⁄fúmPídög
,

152 
KeyE°ablishSèã_Tîmö©i⁄Pídög


153 } 
	tKeyE°ablishSèã_t
;

158 
TîmKeySètus_Suc˚ss
 = 0,

159 
TîmKeySètus_UnknowIssuî
,

160 
TîmKeySètus_BadKeyC⁄fúm
,

161 
TîmKeySètus_BadMesßge
,

162 
TîmKeySètus_NoResour˚s
,

163 
TîmKeySètus_UnSuµ‹ãdSuôe


164 } 
	tTîmKeySètus_t
;

170 
oßl_evít_hdr_t
 
hdr
;

171 
uöt8
 
waôTime
;

172 
uöt16
 
keyE°ablishmítSuôe
;

173 } 
	tkeyE°ablishmítInd_t
;

187 
z˛GíîÆ_KeyE°ablish_Inô
–
uöt8
 
èsk_id
 );

192 
uöt16
 
z˛KeyE°ablish_evít_lo›
–
uöt8
 
èsk_id
, uöt16 
evíts
 );

197 
ZSètus_t
 
z˛GíîÆ_KeyE°ablish_InôüãKeyE°ablishmít
(
uöt8
 
≠pTaskID
,

198 
afAddrTy≥_t
 *
∑π√rAddr
,

199 
uöt8
 
£qNum
);

203 
ZSètus_t
 
z˛GíîÆ_KeyE°ablish_Síd_InôüãKeyE°ablishmít
–
uöt8
 
§cEP
, 
afAddrTy≥_t
 *
d°Addr
,

204 
uöt16
 
keyE°ablishmítSuôe
,

205 
uöt8
 
keyGíî©eTime
,

206 
uöt8
 
macGíî©eTime
,

207 
uöt8
 *
˚πifiˇã
,

208 
uöt8
 
dißbÀDeÁu…R•
, uöt8 
£qNum
 );

213 
ZSètus_t
 
z˛GíîÆ_KeyE°ablish_Síd_EphemîÆD©aReq
–
uöt8
 
§cEP
, 
afAddrTy≥_t
 *
d°Addr
,

214 
uöt8
 *
eD©a
,

215 
uöt8
 
dißbÀDeÁu…R•
, uöt8 
£qNum
 );

220 
ZSètus_t
 
z˛GíîÆ_KeyE°ablish_Síd_C⁄fúmKey
–
uöt8
 
§cEP
, 
afAddrTy≥_t
 *
d°Addr
,

221 
uöt8
 *
mac
,

222 
uöt8
 
dißbÀDeÁu…R•
, uöt8 
£qNum
 );

227 
ZSètus_t
 
z˛GíîÆ_KeyE°ablish_Síd_Tîmö©eKeyE°ablishmít
–
uöt8
 
§cEP
,

228 
afAddrTy≥_t
 *
d°Addr
,

229 
TîmKeySètus_t
 
°©us
,

230 
uöt8
 
waôTime
,

231 
uöt16
 
keyE°ablishmítSuôe
,

232 
uöt8
 
dißbÀDeÁu…R•
, uöt8 
£qNum
 );

237 
ZSètus_t
 
z˛GíîÆ_KeyE°ablish_Síd_InôüãKeyE°ablishmítR•
–
uöt8
 
§cEP
, 
afAddrTy≥_t
 *
d°Addr
,

238 
uöt16
 
keyE°ablishmítSuôe
,

239 
uöt8
 
keyGíî©eTime
,

240 
uöt8
 
macGíî©eTime
,

241 
uöt8
 *
˚πifiˇã
,

242 
uöt8
 
dißbÀDeÁu…R•
, uöt8 
£qNum
 );

247 
ZSètus_t
 
z˛GíîÆ_KeyE°ablish_Síd_EphemîÆD©aR•
–
uöt8
 
§cEP
, 
afAddrTy≥_t
 *
d°Addr
,

248 
uöt8
 *
eD©a
,

249 
uöt8
 
dißbÀDeÁu…R•
, uöt8 
£qNum
 );

254 
ZSètus_t
 
z˛GíîÆ_KeyE°ablish_Síd_C⁄fúmKeyR•
–
uöt8
 
§cEP
, 
afAddrTy≥_t
 *
d°Addr
,

255 
uöt8
 *
mac
,

256 
uöt8
 
dißbÀDeÁu…R•
, uöt8 
£qNum
 );

261 
ZSètus_t
 
z˛GíîÆ_KeyE°ablishmít_ECDSASign
–
uöt8
 *
öput
, uöt8 
öputLí
,

262 
uöt8
 *
ouçut
);

267 
ZSètus_t
 
z˛GíîÆ_KeyE°ablishmít_ECDSAVîify
–
uöt8
 *
öput
, uöt8 
öputLí
,

268 
uöt8
 *
sig«tuª
);

273 
z˛GíîÆ_KeyE°ablishmít_RegYõldCB
–
YõldFunc
 *
pFnYõld
,

274 
uöt8
 
yõldLevñ
 );

279 #ifde‡
__˝lu•lus


	@Components/stack/zcl/zcl_lighting.c

43 
	~"ZComDef.h
"

44 
	~"OSAL.h
"

45 
	~"z˛.h
"

46 
	~"z˛_gíîÆ.h
"

47 
	~"z˛_lightög.h
"

49 #i‡
deföed
 ( 
INTER_PAN
 )

50 
	~"°ub_≠s.h
"

64 
	sz˛LightögCBRec


66 
z˛LightögCBRec
 *
	m√xt
;

67 
uöt8
 
	mídpoöt
;

68 
z˛Lightög_AµCÆlbacks_t
 *
	mCBs
;

69 } 
	tz˛LightögCBRec_t
;

82 
z˛LightögCBRec_t
 *
	gz˛LightögCBs
 = (z˛LightögCBRec_à*)
NULL
;

83 
uöt8
 
	gz˛LightögPlugöRegi°ed
 = 
FALSE
;

88 
ZSètus_t
 
z˛Lightög_HdlIncomög
–
z˛Incomög_t
 *
pInHdÃMsg
 );

89 
ZSètus_t
 
z˛Lightög_HdlInS≥cificComm™ds
–
z˛Incomög_t
 *
pInMsg
 );

90 
z˛Lightög_AµCÆlbacks_t
 *
z˛Lightög_FödCÆlbacks
–
uöt8
 
ídpoöt
 );

92 
ZSètus_t
 
z˛Lightög_Pro˚ssInCﬁ‹C⁄åﬁCmds
–
z˛Incomög_t
 *
pInMsg
, 
z˛Lightög_AµCÆlbacks_t
 *
pCBs
 );

94 
ZSètus_t
 
z˛Lightög_Pro˚ssInCmd_Cﬁ‹C⁄åﬁ_MoveToHue
–
z˛Incomög_t
 *
pInMsg
, 
z˛Lightög_AµCÆlbacks_t
 *
pCBs
 );

95 
ZSètus_t
 
z˛Lightög_Pro˚ssInCmd_Cﬁ‹C⁄åﬁ_MoveHue
–
z˛Incomög_t
 *
pInMsg
, 
z˛Lightög_AµCÆlbacks_t
 *
pCBs
 );

96 
ZSètus_t
 
z˛Lightög_Pro˚ssInCmd_Cﬁ‹C⁄åﬁ_SãpHue
–
z˛Incomög_t
 *
pInMsg
, 
z˛Lightög_AµCÆlbacks_t
 *
pCBs
 );

97 
ZSètus_t
 
z˛Lightög_Pro˚ssInCmd_Cﬁ‹C⁄åﬁ_MoveToS©uøti⁄
–
z˛Incomög_t
 *
pInMsg
, 
z˛Lightög_AµCÆlbacks_t
 *
pCBs
 );

98 
ZSètus_t
 
z˛Lightög_Pro˚ssInCmd_Cﬁ‹C⁄åﬁ_MoveS©uøti⁄
–
z˛Incomög_t
 *
pInMsg
, 
z˛Lightög_AµCÆlbacks_t
 *
pCBs
 );

99 
ZSètus_t
 
z˛Lightög_Pro˚ssInCmd_Cﬁ‹C⁄åﬁ_SãpS©uøti⁄
–
z˛Incomög_t
 *
pInMsg
, 
z˛Lightög_AµCÆlbacks_t
 *
pCBs
 );

100 
ZSètus_t
 
z˛Lightög_Pro˚ssInCmd_Cﬁ‹C⁄åﬁ_MoveToHueAndS©uøti⁄
–
z˛Incomög_t
 *
pInMsg
, 
z˛Lightög_AµCÆlbacks_t
 *
pCBs
 );

101 
ZSètus_t
 
z˛Lightög_Pro˚ssInCmd_Cﬁ‹C⁄åﬁ_MoveToCﬁ‹
–
z˛Incomög_t
 *
pInMsg
, 
z˛Lightög_AµCÆlbacks_t
 *
pCBs
 );

102 
ZSètus_t
 
z˛Lightög_Pro˚ssInCmd_Cﬁ‹C⁄åﬁ_MoveCﬁ‹
–
z˛Incomög_t
 *
pInMsg
, 
z˛Lightög_AµCÆlbacks_t
 *
pCBs
 );

103 
ZSètus_t
 
z˛Lightög_Pro˚ssInCmd_Cﬁ‹C⁄åﬁ_SãpCﬁ‹
–
z˛Incomög_t
 *
pInMsg
, 
z˛Lightög_AµCÆlbacks_t
 *
pCBs
 );

104 
ZSètus_t
 
z˛Lightög_Pro˚ssInCmd_Cﬁ‹C⁄åﬁ_MoveToCﬁ‹Tem≥øtuª
–
z˛Incomög_t
 *
pInMsg
, 
z˛Lightög_AµCÆlbacks_t
 *
pCBs
 );

117 
ZSètus_t
 
	$z˛Lightög_Regi°îCmdCÆlbacks
–
uöt8
 
ídpoöt
, 
z˛Lightög_AµCÆlbacks_t
 *
ˇŒbacks
 )

119 
z˛LightögCBRec_t
 *
pNewIãm
;

120 
z˛LightögCBRec_t
 *
pLo›
;

123 i‡–
z˛LightögPlugöRegi°ed
 =
FALSE
 )

125 
	`z˛_ªgi°îPlugö
–
ZCL_CLUSTER_ID_LIGHTING_COLOR_CONTROL
,

126 
ZCL_CLUSTER_ID_LIGHTING_BALLAST_CONFIG
,

127 
z˛Lightög_HdlIncomög
 );

128 
z˛LightögPlugöRegi°ed
 = 
TRUE
;

132 
pNewIãm
 = 
	`oßl_mem_Æloc
––
z˛LightögCBRec_t
 ) );

133 i‡–
pNewIãm
 =
NULL
 )

134  (
ZMemEº‹
);

136 
pNewIãm
->
√xt
 = (
z˛LightögCBRec_t
 *)
NULL
;

137 
pNewIãm
->
ídpoöt
 =Éndpoint;

138 
pNewIãm
->
CBs
 = 
ˇŒbacks
;

141 i‡–
z˛LightögCBs
 =
NULL
 )

143 
z˛LightögCBs
 = 
pNewIãm
;

148 
pLo›
 = 
z˛LightögCBs
;

149  
pLo›
->
√xt
 !
NULL
 )

150 
pLo›
 =ÖLo›->
√xt
;

153 
pLo›
->
√xt
 = 
pNewIãm
;

156  ( 
ZSuc˚ss
 );

157 
	}
}

174 
ZSètus_t
 
	$z˛Lightög_Cﬁ‹C⁄åﬁ_Síd_MoveToHueCmd
–
uöt8
 
§cEP
, 
afAddrTy≥_t
 *
d°Addr
,

175 
uöt8
 
hue
, uöt8 
dúe˘i⁄
, 
uöt16
 
å™sôi⁄Time
,

176 
uöt8
 
dißbÀDeÁu…R•
, uöt8 
£qNum
 )

178 
uöt8
 
buf
[4];

180 
buf
[0] = 
hue
;

181 
buf
[1] = 
dúe˘i⁄
;

182 
buf
[2] = 
	`LO_UINT16
–
å™sôi⁄Time
 );

183 
buf
[3] = 
	`HI_UINT16
–
å™sôi⁄Time
 );

185  
	`z˛_SídComm™d
–
§cEP
, 
d°Addr
, 
ZCL_CLUSTER_ID_LIGHTING_COLOR_CONTROL
,

186 
COMMAND_LIGHTING_MOVE_TO_HUE
, 
TRUE
,

187 
ZCL_FRAME_CLIENT_SERVER_DIR
, 
dißbÀDeÁu…R•
, 0, 
£qNum
, 4, 
buf
 );

188 
	}
}

206 
ZSètus_t
 
	$z˛Lightög_Cﬁ‹C⁄åﬁ_Síd_MoveHueCmd
–
uöt8
 
§cEP
, 
afAddrTy≥_t
 *
d°Addr
,

207 
uöt8
 
moveMode
, uöt8 
øã
,

208 
uöt8
 
dißbÀDeÁu…R•
, uöt8 
£qNum
 )

210 
uöt8
 
buf
[2];

212 
buf
[0] = 
moveMode
;

213 
buf
[1] = 
øã
;

215  
	`z˛_SídComm™d
–
§cEP
, 
d°Addr
, 
ZCL_CLUSTER_ID_LIGHTING_COLOR_CONTROL
,

216 
COMMAND_LIGHTING_MOVE_HUE
, 
TRUE
,

217 
ZCL_FRAME_CLIENT_SERVER_DIR
, 
dißbÀDeÁu…R•
, 0, 
£qNum
, 2, 
buf
 );

218 
	}
}

235 
ZSètus_t
 
	$z˛Lightög_Cﬁ‹C⁄åﬁ_Síd_SãpHueCmd
–
uöt8
 
§cEP
, 
afAddrTy≥_t
 *
d°Addr
,

236 
uöt8
 
°ïMode
, uöt8 
°ïSize
, uöt8 
å™sôi⁄Time
,

237 
uöt8
 
dißbÀDeÁu…R•
, uöt8 
£qNum
 )

239 
uöt8
 
buf
[3];

241 
buf
[0] = 
°ïMode
;

242 
buf
[1] = 
°ïSize
;

243 
buf
[2] = 
å™sôi⁄Time
;

245  
	`z˛_SídComm™d
–
§cEP
, 
d°Addr
, 
ZCL_CLUSTER_ID_LIGHTING_COLOR_CONTROL
,

246 
COMMAND_LIGHTING_STEP_HUE
, 
TRUE
,

247 
ZCL_FRAME_CLIENT_SERVER_DIR
, 
dißbÀDeÁu…R•
, 0, 
£qNum
, 3, 
buf
 );

248 
	}
}

265 
ZSètus_t
 
	$z˛Lightög_Cﬁ‹C⁄åﬁ_Síd_MoveToS©uøti⁄Cmd
–
uöt8
 
§cEP
, 
afAddrTy≥_t
 *
d°Addr
,

266 
uöt8
 
ßtuøti⁄
, 
uöt16
 
å™sôi⁄Time
,

267 
uöt8
 
dißbÀDeÁu…R•
, uöt8 
£qNum
 )

269 
uöt8
 
buf
[3];

271 
buf
[0] = 
ßtuøti⁄
;

272 
buf
[1] = 
	`LO_UINT16
–
å™sôi⁄Time
 );

273 
buf
[2] = 
	`HI_UINT16
–
å™sôi⁄Time
 );

275  
	`z˛_SídComm™d
–
§cEP
, 
d°Addr
, 
ZCL_CLUSTER_ID_LIGHTING_COLOR_CONTROL
,

276 
COMMAND_LIGHTING_MOVE_TO_SATURATION
, 
TRUE
,

277 
ZCL_FRAME_CLIENT_SERVER_DIR
, 
dißbÀDeÁu…R•
, 0, 
£qNum
, 3, 
buf
 );

278 
	}
}

295 
ZSètus_t
 
	$z˛Lightög_Cﬁ‹C⁄åﬁ_Síd_MoveS©uøti⁄Cmd
–
uöt8
 
§cEP
, 
afAddrTy≥_t
 *
d°Addr
,

296 
uöt8
 
moveMode
, uöt8 
øã
,

297 
uöt8
 
dißbÀDeÁu…R•
, uöt8 
£qNum
 )

299 
uöt8
 
buf
[2];

301 
buf
[0] = 
moveMode
;

302 
buf
[1] = 
øã
;

304  
	`z˛_SídComm™d
–
§cEP
, 
d°Addr
, 
ZCL_CLUSTER_ID_LIGHTING_COLOR_CONTROL
,

305 
COMMAND_LIGHTING_MOVE_SATURATION
, 
TRUE
,

306 
ZCL_FRAME_CLIENT_SERVER_DIR
, 
dißbÀDeÁu…R•
, 0, 
£qNum
, 2, 
buf
 );

307 
	}
}

324 
ZSètus_t
 
	$z˛Lightög_Cﬁ‹C⁄åﬁ_Síd_SãpS©uøti⁄Cmd
–
uöt8
 
§cEP
, 
afAddrTy≥_t
 *
d°Addr
,

325 
uöt8
 
°ïMode
, uöt8 
°ïSize
, uöt8 
å™sôi⁄Time
,

326 
uöt8
 
dißbÀDeÁu…R•
, uöt8 
£qNum
 )

328 
uöt8
 
buf
[3];

330 
buf
[0] = 
°ïMode
;

331 
buf
[1] = 
°ïSize
;

332 
buf
[2] = 
å™sôi⁄Time
;

334  
	`z˛_SídComm™d
–
§cEP
, 
d°Addr
, 
ZCL_CLUSTER_ID_LIGHTING_COLOR_CONTROL
,

335 
COMMAND_LIGHTING_STEP_SATURATION
, 
TRUE
,

336 
ZCL_FRAME_CLIENT_SERVER_DIR
, 
dißbÀDeÁu…R•
, 0, 
£qNum
, 3, 
buf
 );

337 
	}
}

354 
ZSètus_t
 
	$z˛Lightög_Cﬁ‹C⁄åﬁ_Síd_MoveToHueAndS©uøti⁄Cmd
–
uöt8
 
§cEP
, 
afAddrTy≥_t
 *
d°Addr
,

355 
uöt8
 
hue
, uöt8 
ßtuøti⁄
, 
uöt16
 
å™sôi⁄Time
,

356 
uöt8
 
dißbÀDeÁu…R•
, uöt8 
£qNum
 )

358 
uöt8
 
buf
[4];

360 
buf
[0] = 
hue
;

361 
buf
[1] = 
ßtuøti⁄
;

362 
buf
[2] = 
	`LO_UINT16
–
å™sôi⁄Time
 );

363 
buf
[3] = 
	`HI_UINT16
–
å™sôi⁄Time
 );

365  
	`z˛_SídComm™d
–
§cEP
, 
d°Addr
, 
ZCL_CLUSTER_ID_LIGHTING_COLOR_CONTROL
,

366 
COMMAND_LIGHTING_MOVE_TO_HUE_AND_SATURATION
, 
TRUE
,

367 
ZCL_FRAME_CLIENT_SERVER_DIR
, 
dißbÀDeÁu…R•
, 0, 
£qNum
, 4, 
buf
 );

368 
	}
}

385 
ZSètus_t
 
	$z˛Lightög_Cﬁ‹C⁄åﬁ_Síd_MoveToCﬁ‹Cmd
–
uöt8
 
§cEP
, 
afAddrTy≥_t
 *
d°Addr
,

386 
uöt16
 
cﬁ‹X
, uöt16 
cﬁ‹Y
, uöt16 
å™sôi⁄Time
,

387 
uöt8
 
dißbÀDeÁu…R•
, uöt8 
£qNum
 )

389 
uöt8
 
buf
[6];

391 
buf
[0] = 
	`LO_UINT16
–
cﬁ‹X
 );

392 
buf
[1] = 
	`HI_UINT16
–
cﬁ‹X
 );

393 
buf
[2] = 
	`LO_UINT16
–
cﬁ‹Y
 );

394 
buf
[3] = 
	`HI_UINT16
–
cﬁ‹Y
 );

395 
buf
[4] = 
	`LO_UINT16
–
å™sôi⁄Time
 );

396 
buf
[5] = 
	`HI_UINT16
–
å™sôi⁄Time
 );

398  
	`z˛_SídComm™d
–
§cEP
, 
d°Addr
, 
ZCL_CLUSTER_ID_LIGHTING_COLOR_CONTROL
,

399 
COMMAND_LIGHTING_MOVE_TO_COLOR
, 
TRUE
,

400 
ZCL_FRAME_CLIENT_SERVER_DIR
, 
dißbÀDeÁu…R•
, 0, 
£qNum
, 6, 
buf
 );

401 
	}
}

419 
ZSètus_t
 
	$z˛Lightög_Cﬁ‹C⁄åﬁ_Síd_MoveCﬁ‹Cmd
–
uöt8
 
§cEP
, 
afAddrTy≥_t
 *
d°Addr
,

420 
öt16
 
øãX
, i¡16 
øãY
,

421 
uöt8
 
dißbÀDeÁu…R•
, uöt8 
£qNum
 )

423 
uöt8
 
buf
[4];

425 
buf
[0] = 
	`LO_UINT16
–
øãX
 );

426 
buf
[1] = 
	`HI_UINT16
–
øãX
 );

427 
buf
[2] = 
	`LO_UINT16
–
øãY
 );

428 
buf
[3] = 
	`HI_UINT16
–
øãY
 );

430  
	`z˛_SídComm™d
–
§cEP
, 
d°Addr
, 
ZCL_CLUSTER_ID_LIGHTING_COLOR_CONTROL
,

431 
COMMAND_LIGHTING_MOVE_COLOR
, 
TRUE
,

432 
ZCL_FRAME_CLIENT_SERVER_DIR
, 
dißbÀDeÁu…R•
, 0, 
£qNum
, 4, 
buf
 );

433 
	}
}

451 
ZSètus_t
 
	$z˛Lightög_Cﬁ‹C⁄åﬁ_Síd_SãpCﬁ‹Cmd
–
uöt8
 
§cEP
, 
afAddrTy≥_t
 *
d°Addr
,

452 
öt16
 
°ïX
, i¡16 
°ïY
, 
uöt16
 
å™sôi⁄Time
,

453 
uöt8
 
dißbÀDeÁu…R•
, uöt8 
£qNum
 )

455 
uöt8
 
buf
[6];

457 
buf
[0] = 
	`LO_UINT16
–
°ïX
 );

458 
buf
[1] = 
	`HI_UINT16
–
°ïX
 );

459 
buf
[2] = 
	`LO_UINT16
–
°ïY
 );

460 
buf
[3] = 
	`HI_UINT16
–
°ïY
 );

461 
buf
[4] = 
	`LO_UINT16
–
å™sôi⁄Time
 );

462 
buf
[5] = 
	`HI_UINT16
–
å™sôi⁄Time
 );

464  
	`z˛_SídComm™d
–
§cEP
, 
d°Addr
, 
ZCL_CLUSTER_ID_LIGHTING_COLOR_CONTROL
,

465 
COMMAND_LIGHTING_STEP_COLOR
, 
TRUE
,

466 
ZCL_FRAME_CLIENT_SERVER_DIR
, 
dißbÀDeÁu…R•
, 0, 
£qNum
, 6, 
buf
 );

467 
	}
}

484 
ZSètus_t
 
	$z˛Lightög_Cﬁ‹C⁄åﬁ_Síd_MoveToCﬁ‹Tem≥øtuªCmd
–
uöt8
 
§cEP
, 
afAddrTy≥_t
 *
d°Addr
,

485 
uöt16
 
cﬁ‹Tem≥øtuª
, uöt16 
å™sôi⁄Time
,

486 
uöt8
 
dißbÀDeÁu…R•
, uöt8 
£qNum
 )

488 
uöt8
 
buf
[4];

490 
buf
[0] = 
	`LO_UINT16
–
cﬁ‹Tem≥øtuª
 );

491 
buf
[1] = 
	`HI_UINT16
–
cﬁ‹Tem≥øtuª
 );

492 
buf
[2] = 
	`LO_UINT16
–
å™sôi⁄Time
 );

493 
buf
[3] = 
	`HI_UINT16
–
å™sôi⁄Time
 );

495  
	`z˛_SídComm™d
–
§cEP
, 
d°Addr
, 
ZCL_CLUSTER_ID_LIGHTING_COLOR_CONTROL
,

496 
COMMAND_LIGHTING_MOVE_TO_COLOR_TEMPERATURE
, 
TRUE
,

497 
ZCL_FRAME_CLIENT_SERVER_DIR
, 
dißbÀDeÁu…R•
, 0, 
£qNum
, 4, 
buf
 );

498 
	}
}

509 
z˛Lightög_AµCÆlbacks_t
 *
	$z˛Lightög_FödCÆlbacks
–
uöt8
 
ídpoöt
 )

511 
z˛LightögCBRec_t
 *
pCBs
;

513 
pCBs
 = 
z˛LightögCBs
;

514  
pCBs
 !
NULL
 )

516 i‡–
pCBs
->
ídpoöt
 ==Éndpoint )

517  ( 
pCBs
->
CBs
 );

518 
pCBs
 =ÖCBs->
√xt
;

520  ( (
z˛Lightög_AµCÆlbacks_t
 *)
NULL
 );

521 
	}
}

534 
ZSètus_t
 
	$z˛Lightög_HdlIncomög
–
z˛Incomög_t
 *
pInMsg
 )

536 
ZSètus_t
 
°©
 = 
ZSuc˚ss
;

538 #i‡
	`deföed
 ( 
INTER_PAN
 )

539 i‡–
	`StubAPS_I¡îP™
–
pInMsg
->
msg
->
§cAddr
.
∑nId
,ÖInMsg->msg->§cAddr.
ídPoöt
 ) )

540  ( 
°©
 );

542 i‡–
	`z˛_Clu°îCmd
–
pInMsg
->
hdr
.
fc
.
ty≥
 ) )

545 i‡–
pInMsg
->
hdr
.
fc
.
m™uS≥cific
 == 0 )

547 
°©
 = 
	`z˛Lightög_HdlInS≥cificComm™ds
–
pInMsg
 );

552 
°©
 = 
ZFaûuª
;

558 
°©
 = 
ZFaûuª
;

560  ( 
°©
 );

561 
	}
}

573 
ZSètus_t
 
	$z˛Lightög_HdlInS≥cificComm™ds
–
z˛Incomög_t
 *
pInMsg
 )

575 
ZSètus_t
 
°©
 = 
ZSuc˚ss
;

576 
z˛Lightög_AµCÆlbacks_t
 *
pCBs
;

579 
pCBs
 = 
	`z˛Lightög_FödCÆlbacks
–
pInMsg
->
msg
->
ídPoöt
 );

580 i‡(
pCBs
 =
NULL
 )

581  ( 
ZFaûuª
 );

583  
pInMsg
->
msg
->
˛u°îId
 )

585 
ZCL_CLUSTER_ID_LIGHTING_COLOR_CONTROL
:

586 
°©
 = 
	`z˛Lightög_Pro˚ssInCﬁ‹C⁄åﬁCmds
–
pInMsg
, 
pCBs
 );

589 
ZCL_CLUSTER_ID_LIGHTING_BALLAST_CONFIG
:

592 
°©
 = 
ZFaûuª
;

596  ( 
°©
 );

597 
	}
}

610 
ZSètus_t
 
	$z˛Lightög_Pro˚ssInCﬁ‹C⁄åﬁCmds
–
z˛Incomög_t
 *
pInMsg
,

611 
z˛Lightög_AµCÆlbacks_t
 *
pCBs
 )

613 
ZSètus_t
 
°©
;

615  
pInMsg
->
hdr
.
comm™dID
 )

617 
COMMAND_LIGHTING_MOVE_TO_HUE
:

618 
°©
 = 
	`z˛Lightög_Pro˚ssInCmd_Cﬁ‹C⁄åﬁ_MoveToHue
–
pInMsg
, 
pCBs
 );

621 
COMMAND_LIGHTING_MOVE_HUE
:

622 
°©
 = 
	`z˛Lightög_Pro˚ssInCmd_Cﬁ‹C⁄åﬁ_MoveHue
–
pInMsg
, 
pCBs
 );

625 
COMMAND_LIGHTING_STEP_HUE
:

626 
°©
 = 
	`z˛Lightög_Pro˚ssInCmd_Cﬁ‹C⁄åﬁ_SãpHue
–
pInMsg
, 
pCBs
 );

629 
COMMAND_LIGHTING_MOVE_TO_SATURATION
:

630 
°©
 = 
	`z˛Lightög_Pro˚ssInCmd_Cﬁ‹C⁄åﬁ_MoveToS©uøti⁄
–
pInMsg
, 
pCBs
 );

633 
COMMAND_LIGHTING_MOVE_SATURATION
:

634 
°©
 = 
	`z˛Lightög_Pro˚ssInCmd_Cﬁ‹C⁄åﬁ_MoveS©uøti⁄
–
pInMsg
, 
pCBs
 );

637 
COMMAND_LIGHTING_STEP_SATURATION
:

638 
°©
 = 
	`z˛Lightög_Pro˚ssInCmd_Cﬁ‹C⁄åﬁ_SãpS©uøti⁄
–
pInMsg
, 
pCBs
 );

641 
COMMAND_LIGHTING_MOVE_TO_HUE_AND_SATURATION
:

642 
°©
 = 
	`z˛Lightög_Pro˚ssInCmd_Cﬁ‹C⁄åﬁ_MoveToHueAndS©uøti⁄
–
pInMsg
, 
pCBs
 );

645 
COMMAND_LIGHTING_MOVE_TO_COLOR
:

646 
°©
 = 
	`z˛Lightög_Pro˚ssInCmd_Cﬁ‹C⁄åﬁ_MoveToCﬁ‹
–
pInMsg
, 
pCBs
 );

649 
COMMAND_LIGHTING_MOVE_COLOR
:

650 
°©
 = 
	`z˛Lightög_Pro˚ssInCmd_Cﬁ‹C⁄åﬁ_MoveCﬁ‹
–
pInMsg
, 
pCBs
 );

653 
COMMAND_LIGHTING_STEP_COLOR
:

654 
°©
 = 
	`z˛Lightög_Pro˚ssInCmd_Cﬁ‹C⁄åﬁ_SãpCﬁ‹
–
pInMsg
, 
pCBs
 );

657 
COMMAND_LIGHTING_MOVE_TO_COLOR_TEMPERATURE
:

658 
°©
 = 
	`z˛Lightög_Pro˚ssInCmd_Cﬁ‹C⁄åﬁ_MoveToCﬁ‹Tem≥øtuª
–
pInMsg
, 
pCBs
 );

663 
°©
 = 
ZFaûuª
;

667  ( 
°©
 );

668 
	}
}

680 
ZSètus_t
 
	$z˛Lightög_Pro˚ssInCmd_Cﬁ‹C⁄åﬁ_MoveToHue
–
z˛Incomög_t
 *
pInMsg
,

681 
z˛Lightög_AµCÆlbacks_t
 *
pCBs
 )

683 i‡–
pCBs
->
p‚Cﬁ‹C⁄åﬁ_MoveToHue
 )

685 
z˛CCMoveToHue_t
 
cmd
;

687 
cmd
.
hue
 = 
pInMsg
->
pD©a
[0];

688 
cmd
.
dúe˘i⁄
 = 
pInMsg
->
pD©a
[1];

689 
cmd
.
å™sôi⁄Time
 = 
	`BUILD_UINT16
–
pInMsg
->
pD©a
[2],ÖInMsg->pData[3] );

691  ( 
pCBs
->
	`p‚Cﬁ‹C⁄åﬁ_MoveToHue
–&
cmd
 ) );

694  ( 
ZFaûuª
 );

695 
	}
}

707 
ZSètus_t
 
	$z˛Lightög_Pro˚ssInCmd_Cﬁ‹C⁄åﬁ_MoveHue
–
z˛Incomög_t
 *
pInMsg
,

708 
z˛Lightög_AµCÆlbacks_t
 *
pCBs
 )

710 
z˛CCMoveHue_t
 
cmd
;

712 
cmd
.
moveMode
 = 
pInMsg
->
pD©a
[0];

713 
cmd
.
øã
 = 
pInMsg
->
pD©a
[1];

718 i‡–
cmd
.
øã
 == 0 )

720 
z˛DeÁu…R•Cmd_t
 
deÁu…R•Cmd
;

722 
deÁu…R•Cmd
.
comm™dID
 = 
pInMsg
->
hdr
.commandID;

723 
deÁu…R•Cmd
.
°©usCode
 = 
ZCL_STATUS_INVALID_FIELD
;

724 
	`z˛_SídDeÁu…R•Cmd
–
pInMsg
->
msg
->
ídPoöt
, &’InMsg->msg->
§cAddr
),

725 
pInMsg
->
msg
->
˛u°îId
, &
deÁu…R•Cmd
,

726 
ZCL_FRAME_SERVER_CLIENT_DIR
, 
åue
, 
pInMsg
->
hdr
.
å™sSeqNum
 );

729  ( 
ZCL_STATUS_CMD_HAS_RSP
 );

732 i‡–
pCBs
->
p‚Cﬁ‹C⁄åﬁ_MoveHue
 )

733  ( 
pCBs
->
	`p‚Cﬁ‹C⁄åﬁ_MoveHue
–&
cmd
 ) );

735  ( 
ZFaûuª
 );

736 
	}
}

748 
ZSètus_t
 
	$z˛Lightög_Pro˚ssInCmd_Cﬁ‹C⁄åﬁ_SãpHue
–
z˛Incomög_t
 *
pInMsg
,

749 
z˛Lightög_AµCÆlbacks_t
 *
pCBs
 )

751 i‡–
pCBs
->
p‚Cﬁ‹C⁄åﬁ_SãpHue
 )

753 
z˛CCSãpHue_t
 
cmd
;

755 
cmd
.
°ïMode
 = 
pInMsg
->
pD©a
[0];

756 
cmd
.
°ïSize
 = 
pInMsg
->
pD©a
[1];

757 
cmd
.
å™sôi⁄Time
 = 
pInMsg
->
pD©a
[2];

759  ( 
pCBs
->
	`p‚Cﬁ‹C⁄åﬁ_SãpHue
–&
cmd
 ) );

762  ( 
ZFaûuª
 );

763 
	}
}

775 
ZSètus_t
 
	$z˛Lightög_Pro˚ssInCmd_Cﬁ‹C⁄åﬁ_MoveToS©uøti⁄
–
z˛Incomög_t
 *
pInMsg
,

776 
z˛Lightög_AµCÆlbacks_t
 *
pCBs
 )

778 i‡–
pCBs
->
p‚Cﬁ‹C⁄åﬁ_MoveToS©uøti⁄
 )

780 
z˛CCMoveToS©uøti⁄_t
 
cmd
;

782 
cmd
.
ßtuøti⁄
 = 
pInMsg
->
pD©a
[0];

783 
cmd
.
å™sôi⁄Time
 = 
	`BUILD_UINT16
–
pInMsg
->
pD©a
[1],ÖInMsg->pData[2] );

785  ( 
pCBs
->
	`p‚Cﬁ‹C⁄åﬁ_MoveToS©uøti⁄
–&
cmd
 ) );

788  ( 
ZFaûuª
 );

789 
	}
}

801 
ZSètus_t
 
	$z˛Lightög_Pro˚ssInCmd_Cﬁ‹C⁄åﬁ_MoveS©uøti⁄
–
z˛Incomög_t
 *
pInMsg
,

802 
z˛Lightög_AµCÆlbacks_t
 *
pCBs
 )

804 
z˛CCMoveS©uøti⁄_t
 
cmd
;

806 
cmd
.
moveMode
 = 
pInMsg
->
pD©a
[0];

807 
cmd
.
øã
 = 
pInMsg
->
pD©a
[1];

812 i‡–
cmd
.
øã
 == 0 )

814 
z˛DeÁu…R•Cmd_t
 
deÁu…R•Cmd
;

816 
deÁu…R•Cmd
.
comm™dID
 = 
pInMsg
->
hdr
.commandID;

817 
deÁu…R•Cmd
.
°©usCode
 = 
ZCL_STATUS_INVALID_FIELD
;

818 
	`z˛_SídDeÁu…R•Cmd
–
pInMsg
->
msg
->
ídPoöt
, &’InMsg->msg->
§cAddr
),

819 
pInMsg
->
msg
->
˛u°îId
, &
deÁu…R•Cmd
,

820 
ZCL_FRAME_SERVER_CLIENT_DIR
, 
åue
, 
pInMsg
->
hdr
.
å™sSeqNum
 );

823  ( 
ZCL_STATUS_CMD_HAS_RSP
 );

826 i‡–
pCBs
->
p‚Cﬁ‹C⁄åﬁ_MoveS©uøti⁄
 )

827  ( 
pCBs
->
	`p‚Cﬁ‹C⁄åﬁ_MoveS©uøti⁄
–&
cmd
 ) );

829  ( 
ZFaûuª
 );

830 
	}
}

842 
ZSètus_t
 
	$z˛Lightög_Pro˚ssInCmd_Cﬁ‹C⁄åﬁ_SãpS©uøti⁄
–
z˛Incomög_t
 *
pInMsg
,

843 
z˛Lightög_AµCÆlbacks_t
 *
pCBs
 )

845 i‡–
pCBs
->
p‚Cﬁ‹C⁄åﬁ_SãpS©uøti⁄
 )

847 
z˛CCSãpS©uøti⁄_t
 
cmd
;

849 
cmd
.
°ïMode
 = 
pInMsg
->
pD©a
[0];

850 
cmd
.
°ïSize
 = 
pInMsg
->
pD©a
[1];

851 
cmd
.
å™sôi⁄Time
 = 
pInMsg
->
pD©a
[2];

853  ( 
pCBs
->
	`p‚Cﬁ‹C⁄åﬁ_SãpS©uøti⁄
–&
cmd
 ) );

856  ( 
ZFaûuª
 );

857 
	}
}

869 
ZSètus_t
 
	$z˛Lightög_Pro˚ssInCmd_Cﬁ‹C⁄åﬁ_MoveToHueAndS©uøti⁄
–
z˛Incomög_t
 *
pInMsg
,

870 
z˛Lightög_AµCÆlbacks_t
 *
pCBs
 )

872 i‡–
pCBs
->
p‚Cﬁ‹C⁄åﬁ_MoveToHueAndS©uøti⁄
 )

874 
z˛CCMoveToHueAndS©uøti⁄_t
 
cmd
;

876 
cmd
.
hue
 = 
pInMsg
->
pD©a
[0];

877 
cmd
.
ßtuøti⁄
 = 
pInMsg
->
pD©a
[1];

878 
cmd
.
å™sôi⁄Time
 = 
	`BUILD_UINT16
–
pInMsg
->
pD©a
[2],ÖInMsg->pData[3] );

880  ( 
pCBs
->
	`p‚Cﬁ‹C⁄åﬁ_MoveToHueAndS©uøti⁄
–&
cmd
 ) );

883  ( 
ZFaûuª
 );

884 
	}
}

896 
ZSètus_t
 
	$z˛Lightög_Pro˚ssInCmd_Cﬁ‹C⁄åﬁ_MoveToCﬁ‹
–
z˛Incomög_t
 *
pInMsg
,

897 
z˛Lightög_AµCÆlbacks_t
 *
pCBs
 )

899 i‡–
pCBs
->
p‚Cﬁ‹C⁄åﬁ_MoveToCﬁ‹
 )

901 
z˛CCMoveToCﬁ‹_t
 
cmd
;

903 
cmd
.
cﬁ‹X
 = 
	`BUILD_UINT16
–
pInMsg
->
pD©a
[0],ÖInMsg->pData[1] );

904 
cmd
.
cﬁ‹Y
 = 
	`BUILD_UINT16
–
pInMsg
->
pD©a
[2],ÖInMsg->pData[3] );

905 
cmd
.
å™sôi⁄Time
 = 
	`BUILD_UINT16
–
pInMsg
->
pD©a
[4],ÖInMsg->pData[5] );

907  ( 
pCBs
->
	`p‚Cﬁ‹C⁄åﬁ_MoveToCﬁ‹
–&
cmd
 ) );

910  ( 
ZFaûuª
 );

911 
	}
}

923 
ZSètus_t
 
	$z˛Lightög_Pro˚ssInCmd_Cﬁ‹C⁄åﬁ_MoveCﬁ‹
–
z˛Incomög_t
 *
pInMsg
,

924 
z˛Lightög_AµCÆlbacks_t
 *
pCBs
 )

926 i‡–
pCBs
->
p‚Cﬁ‹C⁄åﬁ_MoveCﬁ‹
 )

928 
z˛CCMoveCﬁ‹_t
 
cmd
;

930 
cmd
.
øãX
 = 
	`BUILD_UINT16
–
pInMsg
->
pD©a
[0],ÖInMsg->pData[1] );

931 
cmd
.
øãY
 = 
	`BUILD_UINT16
–
pInMsg
->
pD©a
[2],ÖInMsg->pData[3] );

933 
pCBs
->
	`p‚Cﬁ‹C⁄åﬁ_MoveCﬁ‹
–&
cmd
 );

935  ( 
ZSuc˚ss
 );

938  ( 
ZFaûuª
 );

939 
	}
}

951 
ZSètus_t
 
	$z˛Lightög_Pro˚ssInCmd_Cﬁ‹C⁄åﬁ_SãpCﬁ‹
–
z˛Incomög_t
 *
pInMsg
,

952 
z˛Lightög_AµCÆlbacks_t
 *
pCBs
 )

954 i‡–
pCBs
->
p‚Cﬁ‹C⁄åﬁ_SãpCﬁ‹
 )

956 
z˛CCSãpCﬁ‹_t
 
cmd
;

958 
cmd
.
°ïX
 = 
	`BUILD_UINT16
–
pInMsg
->
pD©a
[0],ÖInMsg->pData[1] );

959 
cmd
.
°ïY
 = 
	`BUILD_UINT16
–
pInMsg
->
pD©a
[2],ÖInMsg->pData[3] );

960 
cmd
.
å™sôi⁄Time
 = 
	`BUILD_UINT16
–
pInMsg
->
pD©a
[4],ÖInMsg->pData[5] );

962  ( 
pCBs
->
	`p‚Cﬁ‹C⁄åﬁ_SãpCﬁ‹
–&
cmd
 ) );

965  ( 
ZFaûuª
 );

966 
	}
}

978 
ZSètus_t
 
	$z˛Lightög_Pro˚ssInCmd_Cﬁ‹C⁄åﬁ_MoveToCﬁ‹Tem≥øtuª
–
z˛Incomög_t
 *
pInMsg
,

979 
z˛Lightög_AµCÆlbacks_t
 *
pCBs
 )

981 i‡–
pCBs
->
p‚Cﬁ‹C⁄åﬁ_MoveToCﬁ‹Tem≥øtuª
 )

983 
z˛CCMoveToCﬁ‹Tem≥øtuª_t
 
cmd
;

985 
cmd
.
cﬁ‹Tem≥øtuª
 = 
	`BUILD_UINT16
–
pInMsg
->
pD©a
[0],ÖInMsg->pData[1] );

986 
cmd
.
å™sôi⁄Time
 = 
	`BUILD_UINT16
–
pInMsg
->
pD©a
[2],ÖInMsg->pData[3] );

988  ( 
pCBs
->
	`p‚Cﬁ‹C⁄åﬁ_MoveToCﬁ‹Tem≥øtuª
–&
cmd
 ) );

991  ( 
ZFaûuª
 );

992 
	}
}

	@Components/stack/zcl/zcl_lighting.h

40 #i‚de‡
ZCL_LIGHTING_H


41 
	#ZCL_LIGHTING_H


	)

43 #ifde‡
__˝lu•lus


51 
	~"z˛.h
"

61 
	#ATTRID_LIGHTING_COLOR_CONTROL_CURRENT_HUE
 0x0000

	)

62 
	#ATTRID_LIGHTING_COLOR_CONTROL_CURRENT_SATURATION
 0x0001

	)

63 
	#ATTRID_LIGHTING_COLOR_CONTROL_REMAINING_TIME
 0x0002

	)

64 
	#ATTRID_LIGHTING_COLOR_CONTROL_CURRENT_X
 0x0003

	)

65 
	#ATTRID_LIGHTING_COLOR_CONTROL_CURRENT_Y
 0x0004

	)

66 
	#ATTRID_LIGHTING_COLOR_CONTROL_DRIFT_COMPENSATION
 0x0005

	)

67 
	#ATTRID_LIGHTING_COLOR_CONTROL_COMPENSATION_TEXT
 0x0006

	)

68 
	#ATTRID_LIGHTING_COLOR_CONTROL_COLOR_TEMPERATURE
 0x0007

	)

69 
	#ATTRID_LIGHTING_COLOR_CONTROL_COLOR_MODE
 0x0008

	)

72 
	#ATTRID_LIGHTING_COLOR_CONTROL_NUM_PRIMARIES
 0x0010

	)

73 
	#ATTRID_LIGHTING_COLOR_CONTROL_PRIMARY_1_X
 0x0011

	)

74 
	#ATTRID_LIGHTING_COLOR_CONTROL_PRIMARY_1_Y
 0x0012

	)

75 
	#ATTRID_LIGHTING_COLOR_CONTROL_PRIMARY_1_INTENSITY
 0x0013

	)

77 
	#ATTRID_LIGHTING_COLOR_CONTROL_PRIMARY_2_X
 0x0015

	)

78 
	#ATTRID_LIGHTING_COLOR_CONTROL_PRIMARY_2_Y
 0x0016

	)

79 
	#ATTRID_LIGHTING_COLOR_CONTROL_PRIMARY_2_INTENSITY
 0x0017

	)

81 
	#ATTRID_LIGHTING_COLOR_CONTROL_PRIMARY_3_X
 0x0019

	)

82 
	#ATTRID_LIGHTING_COLOR_CONTROL_PRIMARY_3_Y
 0x001a

	)

83 
	#ATTRID_LIGHTING_COLOR_CONTROL_PRIMARY_3_INTENSITY
 0x001b

	)

86 
	#ATTRID_LIGHTING_COLOR_CONTROL_PRIMARY_4_X
 0x0020

	)

87 
	#ATTRID_LIGHTING_COLOR_CONTROL_PRIMARY_4_Y
 0x0021

	)

88 
	#ATTRID_LIGHTING_COLOR_CONTROL_PRIMARY_4_INTENSITY
 0x0022

	)

90 
	#ATTRID_LIGHTING_COLOR_CONTROL_PRIMARY_5_X
 0x0024

	)

91 
	#ATTRID_LIGHTING_COLOR_CONTROL_PRIMARY_5_Y
 0x0025

	)

92 
	#ATTRID_LIGHTING_COLOR_CONTROL_PRIMARY_5_INTENSITY
 0x0026

	)

94 
	#ATTRID_LIGHTING_COLOR_CONTROL_PRIMARY_6_X
 0x0028

	)

95 
	#ATTRID_LIGHTING_COLOR_CONTROL_PRIMARY_6_Y
 0x0029

	)

96 
	#ATTRID_LIGHTING_COLOR_CONTROL_PRIMARY_6_INTENSITY
 0x002a

	)

99 
	#ATTRID_LIGHTING_COLOR_CONTROL_WHITE_POINT_X
 0x0030

	)

100 
	#ATTRID_LIGHTING_COLOR_CONTROL_WHITE_POINT_Y
 0x0031

	)

101 
	#ATTRID_LIGHTING_COLOR_CONTROL_COLOR_POINT_R_X
 0x0032

	)

102 
	#ATTRID_LIGHTING_COLOR_CONTROL_COLOR_POINT_R_Y
 0x0033

	)

103 
	#ATTRID_LIGHTING_COLOR_CONTROL_COLOR_POINT_R_INTENSITY
 0x0034

	)

105 
	#ATTRID_LIGHTING_COLOR_CONTROL_COLOR_POINT_G_X
 0x0036

	)

106 
	#ATTRID_LIGHTING_COLOR_CONTROL_COLOR_POINT_G_Y
 0x0037

	)

107 
	#ATTRID_LIGHTING_COLOR_CONTROL_COLOR_POINT_B_INTENSITY
 0x0038

	)

109 
	#ATTRID_LIGHTING_COLOR_CONTROL_COLOR_POINT_B_X
 0x003a

	)

110 
	#ATTRID_LIGHTING_COLOR_CONTROL_COLOR_POINT_B_Y
 0x003b

	)

111 
	#ATTRID_LIGHTING_COLOR_CONTROL_COLOR_POINT_G_INTENSITY
 0x003c

	)

115 
	#DRIFT_COMP_NONE
 0x00

	)

116 
	#DRIFT_COMP_OTHER_UNKNOWN
 0x01

	)

117 
	#DRIFT_COMP_TEMPERATURE_MONITOR
 0x02

	)

118 
	#DRIFT_COMP_OPTICAL_LUMINANCE_MONITOR_FEEDBACK
 0x03

	)

119 
	#DRIFT_COMP_OPTICAL_COLOR_MONITOR_FEEDBACK
 0x04

	)

122 
	#COLOR_MODE_CURRENT_HUE_SATURATION
 0x00

	)

123 
	#COLOR_MODE_CURRENT_X_Y
 0x01

	)

124 
	#COLOR_MODE_COLOR_TEMPERATURE
 0x02

	)

129 
	#COMMAND_LIGHTING_MOVE_TO_HUE
 0x00

	)

130 
	#COMMAND_LIGHTING_MOVE_HUE
 0x01

	)

131 
	#COMMAND_LIGHTING_STEP_HUE
 0x02

	)

132 
	#COMMAND_LIGHTING_MOVE_TO_SATURATION
 0x03

	)

133 
	#COMMAND_LIGHTING_MOVE_SATURATION
 0x04

	)

134 
	#COMMAND_LIGHTING_STEP_SATURATION
 0x05

	)

135 
	#COMMAND_LIGHTING_MOVE_TO_HUE_AND_SATURATION
 0x06

	)

136 
	#COMMAND_LIGHTING_MOVE_TO_COLOR
 0x07

	)

137 
	#COMMAND_LIGHTING_MOVE_COLOR
 0x08

	)

138 
	#COMMAND_LIGHTING_STEP_COLOR
 0x09

	)

139 
	#COMMAND_LIGHTING_MOVE_TO_COLOR_TEMPERATURE
 0x0a

	)

142 
	#LIGHTING_MOVE_TO_HUE_DIRECTION_SHORTEST_DISTANCE
 0x00

	)

143 
	#LIGHTING_MOVE_TO_HUE_DIRECTION_LONGEST_DISTANCE
 0x01

	)

144 
	#LIGHTING_MOVE_TO_HUE_DIRECTION_UP
 0x02

	)

145 
	#LIGHTING_MOVE_TO_HUE_DIRECTION_DOWN
 0x03

	)

147 
	#LIGHTING_MOVE_HUE_STOP
 0x00

	)

148 
	#LIGHTING_MOVE_HUE_UP
 0x01

	)

149 
	#LIGHTING_MOVE_HUE_DOWN
 0x03

	)

151 
	#LIGHTING_STEP_HUE_UP
 0x01

	)

152 
	#LIGHTING_STEP_HUE_DOWN
 0x03

	)

154 
	#LIGHTING_MOVE_SATURATION_STOP
 0x00

	)

155 
	#LIGHTING_MOVE_SATURATION_UP
 0x01

	)

156 
	#LIGHTING_MOVE_SATURATION_DOWN
 0x03

	)

158 
	#LIGHTING_STEP_SATURATION_UP
 0x01

	)

159 
	#LIGHTING_STEP_SATURATION_DOWN
 0x03

	)

165 
	#ATTRID_LIGHTING_BALLAST_CONFIG_PHYSICAL_MIN_LEVEL
 0x0000

	)

166 
	#ATTRID_LIGHTING_BALLAST_CONFIG_PHYSICAL_MAX_LEVEL
 0x0001

	)

167 
	#ATTRID_LIGHTING_BALLAST_BALLAST_STATUS
 0x0002

	)

169 
	#LIGHTING_BALLAST_STATUS_NON_OPERATIONAL
 1

170 
	#LIGHTING_BALLAST_STATUS_LAMP_IS_NOT_IN_SOCKET
 2

172 
	#ATTRID_LIGHTING_BALLAST_MIN_LEVEL
 0x0010

	)

173 
	#ATTRID_LIGHTING_BALLAST_MAX_LEVEL
 0x0011

	)

174 
	#ATTRID_LIGHTING_BALLAST_POWER_ON_LEVEL
 0x0012

	)

175 
	#ATTRID_LIGHTING_BALLAST_POWER_ON_FADE_TIME
 0x0013

	)

176 
	#ATTRID_LIGHTING_BALLAST_INTRISTIC_BALLAST_FACTOR
 0x0014

	)

177 
	#ATTRID_LIGHTING_BALLAST_BALLAST_FACTOR_ADJUSTMENT
 0x0015

	)

179 
	#ATTRID_LIGHTING_BALLAST_LAMP_QUANTITY
 0x0020

	)

181 
	#ATTRID_LIGHTING_BALLAST_LAMP_TYPE
 0x0030

	)

182 
	#ATTRID_LIGHTING_BALLAST_LAMP_MANUFACTURER
 0x0031

	)

183 
	#ATTRID_LIGHTING_BALLAST_LAMP_RATED_HOURS
 0x0032

	)

184 
	#ATTRID_LIGHTING_BALLAST_LAMP_BURN_HOURS
 0x0033

	)

185 
	#ATTRID_LIGHTING_BALLAST_LAMP_ALARM_MODE
 0x0034

	)

186 
	#ATTRID_LIGHTING_BALLAST_LAMP_BURN_HOURS_TRIP_POINT
 0x0035

	)

188 
	#LIGHTING_BALLAST_LAMP_ALARM_MODE_BIT_0_NO_ALARM
 0

	)

189 
	#LIGHTING_BALLAST_LAMP_ALARM_MODE_BIT_0_ALARM
 1

	)

198 
uöt8
 
hue
;

199 
uöt8
 
dúe˘i⁄
;

200 
uöt16
 
å™sôi⁄Time
;

201 } 
	tz˛CmdLightögMoveToHuePaylﬂd_t
;

206 
uöt8
 
moveMode
;

207 
uöt8
 
øã
;

208 } 
	tz˛CmdLightögMoveHuePaylﬂd_t
;

213 
uöt8
 
°ïMode
;

214 
uöt8
 
å™sôi⁄Time
;

215 } 
	tz˛CmdLightögSãpHuePaylﬂd_t
;

220 
uöt8
 
ßtuøti⁄
;

221 
uöt16
 
å™sôi⁄Time
;

222 } 
	tz˛CmdLightögMoveToS©uøti⁄Paylﬂd_t
;

227 
uöt8
 
moveMode
;

228 
uöt8
 
øã
;

229 } 
	tz˛CmdLightögMoveS©uøti⁄Paylﬂd_t
;

234 
uöt8
 
°ïMode
;

235 
uöt8
 
å™sôi⁄Time
;

236 } 
	tz˛CmdLightögSãpS©uøti⁄Paylﬂd_t
;

241 
uöt8
 
hue
;

242 
uöt8
 
ßtuøti⁄
;

243 
uöt16
 
å™sôi⁄Time
;

244 } 
	tz˛CmdLightögMoveToHueAndS©uøti⁄Paylﬂd_t
;

250 
uöt8
 
hue
;

251 
uöt8
 
dúe˘i⁄
;

252 
uöt16
 
å™sôi⁄Time
;

253 } 
	tz˛CCMoveToHue_t
;

257 
uöt8
 
moveMode
;

258 
uöt8
 
øã
;

259 } 
	tz˛CCMoveHue_t
;

263 
uöt8
 
°ïMode
;

264 
uöt8
 
°ïSize
;

265 
uöt8
 
å™sôi⁄Time
;

266 } 
	tz˛CCSãpHue_t
;

270 
uöt8
 
ßtuøti⁄
;

271 
uöt16
 
å™sôi⁄Time
;

272 } 
	tz˛CCMoveToS©uøti⁄_t
;

276 
uöt8
 
moveMode
;

278 
uöt8
 
øã
;

279 } 
	tz˛CCMoveS©uøti⁄_t
;

283 
uöt8
 
°ïMode
;

284 
uöt8
 
°ïSize
;

285 
uöt8
 
å™sôi⁄Time
;

286 } 
	tz˛CCSãpS©uøti⁄_t
;

290 
uöt8
 
hue
;

291 
uöt8
 
ßtuøti⁄
;

292 
uöt16
 
å™sôi⁄Time
;

293 } 
	tz˛CCMoveToHueAndS©uøti⁄_t
;

297 
uöt16
 
cﬁ‹X
;

298 
uöt16
 
cﬁ‹Y
;

299 
uöt16
 
å™sôi⁄Time
;

300 } 
	tz˛CCMoveToCﬁ‹_t
;

304 
öt16
 
øãX
;

306 
öt16
 
øãY
;

308 } 
	tz˛CCMoveCﬁ‹_t
;

312 
öt16
 
°ïX
;

313 
öt16
 
°ïY
;

314 
uöt16
 
å™sôi⁄Time
;

315 } 
	tz˛CCSãpCﬁ‹_t
;

319 
uöt16
 
cﬁ‹Tem≥øtuª
;

320 
uöt16
 
å™sôi⁄Time
;

321 } 
	tz˛CCMoveToCﬁ‹Tem≥øtuª_t
;

327 
ZSètus_t
 (*
	tz˛Lightög_Cﬁ‹C⁄åﬁ_MoveToHue_t
)–
	tz˛CCMoveToHue_t
 *
	tpCmd
 );

332 
ZSètus_t
 (*
	tz˛Lightög_Cﬁ‹C⁄åﬁ_MoveHue_t
)–
	tz˛CCMoveHue_t
 *
	tpCmd
 );

337 
ZSètus_t
 (*
	tz˛Lightög_Cﬁ‹C⁄åﬁ_SãpHue_t
)–
	tz˛CCSãpHue_t
 *
	tpCmd
 );

342 
ZSètus_t
 (*
	tz˛Lightög_Cﬁ‹C⁄åﬁ_MoveToS©uøti⁄_t
)–
	tz˛CCMoveToS©uøti⁄_t
 *
	tpCmd
 );

347 
ZSètus_t
 (*
	tz˛Lightög_Cﬁ‹C⁄åﬁ_MoveS©uøti⁄_t
)–
	tz˛CCMoveS©uøti⁄_t
 *
	tpCmd
 );

352 
ZSètus_t
 (*
	tz˛Lightög_Cﬁ‹C⁄åﬁ_SãpS©uøti⁄_t
)–
	tz˛CCSãpS©uøti⁄_t
 *
	tpCmd
 );

358 
ZSètus_t
 (*
	tz˛Lightög_Cﬁ‹C⁄åﬁ_MoveToHueAndS©uøti⁄_t
)–
	tz˛CCMoveToHueAndS©uøti⁄_t
 *
	tpCmd
 );

364 
ZSètus_t
 (*
	tz˛Lightög_Cﬁ‹C⁄åﬁ_MoveToCﬁ‹_t
)–
	tz˛CCMoveToCﬁ‹_t
 *
	tpCmd
 );

371 (*
z˛Lightög_Cﬁ‹C⁄åﬁ_MoveCﬁ‹_t
)–
	tz˛CCMoveCﬁ‹_t
 *
	tpCmd
 );

378 
ZSètus_t
 (*
	tz˛Lightög_Cﬁ‹C⁄åﬁ_SãpCﬁ‹_t
)–
	tz˛CCSãpCﬁ‹_t
 *
	tpCmd
 );

384 
ZSètus_t
 (*
	tz˛Lightög_Cﬁ‹C⁄åﬁ_MoveToCﬁ‹Tem≥øtuª_t
)–
	tz˛CCMoveToCﬁ‹Tem≥øtuª_t
 *
	tpCmd
 );

391 
z˛Lightög_Cﬁ‹C⁄åﬁ_MoveToHue_t
 
p‚Cﬁ‹C⁄åﬁ_MoveToHue
;

392 
z˛Lightög_Cﬁ‹C⁄åﬁ_MoveHue_t
 
p‚Cﬁ‹C⁄åﬁ_MoveHue
;

393 
z˛Lightög_Cﬁ‹C⁄åﬁ_SãpHue_t
 
p‚Cﬁ‹C⁄åﬁ_SãpHue
;

394 
z˛Lightög_Cﬁ‹C⁄åﬁ_MoveToS©uøti⁄_t
 
p‚Cﬁ‹C⁄åﬁ_MoveToS©uøti⁄
;

395 
z˛Lightög_Cﬁ‹C⁄åﬁ_MoveS©uøti⁄_t
 
p‚Cﬁ‹C⁄åﬁ_MoveS©uøti⁄
;

396 
z˛Lightög_Cﬁ‹C⁄åﬁ_SãpS©uøti⁄_t
 
p‚Cﬁ‹C⁄åﬁ_SãpS©uøti⁄
;

397 
z˛Lightög_Cﬁ‹C⁄åﬁ_MoveToHueAndS©uøti⁄_t
 
p‚Cﬁ‹C⁄åﬁ_MoveToHueAndS©uøti⁄
;

398 
z˛Lightög_Cﬁ‹C⁄åﬁ_MoveToCﬁ‹_t
 
p‚Cﬁ‹C⁄åﬁ_MoveToCﬁ‹
;

399 
z˛Lightög_Cﬁ‹C⁄åﬁ_MoveCﬁ‹_t
 
p‚Cﬁ‹C⁄åﬁ_MoveCﬁ‹
;

400 
z˛Lightög_Cﬁ‹C⁄åﬁ_SãpCﬁ‹_t
 
p‚Cﬁ‹C⁄åﬁ_SãpCﬁ‹
;

401 
z˛Lightög_Cﬁ‹C⁄åﬁ_MoveToCﬁ‹Tem≥øtuª_t
 
p‚Cﬁ‹C⁄åﬁ_MoveToCﬁ‹Tem≥øtuª
;

403 } 
	tz˛Lightög_AµCÆlbacks_t
;

421 
ZSètus_t
 
z˛Lightög_Regi°îCmdCÆlbacks
–
uöt8
 
ídpoöt
, 
z˛Lightög_AµCÆlbacks_t
 *
ˇŒbacks
 );

430 
ZSètus_t
 
z˛Lightög_Cﬁ‹C⁄åﬁ_Síd_MoveToHueCmd
–
uöt8
 
§cEP
, 
afAddrTy≥_t
 *
d°Addr
,

431 
uöt8
 
hue
, uöt8 
dúe˘i⁄
, 
uöt16
 
å™sôi⁄Time
,

432 
uöt8
 
dißbÀDeÁu…R•
, uöt8 
£qNum
 );

440 
ZSètus_t
 
z˛Lightög_Cﬁ‹C⁄åﬁ_Síd_MoveHueCmd
–
uöt8
 
§cEP
, 
afAddrTy≥_t
 *
d°Addr
,

441 
uöt8
 
moveMode
, uöt8 
øã
,

442 
uöt8
 
dißbÀDeÁu…R•
, uöt8 
£qNum
 );

450 
ZSètus_t
 
z˛Lightög_Cﬁ‹C⁄åﬁ_Síd_SãpHueCmd
–
uöt8
 
§cEP
, 
afAddrTy≥_t
 *
d°Addr
,

451 
uöt8
 
°ïMode
, uöt8 
°ïSize
, uöt8 
å™sôi⁄Time
,

452 
uöt8
 
dißbÀDeÁu…R•
, uöt8 
£qNum
 );

459 
ZSètus_t
 
z˛Lightög_Cﬁ‹C⁄åﬁ_Síd_MoveToS©uøti⁄Cmd
–
uöt8
 
§cEP
, 
afAddrTy≥_t
 *
d°Addr
,

460 
uöt8
 
ßtuøti⁄
, 
uöt16
 
å™sôi⁄Time
,

461 
uöt8
 
dißbÀDeÁu…R•
, uöt8 
£qNum
 );

470 
ZSètus_t
 
z˛Lightög_Cﬁ‹C⁄åﬁ_Síd_MoveS©uøti⁄Cmd
–
uöt8
 
§cEP
, 
afAddrTy≥_t
 *
d°Addr
,

471 
uöt8
 
moveMode
, uöt8 
øã
,

472 
uöt8
 
dißbÀDeÁu…R•
, uöt8 
£qNum
 );

480 
ZSètus_t
 
z˛Lightög_Cﬁ‹C⁄åﬁ_Síd_SãpS©uøti⁄Cmd
–
uöt8
 
§cEP
, 
afAddrTy≥_t
 *
d°Addr
,

481 
uöt8
 
°ïMode
, uöt8 
°ïSize
, uöt8 
å™sôi⁄Time
,

482 
uöt8
 
dißbÀDeÁu…R•
, uöt8 
£qNum
 );

490 
ZSètus_t
 
z˛Lightög_Cﬁ‹C⁄åﬁ_Síd_MoveToHueAndS©uøti⁄Cmd
–
uöt8
 
§cEP
, 
afAddrTy≥_t
 *
d°Addr
,

491 
uöt8
 
hue
, uöt8 
ßtuøti⁄
, 
uöt16
 
å™sôi⁄Time
,

492 
uöt8
 
dißbÀDeÁu…R•
, uöt8 
£qNum
 );

500 
ZSètus_t
 
z˛Lightög_Cﬁ‹C⁄åﬁ_Síd_MoveToCﬁ‹Cmd
–
uöt8
 
§cEP
, 
afAddrTy≥_t
 *
d°Addr
,

501 
uöt16
 
cﬁ‹X
, uöt16 
cﬁ‹Y
, uöt16 
å™sôi⁄Time
,

502 
uöt8
 
dißbÀDeÁu…R•
, uöt8 
£qNum
 );

511 
ZSètus_t
 
z˛Lightög_Cﬁ‹C⁄åﬁ_Síd_MoveCﬁ‹Cmd
–
uöt8
 
§cEP
, 
afAddrTy≥_t
 *
d°Addr
,

512 
öt16
 
øãX
, i¡16 
øãY
,

513 
uöt8
 
dißbÀDeÁu…R•
, uöt8 
£qNum
 );

522 
ZSètus_t
 
z˛Lightög_Cﬁ‹C⁄åﬁ_Síd_SãpCﬁ‹Cmd
–
uöt8
 
§cEP
, 
afAddrTy≥_t
 *
d°Addr
,

523 
öt16
 
°ïX
, i¡16 
°ïY
, 
uöt16
 
å™sôi⁄Time
,

524 
uöt8
 
dißbÀDeÁu…R•
, uöt8 
£qNum
 );

532 
ZSètus_t
 
z˛Lightög_Cﬁ‹C⁄åﬁ_Síd_MoveToCﬁ‹Tem≥øtuªCmd
–
uöt8
 
§cEP
, 
afAddrTy≥_t
 *
d°Addr
,

533 
uöt16
 
cﬁ‹Tem≥øtuª
, uöt16 
å™sôi⁄Time
,

534 
uöt8
 
dißbÀDeÁu…R•
, uöt8 
£qNum
 );

539 #ifde‡
__˝lu•lus


	@Components/stack/zcl/zcl_ms.c

43 
	~"ZComDef.h
"

44 
	~"OSAL.h
"

45 
	~"z˛.h
"

46 
	~"z˛_gíîÆ.h
"

47 
	~"z˛_ms.h
"

49 #i‡
deföed
 ( 
INTER_PAN
 )

50 
	~"°ub_≠s.h
"

64 
	sz˛MSCBRec


66 
z˛MSCBRec
 *
	m√xt
;

67 
uöt8
 
	mídpoöt
;

68 
z˛MS_AµCÆlbacks_t
 *
	mCBs
;

69 } 
	tz˛MSCBRec_t
;

82 
z˛MSCBRec_t
 *
	gz˛MSCBs
 = (z˛MSCBRec_à*)
NULL
;

83 
uöt8
 
	gz˛MSPlugöRegi°ed
 = 
FALSE
;

88 
ZSètus_t
 
z˛MS_HdlIncomög
–
z˛Incomög_t
 *
pInMsg
 );

89 
ZSètus_t
 
z˛MS_HdlInS≥cificComm™ds
–
z˛Incomög_t
 *
pInMsg
 );

90 
z˛MS_AµCÆlbacks_t
 *
z˛MS_FödCÆlbacks
–
uöt8
 
ídpoöt
 );

92 
ZSètus_t
 
z˛MS_Pro˚ssIn_IŒumö™˚MósuªmítCmds
–
z˛Incomög_t
 *
pInMsg
 );

93 
ZSètus_t
 
z˛MS_Pro˚ssIn_IŒumö™˚LevñSísögCmds
–
z˛Incomög_t
 *
pInMsg
 );

94 
ZSètus_t
 
z˛MS_Pro˚ssIn_Tem≥øtuªMósuªmítCmds
–
z˛Incomög_t
 *
pInMsg
 );

95 
ZSètus_t
 
z˛MS_Pro˚ssIn_PªssuªMósuªmítCmds
–
z˛Incomög_t
 *
pInMsg
 );

96 
ZSètus_t
 
z˛MS_Pro˚ssIn_FlowMósuªmítCmds
–
z˛Incomög_t
 *
pInMsg
 );

97 
ZSètus_t
 
z˛MS_Pro˚ssIn_Rñ©iveHumidôyCmds
–
z˛Incomög_t
 *
pInMsg
 );

98 
ZSètus_t
 
z˛MS_Pro˚ssIn_Occu∑ncySísögCmds
–
z˛Incomög_t
 *
pInMsg
 );

110 
ZSètus_t
 
	$z˛MS_Regi°îCmdCÆlbacks
–
uöt8
 
ídpoöt
, 
z˛MS_AµCÆlbacks_t
 *
ˇŒbacks
 )

112 
z˛MSCBRec_t
 *
pNewIãm
;

113 
z˛MSCBRec_t
 *
pLo›
;

116 i‡–!
z˛MSPlugöRegi°ed
 )

118 
	`z˛_ªgi°îPlugö
–
ZCL_CLUSTER_ID_MS_ILLUMINANCE_MEASUREMENT
,

119 
ZCL_CLUSTER_ID_MS_OCCUPANCY_SENSING
,

120 
z˛MS_HdlIncomög
 );

121 
z˛MSPlugöRegi°ed
 = 
TRUE
;

125 
pNewIãm
 = 
	`oßl_mem_Æloc
––
z˛MSCBRec_t
 ) );

126 i‡–
pNewIãm
 =
NULL
 )

127  (
ZMemEº‹
);

129 
pNewIãm
->
√xt
 = (
z˛MSCBRec_t
 *)
NULL
;

130 
pNewIãm
->
ídpoöt
 =Éndpoint;

131 
pNewIãm
->
CBs
 = 
ˇŒbacks
;

134 i‡–
z˛MSCBs
 =
NULL
 )

136 
z˛MSCBs
 = 
pNewIãm
;

141 
pLo›
 = 
z˛MSCBs
;

142  
pLo›
->
√xt
 !
NULL
 )

143 
pLo›
 =ÖLo›->
√xt
;

146 
pLo›
->
√xt
 = 
pNewIãm
;

148  ( 
ZSuc˚ss
 );

149 
	}
}

160 
z˛MS_AµCÆlbacks_t
 *
	$z˛MS_FödCÆlbacks
–
uöt8
 
ídpoöt
 )

162 
z˛MSCBRec_t
 *
pCBs
;

164 
pCBs
 = 
z˛MSCBs
;

165  
pCBs
 )

167 i‡–
pCBs
->
ídpoöt
 ==Éndpoint )

168  ( 
pCBs
->
CBs
 );

169 
pCBs
 =ÖCBs->
√xt
;

171  ( (
z˛MS_AµCÆlbacks_t
 *)
NULL
 );

172 
	}
}

186 
ZSètus_t
 
	$z˛MS_HdlIncomög
–
z˛Incomög_t
 *
pInMsg
 )

188 
ZSètus_t
 
°©
 = 
ZSuc˚ss
;

190 #i‡
	`deföed
 ( 
INTER_PAN
 )

191 i‡–
	`StubAPS_I¡îP™
–
pInMsg
->
msg
->
§cAddr
.
∑nId
,ÖInMsg->msg->§cAddr.
ídPoöt
 ) )

192  ( 
°©
 );

194 i‡–
	`z˛_Clu°îCmd
–
pInMsg
->
hdr
.
fc
.
ty≥
 ) )

197 i‡–
pInMsg
->
hdr
.
fc
.
m™uS≥cific
 == 0 )

199 
°©
 = 
	`z˛MS_HdlInS≥cificComm™ds
–
pInMsg
 );

204 
°©
 = 
ZFaûuª
;

210 
°©
 = 
ZFaûuª
;

212  ( 
°©
 );

213 
	}
}

225 
ZSètus_t
 
	$z˛MS_HdlInS≥cificComm™ds
–
z˛Incomög_t
 *
pInMsg
 )

227 
ZSètus_t
 
°©
 = 
ZSuc˚ss
;

228 
z˛MS_AµCÆlbacks_t
 *
pCBs
;

231 
pCBs
 = (*)
	`z˛MS_FödCÆlbacks
–
pInMsg
->
msg
->
ídPoöt
 );

232 i‡–
pCBs
 =
NULL
 )

233  ( 
ZFaûuª
 );

235  
pInMsg
->
msg
->
˛u°îId
 )

237 
ZCL_CLUSTER_ID_MS_ILLUMINANCE_MEASUREMENT
:

238 
°©
 = 
	`z˛MS_Pro˚ssIn_IŒumö™˚MósuªmítCmds
–
pInMsg
 );

241 
ZCL_CLUSTER_ID_MS_ILLUMINANCE_LEVEL_SENSING_CONFIG
:

242 
°©
 = 
	`z˛MS_Pro˚ssIn_IŒumö™˚LevñSísögCmds
–
pInMsg
 );

245 
ZCL_CLUSTER_ID_MS_TEMPERATURE_MEASUREMENT
:

246 
°©
 = 
	`z˛MS_Pro˚ssIn_Tem≥øtuªMósuªmítCmds
–
pInMsg
 );

249 
ZCL_CLUSTER_ID_MS_PRESSURE_MEASUREMENT
:

250 
°©
 = 
	`z˛MS_Pro˚ssIn_PªssuªMósuªmítCmds
–
pInMsg
 );

253 
ZCL_CLUSTER_ID_MS_FLOW_MEASUREMENT
:

254 
°©
 = 
	`z˛MS_Pro˚ssIn_FlowMósuªmítCmds
–
pInMsg
 );

257 
ZCL_CLUSTER_ID_MS_RELATIVE_HUMIDITY
:

258 
°©
 = 
	`z˛MS_Pro˚ssIn_Rñ©iveHumidôyCmds
–
pInMsg
 );

261 
ZCL_CLUSTER_ID_MS_OCCUPANCY_SENSING
:

262 
°©
 = 
	`z˛MS_Pro˚ssIn_Occu∑ncySísögCmds
–
pInMsg
 );

266 
°©
 = 
ZFaûuª
;

270  ( 
°©
 );

271 
	}
}

283 
ZSètus_t
 
	$z˛MS_Pro˚ssIn_IŒumö™˚MósuªmítCmds
–
z˛Incomög_t
 *
pInMsg
 )

285 
ZSètus_t
 
°©
 = 
ZFaûuª
;

290 ()
pInMsg
;

291 i‡–
°©
 !
ZFaûuª
 )

292 
	`z˛MS_FödCÆlbacks
( 0 );

294  ( 
°©
 );

295 
	}
}

307 
ZSètus_t
 
	$z˛MS_Pro˚ssIn_IŒumö™˚LevñSísögCmds
–
z˛Incomög_t
 *
pInMsg
 )

309 
ZSètus_t
 
°©
 = 
ZSuc˚ss
;

310 
uöt8
 
cmdID
;

312 
cmdID
 = 
pInMsg
->
hdr
.
comm™dID
;

314  
cmdID
 )

318 
°©
 = 
ZFaûuª
;

322  ( 
°©
 );

323 
	}
}

335 
ZSètus_t
 
	$z˛MS_Pro˚ssIn_Tem≥øtuªMósuªmítCmds
–
z˛Incomög_t
 *
pInMsg
 )

337 
ZSètus_t
 
°©
 = 
ZSuc˚ss
;

338 
uöt8
 
cmdID
;

340 
cmdID
 = 
pInMsg
->
hdr
.
comm™dID
;

342  
cmdID
 )

346 
°©
 = 
ZFaûuª
;

350  ( 
°©
 );

351 
	}
}

363 
ZSètus_t
 
	$z˛MS_Pro˚ssIn_PªssuªMósuªmítCmds
–
z˛Incomög_t
 *
pInMsg
 )

365 
ZSètus_t
 
°©
 = 
ZSuc˚ss
;

366 
uöt8
 
cmdID
;

368 
cmdID
 = 
pInMsg
->
hdr
.
comm™dID
;

370  
cmdID
 )

373 
°©
 = 
ZFaûuª
;

377  ( 
°©
 );

378 
	}
}

390 
ZSètus_t
 
	$z˛MS_Pro˚ssIn_FlowMósuªmítCmds
–
z˛Incomög_t
 *
pInMsg
 )

392 
ZSètus_t
 
°©
 = 
ZSuc˚ss
;

393 
uöt8
 
cmdID
;

395 
cmdID
 = 
pInMsg
->
hdr
.
comm™dID
;

397  
cmdID
 )

401 
°©
 = 
ZFaûuª
;

405  ( 
°©
 );

406 
	}
}

418 
ZSètus_t
 
	$z˛MS_Pro˚ssIn_Rñ©iveHumidôyCmds
–
z˛Incomög_t
 *
pInMsg
 )

420 
ZSètus_t
 
°©
 = 
ZSuc˚ss
;

421 
uöt8
 
cmdID
;

423 
cmdID
 = 
pInMsg
->
hdr
.
comm™dID
;

425  
cmdID
 )

429 
°©
 = 
ZFaûuª
;

433  ( 
°©
 );

434 
	}
}

446 
ZSètus_t
 
	$z˛MS_Pro˚ssIn_Occu∑ncySísögCmds
–
z˛Incomög_t
 *
pInMsg
 )

448 
ZSètus_t
 
°©
 = 
ZSuc˚ss
;

449 
uöt8
 
cmdID
;

451 
cmdID
 = 
pInMsg
->
hdr
.
comm™dID
;

453  
cmdID
 )

457 
°©
 = 
ZFaûuª
;

461  ( 
°©
 );

462 
	}
}

	@Components/stack/zcl/zcl_ms.h

40 #i‚de‡
ZCL_MS_H


41 
	#ZCL_MS_H


	)

43 #ifde‡
__˝lu•lus


51 
	~"z˛.h
"

62 
	#ATTRID_MS_ILLUMINANCE_MEASURED_VALUE
 0x0000

	)

63 
	#ATTRID_MS_ILLUMINANCE_MIN_MEASURED_VALUE
 0x0001

	)

64 
	#ATTRID_MS_ILLUMINANCE_MAX_MEASURED_VALUE
 0x0002

	)

65 
	#ATTRID_MS_ILLUMINANCE_TOLERANCE
 0x0003

	)

66 
	#ATTRID_MS_ILLUMINANCE_LIGHT_SENSOR_TYPE
 0x0004

	)

71 
	#MS_ILLUMINANCE_LIGHT_SENSOR_PHOTODIODE
 0x00

	)

72 
	#MS_ILLUMINANCE_LIGHT_SENSOR_CMOS
 0x01

	)

73 
	#MS_ILLUMINANCE_LIGHT_SENSOR_UNKNOWN
 0xFF

	)

79 
	#ATTRID_MS_ILLUMINANCE_LEVEL_STATUS
 0x0000

	)

80 
	#ATTRID_MS_ILLUMINANCE_LEVEL_LIGHT_SENSOR_TYPE
 0x0001

	)

82 
	#MS_ILLUMINANCE_LEVEL_ON_TARGET
 0x00

	)

83 
	#MS_ILLUMINANCE_LEVEL_BELOW_TARGET
 0x01

	)

84 
	#MS_ILLUMINANCE_LEVEL_ABOVE_TARGET
 0x02

	)

86 
	#MS_ILLUMINANCE_LEVEL_LIGHT_SENSOR_PHOTODIODE
 0x00

	)

87 
	#MS_ILLUMINANCE_LEVEL_LIGHT_SENSOR_CMOS
 0x01

	)

88 
	#MS_ILLUMINANCE_LEVEL_LIGHT_SENSOR_UNKNOWN
 0xFF

	)

90 
	#ATTRID_MS_ILLUMINANCE_TARGET_LEVEL
 0x0010

	)

96 
	#ATTRID_MS_TEMPERATURE_MEASURED_VALUE
 0x0000

	)

97 
	#ATTRID_MS_TEMPERATURE_MIN_MEASURED_VALUE
 0x0001

	)

98 
	#ATTRID_MS_TEMPERATURE_MAX_MEASURED_VALUE
 0x0002

	)

99 
	#ATTRID_MS_TEMPERATURE_TOLERANCE
 0x0003

	)

101 
	#ATTRID_MS_TEMPERATURE_MIN_PERCENT_CHANGE
 0x0010

	)

102 
	#ATTRID_MS_TEMPERATURE_MIN_ABSOLUTE_CHANGE
 0x0011

	)

108 
	#ATTRID_MS_PRESSURE_MEASUREMENT_MEASURED_VALUE
 0x0000

	)

109 
	#ATTRID_MS_PRESSURE_MEASUREMENT_MIN_MEASURED_VALUE
 0x0001

	)

110 
	#ATTRID_MS_PRESSURE_MEASUREMENT_MAX_MEASURED_VALUE
 0x0002

	)

111 
	#ATTRID_MS_PRESSURE_MEASUREMENT_TOLERANCE
 0x0003

	)

120 
	#ATTRID_MS_FLOW_MEASUREMENT_MEASURED_VALUE
 0x0000

	)

121 
	#ATTRID_MS_FLOW_MEASUREMENT_MIN_MEASURED_VALUE
 0x0001

	)

122 
	#ATTRID_MS_FLOW_MEASUREMENT_MAX_MEASURED_VALUE
 0x0002

	)

123 
	#ATTRID_MS_FLOW_MEASUREMENT_TOLERANCE
 0x0003

	)

132 
	#ATTRID_MS_RELATIVE_HUMIDITY_MEASURED_VALUE
 0x0000

	)

133 
	#ATTRID_MS_RELATIVE_HUMIDITY_MIN_MEASURED_VALUE
 0x0001

	)

134 
	#ATTRID_MS_RELATIVE_HUMIDITY_MAX_MEASURED_VALUE
 0x0002

	)

135 
	#ATTRID_MS_RELATIVE_HUMIDITY_TOLERANCE
 0x0003

	)

141 
	#ATTRID_MS_OCCUPANCY_SENSING_CONFIG_OCCUPANCY
 0x0000

	)

142 
	#ATTRID_MS_OCCUPANCY_SENSING_CONFIG_OCCUPANCY_SENSOR_TYPE
 0x0001

	)

144 
	#MS_OCCUPANCY_SENSOR_TYPE_PIR
 0x00

	)

145 
	#MS_OCCUPANCY_SENSOR_TYPE_ULTRASONIC
 0x01

	)

146 
	#MS_OCCUPANCY_SENSOR_TYPE_PIR_AND_ULTRASONIC
 0x02

	)

148 
	#ATTRID_MS_OCCUPANCY_SENSING_CONFIG_PIR_O_TO_U_DELAY
 0x0010

	)

149 
	#ATTRID_MS_OCCUPANCY_SENSING_CONFIG_PIR_U_TO_O_DELAY
 0x0011

	)

151 
	#ATTRID_MS_OCCUPANCY_SENSING_CONFIG_ULTRASONIC_O_TO_U_DELAY
 0x0020

	)

152 
	#ATTRID_MS_OCCUPANCY_SENSING_CONFIG_ULTRASONIC_U_TO_O_DELAY
 0x0021

	)

163 (*
z˛MS_Pœ˚Hﬁdî_t
)( );

169 
z˛MS_Pœ˚Hﬁdî_t
 
p‚MSPœ˚Hﬁdî
;

171 } 
	tz˛MS_AµCÆlbacks_t
;

186 
ZSètus_t
 
z˛MS_Regi°îCmdCÆlbacks
–
uöt8
 
ídpoöt
, 
z˛MS_AµCÆlbacks_t
 *
ˇŒbacks
 );

189 #ifde‡
__˝lu•lus


	@Components/stack/zcl/zcl_se.c

44 
	~"ZComDef.h
"

45 
	~"OSAL.h
"

46 
	~"z˛.h
"

47 
	~"z˛_gíîÆ.h
"

48 
	~"z˛_£.h
"

49 
	~"DebugTø˚.h
"

51 #i‡
deföed
 ( 
INTER_PAN
 )

52 
	~"°ub_≠s.h
"

56 
	~"z˛_key_e°ablish.h
"

63 
	#INTER_PAN_CLUSTER
–
id
 ) ( (idË=
ZCL_CLUSTER_ID_SE_PRICING
 || \

	)

64 (
	gid
Ë=
ZCL_CLUSTER_ID_SE_MESSAGE
 )

73 
	sz˛SECBRec


75 
z˛SECBRec
 *
√xt
;

76 
uöt8
 
	mídpoöt
;

77 
z˛SE_AµCÆlbacks_t
 *
	mCBs
;

78 } 
	tz˛SECBRec_t
;

91 
z˛SECBRec_t
 *
	gz˛SECBs
 = (z˛SECBRec_à*)
NULL
;

92 
uöt8
 
	gz˛SEPlugöRegi°ed
 = 
FALSE
;

98 
ZSètus_t
 
z˛SE_HdlIncomög
–
z˛Incomög_t
 *
pInMsg
 );

99 
ZSètus_t
 
z˛SE_HdlInS≥cificComm™ds
–
z˛Incomög_t
 *
pInMsg
 );

101 #ifde‡
ZCL_SIMPLE_METERING


102 
ZSètus_t
 
z˛SE_Pro˚ssInSim∂eMëîögCmds
–
z˛Incomög_t
 *
pInMsg
, 
z˛SE_AµCÆlbacks_t
 *
pCBs
 );

103 
ZSètus_t
 
z˛SE_Pro˚ssInCmd_Sim∂eMëî_GëProfûeCmd
–
z˛Incomög_t
 *
pInMsg
, 
z˛SE_AµCÆlbacks_t
 *
pCBs
 );

104 
ZSètus_t
 
z˛SE_Pro˚ssInCmd_Sim∂eMëî_GëProfûeR•
–
z˛Incomög_t
 *
pInMsg
, 
z˛SE_AµCÆlbacks_t
 *
pCBs
 );

105 
ZSètus_t
 
z˛SE_Pro˚ssInCmd_Sim∂eMëî_ReqMúr‹Cmd
–
z˛Incomög_t
 *
pInMsg
, 
z˛SE_AµCÆlbacks_t
 *
pCBs
 );

106 
ZSètus_t
 
z˛SE_Pro˚ssInCmd_Sim∂eMëî_ReqMúr‹R•
–
z˛Incomög_t
 *
pInMsg
, 
z˛SE_AµCÆlbacks_t
 *
pCBs
 );

107 
ZSètus_t
 
z˛SE_Pro˚ssInCmd_Sim∂eMëî_Múr‹RemCmd
–
z˛Incomög_t
 *
pInMsg
, 
z˛SE_AµCÆlbacks_t
 *
pCBs
 );

108 
ZSètus_t
 
z˛SE_Pro˚ssInCmd_Sim∂eMëî_Múr‹RemR•
–
z˛Incomög_t
 *
pInMsg
, 
z˛SE_AµCÆlbacks_t
 *
pCBs
 );

111 #ifde‡
ZCL_PRICING


112 
ZSètus_t
 
z˛SE_Pro˚ssInPricögCmds
–
z˛Incomög_t
 *
pInMsg
, 
z˛SE_AµCÆlbacks_t
 *
pCBs
 );

113 
ZSètus_t
 
z˛SE_Pro˚ssInCmd_Pricög_GëCuºítPri˚
–
z˛Incomög_t
 *
pInMsg
, 
z˛SE_AµCÆlbacks_t
 *
pCBs
 );

114 
ZSètus_t
 
z˛SE_Pro˚ssInCmd_Pricög_GëScheduÀdPri˚
–
z˛Incomög_t
 *
pInMsg
, 
z˛SE_AµCÆlbacks_t
 *
pCBs
 );

115 
ZSètus_t
 
z˛SE_Pro˚ssInCmd_Pricög_PublishPri˚
–
z˛Incomög_t
 *
pInMsg
, 
z˛SE_AµCÆlbacks_t
 *
pCBs
 );

118 #ifde‡
ZCL_MESSAGE


119 
ZSètus_t
 
z˛SE_Pro˚ssInMesßgeCmds
–
z˛Incomög_t
 *
pInMsg
, 
z˛SE_AµCÆlbacks_t
 *
pCBs
 );

120 
ZSètus_t
 
z˛SE_Pro˚ssInCmd_Mesßge_Di•œyMesßge
–
z˛Incomög_t
 *
pInMsg
, 
z˛SE_AµCÆlbacks_t
 *
pCBs
 );

121 
ZSètus_t
 
z˛SE_Pro˚ssInCmd_Mesßge_C™˚lMesßge
–
z˛Incomög_t
 *
pInMsg
, 
z˛SE_AµCÆlbacks_t
 *
pCBs
 );

122 
ZSètus_t
 
z˛SE_Pro˚ssInCmd_Mesßge_GëLa°Mesßge
–
z˛Incomög_t
 *
pInMsg
, 
z˛SE_AµCÆlbacks_t
 *
pCBs
 );

123 
ZSètus_t
 
z˛SE_Pro˚ssInCmd_Mesßge_MesßgeC⁄fúm©i⁄
–
z˛Incomög_t
 *
pInMsg
, 
z˛SE_AµCÆlbacks_t
 *
pCBs
 );

126 #ifde‡
ZCL_LOAD_CONTROL


127 
ZSètus_t
 
z˛SE_Pro˚ssInLﬂdC⁄åﬁCmds
–
z˛Incomög_t
 *
pInMsg
, 
z˛SE_AµCÆlbacks_t
 *
pCBs
 );

128 
ZSètus_t
 
z˛SE_Pro˚ssInCmd_LﬂdC⁄åﬁ_LﬂdC⁄åﬁEvít
–
z˛Incomög_t
 *
pInMsg
, 
z˛SE_AµCÆlbacks_t
 *
pCBs
 );

129 
ZSètus_t
 
z˛SE_Pro˚ssInCmd_LﬂdC⁄åﬁ_C™˚lLﬂdC⁄åﬁEvít
–
z˛Incomög_t
 *
pInMsg
, 
z˛SE_AµCÆlbacks_t
 *
pCBs
 );

130 
ZSètus_t
 
z˛SE_Pro˚ssInCmd_LﬂdC⁄åﬁ_C™˚lAŒLﬂdC⁄åﬁEvíts
–
z˛Incomög_t
 *
pInMsg
, 
z˛SE_AµCÆlbacks_t
 *
pCBs
 );

131 
ZSètus_t
 
z˛SE_Pro˚ssInCmd_LﬂdC⁄åﬁ_Rï‹tEvítSètus
–
z˛Incomög_t
 *
pInMsg
, 
z˛SE_AµCÆlbacks_t
 *
pCBs
 );

132 
ZSètus_t
 
z˛SE_Pro˚ssInCmd_LﬂdC⁄åﬁ_GëScheduÀdEvíts
–
z˛Incomög_t
 *
pInMsg
,

133 
z˛SE_AµCÆlbacks_t
 *
pCBs
 );

136 #ifde‡
ZCL_SIMPLE_METERING


152 
ZSètus_t
 
	$z˛SE_Sim∂eMëîög_Síd_GëProfûeCmd
–
uöt8
 
§cEP
, 
afAddrTy≥_t
 *
d°Addr
,

153 
uöt8
 
ch™√l
, 
uöt32
 
ídTime
, uöt8 
numOfPîiods
,

154 
uöt8
 
dißbÀDeÁu…R•
, uöt8 
£qNum
 )

156 
uöt8
 
buf
[6];

158 
buf
[0] = 
ch™√l
;

159 
	`oßl_buf„r_uöt32
–&
buf
[1], 
ídTime
 );

160 
buf
[5] = 
numOfPîiods
;

162  
	`z˛_SídComm™d
–
§cEP
, 
d°Addr
, 
ZCL_CLUSTER_ID_SE_SIMPLE_METERING
,

163 
COMMAND_SE_GET_PROFILE_CMD
, 
TRUE
,

164 
ZCL_FRAME_CLIENT_SERVER_DIR
, 
dißbÀDeÁu…R•
, 0, 
£qNum
, 6, 
buf
 );

165 
	}
}

187 
ZSètus_t
 
	$z˛SE_Sim∂eMëîög_Síd_GëProfûeR•
–
uöt8
 
§cEP
, 
afAddrTy≥_t
 *
d°Addr
,

188 
uöt32
 
ídTime
, 
uöt8
 
r•Sètus
, uöt8 
¥ofûeI¡îvÆPîiod
,

189 
uöt8
 
numOfPîiodDñivîed
, 
uöt24
 *
öãrvÆs
,

190 
uöt8
 
dißbÀDeÁu…R•
, uöt8 
£qNum
 )

192 
uöt8
 *
buf
;

193 
uöt8
 *
pBuf
;

194 
uöt8
 
i
;

195 
uöt8
 
Àn
;

196 
ZSètus_t
 
°©us
;

199 
Àn
 = 4 + 1 + 1 + 1 + (3 * 
numOfPîiodDñivîed
);

200 
buf
 = 
	`oßl_mem_Æloc
–
Àn
 );

201 i‡–
buf
 =
NULL
 )

202  (
ZMemEº‹
);

204 
	`oßl_buf„r_uöt32
–
buf
, 
ídTime
 );

205 
buf
[4] = 
r•Sètus
;

206 
buf
[5] = 
¥ofûeI¡îvÆPîiod
;

209 
buf
[6] = 
numOfPîiodDñivîed
;

210 
pBuf
 = &
buf
[7];

211  
i
 = 0; i< 
numOfPîiodDñivîed
; i++ )

213 
pBuf
 = 
	`oßl_buf„r_uöt24
–pBuf, *
öãrvÆs
++ );

216 
°©us
 = 
	`z˛_SídComm™d
–
§cEP
, 
d°Addr
, 
ZCL_CLUSTER_ID_SE_SIMPLE_METERING
,

217 
COMMAND_SE_GET_PROFILE_RSP
, 
TRUE
,

218 
ZCL_FRAME_SERVER_CLIENT_DIR
, 
dißbÀDeÁu…R•
, 0, 
£qNum
, 
Àn
, 
buf
 );

219 
	`oßl_mem_‰ì
–
buf
 );

220  
°©us
;

221 
	}
}

234 
ZSètus_t
 
	$z˛SE_Sim∂eMëîög_Síd_ReqMúr‹R•
–
uöt8
 
§cEP
, 
afAddrTy≥_t
 *
d°Addr
,

235 
uöt16
 
ídpoötId
,

236 
uöt8
 
dißbÀDeÁu…R•
, uöt8 
£qNum
 )

238 
ZSètus_t
 
°©us
;

239 
uöt8
 
buf
[2];

241 
buf
[0] = (
uöt8
Ë
ídpoötId
 ;

242 
buf
[1] = (
uöt8
)–
ídpoötId
 >> 8 );

244 
°©us
 = 
	`z˛_SídComm™d
–
§cEP
, 
d°Addr
, 
ZCL_CLUSTER_ID_SE_SIMPLE_METERING
,

245 
COMMAND_SE_REQ_MIRROR_RSP
, 
TRUE
,

246 
ZCL_FRAME_CLIENT_SERVER_DIR
, 
dißbÀDeÁu…R•
, 0, 
£qNum
, 2, 
buf
 );

248  
°©us
 ;

249 
	}
}

263 
ZSètus_t
 
	$z˛SE_Sim∂eMëîög_Síd_RemMúr‹R•
–
uöt8
 
§cEP
, 
afAddrTy≥_t
 *
d°Addr
,

264 
uöt16
 
ídpoötId
,

265 
uöt8
 
dißbÀDeÁu…R•
, uöt8 
£qNum
 )

267 
ZSètus_t
 
°©us
;

268 
uöt8
 
buf
[2];

270 
buf
[0] = (
uöt8
Ë
ídpoötId
 ;

271 
buf
[1] = (
uöt8
)–
ídpoötId
 >> 8 );

273 
°©us
 = 
	`z˛_SídComm™d
–
§cEP
, 
d°Addr
, 
ZCL_CLUSTER_ID_SE_SIMPLE_METERING
,

274 
COMMAND_SE_MIRROR_REM_RSP
, 
TRUE
,

275 
ZCL_FRAME_CLIENT_SERVER_DIR
, 
dißbÀDeÁu…R•
, 0, 
£qNum
, 2, 
buf
 );

277  
°©us
 ;

278 
	}
}

282 #ifde‡
ZCL_PRICING


295 
ZSètus_t
 
	$z˛SE_Pricög_Síd_GëScheduÀdPri˚
–
uöt8
 
§cEP
, 
afAddrTy≥_t
 *
d°Addr
,

296 
z˛CCGëScheduÀdPri˚_t
 *
cmd
,

297 
uöt8
 
dißbÀDeÁu…R•
, uöt8 
£qNum
 )

299 
uöt8
 
buf
[5];

300 
ZSètus_t
 
°©us
;

302 
	`oßl_buf„r_uöt32
–
buf
, 
cmd
->
°¨tTime
 );

303 
buf
[4] = 
cmd
->
numEvíts
;

305 
°©us
 = 
	`z˛_SídComm™d
–
§cEP
, 
d°Addr
, 
ZCL_CLUSTER_ID_SE_PRICING
,

306 
COMMAND_SE_GET_SCHEDULED_PRICE
, 
TRUE
,

307 
ZCL_FRAME_CLIENT_SERVER_DIR
, 
dißbÀDeÁu…R•
, 0,

308 
£qNum
, 5, 
buf
 );

310  
°©us
;

311 
	}
}

325 
ZSètus_t
 
	$z˛SE_Pricög_Síd_PublishPri˚
–
uöt8
 
§cEP
, 
afAddrTy≥_t
 *
d°Addr
,

326 
z˛CCPublishPri˚_t
 *
cmd
,

327 
uöt8
 
dißbÀDeÁu…R•
, uöt8 
£qNum
 )

329 
uöt8
 *
buf
;

330 
uöt8
 *
pBuf
;

331 
uöt8
 
bufLí
;

332 
ZSètus_t
 
°©us
;

334 
bufLí
 = 
PACKET_LEN_SE_PUBLISH_PRICE
 + 
cmd
->
øãLabñ
.
°rLí
;

335 
buf
 = 
	`oßl_mem_Æloc
–
bufLí
 );

336 i‡–
buf
 =
NULL
 )

337  (
ZMemEº‹
);

339 
pBuf
 = 
buf
;

341 
pBuf
 = 
	`oßl_buf„r_uöt32
–pBuf, 
cmd
->
¥ovidîId
 );

342 *
pBuf
++ = 
cmd
->
øãLabñ
.
°rLí
;

343 
pBuf
 = 
	`oßl_mem˝y
–pBuf, 
cmd
->
øãLabñ
.
pSå
, cmd->øãLabñ.
°rLí
 );

344 
pBuf
 = 
	`oßl_buf„r_uöt32
–pBuf, 
cmd
->
issuîEvítId
 );

345 
pBuf
 = 
	`oßl_buf„r_uöt32
–pBuf, 
cmd
->
cuºítTime
 );

346 *
pBuf
++ = 
cmd
->
unôOfMósuª
;

347 *
pBuf
++ = 
	`LO_UINT16
–
cmd
->
cuºícy
 );

348 *
pBuf
++ = 
	`HI_UINT16
–
cmd
->
cuºícy
 );

349 *
pBuf
++ = 
cmd
->
¥i˚TølögDigô
;

350 
pBuf
 = 
	`oßl_buf„r_uöt32
–pBuf, 
cmd
->
°¨tTime
 );

351 *
pBuf
++ = 
	`LO_UINT16
–
cmd
->
duøti⁄InMöuãs
 );

352 *
pBuf
++ = 
	`HI_UINT16
–
cmd
->
duøti⁄InMöuãs
 );

353 
pBuf
 = 
	`oßl_buf„r_uöt32
–pBuf, 
cmd
->
¥i˚
 );

354 *
pBuf
++ = 
cmd
->
¥i˚R©io
;

355 
pBuf
 = 
	`oßl_buf„r_uöt32
–pBuf, 
cmd
->
gíî©i⁄Pri˚
 );

356 *
pBuf
++ = 
cmd
->
gíî©i⁄Pri˚R©io
;

357 *
pBuf
 = 
cmd
->
¥i˚Tõr
;

359 
°©us
 = 
	`z˛_SídComm™d
–
§cEP
, 
d°Addr
, 
ZCL_CLUSTER_ID_SE_PRICING
,

360 
COMMAND_SE_PUBLISH_PRICE
, 
TRUE
,

361 
ZCL_FRAME_SERVER_CLIENT_DIR
, 
dißbÀDeÁu…R•
, 0,

362 
£qNum
, 
bufLí
, 
buf
 );

363 
	`oßl_mem_‰ì
(
buf
);

365  
°©us
;

366 
	}
}

370 #ifde‡
ZCL_MESSAGE


384 
ZSètus_t
 
	$z˛SE_Mesßge_Síd_Di•œyMesßge
–
uöt8
 
§cEP
, 
afAddrTy≥_t
 *
d°Addr
,

385 
z˛CCDi•œyMesßge_t
 *
cmd
,

386 
uöt8
 
dißbÀDeÁu…R•
, uöt8 
£qNum
 )

388 
uöt8
 *
buf
;

389 
uöt8
 *
pBuf
;

390 
uöt8
 
bufLí
;

391 
ZSètus_t
 
°©us
;

394 
bufLí
 = 4 + 1 + 4 + 2 + 1 + 
cmd
->
msgSåög
.
°rLí
;

396 
buf
 = 
	`oßl_mem_Æloc
–
bufLí
 );

398 i‡–
buf
 =
NULL
 )

399  (
ZMemEº‹
);

401 
pBuf
 = 
buf
;

402 
pBuf
 = 
	`oßl_buf„r_uöt32
–
buf
, 
cmd
->
mesßgeId
 );

403 *
pBuf
++ = 
cmd
->
mesßgeCål
.
å™smissi⁄Mode
 |

404 (
cmd
->
mesßgeCål
.
imp‹èn˚
 << 
SE_PROFILE_MSGCTRL_IMPORTANCE
)|

405 (
cmd
->
mesßgeCål
.
c⁄fúm©i⁄Requúed
 << 
SE_PROFILE_MSGCTRL_CONFREQUIRED
);

406 
pBuf
 = 
	`oßl_buf„r_uöt32
–pBuf, 
cmd
->
°¨tTime
 );

407 *
pBuf
++ = 
	`LO_UINT16
–
cmd
->
duøti⁄InMöuãs
 );

408 *
pBuf
++ = 
	`HI_UINT16
–
cmd
->
duøti⁄InMöuãs
 );

409 *
pBuf
++ = 
cmd
->
msgSåög
.
°rLí
;

411 
	`oßl_mem˝y
–
pBuf
, 
cmd
->
msgSåög
.
pSå
, cmd->msgSåög.
°rLí
 );

413 
°©us
 = 
	`z˛_SídComm™d
–
§cEP
, 
d°Addr
, 
ZCL_CLUSTER_ID_SE_MESSAGE
,

414 
COMMAND_SE_DISPLAY_MESSAGE
, 
TRUE
,

415 
ZCL_FRAME_SERVER_CLIENT_DIR
, 
dißbÀDeÁu…R•
, 0, 
£qNum
, 
bufLí
, 
buf
 );

416 
	`oßl_mem_‰ì
(
buf
);

417  
°©us
;

418 
	}
}

434 
ZSètus_t
 
	$z˛SE_Mesßge_Síd_C™˚lMesßge
–
uöt8
 
§cEP
, 
afAddrTy≥_t
 *
d°Addr
,

435 
uöt32
 
msgId
, 
uöt8
 
msgCål
,

436 
uöt8
 
dißbÀDeÁu…R•
, uöt8 
£qNum
 )

438 
uöt8
 
buf
[5];

440 
	`oßl_buf„r_uöt32
–
buf
, 
msgId
 );

441 
buf
[4] = 
msgCål
;

443  
	`z˛_SídComm™d
–
§cEP
, 
d°Addr
, 
ZCL_CLUSTER_ID_SE_MESSAGE
,

444 
COMMAND_SE_CANCEL_MESSAGE
, 
TRUE
,

445 
ZCL_FRAME_SERVER_CLIENT_DIR
, 
dißbÀDeÁu…R•
, 0, 
£qNum
, 5, 
buf
 );

446 
	}
}

460 
ZSètus_t
 
	$z˛SE_Mesßge_Síd_MesßgeC⁄fúm©i⁄
–
uöt8
 
§cEP
, 
afAddrTy≥_t
 *
d°Addr
,

461 
uöt32
 
msgId
, uöt32 
c⁄fúmTime
,

462 
uöt8
 
dißbÀDeÁu…R•
, uöt8 
£qNum
 )

464 
uöt8
 
buf
[8];

466 
	`oßl_buf„r_uöt32
–
buf
, 
msgId
 );

467 
	`oßl_buf„r_uöt32
–&
buf
[4], 
c⁄fúmTime
 );

469  
	`z˛_SídComm™d
–
§cEP
, 
d°Addr
, 
ZCL_CLUSTER_ID_SE_MESSAGE
,

470 
COMMAND_SE_MESSAGE_CONFIRMATION
, 
TRUE
,

471 
ZCL_FRAME_CLIENT_SERVER_DIR
, 
dißbÀDeÁu…R•
, 0, 
£qNum
, 8, 
buf
 );

472 
	}
}

475 #ifde‡
ZCL_LOAD_CONTROL


489 
ZSètus_t
 
	$z˛SE_LﬂdC⁄åﬁ_Síd_LﬂdC⁄åﬁEvít
–
uöt8
 
§cEP
, 
afAddrTy≥_t
 *
d°Addr
,

490 
z˛CCLﬂdC⁄åﬁEvít_t
* 
cmd
,

491 
uöt8
 
dißbÀDeÁu…R•
, uöt8 
£qNum
 )

493 
uöt8
 *
buf
;

494 
uöt8
 *
pBuf
;

495 
ZSètus_t
 
°©us
;

497 
buf
 = 
	`oßl_mem_Æloc
–
PACKET_LEN_SE_LOAD_CONTROL_EVENT
 );

499 i‡–
buf
 =
NULL
 )

500  (
ZMemEº‹
);

502 
pBuf
 = 
buf
;

503 
pBuf
 = 
	`oßl_buf„r_uöt32
–pBuf, 
cmd
->
issuîEvít
 );

504 
pBuf
 = 
	`oßl_buf„r_uöt24
–pBuf, 
cmd
->
devi˚GroupCœss
 );

505 
pBuf
 = 
	`oßl_buf„r_uöt32
–pBuf, 
cmd
->
°¨tTime
 );

506 *
pBuf
++ = 
	`LO_UINT16
–
cmd
->
duøti⁄InMöuãs
 );

507 *
pBuf
++ = 
	`HI_UINT16
–
cmd
->
duøti⁄InMöuãs
 );

508 *
pBuf
++ = 
cmd
->
¸ôiˇlôyLevñ
;

509 *
pBuf
++ = 
cmd
->
coﬁögTem≥øtuªOff£t
;

510 *
pBuf
++ = 
cmd
->
hótögTem≥øtuªOff£t
;

511 *
pBuf
++ = 
	`LO_UINT16
–
cmd
->
coﬁögTem≥øtuªSëPoöt
 );

512 *
pBuf
++ = 
	`HI_UINT16
–
cmd
->
coﬁögTem≥øtuªSëPoöt
 );

513 *
pBuf
++ = 
	`LO_UINT16
–
cmd
->
hótögTem≥øtuªSëPoöt
 );

514 *
pBuf
++ = 
	`HI_UINT16
–
cmd
->
hótögTem≥øtuªSëPoöt
 );

515 *
pBuf
++ = 
cmd
->
avîageLﬂdAdju°mítPî˚¡age
;

516 *
pBuf
++ = 
cmd
->
dutyCy˛e
;

517 *
pBuf
 = 
cmd
->
evítC⁄åﬁ
;

519 
°©us
 = 
	`z˛_SídComm™d
–
§cEP
, 
d°Addr
, 
ZCL_CLUSTER_ID_SE_LOAD_CONTROL
,

520 
COMMAND_SE_LOAD_CONTROL_EVENT
, 
TRUE
,

521 
ZCL_FRAME_SERVER_CLIENT_DIR
, 
dißbÀDeÁu…R•
, 0, 
£qNum
,

522 
PACKET_LEN_SE_LOAD_CONTROL_EVENT
, 
buf
 );

523 
	`oßl_mem_‰ì
(
buf
);

525  
°©us
;

526 
	}
}

540 
ZSètus_t
 
	$z˛SE_LﬂdC⁄åﬁ_Síd_C™˚lLﬂdC⁄åﬁEvít
–
uöt8
 
§cEP
, 
afAddrTy≥_t
 *
d°Addr
,

541 
z˛CCC™˚lLﬂdC⁄åﬁEvít_t
 *
cmd
,

542 
uöt8
 
dißbÀDeÁu…R•
, uöt8 
£qNum
 )

544 
uöt8
 
buf
[
PACKET_LEN_SE_CANCEL_LOAD_CONTROL_EVENT
];

545 
uöt8
 *
pBuf
;

547 
pBuf
 = 
buf
;

549 
pBuf
 = 
	`oßl_buf„r_uöt32
–pBuf, 
cmd
->
issuîEvítID
 );

550 
pBuf
 = 
	`oßl_buf„r_uöt24
–pBuf, 
cmd
->
devi˚GroupCœss
 );

551 *
pBuf
++ = 
cmd
->
ˇn˚lC⁄åﬁ
;

552 
pBuf
 = 
	`oßl_buf„r_uöt32
–pBuf, 
cmd
->
ef„˘iveTime
 );

554  
	`z˛_SídComm™d
–
§cEP
, 
d°Addr
, 
ZCL_CLUSTER_ID_SE_LOAD_CONTROL
,

555 
COMMAND_SE_CANCEL_LOAD_CONTROL_EVENT
, 
TRUE
,

556 
ZCL_FRAME_SERVER_CLIENT_DIR
, 
dißbÀDeÁu…R•
, 0, 
£qNum
,

557 
PACKET_LEN_SE_CANCEL_LOAD_CONTROL_EVENT
, 
buf
 );

558 
	}
}

573 
ZSètus_t
 
	$z˛SE_LﬂdC⁄åﬁ_Síd_Rï‹tEvítSètus
–
uöt8
 
§cEP
, 
afAddrTy≥_t
 *
d°Addr
,

574 
z˛CCRï‹tEvítSètus_t
* 
cmd
,

575 
uöt8
 
dißbÀDeÁu…R•
, uöt8 
£qNum
 )

577 
uöt8
 *
buf
;

578 
uöt8
 *
pBuf
;

579 
ZSètus_t
 
°©us
;

581 
buf
 = 
	`oßl_mem_Æloc
–
PACKET_LEN_SE_REPORT_EVENT_STATUS
 );

583 i‡–
buf
 =
NULL
 )

584  (
ZMemEº‹
);

586 
pBuf
 = 
buf
;

587 
pBuf
 = 
	`oßl_buf„r_uöt32
–pBuf, 
cmd
->
issuîEvítID
 );

588 *
pBuf
++ = 
cmd
->
evítSètus
;

589 
pBuf
 = 
	`oßl_buf„r_uöt32
–pBuf, 
cmd
->
evítSèπTime
 );

590 *
pBuf
++ = 
cmd
->
¸ôiˇlôyLevñAµlõd
;

591 *
pBuf
++ = 
	`LO_UINT16
–
cmd
->
coﬁögTem≥øtuªSëPoötAµlõd
 );

592 *
pBuf
++ = 
	`HI_UINT16
–
cmd
->
coﬁögTem≥øtuªSëPoötAµlõd
 );

593 *
pBuf
++ = 
	`LO_UINT16
–
cmd
->
hótögTem≥øtuªSëPoötAµlõd
 );

594 *
pBuf
++ = 
	`HI_UINT16
–
cmd
->
hótögTem≥øtuªSëPoötAµlõd
 );

595 *
pBuf
++ = 
cmd
->
avîageLﬂdAdju°mít
;

596 *
pBuf
++ = 
cmd
->
dutyCy˛eAµlõd
;

597 *
pBuf
++ = 
cmd
->
evítC⁄åﬁ
;

598 *
pBuf
++ = 
cmd
->
sig«tuªTy≥
;

600 
	`z˛GíîÆ_KeyE°ablishmít_ECDSASign
–
buf
, 
PACKET_LEN_SE_REPORT_EVENT_STATUS_ONLY
, 
pBuf
);

602 
°©us
 = 
	`z˛_SídComm™d
–
§cEP
, 
d°Addr
, 
ZCL_CLUSTER_ID_SE_LOAD_CONTROL
,

603 
COMMAND_SE_REPORT_EVENT_STATUS
, 
TRUE
,

604 
ZCL_FRAME_CLIENT_SERVER_DIR
, 
dißbÀDeÁu…R•
, 0, 
£qNum
,

605 
PACKET_LEN_SE_REPORT_EVENT_STATUS
, 
buf
 );

606 
	`oßl_mem_‰ì
(
buf
);

608  
°©us
;

609 
	}
}

624 
ZSètus_t
 
	$z˛SE_LﬂdC⁄åﬁ_Síd_GëScheduÀdEvít
–
uöt8
 
§cEP
, 
afAddrTy≥_t
 *
d°Addr
,

625 
z˛CCGëScheduÀdEvít_t
 *
cmd
,

626 
uöt8
 
dißbÀDeÁu…R•
, uöt8 
£qNum
 )

628 
uöt8
 
buf
[
PACKET_LEN_SE_GET_SCHEDULED_EVENT
];

630 
	`oßl_buf„r_uöt32
–
buf
, 
cmd
->
°¨tTime
 );

631 
buf
[4] = 
cmd
->
numEvíts
;

633  
	`z˛_SídComm™d
–
§cEP
, 
d°Addr
, 
ZCL_CLUSTER_ID_SE_LOAD_CONTROL
,

634 
COMMAND_SE_GET_SCHEDULED_EVENT
, 
TRUE
,

635 
ZCL_FRAME_CLIENT_SERVER_DIR
, 
dißbÀDeÁu…R•
, 0, 
£qNum
,

636 
PACKET_LEN_SE_GET_SCHEDULED_EVENT
, 
buf
 );

637 
	}
}

651 
ZSètus_t
 
	$z˛SE_Regi°îCmdCÆlbacks
–
uöt8
 
ídpoöt
, 
z˛SE_AµCÆlbacks_t
 *
ˇŒbacks
 )

653 
z˛SECBRec_t
 *
pNewIãm
;

654 
z˛SECBRec_t
 *
pLo›
;

657 i‡–!
z˛SEPlugöRegi°ed
 )

659 
	`z˛_ªgi°îPlugö
–
ZCL_CLUSTER_ID_SE_PRICING
,

660 
ZCL_CLUSTER_ID_SE_PRE_PAYMENT
,

661 
z˛SE_HdlIncomög
 );

662 
z˛SEPlugöRegi°ed
 = 
TRUE
;

666 
pNewIãm
 = 
	`oßl_mem_Æloc
––
z˛SECBRec_t
 ) );

667 i‡–
pNewIãm
 =
NULL
 )

668  (
ZMemEº‹
);

670 
pNewIãm
->
√xt
 = (
z˛SECBRec_t
 *)
NULL
;

671 
pNewIãm
->
ídpoöt
 =Éndpoint;

672 
pNewIãm
->
CBs
 = 
ˇŒbacks
;

675 i‡–
z˛SECBs
 =
NULL
 )

677 
z˛SECBs
 = 
pNewIãm
;

682 
pLo›
 = 
z˛SECBs
;

683  
pLo›
->
√xt
 !
NULL
 )

684 
pLo›
 =ÖLo›->
√xt
;

687 
pLo›
->
√xt
 = 
pNewIãm
;

689  ( 
ZSuc˚ss
 );

690 
	}
}

692 #i‡
deföed
–
ZCL_LOAD_CONTROL
 ) || deföed–
ZCL_SIMPLE_METERING
 ) || \

693 
deföed
–
ZCL_PRICING
 ) || 
	$deföed
–
ZCL_MESSAGE
 )

703 
z˛SE_AµCÆlbacks_t
 *
	$z˛SE_FödCÆlbacks
–
uöt8
 
ídpoöt
 )

705 
z˛SECBRec_t
 *
pCBs
;

707 
pCBs
 = 
z˛SECBs
;

708  
pCBs
 )

710 i‡–
pCBs
->
ídpoöt
 ==Éndpoint )

711  ( 
pCBs
->
CBs
 );

712 
pCBs
 =ÖCBs->
√xt
;

714  ( (
z˛SE_AµCÆlbacks_t
 *)
NULL
 );

715 
	}
}

729 
ZSètus_t
 
	$z˛SE_HdlIncomög
–
z˛Incomög_t
 *
pInMsg
 )

731 
ZSètus_t
 
°©
 = 
ZSuc˚ss
;

733 #i‡
	`deföed
 ( 
INTER_PAN
 )

734 i‡–
	`StubAPS_I¡îP™
–
pInMsg
->
msg
->
§cAddr
.
∑nId
,ÖInMsg->msg->§cAddr.
ídPoöt
 ) &&

735 !
	`INTER_PAN_CLUSTER
(
pInMsg
->
msg
->
˛u°îId
) )

737  ( 
°©
 );

740 i‡–
	`z˛_Clu°îCmd
–
pInMsg
->
hdr
.
fc
.
ty≥
 ) )

743 i‡–
pInMsg
->
hdr
.
fc
.
m™uS≥cific
 == 0 )

745 
°©
 = 
	`z˛SE_HdlInS≥cificComm™ds
–
pInMsg
 );

750 
°©
 = 
ZFaûuª
;

756 
°©
 = 
ZFaûuª
;

758  ( 
°©
 );

759 
	}
}

771 
ZSètus_t
 
	$z˛SE_HdlInS≥cificComm™ds
–
z˛Incomög_t
 *
pInMsg
 )

773 
ZSètus_t
 
°©
;

774 
z˛SE_AµCÆlbacks_t
 *
pCBs
;

778 #i‡
	`deföed
–
ZCL_LOAD_CONTROL
 ) || deföed–
ZCL_SIMPLE_METERING
 ) || \

779 
	`deföed
–
ZCL_PRICING
 ) || deföed–
ZCL_MESSAGE
 )

781 
pCBs
 = 
	`z˛SE_FödCÆlbacks
–
pInMsg
->
msg
->
ídPoöt
 );

782 i‡–
pCBs
 =
NULL
 )

783  ( 
ZFaûuª
 );

786  
pInMsg
->
msg
->
˛u°îId
 )

788 #ifde‡
ZCL_SIMPLE_METERING


789 
ZCL_CLUSTER_ID_SE_SIMPLE_METERING
:

790 
°©
 = 
	`z˛SE_Pro˚ssInSim∂eMëîögCmds
–
pInMsg
, 
pCBs
 );

794 #ifde‡
ZCL_PRICING


795 
ZCL_CLUSTER_ID_SE_PRICING
:

796 
°©
 = 
	`z˛SE_Pro˚ssInPricögCmds
–
pInMsg
, 
pCBs
 );

800 #ifde‡
ZCL_MESSAGE


801 
ZCL_CLUSTER_ID_SE_MESSAGE
:

802 
°©
 = 
	`z˛SE_Pro˚ssInMesßgeCmds
–
pInMsg
, 
pCBs
 );

806 #ifde‡
ZCL_LOAD_CONTROL


807 
ZCL_CLUSTER_ID_SE_LOAD_CONTROL
:

808 
°©
 = 
	`z˛SE_Pro˚ssInLﬂdC⁄åﬁCmds
–
pInMsg
, 
pCBs
 );

812 
°©
 = 
ZFaûuª
;

816  ( 
°©
 );

817 
	}
}

819 #ifde‡
ZCL_SIMPLE_METERING


830 
ZSètus_t
 
	$z˛SE_Pro˚ssInSim∂eMëîögCmds
–
z˛Incomög_t
 *
pInMsg
,

831 
z˛SE_AµCÆlbacks_t
 *
pCBs
 )

833 
ZSètus_t
 
°©
 = 
ZSuc˚ss
;

835 i‡–
	`z˛_SîvîCmd
–
pInMsg
->
hdr
.
fc
.
dúe˘i⁄
 ) )

838 if–
pInMsg
->
hdr
.
comm™dID
 =
COMMAND_SE_GET_PROFILE_CMD
 )

840 
°©
 = 
	`z˛SE_Pro˚ssInCmd_Sim∂eMëî_GëProfûeCmd
–
pInMsg
, 
pCBs
 );

842 i‡–
pInMsg
->
hdr
.
comm™dID
 =
COMMAND_SE_REQ_MIRROR_RSP
 )

844 
°©
 = 
	`z˛SE_Pro˚ssInCmd_Sim∂eMëî_ReqMúr‹R•
–
pInMsg
, 
pCBs
 );

846 i‡–
pInMsg
->
hdr
.
comm™dID
 =
COMMAND_SE_MIRROR_REM_RSP
 )

848 
°©
 = 
	`z˛SE_Pro˚ssInCmd_Sim∂eMëî_Múr‹RemR•
–
pInMsg
, 
pCBs
 );

851 
°©
 = 
ZFaûuª
;

856 i‡–
pInMsg
->
hdr
.
comm™dID
 =
COMMAND_SE_GET_PROFILE_RSP
 )

858 
°©
 = 
	`z˛SE_Pro˚ssInCmd_Sim∂eMëî_GëProfûeR•
–
pInMsg
, 
pCBs
 );

860 i‡–
pInMsg
->
hdr
.
comm™dID
 =
COMMAND_SE_REQ_MIRROR_CMD
 )

862 
°©
 = 
	`z˛SE_Pro˚ssInCmd_Sim∂eMëî_ReqMúr‹Cmd
–
pInMsg
, 
pCBs
 );

864 i‡–
pInMsg
->
hdr
.
comm™dID
 =
COMMAND_SE_MIRROR_REM_CMD
 )

866 
°©
 = 
	`z˛SE_Pro˚ssInCmd_Sim∂eMëî_Múr‹RemCmd
–
pInMsg
, 
pCBs
 );

869 
°©
 = 
ZFaûuª
;

872  ( 
°©
 );

873 
	}
}

889 
ZSètus_t
 
	$z˛SE_Pro˚ssInCmd_Sim∂eMëî_GëProfûeCmd
–
z˛Incomög_t
 *
pInMsg
,

890 
z˛SE_AµCÆlbacks_t
 *
pCBs
 )

892 i‡–
pCBs
->
p‚Sim∂eMëî_GëProfûeCmd
 )

894 
z˛CCGëProfûeCmd_t
 
cmd
;

896 
cmd
.
ch™√l
 = 
pInMsg
->
pD©a
[0];

897 
cmd
.
ídTime
 = 
	`oßl_buûd_uöt32
–&
pInMsg
->
pD©a
[1], 4 );

898 
cmd
.
numOfPîiods
 = 
pInMsg
->
pD©a
[5];

901 i‡–
cmd
.
ch™√l
 > 
MAX_INTERVAL_CHANNEL_SE_SIMPLE_METERING
 )

903  
ZCL_STATUS_INVALID_FIELD
;

905 
pCBs
->
	`p‚Sim∂eMëî_GëProfûeCmd
–&
cmd
, &(
pInMsg
->
msg
->
§cAddr
),

906 
pInMsg
->
hdr
.
å™sSeqNum
 );

908  
ZCL_STATUS_CMD_HAS_RSP
;

912  
ZFaûuª
;

914 
	}
}

929 
ZSètus_t
 
	$z˛SE_Pro˚ssInCmd_Sim∂eMëî_GëProfûeR•
–
z˛Incomög_t
 *
pInMsg
,

930 
z˛SE_AµCÆlbacks_t
 *
pCBs
 )

932 i‡–
pCBs
->
p‚Sim∂eMëî_GëProfûeR•
 )

934 
uöt24
 *
pBuf24
;

935 
uöt8
 *
pBuf8
;

936 
uöt8
 
i
;

937 
z˛CCGëProfûeR•_t
 
cmd
;

939 
cmd
.
ídTime
 = 
	`oßl_buûd_uöt32
–&
pInMsg
->
pD©a
[0], 4 );

940 
cmd
.
°©us
 = 
pInMsg
->
pD©a
[4];

941 
cmd
.
¥ofûeI¡îvÆPîiod
 = 
pInMsg
->
pD©a
[5];

942 
cmd
.
numOfPîiodDñivîed
 = 
pInMsg
->
pD©a
[6];

945 i‡–
cmd
.
¥ofûeI¡îvÆPîiod
 > 
MAX_PROFILE_INTERVAL_PERIOD_SE_SIMPLE_METERING
 )

947  
ZCL_STATUS_INVALID_FIELD
;

951 
pBuf8
 = &
pInMsg
->
pD©a
[7];

954 
pBuf24
 = (
uöt24
*)
	`oßl_mem_Æloc
–
cmd
.
numOfPîiodDñivîed
 *

955 (
uöt24
) );

956 i‡–
pBuf24
 =
NULL
 )

957  
ZCL_STATUS_SOFTWARE_FAILURE
;

959 
cmd
.
öãrvÆs
 = 
pBuf24
;

960  
i
 = 0; i < 
cmd
.
numOfPîiodDñivîed
; i++ )

962 *(
pBuf24
++Ë
	`oßl_buûd_uöt32
–
pBuf8
, 3 );

963 
pBuf8
 += 3;

966 
pCBs
->
	`p‚Sim∂eMëî_GëProfûeR•
–&
cmd
, &(
pInMsg
->
msg
->
§cAddr
),

967 
pInMsg
->
hdr
.
å™sSeqNum
 );

969 
	`oßl_mem_‰ì
–
cmd
.
öãrvÆs
 );

971  
ZSuc˚ss
;

975  
ZFaûuª
;

977 
	}
}

989 
ZSètus_t
 
	$z˛SE_Pro˚ssInCmd_Sim∂eMëî_ReqMúr‹Cmd
–
z˛Incomög_t
 *
pInMsg
,

990 
z˛SE_AµCÆlbacks_t
 *
pCBs
 )

992 i‡–
pCBs
->
p‚Sim∂eMëî_ReqMúr‹Cmd
 )

994 
pCBs
->
	`p‚Sim∂eMëî_ReqMúr‹Cmd
–&(
pInMsg
->
msg
->
§cAddr
),

995 
pInMsg
->
hdr
.
å™sSeqNum
 );

996  
ZSuc˚ss
;

999  
ZFaûuª
;

1000 
	}
}

1012 
ZSètus_t
 
	$z˛SE_Pro˚ssInCmd_Sim∂eMëî_ReqMúr‹R•
–
z˛Incomög_t
 *
pInMsg
,

1013 
z˛SE_AµCÆlbacks_t
 *
pCBs
 )

1015 i‡–
pCBs
->
p‚Sim∂eMëî_ReqMúr‹R•
 )

1017 
z˛CCReqMúr‹R•_t
 
cmd
;

1019 
cmd
.
ídpoötId
 = 
	`BUILD_UINT16
–
pInMsg
->
pD©a
[0],ÖInMsg->pData[1] );

1021 
pCBs
->
	`p‚Sim∂eMëî_ReqMúr‹R•
–&
cmd
, &(
pInMsg
->
msg
->
§cAddr
),

1022 
pInMsg
->
hdr
.
å™sSeqNum
 );

1023  
ZSuc˚ss
 ;

1026  
ZFaûuª
;

1027 
	}
}

1039 
ZSètus_t
 
	$z˛SE_Pro˚ssInCmd_Sim∂eMëî_Múr‹RemCmd
–
z˛Incomög_t
 *
pInMsg
,

1040 
z˛SE_AµCÆlbacks_t
 *
pCBs
 )

1042 i‡–
pCBs
->
p‚Sim∂eMëî_Múr‹RemCmd
 )

1044 
pCBs
->
	`p‚Sim∂eMëî_Múr‹RemCmd
–&(
pInMsg
->
msg
->
§cAddr
),

1045 
pInMsg
->
hdr
.
å™sSeqNum
 );

1046  
ZSuc˚ss
;

1049  
ZFaûuª
;

1050 
	}
}

1062 
ZSètus_t
 
	$z˛SE_Pro˚ssInCmd_Sim∂eMëî_Múr‹RemR•
–
z˛Incomög_t
 *
pInMsg
,

1063 
z˛SE_AµCÆlbacks_t
 *
pCBs
 )

1065 i‡–
pCBs
->
p‚Sim∂eMëî_Múr‹RemR•
 )

1067 
z˛CCMúr‹RemR•_t
 
cmd
;

1069 
cmd
.
ídpoötId
 = 
pInMsg
->
pD©a
[0] | ( (
uöt16
)pInMsg->pData[1] << 8 );

1071 
pCBs
->
	`p‚Sim∂eMëî_Múr‹RemR•
–&
cmd
, &(
pInMsg
->
msg
->
§cAddr
),

1072 
pInMsg
->
hdr
.
å™sSeqNum
 );

1073  
ZSuc˚ss
;

1076  
ZFaûuª
;

1077 
	}
}

1082 #ifde‡
ZCL_PRICING


1093 
ZSètus_t
 
	$z˛SE_Pro˚ssInPricögCmds
–
z˛Incomög_t
 *
pInMsg
,

1094 
z˛SE_AµCÆlbacks_t
 *
pCBs
 )

1096 
ZSètus_t
 
°©
 = 
ZSuc˚ss
;

1098 i‡–
	`z˛_SîvîCmd
–
pInMsg
->
hdr
.
fc
.
dúe˘i⁄
 ) )

1101 if–
pInMsg
->
hdr
.
comm™dID
 =
COMMAND_SE_GET_CURRENT_PRICE
 )

1103 
°©
 = 
	`z˛SE_Pro˚ssInCmd_Pricög_GëCuºítPri˚
–
pInMsg
, 
pCBs
 );

1105 i‡–
pInMsg
->
hdr
.
comm™dID
 =
COMMAND_SE_GET_SCHEDULED_PRICE
 )

1107 
°©
 = 
	`z˛SE_Pro˚ssInCmd_Pricög_GëScheduÀdPri˚
–
pInMsg
, 
pCBs
 );

1110 
°©
 = 
ZFaûuª
;

1115 i‡–
pInMsg
->
hdr
.
comm™dID
 =
COMMAND_SE_PUBLISH_PRICE
 )

1117 
°©
 = 
	`z˛SE_Pro˚ssInCmd_Pricög_PublishPri˚
–
pInMsg
, 
pCBs
 );

1120 
°©
 = 
ZFaûuª
;

1123  ( 
°©
 );

1124 
	}
}

1137 
ZSètus_t
 
	$z˛SE_Pro˚ssInCmd_Pricög_GëCuºítPri˚
–
z˛Incomög_t
 *
pInMsg
,

1138 
z˛SE_AµCÆlbacks_t
 *
pCBs
 )

1140 i‡–
pCBs
->
p‚Pricög_GëCuºítPri˚
 )

1142 
z˛CCGëCuºítPri˚_t
 
cmd
;

1144 
cmd
.
›ti⁄
 = 
pInMsg
->
pD©a
[0];

1146 
pCBs
->
	`p‚Pricög_GëCuºítPri˚
–&
cmd
, &(
pInMsg
->
msg
->
§cAddr
),

1147 
pInMsg
->
hdr
.
å™sSeqNum
 );

1149  
ZCL_STATUS_CMD_HAS_RSP
;

1153  
ZFaûuª
;

1155 
	}
}

1168 
ZSètus_t
 
	$z˛SE_Pro˚ssInCmd_Pricög_GëScheduÀdPri˚
–
z˛Incomög_t
 *
pInMsg
,

1169 
z˛SE_AµCÆlbacks_t
 *
pCBs
 )

1171 i‡–
pCBs
->
p‚Pricög_GëScheduÀdPri˚
 )

1173 
z˛CCGëScheduÀdPri˚_t
 
cmd
;

1175 
cmd
.
°¨tTime
 = 
	`oßl_buûd_uöt32
–
pInMsg
->
pD©a
, 4 );

1176 
cmd
.
numEvíts
 = 
pInMsg
->
pD©a
[4];

1178 
pCBs
->
	`p‚Pricög_GëScheduÀdPri˚
–&
cmd
, &(
pInMsg
->
msg
->
§cAddr
),

1179 
pInMsg
->
hdr
.
å™sSeqNum
 );

1180  
ZCL_STATUS_CMD_HAS_RSP
;

1184  
ZFaûuª
;

1186 
	}
}

1201 
ZSètus_t
 
	$z˛SE_Pro˚ssInCmd_Pricög_PublishPri˚
–
z˛Incomög_t
 *
pInMsg
,

1202 
z˛SE_AµCÆlbacks_t
 *
pCBs
 )

1204 i‡–
pCBs
->
p‚Pricög_GëScheduÀdPri˚
 )

1206 
z˛CCPublishPri˚_t
 
cmd
;

1209 i‡–
	`z˛SE_P¨£InCmd_PublishPri˚
–&
cmd
, &(
pInMsg
->
pD©a
[0]),

1210 
pInMsg
->
pD©aLí
 ) =
ZSuc˚ss
 )

1212 i‡–
cmd
.
unôOfMósuª
 > 
MAX_UNIT_OF_MEASURE_SE
 )

1215 i‡–
cmd
.
øãLabñ
.
pSå
 !
NULL
 )

1217 
	`oßl_mem_‰ì
–
cmd
.
øãLabñ
.
pSå
 );

1219  
ZCL_STATUS_INVALID_FIELD
;

1222 
pCBs
->
	`p‚Pricög_PublishPri˚
–&
cmd
, &(
pInMsg
->
msg
->
§cAddr
),

1223 
pInMsg
->
hdr
.
å™sSeqNum
 );

1226 i‡–
cmd
.
øãLabñ
.
pSå
 !
NULL
 )

1228 
	`oßl_mem_‰ì
–
cmd
.
øãLabñ
.
pSå
 );

1231  
ZSuc˚ss
;

1235  
ZCL_STATUS_SOFTWARE_FAILURE
;

1240  
ZFaûuª
;

1242 
	}
}

1246 #ifde‡
ZCL_MESSAGE


1257 
ZSètus_t
 
	$z˛SE_Pro˚ssInMesßgeCmds
–
z˛Incomög_t
 *
pInMsg
,

1258 
z˛SE_AµCÆlbacks_t
 *
pCBs
 )

1260 
ZSètus_t
 
°©
 = 
ZSuc˚ss
;

1262 i‡–
	`z˛_SîvîCmd
–
pInMsg
->
hdr
.
fc
.
dúe˘i⁄
 ) )

1265 i‡–
pInMsg
->
hdr
.
comm™dID
 =
COMMAND_SE_GET_LAST_MESSAGE
 )

1267 
°©
 = 
	`z˛SE_Pro˚ssInCmd_Mesßge_GëLa°Mesßge
–
pInMsg
, 
pCBs
 );

1269 i‡–
pInMsg
->
hdr
.
comm™dID
 =
COMMAND_SE_MESSAGE_CONFIRMATION
 )

1271 
°©
 = 
	`z˛SE_Pro˚ssInCmd_Mesßge_MesßgeC⁄fúm©i⁄
–
pInMsg
, 
pCBs
 );

1274 
°©
 = 
ZFaûuª
;

1279 if–
pInMsg
->
hdr
.
comm™dID
 =
COMMAND_SE_DISPLAY_MESSAGE
 )

1281 
°©
 = 
	`z˛SE_Pro˚ssInCmd_Mesßge_Di•œyMesßge
–
pInMsg
, 
pCBs
 );

1283 i‡–
pInMsg
->
hdr
.
comm™dID
 =
COMMAND_SE_CANCEL_MESSAGE
 )

1285 
°©
 = 
	`z˛SE_Pro˚ssInCmd_Mesßge_C™˚lMesßge
–
pInMsg
, 
pCBs
 );

1288 
°©
 = 
ZFaûuª
;

1291  ( 
°©
 );

1292 
	}
}

1305 
ZSètus_t
 
	$z˛SE_Pro˚ssInCmd_Mesßge_Di•œyMesßge
–
z˛Incomög_t
 *
pInMsg
,

1306 
z˛SE_AµCÆlbacks_t
 *
pCBs
 )

1308 i‡–
pCBs
->
p‚Mesßge_Di•œyMesßge
 )

1310 
z˛CCDi•œyMesßge_t
 
cmd
;

1312 i‡–
	`z˛SE_P¨£InCmd_Di•œyMesßge
–&
cmd
, &(
pInMsg
->
pD©a
[0]),ÖInMsg->
pD©aLí
 ) =
ZSuc˚ss
 )

1314 
pCBs
->
	`p‚Mesßge_Di•œyMesßge
–&
cmd
, &(
pInMsg
->
msg
->
§cAddr
),

1315 
pInMsg
->
hdr
.
å™sSeqNum
 );

1318 i‡–
cmd
.
msgSåög
.
pSå
 !
NULL
 )

1319 
	`oßl_mem_‰ì
–
cmd
.
msgSåög
.
pSå
 );

1321  
ZSuc˚ss
;

1325  
ZFaûuª
;

1327 
	}
}

1339 
ZSètus_t
 
	$z˛SE_Pro˚ssInCmd_Mesßge_C™˚lMesßge
–
z˛Incomög_t
 *
pInMsg
,

1340 
z˛SE_AµCÆlbacks_t
 *
pCBs
 )

1342 i‡–
pCBs
->
p‚Mesßge_C™˚lMesßge
 )

1344 
z˛CCC™˚lMesßge_t
 
cmd
;

1346 
cmd
.
mesßgeId
 = 
	`oßl_buûd_uöt32
–&(
pInMsg
->
pD©a
[0]), 4 );

1349 
cmd
.
mesßgeCål
.
å™smissi⁄Mode
 = 
pInMsg
->
pD©a
[4] & 0x03;

1350 
cmd
.
mesßgeCål
.
imp‹èn˚
 = ( 
pInMsg
->
pD©a
[4] >> 
SE_PROFILE_MSGCTRL_IMPORTANCE
 ) & 0x03;

1351 
cmd
.
mesßgeCål
.
c⁄fúm©i⁄Requúed
 = ( 
pInMsg
->
pD©a
[4] >> 
SE_PROFILE_MSGCTRL_CONFREQUIRED
 ) & 0x01;

1353 
pCBs
->
	`p‚Mesßge_C™˚lMesßge
–&
cmd
, &(
pInMsg
->
msg
->
§cAddr
),

1354 
pInMsg
->
hdr
.
å™sSeqNum
 );

1356  
ZSuc˚ss
;

1360  
ZFaûuª
;

1362 
	}
}

1375 
ZSètus_t
 
	$z˛SE_Pro˚ssInCmd_Mesßge_GëLa°Mesßge
–
z˛Incomög_t
 *
pInMsg
,

1376 
z˛SE_AµCÆlbacks_t
 *
pCBs
 )

1378 i‡–
pCBs
->
p‚Mesßge_GëLa°Mesßge
 )

1380 
pCBs
->
	`p‚Mesßge_GëLa°Mesßge
–&(
pInMsg
->
msg
->
§cAddr
),ÖInMsg->
hdr
.
å™sSeqNum
 );

1381  
ZCL_STATUS_CMD_HAS_RSP
;

1385  
ZFaûuª
;

1387 
	}
}

1399 
ZSètus_t
 
	$z˛SE_Pro˚ssInCmd_Mesßge_MesßgeC⁄fúm©i⁄
–
z˛Incomög_t
 *
pInMsg
,

1400 
z˛SE_AµCÆlbacks_t
 *
pCBs
 )

1402 i‡–
pCBs
->
p‚Mesßge_MesßgeC⁄fúm©i⁄
 )

1404 
z˛CCMesßgeC⁄fúm©i⁄_t
 
cmd
;

1406 
cmd
.
mesßgeId
 = 
	`oßl_buûd_uöt32
–&(
pInMsg
->
pD©a
[0]), 4 );

1407 
cmd
.
c⁄fúmTime
 = 
	`oßl_buûd_uöt32
–&(
pInMsg
->
pD©a
[4]), 4 );

1409 
pCBs
->
	`p‚Mesßge_MesßgeC⁄fúm©i⁄
–&
cmd
, &(
pInMsg
->
msg
->
§cAddr
),

1410 
pInMsg
->
hdr
.
å™sSeqNum
 );

1411  
ZSuc˚ss
;

1415  
ZFaûuª
;

1417 
	}
}

1421 #ifde‡
ZCL_LOAD_CONTROL


1432 
ZSètus_t
 
	$z˛SE_Pro˚ssInLﬂdC⁄åﬁCmds
–
z˛Incomög_t
 *
pInMsg
,

1433 
z˛SE_AµCÆlbacks_t
 *
pCBs
 )

1435 
ZSètus_t
 
°©
 = 
ZSuc˚ss
;

1437 i‡–
	`z˛_SîvîCmd
–
pInMsg
->
hdr
.
fc
.
dúe˘i⁄
 ) )

1440 i‡–
pInMsg
->
hdr
.
comm™dID
 =
COMMAND_SE_REPORT_EVENT_STATUS
 )

1442 
°©
 = 
	`z˛SE_Pro˚ssInCmd_LﬂdC⁄åﬁ_Rï‹tEvítSètus
–
pInMsg
, 
pCBs
 );

1444 if–
pInMsg
->
hdr
.
comm™dID
 =
COMMAND_SE_GET_SCHEDULED_EVENT
 )

1446 
°©
 = 
	`z˛SE_Pro˚ssInCmd_LﬂdC⁄åﬁ_GëScheduÀdEvíts
–
pInMsg
, 
pCBs
 );

1449 
°©
 = 
ZFaûuª
;

1454 if–
pInMsg
->
hdr
.
comm™dID
 =
COMMAND_SE_LOAD_CONTROL_EVENT
 )

1456 
°©
 = 
	`z˛SE_Pro˚ssInCmd_LﬂdC⁄åﬁ_LﬂdC⁄åﬁEvít
–
pInMsg
, 
pCBs
 );

1458 i‡–
pInMsg
->
hdr
.
comm™dID
 =
COMMAND_SE_CANCEL_LOAD_CONTROL_EVENT
 )

1460 
°©
 = 
	`z˛SE_Pro˚ssInCmd_LﬂdC⁄åﬁ_C™˚lLﬂdC⁄åﬁEvít
–
pInMsg
, 
pCBs
 );

1462 i‡–
pInMsg
->
hdr
.
comm™dID
 =
COMMAND_SE_CANCEL_ALL_LOAD_CONTROL_EVENT
 )

1464 
°©
 = 
	`z˛SE_Pro˚ssInCmd_LﬂdC⁄åﬁ_C™˚lAŒLﬂdC⁄åﬁEvíts
–
pInMsg
, 
pCBs
 );

1467 
°©
 = 
ZFaûuª
;

1470  ( 
°©
 );

1471 
	}
}

1484 
ZSètus_t
 
	$z˛SE_Pro˚ssInCmd_LﬂdC⁄åﬁ_LﬂdC⁄åﬁEvít
–
z˛Incomög_t
 *
pInMsg
,

1485 
z˛SE_AµCÆlbacks_t
 *
pCBs
 )

1487 
uöt8
 
°©us
 = 
ZSuc˚ss
;

1489 i‡–
pCBs
->
p‚LﬂdC⁄åﬁ_LﬂdC⁄åﬁEvít
 )

1491 
z˛CCLﬂdC⁄åﬁEvít_t
 
cmd
;

1493 
	`z˛SE_P¨£InCmd_LﬂdC⁄åﬁEvít
–&
cmd
, &(
pInMsg
->
pD©a
[0]),ÖInMsg->
pD©aLí
 );

1496 i‡–
cmd
.
duøti⁄InMöuãs
 > 
MAX_DURATION_IN_MINUTES_SE_LOAD_CONTROL
 )

1498 
°©us
 = 
ZCL_STATUS_INVALID_FIELD
;

1501 i‡–
cmd
.
¸ôiˇlôyLevñ
 > 
MAX_CRITICAL_LEVEL_SE_LOAD_CONTROL
 )

1503 
°©us
 = 
ZCL_STATUS_INVALID_FIELD
;

1506 i‡–
cmd
. 
coﬁögTem≥øtuªSëPoöt
 !
SE_OPTIONAL_FIELD_TEMPERATURE_SET_POINT
 &&

1507 
cmd
. 
coﬁögTem≥øtuªSëPoöt
 > 
MAX_TEMPERATURE_SETPOINT_SE_LOAD_CONTROL
 )

1509 
°©us
 = 
ZCL_STATUS_INVALID_FIELD
;

1512 i‡–
cmd
. 
hótögTem≥øtuªSëPoöt
 !
SE_OPTIONAL_FIELD_TEMPERATURE_SET_POINT
 &&

1513 
cmd
. 
hótögTem≥øtuªSëPoöt
 > 
MAX_TEMPERATURE_SETPOINT_SE_LOAD_CONTROL
 )

1515 
°©us
 = 
ZCL_STATUS_INVALID_FIELD
;

1518 i‡–
cmd
.
avîageLﬂdAdju°mítPî˚¡age
 !
SE_OPTIONAL_FIELD_INT8
 &&

1519 (
cmd
.
avîageLﬂdAdju°mítPî˚¡age
 < 
MIN_AVERAGE_LOAD_ADJUSTMENT_PERCENTAGE_SE
 ||

1520 
cmd
.
avîageLﬂdAdju°mítPî˚¡age
 > 
MAX_AVERAGE_LOAD_ADJUSTMENT_PERCENTAGE_SE
 ) )

1522 
°©us
 = 
ZCL_STATUS_INVALID_FIELD
;

1525 i‡–
cmd
. 
dutyCy˛e
 !
SE_OPTIONAL_FIELD_UINT8
 &&

1526 
cmd
. 
dutyCy˛e
 > 
MAX_DUTY_CYCLE_SE_LOAD_CONTROL
 )

1528 
°©us
 = 
ZCL_STATUS_INVALID_FIELD
;

1532 i‡–
cmd
.
coﬁögTem≥øtuªOff£t
 =
SE_OPTIONAL_FIELD_UINT8
 ||

1533 
cmd
.
hótögTem≥øtuªOff£t
 =
SE_OPTIONAL_FIELD_UINT8
 ||

1534 
cmd
.
coﬁögTem≥øtuªSëPoöt
 =
SE_OPTIONAL_FIELD_UINT16
 ||

1535 
cmd
.
hótögTem≥øtuªSëPoöt
 =
SE_OPTIONAL_FIELD_UINT16
 )

1537 
cmd
.
coﬁögTem≥øtuªOff£t
 = 
SE_OPTIONAL_FIELD_UINT8
;

1538 
cmd
.
hótögTem≥øtuªOff£t
 = 
SE_OPTIONAL_FIELD_UINT8
;

1539 
cmd
.
coﬁögTem≥øtuªSëPoöt
 = 
SE_OPTIONAL_FIELD_UINT16
;

1540 
cmd
.
hótögTem≥øtuªSëPoöt
 = 
SE_OPTIONAL_FIELD_UINT16
;

1543 
pCBs
->
	`p‚LﬂdC⁄åﬁ_LﬂdC⁄åﬁEvít
–&
cmd
, &(
pInMsg
->
msg
->
§cAddr
), 
°©us
,ÖInMsg->
hdr
.
å™sSeqNum
 );

1547  
ZCL_STATUS_CMD_HAS_RSP
;

1550  
ZFaûuª
;

1551 
	}
}

1561 
ZSètus_t
 
	$z˛SE_Pro˚ssInCmd_LﬂdC⁄åﬁ_C™˚lLﬂdC⁄åﬁEvít
–
z˛Incomög_t
 *
pInMsg
,

1562 
z˛SE_AµCÆlbacks_t
 *
pCBs
 )

1564 i‡–
pCBs
->
p‚LﬂdC⁄åﬁ_C™˚lLﬂdC⁄åﬁEvít
 )

1566 
z˛CCC™˚lLﬂdC⁄åﬁEvít_t
 
cmd
;

1568 
	`z˛SE_P¨£InCmd_C™˚lLﬂdC⁄åﬁEvít
–&
cmd
, &(
pInMsg
->
pD©a
[0]),ÖInMsg->
pD©aLí
 );

1570 
pCBs
->
	`p‚LﬂdC⁄åﬁ_C™˚lLﬂdC⁄åﬁEvít
–&
cmd
, &(
pInMsg
->
msg
->
§cAddr
),ÖInMsg->
hdr
.
å™sSeqNum
 );

1571  
ZSuc˚ss
;

1574  
ZFaûuª
;

1575 
	}
}

1585 
ZSètus_t
 
	$z˛SE_Pro˚ssInCmd_LﬂdC⁄åﬁ_C™˚lAŒLﬂdC⁄åﬁEvíts
–
z˛Incomög_t
 *
pInMsg
,

1586 
z˛SE_AµCÆlbacks_t
 *
pCBs
 )

1588 i‡–
pCBs
->
p‚LﬂdC⁄åﬁ_C™˚lAŒLﬂdC⁄åﬁEvíts
 )

1590 
z˛CCC™˚lAŒLﬂdC⁄åﬁEvíts_t
 
cmd
;

1592 
cmd
.
ˇn˚lC⁄åﬁ
 = 
pInMsg
->
pD©a
[0];

1594 
pCBs
->
	`p‚LﬂdC⁄åﬁ_C™˚lAŒLﬂdC⁄åﬁEvíts
–&
cmd
, &(
pInMsg
->
msg
->
§cAddr
),ÖInMsg->
hdr
.
å™sSeqNum
 );

1595  
ZSuc˚ss
;

1598  
ZFaûuª
;

1599 
	}
}

1609 
ZSètus_t
 
	$z˛SE_Pro˚ssInCmd_LﬂdC⁄åﬁ_Rï‹tEvítSètus
–
z˛Incomög_t
 *
pInMsg
,

1610 
z˛SE_AµCÆlbacks_t
 *
pCBs
 )

1612 i‡–
pCBs
->
p‚LﬂdC⁄åﬁ_Rï‹tEvítSètus
 )

1615 
z˛CCRï‹tEvítSètus_t
 
cmd
;

1617 
	`z˛SE_P¨£InCmd_Rï‹tEvítSètus
–&
cmd
, &(
pInMsg
->
pD©a
[0]),ÖInMsg->
pD©aLí
 );

1620 i‡–
cmd
.
evítSètus
 !
EVENT_STATUS_LOAD_CONTROL_EVENT_REJECTED
 &&

1621 (
cmd
.
evítSètus
 == 0 ||

1622 
cmd
.
evítSètus
 > 
EVENT_STATUS_LOAD_CONTROL_EVENT_SUPERSEDED
 ) )

1624  
ZCL_STATUS_INVALID_FIELD
;

1627 i‡–
cmd
.
¸ôiˇlôyLevñAµlõd
 > 
MAX_CRITICAL_LEVEL_SE_LOAD_CONTROL
 )

1629  
ZCL_STATUS_INVALID_FIELD
;

1632 i‡–
cmd
.
coﬁögTem≥øtuªSëPoötAµlõd
 !
SE_OPTIONAL_FIELD_TEMPERATURE_SET_POINT
 &&

1633 
cmd
.
coﬁögTem≥øtuªSëPoötAµlõd
 > 
MAX_TEMPERATURE_SETPOINT_SE_LOAD_CONTROL
 )

1635  
ZCL_STATUS_INVALID_FIELD
;

1638 i‡–
cmd
.
hótögTem≥øtuªSëPoötAµlõd
 !
SE_OPTIONAL_FIELD_TEMPERATURE_SET_POINT
 &&

1639 
cmd
.
hótögTem≥øtuªSëPoötAµlõd
 > 
MAX_TEMPERATURE_SETPOINT_SE_LOAD_CONTROL
 )

1641  
ZCL_STATUS_INVALID_FIELD
;

1644 i‡–
cmd
.
avîageLﬂdAdju°mít
 !
SE_OPTIONAL_FIELD_INT8
 &&

1645 (
cmd
.
avîageLﬂdAdju°mít
 < 
MIN_AVERAGE_LOAD_ADJUSTMENT_PERCENTAGE_SE
 ||

1646 
cmd
.
avîageLﬂdAdju°mít
 > 
MAX_AVERAGE_LOAD_ADJUSTMENT_PERCENTAGE_SE
 ) )

1648  
ZCL_STATUS_INVALID_FIELD
;

1651 i‡–
cmd
.
dutyCy˛eAµlõd
 !
SE_OPTIONAL_FIELD_UINT8
 &&

1652 
cmd
.
dutyCy˛eAµlõd
 > 
MAX_DUTY_CYCLE_SE_LOAD_CONTROL
 )

1654  
ZCL_STATUS_INVALID_FIELD
;

1657 
pCBs
->
	`p‚LﬂdC⁄åﬁ_Rï‹tEvítSètus
–&
cmd
, &(
pInMsg
->
msg
->
§cAddr
),ÖInMsg->
hdr
.
å™sSeqNum
 );

1659  
ZSuc˚ss
;

1662  
ZFaûuª
;

1663 
	}
}

1673 
ZSètus_t
 
	$z˛SE_Pro˚ssInCmd_LﬂdC⁄åﬁ_GëScheduÀdEvíts
–
z˛Incomög_t
 *
pInMsg
,

1674 
z˛SE_AµCÆlbacks_t
 *
pCBs
 )

1676 i‡–
pCBs
->
p‚LﬂdC⁄åﬁ_GëScheduÀdEvíts
 )

1678 
z˛CCGëScheduÀdEvít_t
 
cmd
;

1680 
cmd
.
°¨tTime
 = 
	`oßl_buûd_uöt32
–
pInMsg
->
pD©a
, 4);

1681 
cmd
.
numEvíts
 = 
pInMsg
->
pD©a
[4];

1683 
pCBs
->
	`p‚LﬂdC⁄åﬁ_GëScheduÀdEvíts
–&
cmd
, &(
pInMsg
->
msg
->
§cAddr
),ÖInMsg->
hdr
.
å™sSeqNum
 );

1684  
ZSuc˚ss
;

1687  
ZFaûuª
;

1688 
	}
}

1692 #ifde‡
ZCL_PRICING


1703 
ZSètus_t
 
	$z˛SE_P¨£InCmd_PublishPri˚
–
z˛CCPublishPri˚_t
 *
cmd
, 
uöt8
 *
buf
, uöt8 
Àn
 )

1705 ()
Àn
;

1708 
cmd
->
¥ovidîId
 = 
	`oßl_buûd_uöt32
–
buf
, 4 );

1709 
buf
 += 4;

1712 
cmd
->
øãLabñ
.
°rLí
 = *
buf
++;

1713 i‡–
cmd
->
øãLabñ
.
°rLí
 =
SE_OPTIONAL_FIELD_UINT8
 )

1716 
cmd
->
øãLabñ
.
°rLí
 = 0;

1719 i‡–
cmd
->
øãLabñ
.
°rLí
 != 0 )

1721 
cmd
->
øãLabñ
.
pSå
 = 
	`oßl_mem_Æloc
–cmd->øãLabñ.
°rLí
 );

1722 i‡–
cmd
->
øãLabñ
.
pSå
 =
NULL
 )

1724  
ZMemEº‹
;

1726 
	`oßl_mem˝y
–
cmd
->
øãLabñ
.
pSå
, 
buf
, cmd->øãLabñ.
°rLí
 );

1727 
buf
 +
cmd
->
øãLabñ
.
°rLí
;

1731 
cmd
->
øãLabñ
.
pSå
 = 
NULL
;

1734 
cmd
->
issuîEvítId
 = 
	`oßl_buûd_uöt32
–
buf
, 4 );

1735 
buf
 += 4;

1737 
cmd
->
cuºítTime
 = 
	`oßl_buûd_uöt32
–
buf
, 4 );

1738 
buf
 += 4;

1740 
cmd
->
unôOfMósuª
 = *
buf
++;

1741 
cmd
->
cuºícy
 = 
	`BUILD_UINT16
–
buf
[0], buf[1] );

1742 
buf
 += 2;

1744 
cmd
->
¥i˚TølögDigô
 = *
buf
++;

1745 
cmd
->
°¨tTime
 = 
	`oßl_buûd_uöt32
–
buf
, 4 );

1746 
buf
 += 4;

1748 
cmd
->
duøti⁄InMöuãs
 = 
	`BUILD_UINT16
–
buf
[0], buf[1] );

1749 
buf
 += 2;

1751 
cmd
->
¥i˚
 = 
	`oßl_buûd_uöt32
–
buf
, 4 );

1752 
buf
 += 4;

1754 
cmd
->
¥i˚R©io
 = *
buf
++;

1755 
cmd
->
gíî©i⁄Pri˚
 = 
	`oßl_buûd_uöt32
–
buf
, 4 );

1756 
buf
 += 4;

1758 
cmd
->
gíî©i⁄Pri˚R©io
 = *
buf
++;

1759 
cmd
->
¥i˚Tõr
 = *
buf
;

1761  
ZSuc˚ss
;

1762 
	}
}

1765 #ifde‡
ZCL_MESSAGE


1777 
ZSètus_t
 
	$z˛SE_P¨£InCmd_Di•œyMesßge
–
z˛CCDi•œyMesßge_t
 *
cmd
, 
uöt8
 *
buf
, uöt8 
Àn
 )

1779 ()
Àn
;

1781 
cmd
->
mesßgeId
 = 
	`oßl_buûd_uöt32
–
buf
, 4 );

1784 
cmd
->
mesßgeCål
.
å™smissi⁄Mode
 = 
buf
[4] & 0x03;

1785 
cmd
->
mesßgeCål
.
imp‹èn˚
 = ( 
buf
[4] >> 
SE_PROFILE_MSGCTRL_IMPORTANCE
 ) & 0x03;

1786 
cmd
->
mesßgeCål
.
c⁄fúm©i⁄Requúed
 = (
buf
[4] >> 
SE_PROFILE_MSGCTRL_CONFREQUIRED
 ) & 0x01;

1788 
cmd
->
°¨tTime
 = 
	`oßl_buûd_uöt32
–&(
buf
[5]), 4 );

1789 
cmd
->
duøti⁄InMöuãs
 = 
	`BUILD_UINT16
–
buf
[9], buf[10] );

1790 
cmd
->
msgSåög
.
°rLí
 = 
buf
[11];

1793 if–
cmd
->
msgSåög
.
°rLí
 != 0 )

1795 
cmd
->
msgSåög
.
pSå
 = 
	`oßl_mem_Æloc
–cmd->msgSåög.
°rLí
 );

1796 i‡–
cmd
->
msgSåög
.
pSå
 =
NULL
 )

1797  
ZMemEº‹
;

1798 
	`oßl_mem˝y
–
cmd
->
msgSåög
.
pSå
, &(
buf
[12]), cmd->msgSåög.
°rLí
 );

1802 
cmd
->
msgSåög
.
pSå
 = 
NULL
;

1804  
ZSuc˚ss
;

1805 
	}
}

1808 #ifde‡
ZCL_LOAD_CONTROL


1819 
	$z˛SE_P¨£InCmd_LﬂdC⁄åﬁEvít
–
z˛CCLﬂdC⁄åﬁEvít_t
 *
cmd
, 
uöt8
 *
buf
, uöt8 
Àn
 )

1821 ()
Àn
;

1826 
cmd
->
issuîEvít
 = 
	`oßl_buûd_uöt32
–
buf
, 4 );

1827 
buf
 += 4;

1829 
cmd
->
devi˚GroupCœss
 = 
	`oßl_buûd_uöt32
–
buf
, 3 );

1830 
buf
 += 3;

1832 
cmd
->
°¨tTime
 = 
	`oßl_buûd_uöt32
–
buf
, 4 );

1833 
buf
 += 4;

1835 
cmd
->
duøti⁄InMöuãs
 = 
	`BUILD_UINT16
–
buf
[0], buf[1] );

1836 
buf
 += 2;

1838 
cmd
->
¸ôiˇlôyLevñ
 = *
buf
++;

1839 
cmd
->
coﬁögTem≥øtuªOff£t
 = *
buf
++;

1840 
cmd
->
hótögTem≥øtuªOff£t
 = *
buf
++;

1842 
cmd
->
coﬁögTem≥øtuªSëPoöt
 = 
	`BUILD_UINT16
–
buf
[0], buf[1] );

1843 
buf
 += 2;

1845 
cmd
->
hótögTem≥øtuªSëPoöt
 = 
	`BUILD_UINT16
–
buf
[0], buf[1] );

1846 
buf
 += 2;

1848 
cmd
->
avîageLﬂdAdju°mítPî˚¡age
 = *
buf
++;

1849 
cmd
->
dutyCy˛e
 = *
buf
++;

1850 
cmd
->
evítC⁄åﬁ
 = *
buf
++;

1854 
	}
}

1866 
	$z˛SE_P¨£InCmd_C™˚lLﬂdC⁄åﬁEvít
–
z˛CCC™˚lLﬂdC⁄åﬁEvít_t
 *
cmd
, 
uöt8
 *
buf
, uöt8 
Àn
 )

1868 ()
Àn
;

1873 
cmd
->
issuîEvítID
 = 
	`oßl_buûd_uöt32
–
buf
, 4 );

1874 
buf
 += 4;

1876 
cmd
->
devi˚GroupCœss
 = 
	`oßl_buûd_uöt32
–
buf
, 3 );

1877 
buf
 += 3;

1879 
cmd
->
ˇn˚lC⁄åﬁ
 = *
buf
++;

1880 
cmd
->
ef„˘iveTime
 = 
	`oßl_buûd_uöt32
–
buf
, 4 );

1884 
	}
}

1896 
	$z˛SE_P¨£InCmd_Rï‹tEvítSètus
–
z˛CCRï‹tEvítSètus_t
 *
cmd
, 
uöt8
 *
buf
, uöt8 
Àn
 )

1898 ()
Àn
;

1903 
cmd
->
issuîEvítID
 = 
	`oßl_buûd_uöt32
–
buf
, 4 );

1904 
buf
 += 4;

1906 
cmd
->
evítSètus
 = *
buf
++;

1908 
cmd
->
evítSèπTime
 = 
	`oßl_buûd_uöt32
–
buf
, 4 );

1909 
buf
 += 4;

1911 
cmd
->
¸ôiˇlôyLevñAµlõd
 = *
buf
++;

1912 
cmd
->
coﬁögTem≥øtuªSëPoötAµlõd
 = 
	`BUILD_UINT16
–
buf
[0], buf[1] );

1913 
buf
 += 2;

1915 
cmd
->
hótögTem≥øtuªSëPoötAµlõd
 = 
	`BUILD_UINT16
–
buf
[0], buf[1] );

1916 
buf
 += 2;

1918 
cmd
->
avîageLﬂdAdju°mít
 = *
buf
++;

1919 
cmd
->
dutyCy˛eAµlõd
 = *
buf
++;

1920 
cmd
->
evítC⁄åﬁ
 = *
buf
++;

1921 
cmd
->
sig«tuªTy≥
 = *
buf
++;

1923 
	`oßl_mem˝y
–
cmd
->
sig«tuª
, 
buf
, 
SE_PROFILE_SIGNATURE_LENGTH
 );

1927 
	}
}

	@Components/stack/zcl/zcl_se.h

40 #i‚de‡
ZCL_SE_H


41 
	#ZCL_SE_H


	)

43 #ifde‡
__˝lu•lus


51 
	~"z˛.h
"

62 
	#ATTRID_MASK_SE_READ_INFORMATION_SET
 0x0000

	)

63 
	#ATTRID_MASK_SE_TOU_INFORMATION_SET
 0x0100

	)

64 
	#ATTRID_MASK_SE_METER_STATUS
 0x0200

	)

65 
	#ATTRID_MASK_SE_FORMATTING
 0x0300

	)

66 
	#ATTRID_MASK_SE_ESP_HISTORICAL_CONSUMPTION
 0x0400

	)

67 
	#ATTRID_MASK_SE_LOAD_PROFILE_CONFIGURATION
 0x0500

	)

70 
	#ATTRID_SE_CURRENT_SUMMATION_DELIVERED
 ( 0x0000 | 
ATTRID_MASK_SE_READ_INFORMATION_SET
 )

	)

71 
	#ATTRID_SE_CURRENT_SUMMATION_RECEIVED
 ( 0x0001 | 
ATTRID_MASK_SE_READ_INFORMATION_SET
 )

	)

72 
	#ATTRID_SE_CURRENT_MAX_DEMAND_DELIVERED
 ( 0x0002 | 
ATTRID_MASK_SE_READ_INFORMATION_SET
 )

	)

73 
	#ATTRID_SE_CURRENT_MAX_DEMAND_RECEIVED
 ( 0x0003 | 
ATTRID_MASK_SE_READ_INFORMATION_SET
 )

	)

74 
	#ATTRID_SE_DFT_SUMMATION
 ( 0x0004 | 
ATTRID_MASK_SE_READ_INFORMATION_SET
 )

	)

75 
	#ATTRID_SE_DAILY_FREEZE_TIME
 ( 0x0005 | 
ATTRID_MASK_SE_READ_INFORMATION_SET
 )

	)

76 
	#ATTRID_SE_POWER_FACTOR
 ( 0x0006 | 
ATTRID_MASK_SE_READ_INFORMATION_SET
 )

	)

77 
	#ATTRID_SE_READING_SNAPSHOT_TIME
 ( 0x0007 | 
ATTRID_MASK_SE_READ_INFORMATION_SET
 )

	)

78 
	#ATTRID_SE_CURRENT_MAX_DEMAND_DELIVERD_TIME
 ( 0x0008 | 
ATTRID_MASK_SE_READ_INFORMATION_SET
 )

	)

79 
	#ATTRID_SE_CURRENT_MAX_DEMAND_RECEIVED_TIME
 ( 0x0009 | 
ATTRID_MASK_SE_READ_INFORMATION_SET
 )

	)

82 
	#ATTRID_SE_CURRENT_TIER1_SUMMATION_DELIVERED
 ( 0x0000 | 
ATTRID_MASK_SE_TOU_INFORMATION_SET
 )

	)

83 
	#ATTRID_SE_CURRENT_TIER1_SUMMATION_RECEIVED
 ( 0x0001 | 
ATTRID_MASK_SE_TOU_INFORMATION_SET
 )

	)

84 
	#ATTRID_SE_CURRENT_TIER2_SUMMATION_DELIVERED
 ( 0x0002 | 
ATTRID_MASK_SE_TOU_INFORMATION_SET
 )

	)

85 
	#ATTRID_SE_CURRENT_TIER2_SUMMATION_RECEIVED
 ( 0x0003 | 
ATTRID_MASK_SE_TOU_INFORMATION_SET
 )

	)

86 
	#ATTRID_SE_CURRENT_TIER3_SUMMATION_DELIVERED
 ( 0x0004 | 
ATTRID_MASK_SE_TOU_INFORMATION_SET
 )

	)

87 
	#ATTRID_SE_CURRENT_TIER3_SUMMATION_RECEIVED
 ( 0x0005 | 
ATTRID_MASK_SE_TOU_INFORMATION_SET
 )

	)

88 
	#ATTRID_SE_CURRENT_TIER4_SUMMATION_DELIVERED
 ( 0x0006 | 
ATTRID_MASK_SE_TOU_INFORMATION_SET
 )

	)

89 
	#ATTRID_SE_CURRENT_TIER4_SUMMATION_RECEIVED
 ( 0x0007 | 
ATTRID_MASK_SE_TOU_INFORMATION_SET
 )

	)

90 
	#ATTRID_SE_CURRENT_TIER5_SUMMATION_DELIVERED
 ( 0x0008 | 
ATTRID_MASK_SE_TOU_INFORMATION_SET
 )

	)

91 
	#ATTRID_SE_CURRENT_TIER5_SUMMATION_RECEIVED
 ( 0x0009 | 
ATTRID_MASK_SE_TOU_INFORMATION_SET
 )

	)

92 
	#ATTRID_SE_CURRENT_TIER6_SUMMATION_DELIVERED
 ( 0x000A | 
ATTRID_MASK_SE_TOU_INFORMATION_SET
 )

	)

93 
	#ATTRID_SE_CURRENT_TIER6_SUMMATION_RECEIVED
 ( 0x000B | 
ATTRID_MASK_SE_TOU_INFORMATION_SET
 )

	)

96 
	#ATTRID_SE_STATUS
 ( 0x0000 | 
ATTRID_MASK_SE_METER_STATUS
 )

	)

99 
	#ATTRID_SE_UNIT_OF_MEASURE
 ( 0x0000 | 
ATTRID_MASK_SE_FORMATTING
 )

	)

100 
	#ATTRID_SE_MULTIPLIER
 ( 0x0001 | 
ATTRID_MASK_SE_FORMATTING
 )

	)

101 
	#ATTRID_SE_DIVISOR
 ( 0x0002 | 
ATTRID_MASK_SE_FORMATTING
 )

	)

102 
	#ATTRID_SE_SUMMATION_FORMATTING
 ( 0x0003 | 
ATTRID_MASK_SE_FORMATTING
 )

	)

103 
	#ATTRID_SE_DEMAND_FORMATTING
 ( 0x0004 | 
ATTRID_MASK_SE_FORMATTING
 )

	)

104 
	#ATTRID_SE_HISTORICAL_CONSUMPTION_FORMATTING
 ( 0x0005 | 
ATTRID_MASK_SE_FORMATTING
 )

	)

105 
	#ATTRID_SE_METERING_DEVICE_TYPE
 ( 0x0006 | 
ATTRID_MASK_SE_FORMATTING
 )

	)

108 
	#ATTRID_SE_INSTANTANEOUS_DEMAND
 ( 0x0000 | 
ATTRID_MASK_SE_ESP_HISTORICAL_CONSUMPTION
 )

	)

109 
	#ATTRID_SE_CURRENTDAY_CONSUMPTION_DELIVERED
 ( 0x0001 | 
ATTRID_MASK_SE_ESP_HISTORICAL_CONSUMPTION
 )

	)

110 
	#ATTRID_SE_CURRENTDAY_CONSUMPTION_RECEIVED
 ( 0x0002 | 
ATTRID_MASK_SE_ESP_HISTORICAL_CONSUMPTION
 )

	)

111 
	#ATTRID_SE_PREVIOUSDAY_CONSUMPTION_DELIVERED
 ( 0x0003 | 
ATTRID_MASK_SE_ESP_HISTORICAL_CONSUMPTION
 )

	)

112 
	#ATTRID_SE_PREVIOUSDAY_CONSUMPTION_RECEIVED
 ( 0x0004 | 
ATTRID_MASK_SE_ESP_HISTORICAL_CONSUMPTION
 )

	)

113 
	#ATTRID_SE_CURRENT_PARTIAL_PROFILE_INTERVAL_START_TIME
 ( 0x0005 | 
ATTRID_MASK_SE_ESP_HISTORICAL_CONSUMPTION
 )

	)

114 
	#ATTRID_SE_CURRENT_PARTIAL_PROFILE_INTERVAL_VALUE
 ( 0x0006 | 
ATTRID_MASK_SE_ESP_HISTORICAL_CONSUMPTION
 )

	)

117 
	#ATTRID_SE_MAX_NUMBER_OF_PERIODS_DELIVERED
 ( 0x0000 | 
ATTRID_MASK_SE_LOAD_PROFILE_CONFIGURATION
 )

	)

120 
	#ATTRID_SE_UTILITY_DEFINED_GROUP
 0x0000

	)

121 
	#ATTRID_SE_START_RANDOMIZE_MINUTES
 0x0001

	)

122 
	#ATTRID_SE_STOP_RANDOMIZE_MINUTES
 0x0002

	)

128 
	#COMMAND_SE_GET_PROFILE_CMD
 0x0000

	)

129 
	#COMMAND_SE_GET_PROFILE_RSP
 0x0000

	)

130 
	#COMMAND_SE_REQ_MIRROR_CMD
 0x0001

	)

131 
	#COMMAND_SE_REQ_MIRROR_RSP
 0x0001

	)

132 
	#COMMAND_SE_MIRROR_REM_CMD
 0x0002

	)

133 
	#COMMAND_SE_MIRROR_REM_RSP
 0x0002

	)

136 
	#COMMAND_SE_GET_CURRENT_PRICE
 0x0000

	)

137 
	#COMMAND_SE_GET_SCHEDULED_PRICE
 0x0001

	)

138 
	#COMMAND_SE_PUBLISH_PRICE
 0x0000

	)

141 
	#COMMAND_SE_DISPLAY_MESSAGE
 0x0000

	)

142 
	#COMMAND_SE_CANCEL_MESSAGE
 0x0001

	)

143 
	#COMMAND_SE_GET_LAST_MESSAGE
 0x0000

	)

144 
	#COMMAND_SE_MESSAGE_CONFIRMATION
 0x0001

	)

147 
	#COMMAND_SE_LOAD_CONTROL_EVENT
 0x0000

	)

148 
	#COMMAND_SE_CANCEL_LOAD_CONTROL_EVENT
 0x0001

	)

149 
	#COMMAND_SE_CANCEL_ALL_LOAD_CONTROL_EVENT
 0x0002

	)

150 
	#COMMAND_SE_REPORT_EVENT_STATUS
 0x0000

	)

151 
	#COMMAND_SE_GET_SCHEDULED_EVENT
 0x0001

	)

158 
	#PROFILE_INTERVAL_PERIOD_DAILY
 0

	)

159 
	#PROFILE_INTERVAL_PERIOD_60MIN
 1

	)

160 
	#PROFILE_INTERVAL_PERIOD_30MIN
 2

	)

161 
	#PROFILE_INTERVAL_PERIOD_15MIN
 3

	)

162 
	#PROFILE_INTERVAL_PERIOD_10MIN
 4

	)

163 
	#PROFILE_INTERVAL_PERIOD_450SEC
 5

	)

164 
	#PROFILE_INTERVAL_PERIOD_300SEC
 6

	)

165 
	#PROFILE_INTERVAL_PERIOD_150SEC
 7

	)

168 
	#PROFILE_INTERVAL_STAT_SUCCESS
 0x00

	)

169 
	#PROFILE_INTERVAL_STAT_UNDEFINED_CHANNEL
 0x01

	)

170 
	#PROFILE_INTERVAL_STAT_CHANNEL_NOT_SUPPORT
 0x02

	)

171 
	#PROFILE_INTERVAL_STAT_INVALID_END_TIME
 0x03

	)

172 
	#PROFILE_INTERVAL_STAT_TOO_MANY_PERIOD
 0x04

	)

173 
	#PROFILE_INTERVAL_STAT_NO_INTERVALS
 0x05

	)

175 
	#PACKET_LEN_SE_PUBLISH_PRICE
 34

	)

176 
	#PACKET_LEN_SE_LOAD_CONTROL_EVENT
 23

	)

177 
	#PACKET_LEN_SE_GET_SCHEDULED_EVENT
 5

	)

178 
	#PACKET_LEN_SE_CANCEL_LOAD_CONTROL_EVENT
 12

	)

179 
	#PACKET_LEN_SE_REPORT_EVENT_STATUS_ONLY
 18

	)

180 
	#PACKET_LEN_SE_REPORT_EVENT_STATUS
 (
PACKET_LEN_SE_REPORT_EVENT_STATUS_ONLY
 + 
SE_PROFILE_SIGNATURE_LENGTH
)

	)

183 
	#MAX_DURATION_IN_MINUTES_SE_LOAD_CONTROL
 1440

184 
	#MAX_CRITICAL_LEVEL_SE_LOAD_CONTROL
 0x0F

	)

185 
	#MAX_TEMPERATURE_SETPOINT_SE_LOAD_CONTROL
 0x7FFF

	)

186 
	#MIN_AVERAGE_LOAD_ADJUSTMENT_PERCENTAGE_SE
 -100

	)

187 
	#MAX_AVERAGE_LOAD_ADJUSTMENT_PERCENTAGE_SE
 100

	)

188 
	#MAX_DUTY_CYCLE_SE_LOAD_CONTROL
 100

	)

189 
	#MAX_INTERVAL_CHANNEL_SE_SIMPLE_METERING
 1

	)

190 
	#MAX_PROFILE_INTERVAL_PERIOD_SE_SIMPLE_METERING
 7

	)

191 
	#MAX_UNIT_OF_MEASURE_SE
 7

	)

194 
	#SE_DEVICE_CLASS_HVAC_COMPRESSOR_FURNACE
 0x0001

	)

195 
	#SE_DEVICE_CLASS_STRIP_HEATER
 0x0002

	)

196 
	#SE_DEVICE_CLASS_WATER_HEATER
 0x0004

	)

197 
	#SE_DEVICE_CLASS_POOL_PUMP
 0x0008

	)

198 
	#SE_DEVICE_CLASS_SMART_APPLIANCES
 0x0010

	)

199 
	#SE_DEVICE_CLASS_IRRIGATION_PUMP
 0x0020

	)

200 
	#SE_DEVICE_CLASS_MANAGED_CI_LOADS
 0x0040

	)

201 
	#SE_DEVICE_CLASS_SIMPLE_MISC_LOADS
 0x0080

	)

202 
	#SE_DEVICE_CLASS_EXTERIOR_LIGHTING
 0x0100

	)

203 
	#SE_DEVICE_CLASS_INTERIOR_LIGHTING
 0x0200

	)

204 
	#SE_DEVICE_CLASS_ELECTRIC_VEHICLE
 0x0400

	)

205 
	#SE_DEVICE_CLASS_GENERATION_SYSTEMS
 0x0800

	)

208 
	#SE_CRITICALITY_LEVELS_GREEN
 0x01

	)

209 
	#SE_CRITICALITY_LEVELS_1
 0x02

	)

210 
	#SE_CRITICALITY_LEVELS_2
 0x03

	)

211 
	#SE_CRITICALITY_LEVELS_3
 0x04

	)

212 
	#SE_CRITICALITY_LEVELS_4
 0x05

	)

213 
	#SE_CRITICALITY_LEVELS_5
 0x06

	)

214 
	#SE_CRITICALITY_LEVELS_EMERGENCY
 0x07

	)

215 
	#SE_CRITICALITY_LEVELS_PLANNED_OUTAGE
 0x08

	)

216 
	#SE_CRITICALITY_LEVELS_SERVICE_DISCONNECT
 0x09

	)

219 
	#SE_EVENT_CONTROL_FIELD_START_TIME
 0x01

	)

220 
	#SE_EVENT_CONTROL_FIELD_END_TIME
 0x02

	)

223 
	#SE_OPTIONAL_FIELD_UINT8
 0xFF

	)

224 
	#SE_OPTIONAL_FIELD_UINT16
 0xFFFF

	)

225 
	#SE_OPTIONAL_FIELD_UINT32
 0xFFFFFFFF

	)

226 
	#SE_OPTIONAL_FIELD_TEMPERATURE_SET_POINT
 0x8000

	)

227 
	#SE_OPTIONAL_FIELD_INT8
 -128

	)

230 
	#EVENT_STATUS_LOAD_CONTROL_EVENT_RECEIVED
 0x01

	)

231 
	#EVENT_STATUS_LOAD_CONTROL_EVENT_STARTED
 0x02

	)

232 
	#EVENT_STATUS_LOAD_CONTROL_EVENT_COMPLETED
 0x03

	)

233 
	#EVENT_STATUS_LOAD_CONTROL_USER_OPT_OUT
 0x04

	)

234 
	#EVENT_STATUS_LOAD_CONTROL_USER_OPT_IN
 0x05

	)

235 
	#EVENT_STATUS_LOAD_CONTROL_EVENT_CANCELLED
 0x06

	)

236 
	#EVENT_STATUS_LOAD_CONTROL_EVENT_SUPERSEDED
 0x07

	)

237 
	#EVENT_STATUS_LOAD_CONTROL_REJECTED_DUPLICATEID
 0xFA

	)

238 
	#EVENT_STATUS_LOAD_CONTROL_REJECTED_EVT_EXPIRED
 0xFB

	)

239 
	#EVENT_STATUS_LOAD_CONTROL_REJECTED_EVT_COMPLETED
 0xFC

	)

240 
	#EVENT_STATUS_LOAD_CONTROL_REJECTED_UNDEFINED_EVT
 0xFD

	)

241 
	#EVENT_STATUS_LOAD_CONTROL_EVENT_REJECTED
 0xFE

	)

244 
	#SE_PROFILE_SIGNATURE_TYPE_ECDSA
 0x01

	)

246 
	#SE_PROFILE_SIGNATURE_LENGTH
 42

	)

247 
	#SE_PROFILE_MSGCTRL_IMPORTANCE
 2

	)

248 
	#SE_PROFILE_MSGCTRL_CONFREQUIRED
 7

	)

262 
uöt8
 
ch™√l
;

263 
uöt32
 
ídTime
;

264 
uöt8
 
numOfPîiods
;

265 } 
	tz˛CCGëProfûeCmd_t
;

269 
uöt32
 
ídTime
;

270 
uöt8
 
°©us
;

271 
uöt8
 
¥ofûeI¡îvÆPîiod
;

272 
uöt8
 
numOfPîiodDñivîed
;

273 
uöt24
 *
öãrvÆs
;

274 } 
	tz˛CCGëProfûeR•_t
;

277 
uöt16
 
ídpoötId
 ;

278 } 
	tz˛CCReqMúr‹R•_t
 ;

282 
uöt16
 
ídpoötId
 ;

283 } 
	tz˛CCMúr‹RemR•_t
 ;

287 
uöt8
 
›ti⁄
;

288 } 
	tz˛CCGëCuºítPri˚_t
;

292 
uöt32
 
°¨tTime
;

293 
uöt8
 
numEvíts
;

294 } 
	tz˛CCGëScheduÀdPri˚_t
;

298 
uöt32
 
¥ovidîId
;

299 
UTF8Såög_t
 
øãLabñ
;

300 
uöt32
 
issuîEvítId
;

301 
uöt32
 
cuºítTime
;

302 
uöt8
 
unôOfMósuª
;

303 
uöt16
 
cuºícy
;

304 
uöt8
 
¥i˚TølögDigô
;

305 
uöt32
 
°¨tTime
;

306 
uöt16
 
duøti⁄InMöuãs
;

307 
uöt32
 
¥i˚
;

308 
uöt8
 
¥i˚R©io
;

309 
uöt32
 
gíî©i⁄Pri˚
;

310 
uöt8
 
gíî©i⁄Pri˚R©io
;

311 
uöt8
 
¥i˚Tõr
;

312 } 
	tz˛CCPublishPri˚_t
;

316 
uöt8
 
å™smissi⁄Mode
;

317 
uöt8
 
imp‹èn˚
;

318 
uöt8
 
c⁄fúm©i⁄Requúed
;

319 } 
	tz˛MesßgeCål_t
;

323 
uöt32
 
mesßgeId
;

324 
z˛MesßgeCål_t
 
mesßgeCål
;

325 
uöt32
 
°¨tTime
;

326 
uöt16
 
duøti⁄InMöuãs
;

327 
UTF8Såög_t
 
msgSåög
;

328 } 
	tz˛CCDi•œyMesßge_t
;

332 
uöt32
 
mesßgeId
;

333 
z˛MesßgeCål_t
 
mesßgeCål
;

334 } 
	tz˛CCC™˚lMesßge_t
;

338 
uöt32
 
mesßgeId
;

339 
uöt32
 
c⁄fúmTime
;

340 } 
	tz˛CCMesßgeC⁄fúm©i⁄_t
;

344 
uöt32
 
issuîEvít
;

345 
uöt24
 
devi˚GroupCœss
;

346 
uöt32
 
°¨tTime
;

347 
uöt16
 
duøti⁄InMöuãs
;

348 
uöt8
 
¸ôiˇlôyLevñ
;

349 
uöt8
 
coﬁögTem≥øtuªOff£t
;

350 
uöt8
 
hótögTem≥øtuªOff£t
;

351 
uöt16
 
coﬁögTem≥øtuªSëPoöt
;

352 
uöt16
 
hótögTem≥øtuªSëPoöt
;

353 
öt8
 
avîageLﬂdAdju°mítPî˚¡age
;

354 
uöt8
 
dutyCy˛e
;

355 
uöt8
 
evítC⁄åﬁ
;

356 } 
	tz˛CCLﬂdC⁄åﬁEvít_t
;

360 
uöt32
 
issuîEvítID
;

361 
uöt24
 
devi˚GroupCœss
;

362 
uöt8
 
ˇn˚lC⁄åﬁ
;

363 
uöt32
 
ef„˘iveTime
;

364 } 
	tz˛CCC™˚lLﬂdC⁄åﬁEvít_t
;

368 
uöt8
 
ˇn˚lC⁄åﬁ
;

369 } 
	tz˛CCC™˚lAŒLﬂdC⁄åﬁEvíts_t
;

373 
uöt32
 
issuîEvítID
;

374 
uöt32
 
evítSèπTime
;

375 
uöt8
 
evítSètus
;

376 
uöt8
 
¸ôiˇlôyLevñAµlõd
;

377 
uöt16
 
coﬁögTem≥øtuªSëPoötAµlõd
;

378 
uöt16
 
hótögTem≥øtuªSëPoötAµlõd
;

379 
öt8
 
avîageLﬂdAdju°mít
;

380 
uöt8
 
dutyCy˛eAµlõd
;

381 
uöt8
 
evítC⁄åﬁ
;

382 
uöt8
 
sig«tuªTy≥
;

383 
uöt8
 
sig«tuª
[
SE_PROFILE_SIGNATURE_LENGTH
];

384 } 
	tz˛CCRï‹tEvítSètus_t
;

388 
uöt32
 
°¨tTime
;

389 
uöt8
 
numEvíts
;

390 } 
	tz˛CCGëScheduÀdEvít_t
;

394 
z˛SE_Sim∂eMëî_GëProfûeR•_Sètus_Suc˚ss
 = 0,

395 
z˛SE_Sim∂eMëî_GëProfûeR•_Sètus_UndeföedI¡îvÆ
,

396 
z˛SE_Sim∂eMëî_GëProfûeR•_Sètus_I¡îvÆNŸSuµ‹t
,

397 
z˛SE_Sim∂eMëî_GëProfûeR•_Sètus_InvÆidEndTime
,

398 
z˛SE_Sim∂eMëî_GëProfûeR•_Sètus_M‹ePîiodReque°ed
,

399 
z˛SE_Sim∂eMëî_GëProfûeR•_Sètus_NŸAvaûabÀ


400 }
	tz˛SE_Sim∂eMëî_GëProfûeR•_Sètus
;

405 (*
z˛SE_Sim∂eMëî_GëProfûeCmd_t
)–
	tz˛CCGëProfûeCmd_t
 *
	tpCmd
, 
	tafAddrTy≥_t
 *
	t§cAddr
, 
	tuöt8
 
	t£qNum
 );

409 (*
z˛SE_Sim∂eMëî_GëProfûeR•_t
)–
	tz˛CCGëProfûeR•_t
 *
	tpR•
, 
	tafAddrTy≥_t
 *
	t§cAddr
, 
	tuöt8
 
	t£qNum
 );

414 (*
z˛SE_Sim∂eMëî_ReqMúr‹Cmd_t
)–
	tafAddrTy≥_t
 *
	t§cAddr
, 
	tuöt8
 
	t£qNum
 ) ;

417 (*
z˛SE_Sim∂eMëî_ReqMúr‹R•_t
)–
	tz˛CCReqMúr‹R•_t
 *
	tpR•
, 
	tafAddrTy≥_t
 *
	t§cAddr
, 
	tuöt8
 
	t£qNum
 ) ;

423 (*
z˛SE_Sim∂eMëî_Múr‹RemCmd_t
)–
	tafAddrTy≥_t
 *
	t§cAddr
, 
	tuöt8
 
	t£qNum
 ) ;

426 (*
z˛SE_Sim∂eMëî_Múr‹RemR•_t
)–
	tz˛CCMúr‹RemR•_t
 *
	tpR•
, 
	tafAddrTy≥_t
 *
	t§cAddr
, 
	tuöt8
 
	t£qNum
 ) ;

431 (*
z˛SE_Pricög_GëCuª¡Pri˚_t
)–
	tz˛CCGëCuºítPri˚_t
 *
	tpCmd
, 
	tafAddrTy≥_t
 *
	t§cAddr
, 
	tuöt8
 
	t£qNum
 );

436 (*
z˛SE_Pricög_GëScheduÀdPri˚_t
)–
	tz˛CCGëScheduÀdPri˚_t
 *
	tpCmd
, 
	tafAddrTy≥_t
 *
	t§cAddr
, 
	tuöt8
 
	t£qNum
 );

441 (*
z˛SE_Pricög_PublishPri˚_t
)–
	tz˛CCPublishPri˚_t
 *
	tpCmd
, 
	tafAddrTy≥_t
 *
	t§cAddr
, 
	tuöt8
 
	t£qNum
 );

445 (*
z˛SE_Mesßge_Di•œyMesßge_t
)–
	tz˛CCDi•œyMesßge_t
 *
	tpCmd
, 
	tafAddrTy≥_t
 *
	t§cAddr
, 
	tuöt8
 
	t£qNum
 );

449 (*
z˛SE_Mesßge_C™˚lMesßge_t
)–
	tz˛CCC™˚lMesßge_t
 *
	tpCmd
, 
	tafAddrTy≥_t
 *
	t§cAddr
, 
	tuöt8
 
	t£qNum
 );

454 (*
z˛SE_Mesßge_GëLa°Mesßge_t
)–
	tafAddrTy≥_t
 *
	t§cAddr
, 
	tuöt8
 
	t£qNum
 );

458 (*
z˛SE_Mesßge_MesßgeC⁄fúm©i⁄_t
)–
	tz˛CCMesßgeC⁄fúm©i⁄_t
 *
	tpCmd
, 
	tafAddrTy≥_t
 *
	t§cAddr
, 
	tuöt8
 
	t£qNum
 );

462 (*
z˛SE_LﬂdC⁄åﬁ_LﬂdC⁄åﬁEvít_t
)–
	tz˛CCLﬂdC⁄åﬁEvít_t
 *
	tpCmd
, 
	tafAddrTy≥_t
 *
	t§cAddr
, 
	tuöt8
 
	t°©us
, uöt8 
	t£qNum
 );

466 (*
z˛SE_LﬂdC⁄åﬁ_C™˚lLﬂdC⁄åﬁEvít_t
)–
	tz˛CCC™˚lLﬂdC⁄åﬁEvít_t
 *
	tpCmd
, 
	tafAddrTy≥_t
 *
	t§cAddr
, 
	tuöt8
 
	t£qNum
);

470 (*
z˛SE_LﬂdC⁄åﬁ_C™˚lAŒLﬂdC⁄åﬁEvíts_t
)–
	tz˛CCC™˚lAŒLﬂdC⁄åﬁEvíts_t
 *
	tpCmd
, 
	tafAddrTy≥_t
 *
	t§cAddr
, 
	tuöt8
 
	t£qNum
 );

474 (*
z˛SE_LﬂdC⁄åﬁ_Rï‹tEvítSètus_t
)–
	tz˛CCRï‹tEvítSètus_t
 *
	tpCmd
, 
	tafAddrTy≥_t
 *
	t§cAddr
, 
	tuöt8
 
	t£qNum
);

478 (*
z˛SE_LﬂdC⁄åﬁ_GëScheduÀdEvít_t
)–
	tz˛CCGëScheduÀdEvít_t
 *
	tpCmd
, 
	tafAddrTy≥_t
 *
	t§cAddr
, 
	tuöt8
 
	t£qNum
);

484 
z˛SE_Sim∂eMëî_GëProfûeCmd_t
 
p‚Sim∂eMëî_GëProfûeCmd
;

485 
z˛SE_Sim∂eMëî_GëProfûeR•_t
 
p‚Sim∂eMëî_GëProfûeR•
;

486 
z˛SE_Sim∂eMëî_ReqMúr‹Cmd_t
 
p‚Sim∂eMëî_ReqMúr‹Cmd
;

487 
z˛SE_Sim∂eMëî_ReqMúr‹R•_t
 
p‚Sim∂eMëî_ReqMúr‹R•
;

488 
z˛SE_Sim∂eMëî_Múr‹RemCmd_t
 
p‚Sim∂eMëî_Múr‹RemCmd
;

489 
z˛SE_Sim∂eMëî_Múr‹RemR•_t
 
p‚Sim∂eMëî_Múr‹RemR•
;

490 
z˛SE_Pricög_GëCuª¡Pri˚_t
 
p‚Pricög_GëCuºítPri˚
;

491 
z˛SE_Pricög_GëScheduÀdPri˚_t
 
p‚Pricög_GëScheduÀdPri˚
;

492 
z˛SE_Pricög_PublishPri˚_t
 
p‚Pricög_PublishPri˚
;

493 
z˛SE_Mesßge_Di•œyMesßge_t
 
p‚Mesßge_Di•œyMesßge
;

494 
z˛SE_Mesßge_C™˚lMesßge_t
 
p‚Mesßge_C™˚lMesßge
;

495 
z˛SE_Mesßge_GëLa°Mesßge_t
 
p‚Mesßge_GëLa°Mesßge
;

496 
z˛SE_Mesßge_MesßgeC⁄fúm©i⁄_t
 
p‚Mesßge_MesßgeC⁄fúm©i⁄
;

497 
z˛SE_LﬂdC⁄åﬁ_LﬂdC⁄åﬁEvít_t
 
p‚LﬂdC⁄åﬁ_LﬂdC⁄åﬁEvít
;

498 
z˛SE_LﬂdC⁄åﬁ_C™˚lLﬂdC⁄åﬁEvít_t
 
p‚LﬂdC⁄åﬁ_C™˚lLﬂdC⁄åﬁEvít
;

499 
z˛SE_LﬂdC⁄åﬁ_C™˚lAŒLﬂdC⁄åﬁEvíts_t
 
p‚LﬂdC⁄åﬁ_C™˚lAŒLﬂdC⁄åﬁEvíts
;

500 
z˛SE_LﬂdC⁄åﬁ_Rï‹tEvítSètus_t
 
p‚LﬂdC⁄åﬁ_Rï‹tEvítSètus
;

501 
z˛SE_LﬂdC⁄åﬁ_GëScheduÀdEvít_t
 
p‚LﬂdC⁄åﬁ_GëScheduÀdEvíts
;

502 } 
	tz˛SE_AµCÆlbacks_t
;

518 
ZSètus_t
 
z˛SE_Regi°îCmdCÆlbacks
–
uöt8
 
ídpoöt
, 
z˛SE_AµCÆlbacks_t
 *
ˇŒbacks
 );

520 #ifde‡
ZCL_SIMPLE_METERING


524 
ZSètus_t
 
z˛SE_Sim∂eMëîög_Síd_GëProfûeCmd
–
uöt8
 
§cEP
, 
afAddrTy≥_t
 *
d°Addr
,

525 
uöt8
 
ch™√l
, 
uöt32
 
ídTime
, uöt8 
numOfPîiods
,

526 
uöt8
 
dißbÀDeÁu…R•
, uöt8 
£qNum
 );

530 
ZSètus_t
 
z˛SE_Sim∂eMëîög_Síd_GëProfûeR•
–
uöt8
 
§cEP
, 
afAddrTy≥_t
 *
d°Addr
,

531 
uöt32
 
ídTime
, 
uöt8
 
r•Sètus
, uöt8 
¥ofûeI¡îvÆPîiod
,

532 
uöt8
 
numOfPîiodDñivîed
, 
uöt24
 *
öãrvÆs
,

533 
uöt8
 
dißbÀDeÁu…R•
, uöt8 
£qNum
 );

538 
ZSètus_t
 
z˛SE_Sim∂eMëîög_Síd_ReqMúr‹R•
–
uöt8
 
§cEP
, 
afAddrTy≥_t
 *
d°Addr
,

539 
uöt16
 
ídpoötId
,

540 
uöt8
 
dißbÀDeÁu…R•
, uöt8 
£qNum
 ) ;

545 
ZSètus_t
 
z˛SE_Sim∂eMëîög_Síd_RemMúr‹R•
–
uöt8
 
§cEP
, 
afAddrTy≥_t
 *
d°Addr
,

546 
uöt16
 
ídpoötId
,

547 
uöt8
 
dißbÀDeÁu…R•
, uöt8 
£qNum
 ) ;

550 #ifde‡
ZCL_PRICING


555 
ZSètus_t
 
z˛SE_Pricög_Síd_PublishPri˚
–
uöt8
 
§cEP
, 
afAddrTy≥_t
 *
d°Addr
,

556 
z˛CCPublishPri˚_t
 *
cmd
,

557 
uöt8
 
dißbÀDeÁu…R•
, uöt8 
£qNum
 );

559 
ZSètus_t
 
z˛SE_Pricög_Síd_GëScheduÀdPri˚
–
uöt8
 
§cEP
, 
afAddrTy≥_t
 *
d°Addr
,

560 
z˛CCGëScheduÀdPri˚_t
 *
cmd
,

561 
uöt8
 
dißbÀDeÁu…R•
, uöt8 
£qNum
 );

564 #ifde‡
ZCL_MESSAGE


568 
ZSètus_t
 
z˛SE_Mesßge_Síd_Di•œyMesßge
–
uöt8
 
§cEP
, 
afAddrTy≥_t
 *
d°Addr
,

569 
z˛CCDi•œyMesßge_t
 *
cmd
,

570 
uöt8
 
dißbÀDeÁu…R•
, uöt8 
£qNum
 );

574 
ZSètus_t
 
z˛SE_Mesßge_Síd_C™˚lMesßge
–
uöt8
 
§cEP
, 
afAddrTy≥_t
 *
d°Addr
,

575 
uöt32
 
msgId
, 
uöt8
 
msgCål
,

576 
uöt8
 
dißbÀDeÁu…R•
, uöt8 
£qNum
 );

581 
ZSètus_t
 
z˛SE_Mesßge_Síd_MesßgeC⁄fúm©i⁄
–
uöt8
 
§cEP
, 
afAddrTy≥_t
 *
d°Addr
,

582 
uöt32
 
msgId
, uöt32 
c⁄fúmTime
,

583 
uöt8
 
dißbÀDeÁu…R•
, uöt8 
£qNum
 );

587 #ifde‡
ZCL_LOAD_CONTROL


591 
ZSètus_t
 
z˛SE_LﬂdC⁄åﬁ_Síd_LﬂdC⁄åﬁEvít
–
uöt8
 
§cEP
, 
afAddrTy≥_t
 *
d°Addr
,

592 
z˛CCLﬂdC⁄åﬁEvít_t
* 
cmd
,

593 
uöt8
 
dißbÀDeÁu…R•
, uöt8 
£qNum
 );

598 
ZSètus_t
 
z˛SE_LﬂdC⁄åﬁ_Síd_C™˚lLﬂdC⁄åﬁEvít
–
uöt8
 
§cEP
, 
afAddrTy≥_t
 *
d°Addr
,

599 
z˛CCC™˚lLﬂdC⁄åﬁEvít_t
 *
cmd
,

600 
uöt8
 
dißbÀDeÁu…R•
, uöt8 
£qNum
 );

605 
ZSètus_t
 
z˛SE_LﬂdC⁄åﬁ_Síd_Rï‹tEvítSètus
–
uöt8
 
§cEP
, 
afAddrTy≥_t
 *
d°Addr
,

606 
z˛CCRï‹tEvítSètus_t
* 
cmd
,

607 
uöt8
 
dißbÀDeÁu…R•
, uöt8 
£qNum
 );

613 
ZSètus_t
 
z˛SE_LﬂdC⁄åﬁ_Síd_GëScheduÀdEvít
–
uöt8
 
§cEP
, 
afAddrTy≥_t
 *
d°Addr
,

614 
z˛CCGëScheduÀdEvít_t
 *
cmd
,

615 
uöt8
 
dißbÀDeÁu…R•
, uöt8 
£qNum
 );

618 #ifde‡
ZCL_PRICING


622 
ZSètus_t
 
z˛SE_P¨£InCmd_PublishPri˚
–
z˛CCPublishPri˚_t
 *
cmd
, 
uöt8
 *
buf
, uöt8 
Àn
 );

626 #ifde‡
ZCL_MESSAGE


630 
ZSètus_t
 
z˛SE_P¨£InCmd_Di•œyMesßge
–
z˛CCDi•œyMesßge_t
 *
cmd
, 
uöt8
 *
buf
, uöt8 
Àn
 );

634 #ifde‡
ZCL_LOAD_CONTROL


638 
z˛SE_P¨£InCmd_LﬂdC⁄åﬁEvít
–
z˛CCLﬂdC⁄åﬁEvít_t
 *
cmd
, 
uöt8
 *
buf
, uöt8 
Àn
 );

643 
z˛SE_P¨£InCmd_C™˚lLﬂdC⁄åﬁEvít
–
z˛CCC™˚lLﬂdC⁄åﬁEvít_t
 *
cmd
, 
uöt8
 *
buf
, uöt8 
Àn
 );

648 
z˛SE_P¨£InCmd_Rï‹tEvítSètus
–
z˛CCRï‹tEvítSètus_t
 *
cmd
, 
uöt8
 *
buf
, uöt8 
Àn
 );

656 #ifde‡
ZCL_PRICING


674 
	#z˛SE_Pricög_Síd_GëCuºítPri˚
(
a
, 
b
, 
c
, 
d
, 
e
Ë\

	)

675 
z˛_SídComm™d
–(
a
), (
b
), 
ZCL_CLUSTER_ID_SE_PRICING
, \

676 
COMMAND_SE_GET_CURRENT_PRICE
, 
TRUE
, \

677 
ZCL_FRAME_CLIENT_SERVER_DIR
, (
d
), 0, (
e
), 1, &(
c
) );

682 #ifde‡
ZCL_SIMPLE_METERING


696 
	#z˛SE_Sim∂eMëîög_Síd_ReqMúr‹Cmd
(
a
, 
b
, 
c
, 
d
Ë\

	)

697 
z˛_SídComm™d
–(
a
), (
b
), 
ZCL_CLUSTER_ID_SE_SIMPLE_METERING
, \

698 
COMMAND_SE_REQ_MIRROR_CMD
, 
TRUE
, \

699 
ZCL_FRAME_SERVER_CLIENT_DIR
, (
c
), 0, (
d
), 0, 
NULL
 );

714 
	#z˛SE_Sim∂eMëîög_Síd_RemMúr‹Cmd
(
a
, 
b
, 
c
, 
d
Ë\

	)

715 
z˛_SídComm™d
–(
a
), (
b
), 
ZCL_CLUSTER_ID_SE_SIMPLE_METERING
, \

716 
COMMAND_SE_MIRROR_REM_CMD
, 
TRUE
, \

717 
ZCL_FRAME_SERVER_CLIENT_DIR
, (
c
), 0, (
d
), 0, 
NULL
 );

722 #ifde‡
ZCL_MESSAGE


737 
	#z˛SE_Mesßge_Síd_GëLa°Mesßge
(
a
, 
b
, 
c
, 
d
Ë\

	)

738 
z˛_SídComm™d
–(
a
), (
b
), 
ZCL_CLUSTER_ID_SE_MESSAGE
, \

739 
COMMAND_SE_GET_LAST_MESSAGE
, 
TRUE
, \

740 
ZCL_FRAME_CLIENT_SERVER_DIR
, (
c
), 0, (
d
), 0, 
NULL
 );

744 #ifde‡
ZCL_LOAD_CONTROL


762 
	#z˛SE_LﬂdC⁄åﬁ_Síd_C™˚lAŒLﬂdC⁄åﬁEvít
(
a
, 
b
, 
c
, 
d
, 
e
Ë\

	)

763 
z˛_SídComm™d
–(
a
), (
b
), 
ZCL_CLUSTER_ID_SE_LOAD_CONTROL
, \

764 
COMMAND_SE_CANCEL_ALL_LOAD_CONTROL_EVENT
, 
TRUE
, \

765 
ZCL_FRAME_SERVER_CLIENT_DIR
, (
d
), 0, (
e
), 1, &(
c
) );

771 #ifde‡
__˝lu•lus


	@Components/stack/zcl/zcl_ss.c

43 
	~"ZComDef.h
"

44 
	~"OSAL.h
"

45 
	~"z˛.h
"

46 
	~"z˛_gíîÆ.h
"

47 
	~"z˛_ss.h
"

49 #i‡
deföed
 ( 
INTER_PAN
 )

50 
	~"°ub_≠s.h
"

56 
	#z˛SS_Z⁄eTy≥Suµ‹ãd
–
a
 ) ( (aË=
SS_IAS_ZONE_TYPE_STANDARD_CIE
 || \

	)

57 (
	ga
Ë=
SS_IAS_ZONE_TYPE_MOTION_SENSOR
 || \

58 (
a
Ë=
SS_IAS_ZONE_TYPE_CONTACT_SWITCH
 || \

59 (
a
Ë=
SS_IAS_ZONE_TYPE_FIRE_SENSOR
 || \

60 (
a
Ë=
SS_IAS_ZONE_TYPE_WATER_SENSOR
 || \

61 (
a
Ë=
SS_IAS_ZONE_TYPE_GAS_SENSOR
 || \

62 (
a
Ë=
SS_IAS_ZONE_TYPE_PERSONAL_EMERGENCY_DEVICE
 || \

63 (
a
Ë=
SS_IAS_ZONE_TYPE_VIBRATION_MOVEMENT_SENSOR
 || \

64 (
a
Ë=
SS_IAS_ZONE_TYPE_REMOTE_CONTROL
 || \

65 (
a
Ë=
SS_IAS_ZONE_TYPE_KEY_FOB
 || \

66 (
a
Ë=
SS_IAS_ZONE_TYPE_KEYPAD
 || \

67 (
a
Ë=
SS_IAS_ZONE_TYPE_STANDARD_WARNING_DEVICE
 )

76 
	sz˛SSCBRec


78 
z˛SSCBRec
 *
√xt
;

79 
uöt8
 
	mídpoöt
;

80 
z˛SS_AµCÆlbacks_t
 *
	mCBs
;

81 } 
	tz˛SSCBRec_t
;

83 
	sz˛SS_Z⁄eIãm


85 
z˛SS_Z⁄eIãm
 *
	m√xt
;

86 
uöt8
 
	mídpoöt
;

87 
IAS_ACE_Z⁄eTabÀ_t
 
	mz⁄e
;

88 } 
	tz˛SS_Z⁄eIãm_t
;

93 c⁄° 
uöt8
 
	gz˛SS_UknownIìeAddªss
[8] = { 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF };

102 
z˛SSCBRec_t
 *
	gz˛SSCBs
 = (z˛SSCBRec_à*)
NULL
;

103 
uöt8
 
	gz˛SSPlugöRegi°ed
 = 
FALSE
;

105 #i‡
deföed
(
ZCL_ZONE
Ë|| deföed(
ZCL_ACE
)

106 
z˛SS_Z⁄eIãm_t
 *
	gz˛SS_Z⁄eTabÀ
 = (z˛SS_Z⁄eIãm_à*)
NULL
;

112 
ZSètus_t
 
z˛SS_HdlIncomög
–
z˛Incomög_t
 *
pInHdÃMsg
 );

113 
ZSètus_t
 
z˛SS_HdlInS≥cificComm™ds
–
z˛Incomög_t
 *
pInMsg
 );

114 
z˛SS_AµCÆlbacks_t
 *
z˛SS_FödCÆlbacks
–
uöt8
 
ídpoöt
 );

116 #ifde‡
ZCL_ZONE


117 
ZSètus_t
 
z˛SS_Pro˚ssInZ⁄eSètusCmdsSîvî
–
z˛Incomög_t
 *
pInMsg
, 
z˛SS_AµCÆlbacks_t
 *
pCBs
 );

118 
ZSètus_t
 
z˛SS_Pro˚ssInZ⁄eSètusCmdsClõ¡
–
z˛Incomög_t
 *
pInMsg
, 
z˛SS_AµCÆlbacks_t
 *
pCBs
 );

120 
z˛SS_Pro˚ssInCmd_Z⁄eSètus_Ch™geNŸifiˇti⁄
–
z˛Incomög_t
 *
pInMsg
, 
z˛SS_AµCÆlbacks_t
 *
pCBs
 );

121 
ZSètus_t
 
z˛SS_Pro˚ssInCmd_Z⁄eSètus_EƒﬁlReque°
–
z˛Incomög_t
 *
pInMsg
, 
z˛SS_AµCÆlbacks_t
 *
pCBs
 );

122 
z˛SS_Pro˚ssInCmd_Z⁄eSètus_EƒﬁlRe•⁄£
–
z˛Incomög_t
 *
pInMsg
, 
z˛SS_AµCÆlbacks_t
 *
pCBs
 );

125 #ifde‡
ZCL_ACE


126 
ZSètus_t
 
z˛SS_Pro˚ssInACECmdsSîvî
–
z˛Incomög_t
 *
pInMsg
, 
z˛SS_AµCÆlbacks_t
 *
pCBs
 );

127 
ZSètus_t
 
z˛SS_Pro˚ssInACECmdsClõ¡
–
z˛Incomög_t
 *
pInMsg
, 
z˛SS_AµCÆlbacks_t
 *
pCBs
 );

129 
ZSètus_t
 
z˛SS_Pro˚ssInCmd_ACE_Arm
–
z˛Incomög_t
 *
pInMsg
, 
z˛SS_AµCÆlbacks_t
 *
pCBs
 );

130 
z˛SS_Pro˚ssInCmd_ACE_By∑ss
–
z˛Incomög_t
 *
pInMsg
, 
z˛SS_AµCÆlbacks_t
 *
pCBs
 );

131 
z˛SS_Pro˚ssInCmd_ACE_Emîgícy
–
z˛Incomög_t
 *
pInMsg
, 
z˛SS_AµCÆlbacks_t
 *
pCBs
 );

132 
z˛SS_Pro˚ssInCmd_ACE_Fúe
–
z˛Incomög_t
 *
pInMsg
, 
z˛SS_AµCÆlbacks_t
 *
pCBs
 );

133 
z˛SS_Pro˚ssInCmd_ACE_P™ic
–
z˛Incomög_t
 *
pInMsg
, 
z˛SS_AµCÆlbacks_t
 *
pCBs
 );

134 
ZSètus_t
 
z˛SS_Pro˚ssInCmd_ACE_GëZ⁄eIDM≠
–
z˛Incomög_t
 *
pInMsg
 );

135 
ZSètus_t
 
z˛SS_Pro˚ssInCmd_ACE_GëZ⁄eInf‹m©i⁄
–
z˛Incomög_t
 *
pInMsg
 );

136 
z˛SS_Pro˚ssInCmd_ACE_ArmRe•⁄£
–
z˛Incomög_t
 *
pInMsg
, 
z˛SS_AµCÆlbacks_t
 *
pCBs
 );

137 
z˛SS_Pro˚ssInCmd_ACE_GëZ⁄eIDM≠Re•⁄£
–
z˛Incomög_t
 *
pInMsg
, 
z˛SS_AµCÆlbacks_t
 *
pCBs
 );

138 
z˛SS_Pro˚ssInCmd_ACE_GëZ⁄eInf‹m©i⁄Re•⁄£
–
z˛Incomög_t
 *
pInMsg
, 
z˛SS_AµCÆlbacks_t
 *
pCBs
 );

141 #ifde‡
ZCL_WD


142 
ZSètus_t
 
z˛SS_Pro˚ssInWDCmds
–
z˛Incomög_t
 *
pInMsg
, 
z˛SS_AµCÆlbacks_t
 *
pCBs
 );

144 
z˛SS_Pro˚ssInCmd_WD_SèπW¨nög
–
z˛Incomög_t
 *
pInMsg
, 
z˛SS_AµCÆlbacks_t
 *
pCBs
 );

145 
z˛SS_Pro˚ssInCmd_WD_Squawk
–
z˛Incomög_t
 *
pInMsg
, 
z˛SS_AµCÆlbacks_t
 *
pCBs
 );

148 #ifde‡
ZCL_ZONE


149 
uöt8
 
z˛SS_GëNextFªeZ⁄eID
( );

150 
ZSètus_t
 
z˛SS_AddZ⁄e
–
uöt8
 
ídpoöt
, 
IAS_ACE_Z⁄eTabÀ_t
 *
z⁄e
 );

151 
uöt8
 
z˛SS_Cou¡AŒZ⁄es
( );

152 
uöt8
 
z˛SS_Z⁄eIDAvaûabÀ
–uöt8 
z⁄eID
 );

155 #i‡
deföed
(
ZCL_ZONE
Ë|| deföed(
ZCL_ACE
)

156 
IAS_ACE_Z⁄eTabÀ_t
 *
z˛SS_FödZ⁄e
–
uöt8
 
ídpoöt
, uöt8 
z⁄eID
 );

169 
ZSètus_t
 
	$z˛SS_Regi°îCmdCÆlbacks
–
uöt8
 
ídpoöt
, 
z˛SS_AµCÆlbacks_t
 *
ˇŒbacks
 )

171 
z˛SSCBRec_t
 *
pNewIãm
;

172 
z˛SSCBRec_t
 *
pLo›
;

175 i‡–!
z˛SSPlugöRegi°ed
 )

177 
	`z˛_ªgi°îPlugö
–
ZCL_CLUSTER_ID_SS_IAS_ZONE
,

178 
ZCL_CLUSTER_ID_SS_IAS_WD
,

179 
z˛SS_HdlIncomög
 );

180 
z˛SSPlugöRegi°ed
 = 
TRUE
;

184 
pNewIãm
 = 
	`oßl_mem_Æloc
––
z˛SSCBRec_t
 ) );

185 i‡–
pNewIãm
 =
NULL
 )

186  (
ZMemEº‹
);

188 
pNewIãm
->
√xt
 = (
z˛SSCBRec_t
 *)
NULL
;

189 
pNewIãm
->
ídpoöt
 =Éndpoint;

190 
pNewIãm
->
CBs
 = 
ˇŒbacks
;

193 i‡–
z˛SSCBs
 =
NULL
 )

195 
z˛SSCBs
 = 
pNewIãm
;

200 
pLo›
 = 
z˛SSCBs
;

201  
pLo›
->
√xt
 !
NULL
 )

202 
pLo›
 =ÖLo›->
√xt
;

205 
pLo›
->
√xt
 = 
pNewIãm
;

207  ( 
ZSuc˚ss
 );

208 
	}
}

210 #ifde‡
ZCL_ZONE


223 
ZSètus_t
 
	$z˛SS_IAS_Síd_Z⁄eSètusCh™geNŸifiˇti⁄Cmd
–
uöt8
 
§cEP
, 
afAddrTy≥_t
 *
d°Addr
,

224 
uöt16
 
z⁄eSètus
, 
uöt8
 
exãndedSètus
,

225 
uöt8
 
dißbÀDeÁu…R•
, uöt8 
£qNum
 )

227 
uöt8
 
buf
[3];

229 
buf
[0] = 
	`LO_UINT16
–
z⁄eSètus
 );

230 
buf
[1] = 
	`HI_UINT16
–
z⁄eSètus
 );

231 
buf
[2] = 
exãndedSètus
;

233  
	`z˛_SídComm™d
–
§cEP
, 
d°Addr
, 
ZCL_CLUSTER_ID_SS_IAS_ZONE
,

234 
COMMAND_SS_IAS_ZONE_STATUS_CHANGE_NOTIFICATION
, 
TRUE
,

235 
ZCL_FRAME_SERVER_CLIENT_DIR
, 
dißbÀDeÁu…R•
, 0, 
£qNum
, 3, 
buf
 );

236 
	}
}

250 
ZSètus_t
 
	$z˛SS_IAS_Síd_Z⁄eSètusEƒﬁlReque°Cmd
–
uöt8
 
§cEP
, 
afAddrTy≥_t
 *
d°Addr
,

251 
uöt16
 
z⁄eTy≥
, uöt16 
m™uÁ˘uªrCode
,

252 
uöt8
 
dißbÀDeÁu…R•
, uöt8 
£qNum
 )

254 
uöt8
 
buf
[4];

256 
buf
[0] = 
	`LO_UINT16
–
z⁄eTy≥
 );

257 
buf
[1] = 
	`HI_UINT16
–
z⁄eTy≥
 );

258 
buf
[2] = 
	`LO_UINT16
–
m™uÁ˘uªrCode
 );

259 
buf
[3] = 
	`HI_UINT16
–
m™uÁ˘uªrCode
 );

261  
	`z˛_SídComm™d
–
§cEP
, 
d°Addr
, 
ZCL_CLUSTER_ID_SS_IAS_ZONE
,

262 
COMMAND_SS_IAS_ZONE_STATUS_ENROLL_REQUEST
, 
TRUE
,

263 
ZCL_FRAME_SERVER_CLIENT_DIR
, 
dißbÀDeÁu…R•
, 0, 
£qNum
, 4, 
buf
 );

264 
	}
}

278 
ZSètus_t
 
	$z˛SS_IAS_Síd_Z⁄eSètusEƒﬁlRe•⁄£Cmd
–
uöt8
 
§cEP
, 
afAddrTy≥_t
 *
d°Addr
,

279 
uöt8
 
ª•⁄£Code
, uöt8 
z⁄eID
,

280 
uöt8
 
dißbÀDeÁu…R•
, uöt8 
£qNum
 )

282 
uöt8
 
buf
[2];

284 
buf
[0] = 
ª•⁄£Code
;

285 
buf
[1] = 
z⁄eID
;

287  
	`z˛_SídComm™d
–
§cEP
, 
d°Addr
, 
ZCL_CLUSTER_ID_SS_IAS_ZONE
,

288 
COMMAND_SS_IAS_ZONE_STATUS_ENROLL_RESPONSE
, 
TRUE
,

289 
ZCL_FRAME_CLIENT_SERVER_DIR
, 
dißbÀDeÁu…R•
, 0, 
£qNum
, 2, 
buf
 );

290 
	}
}

293 #ifde‡
ZCL_ACE


305 
ZSètus_t
 
	$z˛SS_Síd_IAS_ACE_ArmCmd
–
uöt8
 
§cEP
, 
afAddrTy≥_t
 *
d°Addr
,

306 
uöt8
 
¨mMode
, uöt8 
dißbÀDeÁu…R•
, uöt8 
£qNum
 )

308 
uöt8
 
buf
[1];

310 
buf
[0] = 
¨mMode
;

312  
	`z˛_SídComm™d
–
§cEP
, 
d°Addr
, 
ZCL_CLUSTER_ID_SS_IAS_ACE
,

313 
COMMAND_SS_IAS_ACE_ARM
, 
TRUE
,

314 
ZCL_FRAME_CLIENT_SERVER_DIR
, 
dißbÀDeÁu…R•
, 0, 
£qNum
, 1, 
buf
 );

315 
	}
}

329 
ZSètus_t
 
	$z˛SS_Síd_IAS_ACE_By∑ssCmd
–
uöt8
 
§cEP
, 
afAddrTy≥_t
 *
d°Addr
,

330 
uöt8
 
numbîOfZ⁄es
, uöt8 *
by∑ssBuf
,

331 
uöt8
 
dißbÀDeÁu…R•
, uöt8 
£qNum
 )

333 
uöt8
 *
buf
;

334 
uöt8
 *
pBuf
;

335 
uöt8
 
Àn
 = 1 + 
numbîOfZ⁄es
;

336 
ZSètus_t
 
°©
;

338 
buf
 = 
	`oßl_mem_Æloc
–
Àn
 );

339 i‡–
buf
 )

341 
pBuf
 = 
buf
;

343 *
pBuf
++ = 
numbîOfZ⁄es
;

344 
	`oßl_mem˝y
–
pBuf
, 
by∑ssBuf
, 
numbîOfZ⁄es
 );

346 
°©
 = 
	`z˛_SídComm™d
–
§cEP
, 
d°Addr
, 
ZCL_CLUSTER_ID_SS_IAS_ACE
,

347 
COMMAND_SS_IAS_ACE_BYPASS
, 
TRUE
,

348 
ZCL_FRAME_CLIENT_SERVER_DIR
, 
dißbÀDeÁu…R•
, 0, 
£qNum
, 
Àn
, 
buf
 );

349 
	`oßl_mem_‰ì
–
buf
 );

352 
°©
 = 
ZFaûuª
;

354  ( 
°©
 );

355 
	}
}

368 
ZSètus_t
 
	$z˛SS_Síd_IAS_ACE_GëZ⁄eInf‹m©i⁄Cmd
–
uöt8
 
§cEP
, 
afAddrTy≥_t
 *
d°Addr
,

369 
uöt8
 
z⁄eID
, uöt8 
dißbÀDeÁu…R•
, uöt8 
£qNum
 )

371 
uöt8
 
buf
[1];

373 
buf
[0] = 
z⁄eID
;

375  
	`z˛_SídComm™d
–
§cEP
, 
d°Addr
, 
ZCL_CLUSTER_ID_SS_IAS_ACE
,

376 
COMMAND_SS_IAS_ACE_GET_ZONE_INFORMATION
, 
TRUE
,

377 
ZCL_FRAME_CLIENT_SERVER_DIR
, 
dißbÀDeÁu…R•
, 0, 
£qNum
, 1, 
buf
 );

378 
	}
}

391 
ZSètus_t
 
	$z˛SS_Síd_IAS_ACE_ArmRe•⁄£
–
uöt8
 
§cEP
, 
afAddrTy≥_t
 *
d°Addr
,

392 
uöt8
 
¨mNŸifiˇti⁄
, uöt8 
dißbÀDeÁu…R•
, uöt8 
£qNum
 )

394 
uöt8
 
buf
[1];

396 
buf
[0] = 
¨mNŸifiˇti⁄
;

398  
	`z˛_SídComm™d
–
§cEP
, 
d°Addr
, 
ZCL_CLUSTER_ID_SS_IAS_ACE
,

399 
COMMAND_SS_IAS_ACE_ARM_RESPONSE
, 
TRUE
,

400 
ZCL_FRAME_SERVER_CLIENT_DIR
, 
dißbÀDeÁu…R•
, 0, 
£qNum
, 1, 
buf
 );

401 
	}
}

414 
ZSètus_t
 
	$z˛SS_Síd_IAS_ACE_GëZ⁄eIDM≠Re•⁄£Cmd
–
uöt8
 
§cEP
, 
afAddrTy≥_t
 *
d°Addr
,

415 
uöt16
 *
z⁄eIDM≠
, 
uöt8
 
dißbÀDeÁu…R•
, uöt8 
£qNum
 )

417 
uöt8
 *
buf
;

418 
uöt8
 *
pIndex
;

419 
uöt8
 
j
,
Àn
 = 32;

420 
ZSètus_t
 
°©
;

422 
buf
 = 
	`oßl_mem_Æloc
–
Àn
 );

424 i‡–
buf
 )

426 
pIndex
 = 
buf
;

428  
j
 = 0; j < 16; j++ )

430 *
pIndex
++ = 
	`LO_UINT16
–*
z⁄eIDM≠
 );

431 *
pIndex
++ = 
	`HI_UINT16
–*
z⁄eIDM≠
++ );

434 
°©
 = 
	`z˛_SídComm™d
–
§cEP
, 
d°Addr
, 
ZCL_CLUSTER_ID_SS_IAS_ACE
,

435 
COMMAND_SS_IAS_ACE_GET_ZONE_ID_MAP_RESPONSE
, 
TRUE
,

436 
ZCL_FRAME_SERVER_CLIENT_DIR
, 
dißbÀDeÁu…R•
, 0, 
£qNum
, 
Àn
, 
buf
 );

437 
	`oßl_mem_‰ì
–
buf
 );

440 
°©
 = 
ZMemEº‹
;

442  ( 
°©
 );

444 
	}
}

459 
ZSètus_t
 
	$z˛SS_Síd_IAS_ACE_GëZ⁄eInf‹m©i⁄Re•⁄£Cmd
–
uöt8
 
§cEP
, 
afAddrTy≥_t
 *
d°Addr
,

460 
uöt8
 
z⁄eID
, 
uöt16
 
z⁄eTy≥
, uöt8 *
õìAddªss
,

461 
uöt8
 
dißbÀDeÁu…R•
, uöt8 
£qNum
 )

463 
uöt8
 *
buf
;

464 
uöt8
 
Àn
 = 11;

465 
ZSètus_t
 
°©
;

467 
buf
 = 
	`oßl_mem_Æloc
–
Àn
 );

469 i‡–
buf
 )

471 
buf
[0] = 
z⁄eID
;

472 
buf
[1] = 
	`LO_UINT16
–
z⁄eTy≥
);

473 
buf
[2] = 
	`HI_UINT16
–
z⁄eTy≥
);

474 
	`oßl_˝yExtAddr
–&
buf
[3], 
õìAddªss
 );

476 
°©
 = 
	`z˛_SídComm™d
–
§cEP
, 
d°Addr
, 
ZCL_CLUSTER_ID_SS_IAS_ACE
,

477 
COMMAND_SS_IAS_ACE_GET_ZONE_INFORMATION_RESPONSE
, 
TRUE
,

478 
ZCL_FRAME_SERVER_CLIENT_DIR
, 
dißbÀDeÁu…R•
, 0, 
£qNum
, 
Àn
, 
buf
 );

479 
	`oßl_mem_‰ì
–
buf
 );

482 
°©
 = 
ZMemEº‹
;

484  ( 
°©
 );

485 
	}
}

488 #ifde‡
ZCL_WD


498 
ZSètus_t
 
	$z˛SS_Síd_IAS_WD_SèπW¨nögCmd
–
uöt8
 
§cEP
, 
afAddrTy≥_t
 *
d°Addr
,

499 
z˛CmdSSWDSèπW¨nögPaylﬂd_t
 *
w¨nög
,

500 
uöt8
 
dißbÀDeÁu…R•
, uöt8 
£qNum
 )

502 
uöt8
 
buf
[3];

504 
buf
[0] = 
w¨nög
->
w¨nögmesßge
.
w¨nögbyã
;

505 
buf
[1] = 
	`LO_UINT16
–
w¨nög
->
duøti⁄
 );

506 
buf
[2] = 
	`HI_UINT16
–
w¨nög
->
duøti⁄
 );

508  
	`z˛_SídComm™d
–
§cEP
, 
d°Addr
, 
ZCL_CLUSTER_ID_SS_IAS_WD
,

509 
COMMAND_SS_IAS_WD_START_WARNING
, 
TRUE
,

510 
ZCL_FRAME_CLIENT_SERVER_DIR
, 
dißbÀDeÁu…R•
, 0, 
£qNum
, 3, 
buf
 );

511 
	}
}

522 
ZSètus_t
 
	$z˛SS_Síd_IAS_WD_SquawkCmd
–
uöt8
 
§cEP
, 
afAddrTy≥_t
 *
d°Addr
,

523 
z˛CmdSSWDSquawkPaylﬂd_t
 *
squawk
,

524 
uöt8
 
dißbÀDeÁu…R•
, uöt8 
£qNum
 )

526 
uöt8
 
buf
[1];

527 
buf
[0] = 
squawk
->
squawkbyã
;

529  
	`z˛_SídComm™d
–
§cEP
, 
d°Addr
, 
ZCL_CLUSTER_ID_SS_IAS_WD
,

530 
COMMAND_SS_IAS_WD_SQUAWK
, 
TRUE
,

531 
ZCL_FRAME_CLIENT_SERVER_DIR
, 
dißbÀDeÁu…R•
, 0, 
£qNum
, 1, 
buf
);

532 
	}
}

544 
z˛SS_AµCÆlbacks_t
 *
	$z˛SS_FödCÆlbacks
–
uöt8
 
ídpoöt
 )

546 
z˛SSCBRec_t
 *
pCBs
;

548 
pCBs
 = 
z˛SSCBs
;

549  
pCBs
 )

551 i‡–
pCBs
->
ídpoöt
 ==Éndpoint )

552  ( 
pCBs
->
CBs
 );

553 
pCBs
 =ÖCBs->
√xt
;

555  ( (
z˛SS_AµCÆlbacks_t
 *)
NULL
 );

556 
	}
}

570 
ZSètus_t
 
	$z˛SS_HdlIncomög
–
z˛Incomög_t
 *
pInMsg
 )

572 
ZSètus_t
 
°©
 = 
ZSuc˚ss
;

574 #i‡
	`deföed
 ( 
INTER_PAN
 )

575 i‡–
	`StubAPS_I¡îP™
–
pInMsg
->
msg
->
§cAddr
.
∑nId
,ÖInMsg->msg->§cAddr.
ídPoöt
 ) )

576  ( 
°©
 );

578 i‡–
	`z˛_Clu°îCmd
–
pInMsg
->
hdr
.
fc
.
ty≥
 ) )

581 i‡–
pInMsg
->
hdr
.
fc
.
m™uS≥cific
 == 0 )

583 
°©
 = 
	`z˛SS_HdlInS≥cificComm™ds
–
pInMsg
 );

588 
°©
 = 
ZFaûuª
;

594 
°©
 = 
ZFaûuª
;

596  ( 
°©
 );

597 
	}
}

609 
ZSètus_t
 
	$z˛SS_HdlInS≥cificComm™ds
–
z˛Incomög_t
 *
pInMsg
 )

611 
ZSètus_t
 
°©
 = 
ZSuc˚ss
;

612 
z˛SS_AµCÆlbacks_t
 *
pCBs
;

615 
pCBs
 = (*)
	`z˛SS_FödCÆlbacks
–
pInMsg
->
msg
->
ídPoöt
 );

616 i‡–
pCBs
 =
NULL
 )

617  ( 
ZFaûuª
 );

619  
pInMsg
->
msg
->
˛u°îId
 )

621 #ifde‡
ZCL_ZONE


622 
ZCL_CLUSTER_ID_SS_IAS_ZONE
:

623 i‡–
	`z˛_SîvîCmd
–
pInMsg
->
hdr
.
fc
.
dúe˘i⁄
 ) )

624 
°©
 = 
	`z˛SS_Pro˚ssInZ⁄eSètusCmdsSîvî
–
pInMsg
, 
pCBs
 );

626 
°©
 = 
	`z˛SS_Pro˚ssInZ⁄eSètusCmdsClõ¡
–
pInMsg
, 
pCBs
 );

630 #ifde‡
ZCL_ACE


631 
ZCL_CLUSTER_ID_SS_IAS_ACE
:

632 i‡–
	`z˛_SîvîCmd
–
pInMsg
->
hdr
.
fc
.
dúe˘i⁄
 ) )

633 
°©
 = 
	`z˛SS_Pro˚ssInACECmdsSîvî
–
pInMsg
, 
pCBs
 );

635 
°©
 = 
	`z˛SS_Pro˚ssInACECmdsClõ¡
–
pInMsg
, 
pCBs
 );

639 #ifde‡
ZCL_WD


640 
ZCL_CLUSTER_ID_SS_IAS_WD
:

641 
°©
 = 
	`z˛SS_Pro˚ssInWDCmds
–
pInMsg
, 
pCBs
 );

646 
°©
 = 
ZFaûuª
;

650  ( 
°©
 );

651 
	}
}

653 #ifde‡
ZCL_ZONE


664 
ZSètus_t
 
	$z˛SS_Pro˚ssInZ⁄eSètusCmdsSîvî
–
z˛Incomög_t
 *
pInMsg
,

665 
z˛SS_AµCÆlbacks_t
 *
pCBs
 )

667 
ZSètus_t
 
°©
 = 
ZSuc˚ss
;

669 i‡–
pInMsg
->
hdr
.
comm™dID
 =
COMMAND_SS_IAS_ZONE_STATUS_ENROLL_RESPONSE
 )

670 
	`z˛SS_Pro˚ssInCmd_Z⁄eSètus_EƒﬁlRe•⁄£
–
pInMsg
, 
pCBs
 );

672 
°©
 = 
ZFaûuª
;

674  ( 
°©
 );

675 
	}
}

687 
ZSètus_t
 
	$z˛SS_Pro˚ssInZ⁄eSètusCmdsClõ¡
–
z˛Incomög_t
 *
pInMsg
,

688 
z˛SS_AµCÆlbacks_t
 *
pCBs
 )

690 
ZSètus_t
 
°©
 = 
ZSuc˚ss
;

692  
pInMsg
->
hdr
.
comm™dID
 )

694 
COMMAND_SS_IAS_ZONE_STATUS_CHANGE_NOTIFICATION
:

695 
	`z˛SS_Pro˚ssInCmd_Z⁄eSètus_Ch™geNŸifiˇti⁄
–
pInMsg
, 
pCBs
 );

698 
COMMAND_SS_IAS_ZONE_STATUS_ENROLL_REQUEST
:

699 
°©
 = 
	`z˛SS_Pro˚ssInCmd_Z⁄eSètus_EƒﬁlReque°
–
pInMsg
, 
pCBs
 );

703 
°©
 = 
ZFaûuª
;

707  ( 
°©
 );

708 
	}
}

711 #ifde‡
ZCL_ACE


722 
ZSètus_t
 
	$z˛SS_Pro˚ssInACECmdsSîvî
–
z˛Incomög_t
 *
pInMsg
,

723 
z˛SS_AµCÆlbacks_t
 *
pCBs
 )

725 
ZSètus_t
 
°©
 = 
ZSuc˚ss
;

727  
pInMsg
->
hdr
.
comm™dID
 )

729 
COMMAND_SS_IAS_ACE_ARM
:

730 
°©
 = 
	`z˛SS_Pro˚ssInCmd_ACE_Arm
–
pInMsg
, 
pCBs
 );

733 
COMMAND_SS_IAS_ACE_BYPASS
:

734 
	`z˛SS_Pro˚ssInCmd_ACE_By∑ss
–
pInMsg
, 
pCBs
 );

737 
COMMAND_SS_IAS_ACE_EMERGENCY
:

738 
	`z˛SS_Pro˚ssInCmd_ACE_Emîgícy
–
pInMsg
, 
pCBs
 );

741 
COMMAND_SS_IAS_ACE_FIRE
:

742 
	`z˛SS_Pro˚ssInCmd_ACE_Fúe
–
pInMsg
, 
pCBs
 );

745 
COMMAND_SS_IAS_ACE_PANIC
:

746 
	`z˛SS_Pro˚ssInCmd_ACE_P™ic
–
pInMsg
, 
pCBs
 );

749 
COMMAND_SS_IAS_ACE_GET_ZONE_ID_MAP
:

750 
°©
 = 
	`z˛SS_Pro˚ssInCmd_ACE_GëZ⁄eIDM≠
–
pInMsg
 );

753 
COMMAND_SS_IAS_ACE_GET_ZONE_INFORMATION
:

754 
°©
 = 
	`z˛SS_Pro˚ssInCmd_ACE_GëZ⁄eInf‹m©i⁄
–
pInMsg
 );

758 
°©
 = 
ZFaûuª
;

762  ( 
°©
 );

763 
	}
}

775 
ZSètus_t
 
	$z˛SS_Pro˚ssInACECmdsClõ¡
–
z˛Incomög_t
 *
pInMsg
,

776 
z˛SS_AµCÆlbacks_t
 *
pCBs
 )

778 
ZSètus_t
 
°©
 = 
ZSuc˚ss
;

780  
pInMsg
->
hdr
.
comm™dID
 )

782 
COMMAND_SS_IAS_ACE_ARM_RESPONSE
:

783 
	`z˛SS_Pro˚ssInCmd_ACE_ArmRe•⁄£
–
pInMsg
, 
pCBs
 );

786 
COMMAND_SS_IAS_ACE_GET_ZONE_ID_MAP_RESPONSE
:

787 
	`z˛SS_Pro˚ssInCmd_ACE_GëZ⁄eIDM≠Re•⁄£
–
pInMsg
, 
pCBs
 );

790 
COMMAND_SS_IAS_ACE_GET_ZONE_INFORMATION_RESPONSE
:

791 
	`z˛SS_Pro˚ssInCmd_ACE_GëZ⁄eInf‹m©i⁄Re•⁄£
–
pInMsg
, 
pCBs
 );

795 
°©
 = 
ZFaûuª
;

799  ( 
°©
 );

800 
	}
}

803 #ifde‡
ZCL_ZONE


814 
ZSètus_t
 
	$z˛SS_AddZ⁄e
–
uöt8
 
ídpoöt
, 
IAS_ACE_Z⁄eTabÀ_t
 *
z⁄e
 )

816 
z˛SS_Z⁄eIãm_t
 *
pNewIãm
;

817 
z˛SS_Z⁄eIãm_t
 *
pLo›
;

820 
pNewIãm
 = 
	`oßl_mem_Æloc
––
z˛SS_Z⁄eIãm_t
 ) );

821 i‡–
pNewIãm
 =
NULL
 )

822  ( 
ZMemEº‹
 );

825 
pNewIãm
->
√xt
 = (
z˛SS_Z⁄eIãm_t
 *)
NULL
;

826 
pNewIãm
->
ídpoöt
 =Éndpoint;

827 
	`oßl_mem˝y
–(
uöt8
*)&(
pNewIãm
->
z⁄e
), (uöt8*)z⁄e,  ( 
IAS_ACE_Z⁄eTabÀ_t
 ));

830 i‡–
z˛SS_Z⁄eTabÀ
 =
NULL
 )

832 
z˛SS_Z⁄eTabÀ
 = 
pNewIãm
;

837 
pLo›
 = 
z˛SS_Z⁄eTabÀ
;

838  
pLo›
->
√xt
 !
NULL
 )

839 
pLo›
 =ÖLo›->
√xt
;

842 
pLo›
->
√xt
 = 
pNewIãm
;

845  ( 
ZSuc˚ss
 );

846 
	}
}

857 
uöt8
 
	$z˛SS_Cou¡AŒZ⁄es
( )

859 
z˛SS_Z⁄eIãm_t
 *
pLo›
;

860 
uöt8
 
˙t
 = 0;

863 
pLo›
 = 
z˛SS_Z⁄eTabÀ
;

864  
pLo›
 )

866 
˙t
++;

867 
pLo›
 =ÖLo›->
√xt
;

869  ( 
˙t
 );

870 
	}
}

881 
uöt8
 
	$z˛SS_GëNextFªeZ⁄eID
( )

883 
uöt8
 
√xtAvaûZ⁄eID
 = 0;

885 i‡–
	`z˛SS_Z⁄eIDAvaûabÀ
–
√xtAvaûZ⁄eID
 ) =
FALSE
 )

887 
uöt8
 
z⁄eID
 = 
√xtAvaûZ⁄eID
;

892 i‡–++
z⁄eID
 =
ZCL_SS_MAX_ZONE_ID
 )

893 
z⁄eID
 = 0;

895 }  (
z⁄eID
 !
√xtAvaûZ⁄eID
Ë&& (
	`z˛SS_Z⁄eIDAvaûabÀ
–√xtAvaûZ⁄eID ) =
FALSE
) );

898 i‡–
z⁄eID
 !
√xtAvaûZ⁄eID
 )

899 
√xtAvaûZ⁄eID
 = 
z⁄eID
;

902  ( 
√xtAvaûZ⁄eID
 );

903 
	}
}

915 
uöt8
 
	$z˛SS_Z⁄eIDAvaûabÀ
–
uöt8
 
z⁄eID
 )

917 
z˛SS_Z⁄eIãm_t
 *
pLo›
;

919 i‡–
z⁄eID
 < 
ZCL_SS_MAX_ZONE_ID
 )

921 
pLo›
 = 
z˛SS_Z⁄eTabÀ
;

922  
pLo›
 )

924 i‡–
pLo›
->
z⁄e
.
z⁄eID
 == zoneID )

926  ( 
FALSE
 );

928 
pLo›
 =ÖLo›->
√xt
;

932  ( 
TRUE
 );

935  ( 
FALSE
 );

936 
	}
}

939 #i‡
deföed
(
ZCL_ZONE
Ë|| deföed(
ZCL_ACE
)

950 
IAS_ACE_Z⁄eTabÀ_t
 *
	$z˛SS_FödZ⁄e
–
uöt8
 
ídpoöt
, uöt8 
z⁄eID
 )

952 
z˛SS_Z⁄eIãm_t
 *
pLo›
;

955 
pLo›
 = 
z˛SS_Z⁄eTabÀ
;

956  
pLo›
 )

958 i‡–
pLo›
->
ídpoöt
 =ídpoöà&&ÖLo›->
z⁄e
.
z⁄eID
 == zoneID )

960  ( &(
pLo›
->
z⁄e
) );

962 
pLo›
 =ÖLo›->
√xt
;

965  ( (
IAS_ACE_Z⁄eTabÀ_t
 *)
NULL
 );

966 
	}
}

978 
uöt8
 
	$z˛SS_RemoveZ⁄e
–
uöt8
 
ídpoöt
, uöt8 
z⁄eID
 )

980 
z˛SS_Z⁄eIãm_t
 *
pLo›
;

981 
z˛SS_Z⁄eIãm_t
 *
pPªv
;

984 
pLo›
 = 
z˛SS_Z⁄eTabÀ
;

985 
pPªv
 = 
NULL
;

986  
pLo›
 )

988 i‡–
pLo›
->
ídpoöt
 =ídpoöà&&ÖLo›->
z⁄e
.
z⁄eID
 == zoneID )

990 i‡–
pPªv
 =
NULL
 )

991 
z˛SS_Z⁄eTabÀ
 = 
pLo›
->
√xt
;

993 
pPªv
->
√xt
 = 
pLo›
->next;

996 
	`oßl_mem_‰ì
–
pLo›
 );

998  ( 
TRUE
 );

1000 
pPªv
 = 
pLo›
;

1001 
pLo›
 =ÖLo›->
√xt
;

1004  ( 
FALSE
 );

1005 
	}
}

1018 
	$z˛SS_Upd©eZ⁄eAddªss
–
uöt8
 
ídpoöt
, uöt8 
z⁄eID
, uöt8 *
õìAddr
 )

1020 
IAS_ACE_Z⁄eTabÀ_t
 *
z⁄e
;

1022 
z⁄e
 = 
	`z˛SS_FödZ⁄e
–
ídpoöt
, 
z⁄eID
 );

1023 i‡–
z⁄e
 !
NULL
 )

1026 
	`oßl_˝yExtAddr
–
z⁄e
->
z⁄eAddªss
, 
õìAddr
 );

1028 
	}
}

1031 #ifde‡
ZCL_ZONE


1041 
	$z˛SS_Pro˚ssInCmd_Z⁄eSètus_Ch™geNŸifiˇti⁄
–
z˛Incomög_t
 *
pInMsg
,

1042 
z˛SS_AµCÆlbacks_t
 *
pCBs
 )

1044 i‡–
pInMsg
->
hdr
.
comm™dID
 !
COMMAND_SS_IAS_ZONE_STATUS_CHANGE_NOTIFICATION
 )

1047 i‡–
pCBs
->
p‚Ch™geNŸifiˇti⁄
 )

1049 
z˛Z⁄eCh™geNŸif_t
 
cmd
;

1051 
cmd
.
z⁄eSètus
 = 
	`BUILD_UINT16
–
pInMsg
->
pD©a
[0],ÖInMsg->pData[1] );

1052 
cmd
.
exãndedSètus
 = 
pInMsg
->
pD©a
[2];

1054 
pCBs
->
	`p‚Ch™geNŸifiˇti⁄
–&
cmd
 );

1056 
	}
}

1067 
ZSètus_t
 
	$z˛SS_Pro˚ssInCmd_Z⁄eSètus_EƒﬁlReque°
–
z˛Incomög_t
 *
pInMsg
,

1068 
z˛SS_AµCÆlbacks_t
 *
pCBs
 )

1070 
IAS_ACE_Z⁄eTabÀ_t
 
z⁄e
;

1071 
uöt16
 
z⁄eTy≥
;

1072 
uöt16
 
m™uCode
;

1073 
uöt8
 
z⁄eID
;

1074 
uöt8
 
°©us
;

1076 i‡–
pInMsg
->
hdr
.
comm™dID
 !
COMMAND_SS_IAS_ZONE_STATUS_ENROLL_REQUEST
 )

1077  ( 
ZFaûuª
 );

1079 
z⁄eTy≥
 = 
	`BUILD_UINT16
–
pInMsg
->
pD©a
[0],ÖInMsg->pData[1] );

1080 
m™uCode
 = 
	`BUILD_UINT16
–
pInMsg
->
pD©a
[2],ÖInMsg->pData[3] );

1082 i‡–
	`z˛SS_Z⁄eTy≥Suµ‹ãd
–
z⁄eTy≥
 ) )

1085 i‡–
	`z˛SS_Cou¡AŒZ⁄es
(Ë< 
ZCL_SS_MAX_ZONES
-1 )

1088 
z⁄eID
 = 
	`z˛SS_GëNextFªeZ⁄eID
();

1090 
z⁄e
.
z⁄eID
 = zoneID;

1091 
z⁄e
.
z⁄eTy≥
 = zoneType;

1094 
	`oßl_˝yExtAddr
–
z⁄e
.
z⁄eAddªss
, (*)
z˛SS_UknownIìeAddªss
 );

1096 i‡–
	`z˛SS_AddZ⁄e
–
pInMsg
->
msg
->
ídPoöt
, &
z⁄e
 ) =
ZSuc˚ss
 )

1098 
°©us
 = 
ZCL_STATUS_SUCCESS
;

1103 
°©us
 = 
SS_IAS_ZONE_STATUS_ENROLL_RESPONSE_CODE_NO_ENROLL_PERMIT
;

1109 
°©us
 = 
SS_IAS_ZONE_STATUS_ENROLL_RESPONSE_CODE_TOO_MANY_ZONES
;

1115 
°©us
 = 
SS_IAS_ZONE_STATUS_ENROLL_RESPONSE_CODE_NOT_SUPPORTED
;

1119 
	`z˛SS_IAS_Síd_Z⁄eSètusEƒﬁlRe•⁄£Cmd
–
pInMsg
->
msg
->
ídPoöt
, &’InMsg->msg->
§cAddr
),

1120 
°©us
, 
z⁄eID
, 
åue
, 
pInMsg
->
hdr
.
å™sSeqNum
 );

1121 i‡–
°©us
 =
ZCL_STATUS_SUCCESS
 )

1124 i‡–
pCBs
->
p‚EƒﬁlReque°
 )

1126 
z˛Z⁄eEƒﬁlReq_t
 
ªq
;

1128 
ªq
.
§cAddr
 = &(
pInMsg
->
msg
->srcAddr);

1129 
ªq
.
z⁄eID
 = zoneID;

1130 
ªq
.
z⁄eTy≥
 = zoneType;

1131 
ªq
.
m™uÁ˘uªrCode
 = 
m™uCode
;

1133 
pCBs
->
	`p‚EƒﬁlReque°
–&
ªq
 );

1137  ( 
ZCL_STATUS_CMD_HAS_RSP
 );

1138 
	}
}

1149 
	$z˛SS_Pro˚ssInCmd_Z⁄eSètus_EƒﬁlRe•⁄£
–
z˛Incomög_t
 *
pInMsg
,

1150 
z˛SS_AµCÆlbacks_t
 *
pCBs
 )

1152 i‡–
pInMsg
->
hdr
.
comm™dID
 !
COMMAND_SS_IAS_ZONE_STATUS_ENROLL_RESPONSE
 )

1155 i‡–
pCBs
->
p‚EƒﬁlRe•⁄£
 )

1157 
z˛Z⁄eEƒﬁlR•_t
 
r•
;

1159 
r•
.
ª•⁄£Code
 = 
pInMsg
->
pD©a
[0];

1160 
r•
.
z⁄eID
 = 
pInMsg
->
pD©a
[1];

1162 
pCBs
->
	`p‚EƒﬁlRe•⁄£
–&
r•
 );

1164 
	}
}

1167 #ifde‡
ZCL_ACE


1176 
ZSètus_t
 
	$z˛SS_Pro˚ssInCmd_ACE_Arm
–
z˛Incomög_t
 *
pInMsg
,

1177 
z˛SS_AµCÆlbacks_t
 *
pCBs
 )

1179 
uöt8
 
¨mNŸifiˇti⁄
;

1181 i‡–
pInMsg
->
hdr
.
comm™dID
 !
COMMAND_SS_IAS_ACE_ARM
 )

1182  ( 
ZFaûuª
 );

1184 i‡–
pCBs
->
p‚ACE_Arm
 )

1186 
¨mNŸifiˇti⁄
 = 
pCBs
->
	`p‚ACE_Arm
–
pInMsg
->
pD©a
[0] );

1189 
	`z˛SS_Síd_IAS_ACE_ArmRe•⁄£
–
pInMsg
->
msg
->
ídPoöt
, &’InMsg->msg->
§cAddr
),

1190 
¨mNŸifiˇti⁄
, 
åue
, 
pInMsg
->
hdr
.
å™sSeqNum
 );

1193  ( 
ZCL_STATUS_CMD_HAS_RSP
 );

1194 
	}
}

1204 
	$z˛SS_Pro˚ssInCmd_ACE_By∑ss
–
z˛Incomög_t
 *
pInMsg
,

1205 
z˛SS_AµCÆlbacks_t
 *
pCBs
 )

1207 i‡–
pInMsg
->
hdr
.
comm™dID
 !
COMMAND_SS_IAS_ACE_BYPASS
 )

1210 i‡–
pCBs
->
p‚ACE_By∑ss
 )

1212 
z˛ACEBy∑ss_t
 
cmd
;

1214 
cmd
.
numbîOfZ⁄es
 = 
pInMsg
->
pD©a
[0];

1215 
cmd
.
by∑ssBuf
 = &(
pInMsg
->
pD©a
[1]);

1217 
pCBs
->
	`p‚ACE_By∑ss
–&
cmd
 ) ;

1219 
	}
}

1229 
	$z˛SS_Pro˚ssInCmd_ACE_Emîgícy
–
z˛Incomög_t
 *
pInMsg
,

1230 
z˛SS_AµCÆlbacks_t
 *
pCBs
 )

1232 i‡–
pInMsg
->
hdr
.
comm™dID
 !
COMMAND_SS_IAS_ACE_EMERGENCY
 )

1235 i‡–
pCBs
->
p‚ACE_Emîgícy
 )

1236 
pCBs
->
	`p‚ACE_Emîgícy
();

1238 
	}
}

1248 
	$z˛SS_Pro˚ssInCmd_ACE_Fúe
–
z˛Incomög_t
 *
pInMsg
,

1249 
z˛SS_AµCÆlbacks_t
 *
pCBs
 )

1251 i‡–
pInMsg
->
hdr
.
comm™dID
 !
COMMAND_SS_IAS_ACE_FIRE
 )

1254 i‡–
pCBs
->
p‚ACE_Fúe
 )

1255 
pCBs
->
	`p‚ACE_Fúe
();

1256 
	}
}

1266 
	$z˛SS_Pro˚ssInCmd_ACE_P™ic
–
z˛Incomög_t
 *
pInMsg
,

1267 
z˛SS_AµCÆlbacks_t
 *
pCBs
 )

1269 i‡–
pInMsg
->
hdr
.
comm™dID
 !
COMMAND_SS_IAS_ACE_PANIC
 )

1272 i‡–
pCBs
->
p‚ACE_P™ic
 )

1273 
pCBs
->
	`p‚ACE_P™ic
();

1274 
	}
}

1284 
ZSètus_t
 
	$z˛SS_Pro˚ssInCmd_ACE_GëZ⁄eIDM≠
–
z˛Incomög_t
 *
pInMsg
 )

1286 
uöt16
 
z⁄eIDM≠
[16];

1287 
uöt16
 
m≠Se˘i⁄
;

1288 
uöt8
 
z⁄eID
;

1289 
uöt8
 
i
, 
j
;

1291 i‡–
pInMsg
->
hdr
.
comm™dID
 !
COMMAND_SS_IAS_ACE_GET_ZONE_ID_MAP
 )

1292  ( 
ZFaûuª
 );

1294  
i
 = 0; i < 16; i++ )

1296 
m≠Se˘i⁄
 = 0;

1299  
j
 = 0; j < 16; j++ )

1301 
z⁄eID
 = 16 * 
i
 + 
j
;

1302 i‡–
	`z˛SS_FödZ⁄e
–
pInMsg
->
msg
->
ídPoöt
, 
z⁄eID
 ) !
NULL
 )

1305 
m≠Se˘i⁄
 |(0x01 << 
j
 );

1308 
z⁄eIDM≠
[
i
] = 
m≠Se˘i⁄
;

1312 
	`z˛SS_Síd_IAS_ACE_GëZ⁄eIDM≠Re•⁄£Cmd
–
pInMsg
->
msg
->
ídPoöt
, &’InMsg->msg->
§cAddr
),

1313 
z⁄eIDM≠
, 
åue
, 
pInMsg
->
hdr
.
å™sSeqNum
 );

1314  ( 
ZCL_STATUS_CMD_HAS_RSP
 );

1315 
	}
}

1325 
ZSètus_t
 
	$z˛SS_Pro˚ssInCmd_ACE_GëZ⁄eInf‹m©i⁄
–
z˛Incomög_t
 *
pInMsg
 )

1327 
IAS_ACE_Z⁄eTabÀ_t
 
z⁄e
;

1328 
IAS_ACE_Z⁄eTabÀ_t
 *
pZ⁄e
;

1330 i‡–
pInMsg
->
hdr
.
comm™dID
 !
COMMAND_SS_IAS_ACE_GET_ZONE_INFORMATION
 )

1331  ( 
ZFaûuª
 );

1333 
pZ⁄e
 = 
	`z˛SS_FödZ⁄e
–
pInMsg
->
msg
->
ídPoöt
,ÖInMsg->
pD©a
[0] );

1334 i‡–
pZ⁄e
 =
NULL
 )

1337 
pZ⁄e
 = &
z⁄e
;

1338 
pZ⁄e
->
z⁄eID
 = 
pInMsg
->
pD©a
[0];

1339 
pZ⁄e
->
z⁄eTy≥
 = 
SS_IAS_ZONE_TYPE_INVALID_ZONE_TYPE
;

1340 
	`oßl_˝yExtAddr
–
pZ⁄e
->
z⁄eAddªss
, (*)
z˛SS_UknownIìeAddªss
 );

1344 
	`z˛SS_Síd_IAS_ACE_GëZ⁄eInf‹m©i⁄Re•⁄£Cmd
–
pInMsg
->
msg
->
ídPoöt
, &’InMsg->msg->
§cAddr
),

1345 
pZ⁄e
->
z⁄eID
,ÖZ⁄e->
z⁄eTy≥
,

1346 
pZ⁄e
->
z⁄eAddªss
, 
åue
, 
pInMsg
->
hdr
.
å™sSeqNum
 );

1347  ( 
ZCL_STATUS_CMD_HAS_RSP
 );

1348 
	}
}

1358 
	$z˛SS_Pro˚ssInCmd_ACE_ArmRe•⁄£
–
z˛Incomög_t
 *
pInMsg
,

1359 
z˛SS_AµCÆlbacks_t
 *
pCBs
 )

1361 i‡–
pInMsg
->
hdr
.
comm™dID
 !
COMMAND_SS_IAS_ACE_ARM_RESPONSE
 )

1364 i‡–
pCBs
->
p‚ACE_ArmRe•⁄£
 )

1365 
pCBs
->
	`p‚ACE_ArmRe•⁄£
(
pInMsg
->
pD©a
[0]);

1366 
	}
}

1377 
	$z˛SS_Pro˚ssInCmd_ACE_GëZ⁄eIDM≠Re•⁄£
–
z˛Incomög_t
 *
pInMsg
,

1378 
z˛SS_AµCÆlbacks_t
 *
pCBs
 )

1380 
uöt16
 *
buf
;

1381 
uöt16
 *
pIndex
;

1382 
uöt8
 *
pD©a
;

1383 
uöt8
 
i
, 
Àn
 = 32;

1385 i‡–
pInMsg
->
hdr
.
comm™dID
 !
COMMAND_SS_IAS_ACE_GET_ZONE_ID_MAP_RESPONSE
 )

1388 
buf
 = 
	`oßl_mem_Æloc
–
Àn
 );

1390 i‡–
buf
 )

1392 
pIndex
 = 
buf
;

1393 
pD©a
 = 
pInMsg
->pData;

1395  
i
 = 0; i < 16; i++ )

1397 *
pIndex
++ = 
	`BUILD_UINT16
–
pD©a
[0],ÖData[1] );

1398 
pD©a
 += 2;

1401 i‡–
pCBs
->
p‚ACE_GëZ⁄eIDM≠Re•⁄£
 )

1402 
pCBs
->
	`p‚ACE_GëZ⁄eIDM≠Re•⁄£
–
buf
 );

1404 
	`oßl_mem_‰ì
–
buf
 );

1406 
	}
}

1416 
	$z˛SS_Pro˚ssInCmd_ACE_GëZ⁄eInf‹m©i⁄Re•⁄£
–
z˛Incomög_t
 *
pInMsg
,

1417 
z˛SS_AµCÆlbacks_t
 *
pCBs
 )

1419 i‡–
pInMsg
->
hdr
.
comm™dID
 !
COMMAND_SS_IAS_ACE_GET_ZONE_INFORMATION_RESPONSE
 )

1422 i‡–
pCBs
->
p‚ACE_GëZ⁄eInf‹m©i⁄Re•⁄£
 )

1424 
z˛ACEGëZ⁄eInfoR•_t
 
r•
;

1426 
r•
.
z⁄eID
 = 
pInMsg
->
pD©a
[0];

1427 
r•
.
z⁄eTy≥
 = 
	`BUILD_UINT16
–
pInMsg
->
pD©a
[1],ÖInMsg->pData[2] );

1428 
r•
.
õìAddr
 = &(
pInMsg
->
pD©a
[3]);

1430 
pCBs
->
	`p‚ACE_GëZ⁄eInf‹m©i⁄Re•⁄£
–&
r•
 );

1432 
	}
}

1435 #ifde‡
ZCL_WD


1446 
ZSètus_t
 
	$z˛SS_Pro˚ssInWDCmds
–
z˛Incomög_t
 *
pInMsg
,

1447 
z˛SS_AµCÆlbacks_t
 *
pCBs
 )

1449 
ZSètus_t
 
°©
 = 
ZSuc˚ss
;

1451  
pInMsg
->
hdr
.
comm™dID
 )

1453 
COMMAND_SS_IAS_WD_START_WARNING
:

1454 
	`z˛SS_Pro˚ssInCmd_WD_SèπW¨nög
–
pInMsg
, 
pCBs
 );

1457 
COMMAND_SS_IAS_WD_SQUAWK
:

1458 
	`z˛SS_Pro˚ssInCmd_WD_Squawk
–
pInMsg
, 
pCBs
 );

1462 
°©
 = 
ZFaûuª
;

1466  ( 
°©
 );

1467 
	}
}

1477 
	$z˛SS_Pro˚ssInCmd_WD_SèπW¨nög
–
z˛Incomög_t
 *
pInMsg
,

1478 
z˛SS_AµCÆlbacks_t
 *
pCBs
 )

1480 i‡–
pInMsg
->
hdr
.
comm™dID
 !
COMMAND_SS_IAS_WD_START_WARNING
 )

1483 i‡–
pCBs
->
p‚WD_SèπW¨nög
 )

1485 
z˛WDSèπW¨nög_t
 
cmd
;

1487 
cmd
.
w¨nögs
.
w¨nögbyã
 = 
pInMsg
->
pD©a
[0];

1488 
cmd
.
duøti⁄
 = 
	`BUILD_UINT16
–
pInMsg
->
pD©a
[1],ÖInMsg->pData[2] );

1490 
pCBs
->
	`p‚WD_SèπW¨nög
–&
cmd
 );

1492 
	}
}

1502 
	$z˛SS_Pro˚ssInCmd_WD_Squawk
–
z˛Incomög_t
 *
pInMsg
,

1503 
z˛SS_AµCÆlbacks_t
 *
pCBs
 )

1505 
z˛CmdSSWDSquawkPaylﬂd_t
 
squawk
;

1507 i‡–
pInMsg
->
hdr
.
comm™dID
 !
COMMAND_SS_IAS_WD_SQUAWK
 )

1510 i‡–
pCBs
->
p‚WD_Squawk
 )

1512 
squawk
.
squawkbyã
 = 
pInMsg
->
pD©a
[0];

1513 
pCBs
->
	`p‚WD_Squawk
–
squawk
 );

1515 
	}
}

	@Components/stack/zcl/zcl_ss.h

40 #i‚de‡
ZCL_SS_H


41 
	#ZCL_SS_H


	)

43 #ifde‡
__˝lu•lus


51 
	~"z˛.h
"

61 
	#ATTRID_SS_IAS_ZONE_STATE
 0x0000

	)

62 
	#ATTRID_SS_IAS_ZONE_TYPE
 0x0001

	)

63 
	#ATTRID_SS_IAS_ZONE_STATUS
 0x0002

	)

65 
	#SS_IAS_ZONE_STATE_NOT_ENROLLED
 0x00

	)

66 
	#SS_IAS_ZONE_STATE_ENROLLED
 0x01

	)

68 
	#SS_IAS_ZONE_TYPE_STANDARD_CIE
 0x0000

	)

69 
	#SS_IAS_ZONE_TYPE_MOTION_SENSOR
 0x000D

	)

70 
	#SS_IAS_ZONE_TYPE_CONTACT_SWITCH
 0x0015

	)

71 
	#SS_IAS_ZONE_TYPE_FIRE_SENSOR
 0x0028

	)

72 
	#SS_IAS_ZONE_TYPE_WATER_SENSOR
 0x002A

	)

73 
	#SS_IAS_ZONE_TYPE_GAS_SENSOR
 0x002B

	)

74 
	#SS_IAS_ZONE_TYPE_PERSONAL_EMERGENCY_DEVICE
 0x002C

	)

75 
	#SS_IAS_ZONE_TYPE_VIBRATION_MOVEMENT_SENSOR
 0x002D

	)

76 
	#SS_IAS_ZONE_TYPE_REMOTE_CONTROL
 0x010F

	)

77 
	#SS_IAS_ZONE_TYPE_KEY_FOB
 0x0115

	)

78 
	#SS_IAS_ZONE_TYPE_KEYPAD
 0x021D

	)

79 
	#SS_IAS_ZONE_TYPE_STANDARD_WARNING_DEVICE
 0x0225

	)

80 
	#SS_IAS_ZONE_TYPE_INVALID_ZONE_TYPE
 0xFFFF

	)

82 
	#SS_IAS_ZONE_STATUS_ALARM1_ALARMED
 0x0001

	)

83 
	#SS_IAS_ZONE_STATUS_ALARM2_ALARMED
 0x0002

	)

84 
	#SS_IAS_ZONE_STATUS_TAMPERED_YES
 0x0004

	)

85 
	#SS_IAS_ZONE_STATUS_BATTERY_LOW
 0x0008

	)

86 
	#SS_IAS_ZONE_STATUS_SUPERVISION_REPORTS_YES
 0x0010

	)

87 
	#SS_IAS_ZONE_STATUS_RESTORE_REPORTS_YES
 0x0020

	)

88 
	#SS_IAS_ZONE_STATUS_TROUBLE_YES
 0x0040

	)

89 
	#SS_IAS_ZONE_STATUS_AC_MAINS_FAULT
 0x0080

	)

92 
	#ATTRID_SS_IAS_CIE_ADDRESS
 0x0010

	)

94 
	#COMMAND_SS_IAS_ZONE_STATUS_CHANGE_NOTIFICATION
 0x00

	)

95 
	#COMMAND_SS_IAS_ZONE_STATUS_ENROLL_REQUEST
 0x01

	)

96 
	#COMMAND_SS_IAS_ZONE_STATUS_ENROLL_RESPONSE
 0x00

	)

98 
	#SS_IAS_ZONE_STATUS_ENROLL_RESPONSE_CODE_SUCCESS
 0x00

	)

99 
	#SS_IAS_ZONE_STATUS_ENROLL_RESPONSE_CODE_NOT_SUPPORTED
 0x01

	)

100 
	#SS_IAS_ZONE_STATUS_ENROLL_RESPONSE_CODE_NO_ENROLL_PERMIT
 0x02

	)

101 
	#SS_IAS_ZONE_STATUS_ENROLL_RESPONSE_CODE_TOO_MANY_ZONES
 0x03

	)

110 
	#COMMAND_SS_IAS_ACE_ARM
 0x00

	)

111 
	#COMMAND_SS_IAS_ACE_BYPASS
 0x01

	)

112 
	#COMMAND_SS_IAS_ACE_EMERGENCY
 0x02

	)

113 
	#COMMAND_SS_IAS_ACE_FIRE
 0x03

	)

114 
	#COMMAND_SS_IAS_ACE_PANIC
 0x04

	)

115 
	#COMMAND_SS_IAS_ACE_GET_ZONE_ID_MAP
 0x05

	)

116 
	#COMMAND_SS_IAS_ACE_GET_ZONE_INFORMATION
 0x06

	)

118 
	#COMMAND_SS_IAS_ACE_ARM_RESPONSE
 0x00

	)

119 
	#COMMAND_SS_IAS_ACE_GET_ZONE_ID_MAP_RESPONSE
 0x01

	)

120 
	#COMMAND_SS_IAS_ACE_GET_ZONE_INFORMATION_RESPONSE
 0x02

	)

122 
	#SS_IAS_ACE_ARM_DISARM
 0x00

	)

123 
	#SS_IAS_ACE_ARM_DAY_HOME_ZONES_ONLY
 0x01

	)

124 
	#SS_IAS_ACE_ARM_NIGHT_SLEEP_ZONES_ONLY
 0x02

	)

125 
	#SS_IAS_ACE_ARM_ALL_ZONES
 0x03

	)

127 
	#SS_IAS_ACE_ARM_NOTIFICATION_ALL_ZONES_DISARMED
 0x00

	)

128 
	#SS_IAS_ACE_ARM_NOTIFICATION_DAY_HOME_ZONES_ONLY
 0x01

	)

129 
	#SS_IAS_ACE_ARM_NOTIFICATION_NIGHT_SLEEP_ZONES_ONLY
 0x02

	)

130 
	#SS_IAS_ACE_ARM_NOTIFICATION_ALL_ZONES_ARMED
 0x03

	)

136 
	#ATTRID_SS_IAS_WD_MAXIMUM_DURATION
 0x0000

	)

138 
	#COMMAND_SS_IAS_WD_START_WARNING
 0x00

	)

139 
	#COMMAND_SS_IAS_WD_SQUAWK
 0x01

	)

141 
	#SS_IAS_START_WARNING_WARNING_MODE_STOP
 0

	)

142 
	#SS_IAS_START_WARNING_WARNING_MODE_BURGLAR
 1

	)

143 
	#SS_IAS_START_WARNING_WARNING_MODE_FIRE
 2

	)

144 
	#SS_IAS_START_WARNING_WARNING_MODE_EMERGENCY
 3

	)

146 
	#SS_IAS_START_WARNING_STROBE_NO_STROBE_WARNING
 0

	)

147 
	#SS_IAS_START_WARNING_STROBE_USE_STPOBE_IN_PARALLEL_TO_WARNING
 1

	)

150 
	#SS_IAS_SQUAWK_SQUAWK_MODE_SYSTEM_ALARMED_NOTIFICATION_SOUND
 0

	)

151 
	#SS_IAS_SQUAWK_SQUAWK_MODE_SYSTEM_DISARMED_NOTIFICATION_SOUND
 1

	)

153 
	#SS_IAS_SQUAWK_STROBE_NO_STROBE_SQUAWK
 0

	)

154 
	#SS_IAS_SQUAWK_STROBE_USE_STROBE_BLINK_IN_PARALLEL_TO_SQUAWK
 1

	)

156 
	#SS_IAS_SQUAWK_SQUAWK_LEVEL_LOW_LEVEL_SOUND
 0

	)

157 
	#SS_IAS_SQUAWK_SQUAWK_LEVEL_MEDIUM_LEVEL_SOUND
 1

	)

158 
	#SS_IAS_SQUAWK_SQUAWK_LEVEL_HIGH_LEVEL_SOUND
 2

	)

159 
	#SS_IAS_SQUAWK_SQUAWK_LEVEL_VERY_HIGH_LEVEL_SOUND
 3

	)

162 
	#ZCL_SS_MAX_ZONES
 256

	)

163 
	#ZCL_SS_MAX_ZONE_ID
 254

	)

171 
uöt8
 
z⁄eSètus
;

172 
uöt8
 
exãndedSètus
;

173 } 
	tz˛CmdSSIASZ⁄eSètusCh™geNŸifiˇti⁄_t
;

178 
uöt16
 
z⁄eTy≥
;

179 
uöt16
 
m™uÁ˘uªrCode
;

180 } 
	tz˛CmdSSIASZ⁄eEƒﬁlReque°_t
;

185 
uöt8
 
ª•⁄£Code
;

186 
uöt8
 
z⁄eID
;

187 } 
	tz˛CmdSSIASZ⁄eEƒﬁlRe•⁄£_t
;

192 
uöt8
 
z⁄eID
;

193 
uöt16
 
z⁄eTy≥
;

194 
uöt8
 
z⁄eAddªss
[8];

195 } 
	tIAS_ACE_Z⁄eTabÀ_t
;

198 
uöt8
 
	tz˛CmdSSIASACEArmPaylﬂd_t
;

203 
uöt8
 
numZ⁄es
;

204 
uöt8
 
z⁄eID
[];

205 } 
	tz˛CmdSSIASACEBy∑ssPaylﬂd_t
;

208 
uöt8
 
	tz˛CmdSSIASACEGëZ⁄eInf‹m©i⁄Paylﬂd_t
;

211 
uöt8
 
	tz˛CmdSSIASACEArmRe•⁄£Paylﬂd_t
;

214 
uöt16
 
	tz˛CmdSSIASZ⁄eIDM≠Se˘i⁄_t
[16];

219 
uöt8
 
z⁄eID
;

220 
uöt16
 
z⁄eTy≥
;

221 
uöt8
 *
õìAddªss
;

222 } 
	tz˛CmdSSIASACEGëZ⁄eInf‹m©i⁄Re•⁄£Paylﬂd_t
;

227 
w¨nMode
:4;

228 
w¨nSåobe
:2;

229 
ª£rved
:2;

230 } 
	tw¨nögbôs_t
;

234 
w¨nögbôs_t
 
w¨nögbôs
;

235 
uöt8
 
w¨nögbyã
;

236 } 
	tw¨nög_t
;

240 
w¨nög_t
 
w¨nögmesßge
;

241 
uöt16
 
duøti⁄
;

242 } 
	tz˛CmdSSWDSèπW¨nögPaylﬂd_t
;

247 
squawkMode
:4;

248 
°robe
:1;

249 
ª£rved
:1;

250 
squawkLevñ
:2;

251 } 
	tsquawkbôs_t
;

255 
squawkbôs_t
 
squawkbôs
;

256 
uöt8
 
squawkbyã
;

257 } 
	tz˛CmdSSWDSquawkPaylﬂd_t
;

263 
uöt16
 
z⁄eSètus
;

264 
uöt8
 
exãndedSètus
;

265 } 
	tz˛Z⁄eCh™geNŸif_t
;

269 
afAddrTy≥_t
 *
§cAddr
;

270 
uöt8
 
z⁄eID
;

271 
uöt16
 
z⁄eTy≥
;

272 
uöt16
 
m™uÁ˘uªrCode
;

273 } 
	tz˛Z⁄eEƒﬁlReq_t
;

277 
uöt8
 
ª•⁄£Code
;

278 
uöt8
 
z⁄eID
;

279 } 
	tz˛Z⁄eEƒﬁlR•_t
;

283 
uöt8
 
numbîOfZ⁄es
;

284 
uöt8
 *
by∑ssBuf
;

285 } 
	tz˛ACEBy∑ss_t
;

289 
uöt8
 
z⁄eID
;

290 
uöt16
 
z⁄eTy≥
;

291 
uöt8
 *
õìAddr
;

292 } 
	tz˛ACEGëZ⁄eInfoR•_t
;

296 
w¨nög_t
 
w¨nögs
;

297 
uöt16
 
duøti⁄
;

298 } 
	tz˛WDSèπW¨nög_t
;

304 (*
z˛SS_Ch™geNŸifiˇti⁄_t
)–
	tz˛Z⁄eCh™geNŸif_t
 *
	tpCmd
 );

311 (*
z˛SS_EƒﬁlReque°_t
)–
	tz˛Z⁄eEƒﬁlReq_t
 *
	tpReq
 );

316 (*
z˛SS_EƒﬁlRe•⁄£_t
)–
	tz˛Z⁄eEƒﬁlR•_t
 *
	tpR•
 );

321 
uöt8
 (*
	tz˛SS_ACE_Arm_t
)–
	tuöt8
 
	t¨mMode
 );

326 (*
z˛SS_ACE_By∑ss_t
)–
	tz˛ACEBy∑ss_t
 *
	tpCmd
 );

330 (*
z˛SS_ACE_Emîgícy_t
)( );

334 (*
z˛SS_ACE_Fúe_t
)( );

338 (*
z˛SS_ACE_P™ic_t
)( );

342 (*
z˛SS_ACE_GëZ⁄eIDM≠_t
)( );

346 (*
z˛SS_ACE_GëZ⁄eInf‹m©i⁄_t
)–
	tuöt8
 
	tz⁄eID
 );

350 (*
z˛SS_ACE_ArmRe•⁄£_t
)–
	tuöt8
 
	t¨mNŸifiˇti⁄
 );

354 (*
z˛SS_ACE_GëZ⁄eIDM≠Re•⁄£_t
)–
	tuöt16
 *
	tz⁄eIDM≠
 );

360 (*
z˛SS_ACE_GëZ⁄eInf‹m©i⁄Re•⁄£_t
)–
	tz˛ACEGëZ⁄eInfoR•_t
 *
	tpR•
 );

365 (*
z˛SS_WD_SèπW¨nög_t
)–
	tz˛WDSèπW¨nög_t
 *
	tpCmd
 );

369 (*
z˛SS_WD_Squawk_t
)–
	tz˛CmdSSWDSquawkPaylﬂd_t
 
	tsquawks
 );

376 
z˛SS_Ch™geNŸifiˇti⁄_t
 
p‚Ch™geNŸifiˇti⁄
;

377 
z˛SS_EƒﬁlReque°_t
 
p‚EƒﬁlReque°
;

378 
z˛SS_EƒﬁlRe•⁄£_t
 
p‚EƒﬁlRe•⁄£
;

379 
z˛SS_ACE_Arm_t
 
p‚ACE_Arm
;

380 
z˛SS_ACE_By∑ss_t
 
p‚ACE_By∑ss
;

381 
z˛SS_ACE_Emîgícy_t
 
p‚ACE_Emîgícy
;

382 
z˛SS_ACE_Fúe_t
 
p‚ACE_Fúe
;

383 
z˛SS_ACE_P™ic_t
 
p‚ACE_P™ic
;

386 
z˛SS_ACE_ArmRe•⁄£_t
 
p‚ACE_ArmRe•⁄£
;

387 
z˛SS_ACE_GëZ⁄eIDM≠Re•⁄£_t
 
p‚ACE_GëZ⁄eIDM≠Re•⁄£
;

388 
z˛SS_ACE_GëZ⁄eInf‹m©i⁄Re•⁄£_t
 
p‚ACE_GëZ⁄eInf‹m©i⁄Re•⁄£
;

389 
z˛SS_WD_SèπW¨nög_t
 
p‚WD_SèπW¨nög
;

390 
z˛SS_WD_Squawk_t
 
p‚WD_Squawk
;

392 } 
	tz˛SS_AµCÆlbacks_t
;

399 #ifde‡
ZCL_ACE


405 
	#z˛SS_Síd_IAS_ACE_EmîgícyCmd
(
a
,
b
,
c
,
d
Ë
	`z˛_SídComm™d
–◊), (b), 
ZCL_CLUSTER_ID_SS_IAS_ACE
,\

	)

406 
COMMAND_SS_IAS_ACE_EMERGENCY
, 
TRUE
,\

407 
ZCL_FRAME_CLIENT_SERVER_DIR
, (
c
), 0, (
d
), 0, 
NULL
 )

414 
	#z˛SS_Síd_IAS_ACE_FúeCmd
(
a
,
b
,
c
,
d
Ë
	`z˛_SídComm™d
–◊), (b), 
ZCL_CLUSTER_ID_SS_IAS_ACE
,\

	)

415 
COMMAND_SS_IAS_ACE_FIRE
, 
TRUE
,\

416 
ZCL_FRAME_CLIENT_SERVER_DIR
, (
c
), 0, (
d
), 0, 
NULL
 )

423 
	#z˛SS_Síd_IAS_ACE_P™icCmd
(
a
,
b
,
c
,
d
Ë
	`z˛_SídComm™d
–◊), (b), 
ZCL_CLUSTER_ID_SS_IAS_ACE
,\

	)

424 
COMMAND_SS_IAS_ACE_PANIC
, 
TRUE
,\

425 
ZCL_FRAME_CLIENT_SERVER_DIR
, (
c
), 0, (
d
), 0, 
NULL
 )

432 
	#z˛SS_Síd_IAS_ACE_GëZ⁄eIDM≠Cmd
(
a
,
b
,
c
,
d
Ë
	`z˛_SídComm™d
–◊), (b), 
ZCL_CLUSTER_ID_SS_IAS_ACE
,\

	)

433 
COMMAND_SS_IAS_ACE_GET_ZONE_ID_MAP
, 
TRUE
,\

434 
ZCL_FRAME_CLIENT_SERVER_DIR
, (
c
), 0, (
d
), 0, 
NULL
 )

449 
ZSètus_t
 
z˛SS_Regi°îCmdCÆlbacks
–
uöt8
 
ídpoöt
, 
z˛SS_AµCÆlbacks_t
 *
ˇŒbacks
 );

451 #ifde‡
ZCL_ZONE


457 
ZSètus_t
 
z˛SS_IAS_Síd_Z⁄eSètusCh™geNŸifiˇti⁄Cmd
–
uöt8
 
§cEP
, 
afAddrTy≥_t
 *
d°Addr
,

458 
uöt16
 
z⁄eSètus
, 
uöt8
 
exãndedSètus
,

459 
uöt8
 
dißbÀDeÁu…R•
, uöt8 
£qNum
 );

466 
ZSètus_t
 
z˛SS_IAS_Síd_Z⁄eSètusEƒﬁlReque°Cmd
–
uöt8
 
§cEP
, 
afAddrTy≥_t
 *
d°Addr
,

467 
uöt16
 
z⁄eTy≥
, uöt16 
m™uÁ˘uªrCode
,

468 
uöt8
 
dißbÀDeÁu…R•
, uöt8 
£qNum
 );

475 
ZSètus_t
 
z˛SS_IAS_Síd_Z⁄eSètusEƒﬁlRe•⁄£Cmd
–
uöt8
 
§cEP
, 
afAddrTy≥_t
 *
d°Addr
,

476 
uöt8
 
ª•⁄£Code
, uöt8 
z⁄eID
,

477 
uöt8
 
dißbÀDeÁu…R•
, uöt8 
£qNum
 );

480 #ifde‡
ZCL_ACE


485 
ZSètus_t
 
z˛SS_Síd_IAS_ACE_ArmCmd
–
uöt8
 
§cEP
, 
afAddrTy≥_t
 *
d°Addr
,

486 
uöt8
 
¨mMode
, uöt8 
dißbÀDeÁu…R•
, uöt8 
£qNum
 );

493 
ZSètus_t
 
z˛SS_Síd_IAS_ACE_By∑ssCmd
–
uöt8
 
§cEP
, 
afAddrTy≥_t
 *
d°Addr
,

494 
uöt8
 
numbîOfZ⁄es
, uöt8 *
by∑ssBuf
,

495 
uöt8
 
dißbÀDeÁu…R•
, uöt8 
£qNum
 );

501 
ZSètus_t
 
z˛SS_Síd_IAS_ACE_GëZ⁄eInf‹m©i⁄Cmd
–
uöt8
 
§cEP
, 
afAddrTy≥_t
 *
d°Addr
,

502 
uöt8
 
z⁄eID
, uöt8 
dißbÀDeÁu…R•
, uöt8 
£qNum
 );

507 
ZSètus_t
 
z˛SS_Síd_IAS_ACE_ArmRe•⁄£
–
uöt8
 
§cEP
, 
afAddrTy≥_t
 *
d°Addr
,

508 
uöt8
 
¨mNŸifiˇti⁄
, uöt8 
dißbÀDeÁu…R•
, uöt8 
£qNum
 );

514 
ZSètus_t
 
z˛SS_Síd_IAS_ACE_GëZ⁄eIDM≠Re•⁄£Cmd
–
uöt8
 
§cEP
, 
afAddrTy≥_t
 *
d°Addr
,

515 
uöt16
 *
z⁄eIDM≠
, 
uöt8
 
dißbÀDeÁu…R•
, uöt8 
£qNum
 );

523 
ZSètus_t
 
z˛SS_Síd_IAS_ACE_GëZ⁄eInf‹m©i⁄Re•⁄£Cmd
–
uöt8
 
§cEP
, 
afAddrTy≥_t
 *
d°Addr
,

524 
uöt8
 
z⁄eID
, 
uöt16
 
z⁄eTy≥
, uöt8 *
õìAddªss
,

525 
uöt8
 
dißbÀDeÁu…R•
, uöt8 
£qNum
 );

528 #ifde‡
ZCL_WD


533 
ZSètus_t
 
z˛SS_Síd_IAS_WD_SèπW¨nögCmd
–
uöt8
 
§cEP
, 
afAddrTy≥_t
 *
d°Addr
,

534 
z˛CmdSSWDSèπW¨nögPaylﬂd_t
 *
w¨nög
,

535 
uöt8
 
dißbÀDeÁu…R•
, uöt8 
£qNum
 );

541 
ZSètus_t
 
z˛SS_Síd_IAS_WD_SquawkCmd
–
uöt8
 
§cEP
, 
afAddrTy≥_t
 *
d°Addr
,

542 
z˛CmdSSWDSquawkPaylﬂd_t
 *
squawk
,

543 
uöt8
 
dißbÀDeÁu…R•
, uöt8 
£qNum
 );

546 #i‡
deföed
(
ZCL_ZONE
Ë|| deföed(
ZCL_ACE
)

551 
z˛SS_Upd©eZ⁄eAddªss
–
uöt8
 
ídpoöt
, uöt8 
z⁄eID
, uöt8 *
õìAddr
 );

558 
uöt8
 
z˛SS_RemoveZ⁄e
–uöt8 
ídpoöt
, uöt8 
z⁄eID
 );

564 #ifde‡
__˝lu•lus


	@Components/stack/zdo/ZDApp.c

44 
	~"ZComDef.h
"

45 
	~"ZMac.h
"

46 
	~"OSAL.h
"

47 
	~"OSAL_Tasks.h
"

48 
	~"OSAL_PwrMgr.h
"

49 
	~"OSAL_Nv.h
"

50 
	~"AF.h
"

51 
	~"APSMEDE.h
"

52 
	~"NLMEDE.h
"

53 
	~"AddrMgr.h
"

54 
	~"ZDProfûe.h
"

55 
	~"ZDObje˘.h
"

56 
	~"ZDC⁄fig.h
"

57 
	~"ZDSecMgr.h
"

58 
	~"ZDAµ.h
"

59 
	~"DebugTø˚.h
"

60 
	~"nwk_utû.h
"

61 
	~"OnBﬂrd.h
"

62 
	~"ZGlobÆs.h
"

63 
	~"ZDNwkMgr.h
"

64 
	~"πg.h
"

66 
	~"s•.h
"

68 #i‡
deföed
–
MT_ZDO_FUNC
 )

69 
	~"MT_ZDO.h
"

73 
	~"hÆ_Àd.h
"

74 
	~"hÆ_lcd.h
"

75 
	~"hÆ_key.h
"

77 #i‡
deföed
–
MT_MAC_FUNC
 ) || deföed–
MT_MAC_CB_FUNC
 )

87 #i‡!
deföed
–
NWK_START_DELAY
 )

88 
	#NWK_START_DELAY
 100

90 

	)

91 #i‡!
deföed
–
EXTENDED_JOINING_RANDOM_MASK
 )

92 
	#EXTENDED_JOINING_RANDOM_MASK
 0x007F

	)

95 #i‡!
deföed
–
BEACON_REQUEST_DELAY
 )

96 
	#BEACON_REQUEST_DELAY
 100

98 

	)

99 #i‡!
deföed
–
BEACON_REQ_DELAY_MASK
 )

100 
	#BEACON_REQ_DELAY_MASK
 0x007F

	)

103 
	#MAX_RESUME_RETRY
 3

	)

105 
	#MAX_DEVICE_UNAUTH_TIMEOUT
 5000

106 

	)

108 
	#DEFAULT_BEACON_ORDER
 
BEACON_ORDER_NO_BEACONS


	)

109 
	#DEFAULT_SUPERFRAME_ORDER
 
DEFAULT_BEACON_ORDER


	)

111 #i‡!
deföed
–
MAX_NWK_FRAMECOUNTER_CHANGES
 )

114 
	#MAX_NWK_FRAMECOUNTER_CHANGES
 1000

	)

118 
	#ZDAPP_LEAVE_CTRL_INIT
 0

	)

119 
	#ZDAPP_LEAVE_CTRL_SET
 1

	)

120 
	#ZDAPP_LEAVE_CTRL_RA
 2

	)

123 
	#ZDAPP_UPDATE_NWK_NV_TIME
 700

	)

126 
	#ZDAµ_NwkWrôeNVReque°
 
AddrMgrWrôeNVReque°


	)

136 #i‡
deföed
–
LCD_SUPPORTED
 )

137 
uöt8
 
	gM©chR•s
 = 0;

140 
uöt8
 
	gzdoDiscCou¡î
 = 1;

142 
zAddrTy≥_t
 
	gZDAµNwkAddr
;

144 
uöt8
 
	gzd≠pMgmtNwkDiscR•TønsSeq
;

145 
uöt8
 
	gzd≠pMgmtNwkDiscReqInProgªss
 = 
FALSE
;

146 
zAddrTy≥_t
 
	gzd≠pMgmtNwkDiscR•Addr
;

147 
uöt8
 
	gzd≠pMgmtNwkDiscSèπIndex
;

148 
uöt8
 
	gzd≠pMgmtSavedNwkSèã
;

150 
uöt16
 
	gnwkFømeCou¡îCh™ges
 = 0;

151 
uöt8
 
	gc⁄töueJoöög
 = 
TRUE
;

153 
uöt8
 
	g_tmpRejoöSèã
;

156 
uöt8
 
	gZDO_U£ExãndedPANID
[
Z_EXTADDR_LEN
];

170 
ZDAµ_Nëw‹kSèπEvt
( );

171 
ZDAµ_Devi˚AuthEvt
( );

172 
ZDAµ_SaveNëw‹kSèãEvt
( );

174 
uöt8
 
ZDAµ_RódNëw‹kRe°‹eSèã
( );

175 
uöt8
 
ZDAµ_Re°‹eNëw‹kSèã
( );

176 
ZDAµDëîmöeDevi˚Ty≥
( );

177 
ZDAµ_InôU£rDesc
( );

178 
ZDAµCheckF‹HﬁdKey
( );

179 
ZDAµ_Pro˚ssOSALMsg
–
oßl_evít_hdr_t
 *
msgPå
 );

180 
ZDAµ_Pro˚ssNëw‹kJoö
( );

181 
ZDAµ_SëCo‹dAddªss
–
uöt8
 
ídPoöt
, uöt8 
d°EP
 );

182 
ZDAµ_SaveNwkKey
( );

183 
uöt8
 
ZDAµ_Re°‹eNwkKey
( );

185 
ZDAµ_SecInô
–
uöt8
 
°©e
 );

186 
UINT16
 
ZDAµ_Pro˚ssSecEvít
–
uöt8
 
èsk_id
, UINT16 
evíts
 );

187 
ZDAµ_Pro˚ssSecMsg
–
oßl_evít_hdr_t
 *
msgPå
 );

189 
ZDAµ_SídMsg
–
uöt8
 
èskID
, uöt8 
cmd
, uöt8 
Àn
, uöt8 *
buf
 );

191 
ZDAµ_Re£tTimîSèπ
–
uöt16
 
dñay
 );

192 
ZDAµ_Re£tTimîC™˚l
( );

193 
ZDAµ_LóveCålInô
( );

194 
ZDAµ_LóveCålSë
–
uöt8
 
ø
 );

195 
uöt8
 
ZDAµ_LóveCålBy∑ss
( );

196 
ZDAµ_LóveCålSèπup
–
devSèãs_t
* 
°©e
, 
uöt16
* 
°¨tDñay
 );

197 
ZDAµ_LóveRe£t
–
uöt8
 
ø
 );

198 
ZDAµ_LóveUpd©e
–
uöt16
 
nwkAddr
, 
uöt8
* 
extAddr
,

199 
uöt8
 
ªmoveChûdªn
 );

200 
ZDAµ_NodeProfûeSync
–
ZDO_Nëw‹kDiscovîyCfm_t
* 
cfm
 );

201 
ZDAµ_Pro˚ssMsgCBs
–
zdoIncomögMsg_t
 *
öMsg
 );

202 
ZDAµ_Regi°îCBs
( );

208 
uöt8
 
	gZDAµTaskID
;

209 
uöt8
 
	gnwkSètus
;

210 
ídPoötDesc_t
 *
	gZDAµ_AutoFödMode_ïDesc
 = (ídPoötDesc_à*)
NULL
;

211 
uöt8
 
	gZDAµ_LóveCål
;

213 #i‡
deföed
–
HOLD_AUTO_START
 )

214 
devSèãs_t
 
	gdevSèã
 = 
DEV_HOLD
;

216 
devSèãs_t
 
	gdevSèã
 = 
DEV_INIT
;

219 #i‡–
ZG_BUILD_RTRONLY_TYPE
 ) || ( 
ZG_BUILD_ENDDEVICE_TYPE
 )

220 
devSèπModes_t
 
	gdevSèπMode
 = 
MODE_JOIN
;

225 
devSèπModes_t
 
	gdevSèπMode
 = 
MODE_HARD
;

228 
uöt8
 
	gªåyC¡
;

230 
ídPoötDesc_t
 
	gZDAµ_ïDesc
 =

232 
ZDO_EP
,

233 &
ZDAµTaskID
,

234 (
Sim∂eDes¸ùti⁄F‹m©_t
 *)
NULL
,

235 (
afNëw‹kL©ícyReq_t
)0

238 
uöt16
 
	gZDAµ_SavedPﬁlR©e
 = 
POLL_RATE
;

249 
	$ZDAµ_Inô
–
uöt8
 
èsk_id
 )

252 
ZDAµTaskID
 = 
èsk_id
;

255 
ZDAµNwkAddr
.
addrMode
 = 
Addr16Bô
;

256 
ZDAµNwkAddr
.
addr
.
sh‹tAddr
 = 
INVALID_NODE_ADDR
;

257 ()
	`NLME_GëExtAddr
();

260 
	`ZDAµCheckF‹HﬁdKey
();

263 
	`ZDO_Inô
();

268 
	`afRegi°î
–(
ídPoötDesc_t
 *)&
ZDAµ_ïDesc
 );

270 #i‡
	`deföed
–
ZDO_USERDESC_RESPONSE
 )

271 
	`ZDAµ_InôU£rDesc
();

275 i‡–
devSèã
 !
DEV_HOLD
 )

277 
	`ZDOInôDevi˚
( 0 );

282 
	`HÆLedBlök
 ( 
HAL_LED_4
, 0, 50, 500 );

285 
	`ZDAµ_Regi°îCBs
();

286 
	}
}

297 
	$ZDAµ_SecInô
–
uöt8
 
°©e
 )

299 i‡–
ZG_SECURE_ENABLED
 && 
ZG_BUILD_COORDINATOR_TYPE
 && 
ZG_DEVICE_COORDINATOR_TYPE
 )

302 
ZDO_C⁄fig_Node_Des¸ùt‹
.
SîvîMask
 |
PRIM_TRUST_CENTER
;

305 i‡–
ZG_CHECK_SECURITY_MODE
 =
ZG_SECURITY_PRO_HIGH
 )

307 
ZDO_C⁄fig_Node_Des¸ùt‹
.
C≠abûôyFœgs
 |
CAPINFO_SECURITY_CAPABLE
;

311 
	`ZDSecMgrInô
();

313 i‡–
ZG_SECURE_ENABLED
 )

315 i‡–
°©e
 !
ZDO_INITDEV_RESTORED_NETWORK_STATE
 )

317 
nwkFømeCou¡î
 = 0;

319 if–
_NIB
.
nwkKeyLﬂded
 =
FALSE
 )

321 i‡––
ZG_BUILD_COORDINATOR_TYPE
 && 
ZG_DEVICE_COORDINATOR_TYPE
 ) ||

322 ––
zgSecurôyMode
 =
ZG_SECURITY_RESIDENTIAL
 ) && 
zgPªC⁄figKeys
 ) )

324 
	`SSP_Upd©eNwkKey
–(
byã
*)
zgPªC⁄figKey
, 0);

325 
	`SSP_SwôchNwkKey
( 0 );

330 
	}
}

343 
UINT16
 
	$ZDAµ_evít_lo›
–
uöt8
 
èsk_id
, 
UINT16
 
evíts
 )

345 
uöt8
 *
msg_±r
;

347 i‡–
evíts
 & 
SYS_EVENT_MSG
 )

349  (
msg_±r
 = 
	`oßl_msg_ª˚ive
–
ZDAµTaskID
 )) )

351 
	`ZDAµ_Pro˚ssOSALMsg
–(
oßl_evít_hdr_t
 *)
msg_±r
 );

354 
	`oßl_msg_dóŒoˇã
–
msg_±r
 );

358  (
evíts
 ^ 
SYS_EVENT_MSG
);

361 i‡–
evíts
 & 
ZDO_NETWORK_INIT
 )

364 
devSèã
 = 
DEV_INIT
;

365 
	`ZDO_SèπDevi˚
–(
uöt8
)
ZDO_C⁄fig_Node_Des¸ùt‹
.
LogiˇlTy≥
, 
devSèπMode
,

366 
DEFAULT_BEACON_ORDER
, 
DEFAULT_SUPERFRAME_ORDER
 );

369  (
evíts
 ^ 
ZDO_NETWORK_INIT
);

372 i‡–
ZSTACK_ROUTER_BUILD
 )

374 i‡–
evíts
 & 
ZDO_NETWORK_START
 )

376 
	`ZDAµ_Nëw‹kSèπEvt
();

379  (
evíts
 ^ 
ZDO_NETWORK_START
);

382 i‡–
evíts
 & 
ZDO_ROUTER_START
 )

384 i‡–
nwkSètus
 =
ZSuc˚ss
 )

386 i‡–
devSèã
 =
DEV_END_DEVICE
 )

387 
devSèã
 = 
DEV_ROUTER
;

389 
	`oßl_pwrmgr_devi˚
–
PWRMGR_ALWAYS_ON
 );

395 
	`oßl_£t_evít
–
ZDAµTaskID
, 
ZDO_STATE_CHANGE_EVT
 );

398  (
evíts
 ^ 
ZDO_ROUTER_START
);

402 i‡–
evíts
 & 
ZDO_STATE_CHANGE_EVT
 )

404 
	`ZDO_Upd©eNwkSètus
–
devSèã
 );

407  (
evíts
 ^ 
ZDO_STATE_CHANGE_EVT
);

410 i‡–
evíts
 & 
ZDO_COMMAND_CNF
 )

415  (
evíts
 ^ 
ZDO_COMMAND_CNF
);

418 i‡–
evíts
 & 
ZDO_NWK_UPDATE_NV
 )

420 
	`ZDAµ_SaveNëw‹kSèãEvt
();

423  (
evíts
 ^ 
ZDO_NWK_UPDATE_NV
);

426 i‡–
evíts
 & 
ZDO_DEVICE_RESET
 )

430 
	`Sy°emRe£t
();

433 i‡–
ZG_SECURE_ENABLED
 )

435  ( 
	`ZDAµ_Pro˚ssSecEvít
–
èsk_id
, 
evíts
 ) );

442 
	}
}

454 
UINT16
 
	$ZDAµ_Pro˚ssSecEvít
–
uöt8
 
èsk_id
, 
UINT16
 
evíts
 )

456 ()
èsk_id
;

458 i‡–
ZSTACK_ROUTER_BUILD
 )

460 i‡–
evíts
 & 
ZDO_NEW_DEVICE
 )

463 i‡–
	`ZDSecMgrNewDevi˚Evít
(Ë=
TRUE
 )

465 
	`oßl_°¨t_timîEx
–
ZDAµTaskID
, 
ZDO_NEW_DEVICE
, 1000 );

469  (
evíts
 ^ 
ZDO_NEW_DEVICE
);

473 i‡–(
ZG_CHECK_SECURITY_MODE
 =
ZG_SECURITY_PRO_HIGH
)

474 || (
ZG_CHECK_SECURITY_MODE
 =
ZG_SECURITY_SE_STANDARD
) )

476 i‡–
ZG_BUILD_COORDINATOR_TYPE
 && 
ZG_DEVICE_COORDINATOR_TYPE
 )

478 i‡–
evíts
 & 
ZDO_SECMGR_EVENT
 )

480 
	`ZDSecMgrEvít
();

483  (
evíts
 ^ 
ZDO_SECMGR_EVENT
);

488 i‡–
evíts
 & 
ZDO_DEVICE_AUTH
 )

490 
	`ZDAµ_Devi˚AuthEvt
();

493  (
evíts
 ^ 
ZDO_DEVICE_AUTH
);

496 i‡–
evíts
 & 
ZDO_FRAMECOUNTER_CHANGE
 )

498 i‡–
nwkFømeCou¡îCh™ges
++ > 
MAX_NWK_FRAMECOUNTER_CHANGES
 )

499 
	`ZDAµ_SaveNwkKey
();

502  (
evíts
 ^ 
ZDO_FRAMECOUNTER_CHANGE
);

507 
	}
}

543 
uöt8
 
	$ZDOInôDevi˚
–
uöt16
 
°¨tDñay
 )

545 
uöt8
 
√tw‹kSèãNV
 = 
ZDO_INITDEV_NEW_NETWORK_STATE
;

546 
uöt16
 
exãndedDñay
 = 0;

548 i‡–
devSèã
 =
DEV_HOLD
 )

551 
	`zgInôIãms
–
FALSE
 );

554 
	`ZDC⁄fig_InôDes¸ùt‹s
();

556 
_NIB
.
C≠abûôyInfo
 = 
ZDO_C⁄fig_Node_Des¸ùt‹
.
C≠abûôyFœgs
;

558 
devSèã
 = 
DEV_INIT
;

561 
	`ZDAµ_LóveCålInô
();

564 
	`ZDAµ_LóveCålSèπup
–&
devSèã
, &
°¨tDñay
 );

567 i‡–
devSèã
 =
DEV_HOLD
 )

568  ( 
ZDO_INITDEV_LEAVE_NOT_STARTED
 );

570 #i‡
	`deföed
 ( 
NV_RESTORE
 )

574 i‡–
	`HÆKeyRód
(Ë=
SW_BYPASS_NV
 )

575 
√tw‹kSèãNV
 = 
ZDO_INITDEV_NEW_NETWORK_STATE
;

579 
√tw‹kSèãNV
 = 
	`ZDAµ_RódNëw‹kRe°‹eSèã
();

582 i‡–
√tw‹kSèãNV
 =
ZDO_INITDEV_RESTORED_NETWORK_STATE
 )

584 
√tw‹kSèãNV
 = 
	`ZDAµ_Re°‹eNëw‹kSèã
();

589 
	`NLME_InôNV
();

590 
	`NLME_SëDeÁu…NV
();

594 i‡–
√tw‹kSèãNV
 =
ZDO_INITDEV_NEW_NETWORK_STATE
 )

596 
	`ZDAµDëîmöeDevi˚Ty≥
();

599 
exãndedDñay
 = (
uöt16
)((
NWK_START_DELAY
 + 
°¨tDñay
)

600 + (
	`oßl_ønd
(Ë& 
EXTENDED_JOINING_RANDOM_MASK
));

604 
	`ZDAµ_SecInô
–
√tw‹kSèãNV
 );

607 
	`ZDAµ_Nëw‹kInô
–
exãndedDñay
 );

610 
	`NLME_SëBrﬂdˇ°Fûãr
–
ZDO_C⁄fig_Node_Des¸ùt‹
.
C≠abûôyFœgs
 );

612  ( 
√tw‹kSèãNV
 );

613 
	}
}

630 
uöt8
 
	$ZDAµ_RódNëw‹kRe°‹eSèã
( )

632 
uöt8
 
√tw‹kSèãNV
 = 
ZDO_INITDEV_RESTORED_NETWORK_STATE
;

635 i‡–
	`zgRódSèπupO±i⁄s
(Ë& 
ZCD_STARTOPT_DEFAULT_NETWORK_STATE
 )

637 
√tw‹kSèãNV
 = 
ZDO_INITDEV_NEW_NETWORK_STATE
;

640  ( 
√tw‹kSèãNV
 );

641 
	}
}

658 
	$ZDAµDëîmöeDevi˚Ty≥
( )

660 i‡–
zgDevi˚LogiˇlTy≥
 =
ZG_DEVICETYPE_COORDINATOR
 )

662 
devSèπMode
 = 
MODE_HARD
;

663 
ZDO_C⁄fig_Node_Des¸ùt‹
.
LogiˇlTy≥
 = 
NODETYPE_COORDINATOR
;

667 i‡–
zgDevi˚LogiˇlTy≥
 =
ZG_DEVICETYPE_ROUTER
 )

668 
ZDO_C⁄fig_Node_Des¸ùt‹
.
LogiˇlTy≥
 = 
NODETYPE_ROUTER
;

669 i‡–
zgDevi˚LogiˇlTy≥
 =
ZG_DEVICETYPE_ENDDEVICE
 )

670 
ZDO_C⁄fig_Node_Des¸ùt‹
.
LogiˇlTy≥
 = 
NODETYPE_DEVICE
;

674 i‡–
	`nwk_ExtPANIDVÆid
–
AIB_≠sU£ExãndedPANID
 ) =
Ál£
 )

676 
devSèπMode
 = 
MODE_JOIN
;

680 
devSèπMode
 = 
MODE_REJOIN
;

683 
	}
}

694 
	$ZDAµ_Nëw‹kSèπEvt
( )

696 i‡–
nwkSètus
 =
ZSuc˚ss
 )

699 i‡–
devSèã
 =
DEV_COORD_STARTING
 )

701 
devSèã
 = 
DEV_ZB_COORD
;

704 
	`oßl_pwrmgr_devi˚
–
PWRMGR_ALWAYS_ON
 );

705 
	`oßl_£t_evít
–
ZDAµTaskID
, 
ZDO_STATE_CHANGE_EVT
 );

710 i‡––
	`NLME_GëE√rgyThªshﬁd
(Ë+ 
ENERGY_SCAN_INCREMENT
 ) < 0xff )

712 
	`NLME_SëE√rgyThªshﬁd
–(
uöt8
)(
	`NLME_GëE√rgyThªshﬁd
(Ë+ 
ENERGY_SCAN_INCREMENT
) );

713 
	`oßl_£t_evít
–
ZDAµTaskID
, 
ZDO_NETWORK_INIT
 );

718 
devSèã
 = 
DEV_INIT
;

719 
	`oßl_£t_evít
–
ZDAµTaskID
, 
ZDO_STATE_CHANGE_EVT
 );

722 
	}
}

733 
	$ZDAµ_Devi˚AuthEvt
( )

736 i‡–
devSèã
 =
DEV_END_DEVICE_UNAUTH
 )

739 
	`ZDAµ_Re£tTimîC™˚l
();

741 
devSèã
 = 
DEV_END_DEVICE
;

742 
	`oßl_£t_evít
–
ZDAµTaskID
, 
ZDO_STATE_CHANGE_EVT
 );

745 #i‡
	`deföed
 ( 
POWER_SAVING
 )

746 
	`oßl_pwrmgr_devi˚
–
PWRMGR_BATTERY
 );

749 i‡–
ZSTACK_ROUTER_BUILD
 )

751 i‡–
ZDO_C⁄fig_Node_Des¸ùt‹
.
LogiˇlTy≥
 !
NODETYPE_DEVICE
 )

754 
	`NLME_SèπRouãrReque°
–0, 0, 
Ál£
 );

759 
	`ZDAµ_NVUpd©e
();

762 
	`ZDAµ_SaveNwkKey
();

764 
	`ZDAµ_A¬oun˚NewAddªss
();

766 i‡–(
ZDO_C⁄fig_Node_Des¸ùt‹
.
C≠abûôyFœgs
 & 
CAPINFO_RCVR_ON_IDLE
) == 0 )

768 
	`NLME_SëPﬁlR©e
–
ZDAµ_SavedPﬁlR©e
 );

773 
	`ZDAµ_NVUpd©e
();

775 
	}
}

786 
	$ZDAµ_SaveNëw‹kSèãEvt
( )

788 #i‡
	`deföed
 ( 
NV_RESTORE
 )

789 #i‡
	`deföed
 ( 
NV_TURN_OFF_RADIO
 )

791 
uöt8
 
RxOnIdÀ
;

792 
uöt8
 
x
 = 
Ál£
;

793 
	`ZMacGëReq
–
ZMacRxOnIdÀ
, &
RxOnIdÀ
 );

794 
	`ZMacSëReq
–
ZMacRxOnIdÀ
, &
x
 );

798 
	`NLME_Upd©eNV
–
NWK_NV_NIB_ENABLE
 |

799 
NWK_NV_DEVICELIST_ENABLE
 |

800 
NWK_NV_BINDING_ENABLE
 |

801 
NWK_NV_ADDRMGR_ENABLE
 );

805 
	`zgWrôeSèπupO±i⁄s
–
FALSE
, 
ZCD_STARTOPT_DEFAULT_NETWORK_STATE
 );

807 #i‡
	`deföed
 ( 
NV_TURN_OFF_RADIO
 )

808 
	`ZMacSëReq
–
ZMacRxOnIdÀ
, &
RxOnIdÀ
 );

811 
	}
}

829 
uöt8
 
	$ZDAµ_Re°‹eNëw‹kSèã
( )

831 
uöt8
 
nvSèt
;

832 
nwkA˘iveKeyIãms
 
keyIãms
;

835 
nvSèt
 = 
	`NLME_InôNV
();

837 i‡–
nvSèt
 !
NV_OPER_FAILED
 )

839 i‡–
	`NLME_Re°‹eFromNV
() )

842 
ZDAµNwkAddr
.
addr
.
sh‹tAddr
 = 
	`NLME_GëSh‹tAddr
();

843 i‡–
ZDAµNwkAddr
.
addr
.
sh‹tAddr
 == 0 )

844 
ZDO_C⁄fig_Node_Des¸ùt‹
.
LogiˇlTy≥
 = 
NODETYPE_COORDINATOR
;

845 
devSèπMode
 = 
MODE_RESUME
;

846 
	`oßl_˝yExtAddr
–
ZDO_U£ExãndedPANID
, 
_NIB
.
exãndedPANID
 );

849 
nvSèt
 = 
NV_ITEM_UNINIT
;

851 i‡–
ZG_SECURE_ENABLED
 )

853 
nwkFømeCou¡îCh™ges
 = 0;

854 
	`oßl_mem£t
–&
keyIãms
, 0, –
nwkA˘iveKeyIãms
 ) );

855 
	`oßl_nv_ôem_öô
–
ZCD_NV_NWKKEY
, (
nwkA˘iveKeyIãms
), (*)&
keyIãms
 );

857 i‡–
ZG_BUILD_COORDINATOR_TYPE
 && 
ZG_DEVICE_COORDINATOR_TYPE
 )

859 
	`ZDAµ_Re°‹eNwkKey
();

868 i‡–
nvSèt
 =
ZSUCCESS
 )

869  ( 
ZDO_INITDEV_RESTORED_NETWORK_STATE
 );

871  ( 
ZDO_INITDEV_NEW_NETWORK_STATE
 );

872 
	}
}

885 
	$ZDAµ_InôU£rDesc
( )

887 
U£rDes¸ùt‹F‹m©_t
 
ZDO_DeÁu…U£rDes¸ùt‹
;

892 
	`oßl_mem£t
–&
ZDO_DeÁu…U£rDes¸ùt‹
, 0, –
U£rDes¸ùt‹F‹m©_t
 ) );

893 i‡–
ZSUCCESS
 =
	`oßl_nv_ôem_öô
–
ZCD_NV_USERDESC
,

894 (
U£rDes¸ùt‹F‹m©_t
), (*)&
ZDO_DeÁu…U£rDes¸ùt‹
 ) )

896 i‡–
ZSUCCESS
 =
	`oßl_nv_ªad
–
ZCD_NV_USERDESC
, 0,

897 (
U£rDes¸ùt‹F‹m©_t
), (*)&
ZDO_DeÁu…U£rDes¸ùt‹
 ) )

899 i‡–
ZDO_DeÁu…U£rDes¸ùt‹
.
Àn
 != 0 )

901 
ZDO_C⁄fig_Node_Des¸ùt‹
.
U£rDescAvaû
 = 
TRUE
;

905 
	}
}

916 
	$ZDAµCheckF‹HﬁdKey
( )

918 #i‡(
deföed
 
HAL_KEY
Ë&& (HAL_KEY =
TRUE
)

922 i‡–
	`HÆKeyRód
 (Ë=
SW_BYPASS_START
)

925 
devSèã
 = 
DEV_HOLD
;

928 
	}
}

939 
	$ZDAµ_Pro˚ssOSALMsg
–
oßl_evít_hdr_t
 *
msgPå
 )

942 
uöt8
 
£¡EP
;

943 
uöt8
 
£¡Sètus
;

944 
afD©aC⁄fúm_t
 *
afD©aC⁄fúm
;

945 
uöt8
 
tmp
;

947  
msgPå
->
evít
 )

950 
AF_INCOMING_MSG_CMD
:

951 
	`ZDP_IncomögD©a
–(
afIncomögMSGPackë_t
 *)
msgPå
 );

954 
ZDO_CB_MSG
:

955 
	`ZDAµ_Pro˚ssMsgCBs
–(
zdoIncomögMsg_t
 *)
msgPå
 );

958 
AF_DATA_CONFIRM_CMD
:

962 
afD©aC⁄fúm
 = (
afD©aC⁄fúm_t
 *)
msgPå
;

963 
£¡EP
 = 
afD©aC⁄fúm
->
ídpoöt
;

964 
£¡Sètus
 = 
afD©aC⁄fúm
->
hdr
.
°©us
;

967 #i‡
	`deföed
 ( 
ZIGBEE_FREQ_AGILITY
 )

968 i‡–
pZDNwkMgr_Pro˚ssD©aC⁄fúm
 )

969 
	`pZDNwkMgr_Pro˚ssD©aC⁄fúm
–
afD©aC⁄fúm
 );

971 ()
£¡EP
;

972 ()
£¡Sètus
;

975 
ZDO_NWK_DISC_CNF
:

976 i‡(
devSèã
 !
DEV_NWK_DISC
)

979 i‡–
ZG_BUILD_JOINING_TYPE
 && 
ZG_DEVICE_JOINING_TYPE
 )

981 i‡–(((
ZDO_Nëw‹kDiscovîyCfm_t
 *)
msgPå
)->
hdr
.
°©us
 =
ZDO_SUCCESS
Ë&& (
zdoDiscCou¡î
 > 
NUM_DISC_ATTEMPTS
) )

983 i‡–
devSèπMode
 =
MODE_JOIN
 )

985 
devSèã
 = 
DEV_NWK_JOINING
;

987 
	`ZDAµ_NodeProfûeSync
((
ZDO_Nëw‹kDiscovîyCfm_t
 *)
msgPå
);

989 i‡–
	`NLME_JoöReque°
–((
ZDO_Nëw‹kDiscovîyCfm_t
 *)
msgPå
)->
exãndedPANID
,

990 
	`BUILD_UINT16
–((
ZDO_Nëw‹kDiscovîyCfm_t
 *)
msgPå
)->
∑nIdLSB
, ((ZDO_Nëw‹kDiscovîyCfm_à*)msgPå)->
∑nIdMSB
 ),

991 ((
ZDO_Nëw‹kDiscovîyCfm_t
 *)
msgPå
)->
logiˇlCh™√l
,

992 
ZDO_C⁄fig_Node_Des¸ùt‹
.
C≠abûôyFœgs
 ) !
ZSuc˚ss
 )

994 
	`ZDAµ_Nëw‹kInô
–(
uöt16
)(
NWK_START_DELAY


995 + ((
uöt16
)(
	`oßl_ønd
()& 
EXTENDED_JOINING_RANDOM_MASK
))) );

998 i‡–
devSèπMode
 =
MODE_REJOIN
 )

1000 
devSèã
 = 
DEV_NWK_REJOIN
;

1004 i‡–
_NIB
.
nwkDevAddªss
 =
INVALID_NODE_ADDR
 )

1006 
_NIB
.
nwkDevAddªss
 = 
	`oßl_ønd
();

1007 
	`ZMacSëReq
–
ZMacSh‹tAddªss
, (
byã
*)&
_NIB
.
nwkDevAddªss
 );

1011 i‡–
_NIB
.
nwkP™Id
 =
INVALID_PAN_ID
 )

1013 
_NIB
.
nwkP™Id
 = 
	`BUILD_UINT16
–((
ZDO_Nëw‹kDiscovîyCfm_t
 *)
msgPå
)->
∑nIdLSB
, ((ZDO_Nëw‹kDiscovîyCfm_à*)msgPå)->
∑nIdMSB
 );

1014 
	`ZMacSëReq
–
ZMacP™Id
, (
byã
*)&(
_NIB
.
nwkP™Id
) );

1017 
tmp
 = 
åue
;

1018 
	`ZMacSëReq
–
ZMacRxOnIdÀ
, &
tmp
 );

1019 i‡–
	`NLME_ReJoöReque°
–
ZDO_U£ExãndedPANID
, ((
ZDO_Nëw‹kDiscovîyCfm_t
 *)
msgPå
)->
logiˇlCh™√l
Ë!
ZSuc˚ss
 )

1021 
	`ZDAµ_Nëw‹kInô
–(
uöt16
)(
NWK_START_DELAY


1022 + ((
uöt16
)(
	`oßl_ønd
()& 
EXTENDED_JOINING_RANDOM_MASK
))) );

1026 i‡–
ZDO_C⁄fig_Node_Des¸ùt‹
.
C≠abûôyFœgs
 & 
CAPINFO_RCVR_ON_IDLE
 )

1029 
	`NLME_SëPﬁlR©e
( 0 );

1030 
	`NLME_SëQueuedPﬁlR©e
( 0 );

1031 
	`NLME_SëRe•⁄£R©e
( 0 );

1035 i‡–(
ZG_SECURE_ENABLED
Ë&& (
devSèπMode
 =
MODE_JOIN
) )

1037 
ZDAµ_SavedPﬁlR©e
 = 
zgPﬁlR©e
;

1038 
	`NLME_SëPﬁlR©e
–
zgRejoöPﬁlR©e
 );

1044 i‡–
c⁄töueJoöög
 )

1046 #i‡
	`deföed
 ( 
MANAGED_SCAN
 )

1047 
	`ZDAµ_Nëw‹kInô
–
MANAGEDSCAN_DELAY_BETWEEN_SCANS
 );

1049 
zdoDiscCou¡î
++;

1050 
	`ZDAµ_Nëw‹kInô
–(
uöt16
)(
BEACON_REQUEST_DELAY


1051 + ((
uöt16
)(
	`oßl_ønd
()& 
BEACON_REQ_DELAY_MASK
))) );

1058 
ZDO_NWK_JOIN_IND
:

1059 i‡–
ZG_BUILD_JOINING_TYPE
 && 
ZG_DEVICE_JOINING_TYPE
 )

1061 
	`ZDAµ_Pro˚ssNëw‹kJoö
();

1065 
ZDO_NWK_JOIN_REQ
:

1066 i‡–
ZG_BUILD_JOINING_TYPE
 && 
ZG_DEVICE_JOINING_TYPE
 )

1068 
ªåyC¡
 = 0;

1069 
devSèπMode
 = 
MODE_RESUME
;

1070 
_tmpRejoöSèã
 = 
åue
;

1071 
	`oßl_˝yExtAddr
–
ZDO_U£ExãndedPANID
, 
_NIB
.
exãndedPANID
 );

1072 
zgDeÁu…SèπögSˇnDuøti⁄
 = 
BEACON_ORDER_60_MSEC
;

1073 
	`ZDAµ_Nëw‹kInô
( 0 );

1078 i‡–
ZG_SECURE_ENABLED
 )

1079 
	`ZDAµ_Pro˚ssSecMsg
–
msgPå
 );

1083 
	}
}

1094 
	$ZDAµ_Pro˚ssMsgCBs
–
zdoIncomögMsg_t
 *
öMsg
 )

1096  
öMsg
->
˛u°îID
 )

1098 #i‡
	`deföed
 ( 
ZDO_NWKADDR_REQUEST
 ) || deföed ( 
ZDO_IEEEADDR_REQUEST
 ) || deföed ( 
REFLECTOR
 )

1099 
NWK_addr_r•
:

1100 
IEEE_addr_r•
:

1102 
ZDO_NwkIEEEAddrRe•_t
 *
pAddrR•
;

1103 
pAddrR•
 = 
	`ZDO_P¨£AddrR•
–
öMsg
 );

1104 i‡–
pAddrR•
 )

1106 i‡–
pAddrR•
->
°©us
 =
ZSuc˚ss
 )

1108 
	`ZDO_Upd©eAddrM™agî
–
pAddrR•
->
nwkAddr
,ÖAddrR•->
extAddr
 );

1110 
	`oßl_mem_‰ì
–
pAddrR•
 );

1116 #i‡
	`deföed
 ( 
REFLECTOR
 )

1117 
Böd_ªq
:

1118 
Unböd_ªq
:

1120 
ZDO_BödUnbödReq_t
 
bödReq
;

1121 
	`ZDO_P¨£BödUnbödReq
–
öMsg
, &
bödReq
 );

1122 
	`ZDO_Pro˚ssBödUnbödReq
–
öMsg
, &
bödReq
 );

1127 #i‡
	`deföed
 ( 
ZDO_COORDINATOR
 )

1128 
Böd_r•
:

1129 
Unböd_r•
:

1130 i‡–
m©chED
 )

1132 
	`ZDM©chSídSèã
(

1133 (
uöt8
)((
öMsg
->
˛u°îID
 =
Böd_r•
Ë? 
ZDMATCH_REASON_BIND_RSP
 : 
ZDMATCH_REASON_UNBIND_RSP
),

1134 
	`ZDO_P¨£BödR•
(
öMsg
), inMsg->
TønsSeq
 );

1138 
End_Devi˚_Böd_ªq
:

1140 
ZDEndDevi˚Böd_t
 
bödReq
;

1141 
	`ZDO_P¨£EndDevi˚BödReq
–
öMsg
, &
bödReq
 );

1142 
	`ZDO_M©chEndDevi˚Böd
–&
bödReq
 );

1145 i‡–
bödReq
.
numInClu°îs
 )

1146 
	`oßl_mem_‰ì
–
bödReq
.
öClu°îs
 );

1147 i‡–
bödReq
.
numOutClu°îs
 )

1148 
	`oßl_mem_‰ì
–
bödReq
.
outClu°îs
 );

1153 
	}
}

1164 
	$ZDAµ_Regi°îCBs
( )

1166 #i‡
	`deföed
 ( 
ZDO_IEEEADDR_REQUEST
 ) || deföed ( 
REFLECTOR
 )

1167 
	`ZDO_Regi°îF‹ZDOMsg
–
ZDAµTaskID
, 
IEEE_addr_r•
 );

1169 #i‡
	`deföed
 ( 
ZDO_NWKADDR_REQUEST
 ) || deföed ( 
REFLECTOR
 )

1170 
	`ZDO_Regi°îF‹ZDOMsg
–
ZDAµTaskID
, 
NWK_addr_r•
 );

1172 #i‡
	`deföed
 ( 
ZDO_COORDINATOR
 )

1173 
	`ZDO_Regi°îF‹ZDOMsg
–
ZDAµTaskID
, 
Böd_r•
 );

1174 
	`ZDO_Regi°îF‹ZDOMsg
–
ZDAµTaskID
, 
Unböd_r•
 );

1175 
	`ZDO_Regi°îF‹ZDOMsg
–
ZDAµTaskID
, 
End_Devi˚_Böd_ªq
 );

1177 #i‡
	`deföed
 ( 
REFLECTOR
 )

1178 
	`ZDO_Regi°îF‹ZDOMsg
–
ZDAµTaskID
, 
Böd_ªq
 );

1179 
	`ZDO_Regi°îF‹ZDOMsg
–
ZDAµTaskID
, 
Unböd_ªq
 );

1181 
	}
}

1192 
	$ZDAµ_Pro˚ssSecMsg
–
oßl_evít_hdr_t
 *
msgPå
 )

1194  
msgPå
->
evít
 )

1196 
ZDO_ESTABLISH_KEY_CFM
:

1197 i‡–
ZG_CHECK_SECURITY_MODE
 =
ZG_SECURITY_PRO_HIGH
 )

1199 
	`ZDSecMgrE°ablishKeyCfm
–(
ZDO_E°ablishKeyCfm_t
*)
msgPå
 );

1203 
ZDO_ESTABLISH_KEY_IND
:

1204 i‡–
ZG_CHECK_SECURITY_MODE
 =
ZG_SECURITY_PRO_HIGH
 )

1206 i‡–
ZG_BUILD_JOINING_TYPE
 && 
ZG_DEVICE_JOINING_TYPE
 )

1208 
	`ZDSecMgrE°ablishKeyInd
–(
ZDO_E°ablishKeyInd_t
*)
msgPå
 );

1213 
ZDO_TRANSPORT_KEY_IND
:

1214 i‡–
ZG_BUILD_JOINING_TYPE
 && 
ZG_DEVICE_JOINING_TYPE
 )

1216 
	`ZDSecMgrTøn•‹tKeyInd
–(
ZDO_Tøn•‹tKeyInd_t
*)
msgPå
 );

1220 
ZDO_UPDATE_DEVICE_IND
:

1221 i‡–
ZG_BUILD_COORDINATOR_TYPE
 && 
ZG_DEVICE_COORDINATOR_TYPE
 )

1223 
	`ZDSecMgrUpd©eDevi˚Ind
–(
ZDO_Upd©eDevi˚Ind_t
*)
msgPå
 );

1227 
ZDO_REMOVE_DEVICE_IND
:

1228 i‡–
ZG_BUILD_RTRONLY_TYPE
 && ( 
zgDevi˚LogiˇlTy≥
 =
ZG_DEVICETYPE_ROUTER
 ) )

1230 
	`ZDSecMgrRemoveDevi˚Ind
–(
ZDO_RemoveDevi˚Ind_t
*)
msgPå
 );

1234 
ZDO_REQUEST_KEY_IND
:

1235 i‡–
ZG_CHECK_SECURITY_MODE
 =
ZG_SECURITY_PRO_HIGH
 )

1237 i‡–
ZG_BUILD_COORDINATOR_TYPE
 && 
ZG_DEVICE_COORDINATOR_TYPE
 )

1239 
	`ZDSecMgrReque°KeyInd
–(
ZDO_Reque°KeyInd_t
*)
msgPå
 );

1244 
ZDO_SWITCH_KEY_IND
:

1245 i‡–
ZG_BUILD_JOINING_TYPE
 && 
ZG_DEVICE_JOINING_TYPE
 )

1247 
	`ZDSecMgrSwôchKeyInd
–(
ZDO_SwôchKeyInd_t
*)
msgPå
 );

1251 
ZDO_AUTHENTICATE_IND
:

1252 i‡–
ZG_CHECK_SECURITY_MODE
 =
ZG_SECURITY_PRO_HIGH
 )

1254 
	`ZDSecMgrAuthítiˇãInd
–(
ZDO_AuthítiˇãInd_t
*)
msgPå
 );

1258 
ZDO_AUTHENTICATE_CFM
:

1259 i‡–
ZG_CHECK_SECURITY_MODE
 =
ZG_SECURITY_PRO_HIGH
 )

1261 
	`ZDSecMgrAuthítiˇãCfm
–(
ZDO_AuthítiˇãCfm_t
*)
msgPå
 );

1269 
	}
}

1282 
	$ZDAµ_Pro˚ssNëw‹kJoö
( )

1284 i‡–(
devSèã
 =
DEV_NWK_JOINING
) ||

1285 ((
devSèã
 =
DEV_NWK_ORPHAN
) &&

1286 (
ZDO_C⁄fig_Node_Des¸ùt‹
.
LogiˇlTy≥
 =
NODETYPE_ROUTER
)) )

1289 i‡–
nwkSètus
 =
ZSuc˚ss
 )

1291 
	`oßl_£t_evít
–
ZDAµTaskID
, 
ZDO_STATE_CHANGE_EVT
 );

1293 #i‡
	`deföed
 ( 
POWER_SAVING
 )

1294 
	`oßl_pwrmgr_devi˚
–
PWRMGR_BATTERY
 );

1297 i‡–
ZG_SECURE_ENABLED
 && ( 
	`ZDAµ_Re°‹eNwkKey
(Ë=
Ál£
 ) )

1300 
devSèã
 = 
DEV_END_DEVICE_UNAUTH
;

1303 
	`ZDAµ_Re£tTimîSèπ
( 10000 );

1307 i‡–
ZSTACK_ROUTER_BUILD
 )

1309 i‡–
devSèã
 =
DEV_NWK_ORPHAN


1310 && 
ZDO_C⁄fig_Node_Des¸ùt‹
.
LogiˇlTy≥
 !
NODETYPE_DEVICE
 )

1313 
_NIB
.
nwkSèã
 = 
NWK_ROUTER
;

1317 i‡–
devSèã
 =
DEV_NWK_JOINING
 )

1319 
	`ZDAµ_A¬oun˚NewAddªss
();

1322 
devSèã
 = 
DEV_END_DEVICE
;

1323 i‡–
ZSTACK_ROUTER_BUILD
 )

1326 i‡–
ZDO_C⁄fig_Node_Des¸ùt‹
.
LogiˇlTy≥
 !
NODETYPE_DEVICE
 )

1328 
	`NLME_SèπRouãrReque°
–0, 0, 
Ál£
 );

1335 i‡–(
devSèπMode
 =
MODE_RESUME
Ë&& (++
ªåyC¡
 >
MAX_RESUME_RETRY
) )

1337 i‡–
_NIB
.
nwkP™Id
 =0xFFFF || _NIB.nwkP™Id =
INVALID_PAN_ID
 )

1338 
devSèπMode
 = 
MODE_JOIN
;

1341 
devSèπMode
 = 
MODE_REJOIN
;

1342 
_tmpRejoöSèã
 = 
åue
;

1346 i‡–(
	`NLME_GëSh‹tAddr
(Ë!
INVALID_NODE_ADDR
) ||

1347 (
_NIB
.
nwkDevAddªss
 !
INVALID_NODE_ADDR
) )

1349 
uöt16
 
addr
 = 
INVALID_NODE_ADDR
;

1351 
_NIB
.
nwkDevAddªss
 = 
INVALID_NODE_ADDR
;

1352 
	`ZMacSëReq
–
ZMacSh‹tAddªss
, (
uöt8
 *)&
addr
 );

1355 
zdoDiscCou¡î
 = 1;

1360 
	`ZDAµ_Nëw‹kInô
–(
uöt16
)(
NWK_START_DELAY


1361 + ((
uöt16
)(
	`oßl_ønd
()& 
EXTENDED_JOINING_RANDOM_MASK
))) );

1364 i‡–
devSèã
 =
DEV_NWK_ORPHAN
 || devSèã =
DEV_NWK_REJOIN
 )

1367 i‡(
nwkSètus
 =
ZSuc˚ss
)

1369 i‡–
ZG_SECURE_ENABLED
 )

1371 
	`ZDAµ_Re°‹eNwkKey
();

1374 
devSèã
 = 
DEV_END_DEVICE
;

1375 
	`oßl_£t_evít
–
ZDAµTaskID
, 
ZDO_STATE_CHANGE_EVT
 );

1377 #i‡
	`deföed
 ( 
POWER_SAVING
 )

1378 
	`oßl_pwrmgr_devi˚
–
PWRMGR_BATTERY
 );

1381 i‡–
ZDO_C⁄fig_Node_Des¸ùt‹
.
C≠abûôyFœgs
 & 
CAPINFO_RCVR_ON_IDLE
 )

1384 
	`NLME_SëPﬁlR©e
( 0 );

1385 
	`NLME_SëQueuedPﬁlR©e
( 0 );

1386 
	`NLME_SëRe•⁄£R©e
( 0 );

1389 i‡–
ZSTACK_ROUTER_BUILD
 )

1392 i‡–
ZDO_C⁄fig_Node_Des¸ùt‹
.
LogiˇlTy≥
 !
NODETYPE_DEVICE
 )

1394 
	`NLME_SèπRouãrReque°
–0, 0, 
Ál£
 );

1398 
	`ZDAµ_A¬oun˚NewAddªss
();

1402 i‡–
devSèπMode
 =
MODE_RESUME
 )

1404 i‡–++
ªåyC¡
 <
MAX_RESUME_RETRY
 )

1406 i‡–
_NIB
.
nwkP™Id
 =0xFFFF || _NIB.nwkP™Id =
INVALID_PAN_ID
 )

1407 
devSèπMode
 = 
MODE_JOIN
;

1410 
devSèπMode
 = 
MODE_REJOIN
;

1411 
_tmpRejoöSèã
 = 
åue
;

1415 if–
AIB_≠sU£In£cuªJoö
 =
åue
 )

1417 
devSèπMode
 = 
MODE_JOIN
;

1423 
	`ZDAµ_Nëw‹kInô
–(
uöt16
)(
NWK_START_DELAY


1424 + (
	`oßl_ønd
()& 
EXTENDED_JOINING_RANDOM_MASK
)) );

1427 #i‡
	`deföed
 ( 
ZIGBEE_STOCHASTIC_ADDRESSING
 )

1431 i‡–
_NIB
.
nwkAddrAŒoc
 =
NWK_ADDRESSING_STOCHASTIC
 )

1434 
	`ZDAµ_A¬oun˚NewAddªss
();

1437 
	`oßl_£t_evít
–
ZDAµTaskID
, 
ZDO_STATE_CHANGE_EVT
 );

1441 
	}
}

1452 
	$ZDAµ_SaveNwkKey
( )

1454 
nwkA˘iveKeyIãms
 
keyIãms
;

1456 
	`SSP_RódNwkA˘iveKey
–&
keyIãms
 );

1457 
keyIãms
.
‰ameCou¡î
++;

1459 
	`oßl_nv_wrôe
–
ZCD_NV_NWKKEY
, 0, –
nwkA˘iveKeyIãms
 ),

1460 (*)&
keyIãms
 );

1462 
nwkFømeCou¡îCh™ges
 = 0;

1463 
	}
}

1474 
	$ZDAµ_Re£tNwkKey
( )

1476 
nwkA˘iveKeyIãms
 
keyIãms
;

1478 
	`oßl_mem£t
–&
keyIãms
, 0, –
nwkA˘iveKeyIãms
 ) );

1479 
	`oßl_nv_wrôe
–
ZCD_NV_NWKKEY
, 0, –
nwkA˘iveKeyIãms
 ),

1480 (*)&
keyIãms
 );

1481 
	}
}

1494 
uöt8
 
	$ZDAµ_Re°‹eNwkKey
( )

1496 
nwkA˘iveKeyIãms
 
keyIãms
;

1497 
uöt8
 
ªt
 = 
Ál£
;

1499 i‡–
	`oßl_nv_ªad
–
ZCD_NV_NWKKEY
, 0, (
nwkA˘iveKeyIãms
), (*)&
keyIãms
 )

1500 =
ZSUCCESS
 )

1502 i‡–
keyIãms
.
‰ameCou¡î
 > 0 )

1505 
keyIãms
.
‰ameCou¡î
 +
MAX_NWK_FRAMECOUNTER_CHANGES
;

1506 
nwkFømeCou¡î
 = 
keyIãms
.
‰ameCou¡î
;

1507 
ªt
 = 
åue
;

1511 
nwkFømeCou¡îCh™ges
 = 
MAX_NWK_FRAMECOUNTER_CHANGES
 + 1;

1513  ( 
ªt
 );

1514 
	}
}

1525 
	$ZDAµ_Re£tTimîSèπ
–
uöt16
 
dñay
 )

1528 
	`oßl_°¨t_timîEx
–
ZDAµTaskID
, 
ZDO_DEVICE_RESET
, 
dñay
 );

1529 
	}
}

1540 
	$ZDAµ_Re£tTimîC™˚l
( )

1543 
	`oßl_°›_timîEx
–
ZDAµTaskID
, 
ZDO_DEVICE_RESET
 );

1544 
	}
}

1555 
	$ZDAµ_LóveCålInô
( )

1557 
uöt8
 
°©us
;

1561 
ZDAµ_LóveCål
 = 
ZDAPP_LEAVE_CTRL_INIT
;

1563 
°©us
 = 
	`oßl_nv_ôem_öô
–
ZCD_NV_LEAVE_CTRL
,

1564 (
ZDAµ_LóveCål
),

1565 &
ZDAµ_LóveCål
 );

1567 i‡–
°©us
 =
ZSUCCESS
 )

1570 
	`oßl_nv_ªad
–
ZCD_NV_LEAVE_CTRL
,

1572 –
uöt8
 ),

1573 &
ZDAµ_LóveCål
);

1575 
	}
}

1586 
	$ZDAµ_LóveCålSë
–
uöt8
 
ø
 )

1588 
ZDAµ_LóveCål
 = 
ZDAPP_LEAVE_CTRL_SET
;

1590 i‡–
ø
 =
TRUE
 )

1592 
ZDAµ_LóveCål
 |
ZDAPP_LEAVE_CTRL_RA
;

1596 
	`oßl_nv_wrôe
–
ZCD_NV_LEAVE_CTRL
,

1598 –
uöt8
 ),

1599 &
ZDAµ_LóveCål
);

1600 
	}
}

1611 
uöt8
 
	$ZDAµ_LóveCålBy∑ss
( )

1613 
uöt8
 
by∑ss
;

1615 i‡–
ZDAµ_LóveCål
 & 
ZDAPP_LEAVE_CTRL_SET
 )

1617 
by∑ss
 = 
TRUE
;

1621 
by∑ss
 = 
FALSE
;

1624  
by∑ss
;

1625 
	}
}

1637 
	$ZDAµ_LóveCålSèπup
–
devSèãs_t
* 
°©e
, 
uöt16
* 
°¨tDñay
 )

1639 *
°¨tDñay
 = 0;

1641 i‡–
ZDAµ_LóveCål
 & 
ZDAPP_LEAVE_CTRL_SET
 )

1643 i‡–
ZDAµ_LóveCål
 & 
ZDAPP_LEAVE_CTRL_RA
 )

1645 *
°¨tDñay
 = 5000;

1649 *
°©e
 = 
DEV_HOLD
;

1653 
ZDAµ_LóveCål
 = 
ZDAPP_LEAVE_CTRL_INIT
;

1656 
	`oßl_nv_wrôe
–
ZCD_NV_LEAVE_CTRL
,

1658 –
uöt8
 ),

1659 &
ZDAµ_LóveCål
);

1661 
	}
}

1672 
	$ZDAµ_LóveRe£t
–
uöt8
 
ø
 )

1674 
	`ZDAµ_LóveCålSë
–
ø
 );

1676 
	`ZDAµ_Re£tTimîSèπ
( 5000 );

1677 
	}
}

1690 
	$ZDAµ_LóveUpd©e
–
uöt16
 
nwkAddr
, 
uöt8
* 
extAddr
,

1691 
uöt8
 
ªmoveChûdªn
 )

1696 ()
nwkAddr
;

1699 i‡–
ZSTACK_ROUTER_BUILD
 )

1701 
	`NLME_RemoveChûd
–
extAddr
, 
ªmoveChûdªn
 );

1736 
	}
}

1756 
	$ZDAµ_SídEvítMsg
–
uöt8
 
cmd
, uöt8 
Àn
, uöt8 *
buf
 )

1758 
	`ZDAµ_SídMsg
–
ZDAµTaskID
, 
cmd
, 
Àn
, 
buf
 );

1759 
	}
}

1773 
	$ZDAµ_SídMsg
–
uöt8
 
èskID
, uöt8 
cmd
, uöt8 
Àn
, uöt8 *
buf
 )

1775 
oßl_evít_hdr_t
 *
msgPå
;

1778 
msgPå
 = (
oßl_evít_hdr_t
 *)
	`oßl_msg_Æloˇã
–
Àn
 );

1779 i‡–
msgPå
 )

1781 i‡–(
Àn
 > 0Ë&& (
buf
 !
NULL
) )

1782 
	`oßl_mem˝y
–
msgPå
, 
buf
, 
Àn
 );

1784 
msgPå
->
evít
 = 
cmd
;

1785 
	`oßl_msg_£nd
–
èskID
, (
uöt8
 *)
msgPå
 );

1787 
	}
}

1803 
	#STACK_PROFILE_MAX
 2

	)

1804 
ZSètus_t
 
	$ZDO_Nëw‹kDiscovîyC⁄fúmCB
–
uöt8
 
Resu…Cou¡
,

1805 
√tw‹kDesc_t
 *
Nëw‹kLi°
 )

1807 
√tw‹kDesc_t
 *
pNwkDesc
;

1808 
ZDO_Nëw‹kDiscovîyCfm_t
 
msg
;

1809 
uöt8
 
i
;

1810 
uöt8
 
°ackProfûe
;

1811 
uöt8
 
°ackProfûePro
;

1812 
uöt8
 
£À˘ed
;

1814 #i‡
	`deföed
 ( 
ZDO_MGMT_NWKDISC_RESPONSE
 )

1815 i‡–
zd≠pMgmtNwkDiscReqInProgªss
 )

1817 
zd≠pMgmtNwkDiscReqInProgªss
 = 
Ál£
;

1818 
	`ZDO_FöishPro˚ssögMgmtNwkDiscReq
–
Resu…Cou¡
, 
Nëw‹kLi°
 );

1819  ( 
ZSuc˚ss
 );

1824 
°ackProfûePro
 = 
FALSE
;

1825 
£À˘ed
 = 
FALSE
;

1827  
°ackProfûe
 = 0; sèckProfûê< 
STACK_PROFILE_MAX
; stackProfile++ )

1829 
pNwkDesc
 = 
Nëw‹kLi°
;

1830  
i
 = 0; i < 
Resu…Cou¡
; i++, 
pNwkDesc
 =ÖNwkDesc->
√xtDesc
 )

1832 i‡–
zgC⁄figPANID
 != 0xFFFF )

1835 i‡–
pNwkDesc
->
∑nId
 !
zgC⁄figPANID
 )

1840 i‡–
	`nwk_ExtPANIDVÆid
–
ZDO_U£ExãndedPANID
Ë=
åue
 )

1844 i‡–
	`oßl_ExtAddrEquÆ
–
ZDO_U£ExãndedPANID
, 
pNwkDesc
->
exãndedPANID
Ë=
Ál£
 )

1851 i‡–
ZSTACK_ROUTER_BUILD
 )

1853 i‡–
°ackProfûePro
 =
FALSE
 )

1855 i‡–!
pNwkDesc
->
rouãrC≠acôy
 )

1862 i‡–!
pNwkDesc
->
devi˚C≠acôy
 )

1868 i‡–
ZSTACK_END_DEVICE_BUILD
 )

1870 i‡–!
pNwkDesc
->
devi˚C≠acôy
 )

1877 i‡–
pNwkDesc
->
vîsi⁄
 !
_NIB
.
nwkPrŸocﬁVîsi⁄
 )

1881 i‡–
pNwkDesc
->
°ackProfûe
 !
zgSèckProfûe
 )

1883 i‡–((
zgSèckProfûe
 =
HOME_CONTROLS
Ë&& (
pNwkDesc
->
°ackProfûe
 =
ZIGBEEPRO_PROFILE
))

1884 || ((
zgSèckProfûe
 =
ZIGBEEPRO_PROFILE
Ë&& (
pNwkDesc
->
°ackProfûe
 =
HOME_CONTROLS
)) )

1885 
°ackProfûePro
 = 
TRUE
;

1887 i‡–
°ackProfûe
 == 0 )

1900 i‡(
i
 < 
Resu…Cou¡
)

1902 
£À˘ed
 = 
TRUE
;

1907 i‡–(
£À˘ed
 =
TRUE
Ë|| (
°ackProfûePro
 =
FALSE
) )

1913 i‡–
i
 =
Resu…Cou¡
 )

1915 
msg
.
hdr
.
°©us
 = 
ZDO_FAIL
;

1919 
msg
.
hdr
.
°©us
 = 
ZDO_SUCCESS
;

1920 
msg
.
∑nIdLSB
 = 
	`LO_UINT16
–
pNwkDesc
->
∑nId
 );

1921 
msg
.
∑nIdMSB
 = 
	`HI_UINT16
–
pNwkDesc
->
∑nId
 );

1922 
msg
.
logiˇlCh™√l
 = 
pNwkDesc
->logicalChannel;

1923 
msg
.
vîsi⁄
 = 
pNwkDesc
->version;

1924 
	`oßl_˝yExtAddr
–
msg
.
exãndedPANID
, 
pNwkDesc
->extendedPANID );

1927 
	`ZDAµ_SídMsg
–
ZDAµTaskID
, 
ZDO_NWK_DISC_CNF
, (
ZDO_Nëw‹kDiscovîyCfm_t
), (
uöt8
 *)&
msg
 );

1929  (
ZSuc˚ss
);

1930 
	}
}

1942 
	$ZDO_Nëw‹kF‹m©i⁄C⁄fúmCB
–
ZSètus_t
 
Sètus
 )

1944 
nwkSètus
 = (
byã
)
Sètus
;

1946 i‡–
Sètus
 =
ZSUCCESS
 )

1949 
	`HÆLedSë
 ( 
HAL_LED_3
, 
HAL_LED_MODE_ON
 );

1952 
	`HÆLedSë
 (
HAL_LED_4
, 
HAL_LED_MODE_OFF
);

1954 #i‡
	`deföed
 ( 
ZBIT
 )

1955 
	`SIM_SëCﬁ‹
(0xd0ffd0);

1958 i‡–
devSèã
 =
DEV_HOLD
 )

1961 
devSèã
 = 
DEV_COORD_STARTING
;

1964 #i‡
	`deföed
(
BLINK_LEDS
)

1966 
	`HÆLedSë
 ( 
HAL_LED_3
, 
HAL_LED_MODE_FLASH
 );

1969 
	`oßl_£t_evít
–
ZDAµTaskID
, 
ZDO_NETWORK_START
 );

1970 
	}
}

1982 
	$ZDO_SèπRouãrC⁄fúmCB
–
ZSètus_t
 
Sètus
 )

1984 
nwkSètus
 = (
byã
)
Sètus
;

1986 i‡–
Sètus
 =
ZSUCCESS
 )

1989 
	`HÆLedSë
 ( 
HAL_LED_3
, 
HAL_LED_MODE_ON
 );

1991 
	`HÆLedSë
 ( 
HAL_LED_4
, 
HAL_LED_MODE_OFF
);

1992 i‡–
devSèã
 =
DEV_HOLD
 )

1995 
devSèã
 = 
DEV_END_DEVICE
;

1998 #i‡
	`deföed
(
BLINK_LEDS
)

2000 
	`HÆLedSë
–
HAL_LED_3
, 
HAL_LED_MODE_FLASH
 );

2003 
	`oßl_£t_evít
–
ZDAµTaskID
, 
ZDO_ROUTER_START
 );

2004 
	}
}

2017 
	$ZDO_JoöC⁄fúmCB
–
uöt16
 
P™Id
, 
ZSètus_t
 
Sètus
 )

2019 ()
P™Id
;

2021 
nwkSètus
 = (
byã
)
Sètus
;

2023 i‡–
Sètus
 =
ZSUCCESS
 )

2026 
	`HÆLedSë
 ( 
HAL_LED_3
, 
HAL_LED_MODE_ON
 );

2028 
	`HÆLedSë
 ( 
HAL_LED_4
, 
HAL_LED_MODE_OFF
);

2029 i‡–(
devSèã
 =
DEV_HOLD
) )

2032 
devSèã
 = 
DEV_NWK_JOINING
;

2035 i‡–!
ZG_SECURE_ENABLED
 )

2038 
	`ZDAµ_NVUpd©e
();

2041 #i‡
	`deföed
(
BLINK_LEDS
)

2043 
	`HÆLedSë
 ( 
HAL_LED_3
, 
HAL_LED_MODE_FLASH
 );

2047 
	`ZDAµ_SídMsg
–
ZDAµTaskID
, 
ZDO_NWK_JOIN_IND
, (
oßl_evít_hdr_t
), (
byã
*)
NULL
 );

2048 
	}
}

2061 
	$ZDO_AddrCh™geIndiˇti⁄CB
–
uöt16
 
√wAddr
 )

2063 ()
√wAddr
;

2066 
	`ZDAµ_NVUpd©e
();

2069 
	`oßl_£t_evít
–
ZDAµTaskID
, 
ZDO_STATE_CHANGE_EVT
 );

2072 
	`ZDAµ_A¬oun˚NewAddªss
();

2073 
	}
}

2091 
ZSètus_t
 
	$ZDO_JoöIndiˇti⁄CB
–
uöt16
 
Sh‹tAddªss
, 
uöt8
 *
ExãndedAddªss
,

2092 
uöt8
 
C≠abûôyInf‹m©i⁄
, uöt8 
ty≥
 )

2094 ()
Sh‹tAddªss
;

2095 ()
ExãndedAddªss
;

2096 ()
C≠abûôyInf‹m©i⁄
;

2099 
	`ZDAµ_NVUpd©e
();

2102 i‡–
ZG_SECURE_ENABLED
 )

2104 i‡–
ty≥
 =
NWK_ASSOC_JOIN
 ||Åy≥ =
NWK_ASSOC_REJOIN_UNSECURE
 )

2106 
	`oßl_°¨t_timîEx
–
ZDAµTaskID
, 
ZDO_NEW_DEVICE
, 600 );

2110  ( 
ZSuc˚ss
 );

2111 
	}
}

2123 
	$ZDO_C⁄˚¡øt‹Indiˇti⁄CB
–
uöt16
 
nwkAddr
 )

2127 ()
nwkAddr
;

2128 
	}
}

2141 
	$ZDO_LóveCnf
–
NLME_LóveCnf_t
* 
˙f
 )

2144 i‡–
	`oßl_ExtAddrEquÆ
–
˙f
->
extAddr
,

2145 
	`NLME_GëExtAddr
(ËË=
TRUE
 )

2148 
	`ZDAµ_LóveRe£t
–
˙f
->
ªjoö
 );

2150 i‡–
ZSTACK_ROUTER_BUILD
 )

2153 
	`ZDAµ_LóveUpd©e
–
˙f
->
d°Addr
,

2154 
˙f
->
extAddr
,

2155 
˙f
->
ªmoveChûdªn
 );

2157 
	}
}

2170 
	$ZDO_LóveInd
–
NLME_LóveInd_t
* 
öd
 )

2172 
uöt8
 
Àave
;

2177 i‡–
öd
->
ªque°
 =
TRUE
 )

2180 i‡–
ZSTACK_ROUTER_BUILD
 )

2182 
NLME_LóveR•_t
 
r•
;

2183 
r•
.
ªjoö
 = 
öd
->rejoin;

2184 
r•
.
ªmoveChûdªn
 = 
öd
->removeChildren;

2185 
	`NLME_LóveR•
–&
r•
 );

2189 
	`ZDAµ_LóveRe£t
–
öd
->
ªjoö
 );

2193 
Àave
 = 
FALSE
;

2196 i‡–
öd
->
§cAddr
 =
	`NLME_GëCo‹dSh‹tAddr
() )

2198 i‡––
öd
->
ªmoveChûdªn
 =
TRUE
 ) ||

2199 –
ZDO_C⁄fig_Node_Des¸ùt‹
.
LogiˇlTy≥
 ==

2200 
NODETYPE_DEVICE
 ) )

2202 
Àave
 = 
TRUE
;

2205 i‡–
öd
->
ªmoveChûdªn
 =
TRUE
 )

2211 i‡–
Àave
 =
TRUE
 )

2214 
	`ZDAµ_LóveRe£t
–
öd
->
ªjoö
 );

2219 
	`ZDAµ_LóveUpd©e
–
öd
->
§cAddr
,

2220 
öd
->
extAddr
,

2221 
öd
->
ªmoveChûdªn
 );

2224 
	}
}

2238 
	$ZDO_SyncIndiˇti⁄CB
–
uöt8
 
ty≥
, 
uöt16
 
sh‹tAddr
 )

2240 ()
sh‹tAddr
;

2242 i‡–
ZSTACK_END_DEVICE_BUILD


2243 || (
ZSTACK_ROUTER_BUILD
 && ((
_NIB
.
C≠abûôyInfo
 & 
ZMAC_ASSOC_CAPINFO_FFD_TYPE
) == 0)))

2245 i‡–
ty≥
 == 1 )

2248 
	`nwkNeighb‹InôTabÀ
();

2251 
	`ZDAµ_SídMsg
–
ZDAµTaskID
, 
ZDO_NWK_JOIN_REQ
, (
oßl_evít_hdr_t
), 
NULL
 );

2254 
	}
}

2268 
	$ZDO_M™ytoO√FaûuªIndiˇti⁄CB
()

2275 if–
zgC⁄˚¡øt‹RC
 =
åue
 )

2277 
	`NLME_RouãDiscovîyReque°
–0x00, 
MTO_ROUTE
, 
zgC⁄˚¡øt‹Radius
);

2281 
	`NLME_RouãDiscovîyReque°
–0x00, 
MTO_ROUTE
 | 
NO_ROUTE_CACHE
, 
zgC⁄˚¡øt‹Radius
);

2283 
	}
}

2296 
	$ZDO_PﬁlC⁄fúmCB
–
uöt8
 
°©us
 )

2298 ()
°©us
;

2300 
	}
}

2312 
	$ZDAµ_NwkWrôeNVReque°
( )

2314 #i‡
	`deföed
 ( 
NV_RESTORE
 )

2315 i‡–!
	`oßl_gë_timeoutEx
–
ZDAµTaskID
, 
ZDO_NWK_UPDATE_NV
 ) )

2318 
	`ZDAµ_NVUpd©e
();

2321 
	}
}

2341 
ZSètus_t
 
	$ZDO_Upd©eDevi˚Indiˇti⁄
–
uöt8
 *
extAddr
, uöt8 
°©us
 )

2345 ()
extAddr
;

2346 ()
°©us
;

2348  
ZSuc˚ss
;

2349 
	}
}

2360 
	$ZDAµ_InMsgCB
–
zdoIncomögMsg_t
 *
öMsg
 )

2362 i‡–
öMsg
->
˛u°îID
 & 
ZDO_RESPONSE_BIT
 )

2370 i‡–!(
öMsg
->
wasBrﬂdˇ°
Ë&& inMsg->
˛u°îID
 !
Devi˚_™n˚
 )

2372 
	`ZDP_GíîicR•
–
öMsg
->
TønsSeq
, &(öMsg->
§cAddr
), 
ZDP_NOT_SUPPORTED
, 0,

2373 (
uöt16
)(
öMsg
->
˛u°îID
 | 
ZDO_RESPONSE_BIT
), inMsg->
SecurôyU£
 );

2376 
	}
}

2389 
	$ZDAµ_Ch™geM©chDescRe•Pîmissi⁄
–
uöt8
 
ídpoöt
, uöt8 
a˘i⁄
 )

2392 
	`afSëM©ch
–
ídpoöt
, 
a˘i⁄
 );

2393 
	}
}

2404 
	$ZDAµ_Nëw‹kInô
–
uöt16
 
dñay
 )

2406 i‡–
dñay
 )

2409 
	`oßl_°¨t_timîEx
–
ZDAµTaskID
, 
ZDO_NETWORK_INIT
, 
dñay
 );

2413 
	`oßl_£t_evít
–
ZDAµTaskID
, 
ZDO_NETWORK_INIT
 );

2415 
	}
}

2427 
	$ZDAµ_NwkSèãUpd©eCB
( )

2430 i‡–!
	`oßl_gë_timeoutEx
–
ZDAµTaskID
, 
ZDO_NWK_UPDATE_NV
 ) )

2433 
	`ZDAµ_NVUpd©e
();

2435 
	}
}

2446 
	$ZDAµ_NodeProfûeSync
–
ZDO_Nëw‹kDiscovîyCfm_t
* 
cfm
 )

2448 
√tw‹kDesc_t
* 
desc
;

2449 
uöt16
 
∑nID
;

2451 i‡–
ZDO_C⁄fig_Node_Des¸ùt‹
.
C≠abûôyFœgs
 & 
CAPINFO_DEVICETYPE_FFD
 )

2453 
∑nID
 = 
	`BUILD_UINT16
–
cfm
->
∑nIdLSB
, cfm->
∑nIdMSB
 );

2455 
desc
 = 
	`nwk_gëNëw‹kDesc
–
cfm
->
exãndedPANID
, 
∑nID
, cfm->
logiˇlCh™√l
 );

2457 i‡(
desc
 !
NULL
)

2459 i‡–
desc
->
°ackProfûe
 !
zgSèckProfûe
 )

2461 
ZDO_C⁄fig_Node_Des¸ùt‹
.
LogiˇlTy≥
 = 
NODETYPE_DEVICE
;

2462 
ZDO_C⁄fig_Node_Des¸ùt‹
.
C≠abûôyFœgs
 = 
CAPINFO_DEVICETYPE_RFD
 | 
CAPINFO_POWER_AC
 | 
CAPINFO_RCVR_ON_IDLE
;

2463 
	`NLME_SëBrﬂdˇ°Fûãr
–
ZDO_C⁄fig_Node_Des¸ùt‹
.
C≠abûôyFœgs
 );

2467 
	}
}

2479 
uöt8
 
	$ZDAµ_SèπJoöögCy˛e
( )

2481 i‡–
devSèã
 =
DEV_INIT
 || devSèã =
DEV_NWK_DISC
 )

2483 
c⁄töueJoöög
 = 
TRUE
;

2484 
	`ZDAµ_Nëw‹kInô
( 0 );

2486  ( 
TRUE
 );

2489  ( 
FALSE
 );

2490 
	}
}

2501 
uöt8
 
	$ZDAµ_St›JoöögCy˛e
( )

2503 i‡–
devSèã
 =
DEV_INIT
 || devSèã =
DEV_NWK_DISC
 )

2505 
c⁄töueJoöög
 = 
FALSE
;

2506  ( 
TRUE
 );

2509  ( 
FALSE
 );

2510 
	}
}

2522 
	$ZDAµ_A¬oun˚NewAddªss
( )

2524 #i‡
	`deföed
 ( 
ZIGBEE_NWK_UNIQUE_ADDR_CHECK
 )

2526 
	`APSME_HﬁdD©aReque°s
( 0 );

2529 
	`ZDP_Devi˚A¬˚
–
	`NLME_GëSh‹tAddr
(), 
	`NLME_GëExtAddr
(),

2530 
ZDO_C⁄fig_Node_Des¸ùt‹
.
C≠abûôyFœgs
, 0 );

2532 #i‡
	`deföed
 ( 
ZIGBEE_NWK_UNIQUE_ADDR_CHECK
 )

2534 
	`APSME_HﬁdD©aReque°s
–
ZDAPP_HOLD_DATA_REQUESTS_TIMEOUT
 );

2536 
	}
}

2547 
	$ZDAµ_NVUpd©e
( )

2549 #i‡
	`deföed
 ( 
NV_RESTORE
 )

2550 
	`oßl_°¨t_timîEx
–
ZDAµTaskID
, 
ZDO_NWK_UPDATE_NV
, 
ZDAPP_UPDATE_NWK_NV_TIME
 );

2552 
	}
}

2565 
uöt16
 
	$ZDAµ_Co‹dSèπPANIDC⁄Êi˘CB
–
uöt16
 
∑nid
 )

2567  ( 
∑nid
 + 1 );

2568 
	}
}

	@Components/stack/zdo/ZDApp.h

41 #i‚de‡
ZDAPP_H


42 
	#ZDAPP_H


	)

44 #ifde‡
__˝lu•lus


52 
	~"ZComDef.h
"

53 
	~"ZMac.h
"

54 
	~"NLMEDE.h
"

55 
	~"APS.h
"

56 
	~"AF.h
"

57 
	~"ZDProfûe.h
"

69 
	#ZDO_CONFIG_MAX_BO
 15

	)

72 
	#ZDO_NETWORK_INIT
 0x0001

	)

73 
	#ZDO_NETWORK_START
 0x0002

	)

74 
	#ZDO_DEVICE_RESET
 0x0004

	)

75 
	#ZDO_COMMAND_CNF
 0x0008

	)

76 
	#ZDO_STATE_CHANGE_EVT
 0x0010

	)

77 
	#ZDO_ROUTER_START
 0x0020

	)

78 
	#ZDO_NEW_DEVICE
 0x0040

	)

79 
	#ZDO_DEVICE_AUTH
 0x0080

	)

80 
	#ZDO_SECMGR_EVENT
 0x0100

	)

81 
	#ZDO_NWK_UPDATE_NV
 0x0200

	)

82 
	#ZDO_FRAMECOUNTER_CHANGE
 0x0400

	)

85 
	#ZDO_NWK_DISC_CNF
 0x01

	)

86 
	#ZDO_NWK_JOIN_IND
 0x02

	)

87 
	#ZDO_NWK_JOIN_REQ
 0x03

	)

88 
	#ZDO_ESTABLISH_KEY_CFM
 0x04

	)

89 
	#ZDO_ESTABLISH_KEY_IND
 0x05

	)

90 
	#ZDO_TRANSPORT_KEY_IND
 0x06

	)

91 
	#ZDO_UPDATE_DEVICE_IND
 0x07

	)

92 
	#ZDO_REMOVE_DEVICE_IND
 0x08

	)

93 
	#ZDO_REQUEST_KEY_IND
 0x09

	)

94 
	#ZDO_SWITCH_KEY_IND
 0x0A

	)

95 
	#ZDO_AUTHENTICATE_IND
 0x0B

	)

96 
	#ZDO_AUTHENTICATE_CFM
 0x0C

	)

99 
	#ZDO_CMD_ID
 0

	)

100 
	#ZDO_CMD_ID_LEN
 1

	)

103 
	#ZDO_ESTABLISH_KEY_CFM_LEN
 \

	)

104 ((
uöt8
) \

105 ((
ZDO_E°ablishKeyCfm_t
) ) )

107 
	#ZDO_ESTABLISH_KEY_IND_LEN
 \

	)

108 ((
uöt8
) \

109 ((
ZDO_E°ablishKeyInd_t
) ) )

111 
	#ZDO_TRANSPORT_KEY_IND_LEN
 \

	)

112 ((
uöt8
) \

113 ((
ZDO_Tøn•‹tKeyInd_t
) ) )

115 
	#ZDO_UPDATE_DEVICE_IND_LEN
 \

	)

116 ((
uöt8
) \

117 ((
ZDO_Upd©eDevi˚Ind_t
) ) )

119 
	#ZDO_REMOVE_DEVICE_IND_LEN
 \

	)

120 ((
uöt8
) \

121 ((
ZDO_RemoveDevi˚Ind_t
) ) )

123 
	#ZDO_REQUEST_KEY_IND_LEN
 \

	)

124 ((
uöt8
) \

125 ((
ZDO_Reque°KeyInd_t
) ) )

127 
	#ZDO_SWITCH_KEY_IND_LEN
 \

	)

128 ((
uöt8
) \

129 ((
ZDO_SwôchKeyInd_t
) ) )

131 
	#ZDO_AUTHENTICATE_IND_LEN
 \

	)

132 ((
uöt8
) \

133 ((
ZDO_AuthítiˇãInd_t
) ) )

135 
	#ZDO_AUTHENTICATE_CFM_LEN
 \

	)

136 ((
uöt8
) \

137 ((
ZDO_AuthítiˇãCfm_t
) ) )

139 
	#NWK_RETRY_DELAY
 1000

140 

	)

141 
	#ZDO_MATCH_DESC_ACCEPT_ACTION
 1

142 

	)

144 
	#ZDAPP_STARTUP_COORD
 2

145 
	#ZDAPP_STARTUP_ROUTER
 1

146 
	#ZDAPP_STARTUP_AUTO
 0

148 

	)

149 
	#NUM_DISC_ATTEMPTS
 2

	)

152 
	#ZDO_INITDEV_RESTORED_NETWORK_STATE
 0x00

	)

153 
	#ZDO_INITDEV_NEW_NETWORK_STATE
 0x01

	)

154 
	#ZDO_INITDEV_LEAVE_NOT_STARTED
 0x02

	)

156 #i‡
deföed
 ( 
MANAGED_SCAN
 )

162 
	#MANAGEDSCAN_TIMES_PRE_CHANNEL
 5

	)

163 
	#MANAGEDSCAN_DELAY_BETWEEN_SCANS
 150

164 

	)

165 
uöt8
 
zdoDiscCou¡î
;

170 
	#ZDAPP_HOLD_DATA_REQUESTS_TIMEOUT
 0

171 

	)

177 
	gDEV_HOLD
,

178 
	gDEV_INIT
,

179 
	gDEV_NWK_DISC
,

180 
	gDEV_NWK_JOINING
,

181 
	gDEV_NWK_REJOIN
,

182 
	gDEV_END_DEVICE_UNAUTH
,

183 
	gDEV_END_DEVICE
,

184 
	gDEV_ROUTER
,

185 
	gDEV_COORD_STARTING
,

186 
	gDEV_ZB_COORD
,

187 
	gDEV_NWK_ORPHAN


188 } 
	tdevSèãs_t
;

192 
	gZDO_SUCCESS
,

193 
	gZDO_FAIL


194 } 
	tzdoSètus_t
;

198 
oßl_evít_hdr_t
 
	ghdr
;

199 
uöt8
 
	g∑nIdLSB
;

200 
uöt8
 
	g∑nIdMSB
;

201 
uöt8
 
	glogiˇlCh™√l
;

202 
uöt8
 
	gvîsi⁄
;

203 
uöt8
 
	gexãndedPANID
[
Z_EXTADDR_LEN
];

204 } 
	tZDO_Nëw‹kDiscovîyCfm_t
;

208 
oßl_evít_hdr_t
 
	ghdr
;

209 
uöt8
 
	gd°AddrD°EP
;

210 
zAddrTy≥_t
 
	gd°Addr
;

211 
uöt8
 
	gd°AddrClu°îIDLSB
;

212 
uöt8
 
	gd°AddrClu°îIDMSB
;

213 
uöt8
 
	gd°AddrRemove
;

214 
uöt8
 
	gd°AddrEP
;

215 } 
	tZDO_NewD°Addr_t
;

220 
oßl_evít_hdr_t
 
	ghdr
;

221 
uöt8
 
	g∑πExtAddr
[
Z_EXTADDR_LEN
];

222 
uöt8
 
	g°©us
;

223 } 
	tZDO_E°ablishKeyCfm_t
;

227 
oßl_evít_hdr_t
 
	ghdr
;

228 
uöt16
 
	g§cAddr
;

229 
uöt8
 
	göôExtAddr
[
Z_EXTADDR_LEN
];

230 
uöt8
 
	gmëhod
;

231 
uöt8
 
	g≠sSecuª
;

232 
uöt8
 
	gnwkSecuª
;

234 } 
	tZDO_E°ablishKeyInd_t
;

238 
oßl_evít_hdr_t
 
	ghdr
;

239 
uöt16
 
	g§cAddr
;

240 
uöt8
 
	gkeyTy≥
;

241 
uöt8
 
	gkeySeqNum
;

242 
uöt8
 
	gkey
[
SEC_KEY_LEN
];

243 
uöt8
 
	g§cExtAddr
[
Z_EXTADDR_LEN
];

244 
uöt8
 
	göôüt‹
;

245 
uöt8
 
	g£cuª
;

246 } 
	tZDO_Tøn•‹tKeyInd_t
;

250 
oßl_evít_hdr_t
 
	ghdr
;

251 
uöt16
 
	g§cAddr
;

252 
uöt8
 
	gdevExtAddr
[
Z_EXTADDR_LEN
];

253 
uöt16
 
	gdevAddr
;

254 
uöt8
 
	g°©us
;

255 } 
	tZDO_Upd©eDevi˚Ind_t
;

259 
oßl_evít_hdr_t
 
	ghdr
;

260 
uöt16
 
	g§cAddr
;

261 
uöt8
 
	gchûdExtAddr
[
Z_EXTADDR_LEN
];

262 } 
	tZDO_RemoveDevi˚Ind_t
;

266 
oßl_evít_hdr_t
 
	ghdr
;

267 
uöt16
 
	g§cAddr
;

268 
uöt8
 
	gkeyTy≥
;

269 
uöt8
 
	g∑πExtAddr
[
Z_EXTADDR_LEN
];

270 } 
	tZDO_Reque°KeyInd_t
;

274 
oßl_evít_hdr_t
 
	ghdr
;

275 
uöt16
 
	g§cAddr
;

276 
uöt8
 
	gkeySeqNum
;

277 } 
	tZDO_SwôchKeyInd_t
;

281 
oßl_evít_hdr_t
 
	ghdr
;

282 
APSME_AuthítiˇãInd_t
 
	g≠s
;

283 } 
	tZDO_AuthítiˇãInd_t
;

287 
oßl_evít_hdr_t
 
	ghdr
;

288 
APSME_AuthítiˇãCfm_t
 
	g≠s
;

289 } 
	tZDO_AuthítiˇãCfm_t
;

293 
oßl_evít_hdr_t
 
	ghdr
;

294 
uöt16
 
	gnwkAddr
;

295 
uöt8
 
	gnumInClu°îs
;

296 
uöt16
 *
	gpInClu°îs
;

297 
uöt8
 
	gnumOutClu°îs
;

298 
uöt16
 *
	gpOutClu°îs
;

299 } 
	tZDO_M©chDescR•Sít_t
;

304 
uöt8
 
ZDAµTaskID
;

305 
uöt8
 
nwkSètus
;

306 
devSèãs_t
 
devSèã
;

311 
zAddrTy≥_t
 
ZDAµNwkAddr
;

312 
uöt8
 
ßveExtAddr
[];

314 
uöt8
 
zd≠pMgmtNwkDiscR•TønsSeq
;

315 
uöt8
 
zd≠pMgmtNwkDiscReqInProgªss
;

316 
zAddrTy≥_t
 
zd≠pMgmtNwkDiscR•Addr
;

317 
uöt8
 
zd≠pMgmtNwkDiscSèπIndex
;

318 
uöt8
 
zd≠pMgmtSavedNwkSèã
;

320 
uöt8
 
ZDO_U£ExãndedPANID
[
Z_EXTADDR_LEN
];

325 
ZDO_AddrCh™geIndiˇti⁄CB
–
uöt16
 
√wAddr
 );

333 
ZDAµ_Inô
–
uöt8
 
èsk_id
 );

338 
UINT16
 
ZDAµ_evít_lo›
–
uöt8
 
èsk_id
, UINT16 
evíts
 );

370 
uöt8
 
ZDOInôDevi˚
–
uöt16
 
°¨tDñay
 );

376 
ZDAµ_SídEvítMsg
–
uöt8
 
cmd
, uöt8 
Àn
, uöt8 *
buf
 );

381 
ZSètus_t
 
ZDAµ_E°ablishKey
–
uöt8
 
ídPoöt
,

382 
uöt16
 
nwkAddr
,

383 
uöt8
* 
extAddr
 );

389 
ZDAµ_Nëw‹kInô
–
uöt16
 
dñay
 );

402 
ZSètus_t
 
ZDO_Nëw‹kDiscovîyC⁄fúmCB
–
uöt8
 
Resu…Cou¡
,

403 
√tw‹kDesc_t
 *
Nëw‹kLi°
 );

409 
ZDO_Nëw‹kF‹m©i⁄C⁄fúmCB
–
ZSètus_t
 
Sètus
 );

414 
ZDO_JoöC⁄fúmCB
–
uöt16
 
P™Id
, 
ZSètus_t
 
Sètus
 );

419 
ZSètus_t
 
ZDO_JoöIndiˇti⁄CB
–
uöt16
 
Sh‹tAddªss
,

420 
uöt8
 *
ExãndedAddªss
, uöt8 
C≠abûôyInf‹m©i⁄
, uöt8 
ty≥
 );

425 
ZDO_C⁄˚¡øt‹Indiˇti⁄CB
–
uöt16
 
nwkAddr
 );

431 
ZDO_SèπRouãrC⁄fúmCB
–
ZSètus_t
 
Sètus
 );

437 
ZDO_LóveCnf
–
NLME_LóveCnf_t
* 
˙f
 );

442 
ZDO_LóveInd
–
NLME_LóveInd_t
* 
öd
 );

447 
ZDO_SyncIndiˇti⁄CB
–
uöt8
 
ty≥
, 
uöt16
 
sh‹tAddr
 );

452 
ZDO_M™ytoO√FaûuªIndiˇti⁄CB
( );

457 
ZDO_PﬁlC⁄fúmCB
–
uöt8
 
°©us
 );

462 
ZSètus_t
 
ZDO_Upd©eDevi˚Indiˇti⁄
–
uöt8
 *
extAddr
, uöt8 
°©us
 );

469 
ZDAµ_InMsgCB
–
zdoIncomögMsg_t
 *
öMsg
 );

471 
ZDO_SèπRouãrC⁄fúm
–
ZSètus_t
 
Sètus
 );

479 
ZDAµ_NwkSèãUpd©eCB
( );

489 
ZDAµ_Ch™geM©chDescRe•Pîmissi⁄
–
uöt8
 
ídpoöt
, uöt8 
a˘i⁄
 );

495 
ZDAµ_Re£tNwkKey
( );

503 
uöt8
 
ZDAµ_SèπJoöögCy˛e
( );

511 
uöt8
 
ZDAµ_St›JoöögCy˛e
( );

517 
ZDAµ_A¬oun˚NewAddªss
( );

522 
ZDAµ_NVUpd©e
( );

528 
uöt16
 
ZDAµ_Co‹dSèπPANIDC⁄Êi˘CB
–uöt16 
∑nid
 );

533 #ifde‡
__˝lu•lus


	@Components/stack/zdo/ZDConfig.c

46 
	~"ZComdef.h
"

47 
	~"AF.h
"

48 
	~"ZDObje˘.h
"

49 
	~"ZDC⁄fig.h
"

66 
NodeDes¸ùt‹F‹m©_t
 
	gZDO_C⁄fig_Node_Des¸ùt‹
;

67 
NodePowîDes¸ùt‹F‹m©_t
 
	gZDO_C⁄fig_Powî_Des¸ùt‹
;

95 
	$ZDC⁄fig_InôDes¸ùt‹s
( )

97 
	`ZDC⁄fig_Upd©eNodeDes¸ùt‹
();

98 
	`ZDC⁄fig_Upd©ePowîDes¸ùt‹
();

99 
	}
}

110 
	$ZDC⁄fig_Upd©eNodeDes¸ùt‹
( )

113 i‡–
ZG_BUILD_COORDINATOR_TYPE
 && 
ZG_DEVICE_COORDINATOR_TYPE
 )

114 
ZDO_C⁄fig_Node_Des¸ùt‹
.
LogiˇlTy≥
 = 
NODETYPE_COORDINATOR
;

115 i‡–
ZSTACK_ROUTER_BUILD
 )

116 
ZDO_C⁄fig_Node_Des¸ùt‹
.
LogiˇlTy≥
 = 
NODETYPE_ROUTER
;

117 i‡–
ZSTACK_END_DEVICE_BUILD
 )

118 
ZDO_C⁄fig_Node_Des¸ùt‹
.
LogiˇlTy≥
 = 
NODETYPE_DEVICE
;

120 
ZDO_C⁄fig_Node_Des¸ùt‹
.
Com∂exDescAvaû
 = 
FALSE
;

121 
ZDO_C⁄fig_Node_Des¸ùt‹
.
U£rDescAvaû
 = 
FALSE
;

122 
ZDO_C⁄fig_Node_Des¸ùt‹
.
Re£rved
 = 0;

123 
ZDO_C⁄fig_Node_Des¸ùt‹
.
APSFœgs
 = 0;

124 
ZDO_C⁄fig_Node_Des¸ùt‹
.
FªquícyB™d
 = 
NODEFREQ_2400
;

127 i‡–
ZSTACK_ROUTER_BUILD
 )

129 
ZDO_C⁄fig_Node_Des¸ùt‹
.
C≠abûôyFœgs


130 (
CAPINFO_DEVICETYPE_FFD
 | 
CAPINFO_POWER_AC
 | 
CAPINFO_RCVR_ON_IDLE
);

132 i‡–
ZG_BUILD_COORDINATOR_TYPE
 && 
ZG_DEVICE_COORDINATOR_TYPE
 )

133 
ZDO_C⁄fig_Node_Des¸ùt‹
.
C≠abûôyFœgs
 |
CAPINFO_ALTPANCOORD
;

135 i‡–
ZSTACK_END_DEVICE_BUILD
 )

137 
ZDO_C⁄fig_Node_Des¸ùt‹
.
C≠abûôyFœgs
 = (
CAPINFO_DEVICETYPE_RFD


138 #i‡–
RFD_RCVC_ALWAYS_ON
 =
TRUE
)

139 | 
CAPINFO_RCVR_ON_IDLE


145 
ZDO_C⁄fig_Node_Des¸ùt‹
.
M™uÁ˘uªrCode
[0] = 0;

146 
ZDO_C⁄fig_Node_Des¸ùt‹
.
M™uÁ˘uªrCode
[1] = 0;

149 
ZDO_C⁄fig_Node_Des¸ùt‹
.
MaxBuf„rSize
 = 
MAX_BUFFER_SIZE
;

152 
ZDO_C⁄fig_Node_Des¸ùt‹
.
MaxInTøns„rSize
[0] = 
	`LO_UINT16
–
MAX_TRANSFER_SIZE
 );

153 
ZDO_C⁄fig_Node_Des¸ùt‹
.
MaxInTøns„rSize
[1] = 
	`HI_UINT16
–
MAX_TRANSFER_SIZE
 );

156 
ZDO_C⁄fig_Node_Des¸ùt‹
.
MaxOutTøns„rSize
[0] = 
	`LO_UINT16
–
MAX_TRANSFER_SIZE
 );

157 
ZDO_C⁄fig_Node_Des¸ùt‹
.
MaxOutTøns„rSize
[1] = 
	`HI_UINT16
–
MAX_TRANSFER_SIZE
 );

160 
ZDO_C⁄fig_Node_Des¸ùt‹
.
SîvîMask
 = 0;

164 
ZDO_C⁄fig_Node_Des¸ùt‹
.
Des¸ùt‹C≠abûôy
 = 0;

165 
	}
}

176 
	$ZDC⁄fig_Upd©ePowîDes¸ùt‹
( )

179 i‡–
ZSTACK_ROUTER_BUILD
 )

181 
ZDO_C⁄fig_Powî_Des¸ùt‹
.
PowîMode
 = 
NODECURPWR_RCVR_ALWAYS_ON
;

182 
ZDO_C⁄fig_Powî_Des¸ùt‹
.
AvaûabÀPowîSour˚s
 = 
NODEAVAILPWR_MAINS
;

183 
ZDO_C⁄fig_Powî_Des¸ùt‹
.
CuºítPowîSour˚
 = 
NODEAVAILPWR_MAINS
;

184 
ZDO_C⁄fig_Powî_Des¸ùt‹
.
CuºítPowîSour˚Levñ
 = 
NODEPOWER_LEVEL_100
;

186 i‡–
ZSTACK_END_DEVICE_BUILD
 )

188 i‡–
zgPﬁlR©e
 )

189 
ZDO_C⁄fig_Powî_Des¸ùt‹
.
PowîMode
 = 
NODECURPWR_RCVR_AUTO
;

191 
ZDO_C⁄fig_Powî_Des¸ùt‹
.
PowîMode
 = 
NODECURPWR_RCVR_STIM
;

193 
ZDO_C⁄fig_Powî_Des¸ùt‹
.
AvaûabÀPowîSour˚s
 = 
NODEAVAILPWR_RECHARGE
;

194 
ZDO_C⁄fig_Powî_Des¸ùt‹
.
CuºítPowîSour˚
 = 
NODEAVAILPWR_RECHARGE
;

195 
ZDO_C⁄fig_Powî_Des¸ùt‹
.
CuºítPowîSour˚Levñ
 = 
NODEPOWER_LEVEL_66
;

197 
	}
}

	@Components/stack/zdo/ZDConfig.h

42 #i‚de‡
ZDCONFIG_H


43 
	#ZDCONFIG_H


	)

45 #ifde‡
__˝lu•lus


53 
	~"AF.h
"

58 #i‡
deföed
 ( 
MT_ZDO_FUNC
 )

60 
	#ZDO_NWKADDR_REQUEST


	)

61 
	#ZDO_IEEEADDR_REQUEST


	)

62 
	#ZDO_MATCH_REQUEST


	)

63 
	#ZDO_NODEDESC_REQUEST


	)

64 
	#ZDO_POWERDESC_REQUEST


	)

65 
	#ZDO_SIMPLEDESC_REQUEST


	)

66 
	#ZDO_ACTIVEEP_REQUEST


	)

68 
	#ZDO_COMPLEXDESC_REQUEST


	)

69 
	#ZDO_USERDESC_REQUEST


	)

70 
	#ZDO_USERDESCSET_REQUEST


	)

71 
	#ZDO_ENDDEVICEBIND_REQUEST


	)

72 
	#ZDO_BIND_UNBIND_REQUEST


	)

73 
	#ZDO_SERVERDISC_REQUEST


	)

74 
	#ZDO_NETWORKSTART_REQUEST


	)

76 
	#ZDO_COMPLEXDESC_RESPONSE


	)

77 
	#ZDO_USERDESC_RESPONSE


	)

78 
	#ZDO_USERDESCSET_RESPONSE


	)

79 
	#ZDO_SERVERDISC_RESPONSE


	)

80 
	#ZDO_ENDDEVICE_ANNCE


	)

82 #i‡
deföed
 ( 
MT_ZDO_MGMT
 )

83 
	#ZDO_MGMT_NWKDISC_REQUEST


	)

84 
	#ZDO_MGMT_LQI_REQUEST


	)

85 
	#ZDO_MGMT_RTG_REQUEST


	)

86 
	#ZDO_MGMT_BIND_REQUEST


	)

87 
	#ZDO_MGMT_LEAVE_REQUEST


	)

88 
	#ZDO_MGMT_JOINDIRECT_REQUEST


	)

89 
	#ZDO_MGMT_PERMIT_JOIN_REQUEST


	)

90 
	#ZDO_MGMT_NWKUPDATE_REQUEST


	)

91 
	#ZDO_MGMT_NWKDISC_RESPONSE


	)

92 
	#ZDO_MGMT_LQI_RESPONSE


	)

93 
	#ZDO_MGMT_RTG_RESPONSE


	)

94 
	#ZDO_MGMT_BIND_RESPONSE


	)

95 
	#ZDO_MGMT_LEAVE_RESPONSE


	)

96 
	#ZDO_MGMT_JOINDIRECT_RESPONSE


	)

97 
	#ZDO_MGMT_PERMIT_JOIN_RESPONSE


	)

98 
	#ZDO_MGMT_NWKUPDATE_NOTIFY


	)

108 
	#ZDO_MATCH_REQUEST


	)

116 
	#ZDO_ENDDEVICEBIND_REQUEST


	)

125 
	#ZDO_ENDDEVICE_ANNCE


	)

142 #i‡
deföed
 ( 
REFLECTOR
 )

144 #i‡!
deföed
(
ZDO_NWKADDR_REQUEST
)

145 
	#ZDO_NWKADDR_REQUEST


	)

147 #i‡!
deföed
(
ZDO_IEEEADDR_REQUEST
)

148 
	#ZDO_IEEEADDR_REQUEST


	)

150 
	#ZDO_BIND_UNBIND_RESPONSE


	)

159 
	#MAX_BUFFER_SIZE
 80

	)

161 #i‡
deföed
 ( 
ZIGBEE_FRAGMENTATION
 )

163 
	#MAX_TRANSFER_SIZE
 160

	)

165 
	#MAX_TRANSFER_SIZE
 80

	)

168 
	#MAX_ENDPOINTS
 240

	)

171 
	#ZDOLOGICALTYPE_MASK
 0x07

	)

172 
	#ZDOAPSFLAGS_MASK
 0x07

	)

173 
	#ZDOFREQUENCYBANDS_MASK
 0x1F

	)

174 
	#ZDOAPSFLAGS_BITLEN
 3

	)

176 
	#SIMPLE_DESC_DATA_SIZE
 7

	)

177 
	#NODE_DESC_DATA_SIZE
 10

	)

180 
	#ZDOENDPOINT_BITLEN
 5

	)

181 
	#ZDOENDPOINT_MASK
 0x1F

	)

182 
	#ZDOINTERFACE_MASK
 0x07

	)

183 
	#ZDOAPPFLAGS_MASK
 0x0F

	)

184 
	#ZDOAPPDEVVER_MASK
 0x0F

	)

185 
	#ZDOAPPDEVVER_BITLEN
 4

	)

191 
NodeDes¸ùt‹F‹m©_t
 
ZDO_C⁄fig_Node_Des¸ùt‹
;

192 
NodePowîDes¸ùt‹F‹m©_t
 
ZDO_C⁄fig_Powî_Des¸ùt‹
;

197 
ZDC⁄fig_InôDes¸ùt‹s
( );

198 
ZDC⁄fig_Upd©eNodeDes¸ùt‹
( );

199 
ZDC⁄fig_Upd©ePowîDes¸ùt‹
( );

206 #ifde‡
__˝lu•lus


	@Components/stack/zdo/ZDNwkMgr.c

40 #ifde‡
__˝lu•lus


48 
	~"ZComdef.h
"

49 
	~"nwk_utû.h
"

50 
	~"ZDAµ.h
"

51 
	~"ZDObje˘.h
"

52 
	~"ZGlobÆs.h
"

53 
	~"ZDNwkMgr.h
"

55 #i‡
deföed
–
MT_ZDO_FUNC
 )

56 
	~"MT_ZDO.h
"

59 #i‡
deföed
 ( 
LCD_SUPPORTED
 )

60 
	~"OnBﬂrd.h
"

64 
	~"hÆ_lcd.h
"

70 
	#ONE_MINUTE
 60000

71 

	)

72 #i‡
deföed
 ( 
LCD_SUPPORTED
 )

73 c⁄° 
NwkMgrSå_1
[] = "NM-failÇot hi";

74 c⁄° 
NwkMgrSå_2
[] = "NM-cur<last fail";

75 c⁄° 
NwkMgrSå_3
[] = "NM-energyÅoo hi";

76 c⁄° 
NwkMgrSå_4
[] = "NM-energyÇot up";

89 
uöt8
 
ZDNwkMgr_TaskID
 = 0;

96 
uöt8
 
ZDNwkMgr_MgmtNwkUpd©eNŸifyTønsSeq
 = 0;

97 
zAddrTy≥_t
 
ZDNwkMgr_MgmtNwkUpd©eNŸifyAddr
;

98 
uöt16
 
ZDNwkMgr_Upd©eNŸifyTimî
 = 0;

99 
uöt8
 
ZDNwkMgr_NumUpd©eNŸifySít
 = 0;

100 
uöt8
 
ZDNwkMgr_WaôögF‹NŸifyC⁄fúm
 = 
FALSE
;

101 
uöt16
 
ZDNwkMgr_TŸÆTønsmissi⁄s
;

102 
uöt16
 
ZDNwkMgr_TxFaûuªs
;

104 
ZDO_MgmtNwkUpd©eReq_t
 
ZDNwkMgr_MgmtNwkUpd©eReq
;

106 #i‡
deföed
 ( 
NWK_MANAGER
 )

107 
uöt16
 
ZDNwkMgr_Upd©eReque°Timî
 = 0;

108 
uöt8
 
ZDNwkMgr_La°Ch™√lE√rgy
 = 0;

109 
uöt16
 
ZDNwkMgr_La°Ch™√lFaûuªR©e
 = 0;

112 
uöt8
 
ZDNwkMgr_NewCh™√l
;

115 #i‡
deföed
 ( 
NWK_MANAGER
 )

116 
uöt8
 
ZDNwkMgr_P™IdUpd©eInProgªss
 = 
FALSE
;

123 (*
pZDNwkMgr_Rï‹tCh™√lI¡î„ªn˚
)–
NLME_Ch™I¡î„ªn˚_t
 *
ch™I¡î„ªn˚
 ) = 
NULL
;

124 (*
pZDNwkMgr_Pro˚ssD©aC⁄fúm
)–
afD©aC⁄fúm_t
 *
afD©aC⁄fúm
 ) = 
NULL
;

125 (*
pZDNwkMgr_EDSˇnC⁄fúmCB
)–
NLME_EDSˇnC⁄fúm_t
 *
EDSˇnC⁄fúm
 ) = 
NULL
;

128 (*
pZDNwkMgr_Nëw‹kRï‹tCB
)–
ZDNwkMgr_Nëw‹kRï‹t_t
 *
pRï‹t
 ) = 
NULL
;

129 (*
pZDNwkMgr_Nëw‹kUpd©eCB
)–
ZDNwkMgr_Nëw‹kUpd©e_t
 *
pUpd©e
 ) = 
NULL
;

135 
ZDNwkMgr_Pro˚ssSîvîDiscR•
–
zdoIncomögMsg_t
 *
öMsg
 );

136 
ZDNwkMgr_SëNwkM™agîAddr
–
uöt16
 
nwkM™agîAddr
 );

139 
ZDNwkMgr_Pro˚ssMsgCBs
–
zdoIncomögMsg_t
 *
öMsg
 );

141 
ZDNwkMgr_Pro˚ssMgmtNwkUpd©eReq
–
zdoIncomögMsg_t
 *
öMsg
 );

142 
ZDNwkMgr_Pro˚ssCh™√lI¡î„ªn˚
–
ZDNwkMgr_Ch™I¡î„ªn˚_t
 *
pCh™I¡î„ªn˚
 );

143 
ZDNwkMgr_Pro˚ssEDSˇnC⁄fúm
–
ZDNwkMgr_EDSˇnC⁄fúm_t
 *
pEDSˇnC⁄fúm
 );

144 
ZDNwkMgr_CheckF‹Ch™√lI¡î„ªn˚
–
ZDNwkMgr_EDSˇnC⁄fúm_t
 *
pEDSˇnC⁄fúm
 );

145 
ZDNwkMgr_BuûdAndSídUpd©eNŸify
–
uöt8
 
TønsSeq
, 
zAddrTy≥_t
 *
d°Addr
,

146 
uöt16
 
tŸÆTønsmissi⁄s
, uöt16 
txFaûuªs
,

147 
ZDNwkMgr_EDSˇnC⁄fúm_t
 *
pEDSˇnC⁄fúm
, 
uöt8
 
txO±i⁄s
 );

148 
ZDNwkMgr_EDSˇnC⁄fúmCB
–
NLME_EDSˇnC⁄fúm_t
 *
EDSˇnC⁄fúm
 );

149 
ZDNwkMgr_Pro˚ssD©aC⁄fúm
–
afD©aC⁄fúm_t
 *
afD©aC⁄fúm
 );

150 
ZDNwkMgr_Rï‹tCh™√lI¡î„ªn˚
–
NLME_Ch™I¡î„ªn˚_t
 *
ch™I¡î„ªn˚
 );

152 #i‡
deföed
 ( 
NWK_MANAGER
 )

153 
ZDNwkMgr_Pro˚ssMgmtNwkUpd©eNŸify
–
zdoIncomögMsg_t
 *
öMsg
 );

154 
ZDNwkMgr_CheckF‹Ch™√lCh™ge
–
ZDO_MgmtNwkUpd©eNŸify_t
 *
pNŸify
 );

158 #i‡
deföed
 ( 
NWK_MANAGER
 )

159 
ZDNwkMgr_Nëw‹kRï‹tCB
–
ZDNwkMgr_Nëw‹kRï‹t_t
 *
pRï‹t
 );

160 
ZDNwkMgr_Nëw‹kUpd©eCB
–
ZDNwkMgr_Nëw‹kUpd©e_t
 *
pUpd©e
 );

162 
ZDNwkMgr_Pro˚ssNëw‹kRï‹t
–
ZDNwkMgr_Nëw‹kRï‹t_t
 *
pNëw‹kRï‹t
 );

163 
ZDNwkMgr_Pro˚ssNëw‹kUpd©e
–
ZDNwkMgr_Nëw‹kUpd©e_t
 *
pNëw‹kUpd©e
 );

180 
ZDNwkMgr_Inô
–
byã
 
èsk_id
 )

183 
ZDNwkMgr_TaskID
 = 
èsk_id
;

185 
ZDO_Regi°îF‹ZDOMsg
–
ZDNwkMgr_TaskID
, 
Sîvî_Discovîy_r•
 );

188 
ZDO_Regi°îF‹ZDOMsg
–
ZDNwkMgr_TaskID
, 
Mgmt_NWK_Upd©e_ªq
 );

189 #i‡
deföed
 ( 
NWK_MANAGER
 )

190 
ZDO_Regi°îF‹ZDOMsg
–
ZDNwkMgr_TaskID
, 
Mgmt_NWK_Upd©e_nŸify
 );

193 
pZDNwkMgr_EDSˇnC⁄fúmCB
 = 
ZDNwkMgr_EDSˇnC⁄fúmCB
;

194 
pZDNwkMgr_Pro˚ssD©aC⁄fúm
 = 
ZDNwkMgr_Pro˚ssD©aC⁄fúm
;

195 
pZDNwkMgr_Rï‹tCh™√lI¡î„ªn˚
 = 
ZDNwkMgr_Rï‹tCh™√lI¡î„ªn˚
;

198 #i‡
deföed
 ( 
NWK_MANAGER
 )

199 
pZDNwkMgr_Nëw‹kRï‹tCB
 = 
ZDNwkMgr_Nëw‹kRï‹tCB
;

200 
pZDNwkMgr_Nëw‹kUpd©eCB
 = 
ZDNwkMgr_Nëw‹kUpd©eCB
;

203 
ZDNwkMgr_MgmtNwkUpd©eNŸifyAddr
.
addrMode
 = 
Addr16Bô
;

204 
ZDNwkMgr_MgmtNwkUpd©eNŸifyAddr
.
addr
.
sh‹tAddr
 = 
INVALID_NODE_ADDR
;

220 
UINT16
 
ZDNwkMgr_evít_lo›
–
byã
 
èsk_id
, UINT16 
evíts
 )

222 
oßl_evít_hdr_t
 *
msgPå
;

223 ()
èsk_id
;

225 i‡–
evíts
 & 
SYS_EVENT_MSG
 )

227 
msgPå
 = (
oßl_evít_hdr_t
 *)
oßl_msg_ª˚ive
–
ZDNwkMgr_TaskID
 );

228  
msgPå
 )

230  
msgPå
->
evít
 )

232 
ZDO_CB_MSG
:

234 
ZDNwkMgr_Pro˚ssMsgCBs
–(
zdoIncomögMsg_t
 *)
msgPå
 );

237 
NM_CHANNEL_INTERFERE
:

239 
ZDNwkMgr_Pro˚ssCh™√lI¡î„ªn˚
–(
ZDNwkMgr_Ch™I¡î„ªn˚_t
 *)
msgPå
 );

242 
NM_ED_SCAN_CONFIRM
:

244 
ZDNwkMgr_Pro˚ssEDSˇnC⁄fúm
–(
ZDNwkMgr_EDSˇnC⁄fúm_t
 *)
msgPå
 );

246 #i‡
deföed
 ( 
NWK_MANAGER
 )

247 
ZDO_NETWORK_REPORT
:

249 
ZDNwkMgr_Pro˚ssNëw‹kRï‹t
–(
ZDNwkMgr_Nëw‹kRï‹t_t
 *)
msgPå
 );

252 
ZDO_NETWORK_UPDATE
:

254 
ZDNwkMgr_Pro˚ssNëw‹kUpd©e
–(
ZDNwkMgr_Nëw‹kUpd©e_t
 *)
msgPå
 );

262 
oßl_msg_dóŒoˇã
–(
uöt8
 *)
msgPå
 );

265 
msgPå
 = (
oßl_evít_hdr_t
 *)
oßl_msg_ª˚ive
–
ZDNwkMgr_TaskID
 );

269  (
evíts
 ^ 
SYS_EVENT_MSG
);

272 i‡–
evíts
 & 
ZDNWKMGR_CHANNEL_CHANGE_EVT
 )

275 
_NIB
.
nwkLogiˇlCh™√l
 = 
ZDNwkMgr_NewCh™√l
;

276 
ZMacSëReq
–
ZMacCh™√l
, &
ZDNwkMgr_NewCh™√l
 );

279 
ZDAµ_NwkSèãUpd©eCB
();

282 
_NIB
.
nwkTŸÆTønsmissi⁄s
 = 0;

283 
nwkTønsmissi⁄Faûuªs
–
TRUE
 );

285  ( 
evíts
 ^ 
ZDNWKMGR_CHANNEL_CHANGE_EVT
 );

288 i‡–
evíts
 & 
ZDNWKMGR_UPDATE_NOTIFY_EVT
 )

291 i‡–
ZDNwkMgr_Upd©eNŸifyTimî
 > 0 )

293 
ZDNwkMgr_Upd©eNŸifyTimî
--;

294 
oßl_°¨t_timîEx
–
ZDNwkMgr_TaskID
, 
ZDNWKMGR_UPDATE_NOTIFY_EVT
, 
ONE_MINUTE
 );

298 
ZDNwkMgr_NumUpd©eNŸifySít
 = 0;

301  ( 
evíts
 ^ 
ZDNWKMGR_UPDATE_NOTIFY_EVT
 );

304 #i‡
deföed
 ( 
NWK_MANAGER
 )

305 i‡–
evíts
 & 
ZDNWKMGR_UPDATE_REQUEST_EVT
 )

308 i‡–
ZDNwkMgr_Upd©eReque°Timî
 > 0 )

310 
ZDNwkMgr_Upd©eReque°Timî
--;

311 
oßl_°¨t_timîEx
–
ZDNwkMgr_TaskID
, 
ZDNWKMGR_UPDATE_REQUEST_EVT
, 
ONE_MINUTE
 );

314  ( 
evíts
 ^ 
ZDNWKMGR_UPDATE_REQUEST_EVT
 );

318 i‡–
evíts
 & 
ZDNWKMGR_SCAN_REQUEST_EVT
 )

320 i‡–
ZDNwkMgr_MgmtNwkUpd©eReq
.
sˇnCou¡
 > 0 )

322 i‡–
NLME_EDSˇnReque°
–
ZDNwkMgr_MgmtNwkUpd©eReq
.
ch™√lMask
,

323 
ZDNwkMgr_MgmtNwkUpd©eReq
.
sˇnDuøti⁄
 ) =
ZSuc˚ss
 )

325 
ZDNwkMgr_MgmtNwkUpd©eReq
.
sˇnCou¡
--;

329  ( 
evíts
 ^ 
ZDNWKMGR_SCAN_REQUEST_EVT
 );

345 
ZDNwkMgr_Pro˚ssMsgCBs
–
zdoIncomögMsg_t
 *
öMsg
 )

347  
öMsg
->
˛u°îID
 )

349 
Mgmt_NWK_Upd©e_ªq
:

350 
ZDNwkMgr_Pro˚ssMgmtNwkUpd©eReq
–
öMsg
 );

352 #i‡
deföed
 ( 
NWK_MANAGER
 )

353 
Mgmt_NWK_Upd©e_nŸify
:

354 
ZDNwkMgr_Pro˚ssMgmtNwkUpd©eNŸify
–
öMsg
 );

357 
Sîvî_Discovîy_r•
:

358 
ZDNwkMgr_Pro˚ssSîvîDiscR•
–
öMsg
 );

370 #i‡
deföed
 ( 
NWK_MANAGER
 )

381 
ZDNwkMgr_Pro˚ssMgmtNwkUpd©eNŸify
–
zdoIncomögMsg_t
 *
öMsg
 )

383 i‡–
zgNwkMgrMode
 =
ZDNWKMGR_ENABLE
 )

385 
ZDO_MgmtNwkUpd©eNŸify_t
 *
pNŸify
 = 
ZDO_P¨£MgmtNwkUpd©eNŸify
–
öMsg
 );

386 i‡–
pNŸify
 )

388 
ZDNwkMgr_CheckF‹Ch™√lCh™ge
–
pNŸify
 );

390 
oßl_mem_‰ì
–
pNŸify
 );

406 
ZDNwkMgr_CheckF‹Ch™√lCh™ge
–
ZDO_MgmtNwkUpd©eNŸify_t
 *
pNŸify
 )

408 
uöt8
 
i
;

409 
uöt16
 
ÁûuªR©e
;

410 
uöt8
 
lowe°E√rgyIndex
;

411 
uöt8
 
lowe°E√rgyVÆue
 = 0xFF;

415 
ÁûuªR©e
 = ( 
pNŸify
->
å™smissi⁄Faûuªs
 * 100 ) /ÖNŸify->
tŸÆTønsmissi⁄s
;

416 i‡–
ÁûuªR©e
 < 
ZDNWKMGR_CC_TX_FAILURE
 )

418 #i‡
deföed
 ( 
LCD_SUPPORTED
 )

419 
HÆLcdWrôeSåög
–(*)
NwkMgrSå_1
, 
HAL_LCD_LINE_1
 );

420 
HÆLcdWrôeSåögVÆueVÆue
–": ", 
ÁûuªR©e
, 10, 
ZDNWKMGR_CC_TX_FAILURE
, 10, 
HAL_LCD_LINE_2
 );

427 i‡–
ÁûuªR©e
 < 
ZDNwkMgr_La°Ch™√lFaûuªR©e
 )

429 #i‡
deföed
 ( 
LCD_SUPPORTED
 )

430 
HÆLcdWrôeSåög
–(*)
NwkMgrSå_2
, 
HAL_LCD_LINE_1
 );

431 
HÆLcdWrôeSåögVÆueVÆue
–": ", 
ÁûuªR©e
, 10,

432 
ZDNwkMgr_La°Ch™√lFaûuªR©e
, 10, 
HAL_LCD_LINE_2
 );

439  
i
 = 0; i < 
pNŸify
->
li°Cou¡
; i++ )

441 i‡–
pNŸify
->
íîgyVÆues
[
i
] < 
lowe°E√rgyVÆue
 )

443 
lowe°E√rgyIndex
 = 
i
;

444 
lowe°E√rgyVÆue
 = 
pNŸify
->
íîgyVÆues
[
i
];

450 i‡–
lowe°E√rgyVÆue
 > 
ZDNWKMGR_ACCEPTABLE_ENERGY_LEVEL
 )

452 #i‡
deföed
 ( 
LCD_SUPPORTED
 )

453 
HÆLcdWrôeSåög
–(*)
NwkMgrSå_3
, 
HAL_LCD_LINE_1
 );

454 
HÆLcdWrôeSåögVÆueVÆue
–": ", 
lowe°E√rgyVÆue
, 10,

455 
ZDNWKMGR_ACCEPTABLE_ENERGY_LEVEL
, 10, 
HAL_LCD_LINE_2
 );

461  
i
 = 0; i < 
ED_SCAN_MAXCHANNELS
; i++ )

463 i‡––(
uöt32
)1 << 
i
 ) & 
pNŸify
->
sˇ¬edCh™√ls
 )

465 i‡–
lowe°E√rgyIndex
 == 0 )

467 
lowe°E√rgyIndex
--;

471 i‡––
_NIB
.
nwkLogiˇlCh™√l
 !
i
 ) && ( 
ZDNwkMgr_Upd©eReque°Timî
 == 0 ) )

473 
uöt32
 
ch™√lMask
;

474 
zAddrTy≥_t
 
d°Addr
;

477 
ZDNwkMgr_NewCh™√l
 = 
i
;

485 
ZDNwkMgr_La°Ch™√lE√rgy
 = 
lowe°E√rgyVÆue
;

486 
ZDNwkMgr_La°Ch™√lFaûuªR©e
 = 
ÁûuªR©e
;

491 
d°Addr
.
addrMode
 = 
AddrBrﬂdˇ°
;

492 
d°Addr
.
addr
.
sh‹tAddr
 = 
NWK_BROADCAST_SHORTADDR_DEVRXON
;

493 
ch™√lMask
 = (
uöt32
)1 << 
i
;

496 
NLME_SëUpd©eID
(
_NIB
.
nwkUpd©eId
 + 1);

498 
ZDP_MgmtNwkUpd©eReq
–&
d°Addr
, 
ch™√lMask
, 0x„, 0, 
_NIB
.
nwkUpd©eId
, 0 );

504 
ZDNwkMgr_Upd©eReque°Timî
 = 
ZDNWKMGR_UPDATE_REQUEST_TIMER
;

505 
oßl_°¨t_timîEx
–
ZDNwkMgr_TaskID
, 
ZDNWKMGR_UPDATE_REQUEST_EVT
, 
ONE_MINUTE
 );

512 
oßl_°¨t_timîEx
–
ZDNwkMgr_TaskID
, 
ZDNWKMGR_CHANNEL_CHANGE_EVT
,

513 
ZDNWKMGR_BCAST_DELIVERY_TIME
 );

528 
ZDNwkMgr_Pro˚ssMgmtNwkUpd©eReq
–
zdoIncomögMsg_t
 *
öMsg
 )

530 
ZDO_MgmtNwkUpd©eReq_t
 
Req
;

532 
ZDO_P¨£MgmtNwkUpd©eReq
–
öMsg
, &
Req
 );

534 i‡–
Req
.
sˇnDuøti⁄
 <= 0x05 )

537 i‡––!
öMsg
->
wasBrﬂdˇ°
 ) &&

538 –
Req
.
sˇnCou¡
 > 
ZDNWKMGR_MIN_SCAN_COUNT
 ) &&

539 –
Req
.
sˇnCou¡
 <
ZDNWKMGR_MAX_SCAN_COUNT
 ) )

541 i‡–
NLME_EDSˇnReque°
–
Req
.
ch™√lMask
, Req.
sˇnDuøti⁄
 ) =
ZSuc˚ss
 )

544 
ZDNwkMgr_MgmtNwkUpd©eNŸifyTønsSeq
 = 
öMsg
->
TønsSeq
;

545 
ZDNwkMgr_MgmtNwkUpd©eNŸifyAddr
.
addr
.
sh‹tAddr
 = 
öMsg
->
§cAddr
.addr.shortAddr;

547 
Req
.
sˇnCou¡
--;

550 
ZDNwkMgr_MgmtNwkUpd©eReq
 = 
Req
;

554 i‡–
Req
.
sˇnDuøti⁄
 == 0xFE )

558 i‡–
Req
.
nwkUpd©eId
 > 
_NIB
.nwkUpdateId )

560 
uöt8
 
i
;

563 
NLME_SëUpd©eID
(
Req
.
nwkUpd©eId
);

566  
i
 = 0; i < 
ED_SCAN_MAXCHANNELS
; i++ )

568 i‡––(
uöt32
)1 << 
i
 ) & 
Req
.
ch™√lMask
 )

574 i‡–
_NIB
.
nwkLogiˇlCh™√l
 !
i
 )

576 
ZDNwkMgr_NewCh™√l
 = 
i
;

584 
oßl_°¨t_timîEx
–
ZDNwkMgr_TaskID
, 
ZDNWKMGR_CHANNEL_CHANGE_EVT
,

585 
ZDNWKMGR_BCAST_DELIVERY_TIME
 );

589 i‡–
Req
.
sˇnDuøti⁄
 == 0xFF )

592 i‡–
Req
.
nwkUpd©eId
 > 
_NIB
.nwkUpdateId )

594 
NLME_SëUpd©eID
(
Req
.
nwkUpd©eId
);

596 i‡––
Req
.
ch™√lMask
 !0 ) && ( 
_NIB
.
ch™√lLi°
 != Req.channelMask ) )

598 
_NIB
.
ch™√lLi°
 = 
Req
.
ch™√lMask
;

601 
ZDAµ_NwkSèãUpd©eCB
();

604 
ZDNwkMgr_SëNwkM™agîAddr
–
Req
.
nwkM™agîAddr
 );

610 i‡–!
öMsg
->
wasBrﬂdˇ°
 )

612 
ZDNwkMgr_MgmtNwkUpd©eNŸifyAddr
.
addr
.
sh‹tAddr
 = 
öMsg
->
§cAddr
.addr.shortAddr;

613 
ZDP_MgmtNwkUpd©eNŸify
–
öMsg
->
TønsSeq
, &
ZDNwkMgr_MgmtNwkUpd©eNŸifyAddr
,

614 
ZDP_INVALID_REQTYPE
, 0, 0, 0, 0, 
NULL
, 
AF_TX_OPTIONS_NONE
, 
Ál£
 );

628 
ZDNwkMgr_Pro˚ssSîvîDiscR•
–
zdoIncomögMsg_t
 *
öMsg
 )

630 
ZDO_SîvîDiscR•_t
 
R•
;

632 
ZDO_P¨£SîvîDiscR•
–
öMsg
, &
R•
 );

634 i‡–
R•
.
°©us
 =
ZSuc˚ss
 )

637 i‡–
R•
.
£rvîMask
 & 
NETWORK_MANAGER
 )

640 
ZDNwkMgr_SëNwkM™agîAddr
–
öMsg
->
§cAddr
.
addr
.
sh‹tAddr
 );

655 
ZDNwkMgr_Pro˚ssCh™√lI¡î„ªn˚
–
ZDNwkMgr_Ch™I¡î„ªn˚_t
 *
pCh™I¡î„ªn˚
 )

660 i‡–
ZDNwkMgr_NumUpd©eNŸifySít
 < 4 )

663 i‡–
NLME_EDSˇnReque°
–
MAX_CHANNELS_24GHZ
, 
_NIB
.
sˇnDuøti⁄
 ) =
ZSuc˚ss
 )

666 
ZDNwkMgr_TŸÆTønsmissi⁄s
 = 
pCh™I¡î„ªn˚
->
tŸÆTønsmissi⁄s
;

667 
ZDNwkMgr_TxFaûuªs
 = 
pCh™I¡î„ªn˚
->
txFaûuªs
;

670 
ZDNwkMgr_MgmtNwkUpd©eReq
.
sˇnCou¡
 = 0xFF;

685 
ZDNwkMgr_Pro˚ssEDSˇnC⁄fúm
–
ZDNwkMgr_EDSˇnC⁄fúm_t
 *
pEDSˇnC⁄fúm
 )

687 i‡–
ZDNwkMgr_MgmtNwkUpd©eReq
.
sˇnCou¡
 == 0xFF )

690 
ZDNwkMgr_CheckF‹Ch™√lI¡î„ªn˚
–
pEDSˇnC⁄fúm
 );

692 
ZDNwkMgr_MgmtNwkUpd©eReq
.
sˇnCou¡
 = 0;

697 
uöt16
 
txFaûuªs
 = 
nwkTønsmissi⁄Faûuªs
–
FALSE
 );

699 
ZDNwkMgr_BuûdAndSídUpd©eNŸify
–
ZDNwkMgr_MgmtNwkUpd©eNŸifyTønsSeq
,

700 &
ZDNwkMgr_MgmtNwkUpd©eNŸifyAddr
,

701 
_NIB
.
nwkTŸÆTønsmissi⁄s
, 
txFaûuªs
,

702 
pEDSˇnC⁄fúm
, 
AF_TX_OPTIONS_NONE
 );

704 i‡–
ZDNwkMgr_MgmtNwkUpd©eReq
.
sˇnCou¡
 > 0 )

706 
oßl_°¨t_timîEx
–
ZDNwkMgr_TaskID
, 
ZDNWKMGR_SCAN_REQUEST_EVT
, 50 );

721 
ZDNwkMgr_CheckF‹Ch™√lI¡î„ªn˚
–
ZDNwkMgr_EDSˇnC⁄fúm_t
 *
pEDSˇnC⁄fúm
 )

723 
uöt8
 
i
;

724 
uöt8
 
ch™√lE√rgy
 = 0;

725 
uöt8
 
íîgyIn¸ó£d
 = 
FALSE
;

728 i‡––(
uöt32
)1 << 
_NIB
.
nwkLogiˇlCh™√l
 ) & 
pEDSˇnC⁄fúm
->
sˇ¬edCh™√ls
 )

730 
ch™√lE√rgy
 = 
pEDSˇnC⁄fúm
->
íîgyDëe˘Li°
[
_NIB
.
nwkLogiˇlCh™√l
];

736  
i
 = 0; i < 
ED_SCAN_MAXCHANNELS
; i++ )

738 i‡–––(
uöt32
)1 << 
i
 ) & 
pEDSˇnC⁄fúm
->
sˇ¬edCh™√ls
 ) &&

739 –
ch™√lE√rgy
 > 
pEDSˇnC⁄fúm
->
íîgyDëe˘Li°
[
i
] ) )

741 
íîgyIn¸ó£d
 = 
TRUE
;

749 i‡–
íîgyIn¸ó£d
 )

752 
ZDNwkMgr_MgmtNwkUpd©eNŸifyAddr
.
addr
.
sh‹tAddr
 = 
_NIB
.
nwkM™agîAddr
;

753 
ZDNwkMgr_BuûdAndSídUpd©eNŸify
–0, &
ZDNwkMgr_MgmtNwkUpd©eNŸifyAddr
,

754 
ZDNwkMgr_TŸÆTønsmissi⁄s
, 
ZDNwkMgr_TxFaûuªs
,

755 
pEDSˇnC⁄fúm
, 
AF_MSG_ACK_REQUEST
 );

756 
ZDNwkMgr_WaôögF‹NŸifyC⁄fúm
 = 
TRUE
;

758 i‡–
ZDNwkMgr_NumUpd©eNŸifySít
 == 0 )

761 
ZDNwkMgr_Upd©eNŸifyTimî
 = 
ZDNWKMGR_UPDATE_NOTIFY_TIMER
;

762 
oßl_°¨t_timîEx
–
ZDNwkMgr_TaskID
, 
ZDNWKMGR_UPDATE_NOTIFY_EVT
, 
ONE_MINUTE
 );

765 
ZDNwkMgr_NumUpd©eNŸifySít
++;

767 #i‡
deföed
 ( 
LCD_SUPPORTED
 )

770 
HÆLcdWrôeSåög
–(*)
NwkMgrSå_4
, 
HAL_LCD_LINE_1
 );

771 
HÆLcdWrôeSåögVÆueVÆue
–": ", 
_NIB
.
nwkLogiˇlCh™√l
, 10, 
ch™√lE√rgy
, 10, 
HAL_LCD_LINE_2
 );

788 
ZDNwkMgr_BuûdAndSídUpd©eNŸify
–
uöt8
 
TønsSeq
, 
zAddrTy≥_t
 *
d°Addr
,

789 
uöt16
 
tŸÆTønsmissi⁄s
, uöt16 
txFaûuªs
,

790 
ZDNwkMgr_EDSˇnC⁄fúm_t
 *
pEDSˇnC⁄fúm
,

791 
uöt8
 
txO±i⁄s
 )

793 
uöt8
 
i
;

794 
uöt8
 
li°Cou¡
 = 0;

795 
uöt8
 *
íîgyVÆues
 = 
NULL
;

798  
i
 = 0; i < 
ED_SCAN_MAXCHANNELS
; i++ )

800 i‡––(
uöt32
)1 << 
i
 ) & 
pEDSˇnC⁄fúm
->
sˇ¬edCh™√ls
 )

801 
li°Cou¡
++;

804 i‡–
li°Cou¡
 > 0 )

806 
íîgyVÆues
 = (
uöt8
 *)
oßl_mem_Æloc
–
li°Cou¡
 );

807 i‡–
íîgyVÆues
 )

809 
uöt8
 
j
 = 0;

811  
i
 = 0; i < 
ED_SCAN_MAXCHANNELS
; i++ )

813 i‡––(
uöt32
)1 << 
i
 ) & 
pEDSˇnC⁄fúm
->
sˇ¬edCh™√ls
 )

814 
íîgyVÆues
[
j
++] = 
pEDSˇnC⁄fúm
->
íîgyDëe˘Li°
[
i
];

820 
ZDP_MgmtNwkUpd©eNŸify
–
TønsSeq
, 
d°Addr
, 
pEDSˇnC⁄fúm
->
°©us
,

821 
pEDSˇnC⁄fúm
->
sˇ¬edCh™√ls
,

822 
tŸÆTønsmissi⁄s
, 
txFaûuªs
,

823 
li°Cou¡
, 
íîgyVÆues
, 
txO±i⁄s
, 
Ál£
 );

824 i‡–
íîgyVÆues
 )

825 
oßl_mem_‰ì
–
íîgyVÆues
 );

828 #i‡
deföed
 ( 
NWK_MANAGER
 )

838 
NwkMgr_SëNwkM™agî
( )

840 i‡–
zgNwkMgrMode
 =
ZDNWKMGR_ENABLE
 )

843 
ZDNwkMgr_SëNwkM™agîAddr
–
_NIB
.
nwkDevAddªss
 );

846 
ZDO_C⁄fig_Node_Des¸ùt‹
.
SîvîMask
 |
NETWORK_MANAGER
;

860 
ZDNwkMgr_SëNwkM™agîAddr
–
uöt16
 
nwkM™agîAddr
 )

862 i‡–
_NIB
.
nwkM™agîAddr
 !=ÇwkManagerAddr )

865 
_NIB
.
nwkM™agîAddr
 =ÇwkManagerAddr;

868 
ZDAµ_NwkSèãUpd©eCB
();

882 
ZDNwkMgr_Rï‹tCh™√lI¡î„ªn˚
–
NLME_Ch™I¡î„ªn˚_t
 *
ch™I¡î„ªn˚
 )

884 
ZDNwkMgr_Ch™I¡î„ªn˚_t
 *
pCh™I¡î„ªn˚
;

887 
pCh™I¡î„ªn˚
 = (
ZDNwkMgr_Ch™I¡î„ªn˚_t
 *)
oßl_msg_Æloˇã
( ( ZDNwkMgr_ChanInterference_t ) );

888 i‡–
pCh™I¡î„ªn˚
 )

890 
pCh™I¡î„ªn˚
->
hdr
.
evít
 = 
NM_CHANNEL_INTERFERE
;

893 
pCh™I¡î„ªn˚
->
tŸÆTønsmissi⁄s
 = 
ch™I¡î„ªn˚
->totalTransmissions;

894 
pCh™I¡î„ªn˚
->
txFaûuªs
 = 
ch™I¡î„ªn˚
->txFailures;

896 
oßl_msg_£nd
–
ZDNwkMgr_TaskID
, (
uöt8
 *)
pCh™I¡î„ªn˚
 );

910 
ZDNwkMgr_EDSˇnC⁄fúmCB
–
NLME_EDSˇnC⁄fúm_t
 *
EDSˇnC⁄fúm
 )

912 
ZDNwkMgr_EDSˇnC⁄fúm_t
 *
pEDSˇnC⁄fúm
;

915 
pEDSˇnC⁄fúm
 = (
ZDNwkMgr_EDSˇnC⁄fúm_t
 *)
oßl_msg_Æloˇã
( ( ZDNwkMgr_EDScanConfirm_t ) );

916 i‡–
pEDSˇnC⁄fúm
 )

918 
pEDSˇnC⁄fúm
->
hdr
.
evít
 = 
NM_ED_SCAN_CONFIRM
;

921 
pEDSˇnC⁄fúm
->
°©us
 = 
EDSˇnC⁄fúm
->status;

922 
pEDSˇnC⁄fúm
->
sˇ¬edCh™√ls
 = 
EDSˇnC⁄fúm
->scannedChannels;

923 
oßl_mem˝y
–
pEDSˇnC⁄fúm
->
íîgyDëe˘Li°
, 
EDSˇnC⁄fúm
->íîgyDëe˘Li°, 
ED_SCAN_MAXCHANNELS
 );

925 
oßl_msg_£nd
–
ZDNwkMgr_TaskID
, (
uöt8
 *)
pEDSˇnC⁄fúm
 );

938 
ZDNwkMgr_Pro˚ssD©aC⁄fúm
–
afD©aC⁄fúm_t
 *
afD©aC⁄fúm
 )

940 i‡–
ZDNwkMgr_WaôögF‹NŸifyC⁄fúm
 &&

941 –
afD©aC⁄fúm
->
å™sID
 == 0 ) &&

942 –
afD©aC⁄fúm
->
hdr
.
°©us
 =
ZSuc˚ss
 ) )

947 
_NIB
.
nwkTŸÆTønsmissi⁄s
 = 0;

948 
nwkTønsmissi⁄Faûuªs
–
TRUE
 );

950 
ZDNwkMgr_WaôögF‹NŸifyC⁄fúm
 = 
FALSE
;

957 #i‡
deföed
 ( 
NWK_MANAGER
 )

970 
ZDNwkMgr_Nëw‹kRï‹tCB
–
ZDNwkMgr_Nëw‹kRï‹t_t
 *
pRï‹t
 )

973 
oßl_msg_£nd
–
ZDNwkMgr_TaskID
, (
uöt8
 *)
pRï‹t
 );

988 
ZDNwkMgr_Nëw‹kUpd©eCB
–
ZDNwkMgr_Nëw‹kUpd©e_t
 *
pUpd©e
 )

991 
oßl_msg_£nd
–
ZDNwkMgr_TaskID
, (
uöt8
 *)
pUpd©e
 );

1003 
ZDNwkMgr_Pro˚ssNëw‹kRï‹t
–
ZDNwkMgr_Nëw‹kRï‹t_t
 *
pNëw‹kRï‹t
 )

1005 
uöt8
 
i
;

1006 
uöt16
 
√wPID
;

1007 
uöt8
 
unique
 = 
TRUE
;

1009 i‡–
pNëw‹kRï‹t
->
ªp‹tTy≥
 =
NWKREPORT_PANID_CONFLICT
 )

1011 i‡–
ZDNwkMgr_P™IdUpd©eInProgªss
 =
FALSE
 )

1016 
√wPID
 = (
uöt16
)
oßl_ønd
();

1021  
i
 = 0; i < 
pNëw‹kRï‹t
->
ªp‹tInfoC¡
; i++ )

1023 i‡–
pNëw‹kRï‹t
->
∑nIDs
[
i
] =
√wPID
 )

1025 
unique
 = 
FALSE
;

1029 }  !
unique
 );

1032 
NLME_SídNëw‹kUpd©e
–
NWK_BROADCAST_SHORTADDR
, 
NWKUPDATE_PANID_UPDATE
,

1033 
_NIB
.
exãndedPANID
, _NIB.
nwkUpd©eId
+1, 
√wPID
 );

1035 
ZDNwkMgr_P™IdUpd©eInProgªss
 = 
TRUE
;

1049 
ZDNwkMgr_Pro˚ssNëw‹kUpd©e
–
ZDNwkMgr_Nëw‹kUpd©e_t
 *
pNëw‹kUpd©e
 )

1051 i‡–
pNëw‹kUpd©e
->
upd©eTy≥
 =
NWKUPDATE_PANID_UPDATE
 )

1054 
ZDAµ_NwkSèãUpd©eCB
();

1056 
ZDNwkMgr_P™IdUpd©eInProgªss
 = 
FALSE
;

	@Components/stack/zdo/ZDNwkMgr.h

40 #i‚de‡
ZDNWKMGR_H


41 
	#ZDNWKMGR_H


	)

43 #ifde‡
__˝lu•lus


51 
	~"ZComDef.h
"

52 
	~"nwk_globÆs.h
"

53 
	~"nwk_utû.h
"

54 
	~"ZDAµ.h
"

61 
	#ZDNWKMGR_DISABLE
 0x00

	)

62 
	#ZDNWKMGR_ENABLE
 0x01

	)

65 
	#ZDNWKMGR_ACCEPTABLE_ENERGY_LEVEL
 0x1E

	)

68 
	#ZDNWKMGR_MIN_TRANSMISSIONS
 20

	)

71 
	#ZDNWKMGR_CI_TX_FAILURE
 25

	)

74 
	#ZDNWKMGR_CC_TX_FAILURE
 50

	)

77 
	#ZDNWKMGR_MIN_SCAN_COUNT
 0

	)

78 
	#ZDNWKMGR_MAX_SCAN_COUNT
 5

	)

81 
	#ZDNWKMGR_UPDATE_NOTIFY_TIMER
 60

82 
	#ZDNWKMGR_UPDATE_REQUEST_TIMER
 60

83 

	)

85 
	#ZDNWKMGR_CHANNEL_CHANGE_EVT
 0x0001

	)

86 
	#ZDNWKMGR_UPDATE_NOTIFY_EVT
 0x0002

	)

87 
	#ZDNWKMGR_UPDATE_REQUEST_EVT
 0x0004

	)

88 
	#ZDNWKMGR_SCAN_REQUEST_EVT
 0x0008

	)

90 
	#ZDNWKMGR_BCAST_DELIVERY_TIME
 ( 
_NIB
.
Brﬂdˇ°DñivîyTime
 * 100 )

	)

99 
oßl_evít_hdr_t
 
hdr
;

100 
uöt8
 
å™sSeq
;

101 
uöt16
 
§cAddr
;

102 
uöt32
 
ch™√lMask
;

103 
uöt8
 
sˇnDuøti⁄
;

104 
uöt8
 
sˇnCou¡
;

105 
öt16
 
nwkM™agîAddr
;

106 
uöt8
 
wasBrﬂdˇ°
;

107 } 
	tZDNwkMgr_MgmtNwkUpd©eReque°_t
;

112 
oßl_evít_hdr_t
 
hdr
;

113 
uöt16
 
§cAddr
;

114 
uöt8
 
°©us
;

115 
uöt32
 
sˇ¬edCh™√ls
;

116 
uöt16
 
tŸÆTønsmissi⁄s
;

117 
uöt16
 
txFaûuªs
;

118 
uöt8
 
li°Cou¡
;

119 
uöt8
 *
íîgyVÆues
;

120 } 
	tZDNwkMgr_MgmtNwkUpd©eNŸify_t
;

125 
oßl_evít_hdr_t
 
hdr
;

126 
uöt16
 
tŸÆTønsmissi⁄s
;

127 
uöt16
 
txFaûuªs
;

128 } 
	tZDNwkMgr_Ch™I¡î„ªn˚_t
;

133 
oßl_evít_hdr_t
 
hdr
;

134 
uöt8
 
°©us
;

135 
uöt32
 
sˇ¬edCh™√ls
;

136 
uöt8
 
íîgyDëe˘Li°
[
ED_SCAN_MAXCHANNELS
];

137 } 
	tZDNwkMgr_EDSˇnC⁄fúm_t
;

142 
oßl_evít_hdr_t
 
hdr
;

143 
uöt16
 
§cAddr
;

144 
uöt8
 
ªp‹tTy≥
;

145 
uöt8
 
EPID
[
Z_EXTADDR_LEN
];

146 
uöt8
 
ªp‹tInfoC¡
;

147 
uöt16
 
∑nIDs
[];

148 } 
	tZDNwkMgr_Nëw‹kRï‹t_t
;

153 
oßl_evít_hdr_t
 
hdr
;

154 
uöt8
 
upd©eTy≥
;

155 
uöt8
 
upd©eInfoC¡
;

156 
uöt16
 
√wP™ID
;

157 } 
	tZDNwkMgr_Nëw‹kUpd©e_t
;

162 
byã
 
ZDNwkMgr_TaskID
;

174 
ZDNwkMgr_Inô
–
byã
 
èsk_id
 );

179 
UINT16
 
ZDNwkMgr_evít_lo›
–
byã
 
èsk_id
, UINT16 
evíts
 );

185 (*
pZDNwkMgr_EDSˇnC⁄fúmCB
)–
NLME_EDSˇnC⁄fúm_t
 *
EDSˇnC⁄fúm
 );

186 (*
pZDNwkMgr_Pro˚ssD©aC⁄fúm
)–
afD©aC⁄fúm_t
 *
afD©aC⁄fúm
 );

187 (*
pZDNwkMgr_Rï‹tCh™√lI¡î„ªn˚
)–
NLME_Ch™I¡î„ªn˚_t
 *
ch™I¡î„ªn˚
 );

190 (*
pZDNwkMgr_Nëw‹kRï‹tCB
)–
ZDNwkMgr_Nëw‹kRï‹t_t
 *
pRï‹t
 );

191 (*
pZDNwkMgr_Nëw‹kUpd©eCB
)–
ZDNwkMgr_Nëw‹kUpd©e_t
 *
pUpd©e
 );

193 #i‡
deföed
 ( 
NWK_MANAGER
 )

197 
NwkMgr_SëNwkM™agî
( );

203 #ifde‡
__˝lu•lus


	@Components/stack/zdo/ZDObject.c

43 
	~"ZComdef.h
"

44 
	~"OSAL.h
"

45 
	~"OSAL_Nv.h
"

46 
	~"πg.h
"

47 
	~"NLMEDE.h
"

48 
	~"nwk_globÆs.h
"

49 
	~"APS.h
"

50 
	~"APSMEDE.h
"

51 
	~"AssocLi°.h
"

52 
	~"BödögTabÀ.h
"

53 
	~"AddrMgr.h
"

54 
	~"AF.h
"

55 
	~"ZDObje˘.h
"

56 
	~"ZDProfûe.h
"

57 
	~"ZDC⁄fig.h
"

58 
	~"ZDSecMgr.h
"

59 
	~"ZDAµ.h
"

60 
	~"nwk_utû.h
"

61 
	~"ZGlobÆs.h
"

63 #i‡
deföed
–
LCD_SUPPORTED
 )

64 
	~"OnBﬂrd.h
"

68 
	~"hÆ_lcd.h
"

78 
	#ZDO_Pro˚ssMgmtPîmôJoöTimeout
 
NLME_PîmôJoöögTimeout


	)

81 
	#ZDO_MGMT_RTG_ENTRY_ACTIVE
 0x00

	)

82 
	#ZDO_MGMT_RTG_ENTRY_DISCOVERY_UNDERWAY
 0x01

	)

83 
	#ZDO_MGMT_RTG_ENTRY_DISCOVERY_FAILED
 0x02

	)

84 
	#ZDO_MGMT_RTG_ENTRY_INACTIVE
 0x03

	)

89 #i‡
deföed
 ( 
REFLECTOR
 )

92 
byã
 
	mSrcTønsSeq
;

93 
zAddrTy≥_t
 
	mSrcAddr
;

94 
uöt16
 
	mLoˇlCo‹dö©‹
;

95 
byã
 
	mïI¡f
;

96 
uöt16
 
	mProfûeID
;

97 
byã
 
	mnumInClu°îs
;

98 
uöt16
 *
	möClu°îs
;

99 
byã
 
	mnumOutClu°îs
;

100 
uöt16
 *
	moutClu°îs
;

101 
byã
 
	mSecurôyU£
;

102 
byã
 
	m°©us
;

103 } 
	tZDO_EDBöd_t
;

108 
	mZDMATCH_INIT
,

109 
	mZDMATCH_WAIT_REQ
,

110 
	mZDMATCH_SENDING_BINDS


115 
	mZDMATCH_SENDING_NOT
,

116 
	mZDMATCH_SENDING_UNBIND
,

117 
	mZDMATCH_SENDING_BIND


135 
uöt16
 
	gZDOBuûdBuf
[26];

137 #i‡
deföed
 ( 
REFLECTOR
 )

138 
ZDO_EDBöd_t
 *
	gZDO_EDBöd
;

141 #i‡
deföed
 ( 
MANAGED_SCAN
 )

142 
uöt32
 
	gm™agedSˇnNextCh™√l
 = 0;

143 
uöt32
 
	gm™agedSˇnCh™√lMask
 = 0;

144 
uöt8
 
	gm™agedSˇnTimesPîCh™√l
 = 0;

147 
ZDM©chEndDevi˚Böd_t
 *
	gm©chED
 = (ZDM©chEndDevi˚Böd_à*)
NULL
;

149 
uöt32
 
	g≠sCh™√lMask
 = 0;

154 
ZDODevi˚Sëup
( );

155 #i‡
deföed
 ( 
MANAGED_SCAN
 )

156 
ZDOM™agedSˇn_Next
( );

158 #i‡
deföed
 ( 
REFLECTOR
 )

159 
ZDO_RemoveEndDevi˚Böd
( );

160 
ZDO_SídEDBödR•
–
byã
 
TønsSeq
, 
zAddrTy≥_t
 *
d°Addr
, byã 
Sètus
, byã 
£cU£
 );

162 
byã
 
ZDO_Com∑ªClu°îLi°s
–byã 
numLi°1
, 
uöt16
 *
li°1
,

163 
byã
 
numLi°2
, 
uöt16
 *
li°2
, uöt16 *
pM©ches
 );

164 
ZDO_RemoveM©chMem‹y
( );

165 
uöt8
 
ZDO_C›yM©chInfo
–
ZDEndDevi˚Böd_t
 *
de°Req
, ZDEndDevi˚Böd_à*
§cReq
 );

166 
ZDO_EndDevi˚BödM©chTimeoutCB
( );

167 
uöt8
 *
ZDO_C⁄vîtOTAClu°îs
–uöt8 
˙t
, uöt8 *
öBuf
, 
uöt16
 *
outLi°
 );

178 
	$ZDO_Inô
( )

181 #i‡
	`deföed
 ( 
REFLECTOR
 )

182 
ZDO_EDBöd
 = 
NULL
;

186 
	`oßl_˝yExtAddr
–
ZDO_U£ExãndedPANID
, 
AIB_≠sU£ExãndedPANID
 );

189 
	`ZDODevi˚Sëup
();

190 
	}
}

192 #i‡
deföed
 ( 
MANAGED_SCAN
 )

202 
	$ZDOM™agedSˇn_Next
( )

205 i‡–
m™agedSˇnNextCh™√l
 =0 && 
m™agedSˇnTimesPîCh™√l
 == 0 )

208 
m™agedSˇnNextCh™√l
 = 1;

210  
m™agedSˇnNextCh™√l
 && (
zgDeÁu…Ch™√lLi°
 & managedScanNextChannel) == 0 )

211 
m™agedSˇnNextCh™√l
 <<= 1;

213 
m™agedSˇnCh™√lMask
 = 
m™agedSˇnNextCh™√l
;

214 
m™agedSˇnTimesPîCh™√l
 = 
MANAGEDSCAN_TIMES_PRE_CHANNEL
;

219 i‡–
m™agedSˇnTimesPîCh™√l
 == 0 )

222 
m™agedSˇnCh™√lMask
 = 
m™agedSˇnNextCh™√l
;

223 
m™agedSˇnTimesPîCh™√l
 = 
MANAGEDSCAN_TIMES_PRE_CHANNEL
;

227 
m™agedSˇnTimesPîCh™√l
--;

229 i‡–
m™agedSˇnTimesPîCh™√l
 == 0 )

231 
m™agedSˇnNextCh™√l
 <<= 1;

232  
m™agedSˇnNextCh™√l
 && (
zgDeÁu…Ch™√lLi°
 & managedScanNextChannel) == 0 )

233 
m™agedSˇnNextCh™√l
 <<= 1;

235 i‡–
m™agedSˇnNextCh™√l
 == 0 )

236 
zdoDiscCou¡î
 = 
NUM_DISC_ATTEMPTS
 + 1;

240 
	}
}

252 
	$ZDODevi˚Sëup
( )

254 i‡–
ZG_BUILD_COORDINATOR_TYPE
 )

256 
	`NLME_Co‹dö©‹Inô
();

259 #i‡
	`deföed
 ( 
REFLECTOR
 )

260 
	`APS_ReÊe˘‹Inô
–(
ZG_DEVICE_COORDINATOR_TYPE
Ë? 
APS_REFLECTOR_PUBLIC
 : 
APS_REFLECTOR_PRIVATE
 );

263 i‡–
ZG_BUILD_JOINING_TYPE
 )

265 
	`NLME_Devi˚JoöögInô
();

267 
	}
}

281 
	$ZDO_SèπDevi˚
–
byã
 
logiˇlTy≥
, 
devSèπModes_t
 
°¨tMode
, byã 
bóc⁄Ordî
, byã 
su≥r‰ameOrdî
 )

283 
ZSètus_t
 
ªt
;

284 #i‡
	`deföed
 ( 
ZIGBEE_FREQ_AGILITY
 )

285 
uöt8
 
discRërõs
 = 0;

287 #i‡
	`deföed
 ( 
ZIGBEE_COMMISSIONING
 )

288 
uöt8
 
sˇnC¡
 = 0;

291 
ªt
 = 
ZUnsuµ‹ãdMode
;

293 i‡–
ZG_BUILD_COORDINATOR_TYPE
 && 
logiˇlTy≥
 =
NODETYPE_COORDINATOR
 )

295 i‡–
°¨tMode
 =
MODE_HARD
 )

297 
devSèã
 = 
DEV_COORD_STARTING
;

298 
ªt
 = 
	`NLME_Nëw‹kF‹m©i⁄Reque°
–
zgC⁄figPANID
, 
zgApsU£ExãndedPANID
, 
zgDeÁu…Ch™√lLi°
,

299 
zgDeÁu…SèπögSˇnDuøti⁄
, 
bóc⁄Ordî
,

300 
su≥r‰ameOrdî
, 
Ál£
 );

302 i‡–
°¨tMode
 =
MODE_RESUME
 )

305 
devSèã
 = 
DEV_COORD_STARTING
;

306 
ªt
 = 
	`NLME_SèπRouãrReque°
–
bóc⁄Ordî
, bóc⁄Ordî, 
Ál£
 );

310 #i‡
	`deföed
–
LCD_SUPPORTED
 )

311 
	`HÆLcdWrôeS¸ìn
( "StartDevice ERR", "MODE unknown" );

316 i‡–
ZG_BUILD_JOINING_TYPE
 && (
logiˇlTy≥
 =
NODETYPE_ROUTER
 ||ÜogiˇlTy≥ =
NODETYPE_DEVICE
) )

318 i‡–(
°¨tMode
 =
MODE_JOIN
Ë|| (°¨tModê=
MODE_REJOIN
) )

320 
devSèã
 = 
DEV_NWK_DISC
;

322 #i‡
	`deföed
–
MANAGED_SCAN
 )

323 
	`ZDOM™agedSˇn_Next
();

324 
ªt
 = 
	`NLME_Nëw‹kDiscovîyReque°
–
m™agedSˇnCh™√lMask
, 
BEACON_ORDER_15_MSEC
 );

326 
ªt
 = 
	`NLME_Nëw‹kDiscovîyReque°
–
zgDeÁu…Ch™√lLi°
, 
zgDeÁu…SèπögSˇnDuøti⁄
 );

327 #i‡
	`deföed
 ( 
ZIGBEE_FREQ_AGILITY
 )

328 i‡–!–
ZDO_C⁄fig_Node_Des¸ùt‹
.
C≠abûôyFœgs
 & 
CAPINFO_RCVR_ON_IDLE
 ) &&

329 –
ªt
 =
ZSuc˚ss
 ) && ( ++
discRërõs
 == 4 ) )

337 
zgDeÁu…Ch™√lLi°
 = 
MAX_CHANNELS_24GHZ
;

340 #i‡
	`deföed
 ( 
ZIGBEE_COMMISSIONING
 )

341 i‡(
°¨tMode
 =
MODE_REJOIN
 && 
sˇnC¡
++ >= 5 )

349 
zgDeÁu…Ch™√lLi°
 = 
MAX_CHANNELS_24GHZ
;

354 i‡–
°¨tMode
 =
MODE_RESUME
 )

356 i‡–
logiˇlTy≥
 =
NODETYPE_ROUTER
 )

358 
ZMacSˇnCnf_t
 
sˇnCnf
;

359 
devSèã
 = 
DEV_NWK_ORPHAN
;

362 
sˇnCnf
.
hdr
.
Sètus
 = 
ZSUCCESS
;

363 
sˇnCnf
.
SˇnTy≥
 = 
ZMAC_ORPHAN_SCAN
;

364 
sˇnCnf
.
Unsˇ¬edCh™√ls
 = 0;

365 
sˇnCnf
.
Resu…Li°Size
 = 0;

366 
	`nwk_SˇnJoöögOΩh™
(&
sˇnCnf
);

368 
ªt
 = 
ZSuc˚ss
;

372 
devSèã
 = 
DEV_NWK_ORPHAN
;

373 
ªt
 = 
	`NLME_OΩh™JoöReque°
–
zgDeÁu…Ch™√lLi°
,

374 
zgDeÁu…SèπögSˇnDuøti⁄
 );

379 #i‡
	`deföed
–
LCD_SUPPORTED
 )

380 
	`HÆLcdWrôeS¸ìn
( "StartDevice ERR", "MODE unknown" );

385 i‡–
ªt
 !
ZSuc˚ss
 )

386 
	`oßl_°¨t_timîEx
(
ZDAµTaskID
, 
ZDO_NETWORK_INIT
, 
NWK_RETRY_DELAY
 );

387 
	}
}

401 
	$ZDO_Upd©eNwkSètus
–
devSèãs_t
 
°©e
 )

404 
ïLi°_t
 *
ïDesc
 = 
ïLi°
;

405 
byã
 
bufLí
 = (
oßl_evít_hdr_t
);

406 
oßl_evít_hdr_t
 *
msgPå
;

408 
ZDAµNwkAddr
.
addr
.
sh‹tAddr
 = 
	`NLME_GëSh‹tAddr
();

409 ()
	`NLME_GëExtAddr
();

411  
ïDesc
 )

413 i‡–
ïDesc
->ïDesc->
ídPoöt
 !
ZDO_EP
 )

415 
msgPå
 = (
oßl_evít_hdr_t
 *)
	`oßl_msg_Æloˇã
–
bufLí
 );

416 i‡–
msgPå
 )

418 
msgPå
->
evít
 = 
ZDO_STATE_CHANGE
;

419 
msgPå
->
°©us
 = (
byã
)
°©e
;

421 
	`oßl_msg_£nd
–*(
ïDesc
->ïDesc->
èsk_id
), (
uöt8
 *)
msgPå
 );

424 
ïDesc
 =ÉpDesc->
√xtDesc
;

426 
	}
}

428 #i‡
deföed
 ( 
REFLECTOR
 )

438 
	$ZDO_RemoveEndDevi˚Böd
( )

440 i‡–
ZDO_EDBöd
 !
NULL
 )

443 i‡–
ZDO_EDBöd
->
öClu°îs
 !
NULL
 )

444 
	`oßl_mem_‰ì
–
ZDO_EDBöd
->
öClu°îs
 );

445 i‡–
ZDO_EDBöd
->
outClu°îs
 !
NULL
 )

446 
	`oßl_mem_‰ì
–
ZDO_EDBöd
->
outClu°îs
 );

447 
	`oßl_mem_‰ì
–
ZDO_EDBöd
 );

448 
ZDO_EDBöd
 = 
NULL
;

450 
	}
}

453 #i‡
deföed
 ( 
REFLECTOR
 )

463 
	$ZDO_SídEDBödR•
–
byã
 
TønsSeq
, 
zAddrTy≥_t
 *
d°Addr
, byã 
Sètus
, byã 
£cU£
 )

465 
	`ZDP_EndDevi˚BödR•
–
TønsSeq
, 
d°Addr
, 
Sètus
, 
£cU£
 );

467 #i‡
	`deföed
–
LCD_SUPPORTED
 )

468 
	`HÆLcdWrôeSåög
–"End Devi˚ Böd", 
HAL_LCD_LINE_1
 );

469 i‡–
Sètus
 =
ZDP_SUCCESS
 )

470 
	`HÆLcdWrôeSåög
–"Suc˚s†Sít", 
HAL_LCD_LINE_2
 );

472 
	`HÆLcdWrôeSåög
–"Timeout", 
HAL_LCD_LINE_2
 );

475 
	}
}

491 
byã
 
	$ZDO_Com∑ªClu°îLi°s
–
byã
 
numLi°1
, 
uöt16
 *
li°1
,

492 
byã
 
numLi°2
, 
uöt16
 *
li°2
, uöt16 *
pM©ches
 )

494 
byã
 
x
, 
y
;

495 
uöt16
 
z
;

496 
byã
 
numM©ches
 = 0;

499  
x
 = 0; x < 
numLi°1
; x++ )

501  
y
 = 0; y < 
numLi°2
; y++ )

503 
z
 = 
li°2
[
y
];

504 i‡–
li°1
[
x
] =
z
 )

505 
pM©ches
[
numM©ches
++] = 
z
;

509  ( 
numM©ches
 );

510 
	}
}

528 
byã
 
	$ZDO_AnyClu°îM©ches
–
byã
 
AC¡
, 
uöt16
 *
ALi°
, byã 
BC¡
, uöt16 *
BLi°
 )

530 
byã
 
x
, 
y
;

532  
x
 = 0; x < 
AC¡
; x++ )

534  
y
 = 0; y < 
BC¡
; y++ )

536 i‡–
ALi°
[
x
] =
BLi°
[
y
] )

538  
åue
;

543  
Ál£
;

544 
	}
}

560 
	$ZDO_Pro˚ssNodeDescReq
–
zdoIncomögMsg_t
 *
öMsg
 )

562 
uöt16
 
aoi
 = 
	`BUILD_UINT16
–
öMsg
->
asdu
[0], inMsg->asdu[1] );

563 
NodeDes¸ùt‹F‹m©_t
 *
desc
 = 
NULL
;

565 i‡–
aoi
 =
ZDAµNwkAddr
.
addr
.
sh‹tAddr
 )

567 
desc
 = &
ZDO_C⁄fig_Node_Des¸ùt‹
;

570 i‡–
desc
 !
NULL
 )

572 
	`ZDP_NodeDescMsg
–
öMsg
, 
aoi
, 
desc
 );

576 
	`ZDP_GíîicR•
–
öMsg
->
TønsSeq
, &(öMsg->
§cAddr
),

577 
ZDP_INVALID_REQTYPE
, 
aoi
, 
Node_Desc_r•
, 
öMsg
->
SecurôyU£
 );

579 
	}
}

591 
	$ZDO_Pro˚ssPowîDescReq
–
zdoIncomögMsg_t
 *
öMsg
 )

593 
uöt16
 
aoi
 = 
	`BUILD_UINT16
–
öMsg
->
asdu
[0], inMsg->asdu[1] );

594 
NodePowîDes¸ùt‹F‹m©_t
 *
desc
 = 
NULL
;

596 i‡–
aoi
 =
ZDAµNwkAddr
.
addr
.
sh‹tAddr
 )

598 
desc
 = &
ZDO_C⁄fig_Powî_Des¸ùt‹
;

601 i‡–
desc
 !
NULL
 )

603 
	`ZDP_PowîDescMsg
–
öMsg
, 
aoi
, 
desc
 );

607 
	`ZDP_GíîicR•
–
öMsg
->
TønsSeq
, &(öMsg->
§cAddr
),

608 
ZDP_INVALID_REQTYPE
, 
aoi
, 
Powî_Desc_r•
, 
öMsg
->
SecurôyU£
 );

610 
	}
}

622 
	$ZDO_Pro˚ssSim∂eDescReq
–
zdoIncomögMsg_t
 *
öMsg
 )

624 
Sim∂eDes¸ùti⁄F‹m©_t
 *
sDesc
 = 
NULL
;

625 
uöt16
 
aoi
 = 
	`BUILD_UINT16
–
öMsg
->
asdu
[0], inMsg->asdu[1] );

626 
byã
 
ídPoöt
 = 
öMsg
->
asdu
[2];

627 
byã
 
‰ì
 = 
Ál£
;

628 
byã
 
°©
 = 
ZDP_SUCCESS
;

630 i‡–(
ídPoöt
 =
ZDO_EP
Ë|| (ídPoöà> 
MAX_ENDPOINTS
) )

632 
°©
 = 
ZDP_INVALID_EP
;

634 i‡–
aoi
 =
ZDAµNwkAddr
.
addr
.
sh‹tAddr
 )

636 
‰ì
 = 
	`afFödSim∂eDesc
–&
sDesc
, 
ídPoöt
 );

637 i‡–
sDesc
 =
NULL
 )

639 
°©
 = 
ZDP_NOT_ACTIVE
;

644 i‡–
ZSTACK_ROUTER_BUILD
 )

646 
°©
 = 
ZDP_DEVICE_NOT_FOUND
;

648 i‡–
ZSTACK_END_DEVICE_BUILD
 )

650 
°©
 = 
ZDP_INVALID_REQTYPE
;

654 
	`ZDP_Sim∂eDescMsg
–
öMsg
, 
°©
, 
sDesc
 );

656 i‡–
‰ì
 && 
sDesc
 )

658 
	`oßl_mem_‰ì
–
sDesc
 );

660 
	}
}

672 
	$ZDO_Pro˚ssA˘iveEPReq
–
zdoIncomögMsg_t
 *
öMsg
 )

674 
byã
 
˙t
 = 0;

675 
uöt16
 
aoi
;

676 
byã
 
°©
 = 
ZDP_SUCCESS
;

678 
aoi
 = 
	`BUILD_UINT16
–
öMsg
->
asdu
[0], inMsg->asdu[1] );

680 i‡–
aoi
 =
	`NLME_GëSh‹tAddr
() )

682 
˙t
 = 
	`afNumEndPoöts
() - 1;

683 
	`afEndPoöts
–(
uöt8
 *)
ZDOBuûdBuf
, 
åue
 );

687 
°©
 = 
ZDP_INVALID_REQTYPE
;

690 
	`ZDP_A˘iveEPR•
–
öMsg
->
TønsSeq
, &(öMsg->
§cAddr
), 
°©
,

691 
aoi
, 
˙t
, (
uöt8
 *)
ZDOBuûdBuf
, 
öMsg
->
SecurôyU£
 );

692 
	}
}

704 
uöt8
 *
	$ZDO_C⁄vîtOTAClu°îs
–
uöt8
 
˙t
, uöt8 *
öBuf
, 
uöt16
 *
outLi°
 )

706 
uöt8
 
x
;

708  
x
 = 0; x < 
˙t
; x++ )

711 
outLi°
[
x
] = 
	`BUILD_UINT16
–
öBuf
[0], inBuf[1] );

712 
öBuf
 +–
uöt16
 );

714  ( 
öBuf
 );

715 
	}
}

727 
	$ZDO_Pro˚ssM©chDescReq
–
zdoIncomögMsg_t
 *
öMsg
 )

729 
uöt8
 
ïC¡
 = 0;

730 
uöt8
 
numInClu°îs
;

731 
uöt16
 *
öClu°îs
 = 
NULL
;

732 
uöt8
 
numOutClu°îs
;

733 
uöt16
 *
outClu°îs
 = 
NULL
;

734 
ïLi°_t
 *
ïDesc
;

735 
Sim∂eDes¸ùti⁄F‹m©_t
 *
sDesc
 = 
NULL
;

736 
uöt8
 
Æloˇãd
;

737 
uöt8
 *
msg
;

738 
uöt16
 
aoi
;

739 
uöt16
 
¥ofûeID
;

742 
msg
 = 
öMsg
->
asdu
;

743 
aoi
 = 
	`BUILD_UINT16
–
msg
[0], msg[1] );

744 
¥ofûeID
 = 
	`BUILD_UINT16
–
msg
[2], msg[3] );

745 
msg
 += 4;

747 i‡–
ADDR_BCAST_NOT_ME
 =
	`NLME_IsAddªssBrﬂdˇ°
(
aoi
) )

749 
	`ZDP_M©chDescR•
–
öMsg
->
TønsSeq
, &(öMsg->
§cAddr
), 
ZDP_INVALID_REQTYPE
,

750 
ZDAµNwkAddr
.
addr
.
sh‹tAddr
, 0, 
NULL
, 
öMsg
->
SecurôyU£
 );

753 i‡–(
ADDR_NOT_BCAST
 =
	`NLME_IsAddªssBrﬂdˇ°
(
aoi
)Ë&& (aoò!
ZDAµNwkAddr
.
addr
.
sh‹tAddr
) )

755 
	`ZDP_M©chDescR•
–
öMsg
->
TønsSeq
, &(öMsg->
§cAddr
), 
ZDP_INVALID_REQTYPE
,

756 
ZDAµNwkAddr
.
addr
.
sh‹tAddr
, 0, 
NULL
, 
öMsg
->
SecurôyU£
 );

760 i‡((
numInClu°îs
 = *
msg
++) &&

761 (
öClu°îs
 = (
uöt16
*)
	`oßl_mem_Æloc
–
numInClu°îs
 * ( uint16 ) )))

763 
msg
 = 
	`ZDO_C⁄vîtOTAClu°îs
–
numInClu°îs
, msg, 
öClu°îs
 );

767 
numInClu°îs
 = 0;

770 i‡((
numOutClu°îs
 = *
msg
++) &&

771 (
outClu°îs
 = (
uöt16
 *)
	`oßl_mem_Æloc
–
numOutClu°îs
 * ( uint16 ) )))

773 
msg
 = 
	`ZDO_C⁄vîtOTAClu°îs
–
numOutClu°îs
, msg, 
outClu°îs
 );

777 
numOutClu°îs
 = 0;

781 
ïDesc
 = 
ïLi°
;

782  
ïDesc
 )

785 i‡–
ïDesc
->ïDesc->
ídPoöt
 !
ZDO_EP
 && (ïDesc->
Êags
&
eEP_AŒowM©ch
) )

787 i‡–
ïDesc
->
p‚DescCB
 )

789 
sDesc
 = (
Sim∂eDes¸ùti⁄F‹m©_t
 *)
ïDesc
->
	`p‚DescCB
–
AF_DESCRIPTOR_SIMPLE
,ÉpDesc->ïDesc->
ídPoöt
 );

790 
Æloˇãd
 = 
TRUE
;

794 
sDesc
 = 
ïDesc
->ïDesc->
sim∂eDesc
;

795 
Æloˇãd
 = 
FALSE
;

798 i‡–
sDesc
 && sDesc->
AµProfId
 =
¥ofûeID
 )

800 
uöt8
 *
uöt8Buf
 = (uöt8 *)
ZDOBuûdBuf
;

803 i‡–((
numInClu°îs
 =0Ë&& (
numOutClu°îs
 == 0))

805 || (
	`ZDO_AnyClu°îM©ches
–
numInClu°îs
, 
öClu°îs
,

806 
sDesc
->
AµNumInClu°îs
, sDesc->
pAµInClu°îLi°
 ))

808 || (
	`ZDO_AnyClu°îM©ches
–
numOutClu°îs
, 
outClu°îs
,

809 
sDesc
->
AµNumOutClu°îs
, sDesc->
pAµOutClu°îLi°
 )) )

812 
uöt8
 
bufLí
 = –
ZDO_M©chDescR•Sít_t
 ) + (
numOutClu°îs
 + 
numInClu°îs
Ë* (
uöt16
);

813 
ZDO_M©chDescR•Sít_t
 *
pR•Sít
 = (ZDO_M©chDescR•Sít_à*Ë
	`oßl_msg_Æloˇã
–
bufLí
 );

815 i‡(
pR•Sít
)

817 
pR•Sít
->
hdr
.
evít
 = 
ZDO_MATCH_DESC_RSP_SENT
;

818 
pR•Sít
->
nwkAddr
 = 
öMsg
->
§cAddr
.
addr
.
sh‹tAddr
;

819 
pR•Sít
->
numInClu°îs
 =ÇumInClusters;

820 
pR•Sít
->
numOutClu°îs
 =ÇumOutClusters;

822 i‡(
numInClu°îs
)

824 
pR•Sít
->
pInClu°îs
 = (
uöt16
*) (pRspSent + 1);

825 
	`oßl_mem˝y
(
pR•Sít
->
pInClu°îs
, 
öClu°îs
, 
numInClu°îs
 * (
uöt16
));

829 
pR•Sít
->
pInClu°îs
 = 
NULL
;

832 i‡(
numOutClu°îs
)

834 
pR•Sít
->
pOutClu°îs
 = (
uöt16
*)’R•Síà+ 1Ë+ 
numInClu°îs
;

835 
	`oßl_mem˝y
(
pR•Sít
->
pOutClu°îs
, 
outClu°îs
, 
numOutClu°îs
 * (
uöt16
));

839 
pR•Sít
->
pOutClu°îs
 = 
NULL
;

842 
	`oßl_msg_£nd
–*
ïDesc
->ïDesc->
èsk_id
, (
uöt8
 *)
pR•Sít
 );

845 
uöt8Buf
[
ïC¡
++] = 
sDesc
->
EndPoöt
;

849 i‡–
Æloˇãd
 )

850 
	`oßl_mem_‰ì
–
sDesc
 );

852 
ïDesc
 =ÉpDesc->
√xtDesc
;

856 i‡–
ïC¡
 )

858 i‡–
ZSuc˚ss
 =
	`ZDP_M©chDescR•
–
öMsg
->
TønsSeq
, &(öMsg->
§cAddr
), 
ZDP_SUCCESS
,

859 
ZDAµNwkAddr
.
addr
.
sh‹tAddr
, 
ïC¡
, (
uöt8
 *)
ZDOBuûdBuf
, 
öMsg
->
SecurôyU£
 ) )

861 #i‡
	`deföed
–
LCD_SUPPORTED
 )

862 
	`HÆLcdWrôeS¸ìn
( "Match Desc Req", "Rsp Sent" );

868 #i‡
	`deföed
–
LCD_SUPPORTED
 )

869 
	`HÆLcdWrôeS¸ìn
( "Match Desc Req", "Non Matched" );

873 i‡–
öClu°îs
 !
NULL
 )

874 
	`oßl_mem_‰ì
–
öClu°îs
 );

875 i‡–
outClu°îs
 !
NULL
 )

876 
	`oßl_mem_‰ì
–
outClu°îs
 );

877 
	}
}

890 
	$ZDO_Pro˚ssBödUnbödReq
–
zdoIncomögMsg_t
 *
öMsg
, 
ZDO_BödUnbödReq_t
 *
pReq
 )

892 
zAddrTy≥_t
 
Sour˚Addr
;

893 
byã
 
bödSèt
;

895 
Sour˚Addr
.
addrMode
 = 
Addr64Bô
;

896 
	`oßl_˝yExtAddr
–
Sour˚Addr
.
addr
.
extAddr
, 
pReq
->
§cAddªss
 );

903 i‡–!
	`oßl_ExtAddrEquÆ
–
Sour˚Addr
.
addr
.
extAddr
, 
	`NLME_GëExtAddr
()) ||

904 (
pReq
->
d°Addªss
.
addrMode
 !
Addr64Bô
 &&

905 
pReq
->
d°Addªss
.
addrMode
 !
AddrGroup
) )

907 
bödSèt
 = 
ZDP_NOT_SUPPORTED
;

912 i‡–(
pReq
->
§cEndpoöt
 =0 ||ÖReq->§cEndpoöà> 
MAX_ENDPOINTS
)

913 || (–
pReq
->
d°Addªss
.
addrMode
 =
Addr64Bô
 ) &&

914 (
pReq
->
d°Endpoöt
 =0 ||ÖReq->d°Endpoöà> 
MAX_ENDPOINTS
)) )

916 
bödSèt
 = 
ZDP_INVALID_EP
;

920 i‡–
öMsg
->
˛u°îID
 =
Böd_ªq
 )

923 
bödSèt
 = 
ZDP_TABLE_FULL
;

925 i‡–
	`bödNumOfE¡rõs
(Ë< 
gNWK_MAX_BINDING_ENTRIES
 )

927 i‡–
	`APSME_BödReque°
–
pReq
->
§cEndpoöt
,ÖReq->
˛u°îID
,

928 &(
pReq
->
d°Addªss
),ÖReq->
d°Endpoöt
 ) =
ZSuc˚ss
 )

930 
uöt16
 
nwkAddr
;

933 
bödSèt
 = 
ZDP_SUCCESS
;

936 
	`ZDAµ_NVUpd©e
();

939 i‡–
pReq
->
d°Addªss
.
addrMode
 =
Addr64Bô
 )

941 i‡–
	`APSME_LookupNwkAddr
–
pReq
->
d°Addªss
.
addr
.
extAddr
, &
nwkAddr
 ) =
FALSE
 )

943 
	`ZDP_NwkAddrReq
–
pReq
->
d°Addªss
.
addr
.
extAddr
, 
ZDP_ADDR_REQTYPE_SINGLE
, 0, 0 );

951 i‡–
	`APSME_UnBödReque°
–
pReq
->
§cEndpoöt
,ÖReq->
˛u°îID
,

952 &(
pReq
->
d°Addªss
),ÖReq->
d°Endpoöt
 ) =
ZSuc˚ss
 )

954 
bödSèt
 = 
ZDP_SUCCESS
;

957 
	`ZDAµ_NVUpd©e
();

960 
bödSèt
 = 
ZDP_NO_ENTRY
;

966 
	`ZDP_SídD©a
–&(
öMsg
->
TønsSeq
), &(öMsg->
§cAddr
),

967 (
öMsg
->
˛u°îID
 | 
ZDO_RESPONSE_BIT
), 1, &
bödSèt
,

968 
öMsg
->
SecurôyU£
 );

969 
	}
}

981 
	$ZDO_Upd©eAddrM™agî
–
uöt16
 
nwkAddr
, 
uöt8
 *
extAddr
 )

983 
AddrMgrE¡ry_t
 
addrE¡ry
;

986 
addrE¡ry
.
u£r
 = 
ADDRMGR_USER_DEFAULT
;

987 
addrE¡ry
.
nwkAddr
 =ÇwkAddr;

988 
	`AddrMgrExtAddrSë
–
addrE¡ry
.
extAddr
,ÉxtAddr );

989 
	`AddrMgrE¡ryUpd©e
–&
addrE¡ry
 );

990 
	}
}

1001 
	$ZDO_Pro˚ssSîvîDiscReq
–
zdoIncomögMsg_t
 *
öMsg
 )

1003 
uöt16
 
£rvîMask
 = 
	`BUILD_UINT16
–
öMsg
->
asdu
[0], inMsg->asdu[1] );

1004 
uöt16
 
m©chMask
 = 
£rvîMask
 & 
ZDO_C⁄fig_Node_Des¸ùt‹
.
SîvîMask
;

1006 i‡–
m©chMask
 )

1008 
	`ZDP_SîvîDiscR•
–
öMsg
->
TønsSeq
, &(öMsg->
§cAddr
), 
ZSUCCESS
,

1009 
ZDAµNwkAddr
.
addr
.
sh‹tAddr
, 
m©chMask
, 
öMsg
->
SecurôyU£
 );

1011 
	}
}

1027 
	$ZDO_EndDevi˚TimeoutCB
( )

1029 #i‡
	`deföed
 ( 
REFLECTOR
 )

1030 
byã
 
°©
;

1031 i‡–
ZDO_EDBöd
 )

1033 
°©
 = 
ZDO_EDBöd
->
°©us
;

1036 
	`ZDO_SídEDBödR•
–
ZDO_EDBöd
->
SrcTønsSeq
, &(ZDO_EDBöd->
SrcAddr
),

1037 
°©
, 
ZDO_EDBöd
->
SecurôyU£
 );

1039 
	`ZDO_RemoveEndDevi˚Böd
();

1042 
	}
}

1061 
	$ZDO_Pro˚ssMgmtLqiReq
–
zdoIncomögMsg_t
 *
öMsg
 )

1063 
byã
 
x
;

1064 
byã
 
ödex
;

1065 
byã
 
numIãms
;

1066 
byã
 
maxIãms
;

1067 
ZDP_MgmtLqiIãm_t
* 
èbÀ
 = 
NULL
;

1068 
ZDP_MgmtLqiIãm_t
* 
ôem
;

1069 
√ighb‹E¡ry_t
 
íåy
;

1070 
byã
 
aIãms
;

1071 
assocüãd_devi˚s_t
 *
aDevi˚
;

1072 
AddrMgrE¡ry_t
 
nwkE¡ry
;

1073 
uöt8
 
SèπIndex
 = 
öMsg
->
asdu
[0];

1076 
	`NLME_GëReque°
–
nwkNumNeighb‹TabÀE¡rõs
, 0, &
maxIãms
 );

1079 
aIãms
 = (
uöt8
)
	`AssocCou¡
–
PARENT
, 
CHILD_FFD_RX_IDLE
 );

1082 
maxIãms
 +
aIãms
;

1085 i‡–
maxIãms
 > 
SèπIndex
 )

1087 
numIãms
 = 
maxIãms
 - 
SèπIndex
;

1090 i‡–
numIãms
 > 
ZDO_MAX_LQI_ITEMS
 )

1091 
numIãms
 = 
ZDO_MAX_LQI_ITEMS
;

1094 
èbÀ
 = (
ZDP_MgmtLqiIãm_t
*)
	`oßl_mem_Æloc
( ()

1095 –
numIãms
 * –
ZDP_MgmtLqiIãm_t
 ) ) );

1097 i‡–
èbÀ
 !
NULL
 )

1099 
x
 = 0;

1100 
ôem
 = 
èbÀ
;

1101 
ödex
 = 
SèπIndex
;

1104  ; 
x
 < 
numIãms
; x++ )

1106 i‡–
ödex
 < 
aIãms
 )

1109 
aDevi˚
 = 
	`AssocFödDevi˚
–
ödex
++ );

1112 
ôem
->
∑nID
 = 
_NIB
.
nwkP™Id
;

1113 
	`oßl_˝yExtAddr
–
ôem
->
extP™ID
, 
_NIB
.
exãndedPANID
 );

1114 
ôem
->
nwkAddr
 = 
aDevi˚
->
sh‹tAddr
;

1115 
ôem
->
≥rmô
 = 
ZDP_MGMT_BOOL_UNKNOWN
;

1116 
ôem
->
dïth
 = 0xFF;

1117 
ôem
->
lqi
 = 
aDevi˚
->
lökInfo
.
rxLqi
;

1120 
nwkE¡ry
.
u£r
 = 
ADDRMGR_USER_DEFAULT
;

1121 
nwkE¡ry
.
nwkAddr
 = 
aDevi˚
->
sh‹tAddr
;

1123 i‡–
	`AddrMgrE¡ryLookupNwk
–&
nwkE¡ry
 ) =
TRUE
 )

1125 
	`oßl_˝yExtAddr
–
ôem
->
extAddr
, 
nwkE¡ry
.extAddr );

1129 
	`oßl_mem£t
–
ôem
->
extAddr
, 0xFF, 
Z_EXTADDR_LEN
 );

1133 i‡–
aDevi˚
->
nodeRñ©i⁄
 =
PARENT
 )

1135 i‡–
aDevi˚
->
sh‹tAddr
 == 0 )

1137 
ôem
->
devTy≥
 = 
ZDP_MGMT_DT_COORD
;

1138 
ôem
->
dïth
 = 0;

1142 
ôem
->
devTy≥
 = 
ZDP_MGMT_DT_ROUTER
;

1143 
ôem
->
dïth
 = 
_NIB
.
nodeDïth
 - 1;

1146 
ôem
->
rxOnIdÀ
 = 
ZDP_MGMT_BOOL_UNKNOWN
;

1147 
ôem
->
ªœti⁄
 = 
ZDP_MGMT_REL_PARENT
;

1152 
ôem
->
dïth
 = 
_NIB
.
nodeDïth
 + 1;

1154 i‡–
aDevi˚
->
nodeRñ©i⁄
 < 
CHILD_FFD
 )

1156 
ôem
->
devTy≥
 = 
ZDP_MGMT_DT_ENDDEV
;

1158 i‡–
aDevi˚
->
nodeRñ©i⁄
 =
CHILD_RFD
 )

1160 
ôem
->
rxOnIdÀ
 = 
FALSE
;

1164 
ôem
->
rxOnIdÀ
 = 
TRUE
;

1169 
ôem
->
devTy≥
 = 
ZDP_MGMT_DT_ROUTER
;

1171 i‡–
aDevi˚
->
nodeRñ©i⁄
 =
CHILD_FFD
 )

1173 
ôem
->
rxOnIdÀ
 = 
FALSE
;

1177 
ôem
->
rxOnIdÀ
 = 
TRUE
;

1181 
ôem
->
ªœti⁄
 = 
ZDP_MGMT_REL_CHILD
;

1184 
ôem
++;

1188 i‡–
SèπIndex
 <
aIãms
 )

1190 
ödex
 = 0;

1193 
ödex
 = 
SèπIndex
 - 
aIãms
;

1199  ; 
x
 < 
numIãms
; x++ )

1202 
	`NLME_GëReque°
–
nwkNeighb‹TabÀ
, 
ödex
++, &
íåy
 );

1205 
ôem
->
∑nID
 = 
íåy
.
∑nId
;

1206 
	`oßl_˝yExtAddr
–
ôem
->
extP™ID
, 
_NIB
.
exãndedPANID
 );

1207 
	`oßl_mem£t
–
ôem
->
extAddr
, 0xFF, 
Z_EXTADDR_LEN
 );

1208 
ôem
->
nwkAddr
 = 
íåy
.
√ighb‹Addªss
;

1209 
ôem
->
rxOnIdÀ
 = 
ZDP_MGMT_BOOL_UNKNOWN
;

1210 
ôem
->
ªœti⁄
 = 
ZDP_MGMT_REL_UNKNOWN
;

1211 
ôem
->
≥rmô
 = 
ZDP_MGMT_BOOL_UNKNOWN
;

1212 
ôem
->
dïth
 = 0xFF;

1213 
ôem
->
lqi
 = 
íåy
.
lökInfo
.
rxLqi
;

1215 i‡–
ôem
->
nwkAddr
 == 0 )

1217 
ôem
->
devTy≥
 = 
ZDP_MGMT_DT_COORD
;

1221 
ôem
->
devTy≥
 = 
ZDP_MGMT_DT_ROUTER
;

1224 
ôem
++;

1230 
numIãms
 = 0;

1234 
	`ZDP_MgmtLqiR•
–
öMsg
->
TønsSeq
, &(öMsg->
§cAddr
), 
ZSuc˚ss
, 
maxIãms
,

1235 
SèπIndex
, 
numIãms
, 
èbÀ
, 
Ál£
 );

1237 i‡–
èbÀ
 )

1239 
	`oßl_mem_‰ì
–
èbÀ
 );

1241 
	}
}

1253 
	$ZDO_Pro˚ssMgmtNwkDiscReq
–
zdoIncomögMsg_t
 *
öMsg
 )

1255 
NLME_SˇnFõlds_t
 
sˇn
;

1256 
uöt8
 
ödex
;

1257 
uöt8
 *
msg
;

1259 
msg
 = 
öMsg
->
asdu
;

1260 
sˇn
.
ch™√ls
 = 
	`oßl_buûd_uöt32
–
msg
, 4 );

1261 
msg
 += 4;

1262 
sˇn
.
duøti⁄
 = *
msg
++;

1263 
ödex
 = *
msg
;

1264 
sˇn
.
sˇnTy≥
 = 
ZMAC_ACTIVE_SCAN
;

1265 
sˇn
.
sˇnAµ
 = 
NLME_DISC_SCAN
;

1268 
zd≠pMgmtNwkDiscReqInProgªss
 = 
åue
;

1269 
zd≠pMgmtNwkDiscR•Addr
.
addrMode
 = 
Addr16Bô
;

1270 
zd≠pMgmtNwkDiscR•Addr
.
addr
.
sh‹tAddr
 = 
öMsg
->
§cAddr
.addr.shortAddr;

1271 
zd≠pMgmtNwkDiscSèπIndex
 = 
ödex
;

1272 
zd≠pMgmtNwkDiscR•TønsSeq
 = 
öMsg
->
TønsSeq
;

1274 i‡–
	`NLME_NwkDiscReq2
–&
sˇn
 ) !
ZSuc˚ss
 )

1276 
	`NLME_NwkDiscTîm
();

1280 
	}
}

1282 #i‡
deföed
 ( 
ZDO_MGMT_NWKDISC_RESPONSE
 )

1298 
	$ZDO_FöishPro˚ssögMgmtNwkDiscReq
–
byã
 
Resu…Cou¡
,

1299 
√tw‹kDesc_t
 *
Nëw‹kLi°
 )

1301 
byã
 
cou¡
, 
i
;

1302 
√tw‹kDesc_t
 *
√wDesc
 = 
NULL
, *
pLi°
 = 
Nëw‹kLi°
;

1304 i‡–
ZSTACK_ROUTER_BUILD
 )

1307  
pLi°
 )

1309 i‡–
pLi°
->
∑nId
 =
_NIB
.
nwkP™Id
 )

1315 i‡–!
pLi°
->
√xtDesc
 )

1319 
pLi°
 =ÖLi°->
√xtDesc
;

1325 i‡–!
pLi°
 || (pLi°->
∑nId
 !
_NIB
.
nwkP™Id
) )

1327 
√wDesc
 = (
√tw‹kDesc_t
 *)
	`oßl_mem_Æloc
( (ÇetworkDesc_t ) );

1328 i‡–
√wDesc
 )

1330 
byã
 
pJoö
;

1332 
√wDesc
->
∑nId
 = 
_NIB
.
nwkP™Id
;

1333 
√wDesc
->
logiˇlCh™√l
 = 
_NIB
.
nwkLogiˇlCh™√l
;

1334 
√wDesc
->
bóc⁄Ordî
 = 
_NIB
.beaconOrder;

1335 
√wDesc
->
su≥rFømeOrdî
 = 
_NIB
.superFrameOrder;

1336 
√wDesc
->
vîsi⁄
 = 
	`NLME_GëPrŸocﬁVîsi⁄
();

1337 
√wDesc
->
°ackProfûe
 = 
zgSèckProfûe
;

1339 
	`oßl_˝yExtAddr
–
√wDesc
->
exãndedPANID
, 
_NIB
.extendedPANID);

1341 
	`ZMacGëReq
–
ZMacAssocüti⁄Pîmô
, &
pJoö
 );

1342 
√wDesc
->
cho£nRouãr
 = ((
pJoö
Ë? 
ZDAµNwkAddr
.
addr
.
sh‹tAddr
 :

1343 
INVALID_NODE_ADDR
);

1345 
√wDesc
->
√xtDesc
 = 
Nëw‹kLi°
;

1346 
Nëw‹kLi°
 = 
√wDesc
;

1347 
Resu…Cou¡
++;

1353 i‡–
zd≠pMgmtNwkDiscSèπIndex
 > 
Resu…Cou¡
 )

1355 
cou¡
 = 0;

1359 
cou¡
 = 
Resu…Cou¡
 - 
zd≠pMgmtNwkDiscSèπIndex
;

1360 i‡–
cou¡
 > 
ZDO_MAX_NWKDISC_ITEMS
 )

1362 
cou¡
 = 
ZDO_MAX_NWKDISC_ITEMS
;

1366  
i
 = 0; i < 
zd≠pMgmtNwkDiscSèπIndex
; i++ )

1368 
Nëw‹kLi°
 = Nëw‹kLi°->
√xtDesc
;

1372 
	`ZDP_MgmtNwkDiscR•
–
zd≠pMgmtNwkDiscR•TønsSeq
,

1373 &
zd≠pMgmtNwkDiscR•Addr
, 
ZSuc˚ss
, 
Resu…Cou¡
,

1374 
zd≠pMgmtNwkDiscSèπIndex
,

1375 
cou¡
,

1376 
Nëw‹kLi°
,

1377 
Ál£
 );

1379 i‡–
ZSTACK_ROUTER_BUILD
 )

1381 i‡–
√wDesc
 !
NULL
 )

1383 
	`oßl_mem_‰ì
–
√wDesc
 );

1387 
	`NLME_NwkDiscTîm
();

1388 
	}
}

1404 
	$ZDO_Pro˚ssMgmtRtgReq
–
zdoIncomögMsg_t
 *
öMsg
 )

1406 
byã
 
x
;

1407 
byã
 
maxNumIãms
;

1408 
byã
 
numIãms
 = 0;

1409 
uöt8
 *
pBuf
 = 
NULL
;

1410 
πgIãm_t
 *
pLi°
;

1411 
uöt8
 
SèπIndex
 = 
öMsg
->
asdu
[0];

1414 
	`NLME_GëReque°
–
nwkNumRoutögTabÀE¡rõs
, 0, &
maxNumIãms
 );

1416 i‡–
maxNumIãms
 > 
SèπIndex
 )

1418 
numIãms
 = 
maxNumIãms
 - 
SèπIndex
;

1421 i‡–
numIãms
 > 
ZDO_MAX_RTG_ITEMS
 )

1423 
numIãms
 = 
ZDO_MAX_RTG_ITEMS
;

1427 
pBuf
 = 
	`oßl_mem_Æloc
–()(–
πgIãm_t
 ) * 
numIãms
) );

1429 i‡–
pBuf
 !
NULL
 )

1432 
pLi°
 = (
πgIãm_t
 *)
pBuf
;

1435  
x
 = 0; x < 
numIãms
; x++ )

1437 
	`NLME_GëReque°
–
nwkRoutögTabÀ
, (
uöt16
)(
x
 + 
SèπIndex
), (*)
pLi°
 );

1440  
pLi°
->
°©us
 )

1442 
RT_ACTIVE
:

1443 
pLi°
->
°©us
 = 
ZDO_MGMT_RTG_ENTRY_ACTIVE
;

1446 
RT_DISC
:

1447 
pLi°
->
°©us
 = 
ZDO_MGMT_RTG_ENTRY_DISCOVERY_UNDERWAY
;

1450 
RT_LINK_FAIL
:

1451 
pLi°
->
°©us
 = 
ZDO_MGMT_RTG_ENTRY_DISCOVERY_FAILED
;

1453 
RT_INIT
:

1454 
RT_REPAIR
:

1456 
pLi°
->
°©us
 = 
ZDO_MGMT_RTG_ENTRY_INACTIVE
;

1461 
pLi°
++;

1466 
numIãms
 = 0;

1471 
	`ZDP_MgmtRtgR•
–
öMsg
->
TønsSeq
, &(öMsg->
§cAddr
), 
ZSuc˚ss
, 
maxNumIãms
, 
SèπIndex
, 
numIãms
,

1472 (
πgIãm_t
 *)
pBuf
, 
Ál£
 );

1474 i‡–
pBuf
 )

1476 
	`oßl_mem_‰ì
–
pBuf
 );

1478 
	}
}

1493 
	$ZDO_Pro˚ssMgmtBödReq
–
zdoIncomögMsg_t
 *
öMsg
 )

1495 #i‡
	`deföed
 ( 
REFLECTOR
 )

1496 
byã
 
x
;

1497 
uöt16
 
maxNumIãms
;

1498 
uöt16
 
numIãms
;

1499 
uöt8
 *
pBuf
 = 
NULL
;

1500 
≠sBödögIãm_t
 *
pLi°
;

1501 
uöt8
 
SèπIndex
 = 
öMsg
->
asdu
[0];

1502 
uöt8
 
°©us
;

1505 
	`APSME_GëReque°
–
≠sNumBödögTabÀE¡rõs
, 0, (
byã
*)(&
maxNumIãms
) );

1507 i‡–
maxNumIãms
 > 
SèπIndex
 )

1509 
numIãms
 = 
maxNumIãms
 - 
SèπIndex
;

1513 
numIãms
 = 0;

1517 i‡–
numIãms
 > 
ZDO_MAX_BIND_ITEMS
 )

1519 
numIãms
 = 
ZDO_MAX_BIND_ITEMS
;

1523 i‡–
numIãms
 && (
pBuf
 = 
	`oßl_mem_Æloc
––
≠sBödögIãm_t
 ) *ÇumItems )) )

1525 
°©us
 = 
ZSuc˚ss
;

1528 
pLi°
 = (
≠sBödögIãm_t
 *)
pBuf
;

1531  
x
 = 0; x < 
numIãms
; x++ )

1533 
	`APSME_GëReque°
–
≠sBödögTabÀ
, (
x
 + 
SèπIndex
), (*)
pLi°
 );

1534 
pLi°
++;

1540 
°©us
 = 
ZDP_NOT_PERMITTED
;

1541 
numIãms
 = 0;

1545 
	`ZDP_MgmtBödR•
–
öMsg
->
TønsSeq
, &(öMsg->
§cAddr
), 
°©us
, (
byã
)
maxNumIãms
, 
SèπIndex
,

1546 (
byã
)
numIãms
, (
≠sBödögIãm_t
 *)
pBuf
, 
Ál£
 );

1548 i‡–
pBuf
 )

1550 
	`oßl_mem_‰ì
–
pBuf
 );

1553 ()
öMsg
;

1555 
	}
}

1567 
	$ZDO_Pro˚ssMgmtDúe˘JoöReq
–
zdoIncomögMsg_t
 *
öMsg
 )

1569 
uöt8
 *
devi˚Addr
;

1570 
uöt8
 
ˇpInfo
;

1571 
uöt8
 
°©
;

1574 
devi˚Addr
 = 
öMsg
->
asdu
;

1575 
ˇpInfo
 = 
öMsg
->
asdu
[
Z_EXTADDR_LEN
];

1577 
°©
 = (
byã
Ë
	`NLME_Dúe˘JoöReque°
–
devi˚Addr
, 
ˇpInfo
 );

1579 
	`ZDP_MgmtDúe˘JoöR•
–
öMsg
->
TønsSeq
, &(öMsg->
§cAddr
), 
°©
, 
Ál£
 );

1580 
	}
}

1592 
	$ZDO_Pro˚ssMgmtLóveReq
–
zdoIncomögMsg_t
 *
öMsg
 )

1594 
NLME_LóveReq_t
 
ªq
;

1595 
ZSètus_t
 
°©us
;

1596 
uöt8
 
›ti⁄
;

1597 
uöt8
 *
msg
 = 
öMsg
->
asdu
;

1599 i‡––
	`AddrMgrExtAddrVÆid
–
msg
 ) =
FALSE
 ) ||

1600 –
	`oßl_ExtAddrEquÆ
–
msg
, 
	`NLME_GëExtAddr
(ËË=
TRUE
 ) )

1603 
ªq
.
extAddr
 = 
NULL
;

1608 
ªq
.
extAddr
 = 
msg
;

1611 
›ti⁄
 = 
msg
[
Z_EXTADDR_LEN
];

1612 i‡–
›ti⁄
 & 
ZDP_MGMT_LEAVE_REQ_RC
 )

1614 
ªq
.
ªmoveChûdªn
 = 
TRUE
;

1617 i‡–
›ti⁄
 & 
ZDP_MGMT_LEAVE_REQ_REJOIN
 )

1619 
ªq
.
ªjoö
 = 
TRUE
;

1622 
ªq
.
sûít
 = 
FALSE
;

1624 
°©us
 = 
	`NLME_LóveReq
–&
ªq
 );

1626 
	`ZDP_MgmtLóveR•
–
öMsg
->
TønsSeq
, &(öMsg->
§cAddr
), 
°©us
, 
FALSE
 );

1627 
	}
}

1640 
	$ZDO_Pro˚ssMgmtPîmôJoöReq
–
zdoIncomögMsg_t
 *
öMsg
 )

1642 
uöt8
 
°©
;

1643 
uöt8
 
duøti⁄
;

1644 
uöt8
 
tcsig
;

1646 
duøti⁄
 = 
öMsg
->
asdu
[
ZDP_MGMT_PERMIT_JOIN_REQ_DURATION
];

1647 
tcsig
 = 
öMsg
->
asdu
[
ZDP_MGMT_PERMIT_JOIN_REQ_TC_SIG
];

1650 
°©
 = (
byã
Ë
	`NLME_PîmôJoöögReque°
–
duøti⁄
 );

1653 i‡–
ZG_SECURE_ENABLED
 && 
ZG_BUILD_COORDINATOR_TYPE
 && 
ZG_DEVICE_COORDINATOR_TYPE
 )

1655 i‡–
tcsig
 =
TRUE
 )

1657 
	`ZDSecMgrPîmôJoöög
–
duøti⁄
 );

1662 i‡(
öMsg
->
§cAddr
.
addr
.
sh‹tAddr
 !
NWK_BROADCAST_SHORTADDR
)

1664 
	`ZDP_MgmtPîmôJoöR•
–
öMsg
->
TønsSeq
, &(öMsg->
§cAddr
), 
°©
, 
Ál£
 );

1666 
	}
}

1683 
	$ZDO_Pro˚ssMgmtPîmôJoöTimeout
( )

1685 #i‡
	`deföed
–
ZDO_MGMT_PERMIT_JOIN_RESPONSE
 )

1687 i‡–
ZG_SECURE_ENABLED
 && 
ZG_BUILD_COORDINATOR_TYPE
 && 
ZG_DEVICE_COORDINATOR_TYPE
 )

1689 
	`ZDSecMgrPîmôJoöögTimeout
();

1692 
	}
}

1704 
	$ZDO_Pro˚ssU£rDescReq
–
zdoIncomögMsg_t
 *
öMsg
 )

1706 
uöt16
 
aoi
 = 
	`BUILD_UINT16
–
öMsg
->
asdu
[0], inMsg->asdu[1] );

1707 
U£rDes¸ùt‹F‹m©_t
 
u£rDesc
;

1709 i‡–(
aoi
 =
ZDAµNwkAddr
.
addr
.
sh‹tAddr
Ë&& (
ZSUCCESS
 =
	`oßl_nv_ªad
(

1710 
ZCD_NV_USERDESC
, 0, (
U£rDes¸ùt‹F‹m©_t
), &
u£rDesc
 )) )

1712 
	`ZDP_U£rDescR•
–
öMsg
->
TønsSeq
, &(öMsg->
§cAddr
), 
aoi
, &
u£rDesc
, 
Ál£
 );

1716 
	`ZDP_GíîicR•
(
öMsg
->
TønsSeq
, &(öMsg->
§cAddr
),

1717 
ZDP_NOT_SUPPORTED
, 
aoi
, 
U£r_Desc_r•
, 
öMsg
->
SecurôyU£
 );

1719 
	}
}

1731 
	$ZDO_Pro˚ssU£rDescSë
–
zdoIncomögMsg_t
 *
öMsg
 )

1733 
uöt8
 *
msg
;

1734 
uöt16
 
aoi
;

1735 
U£rDes¸ùt‹F‹m©_t
 
u£rDesc
;

1736 
uöt8
 
outMsg
[3];

1737 
uöt8
 
°©us
;

1739 
msg
 = 
öMsg
->
asdu
;

1740 
aoi
 = 
	`BUILD_UINT16
–
msg
[0], msg[1] );

1742 i‡–
aoi
 =
ZDAµNwkAddr
.
addr
.
sh‹tAddr
 )

1744 
u£rDesc
.
Àn
 = (
msg
[2] < 
AF_MAX_USER_DESCRIPTOR_LEN
) ? msg[2] : AF_MAX_USER_DESCRIPTOR_LEN;

1745 
msg
 ++;

1747 
	`oßl_mem˝y
–
u£rDesc
.
desc
, &
msg
[2], u£rDesc.
Àn
 );

1748 
	`oßl_nv_wrôe
–
ZCD_NV_USERDESC
, 0, (
U£rDes¸ùt‹F‹m©_t
), &
u£rDesc
 );

1749 i‡–
u£rDesc
.
Àn
 != 0 )

1751 
ZDO_C⁄fig_Node_Des¸ùt‹
.
U£rDescAvaû
 = 
TRUE
;

1755 
ZDO_C⁄fig_Node_Des¸ùt‹
.
U£rDescAvaû
 = 
FALSE
;

1758 
°©us
 = 
ZDP_SUCCESS
;

1762 
°©us
 = 
ZDP_NOT_SUPPORTED
;

1765 
outMsg
[0] = 
°©us
;

1766 
outMsg
[1] = 
	`LO_UINT16
–
aoi
 );

1767 
outMsg
[2] = 
	`LO_UINT16
–
aoi
 );

1769 
	`ZDP_SídD©a
–&(
öMsg
->
TønsSeq
), &(öMsg->
§cAddr
), 
U£r_Desc_c⁄f
, 3, 
outMsg
,

1770 
öMsg
->
SecurôyU£
 );

1771 
	}
}

1782 
	$ZDO_Pro˚ssDevi˚A¬˚
–
zdoIncomögMsg_t
 *
öMsg
 )

1784 
ZDO_Devi˚A¬˚_t
 
A¬˚
;

1785 
AddrMgrE¡ry_t
 
addrE¡ry
;

1786 
uöt8
 
∑ª¡Ext
[
Z_EXTADDR_LEN
];

1789 
	`ZDO_P¨£Devi˚A¬˚
–
öMsg
, &
A¬˚
 );

1791 i‡–
ZSTACK_END_DEVICE_BUILD
 )

1794 i‡–
	`oßl_ExtAddrEquÆ
–
	`NLME_GëExtAddr
(), 
A¬˚
.
extAddr
 ) && A¬˚.
nwkAddr
 =
	`NLME_GëSh‹tAddr
() )

1800 #i‡
	`deföed
 ( 
ZIGBEE_STOCHASTIC_ADDRESSING
 )

1802 
	`nwkNeighb‹RemoveAŒSå™ded
();

1805 i‡–
	`NLME_CheckNewAddrSë
–
A¬˚
.
nwkAddr
, A¬˚.
extAddr
 )=
ZFaûuª
 )

1811 #i‡
	`deföed
 ( 
ZIGBEE_STOCHASTIC_ADDRESSING
 )

1813 
	`NLME_GëCo‹dExtAddr
–
∑ª¡Ext
 );

1814 i‡–
	`oßl_ExtAddrEquÆ
–
∑ª¡Ext
, 
A¬˚
.
extAddr
 ) )

1816 i‡–
A¬˚
.
nwkAddr
 !
	`NLME_GëCo‹dSh‹tAddr
() )

1819 
_NIB
.
nwkCo‹dAddªss
 = 
A¬˚
.
nwkAddr
;

1820 
	`ZMacSëReq
–
ZMacCo‹dSh‹tAddªss
, (
byã
*)&(
_NIB
.
nwkCo‹dAddªss
) );

1824 i‡–
ZSTACK_ROUTER_BUILD
 )

1834 i‡–
öMsg
->
macDe°Addr
 !
	`NLME_GëSh‹tAddr
() )

1836 
assocüãd_devi˚s_t
 *
dev_±r
;

1839 
dev_±r
 = 
	`AssocGëWôhExt
–
A¬˚
.
extAddr
 );

1840 i‡–
dev_±r
 )

1842 i‡–
dev_±r
->
nodeRñ©i⁄
 =
CHILD_RFD
 ||

1843 
dev_±r
->
nodeRñ©i⁄
 =
CHILD_RFD_RX_IDLE
 )

1845 
	`AssocRemove
–
A¬˚
.
extAddr
 );

1850 i‡–
A¬˚
.
nwkAddr
 !
	`NLME_GëSh‹tAddr
() )

1854 i‡–
	`AssocCh™geNwkAddr
–
A¬˚
.
nwkAddr
, A¬˚.
extAddr
 ) )

1857 
	`nwkNeighb‹Upd©eNwkAddr
–
A¬˚
.
nwkAddr
, A¬˚.
extAddr
 );

1860 
	`ZDAµ_NVUpd©e
();

1868 
addrE¡ry
.
u£r
 = 
ADDRMGR_USER_DEFAULT
;

1869 
addrE¡ry
.
nwkAddr
 = 
A¬˚
.nwkAddr;

1870 i‡–
	`AddrMgrE¡ryLookupNwk
–&
addrE¡ry
 ) )

1872 
	`oßl_mem£t
–
∑ª¡Ext
, 0, 
Z_EXTADDR_LEN
 );

1873 i‡–
	`oßl_ExtAddrEquÆ
–
∑ª¡Ext
, 
addrE¡ry
.
extAddr
 ) )

1875 
	`AddrMgrExtAddrSë
–
addrE¡ry
.
extAddr
, 
A¬˚
.extAddr );

1876 
	`AddrMgrE¡ryUpd©e
–&
addrE¡ry
 );

1879 
	}
}

1891 
	$ZDO_BuûdSim∂eDescBuf
–
uöt8
 *
buf
, 
Sim∂eDes¸ùti⁄F‹m©_t
 *
desc
 )

1893 
byã
 
˙t
;

1894 
uöt16
 *
±r
;

1896 *
buf
++ = 
desc
->
EndPoöt
;

1897 *
buf
++ = 
	`HI_UINT16
–
desc
->
AµProfId
 );

1898 *
buf
++ = 
	`LO_UINT16
–
desc
->
AµProfId
 );

1899 *
buf
++ = 
	`HI_UINT16
–
desc
->
AµDevi˚Id
 );

1900 *
buf
++ = 
	`LO_UINT16
–
desc
->
AµDevi˚Id
 );

1902 *
buf
++ = (
byã
)(
desc
->
AµDevVî
 << 4);

1904 *
buf
++ = 
desc
->
AµNumInClu°îs
;

1905 
±r
 = 
desc
->
pAµInClu°îLi°
;

1906  
˙t
 = 0; c¡ < 
desc
->
AµNumInClu°îs
; 
±r
++, cnt++ )

1908 *
buf
++ = 
	`HI_UINT16
–*
±r
 );

1909 *
buf
++ = 
	`LO_UINT16
–*
±r
 );

1912 *
buf
++ = 
desc
->
AµNumOutClu°îs
;

1913 
±r
 = 
desc
->
pAµOutClu°îLi°
;

1914  
˙t
 = 0; c¡ < 
desc
->
AµNumOutClu°îs
; 
±r
++, cnt++ )

1916 *
buf
++ = 
	`HI_UINT16
–*
±r
 );

1917 *
buf
++ = 
	`LO_UINT16
–*
±r
 );

1919 
	}
}

1933 
	$ZDO_M©chEndDevi˚Böd
–
ZDEndDevi˚Böd_t
 *
bödReq
 )

1935 
zAddrTy≥_t
 
d°Addr
;

1936 
uöt8
 
£ndR•
 = 
FALSE
;

1937 
uöt8
 
°©us
;

1940 i‡–
m©chED
 =
NULL
 )

1943 
m©chED
 = (
ZDM©chEndDevi˚Böd_t
 *)
	`oßl_mem_Æloc
(  ( ZDMatchEndDeviceBind_t ) );

1944 i‡–
m©chED
 )

1947 
	`oßl_mem£t
–(
uöt8
 *)
m©chED
, 0,  ( 
ZDM©chEndDevi˚Böd_t
 ) );

1950 i‡–!
	`ZDO_C›yM©chInfo
–&(
m©chED
->
ed1
), 
bödReq
 ) )

1953 
°©us
 = 
ZDP_NO_ENTRY
;

1954 
£ndR•
 = 
TRUE
;

1959 
°©us
 = 
ZDP_NO_ENTRY
;

1960 
£ndR•
 = 
TRUE
;

1963 i‡–!
£ndR•
 )

1966 
m©chED
->
°©e
 = 
ZDMATCH_WAIT_REQ
;

1969 
	`APS_SëEndDevi˚BödTimeout
–
AIB_MaxBödögTime
, 
ZDO_EndDevi˚BödM©chTimeoutCB
 );

1974 
m©chED
->
°©e
 = 
ZDMATCH_SENDING_BINDS
;

1977 i‡–!
	`ZDO_C›yM©chInfo
–&(
m©chED
->
ed2
), 
bödReq
 ) )

1979 
°©us
 = 
ZDP_NO_ENTRY
;

1980 
£ndR•
 = 
TRUE
;

1984 
m©chED
->
ed1numM©ched
 = 
	`ZDO_Com∑ªClu°îLi°s
(

1985 
m©chED
->
ed1
.
numOutClu°îs
, m©chED->ed1.
outClu°îs
,

1986 
m©chED
->
ed2
.
numInClu°îs
, m©chED->ed2.
öClu°îs
, 
ZDOBuûdBuf
 );

1987 i‡–
m©chED
->
ed1numM©ched
 )

1990 
m©chED
->
ed1M©ched
 = 
	`oßl_mem_Æloc
–()(m©chED->
ed1numM©ched
 *  ( 
uöt16
 )) );

1991 i‡–
m©chED
->
ed1M©ched
 )

1993 
	`oßl_mem˝y
–
m©chED
->
ed1M©ched
, 
ZDOBuûdBuf
, (m©chED->
ed1numM©ched
 *  ( 
uöt16
 )) );

1998 
°©us
 = 
ZDP_NO_ENTRY
;

1999 
£ndR•
 = 
TRUE
;

2004 
m©chED
->
ed2numM©ched
 = 
	`ZDO_Com∑ªClu°îLi°s
(

2005 
m©chED
->
ed2
.
numOutClu°îs
, m©chED->ed2.
outClu°îs
,

2006 
m©chED
->
ed1
.
numInClu°îs
, m©chED->ed1.
öClu°îs
, 
ZDOBuûdBuf
 );

2007 i‡–
m©chED
->
ed2numM©ched
 )

2010 
m©chED
->
ed2M©ched
 = 
	`oßl_mem_Æloc
–()(m©chED->
ed2numM©ched
 *  ( 
uöt16
 )) );

2011 i‡–
m©chED
->
ed2M©ched
 )

2013 
	`oßl_mem˝y
–
m©chED
->
ed2M©ched
, 
ZDOBuûdBuf
, (m©chED->
ed2numM©ched
 *  ( 
uöt16
 )) );

2018 
°©us
 = 
ZDP_NO_ENTRY
;

2019 
£ndR•
 = 
TRUE
;

2023 i‡–(
£ndR•
 =
FALSE
Ë&& (
m©chED
->
ed1numM©ched
 || m©chED->
ed2numM©ched
) )

2026 
	`ZDM©chSídSèã
–
ZDMATCH_REASON_START
, 
ZDP_SUCCESS
, 0 );

2030 
°©us
 = 
ZDP_NO_MATCH
;

2031 
£ndR•
 = 
TRUE
;

2035 i‡–
£ndR•
 )

2038 
d°Addr
.
addrMode
 = 
Addr16Bô
;

2039 
d°Addr
.
addr
.
sh‹tAddr
 = 
bödReq
->
§cAddr
;

2040 
	`ZDP_EndDevi˚BödR•
–
bödReq
->
TønsSeq
, &
d°Addr
, 
°©us
, bödReq->
SecurôyU£
 );

2042 i‡–
m©chED
->
°©e
 =
ZDMATCH_SENDING_BINDS
 )

2045 
d°Addr
.
addrMode
 = 
Addr16Bô
;

2046 
d°Addr
.
addr
.
sh‹tAddr
 = 
m©chED
->
ed1
.
§cAddr
;

2047 
	`ZDP_EndDevi˚BödR•
–
m©chED
->
ed1
.
TønsSeq
, &
d°Addr
, 
°©us
, m©chED->ed1.
SecurôyU£
 );

2051 
	`ZDO_RemoveM©chMem‹y
();

2053 
	}
}

2064 
	$ZDO_RemoveM©chMem‹y
( )

2066 i‡–
m©chED
 !
NULL
 )

2068 i‡–
m©chED
->
ed2M©ched
 !
NULL
 )

2069 
	`oßl_mem_‰ì
–
m©chED
->
ed2M©ched
 );

2070 i‡–
m©chED
->
ed1M©ched
 !
NULL
 )

2071 
	`oßl_mem_‰ì
–
m©chED
->
ed1M©ched
 );

2073 i‡–
m©chED
->
ed1
.
öClu°îs
 !
NULL
 )

2074 
	`oßl_mem_‰ì
–
m©chED
->
ed1
.
öClu°îs
 );

2076 i‡–
m©chED
->
ed1
.
outClu°îs
 !
NULL
 )

2077 
	`oßl_mem_‰ì
–
m©chED
->
ed1
.
outClu°îs
 );

2079 i‡–
m©chED
->
ed2
.
öClu°îs
 !
NULL
 )

2080 
	`oßl_mem_‰ì
–
m©chED
->
ed2
.
öClu°îs
 );

2082 i‡–
m©chED
->
ed2
.
outClu°îs
 !
NULL
 )

2083 
	`oßl_mem_‰ì
–
m©chED
->
ed2
.
outClu°îs
 );

2085 
	`oßl_mem_‰ì
–
m©chED
 );

2087 
m©chED
 = (
ZDM©chEndDevi˚Böd_t
 *)
NULL
;

2089 
	}
}

2101 
uöt8
 
	$ZDO_C›yM©chInfo
–
ZDEndDevi˚Böd_t
 *
de°Req
, ZDEndDevi˚Böd_à*
§cReq
 )

2103 
uöt8
 
ÆlOK
 = 
TRUE
;

2106 
	`oßl_mem˝y
–(
uöt8
 *)
de°Req
, 
§cReq
,  ( 
ZDEndDevi˚Böd_t
 ) );

2109 
de°Req
->
öClu°îs
 = 
NULL
;

2110 
de°Req
->
outClu°îs
 = 
NULL
;

2113 i‡–
§cReq
->
numInClu°îs
 )

2115 
de°Req
->
öClu°îs
 = 
	`oßl_mem_Æloc
–()(
§cReq
->
numInClu°îs
 *  ( 
uöt16
 )) );

2116 i‡–
de°Req
->
öClu°îs
 )

2119 
	`oßl_mem˝y
–(
uöt8
*)(
de°Req
->
öClu°îs
), (uöt8 *)(
§cReq
->inClusters),

2120 (
§cReq
->
numInClu°îs
 *  ( 
uöt16
 )) );

2123 
ÆlOK
 = 
FALSE
;

2127 i‡–
§cReq
->
numOutClu°îs
 )

2129 
de°Req
->
outClu°îs
 = 
	`oßl_mem_Æloc
–()(
§cReq
->
numOutClu°îs
 *  ( 
uöt16
 )) );

2130 i‡–
de°Req
->
outClu°îs
 )

2133 
	`oßl_mem˝y
–(
uöt8
 *)(
de°Req
->
outClu°îs
), (uöt8 *)(
§cReq
->outClusters),

2134 (
§cReq
->
numOutClu°îs
 *  ( 
uöt16
 )) );

2137 
ÆlOK
 = 
FALSE
;

2140 i‡–!
ÆlOK
 )

2142 i‡–
de°Req
->
öClu°îs
 !
NULL
 )

2143 
	`oßl_mem_‰ì
–
de°Req
->
öClu°îs
 );

2144 i‡–
de°Req
->
outClu°îs
 !
NULL
 )

2145 
	`oßl_mem_‰ì
–
de°Req
->
outClu°îs
 );

2148  ( 
ÆlOK
 );

2149 
	}
}

2163 
uöt8
 
	$ZDM©chSídSèã
–
uöt8
 
ªas⁄
, uöt8 
°©us
, uöt8 
TønsSeq
 )

2165 
uöt8
 *
d°IEEEAddr
;

2166 
uöt8
 
d°EP
;

2167 
zAddrTy≥_t
 
d°Addr
;

2168 
zAddrTy≥_t
 
de°ö©i⁄Addr
;

2169 
uöt16
 
msgTy≥
;

2170 
uöt16
 
˛u°îID
;

2171 
ZDEndDevi˚Böd_t
 *
ed
 = 
NULL
;

2172 
uöt8
 
r•Sètus
 = 
ZDP_SUCCESS
;

2174 i‡–
m©chED
 =
NULL
 )

2175  ( 
FALSE
 );

2178 i‡–
ªas⁄
 =
ZDMATCH_REASON_BIND_RSP
 ||Ñós⁄ =
ZDMATCH_REASON_UNBIND_RSP
 )

2180 i‡–
TønsSeq
 !
m©chED
->
å™sSeq
 )

2181 –
FALSE
 );

2185 
	`APS_SëEndDevi˚BödTimeout
–0, 
ZDO_EndDevi˚BödM©chTimeoutCB
 );

2187 i‡–
ªas⁄
 =
ZDMATCH_REASON_TIMEOUT
 )

2189 
r•Sètus
 = 
ZDP_TIMEOUT
;

2192 i‡–
ªas⁄
 =
ZDMATCH_REASON_START
 ||Ñós⁄ =
ZDMATCH_REASON_BIND_RSP
 )

2194 
m©chED
->
£ndög
 = 
ZDMATCH_SENDING_UNBIND
;

2196 i‡–
ªas⁄
 =
ZDMATCH_REASON_BIND_RSP
 && 
°©us
 !
ZDP_SUCCESS
 )

2198 
r•Sètus
 = 
°©us
;

2201 i‡–
ªas⁄
 =
ZDMATCH_REASON_UNBIND_RSP
 )

2203 i‡–
°©us
 =
ZDP_SUCCESS
 )

2205 
m©chED
->
£ndög
 = 
ZDMATCH_SENDING_UNBIND
;

2209 
m©chED
->
£ndög
 = 
ZDMATCH_SENDING_BIND
;

2213 i‡–
ªas⁄
 !
ZDMATCH_REASON_START
 && 
m©chED
->
£ndög
 =
ZDMATCH_SENDING_UNBIND
 )

2216 i‡–
m©chED
->
ed1numM©ched
 )

2217 
m©chED
->
ed1numM©ched
--;

2218 i‡–
m©chED
->
ed2numM©ched
 )

2219 
m©chED
->
ed2numM©ched
--;

2223 i‡–
m©chED
->
ed1numM©ched
 )

2225 
ed
 = &(
m©chED
->
ed1
);

2226 
˛u°îID
 = 
m©chED
->
ed1M©ched
[m©chED->
ed1numM©ched
-1];

2227 
d°IEEEAddr
 = 
m©chED
->
ed2
.
õìAddr
;

2228 
d°EP
 = 
m©chED
->
ed2
.
ídpoöt
;

2230 i‡–
m©chED
->
ed2numM©ched
 )

2232 
ed
 = &(
m©chED
->
ed2
);

2233 
˛u°îID
 = 
m©chED
->
ed2M©ched
[m©chED->
ed2numM©ched
-1];

2234 
d°IEEEAddr
 = 
m©chED
->
ed1
.
õìAddr
;

2235 
d°EP
 = 
m©chED
->
ed1
.
ídpoöt
;

2238 
d°Addr
.
addrMode
 = 
Addr16Bô
;

2241 i‡–
r•Sètus
 =
ZDP_SUCCESS
 && 
ed
 )

2244 i‡–
m©chED
->
£ndög
 =
ZDMATCH_SENDING_UNBIND
 )

2245 
msgTy≥
 = 
Unböd_ªq
;

2247 
msgTy≥
 = 
Böd_ªq
;

2249 
d°Addr
.
addr
.
sh‹tAddr
 = 
ed
->
§cAddr
;

2252 
m©chED
->
å™sSeq
 = 
ZDP_TønsID
;

2254 
de°ö©i⁄Addr
.
addrMode
 = 
Addr64Bô
;

2255 
	`oßl_˝yExtAddr
–
de°ö©i⁄Addr
.
addr
.
extAddr
, 
d°IEEEAddr
 );

2257 
	`ZDP_BödUnbödReq
–
msgTy≥
, &
d°Addr
, 
ed
->
õìAddr
,Éd->
ídpoöt
, 
˛u°îID
,

2258 &
de°ö©i⁄Addr
, 
d°EP
, 
ed
->
SecurôyU£
 );

2261 
	`APS_SëEndDevi˚BödTimeout
–
AIB_MaxBödögTime
, 
ZDO_EndDevi˚BödM©chTimeoutCB
 );

2267 
d°Addr
.
addr
.
sh‹tAddr
 = 
m©chED
->
ed1
.
§cAddr
;

2268 
	`ZDP_EndDevi˚BödR•
–
m©chED
->
ed1
.
TønsSeq
, &
d°Addr
, 
r•Sètus
, m©chED->ed1.
SecurôyU£
 );

2271 i‡–
m©chED
->
°©e
 =
ZDMATCH_SENDING_BINDS
 )

2273 
d°Addr
.
addr
.
sh‹tAddr
 = 
m©chED
->
ed2
.
§cAddr
;

2274 
	`ZDP_EndDevi˚BödR•
–
m©chED
->
ed2
.
TønsSeq
, &
d°Addr
, 
r•Sètus
, m©chED->ed2.
SecurôyU£
 );

2278 
	`ZDO_RemoveM©chMem‹y
();

2281  ( 
TRUE
 );

2282 
	}
}

2293 
	$ZDO_EndDevi˚BödM©chTimeoutCB
( )

2295 
	`ZDM©chSídSèã
–
ZDMATCH_REASON_TIMEOUT
, 
ZDP_TIMEOUT
, 0 );

2296 
	}
}

2315 
	$ZDO_P¨£EndDevi˚BödReq
–
zdoIncomögMsg_t
 *
öMsg
, 
ZDEndDevi˚Böd_t
 *
bödReq
 )

2317 
uöt8
 *
msg
;

2320 
bödReq
->
TønsSeq
 = 
öMsg
->TransSeq;

2321 
bödReq
->
§cAddr
 = 
öMsg
->§cAddr.
addr
.
sh‹tAddr
;

2322 
bödReq
->
SecurôyU£
 = 
öMsg
->SecurityUse;

2323 
msg
 = 
öMsg
->
asdu
;

2325 
bödReq
->
loˇlCo‹dö©‹
 = 
	`BUILD_UINT16
–
msg
[0], msg[1] );

2326 
msg
 += 2;

2328 
	`oßl_˝yExtAddr
–
bödReq
->
õìAddr
, 
msg
 );

2329 
msg
 +
Z_EXTADDR_LEN
;

2331 
bödReq
->
ídpoöt
 = *
msg
++;

2332 
bödReq
->
¥ofûeID
 = 
	`BUILD_UINT16
–
msg
[0], msg[1] );

2333 
msg
 += 2;

2335 
bödReq
->
öClu°îs
 = 
NULL
;

2336 
bödReq
->
outClu°îs
 = 
NULL
;

2338 i‡((
bödReq
->
numInClu°îs
 = *
msg
++) &&

2339 (
bödReq
->
öClu°îs
 = (
uöt16
*)
	`oßl_mem_Æloc
–(bödReq->
numInClu°îs
 * ( uint16 )))))

2341 
msg
 = 
	`ZDO_C⁄vîtOTAClu°îs
–
bödReq
->
numInClu°îs
, msg, bödReq->
öClu°îs
 );

2345 
bödReq
->
numInClu°îs
 = 0;

2348 i‡((
bödReq
->
numOutClu°îs
 = *
msg
++) &&

2349 (
bödReq
->
outClu°îs
 = (
uöt16
*)
	`oßl_mem_Æloc
((bödReq->
numOutClu°îs
 * (uint16)))))

2351 
msg
 = 
	`ZDO_C⁄vîtOTAClu°îs
–
bödReq
->
numOutClu°îs
, msg, bödReq->
outClu°îs
 );

2355 
bödReq
->
numOutClu°îs
 = 0;

2357 
	}
}

2369 
	$ZDO_P¨£BödUnbödReq
–
zdoIncomögMsg_t
 *
öMsg
, 
ZDO_BödUnbödReq_t
 *
pReq
 )

2371 
uöt8
 *
msg
;

2373 
msg
 = 
öMsg
->
asdu
;

2374 
	`oßl_˝yExtAddr
–
pReq
->
§cAddªss
, 
msg
 );

2375 
msg
 +
Z_EXTADDR_LEN
;

2376 
pReq
->
§cEndpoöt
 = *
msg
++;

2377 
pReq
->
˛u°îID
 = 
	`BUILD_UINT16
–
msg
[0], msg[1] );

2378 
msg
 += 2;

2379 
pReq
->
d°Addªss
.
addrMode
 = *
msg
++;

2380 i‡–
pReq
->
d°Addªss
.
addrMode
 =
Addr64Bô
 )

2382 
	`oßl_˝yExtAddr
–
pReq
->
d°Addªss
.
addr
.
extAddr
, 
msg
 );

2383 
msg
 +
Z_EXTADDR_LEN
;

2384 
pReq
->
d°Endpoöt
 = *
msg
;

2389 
pReq
->
d°Addªss
.
addr
.
sh‹tAddr
 = 
	`BUILD_UINT16
–
msg
[0], msg[1] );

2391 
	}
}

2405 
ZDO_NwkIEEEAddrRe•_t
 *
	$ZDO_P¨£AddrR•
–
zdoIncomögMsg_t
 *
öMsg
 )

2407 
ZDO_NwkIEEEAddrRe•_t
 *
r•
;

2408 
uöt8
 *
msg
;

2409 
byã
 
˙t
 = 0;

2412 i‡–
öMsg
->
asduLí
 > (1 + 
Z_EXTADDR_LEN
 + 2) )

2413 
˙t
 = 
öMsg
->
asdu
[1 + 
Z_EXTADDR_LEN
 + 2];

2415 
˙t
 = 0;

2418 
r•
 = (
ZDO_NwkIEEEAddrRe•_t
 *)
	`oßl_mem_Æloc
–(ZDO_NwkIEEEAddrRe•_tË+ (
˙t
 *  ( 
uöt16
 )) );

2420 i‡–
r•
 )

2422 
msg
 = 
öMsg
->
asdu
;

2424 
r•
->
°©us
 = *
msg
++;

2425 i‡–
r•
->
°©us
 =
ZDO_SUCCESS
 )

2427 
	`oßl_˝yExtAddr
–
r•
->
extAddr
, 
msg
 );

2428 
msg
 +
Z_EXTADDR_LEN
;

2429 
r•
->
nwkAddr
 = 
	`BUILD_UINT16
–
msg
[0], msg[1] );

2431 
msg
 += 2;

2432 
r•
->
numAssocDevs
 = 0;

2435 i‡–
˙t
 > 0 )

2437 
uöt16
 *
pLi°
 = &(
r•
->
devLi°
[0]);

2438 
byã
 
n
 = 
˙t
;

2440 
r•
->
numAssocDevs
 = *
msg
++;

2441 
r•
->
°¨tIndex
 = *
msg
++;

2443  
n
 != 0 )

2445 *
pLi°
++ = 
	`BUILD_UINT16
–
msg
[0], msg[1] );

2446 
msg
 +–
uöt16
 );

2447 
n
--;

2452  ( 
r•
 );

2453 
	}
}

2465 
	$ZDO_P¨£NodeDescR•
–
zdoIncomögMsg_t
 *
öMsg
, 
ZDO_NodeDescR•_t
 *
pNDR•
 )

2467 
uöt8
 *
msg
;

2469 
msg
 = 
öMsg
->
asdu
;

2471 
pNDR•
->
°©us
 = *
msg
++;

2472 
pNDR•
->
nwkAddr
 = 
	`BUILD_UINT16
–
msg
[0], msg[1] );

2474 i‡–
pNDR•
->
°©us
 =
ZDP_SUCCESS
 )

2476 
msg
 += 2;

2477 
pNDR•
->
nodeDesc
.
LogiˇlTy≥
 = *
msg
 & 0x07;

2479 
pNDR•
->
nodeDesc
.
Com∂exDescAvaû
 = ( *
msg
 & 0x08 ) >> 3;

2480 
pNDR•
->
nodeDesc
.
U£rDescAvaû
 = ( *
msg
 & 0x10 ) >> 4;

2482 
msg
++;

2483 
pNDR•
->
nodeDesc
.
FªquícyB™d
 = (*
msg
 >> 3) & 0x1f;

2484 
pNDR•
->
nodeDesc
.
APSFœgs
 = *
msg
++ & 0x07;

2485 
pNDR•
->
nodeDesc
.
C≠abûôyFœgs
 = *
msg
++;

2486 
pNDR•
->
nodeDesc
.
M™uÁ˘uªrCode
[0] = *
msg
++;

2487 
pNDR•
->
nodeDesc
.
M™uÁ˘uªrCode
[1] = *
msg
++;

2488 
pNDR•
->
nodeDesc
.
MaxBuf„rSize
 = *
msg
++;

2489 
pNDR•
->
nodeDesc
.
MaxInTøns„rSize
[0] = *
msg
++;

2490 
pNDR•
->
nodeDesc
.
MaxInTøns„rSize
[1] = *
msg
++;

2491 
pNDR•
->
nodeDesc
.
SîvîMask
 = 
	`BUILD_UINT16
–
msg
[0], msg[1] );

2492 
msg
 += 2;

2493 
pNDR•
->
nodeDesc
.
MaxOutTøns„rSize
[0] = *
msg
++;

2494 
pNDR•
->
nodeDesc
.
MaxOutTøns„rSize
[1] = *
msg
++;

2495 
pNDR•
->
nodeDesc
.
Des¸ùt‹C≠abûôy
 = *
msg
;

2497 
	}
}

2509 
	$ZDO_P¨£PowîDescR•
–
zdoIncomögMsg_t
 *
öMsg
, 
ZDO_PowîR•_t
 *
pNPR•
 )

2511 
uöt8
 *
msg
;

2513 
msg
 = 
öMsg
->
asdu
;

2514 
pNPR•
->
°©us
 = *
msg
++;

2515 
pNPR•
->
nwkAddr
 = 
	`BUILD_UINT16
–
msg
[0], msg[1] );

2517 i‡–
pNPR•
->
°©us
 =
ZDP_SUCCESS
 )

2519 
msg
 += 2;

2520 
pNPR•
->
pwrDesc
.
AvaûabÀPowîSour˚s
 = *
msg
 >> 4;

2521 
pNPR•
->
pwrDesc
.
PowîMode
 = *
msg
++ & 0x0F;

2522 
pNPR•
->
pwrDesc
.
CuºítPowîSour˚Levñ
 = *
msg
 >> 4;

2523 
pNPR•
->
pwrDesc
.
CuºítPowîSour˚
 = *
msg
++ & 0x0F;

2525 
	}
}

2542 
	$ZDO_P¨£Sim∂eDescR•
–
zdoIncomögMsg_t
 *
öMsg
, 
ZDO_Sim∂eDescR•_t
 *
pSim∂eDescR•
 )

2544 
uöt8
 *
msg
;

2546 
msg
 = 
öMsg
->
asdu
;

2547 
pSim∂eDescR•
->
°©us
 = *
msg
++;

2548 
pSim∂eDescR•
->
nwkAddr
 = 
	`BUILD_UINT16
–
msg
[0], msg[1] );

2549 
msg
 + ( 
uöt16
 );

2550 
msg
++;

2552 i‡–
pSim∂eDescR•
->
°©us
 =
ZDP_SUCCESS
 )

2554 
	`ZDO_P¨£Sim∂eDescBuf
–
msg
, &(
pSim∂eDescR•
->
sim∂eDesc
) );

2556 
	}
}

2567 
ZDO_A˘iveEndpoötR•_t
 *
	$ZDO_P¨£EPLi°R•
–
zdoIncomögMsg_t
 *
öMsg
 )

2569 
ZDO_A˘iveEndpoötR•_t
 *
pR•
;

2570 
uöt8
 *
msg
;

2571 
uöt8
 
Sètus
;

2572 
uöt8
 
˙t
;

2574 
msg
 = 
öMsg
->
asdu
;

2575 
Sètus
 = *
msg
++;

2576 
˙t
 = 
msg
[2];

2578 
pR•
 = (
ZDO_A˘iveEndpoötR•_t
 *)
	`oßl_mem_Æloc
––ZDO_A˘iveEndpoötR•_àË+ 
˙t
 );

2579 i‡–
pR•
 )

2581 
pR•
->
°©us
 = 
Sètus
;

2582 
pR•
->
nwkAddr
 = 
	`BUILD_UINT16
–
msg
[0], msg[1] );

2583 
msg
 +–
uöt16
 );

2584 
pR•
->
˙t
 = cnt;

2585 
msg
++;

2586 
	`oßl_mem˝y
–
pR•
->
ïLi°
, 
msg
, 
˙t
 );

2589  ( 
pR•
 );

2590 
	}
}

2602 
	$ZDO_P¨£SîvîDiscR•
–
zdoIncomögMsg_t
 *
öMsg
, 
ZDO_SîvîDiscR•_t
 *
pR•
 )

2604 
pR•
->
°©us
 = 
öMsg
->
asdu
[0];

2605 
pR•
->
£rvîMask
 = 
	`BUILD_UINT16
–
öMsg
->
asdu
[1], inMsg->asdu[2] );

2606 
	}
}

2620 
ZDO_MgmtLqiR•_t
 *
	$ZDO_P¨£MgmtLqiR•
–
zdoIncomögMsg_t
 *
öMsg
 )

2622 
ZDO_MgmtLqiR•_t
 *
pR•
;

2623 
uöt8
 
°©us
;

2624 
uöt8
 
°¨tIndex
 = 0;

2625 
uöt8
 
√ighb‹LqiCou¡
 = 0;

2626 
uöt8
 
√ighb‹LqiE¡rõs
 = 0;

2627 
uöt8
 *
msg
;

2629 
msg
 = 
öMsg
->
asdu
;

2631 
°©us
 = *
msg
++;

2632 i‡–
°©us
 =
ZSuc˚ss
 )

2634 
√ighb‹LqiE¡rõs
 = *
msg
++;

2635 
°¨tIndex
 = *
msg
++;

2636 
√ighb‹LqiCou¡
 = *
msg
++;

2640 
pR•
 = (
ZDO_MgmtLqiR•_t
 *)
	`oßl_mem_Æloc
(

2641 –
ZDO_MgmtLqiR•_t
 ) + (
√ighb‹LqiCou¡
 * –
√ighb‹LqiIãm_t
 )) );

2642 i‡–
pR•
 )

2644 
uöt8
 
x
;

2645 
√ighb‹LqiIãm_t
 *
pLi°
 = 
pR•
->
li°
;

2646 
pR•
->
°©us
 = status;

2647 
pR•
->
√ighb‹LqiE¡rõs
 =ÇeighborLqiEntries;

2648 
pR•
->
°¨tIndex
 = startIndex;

2649 
pR•
->
√ighb‹LqiCou¡
 =ÇeighborLqiCount;

2651  
x
 = 0; x < 
√ighb‹LqiCou¡
; x++ )

2653 
	`oßl_˝yExtAddr
(
pLi°
->
extPANId
, 
msg
);

2654 
msg
 +
Z_EXTADDR_LEN
;

2656 
msg
 +
Z_EXTADDR_LEN
;

2657 
pLi°
->
nwkAddr
 = 
	`BUILD_UINT16
–
msg
[0], msg[1] );

2658 
msg
 += 2 + 1 + 1 + 1;

2659 
pLi°
->
rxLqi
 = *
msg
++;

2660 
pLi°
->
txQuÆôy
 = 0;

2661 
pLi°
++;

2665  ( 
pR•
 );

2666 
	}
}

2680 
ZDO_MgmNwkDiscR•_t
 *
	$ZDO_P¨£MgmNwkDiscR•
–
zdoIncomögMsg_t
 *
öMsg
 )

2682 
ZDO_MgmNwkDiscR•_t
 *
pR•
;

2683 
uöt8
 
°©us
;

2684 
uöt8
 
√tw‹kCou¡
 = 0;

2685 
uöt8
 
°¨tIndex
 = 0;

2686 
uöt8
 
√tw‹kLi°Cou¡
 = 0;

2687 
uöt8
 *
msg
;

2689 
msg
 = 
öMsg
->
asdu
;

2690 
°©us
 = *
msg
++;

2692 i‡–
°©us
 =
ZSuc˚ss
 )

2694 
√tw‹kCou¡
 = *
msg
++;

2695 
°¨tIndex
 = *
msg
++;

2696 
√tw‹kLi°Cou¡
 = *
msg
++;

2700 
pR•
 = (
ZDO_MgmNwkDiscR•_t
 *)
	`oßl_mem_Æloc
( ( ZDO_MgmNwkDiscRsp_t )

2701 + (
√tw‹kLi°Cou¡
 * –
mgmtNwkDiscIãm_t
 )) );

2702 i‡–
pR•
 )

2704 
uöt8
 
x
;

2705 
mgmtNwkDiscIãm_t
 *
pLi°
;

2707 
pR•
->
°©us
 = status;

2708 
pR•
->
√tw‹kCou¡
 =ÇetworkCount;

2709 
pR•
->
°¨tIndex
 = startIndex;

2710 
pR•
->
√tw‹kLi°Cou¡
 =ÇetworkListCount;

2711 
pLi°
 = 
pR•
->
li°
;

2713  
x
 = 0; x < 
√tw‹kLi°Cou¡
; x++ )

2715 
	`oßl_˝yExtAddr
(
pLi°
->
exãndedPANID
, 
msg
);

2716 
pLi°
->
PANId
 = 
	`BUILD_UINT16
–
msg
[0], msg[1] );

2717 
msg
 +
Z_EXTADDR_LEN
;

2719 
pLi°
->
logiˇlCh™√l
 = *
msg
++;

2720 
pLi°
->
°ackProfûe
 = (*
msg
) & 0x0F;

2721 
pLi°
->
vîsi⁄
 = (*
msg
++ >> 4) & 0x0F;

2722 
pLi°
->
bóc⁄Ordî
 = (*
msg
) & 0x0F;

2723 
pLi°
->
su≥rFømeOrdî
 = (*
msg
++ >> 4) & 0x0F;

2724 
pLi°
->
≥rmôJoöög
 = *
msg
++;

2725 
pLi°
++;

2729  ( 
pR•
 );

2730 
	}
}

2744 
ZDO_MgmtRtgR•_t
 *
	$ZDO_P¨£MgmtRtgR•
–
zdoIncomögMsg_t
 *
öMsg
 )

2746 
ZDO_MgmtRtgR•_t
 *
pR•
;

2747 
uöt8
 
°©us
;

2748 
uöt8
 
πgCou¡
 = 0;

2749 
uöt8
 
°¨tIndex
 = 0;

2750 
uöt8
 
πgLi°Cou¡
 = 0;

2751 
uöt8
 *
msg
;

2753 
msg
 = 
öMsg
->
asdu
;

2755 
°©us
 = *
msg
++;

2756 i‡–
°©us
 =
ZSuc˚ss
 )

2758 
πgCou¡
 = *
msg
++;

2759 
°¨tIndex
 = *
msg
++;

2760 
πgLi°Cou¡
 = *
msg
++;

2764 
pR•
 = (
ZDO_MgmtRtgR•_t
 *)
	`oßl_mem_Æloc
(

2765 –
ZDO_MgmtRtgR•_t
 ) + (
πgLi°Cou¡
 * –
πgIãm_t
 )) );

2766 i‡–
pR•
 )

2768 
uöt8
 
x
;

2769 
πgIãm_t
 *
pLi°
 = 
pR•
->
li°
;

2770 
pR•
->
°©us
 = status;

2771 
pR•
->
πgCou¡
 =ÑtgCount;

2772 
pR•
->
°¨tIndex
 = startIndex;

2773 
pR•
->
πgLi°Cou¡
 =ÑtgListCount;

2775  
x
 = 0; x < 
πgLi°Cou¡
; x++ )

2777 
pLi°
->
d°Addªss
 = 
	`BUILD_UINT16
–
msg
[0], msg[1] );

2778 
msg
 += 2;

2779 
pLi°
->
°©us
 = *
msg
++;

2780 
pLi°
->
√xtH›Addªss
 = 
	`BUILD_UINT16
–
msg
[0], msg[1] );

2781 
msg
 += 2;

2782 
pLi°
++;

2786  ( 
pR•
 );

2787 
	}
}

2801 
ZDO_MgmtBödR•_t
 *
	$ZDO_P¨£MgmtBödR•
–
zdoIncomögMsg_t
 *
öMsg
 )

2803 
ZDO_MgmtBödR•_t
 *
pR•
;

2804 
uöt8
 
°©us
;

2805 
uöt8
 
bödögCou¡
 = 0;

2806 
uöt8
 
°¨tIndex
 = 0;

2807 
uöt8
 
bödögLi°Cou¡
 = 0;

2808 
uöt8
 *
msg
;

2810 
msg
 = 
öMsg
->
asdu
;

2812 
°©us
 = *
msg
++;

2813 i‡–
°©us
 =
ZSuc˚ss
 )

2815 
bödögCou¡
 = *
msg
++;

2816 
°¨tIndex
 = *
msg
++;

2817 
bödögLi°Cou¡
 = *
msg
++;

2821 
pR•
 = (
ZDO_MgmtBödR•_t
 *)
	`oßl_mem_Æloc
(

2822 ( ( 
ZDO_MgmtBödR•_t
 ) + (
bödögLi°Cou¡
 * –
≠sBödögIãm_t
 ))) );

2823 i‡–
pR•
 )

2825 
uöt8
 
x
;

2826 
≠sBödögIãm_t
 *
pLi°
 = 
pR•
->
li°
;

2827 
pR•
->
°©us
 = status;

2828 
pR•
->
bödögCou¡
 = bindingCount;

2829 
pR•
->
°¨tIndex
 = startIndex;

2830 
pR•
->
bödögLi°Cou¡
 = bindingListCount;

2832  
x
 = 0; x < 
bödögLi°Cou¡
; x++ )

2834 
	`oßl_˝yExtAddr
–
pLi°
->
§cAddr
, 
msg
 );

2835 
msg
 +
Z_EXTADDR_LEN
;

2836 
pLi°
->
§cEP
 = *
msg
++;

2840 
pLi°
->
˛u°îID
 = 
	`BUILD_UINT16
–
msg
[0], msg[1] );

2841 
msg
 += 2;

2842 
pLi°
->
d°Addr
.
addrMode
 = *
msg
++;

2843 i‡–
pLi°
->
d°Addr
.
addrMode
 =
Addr64Bô
 )

2845 
	`oßl_˝yExtAddr
–
pLi°
->
d°Addr
.
addr
.
extAddr
, 
msg
 );

2846 
msg
 +
Z_EXTADDR_LEN
;

2847 
pLi°
->
d°EP
 = *
msg
++;

2851 
pLi°
->
d°Addr
.
addr
.
sh‹tAddr
 = 
	`BUILD_UINT16
–
msg
[0], msg[1] );

2852 
msg
 += 2;

2855 
pLi°
++;

2859  ( 
pR•
 );

2860 
	}
}

2874 
ZDO_U£rDescR•_t
 *
	$ZDO_P¨£U£rDescR•
–
zdoIncomögMsg_t
 *
öMsg
 )

2876 
ZDO_U£rDescR•_t
 *
pR•
;

2877 
uöt8
 *
msg
;

2878 
uöt8
 
descLí
 = 0;

2880 
msg
 = 
öMsg
->
asdu
;

2882 i‡–
msg
[0] =
ZSuc˚ss
 )

2883 
descLí
 = 
msg
[3];

2885 
pR•
 = (
ZDO_U£rDescR•_t
 *)
	`oßl_mem_Æloc
– ( ZDO_U£rDescR•_àË+ 
descLí
 );

2886 i‡–
pR•
 )

2888 
pR•
->
°©us
 = 
msg
[0];

2889 
pR•
->
nwkAddr
 = 
	`BUILD_UINT16
–
msg
[1], msg[2] );

2890 
pR•
->
Àngth
 = 
descLí
;

2891 i‡–
descLí
 )

2892 
	`oßl_mem˝y
–
pR•
->
desc
, &
msg
[4], 
descLí
 );

2895  ( 
pR•
 );

2896 
	}
}

2916 
uöt8
 
	$ZDO_P¨£Sim∂eDescBuf
–
uöt8
 *
buf
, 
Sim∂eDes¸ùti⁄F‹m©_t
 *
desc
 )

2918 
uöt8
 
num
, 
i
;

2920 
desc
->
EndPoöt
 = *
buf
++;

2921 
desc
->
AµProfId
 = 
	`BUILD_UINT16
–
buf
[0], buf[1] );

2922 
buf
 += 2;

2923 
desc
->
AµDevi˚Id
 = 
	`BUILD_UINT16
–
buf
[0], buf[1] );

2924 
buf
 += 2;

2925 
desc
->
AµDevVî
 = *
buf
 >> 4;

2927 
desc
->
Re£rved
 = 0;

2928 
buf
++;

2931 
num
 = 
desc
->
AµNumInClu°îs
 = *
buf
++;

2932 i‡–
num
 )

2934 i‡(!(
desc
->
pAµInClu°îLi°
 = (
uöt16
 *)
	`oßl_mem_Æloc
(
num
*(uint16))))

2939 
i
=0; i<
num
; ++i)

2941 
desc
->
pAµInClu°îLi°
[
i
] = 
	`BUILD_UINT16
–
buf
[0], buf[1] );

2942 
buf
 += 2;

2947 
num
 = 
desc
->
AµNumOutClu°îs
 = *
buf
++;

2948 i‡(
num
)

2950 i‡(!(
desc
->
pAµOutClu°îLi°
 = (
uöt16
 *)
	`oßl_mem_Æloc
(
num
*(uint16))))

2953 i‡–
desc
->
pAµInClu°îLi°
 !
NULL
 )

2955 
	`oßl_mem_‰ì
(
desc
->
pAµInClu°îLi°
);

2959 
i
=0; i<
num
; ++i)

2961 
desc
->
pAµOutClu°îLi°
[
i
] = 
	`BUILD_UINT16
–
buf
[0], buf[1] );

2962 
buf
 += 2;

2966 
	}
}

2978 
	$ZDO_P¨£Devi˚A¬˚
–
zdoIncomögMsg_t
 *
öMsg
, 
ZDO_Devi˚A¬˚_t
 *
pA¬˚
 )

2980 
uöt8
 *
msg
;

2983 
msg
 = 
öMsg
->
asdu
;

2984 
pA¬˚
->
nwkAddr
 = 
	`BUILD_UINT16
–
msg
[0], msg[1] );

2985 
msg
 += 2;

2986 
	`oßl_˝yExtAddr
–
pA¬˚
->
extAddr
, 
msg
 );

2987 
msg
 +
Z_EXTADDR_LEN
;

2988 
pA¬˚
->
ˇ∑bûôõs
 = *
msg
;

2989 
	}
}

3003 
ZDO_MgmtNwkUpd©eNŸify_t
 *
	$ZDO_P¨£MgmtNwkUpd©eNŸify
–
zdoIncomögMsg_t
 *
öMsg
 )

3005 
uöt8
 
°©us
;

3006 
uöt32
 
sˇ¬edCh™√ls
 = 0;

3007 
uöt16
 
tŸÆTønsmissi⁄s
 = 0;

3008 
uöt16
 
å™smissi⁄Faûuªs
 = 0;

3009 
uöt8
 
li°Cou¡
 = 0;

3010 
uöt8
 *
msg
 = 
öMsg
->
asdu
;

3011 
ZDO_MgmtNwkUpd©eNŸify_t
 *
pR•
;

3013 
°©us
 = *
msg
++;

3014 i‡–
°©us
 =
ZSuc˚ss
 )

3016 
sˇ¬edCh™√ls
 = 
	`oßl_buûd_uöt32
–
msg
, 4 );

3017 
msg
 += 4;

3018 
tŸÆTønsmissi⁄s
 = 
	`BUILD_UINT16
–
msg
[0], msg[1] );

3019 
msg
 += 2;

3020 
å™smissi⁄Faûuªs
 = 
	`BUILD_UINT16
–
msg
[0], msg[1] );

3021 
msg
 += 2;

3022 
li°Cou¡
 = *
msg
++;

3025 
pR•
 = (
ZDO_MgmtNwkUpd©eNŸify_t
 *)
	`oßl_mem_Æloc
– ( ZDO_MgmtNwkUpd©eNŸify_àË+ 
li°Cou¡
 );

3027 i‡–
pR•
 )

3029 
pR•
->
°©us
 = status;

3030 
pR•
->
sˇ¬edCh™√ls
 = scannedChannels;

3031 
pR•
->
tŸÆTønsmissi⁄s
 =ÅotalTransmissions;

3032 
pR•
->
å™smissi⁄Faûuªs
 =ÅransmissionFailures;

3033 
pR•
->
li°Cou¡
 =ÜistCount;

3036 i‡–
li°Cou¡
 > 0 )

3037 
	`oßl_mem˝y
–
pR•
->
íîgyVÆues
, 
msg
, 
li°Cou¡
 );

3040  ( 
pR•
 );

3041 
	}
}

3054 
	$ZDO_P¨£MgmtNwkUpd©eReq
–
zdoIncomögMsg_t
 *
öMsg
, 
ZDO_MgmtNwkUpd©eReq_t
 *
pReq
 )

3056 
uöt8
 *
msg
 = 
öMsg
->
asdu
;

3058 
pReq
->
ch™√lMask
 = 
	`oßl_buûd_uöt32
–
msg
, 4 );

3059 
msg
 += 4;

3060 
pReq
->
sˇnDuøti⁄
 = *
msg
++;

3062 i‡–
pReq
->
sˇnDuøti⁄
 <= 0x05 )

3065 
pReq
->
sˇnCou¡
 = *
msg
;

3067 i‡––
pReq
->
sˇnDuøti⁄
 == 0xFE ) || (ÖReq->scanDuration == 0xFF ) )

3070 
pReq
->
nwkUpd©eId
 = *
msg
++;

3072 i‡–
pReq
->
sˇnDuøti⁄
 == 0xFF )

3074 
pReq
->
nwkM™agîAddr
 = 
	`BUILD_UINT16
–
msg
[0], msg[1] );

3077 
	}
}

	@Components/stack/zdo/ZDObject.h

40 #i‚de‡
ZDOBJECT_H


41 
	#ZDOBJECT_H


	)

43 #ifde‡
__˝lu•lus


51 
	~"NLMEDE.h
"

52 
	~"ZDAµ.h
"

57 #i‡
deföed
–
ZIGBEE_FRAGMENTATION
 ) || ( 
SECURE
 == 0 )

58 
	#ZDO_MAX_LQI_ITEMS
 3

	)

60 
	#ZDO_MAX_LQI_ITEMS
 2

	)

63 
	#ZDO_MAX_NWKDISC_ITEMS
 5

	)

64 
	#ZDO_MAX_RTG_ITEMS
 10

	)

65 
	#ZDO_MAX_BIND_ITEMS
 3

	)

72 
MODE_JOIN
,

73 
MODE_RESUME
,

75 
MODE_HARD
,

76 
MODE_REJOIN


77 } 
	tdevSèπModes_t
;

81 
uöt8
 
°©us
;

82 
uöt16
 
nwkAddr
;

83 
uöt8
 
extAddr
[
Z_EXTADDR_LEN
];

84 
uöt8
 
numAssocDevs
;

85 
uöt8
 
°¨tIndex
;

86 
uöt16
 
devLi°
[];

87 } 
	tZDO_NwkIEEEAddrRe•_t
;

91 
uöt8
 
°©us
;

92 
uöt16
 
nwkAddr
;

93 
NodeDes¸ùt‹F‹m©_t
 
nodeDesc
;

94 } 
	tZDO_NodeDescR•_t
;

98 
uöt8
 
°©us
;

99 
uöt16
 
nwkAddr
;

100 
NodePowîDes¸ùt‹F‹m©_t
 
pwrDesc
;

101 } 
	tZDO_PowîR•_t
;

105 
uöt8
 
°©us
;

106 
uöt16
 
nwkAddr
;

107 
Sim∂eDes¸ùti⁄F‹m©_t
 
sim∂eDesc
;

108 } 
	tZDO_Sim∂eDescR•_t
;

112 
uöt8
 
°©us
;

113 
uöt16
 
nwkAddr
;

114 
uöt8
 
˙t
;

115 
uöt8
 
ïLi°
[];

116 } 
	tZDO_A˘iveEndpoötR•_t
;

118 
ZDO_A˘iveEndpoötR•_t
 
	tZDO_M©chDescR•_t
;

122 
uöt8
 
°©us
;

123 
uöt8
 
√tw‹kCou¡
;

124 
uöt8
 
°¨tIndex
;

125 
uöt8
 
√tw‹kLi°Cou¡
;

126 
mgmtNwkDiscIãm_t
 
li°
[];

127 } 
	tZDO_MgmNwkDiscR•_t
;

131 
uöt8
 
°©us
;

132 
uöt8
 
√ighb‹LqiE¡rõs
;

133 
uöt8
 
°¨tIndex
;

134 
uöt8
 
√ighb‹LqiCou¡
;

135 
√ighb‹LqiIãm_t
 
li°
[];

136 } 
	tZDO_MgmtLqiR•_t
;

140 
uöt8
 
°©us
;

141 
uöt8
 
πgCou¡
;

142 
uöt8
 
°¨tIndex
;

143 
uöt8
 
πgLi°Cou¡
;

144 
πgIãm_t
 
li°
[];

145 } 
	tZDO_MgmtRtgR•_t
;

149 
uöt8
 
°©us
;

150 
uöt8
 
bödögCou¡
;

151 
uöt8
 
°¨tIndex
;

152 
uöt8
 
bödögLi°Cou¡
;

153 
≠sBödögIãm_t
 
li°
[];

154 } 
	tZDO_MgmtBödR•_t
;

158 
uöt8
 
°©us
;

159 
uöt16
 
nwkAddr
;

160 
uöt8
 
Àngth
;

161 
uöt8
 
desc
[];

162 } 
	tZDO_U£rDescR•_t
;

166 
uöt8
 
°©us
;

167 
uöt16
 
£rvîMask
;

168 } 
	tZDO_SîvîDiscR•_t
;

172 
uöt8
 
§cAddªss
[
Z_EXTADDR_LEN
];

173 
uöt8
 
§cEndpoöt
;

174 
uöt16
 
˛u°îID
;

175 
zAddrTy≥_t
 
d°Addªss
;

176 
uöt8
 
d°Endpoöt
;

177 } 
	tZDO_BödUnbödReq_t
;

181 
uöt16
 
nwkAddr
;

182 
uöt8
 
extAddr
[
Z_EXTADDR_LEN
];

183 
uöt8
 
ˇ∑bûôõs
;

184 } 
	tZDO_Devi˚A¬˚_t
;

188 
uöt32
 
ch™√lMask
;

189 
uöt8
 
sˇnDuøti⁄
;

190 
uöt8
 
sˇnCou¡
;

191 
uöt8
 
nwkUpd©eId
;

192 
öt16
 
nwkM™agîAddr
;

193 } 
	tZDO_MgmtNwkUpd©eReq_t
;

197 
uöt8
 
°©us
;

198 
uöt32
 
sˇ¬edCh™√ls
;

199 
uöt16
 
tŸÆTønsmissi⁄s
;

200 
uöt16
 
å™smissi⁄Faûuªs
;

201 
uöt8
 
li°Cou¡
;

202 
uöt8
 
íîgyVÆues
[];

203 } 
	tZDO_MgmtNwkUpd©eNŸify_t
;

211 
ZDMATCH_REASON_START
,

212 
ZDMATCH_REASON_TIMEOUT
,

213 
ZDMATCH_REASON_UNBIND_RSP
,

214 
ZDMATCH_REASON_BIND_RSP


219 
ZDEndDevi˚Böd_t
 
ed1
;

220 
ZDEndDevi˚Böd_t
 
ed2
;

221 
uöt8
 
°©e
;

222 
uöt8
 
£ndög
;

223 
uöt8
 
å™sSeq
;

224 
uöt8
 
ed1numM©ched
;

225 
uöt16
 *
ed1M©ched
;

226 
uöt8
 
ed2numM©ched
;

227 
uöt16
 *
ed2M©ched
;

228 } 
	tZDM©chEndDevi˚Böd_t
;

237 
ZDM©chEndDevi˚Böd_t
 *
m©chED
;

247 
ZDO_Inô
( );

252 
ZDO_SèπDevi˚
–
byã
 
logiˇlTy≥
, 
devSèπModes_t
 
°¨tMode
,

253 
byã
 
bóc⁄Ordî
, byã 
su≥r‰ameOrdî
 );

258 
ZDO_Upd©eNwkSètus
–
devSèãs_t
 
°©e
 );

263 
ZDO_M©chEndDevi˚Böd
–
ZDEndDevi˚Böd_t
 *
bödReq
 );

269 
byã
 
ZDO_AnyClu°îM©ches
(

270 
byã
 
AC¡
, 
uöt16
 *
ALi°
, byã 
BC¡
, uöt16 *
BLi°
 );

275 
ZDO_Pro˚ssNodeDescReq
–
zdoIncomögMsg_t
 *
öMsg
 );

280 
ZDO_Pro˚ssPowîDescReq
–
zdoIncomögMsg_t
 *
öMsg
 );

285 
ZDO_Pro˚ssSim∂eDescReq
–
zdoIncomögMsg_t
 *
öMsg
 );

290 
ZDO_Pro˚ssA˘iveEPReq
–
zdoIncomögMsg_t
 *
öMsg
 );

295 
ZDO_Pro˚ssM©chDescReq
–
zdoIncomögMsg_t
 *
öMsg
 );

300 
ZDO_Pro˚ssSîvîDiscR•
–
zdoIncomögMsg_t
 *
öMsg
 );

305 
ZDO_Pro˚ssSîvîDiscReq
–
zdoIncomögMsg_t
 *
öMsg
 );

311 
uöt8
 
ZDM©chSídSèã
–uöt8 
ªas⁄
, uöt8 
°©us
, uöt8 
TønsSeq
 );

320 
ZDO_EndDevi˚TimeoutCB
( );

330 
ZDO_Pro˚ssMgmNwkDiscR•
–
zdoIncomögMsg_t
 *
öMsg
 );

336 
ZDO_Pro˚ssMgmtNwkDiscReq
–
zdoIncomögMsg_t
 *
öMsg
 );

342 
ZDO_FöishPro˚ssögMgmtNwkDiscReq
(
byã
 
Resu…Cou¡
,

343 
√tw‹kDesc_t
 *
Nëw‹kLi°
 );

349 
ZDO_P¨£MgmtNwkUpd©eReq
–
zdoIncomögMsg_t
 *
öMsg
, 
ZDO_MgmtNwkUpd©eReq_t
 *
pReq
 );

355 
ZDO_Pro˚ssMgmtLqiReq
–
zdoIncomögMsg_t
 *
öMsg
 );

361 
ZDO_Pro˚ssMgmtRtgReq
–
zdoIncomögMsg_t
 *
öMsg
 );

363 
ZDO_Pro˚ssMgmtBödReq
–
zdoIncomögMsg_t
 *
öMsg
 );

365 
ZDO_Pro˚ssMgmtBödR•
–
zdoIncomögMsg_t
 *
öMsg
 );

367 
ZDO_Pro˚ssMgmtDúe˘JoöReq
–
zdoIncomögMsg_t
 *
öMsg
 );

369 
ZDO_Pro˚ssMgmtLóveReq
–
zdoIncomögMsg_t
 *
öMsg
 );

371 
ZDO_Pro˚ssMgmtPîmôJoöReq
–
zdoIncomögMsg_t
 *
öMsg
 );

373 
ZDO_Pro˚ssU£rDescReq
–
zdoIncomögMsg_t
 *
öMsg
 );

375 
ZDO_Pro˚ssU£rDescSë
–
zdoIncomögMsg_t
 *
öMsg
 );

377 
ZDO_Pro˚ssDevi˚A¬˚
–
zdoIncomögMsg_t
 *
öMsg
 );

379 
ZDO_BuûdSim∂eDescBuf
–
uöt8
 *
buf
, 
Sim∂eDes¸ùti⁄F‹m©_t
 *
desc
 );

381 
uöt8
 
ZDO_P¨£Sim∂eDescBuf
–uöt8 *
buf
, 
Sim∂eDes¸ùti⁄F‹m©_t
 *
desc
 );

383 
ZDO_Upd©eAddrM™agî
–
uöt16
 
nwkAddr
, 
uöt8
 *
extAddr
 );

392 
ZDO_NwkIEEEAddrRe•_t
 *
ZDO_P¨£AddrR•
–
zdoIncomögMsg_t
 *
öMsg
 );

397 
ZDO_P¨£NodeDescR•
–
zdoIncomögMsg_t
 *
öMsg
, 
ZDO_NodeDescR•_t
 *
pNDR•
 );

402 
ZDO_P¨£PowîDescR•
–
zdoIncomögMsg_t
 *
öMsg
, 
ZDO_PowîR•_t
 *
pNPR•
 );

411 
ZDO_P¨£Sim∂eDescR•
–
zdoIncomögMsg_t
 *
öMsg
, 
ZDO_Sim∂eDescR•_t
 *
pSim∂eDescR•
 );

420 
ZDO_A˘iveEndpoötR•_t
 *
ZDO_P¨£EPLi°R•
–
zdoIncomögMsg_t
 *
öMsg
 );

428 
	#ZDO_P¨£BödR•
(
a
Ë((
uöt8
)(*◊->
asdu
)))

	)

437 
ZDO_MgmNwkDiscR•_t
 *
ZDO_P¨£MgmNwkDiscR•
–
zdoIncomögMsg_t
 *
öMsg
 );

446 
ZDO_MgmtLqiR•_t
 *
ZDO_P¨£MgmtLqiR•
–
zdoIncomögMsg_t
 *
öMsg
 );

455 
ZDO_MgmtRtgR•_t
 *
ZDO_P¨£MgmtRtgR•
–
zdoIncomögMsg_t
 *
öMsg
 );

464 
ZDO_MgmtBödR•_t
 *
ZDO_P¨£MgmtBödR•
–
zdoIncomögMsg_t
 *
öMsg
 );

472 
	#ZDO_P¨£MgmtDúe˘JoöR•
(
a
Ë((
uöt8
)(*◊->
asdu
)))

	)

480 
	#ZDO_P¨£MgmtLóveR•
(
a
Ë((
uöt8
)(*◊->
asdu
)))

	)

488 
	#ZDO_P¨£MgmtPîmôJoöR•
(
a
Ë((
uöt8
)(*◊->
asdu
)))

	)

497 
ZDO_U£rDescR•_t
 *
ZDO_P¨£U£rDescR•
–
zdoIncomögMsg_t
 *
öMsg
 );

503 
ZDO_P¨£SîvîDiscR•
–
zdoIncomögMsg_t
 *
öMsg
, 
ZDO_SîvîDiscR•_t
 *
pR•
 );

511 
ZDO_P¨£EndDevi˚BödReq
–
zdoIncomögMsg_t
 *
öMsg
, 
ZDEndDevi˚Böd_t
 *
bödReq
 );

516 
ZDO_P¨£BödUnbödReq
–
zdoIncomögMsg_t
 *
öMsg
, 
ZDO_BödUnbödReq_t
 *
pReq
 );

521 
ZDO_Pro˚ssBödUnbödReq
–
zdoIncomögMsg_t
 *
öMsg
, 
ZDO_BödUnbödReq_t
 *
pReq
 );

529 
	#ZDO_P¨£U£rDescC⁄f
(
a
Ë((
uöt8
)(*◊->
asdu
)))

	)

534 
ZDO_P¨£Devi˚A¬˚
–
zdoIncomögMsg_t
 *
öMsg
, 
ZDO_Devi˚A¬˚_t
 *
pA¬˚
 );

543 
ZDO_MgmtNwkUpd©eNŸify_t
 *
ZDO_P¨£MgmtNwkUpd©eNŸify
–
zdoIncomögMsg_t
 *
öMsg
 );

548 #ifde‡
__˝lu•lus


	@Components/stack/zdo/ZDProfile.c

43 
	~"ZComdef.h
"

44 
	~"OSAL.h
"

45 
	~"AF.h
"

46 
	~"NLMEDE.h
"

47 
	~"nwk_utû.h
"

48 
	~"APS.h
"

50 
	~"AddrMgr.h
"

51 
	~"ZDC⁄fig.h
"

52 
	~"ZDProfûe.h
"

53 
	~"ZDObje˘.h
"

54 
	~"ZDNwkMgr.h
"

56 #i‡
deföed
–
LCD_SUPPORTED
 )

57 
	~"OnBﬂrd.h
"

60 
	~"nwk_utû.h
"

62 #i‡
deföed
–
MT_ZDO_FUNC
 )

63 
	~"MT_ZDO.h
"

70 
	#ZADDR_TO_AFADDR
–
pZADDR
, 
AFADDR
 ) { \

	)

71 (
	gAFADDR
).
	gídPoöt
 = 
ZDP_AF_ENDPOINT
; \

72 (
	gAFADDR
).
	gaddrMode
 = (
afAddrMode_t
)(
pZADDR
)->
addrMode
; \

73 (
	gAFADDR
).
	gaddr
.
	gsh‹tAddr
 = (
pZADDR
)->
addr
.
sh‹tAddr
; \

76 
	#FûlAndSídBuf„r
–
TRANSSEQ
, 
ADDR
, 
ID
, 
LEN
, 
BUF
 ) { \

	)

77 
afSètus_t
 
	g°©
; \

78 
	gZDP_TmpBuf
 = (
BUF
)+1; \

79 
	g°©
 = 
fûlAndSíd
–(
TRANSSEQ
), (
ADDR
), (
ID
), (
LEN
) ); \

80 
oßl_mem_‰ì
–(
BUF
) ); \

81 
	gZDP_TmpBuf
 = 
ZDP_Buf
+1; \

82  
	g°©
; \

85 
	#FûlAndSídTxO±i⁄s
–
TRANSSEQ
, 
ADDR
, 
ID
, 
LEN
, 
TxO
 ) { \

	)

86 
afSètus_t
 
	g°©
; \

87 
	gZDP_TxO±i⁄s
 = (
TxO
); \

88 
	g°©
 = 
fûlAndSíd
–(
TRANSSEQ
), (
ADDR
), (
ID
), (
LEN
) ); \

89 
	gZDP_TxO±i⁄s
 = 
AF_TX_OPTIONS_NONE
; \

90  
	g°©
; \

93 
	#FûlAndSídBuf„rTxO±i⁄s
–
TRANSSEQ
, 
ADDR
, 
ID
, 
LEN
, 
BUF
, 
TxO
 ) { \

	)

94 
afSètus_t
 
	g°©
; \

95 
	gZDP_TmpBuf
 = (
BUF
)+1; \

96 
	gZDP_TxO±i⁄s
 = (
TxO
); \

97 
	g°©
 = 
fûlAndSíd
–(
TRANSSEQ
), (
ADDR
), (
ID
), (
LEN
) ); \

98 
oßl_mem_‰ì
–(
BUF
) ); \

99 
	gZDP_TmpBuf
 = 
ZDP_Buf
+1; \

100 
	gZDP_TxO±i⁄s
 = 
AF_TX_OPTIONS_NONE
; \

101  
	g°©
; \

108 
	#ZDP_BUF_SZ
 80

	)

110 
CONST
 
byã
 
	gZDP_AF_ENDPOINT
 = 0;

117 *
	m√xt
;

118 
uöt8
 
	mèskID
;

119 
uöt16
 
	m˛u°îID
;

120 } 
	tZDO_MsgCB_t
;

127 
byã
 
	gZDP_TønsID
 = 0;

133 
ídPoötDesc_t
 
ZDAµ_ïDesc
;

143 
afSètus_t
 
fûlAndSíd
–
uöt8
 *
å™sSeq
, 
zAddrTy≥_t
 *
addr
, 
cId_t
 
˛u°îID
, 
byã
 
Àn
 );

144 
uöt8
 
ZDO_SídMsgCBs
–
zdoIncomögMsg_t
 *
öMsg
 );

145 
zdpPro˚ssAddrReq
–
zdoIncomögMsg_t
 *
öMsg
 );

151 
uöt8
 
	gZDP_Buf
[ 
ZDP_BUF_SZ
 ];

152 
uöt8
 *
	gZDP_TmpBuf
 = 
ZDP_Buf
+1;

153 
byã
 
	gZDP_TxO±i⁄s
 = 
AF_TX_OPTIONS_NONE
;

155 
ZDO_MsgCB_t
 *
	gzdoMsgCBs
 = (ZDO_MsgCB_à*)
NULL
;

161 (*
	tp‚ZDPMsgPro˚ss‹
)–
	tzdoIncomögMsg_t
 *
	töMsg
 );

165 
uöt16
 
˛u°îID
;

166 
p‚ZDPMsgPro˚ss‹
 
pFn
;

167 } 
	tzdpMsgProcIãm_t
;

169 
CONST
 
zdpMsgProcIãm_t
 
zdpMsgProcs
[] =

171 #i‡–
RFD_RCVC_ALWAYS_ON
==
TRUE
 ) || ( 
ZG_BUILD_RTR_TYPE
 )

173 { 
NWK_addr_ªq
, 
zdpPro˚ssAddrReq
 },

174 { 
Devi˚_™n˚
, 
ZDO_Pro˚ssDevi˚A¬˚
 },

176 { 
IEEE_addr_ªq
, 
zdpPro˚ssAddrReq
 },

177 { 
Node_Desc_ªq
, 
ZDO_Pro˚ssNodeDescReq
 },

178 { 
Powî_Desc_ªq
, 
ZDO_Pro˚ssPowîDescReq
 },

179 { 
Sim∂e_Desc_ªq
, 
ZDO_Pro˚ssSim∂eDescReq
 },

180 { 
A˘ive_EP_ªq
, 
ZDO_Pro˚ssA˘iveEPReq
 },

181 { 
M©ch_Desc_ªq
, 
ZDO_Pro˚ssM©chDescReq
 },

182 #i‡
	`deföed
 ( 
ZDO_MGMT_NWKDISC_RESPONSE
 )

183 { 
Mgmt_NWK_Disc_ªq
, 
ZDO_Pro˚ssMgmtNwkDiscReq
 },

185 #i‡
	`deföed
 ( 
ZDO_MGMT_LQI_RESPONSE
 ) && ( 
ZG_BUILD_RTR_TYPE
 )

186 { 
Mgmt_Lqi_ªq
, 
ZDO_Pro˚ssMgmtLqiReq
 },

188 #i‡
	`deföed
 ( 
ZDO_MGMT_RTG_RESPONSE
 ) && ( 
ZG_BUILD_RTR_TYPE
 )

189 { 
Mgmt_Rtg_ªq
, 
ZDO_Pro˚ssMgmtRtgReq
 },

191 #i‡
	`deföed
 ( 
ZDO_MGMT_BIND_RESPONSE
 ) && deföed ( 
REFLECTOR
 )

192 { 
Mgmt_Böd_ªq
, 
ZDO_Pro˚ssMgmtBödReq
 },

194 #i‡
	`deföed
 ( 
ZDO_MGMT_JOINDIRECT_RESPONSE
 ) && ( 
ZG_BUILD_RTR_TYPE
 )

195 { 
Mgmt_Dúe˘_Joö_ªq
, 
ZDO_Pro˚ssMgmtDúe˘JoöReq
 },

197 #i‡
	`deföed
 ( 
ZDO_MGMT_LEAVE_RESPONSE
 )

198 { 
Mgmt_Lóve_ªq
, 
ZDO_Pro˚ssMgmtLóveReq
 },

200 #i‡
	`deföed
 ( 
ZDO_MGMT_PERMIT_JOIN_RESPONSE
 ) && ( 
ZG_BUILD_RTR_TYPE
 )

201 { 
Mgmt_Pîmô_Joö_ªq
, 
ZDO_Pro˚ssMgmtPîmôJoöReq
 },

203 #i‡
	`deföed
 ( 
ZDO_USERDESC_RESPONSE
 )

204 { 
U£r_Desc_ªq
, 
ZDO_Pro˚ssU£rDescReq
 },

206 #i‡
	`deföed
 ( 
ZDO_USERDESCSET_RESPONSE
 )

207 { 
U£r_Desc_£t
, 
ZDO_Pro˚ssU£rDescSë
 },

209 #i‡
	`deföed
 ( 
ZDO_SERVERDISC_RESPONSE
 )

210 { 
Sîvî_Discovîy_ªq
, 
ZDO_Pro˚ssSîvîDiscReq
 },

212 {0xFFFF, 
NULL
}

213 
	}
};

225 
afSètus_t
 
	$fûlAndSíd
–
uöt8
 *
å™sSeq
, 
zAddrTy≥_t
 *
addr
, 
cId_t
 
˛u°îID
, 
byã
 
Àn
 )

227 
afAddrTy≥_t
 
afAddr
;

229 
	`oßl_mem£t
–&
afAddr
, 0, (
afAddrTy≥_t
) );

230 
	`ZADDR_TO_AFADDR
–
addr
, 
afAddr
 );

232 *(
ZDP_TmpBuf
-1Ë*
å™sSeq
;

234  
	`AF_D©aReque°
–&
afAddr
, &
ZDAµ_ïDesc
, 
˛u°îID
,

235 (
uöt16
)(
Àn
+1), (
uöt8
*)(
ZDP_TmpBuf
-1),

236 
å™sSeq
, 
ZDP_TxO±i⁄s
, 
AF_DEFAULT_RADIUS
 );

238 
	}
}

254 
afSètus_t
 
	$ZDP_SídD©a
–
uöt8
 *
TønsSeq
, 
zAddrTy≥_t
 *
d°Addr
, 
uöt16
 
cmd
,

255 
byã
 
Àn
, 
uöt8
 *
buf
, byã 
SecurôyE«bÀ
 )

257 
uöt8
 *
pBuf
 = 
ZDP_TmpBuf
;

258 
byã
 
˙t
 = 
Àn
;

260  
˙t
-- )

262 *
pBuf
++ = *
buf
++;

265 
	`FûlAndSídTxO±i⁄s
–
TønsSeq
, 
d°Addr
, 
cmd
, 
Àn
,

266 (
AF_DEFAULT_RADIUS
 | ((
SecurôyE«bÀ
Ë? 
AF_EN_SECURITY
 : 0)) );

267 
	}
}

281 
afSètus_t
 
	$ZDP_NWKAddrOfI¡îe°Req
–
zAddrTy≥_t
 *
d°Addr
, 
uöt16
 
nwkAddr
,

282 
byã
 
cmd
, byã 
SecurôyE«bÀ
 )

284 ()
SecurôyE«bÀ
;

286 
ZDP_TmpBuf
[0] = 
	`LO_UINT16
–
nwkAddr
 );

287 
ZDP_TmpBuf
[1] = 
	`HI_UINT16
–
nwkAddr
 );

289  
	`fûlAndSíd
–&
ZDP_TønsID
, 
d°Addr
, 
cmd
, 2 );

290 
	}
}

308 
afSètus_t
 
	$ZDP_NwkAddrReq
–
uöt8
 *
IEEEAddªss
, 
byã
 
ReqTy≥
,

309 
byã
 
SèπIndex
, byã 
SecurôyE«bÀ
 )

311 
uöt8
 *
pBuf
 = 
ZDP_TmpBuf
;

312 
byã
 
Àn
 = 
Z_EXTADDR_LEN
 + 1 + 1;

313 
zAddrTy≥_t
 
d°Addr
;

315 ()
SecurôyE«bÀ
;

317 i‡–
	`oßl_ExtAddrEquÆ
–
ßveExtAddr
, 
IEEEAddªss
 ) =
FALSE
 )

319 
d°Addr
.
addrMode
 = 
AddrBrﬂdˇ°
;

320 
d°Addr
.
addr
.
sh‹tAddr
 = 
NWK_BROADCAST_SHORTADDR_DEVRXON
;

324 
d°Addr
.
addrMode
 = 
Addr16Bô
;

325 
d°Addr
.
addr
.
sh‹tAddr
 = 
ZDAµNwkAddr
.addr.shortAddr;

328 
pBuf
 = 
	`oßl_˝yExtAddr
–pBuf, 
IEEEAddªss
 );

330 *
pBuf
++ = 
ReqTy≥
;

331 *
pBuf
++ = 
SèπIndex
;

333  
	`fûlAndSíd
–&
ZDP_TønsID
, &
d°Addr
, 
NWK_addr_ªq
, 
Àn
 );

334 
	}
}

349 
afSètus_t
 
	$ZDP_IEEEAddrReq
–
uöt16
 
sh‹tAddr
, 
byã
 
ReqTy≥
,

350 
byã
 
SèπIndex
, byã 
SecurôyE«bÀ
 )

352 
uöt8
 *
pBuf
 = 
ZDP_TmpBuf
;

353 
byã
 
Àn
 = 2 + 1 + 1;

354 
zAddrTy≥_t
 
d°Addr
;

356 ()
SecurôyE«bÀ
;

358 
d°Addr
.
addrMode
 = (
afAddrMode_t
)
Addr16Bô
;

359 
d°Addr
.
addr
.
sh‹tAddr
 = shortAddr;

361 *
pBuf
++ = 
	`LO_UINT16
–
sh‹tAddr
 );

362 *
pBuf
++ = 
	`HI_UINT16
–
sh‹tAddr
 );

364 *
pBuf
++ = 
ReqTy≥
;

365 *
pBuf
++ = 
SèπIndex
;

367  
	`fûlAndSíd
–&
ZDP_TønsID
, &
d°Addr
, 
IEEE_addr_ªq
, 
Àn
 );

368 
	}
}

388 
afSètus_t
 
	$ZDP_M©chDescReq
–
zAddrTy≥_t
 *
d°Addr
, 
uöt16
 
nwkAddr
,

389 
uöt16
 
ProfûeID
,

390 
byã
 
NumInClu°îs
, 
cId_t
 *
InClu°îLi°
,

391 
byã
 
NumOutClu°îs
, 
cId_t
 *
OutClu°îLi°
,

392 
byã
 
SecurôyE«bÀ
 )

394 
uöt8
 *
pBuf
 = 
ZDP_TmpBuf
;

396 
byã
 
i
, 
Àn
 = 2 + 2 + 1 + 1;

398 ()
SecurôyE«bÀ
;

400 
Àn
 +(
NumInClu°îs
 + 
NumOutClu°îs
Ë* (
uöt16
);

402 i‡–
Àn
 >
ZDP_BUF_SZ
-1 )

404  
afSètus_MEM_FAIL
;

407 *
pBuf
++ = 
	`LO_UINT16
–
nwkAddr
 );

408 *
pBuf
++ = 
	`HI_UINT16
–
nwkAddr
 );

410 *
pBuf
++ = 
	`LO_UINT16
–
ProfûeID
 );

411 *
pBuf
++ = 
	`HI_UINT16
–
ProfûeID
 );

413 *
pBuf
++ = 
NumInClu°îs
;

414 i‡–
NumInClu°îs
 )

416 
i
=0; i<
NumInClu°îs
; ++i) {

417 *
pBuf
++ = 
	`LO_UINT16
–
InClu°îLi°
[
i
] );

418 *
pBuf
++ = 
	`HI_UINT16
–
InClu°îLi°
[
i
] );

422 *
pBuf
++ = 
NumOutClu°îs
;

423 i‡–
NumOutClu°îs
 )

425 
i
=0; i<
NumOutClu°îs
; ++i) {

426 *
pBuf
++ = 
	`LO_UINT16
–
OutClu°îLi°
[
i
] );

427 *
pBuf
++ = 
	`HI_UINT16
–
OutClu°îLi°
[
i
] );

431  
	`fûlAndSíd
–&
ZDP_TønsID
, 
d°Addr
, 
M©ch_Desc_ªq
, 
Àn
 );

432 
	}
}

448 
afSètus_t
 
	$ZDP_Sim∂eDescReq
–
zAddrTy≥_t
 *
d°Addr
, 
uöt16
 
nwkAddr
,

449 
byã
 
ídPoöt
, byã 
SecurôyE«bÀ
 )

452 ()
SecurôyE«bÀ
;

454 
ZDP_TmpBuf
[0] = 
	`LO_UINT16
–
nwkAddr
 );

455 
ZDP_TmpBuf
[1] = 
	`HI_UINT16
–
nwkAddr
 );

456 
ZDP_TmpBuf
[2] = 
ídPoöt
;

458  
	`fûlAndSíd
–&
ZDP_TønsID
, 
d°Addr
, 
Sim∂e_Desc_ªq
, 3 );

459 
	}
}

475 
afSètus_t
 
	$ZDP_U£rDescSë
–
zAddrTy≥_t
 *
d°Addr
, 
uöt16
 
nwkAddr
,

476 
U£rDes¸ùt‹F‹m©_t
 *
U£rDes¸ùt‹
,

477 
byã
 
SecurôyE«bÀ
 )

479 
uöt8
 *
pBuf
 = 
ZDP_TmpBuf
;

480 
byã
 
Àn
 = (
U£rDes¸ùt‹
->À¿< 
AF_MAX_USER_DESCRIPTOR_LEN
) ?

481 
U£rDes¸ùt‹
->
Àn
 : 
AF_MAX_USER_DESCRIPTOR_LEN
;

482 
byã
 
addrLí
 = 2;

484 ()
SecurôyE«bÀ
;

486 *
pBuf
++ = 
	`LO_UINT16
–
nwkAddr
 );

487 *
pBuf
++ = 
	`HI_UINT16
–
nwkAddr
 );

489 *
pBuf
++ = 
Àn
;

490 
addrLí
 = 3;

492 
pBuf
 = 
	`oßl_mem˝y
–pBuf, 
U£rDes¸ùt‹
->
desc
, 
Àn
 );

493 
	`oßl_mem£t
–
pBuf
, 
AF_USER_DESCRIPTOR_FILL
, 
AF_MAX_USER_DESCRIPTOR_LEN
-
Àn
 );

495  
	`fûlAndSíd
–&
ZDP_TønsID
, 
d°Addr
, 
U£r_Desc_£t
, (
AF_MAX_USER_DESCRIPTOR_LEN
 + 
addrLí
) );

496 
	}
}

508 
afSètus_t
 
	$ZDP_SîvîDiscReq
–
uöt16
 
£rvîMask
, 
byã
 
SecurôyE«bÀ
 )

510 
uöt8
 *
pBuf
 = 
ZDP_TmpBuf
;

511 
zAddrTy≥_t
 
d°Addr
;

513 
d°Addr
.
addrMode
 = 
AddrBrﬂdˇ°
;

514 
d°Addr
.
addr
.
sh‹tAddr
 = 
NWK_BROADCAST_SHORTADDR_DEVRXON
;

516 *
pBuf
++ = 
	`LO_UINT16
–
£rvîMask
 );

517 *
pBuf
 = 
	`HI_UINT16
–
£rvîMask
 );

519 
	`FûlAndSídTxO±i⁄s
–&
ZDP_TønsID
, &
d°Addr
, 
Sîvî_Discovîy_ªq
, 2,

520 ((
SecurôyE«bÀ
Ë? 
AF_EN_SECURITY
 : 
AF_TX_OPTIONS_NONE
) );

521 
	}
}

537 
afSètus_t
 
	$ZDP_Devi˚A¬˚
–
uöt16
 
nwkAddr
, 
uöt8
 *
IEEEAddr
,

538 
byã
 
ˇ∑bûôõs
, byã 
SecurôyE«bÀ
 )

540 
zAddrTy≥_t
 
d°Addr
;

541 
uöt8
 
Àn
;

543 ()
SecurôyE«bÀ
;

545 
d°Addr
.
addrMode
 = (
afAddrMode_t
)
AddrBrﬂdˇ°
;

546 
d°Addr
.
addr
.
sh‹tAddr
 = 
NWK_BROADCAST_SHORTADDR_DEVRXON
;

548 
ZDP_TmpBuf
[0] = 
	`LO_UINT16
–
nwkAddr
 );

549 
ZDP_TmpBuf
[1] = 
	`HI_UINT16
–
nwkAddr
 );

550 
	`oßl_˝yExtAddr
–&
ZDP_TmpBuf
[2], 
IEEEAddr
 );

551 
Àn
 = 2 + 
Z_EXTADDR_LEN
;

553 
ZDP_TmpBuf
[10] = 
ˇ∑bûôõs
;

554 
Àn
++;

556  
	`fûlAndSíd
–&
ZDP_TønsID
, &
d°Addr
, 
Devi˚_™n˚
, 
Àn
 );

557 
	}
}

573 
	$zdpPro˚ssAddrReq
–
zdoIncomögMsg_t
 *
öMsg
 )

575 
assocüãd_devi˚s_t
 *
pAssoc
;

576 
uöt8
 
ªqTy≥
;

577 
uöt16
 
aoi
 = 
INVALID_NODE_ADDR
;

578 
uöt8
 *
õì
 = 
NULL
;

580 
ªqTy≥
 = 
öMsg
->
asdu
[(öMsg->
˛u°îID
 =
NWK_addr_ªq
Ë? 
Z_EXTADDR_LEN
 : –
uöt16
 ) ];

582 i‡–
öMsg
->
˛u°îID
 =
NWK_addr_ªq
 )

585 
õì
 = 
öMsg
->
asdu
;

587 i‡–
	`oßl_ExtAddrEquÆ
–
ßveExtAddr
, 
õì
 ) )

589 
aoi
 = 
ZDAµNwkAddr
.
addr
.
sh‹tAddr
;

592 i‡–(
ZSTACK_ROUTER_BUILD
)

593 && (((
pAssoc
 = 
	`AssocGëWôhExt
–
õì
 )Ë!
NULL
)

594 && (
pAssoc
->
nodeRñ©i⁄
 =
CHILD_RFD
)) )

596 
aoi
 = 
pAssoc
->
sh‹tAddr
;

597 i‡–
ªqTy≥
 !
ZDP_ADDR_REQTYPE_SINGLE
 )

598 
ªqTy≥
 = 0xFF;

603 
aoi
 = 
	`BUILD_UINT16
–
öMsg
->
asdu
[0], inMsg->asdu[1] );

605 i‡–
aoi
 =
ZDAµNwkAddr
.
addr
.
sh‹tAddr
 )

607 
õì
 = 
ßveExtAddr
;

609 i‡–(
ZSTACK_ROUTER_BUILD
)

610 && (((
pAssoc
 = 
	`AssocGëWôhSh‹t
–
aoi
 )Ë!
NULL
)

611 && (
pAssoc
->
nodeRñ©i⁄
 =
CHILD_RFD
)) )

613 
AddrMgrE¡ry_t
 
addrE¡ry
;

614 
addrE¡ry
.
u£r
 = 
ADDRMGR_USER_DEFAULT
;

615 
addrE¡ry
.
ödex
 = 
pAssoc
->
addrIdx
;

616 i‡–
	`AddrMgrE¡ryGë
–&
addrE¡ry
 ) )

618 
õì
 = 
addrE¡ry
.
extAddr
;

621 i‡–
ªqTy≥
 !
ZDP_ADDR_REQTYPE_SINGLE
 )

622 
ªqTy≥
 = 0xFF;

626 i‡–(
aoi
 !
INVALID_NODE_ADDR
Ë&& (
õì
 !
NULL
) )

628 
uöt8
 *
pBuf
 = 
ZDP_TmpBuf
;

630 
byã
 
Àn
 = 1 + 
Z_EXTADDR_LEN
 + 2;

632 
byã
 
°©
 = ((
ªqTy≥
 =
ZDP_ADDR_REQTYPE_SINGLE
) ||

633 (
ªqTy≥
 =
ZDP_ADDR_REQTYPE_EXTENDED
) ||

634 ((
ªqTy≥
 =
ZDP_ADDR_REQTYPE_MEMBERSHIP
Ë&& (
öMsg
->
˛u°îID
 =
NWK_addr_ªq
)) ) ?

635 
ZDP_SUCCESS
 : 
ZDP_INVALID_REQTYPE
;

637 *
pBuf
++ = 
°©
;

639 
pBuf
 = 
	`oßl_˝yExtAddr
–pBuf, 
õì
 );

641 *
pBuf
++ = 
	`LO_UINT16
–
aoi
 );

642 *
pBuf
++ = 
	`HI_UINT16
–
aoi
 );

644 i‡–
ZSTACK_ROUTER_BUILD
 )

646 i‡–(
ªqTy≥
 =
ZDP_ADDR_REQTYPE_EXTENDED
) &&

647 (
aoi
 =
ZDAµNwkAddr
.
addr
.
sh‹tAddr
) )

649 
byã
 
˙t
 = 0;

650 
uöt16
 *
li°
 = 
	`AssocMakeLi°
–&
˙t
 );

652 i‡–
li°
 !
NULL
 )

654 
byã
 
idx
 = 
öMsg
->
asdu
[(((öMsg->
˛u°îID
 =
NWK_addr_ªq
Ë? 
Z_EXTADDR_LEN
 : –
uöt16
 )) + 1)];

655 
uöt16
 *
pLi°
 = 
li°
 + 
idx
;

658 i‡–
˙t
 > 
idx
 )

660 
˙t
 -
idx
;

661 
Àn
 +(
˙t
 * –
uöt16
 ));

665 
˙t
 = 0;

667 *
pBuf
++ = 
˙t
;

668 
Àn
++;

671 *
pBuf
++ = 
idx
;

672 
Àn
++;

674  
˙t
 != 0 )

676 *
pBuf
++ = 
	`LO_UINT16
–*
pLi°
 );

677 *
pBuf
++ = 
	`HI_UINT16
–*
pLi°
 );

678 
pLi°
++;

679 
˙t
--;

682 
	`oßl_mem_‰ì
–(
uöt8
 *)
li°
 );

687 *
pBuf
++ = 0;

688 
Àn
++;

693 
ZDP_TxO±i⁄s
 = 
AF_MSG_ACK_REQUEST
;

694 
	`fûlAndSíd
–&(
öMsg
->
TønsSeq
), &(öMsg->
§cAddr
), (
cId_t
)(öMsg->
˛u°îID
 | 
ZDO_RESPONSE_BIT
), 
Àn
 );

695 
ZDP_TxO±i⁄s
 = 
AF_TX_OPTIONS_NONE
;

697 
	}
}

711 
afSètus_t
 
	$ZDP_NodeDescMsg
–
zdoIncomögMsg_t
 *
öMsg
,

712 
uöt16
 
nwkAddr
, 
NodeDes¸ùt‹F‹m©_t
 *
pNodeDesc
 )

714 
uöt8
 *
pBuf
 = 
ZDP_TmpBuf
;

715 
byã
 
Àn
;

717 
Àn
 = 1 + 2 + 13;

719 *
pBuf
++ = 
ZDP_SUCCESS
;

721 *
pBuf
++ = 
	`LO_UINT16
–
nwkAddr
 );

722 *
pBuf
++ = 
	`HI_UINT16
–
nwkAddr
 );

724 *
pBuf
++ = (
byã
)((
pNodeDesc
->
Com∂exDescAvaû
 << 3) |

725 (
pNodeDesc
->
U£rDescAvaû
 << 4) |

726 (
pNodeDesc
->
LogiˇlTy≥
 & 0x07));

728 *
pBuf
++ = (
byã
)((
pNodeDesc
->
FªquícyB™d
 << 3Ë| (pNodeDesc->
APSFœgs
 & 0x07));

729 *
pBuf
++ = 
pNodeDesc
->
C≠abûôyFœgs
;

730 *
pBuf
++ = 
pNodeDesc
->
M™uÁ˘uªrCode
[0];

731 *
pBuf
++ = 
pNodeDesc
->
M™uÁ˘uªrCode
[1];

732 *
pBuf
++ = 
pNodeDesc
->
MaxBuf„rSize
;

733 *
pBuf
++ = 
pNodeDesc
->
MaxInTøns„rSize
[0];

734 *
pBuf
++ = 
pNodeDesc
->
MaxInTøns„rSize
[1];

736 *
pBuf
++ = 
	`LO_UINT16
–
pNodeDesc
->
SîvîMask
 );

737 *
pBuf
++ = 
	`HI_UINT16
–
pNodeDesc
->
SîvîMask
 );

738 *
pBuf
++ = 
pNodeDesc
->
MaxOutTøns„rSize
[0];

739 *
pBuf
++ = 
pNodeDesc
->
MaxOutTøns„rSize
[1];

740 *
pBuf
 = 
pNodeDesc
->
Des¸ùt‹C≠abûôy
;

742  
	`fûlAndSíd
–&(
öMsg
->
TønsSeq
), &(öMsg->
§cAddr
), 
Node_Desc_r•
, 
Àn
 );

743 
	}
}

757 
afSètus_t
 
	$ZDP_PowîDescMsg
–
zdoIncomögMsg_t
 *
öMsg
,

758 
uöt16
 
nwkAddr
, 
NodePowîDes¸ùt‹F‹m©_t
 *
pPowîDesc
 )

760 
uöt8
 *
pBuf
 = 
ZDP_TmpBuf
;

761 
byã
 
Àn
 = 1 + 2 + 2;

763 *
pBuf
++ = 
ZDP_SUCCESS
;

765 *
pBuf
++ = 
	`LO_UINT16
–
nwkAddr
 );

766 *
pBuf
++ = 
	`HI_UINT16
–
nwkAddr
 );

768 *
pBuf
++ = (
byã
)((
pPowîDesc
->
AvaûabÀPowîSour˚s
 << 4)

769 | (
pPowîDesc
->
PowîMode
 & 0x0F));

770 *
pBuf
++ = (
byã
)((
pPowîDesc
->
CuºítPowîSour˚Levñ
 << 4)

771 | (
pPowîDesc
->
CuºítPowîSour˚
 & 0x0F));

773  
	`fûlAndSíd
–&(
öMsg
->
TønsSeq
), &(öMsg->
§cAddr
), 
Powî_Desc_r•
, 
Àn
 );

774 
	}
}

788 
afSètus_t
 
	$ZDP_Sim∂eDescMsg
–
zdoIncomögMsg_t
 *
öMsg
, 
byã
 
Sètus
,

789 
Sim∂eDes¸ùti⁄F‹m©_t
 *
pSim∂eDesc
 )

791 
uöt8
 *
pBuf
 = 
ZDP_TmpBuf
;

792 
uöt8
 
i
, 
Àn
;

794 i‡–
Sètus
 =
ZDP_SUCCESS
 && 
pSim∂eDesc
 )

797 
Àn
 = 1 + 2 + 1 + 8;

798 
Àn
 +(
pSim∂eDesc
->
AµNumInClu°îs
 +ÖSim∂eDesc->
AµNumOutClu°îs
Ë*  ( 
uöt16
 );

802 
Àn
 = 1 + 2 + 1;

804 i‡–
Àn
 >
ZDP_BUF_SZ
-1 )

806  
afSètus_MEM_FAIL
;

809 *
pBuf
++ = 
Sètus
;

811 *
pBuf
++ = 
	`LO_UINT16
–
ZDAµNwkAddr
.
addr
.
sh‹tAddr
 );

812 *
pBuf
++ = 
	`HI_UINT16
–
ZDAµNwkAddr
.
addr
.
sh‹tAddr
 );

814 i‡–
Àn
 > 4 )

816 *
pBuf
++ = 
Àn
 - 4;

818 *
pBuf
++ = 
pSim∂eDesc
->
EndPoöt
;

819 *
pBuf
++ = 
	`LO_UINT16
–
pSim∂eDesc
->
AµProfId
 );

820 *
pBuf
++ = 
	`HI_UINT16
–
pSim∂eDesc
->
AµProfId
 );

821 *
pBuf
++ = 
	`LO_UINT16
–
pSim∂eDesc
->
AµDevi˚Id
 );

822 *
pBuf
++ = 
	`HI_UINT16
–
pSim∂eDesc
->
AµDevi˚Id
 );

824 *
pBuf
++ = (
byã
)(
pSim∂eDesc
->
AµDevVî
 << 4);

826 *
pBuf
++ = 
pSim∂eDesc
->
AµNumInClu°îs
;

827 i‡–
pSim∂eDesc
->
AµNumInClu°îs
 )

829 
i
=0; i<
pSim∂eDesc
->
AµNumInClu°îs
; ++i)

831 *
pBuf
++ = 
	`LO_UINT16
–
pSim∂eDesc
->
pAµInClu°îLi°
[
i
] );

832 *
pBuf
++ = 
	`HI_UINT16
–
pSim∂eDesc
->
pAµInClu°îLi°
[
i
] );

836 *
pBuf
++ = 
pSim∂eDesc
->
AµNumOutClu°îs
;

837 i‡–
pSim∂eDesc
->
AµNumOutClu°îs
 )

839 
i
=0; i<
pSim∂eDesc
->
AµNumOutClu°îs
; ++i)

841 *
pBuf
++ = 
	`LO_UINT16
–
pSim∂eDesc
->
pAµOutClu°îLi°
[
i
] );

842 *
pBuf
++ = 
	`HI_UINT16
–
pSim∂eDesc
->
pAµOutClu°îLi°
[
i
] );

849 *
pBuf
 = 0;

852  
	`fûlAndSíd
–&(
öMsg
->
TønsSeq
), &(öMsg->
§cAddr
), 
Sim∂e_Desc_r•
, 
Àn
 );

853 
	}
}

873 
afSètus_t
 
	$ZDP_EPR•
–
uöt16
 
MsgTy≥
, 
byã
 
TønsSeq
, 
zAddrTy≥_t
 *
d°Addr
,

874 
byã
 
Sètus
, 
uöt16
 
nwkAddr
, byã 
Cou¡
,

875 
uöt8
 *
pEPLi°
,

876 
byã
 
SecurôyE«bÀ
 )

878 
uöt8
 *
pBuf
 = 
ZDP_TmpBuf
;

879 
byã
 
Àn
 = 1 + 2 + 1;

880 
byã
 
txO±i⁄s
;

882 ()
SecurôyE«bÀ
;

884 i‡–
MsgTy≥
 =
M©ch_Desc_r•
 )

885 
txO±i⁄s
 = 
AF_MSG_ACK_REQUEST
;

887 
txO±i⁄s
 = 0;

889 *
pBuf
++ = 
Sètus
;

890 *
pBuf
++ = 
	`LO_UINT16
–
nwkAddr
 );

891 *
pBuf
++ = 
	`HI_UINT16
–
nwkAddr
 );

893 *
pBuf
++ = 
Cou¡
;

895 i‡–
Cou¡
 )

897 
Àn
 +
Cou¡
;

898 
	`oßl_mem˝y
–
pBuf
, 
pEPLi°
, 
Cou¡
 );

901 
	`FûlAndSídTxO±i⁄s
–&
TønsSeq
, 
d°Addr
, 
MsgTy≥
, 
Àn
, 
txO±i⁄s
 );

902 
	}
}

917 
ZSètus_t
 
	$ZDP_U£rDescR•
–
byã
 
TønsSeq
, 
zAddrTy≥_t
 *
d°Addr
,

918 
uöt16
 
nwkAddrOfI¡îe°
, 
U£rDes¸ùt‹F‹m©_t
 *
u£rDesc
,

919 
byã
 
SecurôyE«bÀ
 )

921 
uöt8
 *
pBuf
 = 
ZDP_TmpBuf
;

922 
byã
 
Àn
 = 1 + 2 + 1;

924 ()
SecurôyE«bÀ
;

926 
Àn
 +
u£rDesc
->len;

928 *
pBuf
++ = 
ZSUCCESS
;

930 *
pBuf
++ = 
	`LO_UINT16
–
nwkAddrOfI¡îe°
 );

931 *
pBuf
++ = 
	`HI_UINT16
–
nwkAddrOfI¡îe°
 );

933 *
pBuf
++ = 
u£rDesc
->
Àn
;

934 
	`oßl_mem˝y
–
pBuf
, 
u£rDesc
->
desc
, u£rDesc->
Àn
 );

936  (
ZSètus_t
)
	`fûlAndSíd
–&
TønsSeq
, 
d°Addr
, 
U£r_Desc_r•
, 
Àn
 );

937 
	}
}

953 
ZSètus_t
 
	$ZDP_SîvîDiscR•
–
byã
 
å™sID
, 
zAddrTy≥_t
 *
d°Addr
, byã 
°©us
,

954 
uöt16
 
aoi
, uöt16 
£rvîMask
, 
byã
 
SecurôyE«bÀ
 )

956 c⁄° 
byã
 
Àn
 = 1 + 2;

957 
uöt8
 *
pBuf
 = 
ZDP_TmpBuf
;

958 
ZSètus_t
 
°©
;

961 ()
aoi
;

962 ()
SecurôyE«bÀ
;

964 *
pBuf
++ = 
°©us
;

966 *
pBuf
++ = 
	`LO_UINT16
–
£rvîMask
 );

967 *
pBuf
++ = 
	`HI_UINT16
–
£rvîMask
 );

969 
ZDP_TxO±i⁄s
 = 
AF_MSG_ACK_REQUEST
;

970 
°©
 = 
	`fûlAndSíd
–&
å™sID
, 
d°Addr
, 
Sîvî_Discovîy_r•
, 
Àn
 );

971 
ZDP_TxO±i⁄s
 = 
AF_TX_OPTIONS_NONE
;

973  ( 
°©
 );

974 
	}
}

993 
afSètus_t
 
	$ZDP_GíîicR•
–
byã
 
TønsSeq
, 
zAddrTy≥_t
 *
d°Addr
,

994 
byã
 
°©us
, 
uöt16
 
aoi
, uöt16 
r•ID
, byã 
SecurôyE«bÀ
 )

996 
uöt8
 
Àn
;

998 ()
SecurôyE«bÀ
;

1000 
ZDP_TmpBuf
[0] = 
°©us
;

1001 
ZDP_TmpBuf
[1] = 
	`LO_UINT16
–
aoi
 );

1002 
ZDP_TmpBuf
[2] = 
	`HI_UINT16
–
aoi
 );

1005 
ZDP_TmpBuf
[3] = 0;

1006 
Àn
 = 4;

1008  
	`fûlAndSíd
–&
TønsSeq
, 
d°Addr
, 
r•ID
, 
Àn
 );

1009 
	}
}

1039 
afSètus_t
 
	$ZDP_EndDevi˚BödReq
–
zAddrTy≥_t
 *
d°Addr
,

1040 
uöt16
 
LoˇlCo‹dö©‹
,

1041 
byã
 
ídPoöt
,

1042 
uöt16
 
ProfûeID
,

1043 
byã
 
NumInClu°îs
, 
cId_t
 *
InClu°îLi°
,

1044 
byã
 
NumOutClu°îs
, 
cId_t
 *
OutClu°îLi°
,

1045 
byã
 
SecurôyE«bÀ
 )

1047 
uöt8
 *
pBuf
 = 
ZDP_TmpBuf
;

1048 
uöt8
 
i
, 
Àn
;

1049 
uöt8
 *
õìAddr
;

1051 ()
SecurôyE«bÀ
;

1054 
Àn
 = 2 + 
Z_EXTADDR_LEN
 + 1 + 2 + 1 + 1;

1055 
Àn
 +(
NumInClu°îs
 + 
NumOutClu°îs
Ë*  ( 
uöt16
 );

1057 i‡–
Àn
 >
ZDP_BUF_SZ
-1 )

1059  
afSètus_MEM_FAIL
;

1062 i‡–
LoˇlCo‹dö©‹
 !
	`NLME_GëSh‹tAddr
() )

1064  
afSètus_INVALID_PARAMETER
;

1067 *
pBuf
++ = 
	`LO_UINT16
–
LoˇlCo‹dö©‹
 );

1068 *
pBuf
++ = 
	`HI_UINT16
–
LoˇlCo‹dö©‹
 );

1070 
õìAddr
 = 
	`NLME_GëExtAddr
();

1071 
pBuf
 = 
	`oßl_˝yExtAddr
–pBuf, 
õìAddr
 );

1073 *
pBuf
++ = 
ídPoöt
;

1075 *
pBuf
++ = 
	`LO_UINT16
–
ProfûeID
 );

1076 *
pBuf
++ = 
	`HI_UINT16
–
ProfûeID
 );

1078 *
pBuf
++ = 
NumInClu°îs
;

1079  
i
 = 0; i < 
NumInClu°îs
; ++i )

1081 *
pBuf
++ = 
	`LO_UINT16
(
InClu°îLi°
[
i
]);

1082 *
pBuf
++ = 
	`HI_UINT16
(
InClu°îLi°
[
i
]);

1085 *
pBuf
++ = 
NumOutClu°îs
;

1086  
i
 = 0; i < 
NumOutClu°îs
; ++i )

1088 *
pBuf
++ = 
	`LO_UINT16
(
OutClu°îLi°
[
i
]);

1089 *
pBuf
++ = 
	`HI_UINT16
(
OutClu°îLi°
[
i
]);

1092  
	`fûlAndSíd
–&
ZDP_TønsID
, 
d°Addr
, 
End_Devi˚_Böd_ªq
, 
Àn
 );

1093 
	}
}

1113 
afSètus_t
 
	$ZDP_BödUnbödReq
–
uöt16
 
BödOrUnböd
, 
zAddrTy≥_t
 *
d°Addr
,

1114 
uöt8
 *
Sour˚Addr
, 
byã
 
SrcEndPoöt
,

1115 
cId_t
 
Clu°îID
,

1116 
zAddrTy≥_t
 *
de°ö©i⁄Addr
, 
byã
 
D°EndPoöt
,

1117 
byã
 
SecurôyE«bÀ
 )

1119 
uöt8
 *
pBuf
 = 
ZDP_TmpBuf
;

1120 
byã
 
Àn
;

1122 ()
SecurôyE«bÀ
;

1125 
Àn
 = 
Z_EXTADDR_LEN
 + 1 + –
cId_t
 ) + –
uöt8
 );

1126 i‡–
de°ö©i⁄Addr
->
addrMode
 =
Addr64Bô
 )

1127 
Àn
 +
Z_EXTADDR_LEN
 + 1;

1128 i‡–
de°ö©i⁄Addr
->
addrMode
 =
AddrGroup
 )

1129 
Àn
 + ( 
uöt16
 );

1131 
pBuf
 = 
	`oßl_˝yExtAddr
–pBuf, 
Sour˚Addr
 );

1132 *
pBuf
++ = 
SrcEndPoöt
;

1134 *
pBuf
++ = 
	`LO_UINT16
–
Clu°îID
 );

1136 *
pBuf
++ = 
	`HI_UINT16
–
Clu°îID
 );

1137 *
pBuf
++ = 
de°ö©i⁄Addr
->
addrMode
;

1138 i‡–
de°ö©i⁄Addr
->
addrMode
 =
Addr64Bô
 )

1140 
pBuf
 = 
	`oßl_˝yExtAddr
–pBuf, 
de°ö©i⁄Addr
->
addr
.
extAddr
 );

1141 *
pBuf
 = 
D°EndPoöt
;

1143 i‡–
de°ö©i⁄Addr
->
addrMode
 =
AddrGroup
 )

1145 *
pBuf
++ = 
	`LO_UINT16
–
de°ö©i⁄Addr
->
addr
.
sh‹tAddr
 );

1146 *
pBuf
++ = 
	`HI_UINT16
–
de°ö©i⁄Addr
->
addr
.
sh‹tAddr
 );

1149 
	`FûlAndSídTxO±i⁄s
–&
ZDP_TønsID
, 
d°Addr
, 
BödOrUnböd
, 
Àn
, 
AF_MSG_ACK_REQUEST
 );

1150 
	}
}

1170 
afSètus_t
 
	$ZDP_MgmtNwkDiscReq
–
zAddrTy≥_t
 *
d°Addr
,

1171 
uöt32
 
SˇnCh™√ls
,

1172 
byã
 
SˇnDuøti⁄
,

1173 
byã
 
SèπIndex
,

1174 
byã
 
SecurôyE«bÀ
 )

1176 
uöt8
 *
pBuf
 = 
ZDP_TmpBuf
;

1177 
byã
 
Àn
 = –
uöt32
 )+1+1;

1179 ()
SecurôyE«bÀ
;

1181 
pBuf
 = 
	`oßl_buf„r_uöt32
–pBuf, 
SˇnCh™√ls
 );

1183 *
pBuf
++ = 
SˇnDuøti⁄
;

1184 *
pBuf
 = 
SèπIndex
;

1186  
	`fûlAndSíd
–&
ZDP_TønsID
, 
d°Addr
, 
Mgmt_NWK_Disc_ªq
, 
Àn
 );

1187 
	}
}

1201 
afSètus_t
 
	$ZDP_MgmtDúe˘JoöReq
–
zAddrTy≥_t
 *
d°Addr
,

1202 
uöt8
 *
devi˚Addr
,

1203 
byã
 
ˇpInfo
,

1204 
byã
 
SecurôyE«bÀ
 )

1206 ()
SecurôyE«bÀ
;

1208 
	`oßl_˝yExtAddr
–
ZDP_TmpBuf
, 
devi˚Addr
 );

1209 
ZDP_TmpBuf
[
Z_EXTADDR_LEN
] = 
ˇpInfo
;

1211  
	`fûlAndSíd
–&
ZDP_TønsID
, 
d°Addr
, 
Mgmt_Dúe˘_Joö_ªq
, (
Z_EXTADDR_LEN
 + 1) );

1212 
	}
}

1225 
afSètus_t
 
	$ZDP_MgmtPîmôJoöReq
–
zAddrTy≥_t
 *
d°Addr
, 
byã
 
duøti⁄
,

1226 
byã
 
TcSignifiˇn˚
, byã 
SecurôyE«bÀ
 )

1228 ()
SecurôyE«bÀ
;

1231 
ZDP_TmpBuf
[
ZDP_MGMT_PERMIT_JOIN_REQ_DURATION
] = 
duøti⁄
;

1232 
ZDP_TmpBuf
[
ZDP_MGMT_PERMIT_JOIN_REQ_TC_SIG
] = 
TcSignifiˇn˚
;

1235  
	`fûlAndSíd
–&
ZDP_TønsID
, 
d°Addr
, 
Mgmt_Pîmô_Joö_ªq
,

1236 
ZDP_MGMT_PERMIT_JOIN_REQ_SIZE
 );

1237 
	}
}

1253 
afSètus_t
 
	$ZDP_MgmtLóveReq
–
zAddrTy≥_t
 *
d°Addr
, 
uöt8
 *
IEEEAddr
, uöt8 
RemoveChûdªn
,

1254 
uöt8
 
Rejoö
, uöt8 
SecurôyE«bÀ
 )

1257 ()
SecurôyE«bÀ
;

1259 
	`oßl_˝yExtAddr
–
ZDP_TmpBuf
, 
IEEEAddr
 );

1260 
ZDP_TmpBuf
[
Z_EXTADDR_LEN
] = 0;

1262 i‡–
RemoveChûdªn
 =
TRUE
 )

1264 
ZDP_TmpBuf
[
Z_EXTADDR_LEN
] |
ZDP_MGMT_LEAVE_REQ_RC
;

1266 i‡–
Rejoö
 =
TRUE
 )

1268 
ZDP_TmpBuf
[
Z_EXTADDR_LEN
] |
ZDP_MGMT_LEAVE_REQ_REJOIN
;

1271  
	`fûlAndSíd
–&
ZDP_TønsID
, 
d°Addr
, 
Mgmt_Lóve_ªq
, (
Z_EXTADDR_LEN
 + 1) );

1272 
	}
}

1290 
afSètus_t
 
	$ZDP_MgmtNwkUpd©eReq
–
zAddrTy≥_t
 *
d°Addr
,

1291 
uöt32
 
Ch™√lMask
,

1292 
uöt8
 
SˇnDuøti⁄
,

1293 
uöt8
 
SˇnCou¡
,

1294 
uöt8
 
NwkUpd©eId
,

1295 
uöt16
 
NwkM™agîAddr
 )

1297 
uöt8
 *
pBuf
 = 
ZDP_TmpBuf
;

1298 
byã
 
Àn
 = –
uöt32
 ) + 1;

1300 
pBuf
 = 
	`oßl_buf„r_uöt32
–pBuf, 
Ch™√lMask
 );

1302 *
pBuf
++ = 
SˇnDuøti⁄
;

1304 i‡–
SˇnDuøti⁄
 <= 0x05 )

1307 
Àn
 +–
uöt8
 );

1309 *
pBuf
++ = 
SˇnCou¡
;

1311 i‡––
SˇnDuøti⁄
 == 0xFE ) || ( ScanDuration == 0xFF ) )

1314 
Àn
 +–
uöt8
 );

1316 *
pBuf
++ = 
NwkUpd©eId
;

1318 i‡–
SˇnDuøti⁄
 == 0xFF )

1320 
Àn
 +–
uöt16
 );

1322 *
pBuf
++ = 
	`LO_UINT16
–
NwkM™agîAddr
 );

1323 *
pBuf
++ = 
	`HI_UINT16
–
NwkM™agîAddr
 );

1327  
	`fûlAndSíd
–&
ZDP_TønsID
, 
d°Addr
, 
Mgmt_NWK_Upd©e_ªq
, 
Àn
 );

1328 
	}
}

1353 
afSètus_t
 
	$ZDP_MgmtNwkDiscR•
–
byã
 
TønsSeq
, 
zAddrTy≥_t
 *
d°Addr
,

1354 
byã
 
Sètus
,

1355 
byã
 
Nëw‹kCou¡
,

1356 
byã
 
SèπIndex
,

1357 
byã
 
Nëw‹kLi°Cou¡
,

1358 
√tw‹kDesc_t
 *
Nëw‹kLi°
,

1359 
byã
 
SecurôyE«bÀ
 )

1361 
uöt8
 *
buf
;

1362 
uöt8
 *
pBuf
;

1363 
byã
 
Àn
 = 1+1+1+1;

1364 
byã
 
idx
;

1366 ()
SecurôyE«bÀ
;

1368 
Àn
 +(
Nëw‹kLi°Cou¡
 * ( 
ZDP_NETWORK_EXTENDED_DISCRIPTOR_SIZE
 - 2 ));

1370 
buf
 = 
	`oßl_mem_Æloc
–
Àn
+1 );

1371 i‡–
buf
 =
NULL
 )

1373  
afSètus_MEM_FAIL
;

1376 
pBuf
 = 
buf
+1;

1378 *
pBuf
++ = 
Sètus
;

1379 *
pBuf
++ = 
Nëw‹kCou¡
;

1380 *
pBuf
++ = 
SèπIndex
;

1381 *
pBuf
++ = 
Nëw‹kLi°Cou¡
;

1383  
idx
 = 0; idx < 
Nëw‹kLi°Cou¡
; idx++ )

1385 
	`oßl_˝yExtAddr
–
pBuf
, 
Nëw‹kLi°
->
exãndedPANID
);

1386 
pBuf
 +
Z_EXTADDR_LEN
;

1388 *
pBuf
++ = 
Nëw‹kLi°
->
logiˇlCh™√l
;

1389 *
pBuf
 = 
Nëw‹kLi°
->
°ackProfûe
;

1390 *
pBuf
++ |(
byã
)(
Nëw‹kLi°
->
vîsi⁄
 << 4);

1391 *
pBuf
 = 
Nëw‹kLi°
->
bóc⁄Ordî
;

1392 *
pBuf
++ |(
byã
)(
Nëw‹kLi°
->
su≥rFømeOrdî
 << 4);

1394 i‡–
Nëw‹kLi°
->
cho£nRouãr
 !
INVALID_NODE_ADDR
 )

1396 *
pBuf
++ = 
TRUE
;

1400 *
pBuf
++ = 
FALSE
;

1403 
Nëw‹kLi°
 = Nëw‹kLi°->
√xtDesc
;

1406 
	`FûlAndSídBuf„r
–&
TønsSeq
, 
d°Addr
, 
Mgmt_NWK_Disc_r•
, 
Àn
, 
buf
 );

1407 
	}
}

1427 
ZSètus_t
 
	$ZDP_MgmtLqiR•
–
byã
 
TønsSeq
, 
zAddrTy≥_t
 *
d°Addr
,

1428 
byã
 
Sètus
,

1429 
byã
 
Neighb‹LqiE¡rõs
,

1430 
byã
 
SèπIndex
,

1431 
byã
 
Neighb‹LqiCou¡
,

1432 
ZDP_MgmtLqiIãm_t
* 
Neighb‹Li°
,

1433 
byã
 
SecurôyE«bÀ
 )

1435 
ZDP_MgmtLqiIãm_t
* 
li°
 = 
Neighb‹Li°
;

1436 
uöt8
 *
buf
, *
pBuf
;

1437 
byã
 
Àn
, 
x
;

1439 ()
SecurôyE«bÀ
;

1441 i‡–
ZSuc˚ss
 !
Sètus
 )

1443 
ZDP_TmpBuf
[0] = 
Sètus
;

1444  
	`fûlAndSíd
–&
TønsSeq
, 
d°Addr
, 
Mgmt_Lqi_r•
, 1 );

1449 
Àn
 = (1 + 1 + 1 + 1Ë+ (
Neighb‹LqiCou¡
 * 
ZDP_MGMTLQI_EXTENDED_SIZE
);

1451 
buf
 = 
	`oßl_mem_Æloc
–
Àn
+1 );

1452 i‡–
buf
 =
NULL
 )

1454  
afSètus_MEM_FAIL
;

1457 
pBuf
 = 
buf
+1;

1459 *
pBuf
++ = 
Sètus
;

1460 *
pBuf
++ = 
Neighb‹LqiE¡rõs
;

1461 *
pBuf
++ = 
SèπIndex
;

1462 *
pBuf
++ = 
Neighb‹LqiCou¡
;

1464  
x
 = 0; x < 
Neighb‹LqiCou¡
; x++ )

1466 
	`oßl_˝yExtAddr
–
pBuf
, 
li°
->
extP™ID
);

1467 
pBuf
 +
Z_EXTADDR_LEN
;

1470 
pBuf
 = 
	`oßl_˝yExtAddr
–pBuf, 
li°
->
extAddr
 );

1473 *
pBuf
++ = 
	`LO_UINT16
–
li°
->
nwkAddr
 );

1474 *
pBuf
++ = 
	`HI_UINT16
–
li°
->
nwkAddr
 );

1477 *
pBuf
 = 
li°
->
devTy≥
;

1480 *
pBuf
 |(
uöt8
)(
li°
->
rxOnIdÀ
 << 2);

1483 *
pBuf
++ |(
uöt8
)(
li°
->
ªœti⁄
 << 4);

1486 *
pBuf
++ = (
uöt8
)(
li°
->
≥rmô
);

1489 *
pBuf
++ = 
li°
->
dïth
;

1492 *
pBuf
++ = 
li°
->
lqi
;

1494 
li°
++;

1497 
	`FûlAndSídBuf„r
–&
TønsSeq
, 
d°Addr
, 
Mgmt_Lqi_r•
, 
Àn
, 
buf
 );

1498 
	}
}

1517 
ZSètus_t
 
	$ZDP_MgmtRtgR•
–
byã
 
TønsSeq
, 
zAddrTy≥_t
 *
d°Addr
,

1518 
byã
 
Sètus
,

1519 
byã
 
RoutögTabÀE¡rõs
,

1520 
byã
 
SèπIndex
,

1521 
byã
 
RoutögLi°Cou¡
,

1522 
πgIãm_t
 *
RoutögTabÀLi°
,

1523 
byã
 
SecurôyE«bÀ
 )

1525 
uöt8
 *
buf
;

1526 
uöt8
 *
pBuf
;

1528 
byã
 
Àn
 = 1 + 1 + 1 + 1;

1529 
byã
 
x
;

1531 ()
SecurôyE«bÀ
;

1534 
Àn
 +(
RoutögLi°Cou¡
 * 
ZDP_ROUTINGENTRY_SIZE
);

1536 
buf
 = 
	`oßl_mem_Æloc
–()(
Àn
+1) );

1537 i‡–
buf
 =
NULL
 )

1539  
afSètus_MEM_FAIL
;

1542 
pBuf
 = 
buf
+1;

1544 *
pBuf
++ = 
Sètus
;

1545 *
pBuf
++ = 
RoutögTabÀE¡rõs
;

1546 *
pBuf
++ = 
SèπIndex
;

1547 *
pBuf
++ = 
RoutögLi°Cou¡
;

1549  
x
 = 0; x < 
RoutögLi°Cou¡
; x++ )

1551 *
pBuf
++ = 
	`LO_UINT16
–
RoutögTabÀLi°
->
d°Addªss
 );

1552 *
pBuf
++ = 
	`HI_UINT16
–
RoutögTabÀLi°
->
d°Addªss
 );

1553 *
pBuf
++ = 
RoutögTabÀLi°
->
°©us
;

1554 *
pBuf
++ = 
	`LO_UINT16
–
RoutögTabÀLi°
->
√xtH›Addªss
 );

1555 *
pBuf
++ = 
	`HI_UINT16
–
RoutögTabÀLi°
->
√xtH›Addªss
 );

1556 
RoutögTabÀLi°
++;

1559 
	`FûlAndSídBuf„r
–&
TønsSeq
, 
d°Addr
, 
Mgmt_Rtg_r•
, 
Àn
, 
buf
 );

1560 
	}
}

1579 
ZSètus_t
 
	$ZDP_MgmtBödR•
–
byã
 
TønsSeq
, 
zAddrTy≥_t
 *
d°Addr
,

1580 
byã
 
Sètus
,

1581 
byã
 
BödögTabÀE¡rõs
,

1582 
byã
 
SèπIndex
,

1583 
byã
 
BödögTabÀLi°Cou¡
,

1584 
≠sBödögIãm_t
 *
BödögTabÀLi°
,

1585 
byã
 
SecurôyE«bÀ
 )

1587 
uöt8
 *
buf
;

1588 
uöt8
 *
pBuf
;

1589 
uöt8
 
maxLí
;

1590 
uöt8
 
Àn
;

1591 
uöt8
 
x
;

1592 
byã
 
extZdpBödE¡rySize
 = 
ZDP_BINDINGENTRY_SIZE
 + 1 + 1;

1593 
byã
 
sh‹tZdpBödE¡rySize
 = 
ZDP_BINDINGENTRY_SIZE
 + 1 + 1 + 2 - 8 - 1;

1595 ()
SecurôyE«bÀ
;

1598 
maxLí
 = 1 + 1 + 1 + 1;

1599 
maxLí
 +(
BödögTabÀLi°Cou¡
 * 
extZdpBödE¡rySize
 );

1600 
buf
 = 
	`oßl_mem_Æloc
–
maxLí
 + 1 );

1602 i‡–
buf
 =
NULL
 )

1604  
afSètus_MEM_FAIL
;

1607 
pBuf
 = 
buf
+1;

1609 *
pBuf
++ = 
Sètus
;

1610 *
pBuf
++ = 
BödögTabÀE¡rõs
;

1611 *
pBuf
++ = 
SèπIndex
;

1612 *
pBuf
++ = 
BödögTabÀLi°Cou¡
;

1619 
Àn
 = 1 + 1 + 1 + 1;

1620  
x
 = 0; x < 
BödögTabÀLi°Cou¡
; x++ )

1622 
pBuf
 = 
	`oßl_˝yExtAddr
–pBuf, 
BödögTabÀLi°
->
§cAddr
 );

1623 *
pBuf
++ = 
BödögTabÀLi°
->
§cEP
;

1626 *
pBuf
++ = 
	`LO_UINT16
–
BödögTabÀLi°
->
˛u°îID
 );

1627 *
pBuf
++ = 
	`HI_UINT16
–
BödögTabÀLi°
->
˛u°îID
 );

1629 *
pBuf
++ = 
BödögTabÀLi°
->
d°Addr
.
addrMode
;

1630 i‡–
BödögTabÀLi°
->
d°Addr
.
addrMode
 =
Addr64Bô
 )

1632 
Àn
 +
extZdpBödE¡rySize
;

1633 
pBuf
 = 
	`oßl_˝yExtAddr
–pBuf, 
BödögTabÀLi°
->
d°Addr
.
addr
.
extAddr
 );

1634 *
pBuf
++ = 
BödögTabÀLi°
->
d°EP
;

1638 
Àn
 +
sh‹tZdpBödE¡rySize
;

1639 *
pBuf
++ = 
	`LO_UINT16
–
BödögTabÀLi°
->
d°Addr
.
addr
.
sh‹tAddr
 );

1640 *
pBuf
++ = 
	`HI_UINT16
–
BödögTabÀLi°
->
d°Addr
.
addr
.
sh‹tAddr
 );

1642 
BödögTabÀLi°
++;

1645 
	`FûlAndSídBuf„r
–&
TønsSeq
, 
d°Addr
, 
Mgmt_Böd_r•
, 
Àn
, 
buf
 );

1646 
	}
}

1667 
afSètus_t
 
	$ZDP_MgmtNwkUpd©eNŸify
–
uöt8
 
TønsSeq
, 
zAddrTy≥_t
 *
d°Addr
,

1668 
uöt8
 
°©us
, 
uöt32
 
sˇ¬edCh™√ls
,

1669 
uöt16
 
tŸÆTønsmissi⁄s
, uöt16 
å™smissi⁄Faûuªs
,

1670 
uöt8
 
li°Cou¡
, uöt8 *
íîgyVÆues
, uöt8 
txO±i⁄s
,

1671 
uöt8
 
£curôyE«bÀ
 )

1673 
uöt8
 *
buf
;

1674 
uöt8
 *
pBuf
;

1675 
uöt8
 
Àn
;

1677 ()
£curôyE«bÀ
;

1680 
Àn
 = 1 + 4 + 2 + 2 + 1 + 
li°Cou¡
;

1682 
buf
 = 
	`oßl_mem_Æloc
–
Àn
+1 );

1683 i‡–
buf
 =
NULL
 )

1685  
afSètus_MEM_FAIL
;

1688 
pBuf
 = 
buf
+1;

1690 *
pBuf
++ = 
°©us
;

1692 
pBuf
 = 
	`oßl_buf„r_uöt32
–pBuf, 
sˇ¬edCh™√ls
 );

1694 *
pBuf
++ = 
	`LO_UINT16
–
tŸÆTønsmissi⁄s
 );

1695 *
pBuf
++ = 
	`HI_UINT16
–
tŸÆTønsmissi⁄s
 );

1697 *
pBuf
++ = 
	`LO_UINT16
–
å™smissi⁄Faûuªs
 );

1698 *
pBuf
++ = 
	`HI_UINT16
–
å™smissi⁄Faûuªs
 );

1700 *
pBuf
++ = 
li°Cou¡
;

1702 i‡–
li°Cou¡
 > 0 )

1703 
	`oßl_mem˝y
–
pBuf
, 
íîgyVÆues
, 
li°Cou¡
 );

1705 
	`FûlAndSídBuf„rTxO±i⁄s
–&
TønsSeq
, 
d°Addr
, 
Mgmt_NWK_Upd©e_nŸify
, 
Àn
, 
buf
, 
txO±i⁄s
 );

1706 
	}
}

1726 
ZSètus_t
 
	$ZDO_Regi°îF‹ZDOMsg
–
uöt8
 
èskID
, 
uöt16
 
˛u°îID
 )

1728 
ZDO_MsgCB_t
 *
pLi°
;

1729 
ZDO_MsgCB_t
 *
pLa°
;

1730 
ZDO_MsgCB_t
 *
pNew
;

1733 
pLi°
 = 
zdoMsgCBs
;

1734  
pLi°
 )

1736 i‡–
pLi°
->
èskID
 =èskID &&ÖLi°->
˛u°îID
 == clusterID )

1737  ( 
ZSuc˚ss
 );

1738 
pLa°
 = 
pLi°
;

1739 
pLi°
 = (
ZDO_MsgCB_t
 *ÌLi°->
√xt
;

1743 
pNew
 = (
ZDO_MsgCB_t
 *)
	`oßl_mem_Æloc
(  ( ZDO_MsgCB_t ) );

1744 i‡–
pNew
 )

1746 
pNew
->
èskID
 =ÅaskID;

1747 
pNew
->
˛u°îID
 = clusterID;

1748 
pNew
->
√xt
 = 
NULL
;

1749 i‡–
zdoMsgCBs
 )

1751 
pLa°
->
√xt
 = 
pNew
;

1754 
zdoMsgCBs
 = 
pNew
;

1755  ( 
ZSuc˚ss
 );

1758  ( 
ZMemEº‹
 );

1759 
	}
}

1772 
ZSètus_t
 
	$ZDO_RemoveRegi°îedCB
–
uöt8
 
èskID
, 
uöt16
 
˛u°îID
 )

1774 
ZDO_MsgCB_t
 *
pLi°
;

1775 
ZDO_MsgCB_t
 *
pLa°
 = 
NULL
;

1777 
pLi°
 = 
zdoMsgCBs
;

1778  
pLi°
 )

1780 i‡–
pLi°
->
èskID
 =èskID &&ÖLi°->
˛u°îID
 == clusterID )

1782 i‡–
pLa°
 )

1785 
pLa°
->
√xt
 = 
pLi°
->next;

1787 i‡–
pLi°
->
√xt
 )

1790 
zdoMsgCBs
 = 
pLi°
->
√xt
;

1795 
zdoMsgCBs
 = (
ZDO_MsgCB_t
 *)
NULL
;

1797 
	`oßl_mem_‰ì
–
pLi°
 );

1798  ( 
ZSuc˚ss
 );

1800 
pLa°
 = 
pLi°
;

1801 
pLi°
 =ÖLi°->
√xt
;

1804  ( 
ZFaûuª
 );

1805 
	}
}

1817 
uöt8
 
	$ZDO_SídMsgCBs
–
zdoIncomögMsg_t
 *
öMsg
 )

1819 
uöt8
 
ªt
 = 
FALSE
;

1820 
ZDO_MsgCB_t
 *
pLi°
 = 
zdoMsgCBs
;

1821  
pLi°
 )

1823 i‡–
pLi°
->
˛u°îID
 =
öMsg
->clusterID )

1825 
zdoIncomögMsg_t
 *
msgPå
;

1828 
msgPå
 = (
zdoIncomögMsg_t
 *)
	`oßl_msg_Æloˇã
––zdoIncomögMsg_àË+ 
öMsg
->
asduLí
 );

1829 i‡–
msgPå
 )

1832 
	`oßl_mem˝y
–
msgPå
, 
öMsg
, –
zdoIncomögMsg_t
 ));

1834 i‡–
öMsg
->
asduLí
 )

1836 
msgPå
->
asdu
 = (
byã
*)(((byã*)msgPåË+ –
zdoIncomögMsg_t
 ));

1837 
	`oßl_mem˝y
–
msgPå
->
asdu
, 
öMsg
->asdu, inMsg->
asduLí
 );

1840 
msgPå
->
hdr
.
evít
 = 
ZDO_CB_MSG
;

1841 
	`oßl_msg_£nd
–
pLi°
->
èskID
, (
uöt8
 *)
msgPå
 );

1842 
ªt
 = 
TRUE
;

1845 
pLi°
 = (
ZDO_MsgCB_t
 *ÌLi°->
√xt
;

1847  ( 
ªt
 );

1848 
	}
}

1864 
	$ZDP_IncomögD©a
–
afIncomögMSGPackë_t
 *
pD©a
 )

1866 
uöt8
 
x
 = 0;

1867 
uöt8
 
h™dÀd
;

1868 
zdoIncomögMsg_t
 
öMsg
;

1870 
öMsg
.
§cAddr
.
addrMode
 = 
Addr16Bô
;

1871 
öMsg
.
§cAddr
.
addr
.
sh‹tAddr
 = 
pD©a
->srcAddr.addr.shortAddr;

1872 
öMsg
.
wasBrﬂdˇ°
 = 
pD©a
->wasBroadcast;

1873 
öMsg
.
˛u°îID
 = 
pD©a
->
˛u°îId
;

1874 
öMsg
.
SecurôyU£
 = 
pD©a
->SecurityUse;

1876 
öMsg
.
asduLí
 = 
pD©a
->
cmd
.
D©aLígth
-1;

1877 
öMsg
.
asdu
 = 
pD©a
->
cmd
.
D©a
+1;

1878 
öMsg
.
TønsSeq
 = 
pD©a
->
cmd
.
D©a
[0];

1879 
öMsg
.
macDe°Addr
 = 
pD©a
->macDestAddr;

1881 
h™dÀd
 = 
	`ZDO_SídMsgCBs
–&
öMsg
 );

1883 #i‡
	`deföed
–
MT_ZDO_CB_FUNC
 )

1884 
	`MT_ZdoDúe˘CB
–
pD©a
, &
öMsg
 );

1887  
zdpMsgProcs
[
x
].
˛u°îID
 != 0xFFFF )

1889 i‡–
zdpMsgProcs
[
x
].
˛u°îID
 =
öMsg
.clusterID )

1891 
zdpMsgProcs
[
x
].
	`pFn
–&
öMsg
 );

1894 
x
++;

1898 i‡–!
h™dÀd
 )

1899 
	`ZDAµ_InMsgCB
–&
öMsg
 );

1900 
	}
}

	@Components/stack/zdo/ZDProfile.h

40 #i‚de‡
ZDPROFILE_H


41 
	#ZDPROFILE_H


	)

43 #ifde‡
__˝lu•lus


51 
	~"ZComDef.h
"

52 
	~"NLMEDE.h
"

53 
	~"AF.h
"

54 
	~"ZDC⁄fig.h
"

60 
	#ZDO_EP
 0

61 
	#ZDO_PROFILE_ID
 0

	)

64 
	#ZDP_ADDR_REQTYPE_SINGLE
 0

	)

65 
	#ZDP_ADDR_REQTYPE_EXTENDED
 1

	)

66 
	#ZDP_ADDR_REQTYPE_MEMBERSHIP
 2

	)

69 
	#ZDP_SUCCESS
 0x00

70 
	#ZDP_INVALID_REQTYPE
 0x80

71 
	#ZDP_DEVICE_NOT_FOUND
 0x81

72 
	#ZDP_INVALID_EP
 0x82

73 
	#ZDP_NOT_ACTIVE
 0x83

74 
	#ZDP_NOT_SUPPORTED
 0x84

75 
	#ZDP_TIMEOUT
 0x85

76 
	#ZDP_NO_MATCH
 0x86

77 
	#ZDP_TABLE_FULL
 0x87

78 
	#ZDP_NO_ENTRY
 0x88

79 

	)

80 
	#ZDP_INSUFFICIENT_SPACE
 0x8a

	)

81 
	#ZDP_NOT_PERMITTED
 0x8b

	)

83 
	#ZDP_NETWORK_DISCRIPTOR_SIZE
 8

	)

84 
	#ZDP_NETWORK_EXTENDED_DISCRIPTOR_SIZE
 14

	)

85 
	#ZDP_RTG_DISCRIPTOR_SIZE
 5

	)

86 
	#ZDP_BIND_DISCRIPTOR_SIZE
 19

	)

89 
	#ZDP_MGMT_PERMIT_JOIN_REQ_DURATION
 0

	)

90 
	#ZDP_MGMT_PERMIT_JOIN_REQ_TC_SIG
 1

	)

91 
	#ZDP_MGMT_PERMIT_JOIN_REQ_SIZE
 2

	)

94 
	#ZDP_MGMT_LEAVE_REQ_REJOIN
 1 << 7

	)

95 
	#ZDP_MGMT_LEAVE_REQ_RC
 1 << 6

96 

	)

98 
	#ZDP_MGMT_DT_COORD
 0x0

	)

99 
	#ZDP_MGMT_DT_ROUTER
 0x1

	)

100 
	#ZDP_MGMT_DT_ENDDEV
 0x2

	)

103 
	#ZDP_MGMT_REL_PARENT
 0x0

	)

104 
	#ZDP_MGMT_REL_CHILD
 0x1

	)

105 
	#ZDP_MGMT_REL_SIBLING
 0x2

	)

106 
	#ZDP_MGMT_REL_UNKNOWN
 0x3

	)

109 
	#ZDP_MGMT_BOOL_UNKNOWN
 0x02

	)

116 
	#ZDO_RESPONSE_BIT_V1_0
 ((
uöt8
)0x80)

	)

117 
	#ZDO_RESPONSE_BIT
 ((
uöt16
)0x8000)

	)

119 
	#NWK_addr_ªq
 ((
uöt16
)0x0000)

	)

120 
	#IEEE_addr_ªq
 ((
uöt16
)0x0001)

	)

121 
	#Node_Desc_ªq
 ((
uöt16
)0x0002)

	)

122 
	#Powî_Desc_ªq
 ((
uöt16
)0x0003)

	)

123 
	#Sim∂e_Desc_ªq
 ((
uöt16
)0x0004)

	)

124 
	#A˘ive_EP_ªq
 ((
uöt16
)0x0005)

	)

125 
	#M©ch_Desc_ªq
 ((
uöt16
)0x0006)

	)

126 
	#NWK_addr_r•
 (
NWK_addr_ªq
 | 
ZDO_RESPONSE_BIT
)

	)

127 
	#IEEE_addr_r•
 (
IEEE_addr_ªq
 | 
ZDO_RESPONSE_BIT
)

	)

128 
	#Node_Desc_r•
 (
Node_Desc_ªq
 | 
ZDO_RESPONSE_BIT
)

	)

129 
	#Powî_Desc_r•
 (
Powî_Desc_ªq
 | 
ZDO_RESPONSE_BIT
)

	)

130 
	#Sim∂e_Desc_r•
 (
Sim∂e_Desc_ªq
 | 
ZDO_RESPONSE_BIT
)

	)

131 
	#A˘ive_EP_r•
 (
A˘ive_EP_ªq
 | 
ZDO_RESPONSE_BIT
)

	)

132 
	#M©ch_Desc_r•
 (
M©ch_Desc_ªq
 | 
ZDO_RESPONSE_BIT
)

	)

134 
	#Com∂ex_Desc_ªq
 ((
uöt16
)0x0010)

	)

135 
	#U£r_Desc_ªq
 ((
uöt16
)0x0011)

	)

136 
	#Discovîy_Cache_ªq
 ((
uöt16
)0x0012)

	)

137 
	#Devi˚_™n˚
 ((
uöt16
)0x0013)

	)

138 
	#U£r_Desc_£t
 ((
uöt16
)0x0014)

	)

139 
	#Sîvî_Discovîy_ªq
 ((
uöt16
)0x0015)

	)

140 
	#Com∂ex_Desc_r•
 (
Com∂ex_Desc_ªq
 | 
ZDO_RESPONSE_BIT
)

	)

141 
	#U£r_Desc_r•
 (
U£r_Desc_ªq
 | 
ZDO_RESPONSE_BIT
)

	)

142 
	#Discovîy_Cache_r•
 (
Discovîy_Cache_ªq
 | 
ZDO_RESPONSE_BIT
)

	)

143 
	#U£r_Desc_c⁄f
 (
U£r_Desc_£t
 | 
ZDO_RESPONSE_BIT
)

	)

144 
	#Sîvî_Discovîy_r•
 (
Sîvî_Discovîy_ªq
 | 
ZDO_RESPONSE_BIT
)

	)

146 
	#End_Devi˚_Böd_ªq
 ((
uöt16
)0x0020)

	)

147 
	#Böd_ªq
 ((
uöt16
)0x0021)

	)

148 
	#Unböd_ªq
 ((
uöt16
)0x0022)

	)

149 
	#Böd_r•
 (
Böd_ªq
 | 
ZDO_RESPONSE_BIT
)

	)

150 
	#End_Devi˚_Böd_r•
 (
End_Devi˚_Böd_ªq
 | 
ZDO_RESPONSE_BIT
)

	)

151 
	#Unböd_r•
 (
Unböd_ªq
 | 
ZDO_RESPONSE_BIT
)

	)

153 
	#Mgmt_NWK_Disc_ªq
 ((
uöt16
)0x0030)

	)

154 
	#Mgmt_Lqi_ªq
 ((
uöt16
)0x0031)

	)

155 
	#Mgmt_Rtg_ªq
 ((
uöt16
)0x0032)

	)

156 
	#Mgmt_Böd_ªq
 ((
uöt16
)0x0033)

	)

157 
	#Mgmt_Lóve_ªq
 ((
uöt16
)0x0034)

	)

158 
	#Mgmt_Dúe˘_Joö_ªq
 ((
uöt16
)0x0035)

	)

159 
	#Mgmt_Pîmô_Joö_ªq
 ((
uöt16
)0x0036)

	)

160 
	#Mgmt_NWK_Upd©e_ªq
 ((
uöt16
)0x0038)

	)

161 
	#Mgmt_NWK_Disc_r•
 (
Mgmt_NWK_Disc_ªq
 | 
ZDO_RESPONSE_BIT
)

	)

162 
	#Mgmt_Lqi_r•
 (
Mgmt_Lqi_ªq
 | 
ZDO_RESPONSE_BIT
)

	)

163 
	#Mgmt_Rtg_r•
 (
Mgmt_Rtg_ªq
 | 
ZDO_RESPONSE_BIT
)

	)

164 
	#Mgmt_Böd_r•
 (
Mgmt_Böd_ªq
 | 
ZDO_RESPONSE_BIT
)

	)

165 
	#Mgmt_Lóve_r•
 (
Mgmt_Lóve_ªq
 | 
ZDO_RESPONSE_BIT
)

	)

166 
	#Mgmt_Dúe˘_Joö_r•
 (
Mgmt_Dúe˘_Joö_ªq
 | 
ZDO_RESPONSE_BIT
)

	)

167 
	#Mgmt_Pîmô_Joö_r•
 (
Mgmt_Pîmô_Joö_ªq
 | 
ZDO_RESPONSE_BIT
)

	)

168 
	#Mgmt_NWK_Upd©e_nŸify
 (
Mgmt_NWK_Upd©e_ªq
 | 
ZDO_RESPONSE_BIT
)

	)

174 
	#ZDP_BINDINGENTRY_SIZE
 19

	)

178 
oßl_evít_hdr_t
 
hdr
;

179 
zAddrTy≥_t
 
§cAddr
;

180 
uöt8
 
wasBrﬂdˇ°
;

181 
cId_t
 
˛u°îID
;

182 
uöt8
 
SecurôyU£
;

183 
uöt8
 
TønsSeq
;

184 
uöt8
 
asduLí
;

185 
uöt16
 
macDe°Addr
;

186 
uöt8
 *
asdu
;

187 } 
	tzdoIncomögMsg_t
;

192 
uöt8
 
exãndedPANID
[
Z_EXTADDR_LEN
];

193 
uöt16
 
PANId
;

194 
uöt8
 
logiˇlCh™√l
;

195 
uöt8
 
°ackProfûe
;

196 
uöt8
 
vîsi⁄
;

197 
uöt8
 
bóc⁄Ordî
;

198 
uöt8
 
su≥rFømeOrdî
;

199 
uöt8
 
≥rmôJoöög
;

200 } 
	tmgmtNwkDiscIãm_t
;

205 
uöt16
 
nwkAddr
;

206 
uöt16
 
PANId
;

207 
uöt8
 
extPANId
[
Z_EXTADDR_LEN
];

208 
uöt8
 
txQuÆôy
;

209 
uöt8
 
rxLqi
;

210 } 
	t√ighb‹LqiIãm_t
;

211 
	#ZDP_NEIGHBORLQI_SIZE
 12

	)

216 
uöt16
 
∑nID
;

217 
uöt8
 
extP™ID
[
Z_EXTADDR_LEN
];

218 
uöt8
 
extAddr
[
Z_EXTADDR_LEN
];

219 
uöt16
 
nwkAddr
;

220 
uöt8
 
devTy≥
;

221 
uöt8
 
rxOnIdÀ
;

222 
uöt8
 
ªœti⁄
;

223 
uöt8
 
≥rmô
;

224 
uöt8
 
dïth
;

225 
uöt8
 
lqi
;

226 } 
	tZDP_MgmtLqiIãm_t
;

228 
	#ZDP_MGMTLQI_SIZE
 15

	)

229 
	#ZDP_MGMTLQI_EXTENDED_SIZE
 22

230 

	)

236 
uöt16
 
d°Addªss
;

237 
uöt16
 
√xtH›Addªss
;

238 
uöt8
 
expúyTime
;

239 
uöt8
 
°©us
;

240 } 
	tπgIãm_t
;

242 
	#ZDP_ROUTINGENTRY_SIZE
 5

	)

246 
uöt8
 
TønsSeq
;

247 
byã
 
SecurôyU£
;

248 
uöt16
 
§cAddr
;

249 
uöt16
 
loˇlCo‹dö©‹
;

250 
uöt8
 
õìAddr
[
Z_EXTADDR_LEN
];

251 
uöt8
 
ídpoöt
;

252 
uöt16
 
¥ofûeID
;

253 
uöt8
 
numInClu°îs
;

254 
uöt16
 *
öClu°îs
;

255 
uöt8
 
numOutClu°îs
;

256 
uöt16
 *
outClu°îs
;

257 } 
	tZDEndDevi˚Böd_t
;

263 
byã
 
ZDP_TønsID
;

272 
afSètus_t
 
ZDP_SídD©a
–
uöt8
 *
å™sSeq
, 
zAddrTy≥_t
 *
d°Addr
, 
uöt16
 
cmd
, 
byã
 
Àn
,

273 
uöt8
 *
buf
, 
byã
 
SecurôyE«bÀ
 );

284 
	#ZDP_NodeDescReq
–
d°Addr
, 
NWKAddrOfI¡îe°
, 
SecurôyE«bÀ
 ) \

	)

285 
ZDP_NWKAddrOfI¡îe°Req
–
d°Addr
, \

286 
NWKAddrOfI¡îe°
, 
Node_Desc_ªq
, 
SecurôyE«bÀ
 )

297 
	#ZDP_PowîDescReq
–
d°Addr
, 
NWKAddrOfI¡îe°
, 
SecurôyE«bÀ
 ) \

	)

298 
ZDP_NWKAddrOfI¡îe°Req
–
d°Addr
, \

299 
NWKAddrOfI¡îe°
, 
Powî_Desc_ªq
, 
SecurôyE«bÀ
 )

310 
	#ZDP_A˘iveEPReq
–
d°Addr
, 
NWKAddrOfI¡îe°
, 
SecurôyE«bÀ
 ) \

	)

311 
ZDP_NWKAddrOfI¡îe°Req
–
d°Addr
, \

312 
NWKAddrOfI¡îe°
, 
A˘ive_EP_ªq
, 
SecurôyE«bÀ
 )

323 
	#ZDP_Com∂exDescReq
–
d°Addr
, 
NWKAddrOfI¡îe°
, 
SecurôyE«bÀ
 ) \

	)

324 
ZDP_NWKAddrOfI¡îe°Req
–
d°Addr
, \

325 
NWKAddrOfI¡îe°
, 
Com∂ex_Desc_ªq
, 
SecurôyE«bÀ
 )

336 
	#ZDP_U£rDescReq
–
d°Addr
, 
NWKAddrOfI¡îe°
, 
SecurôyE«bÀ
 ) \

	)

337 
ZDP_NWKAddrOfI¡îe°Req
–
d°Addr
, \

338 
NWKAddrOfI¡îe°
, 
U£r_Desc_ªq
, 
SecurôyE«bÀ
 )

353 
	#ZDP_BödReq
–
d°Addr
, 
Sour˚Addr
, 
SrcEP
, \

	)

354 
	gClu°îID
, 
	gDe°ö©i⁄Addr
, 
	gD°EP
, 
	gSecurôyE«bÀ
 ) \

355 
ZDP_BödUnbödReq
–
Böd_ªq
, 
d°Addr
, \

356 
Sour˚Addr
, 
SrcEP
, 
Clu°îID
, \

357 
De°ö©i⁄Addr
, 
D°EP
, 
SecurôyE«bÀ
 )

372 
	#ZDP_UnbödReq
–
d°Addr
, 
Sour˚Addr
, 
SrcEP
, \

	)

373 
	gClu°îID
, 
	gDe°ö©i⁄Addr
, 
	gD°EP
, 
	gSecurôyE«bÀ
 ) \

374 
ZDP_BödUnbödReq
–
Unböd_ªq
, 
d°Addr
, \

375 
Sour˚Addr
, 
SrcEP
, 
Clu°îID
, \

376 
De°ö©i⁄Addr
, 
D°EP
, 
SecurôyE«bÀ
 )

386 
	#ZDP_MgmtLqiReq
–
d°Addr
, 
SèπIndex
, 
SecurôyE«bÀ
 ) \

	)

387 
ZDP_SídD©a
–&
ZDP_TønsID
, 
d°Addr
, 
Mgmt_Lqi_ªq
, 1, &
SèπIndex
, 
SecurôyE«bÀ
 )

397 
	#ZDP_MgmtRtgReq
–
d°Addr
, 
SèπIndex
, 
SecurôyE«bÀ
 ) \

	)

398 
ZDP_SídD©a
–&
ZDP_TønsID
, 
d°Addr
, 
Mgmt_Rtg_ªq
, 1, &
SèπIndex
, 
SecurôyE«bÀ
 )

408 
	#ZDP_MgmtBödReq
–
d°Addr
, 
SèπIndex
, 
SecurôyE«bÀ
 ) \

	)

409 
ZDP_SídD©a
–&
ZDP_TønsID
, 
d°Addr
, 
Mgmt_Böd_ªq
, 1, &
SèπIndex
, 
SecurôyE«bÀ
 )

411 #ifde‡
REMOVE_BY_LAF


415 
	#ZDP_NWKAddrR•
–
TønsSeq
, 
d°Addr
, 
Sètus
, 
IEEEAddrRemŸeDev
, 
ReqTy≥
, 
nwkAddr
, 
NumAssocDev
, \

	)

416 
	gSèπIndex
, 
	gNWKAddrAssocDevLi°
, 
	gSecurôyE«bÀ
 ) \

417 
ZDP_AddrR•
–
NWK_addr_r•
, 
TønsSeq
, 
d°Addr
, 
Sètus
, \

418 
IEEEAddrRemŸeDev
, 
ReqTy≥
, 
nwkAddr
, 
NumAssocDev
, 
SèπIndex
, \

419 
NWKAddrAssocDevLi°
, 
SecurôyE«bÀ
 )

424 
	#ZDP_IEEEAddrR•
–
TønsSeq
, 
d°Addr
, 
Sètus
, 
IEEEAddrRemŸeDev
, 
ReqTy≥
, 
nwkAddr
, 
NumAssocDev
, \

	)

425 
	gSèπIndex
, 
	gNWKAddrAssocDevLi°
, 
	gSecurôyE«bÀ
 ) \

426 
ZDP_AddrR•
–
IEEE_addr_r•
, 
TønsSeq
, 
d°Addr
, 
Sètus
, \

427 
IEEEAddrRemŸeDev
, 
ReqTy≥
, 
nwkAddr
, 
NumAssocDev
, 
SèπIndex
, \

428 
NWKAddrAssocDevLi°
, 
SecurôyE«bÀ
 )

433 
	#ZDP_A˘iveEPR•
–
TønsSeq
, 
d°Addr
, 
Sètus
, 
nwkAddr
, 
Cou¡
, \

	)

434 
	gpEPLi°
, 
	gSecurôyE«bÀ
 ) \

435 
ZDP_EPR•
–
A˘ive_EP_r•
, 
TønsSeq
, 
d°Addr
, 
Sètus
, \

436 
nwkAddr
, 
Cou¡
, 
pEPLi°
, 
SecurôyE«bÀ
 )

441 
	#ZDP_M©chDescR•
–
TønsSeq
, 
d°Addr
, 
Sètus
, 
nwkAddr
, 
Cou¡
, \

	)

442 
	gpEPLi°
, 
	gSecurôyE«bÀ
 ) \

443 
ZDP_EPR•
–
M©ch_Desc_r•
, 
TønsSeq
, 
d°Addr
, 
Sètus
, \

444 
nwkAddr
, 
Cou¡
, 
pEPLi°
, 
SecurôyE«bÀ
 )

449 
	#ZDP_Com∂exDescR•
–
d°Addr
, 
SecurôyE«bÀ
 ) \

	)

450 
ZDP_GíîicR•
–
d°Addr
, 
Com∂ex_Desc_r•
, 
SecurôyE«bÀ
 )

455 
	#ZDP_U£rDescC⁄f
–
TønsSeq
, 
d°Addr
, 
Sètus
, 
SecurôyE«bÀ
 ) \

	)

456 
ZDP_SídD©a
–&
TønsSeq
, 
d°Addr
, 
U£r_Desc_c⁄f
, 1, &
Sètus
, 
SecurôyE«bÀ
 )

461 
	#ZDP_EndDevi˚BödR•
–
TønsSeq
, 
d°Addr
, 
Sètus
, 
SecurôyE«bÀ
 ) \

	)

462 
ZDP_SídD©a
–&
TønsSeq
, 
d°Addr
, 
End_Devi˚_Böd_r•
, 1, &
Sètus
, 
SecurôyE«bÀ
 )

467 
	#ZDP_BödR•
–
TønsSeq
, 
d°Addr
, 
Sètus
, 
SecurôyE«bÀ
 ) \

	)

468 
ZDP_SídD©a
–&
TønsSeq
, 
d°Addr
, 
Böd_r•
, 1, &
Sètus
, 
SecurôyE«bÀ
 )

473 
	#ZDP_UnbödR•
–
TønsSeq
, 
d°Addr
, 
Sètus
, 
SecurôyE«bÀ
 ) \

	)

474 
ZDP_SídD©a
–&
TønsSeq
, 
d°Addr
, 
Unböd_r•
, 1, &
Sètus
, 
SecurôyE«bÀ
 )

479 
	#ZDP_MgmtLóveR•
–
TønsSeq
, 
d°Addr
, 
Sètus
, 
SecurôyE«bÀ
 ) \

	)

480 
ZDP_SídD©a
–&
TønsSeq
, 
d°Addr
, 
Mgmt_Lóve_r•
, 1, &
Sètus
, 
SecurôyE«bÀ
 )

485 
	#ZDP_MgmtPîmôJoöR•
–
TønsSeq
, 
d°Addr
, 
Sètus
, 
SecurôyE«bÀ
 ) \

	)

486 
ZDP_SídD©a
–&
TønsSeq
, 
d°Addr
, 
Mgmt_Pîmô_Joö_r•
, 1, &
Sètus
, 
SecurôyE«bÀ
 )

491 
	#ZDP_MgmtDúe˘JoöR•
–
TønsSeq
, 
d°Addr
, 
Sètus
, 
SecurôyE«bÀ
 ) \

	)

492 
ZDP_SídD©a
–&
TønsSeq
, 
d°Addr
, 
Mgmt_Dúe˘_Joö_r•
, 1, &
Sètus
, 
SecurôyE«bÀ
 )

501 
afSètus_t
 
ZDP_NWKAddrOfI¡îe°Req
–
zAddrTy≥_t
 *
d°Addr
,

502 
uöt16
 
nwkAddr
, 
byã
 
cmd
, byã 
SecurôyE«bÀ
 );

513 
afSètus_t
 
ZDP_NwkAddrReq
–
uöt8
 *
IEEEAddªss
, 
byã
 
ReqTy≥
,

514 
byã
 
SèπIndex
, byã 
SecurôyE«bÀ
 );

526 
afSètus_t
 
ZDP_IEEEAddrReq
–
uöt16
 
sh‹tAddr
, 
byã
 
ReqTy≥
,

527 
byã
 
SèπIndex
, byã 
SecurôyE«bÀ
 );

543 
afSètus_t
 
ZDP_M©chDescReq
–
zAddrTy≥_t
 *
d°Addr
, 
uöt16
 
nwkAddr
,

544 
uöt16
 
ProfûeID
,

545 
byã
 
NumInClu°îs
, 
uöt16
 *
InClu°îLi°
,

546 
byã
 
NumOutClu°îs
, 
uöt16
 *
OutClu°îLi°
,

547 
byã
 
SecurôyE«bÀ
 );

559 
afSètus_t
 
ZDP_Sim∂eDescReq
–
zAddrTy≥_t
 *
d°Addr
, 
uöt16
 
nwkAddr
,

560 
byã
 
ï
, byã 
SecurôyE«bÀ
 );

573 
afSètus_t
 
ZDP_U£rDescSë
–
zAddrTy≥_t
 *
d°Addr
, 
uöt16
 
nwkAddr
,

574 
U£rDes¸ùt‹F‹m©_t
 *
U£rDes¸ùt‹
,

575 
byã
 
SecurôyE«bÀ
 );

580 
afSètus_t
 
ZDP_SîvîDiscReq
–
uöt16
 
£rvîMask
, 
byã
 
SecurôyE«bÀ
 );

591 
afSètus_t
 
ZDP_Devi˚A¬˚
–
uöt16
 
nwkAddr
, 
uöt8
 *
IEEEAddr
,

592 
byã
 
ˇ∑bûôõs
, byã 
SecurôyE«bÀ
 );

609 
afSètus_t
 
ZDP_EndDevi˚BödReq
–
zAddrTy≥_t
 *
d°Addr
,

610 
uöt16
 
LoˇlCo‹dö©‹
,

611 
byã
 
ï
,

612 
uöt16
 
ProfûeID
,

613 
byã
 
NumInClu°îs
, 
uöt16
 *
InClu°îLi°
,

614 
byã
 
NumOutClu°îs
, 
uöt16
 *
OutClu°îLi°
,

615 
byã
 
SecurôyE«bÀ
 );

620 
afSètus_t
 
ZDP_BödUnbödReq
–
uöt16
 
BödOrUnböd
, 
zAddrTy≥_t
 *
d°Addr
,

621 
uöt8
 *
Sour˚Addr
, 
byã
 
SrcEP
,

622 
cId_t
 
Clu°îID
,

623 
zAddrTy≥_t
 *
De°ö©i⁄Addr
, 
byã
 
D°EP
,

624 
byã
 
SecurôyE«bÀ
 );

635 
afSètus_t
 
ZDP_MgmtNwkDiscReq
–
zAddrTy≥_t
 *
d°Addr
,

636 
uöt32
 
SˇnCh™√ls
,

637 
byã
 
SˇnDuøti⁄
,

638 
byã
 
SèπIndex
,

639 
byã
 
SecurôyE«bÀ
 );

650 
afSètus_t
 
ZDP_MgmtDúe˘JoöReq
–
zAddrTy≥_t
 *
d°Addr
,

651 
uöt8
 *
devi˚Addr
,

652 
byã
 
ˇpInfo
,

653 
byã
 
SecurôyE«bÀ
 );

665 
afSètus_t
 
ZDP_MgmtLóveReq
–
zAddrTy≥_t
 *
d°Addr
,

666 
uöt8
 *
IEEEAddr
,

667 
uöt8
 
RemoveChûdªn
,

668 
uöt8
 
Rejoö
,

669 
uöt8
 
SecurôyE«bÀ
 );

679 
afSètus_t
 
ZDP_MgmtPîmôJoöReq
–
zAddrTy≥_t
 *
d°Addr
,

680 
byã
 
duøti⁄
,

681 
byã
 
TcSignifiˇn˚
,

682 
byã
 
SecurôyE«bÀ
 );

695 
afSètus_t
 
ZDP_MgmtNwkUpd©eReq
–
zAddrTy≥_t
 *
d°Addr
,

696 
uöt32
 
Ch™√lMask
,

697 
uöt8
 
SˇnDuøti⁄
,

698 
uöt8
 
SˇnCou¡
,

699 
uöt8
 
NwkUpd©eId
,

700 
uöt16
 
NwkM™agîAddr
 );

721 
afSètus_t
 
ZDP_AddrR•
–
byã
 
cId
, byã 
£q
, 
zAddrTy≥_t
 *
d°
, byã 
°©
,

722 
uöt8
 *
õì
, 
byã
 
ªqTy≥
, 
uöt16
 
nwkAddr
, byã 
devC¡
, byã 
°πIdx
,

723 
uöt16
 *
devAddr
, 
byã
 
£cO±
 );

728 
afSètus_t
 
ZDP_NodeDescMsg
–
zdoIncomögMsg_t
 *
öMsg
,

729 
uöt16
 
nwkAddr
, 
NodeDes¸ùt‹F‹m©_t
 *
pNodeDesc
 );

734 
afSètus_t
 
ZDP_PowîDescMsg
–
zdoIncomögMsg_t
 *
öMsg
,

735 
uöt16
 
nwkAddr
, 
NodePowîDes¸ùt‹F‹m©_t
 *
pPowîDesc
 );

740 
afSètus_t
 
ZDP_Sim∂eDescMsg
–
zdoIncomögMsg_t
 *
öMsg
,

741 
byã
 
Sètus
, 
Sim∂eDes¸ùti⁄F‹m©_t
 *
pSim∂eDesc
 );

746 
afSètus_t
 
ZDP_EPR•
–
uöt16
 
MsgTy≥
, 
byã
 
TønsSeq
, 
zAddrTy≥_t
 *
d°Addr
, byã 
Sètus
,

747 
uöt16
 
nwkAddr
, 
byã
 
Cou¡
, 
uöt8
 *
pEPLi°
,

748 
byã
 
SecurôyE«bÀ
 );

754 
afSètus_t
 
ZDP_GíîicR•
–
byã
 
TønsSeq
, 
zAddrTy≥_t
 *
d°Addr
,

755 
byã
 
°©us
, 
uöt16
 
aoi
, uöt16 
r•ID
, byã 
SecurôyE«bÀ
 );

760 
afSètus_t
 
ZDP_MgmtNwkDiscR•
–
byã
 
TønsSeq
, 
zAddrTy≥_t
 *
d°Addr
,

761 
byã
 
Sètus
,

762 
byã
 
Nëw‹kCou¡
,

763 
byã
 
SèπIndex
,

764 
byã
 
Nëw‹kCou¡Li°
,

765 
√tw‹kDesc_t
 *
Nëw‹kLi°
,

766 
byã
 
SecurôyE«bÀ
 );

771 
ZSètus_t
 
ZDP_MgmtLqiR•
–
byã
 
TønsSeq
, 
zAddrTy≥_t
 *
d°Addr
,

772 
byã
 
Sètus
,

773 
byã
 
Neighb‹LqiE¡rõs
,

774 
byã
 
SèπIndex
,

775 
byã
 
Neighb‹LqiCou¡
,

776 
ZDP_MgmtLqiIãm_t
* 
Neighb‹Li°
,

777 
byã
 
SecurôyE«bÀ
 );

782 
ZSètus_t
 
ZDP_MgmtRtgR•
–
byã
 
TønsSeq
, 
zAddrTy≥_t
 *
d°Addr
,

783 
byã
 
Sètus
,

784 
byã
 
RoutögTabÀE¡rõs
,

785 
byã
 
SèπIndex
,

786 
byã
 
RoutögLi°Cou¡
,

787 
πgIãm_t
 *
RoutögTabÀLi°
,

788 
byã
 
SecurôyE«bÀ
 );

793 
ZSètus_t
 
ZDP_MgmtBödR•
–
byã
 
TønsSeq
, 
zAddrTy≥_t
 *
d°Addr
,

794 
byã
 
Sètus
,

795 
byã
 
BödögTabÀE¡rõs
,

796 
byã
 
SèπIndex
,

797 
byã
 
BödögTabÀLi°Cou¡
,

798 
≠sBödögIãm_t
 *
BödögTabÀLi°
,

799 
byã
 
SecurôyE«bÀ
 );

803 
afSètus_t
 
ZDP_MgmtNwkUpd©eNŸify
–
uöt8
 
TønsSeq
, 
zAddrTy≥_t
 *
d°Addr
,

804 
uöt8
 
°©us
, 
uöt32
 
sˇ¬edCh™√ls
,

805 
uöt16
 
tŸÆTønsmissi⁄s
, uöt16 
å™smissi⁄Faûuªs
,

806 
uöt8
 
li°Cou¡
, uöt8 *
íîgyVÆues
, uöt8 
txO±i⁄s
,

807 
uöt8
 
£curôyE«bÀ
 );

812 
ZSètus_t
 
ZDP_U£rDescR•
–
byã
 
TønsSeq
, 
zAddrTy≥_t
 *
d°Addr
,

813 
uöt16
 
nwkAddrOfI¡îe°
, 
U£rDes¸ùt‹F‹m©_t
 *
u£rDesc
,

814 
byã
 
SecurôyE«bÀ
 );

819 
ZSètus_t
 
ZDP_SîvîDiscR•
–
byã
 
å™sID
, 
zAddrTy≥_t
 *
d°Addr
, byã 
°©us
,

820 
uöt16
 
aoi
, uöt16 
£rvîMask
, 
byã
 
SecurôyE«bÀ
 );

825 
ZDP_IncomögD©a
–
afIncomögMSGPackë_t
 *
pD©a
 );

827 
ZSètus_t
 
ZDO_Regi°îF‹ZDOMsg
–
uöt8
 
èskID
, 
uöt16
 
˛u°îID
 );

828 
ZSètus_t
 
ZDO_RemoveRegi°îedCB
–
uöt8
 
èskID
, 
uöt16
 
˛u°îID
 );

834 #ifde‡
__˝lu•lus


	@Components/stack/zdo/ZDSecMgr.c

40 #ifde‡
__˝lu•lus


48 
	~"ZComdef.h
"

49 
	~"OSAL.h
"

50 
	~"OSAL_NV.h
"

51 
	~"ZGlobÆs.h
"

52 
	~"s•.h
"

53 
	~"nwk_globÆs.h
"

54 
	~"nwk.h
"

55 
	~"NLMEDE.h
"

56 
	~"AddrMgr.h
"

57 
	~"AssocLi°.h
"

58 
	~"APSMEDE.h
"

59 
	~"AF.h
"

60 
	~"ZDC⁄fig.h
"

61 
	~"ZDAµ.h
"

62 
	~"ZDSecMgr.h
"

69 #i‡!
deföed
 ( 
ZDSECMGR_DEVICE_MAX
 )

70 
	#ZDSECMGR_DEVICE_MAX
 3

	)

76 
	#ZDSECMGR_PRECONFIG_MAX
 0

	)

79 
	#ZDSECMGR_MASTERKEY_MAX
 
ZDSECMGR_DEVICE_MAX


	)

82 
	#ZDSECMGR_ENTRY_MAX
 
ZDSECMGR_DEVICE_MAX


	)

85 
	#ZDSECMGR_CTRL_MAX
 
ZDSECMGR_DEVICE_MAX


	)

88 #i‡!
deföed
 ( 
ZDSECMGR_STORED_DEVICES
 )

89 
	#ZDSECMGR_STORED_DEVICES
 3

	)

92 
	#ZDSECMGR_CTRL_NONE
 0

	)

93 
	#ZDSECMGR_CTRL_INIT
 1

	)

94 
	#ZDSECMGR_CTRL_TK_MASTER
 2

	)

95 
	#ZDSECMGR_CTRL_SKKE_INIT
 3

	)

96 
	#ZDSECMGR_CTRL_SKKE_WAIT
 4

	)

97 
	#ZDSECMGR_CTRL_SKKE_DONE
 5

	)

98 
	#ZDSECMGR_CTRL_SKKE_FAIL
 6

	)

99 
	#ZDSECMGR_CTRL_TK_NWK
 7

	)

101 
	#ZDSECMGR_CTRL_BASE_CNTR
 1

	)

102 
	#ZDSECMGR_CTRL_SKKE_INIT_CNTR
 1

	)

103 
	#ZDSECMGR_CTRL_TK_NWK_CNTR
 1

	)

106 
	#ZDSECMGR_SKA_SLOT_MAX
 1

	)

109 
	#ZDSecMgrMa°îKeyGë
 
APSME_Ma°îKeyGë


	)

110 
	#ZDSecMgrLökKeySë
 
APSME_LökKeySë


	)

111 
	#ZDSecMgrLökKeyD©aGë
 
APSME_LökKeyD©aGë


	)

112 
	#ZDSecMgrKeyFwdToChûd
 
APSME_KeyFwdToChûd


	)

114 #i‡!
deföed
–
MAX_APS_FRAMECOUNTER_CHANGES
 )

117 
	#MAX_APS_FRAMECOUNTER_CHANGES
 10

	)

125 
uöt8
 
extAddr
[
Z_EXTADDR_LEN
];

126 
uöt8
 
key
[
SEC_KEY_LEN
];

127 } 
	tZDSecMgrPªC⁄figD©a_t
;

131 
uöt16
 
ami
;

132 
uöt8
 
key
[
SEC_KEY_LEN
];

133 } 
	tZDSecMgrMa°îKeyD©a_t
;

138 
uöt8
 
key
[
SEC_KEY_LEN
];

139 
APSME_LökKeyD©a_t
 
≠smñkd
;

140 } 
	tZDSecMgrLökKeyD©a_t
;

144 
uöt16
 
ami
;

145 
ZDSecMgrLökKeyD©a_t
 
lkd
;

146 
ZDSecMgr_Authítiˇti⁄_O±i⁄
 
authítiˇãO±i⁄
;

147 } 
	tZDSecMgrE¡ry_t
;

151 
ZDSecMgrE¡ry_t
* 
íåy
;

152 
uöt16
 
∑ª¡Addr
;

153 
uöt8
 
£cuª
;

154 
uöt8
 
°©e
;

155 
uöt8
 
˙å
;

157 } 
	tZDSecMgrCål_t
;

161 
uöt16
 
nwkAddr
;

162 
uöt8
* 
extAddr
;

163 
uöt16
 
∑ª¡Addr
;

164 
uöt8
 
£cuª
;

165 
uöt8
 
devSètus
;

166 
ZDSecMgrCål_t
* 
˘æ
;

167 } 
	tZDSecMgrDevi˚_t
;

175 
uöt8
 
ZDSecMgrSt‹edDevi˚Li°
[
ZDSECMGR_STORED_DEVICES
][
Z_EXTADDR_LEN
] =

183 
uöt8
 
ZDSecMgrTCExtAddr
[
Z_EXTADDR_LEN
]=

186 
uöt8
 
ZDSecMgrTCMa°îKey
[
SEC_KEY_LEN
] =

190 
uöt8
 
ZDSecMgrTCAuthítiˇãd
 = 
FALSE
;

191 
uöt8
 
ZDSecMgrTCD©aLﬂded
 = 
FALSE
;

194 #i‡–
ZDSECMGR_PRECONFIG_MAX
 != 0 )

195 c⁄° 
ZDSecMgrPªC⁄figD©a_t
 
ZDSecMgrPªC⁄figD©a
[
ZDSECMGR_PRECONFIG_MAX
] =

233 
ZDSecMgrMa°îKeyD©a_t
* 
ZDSecMgrMa°îKeyD©a
 = 
NULL
;

234 
ZDSecMgrE¡ry_t
* 
ZDSecMgrE¡rõs
 = 
NULL
;

235 
ZDSecMgrCål_t
* 
ZDSecMgrCålD©a
 = 
NULL
;

236 
ZDSecMgrAddrMgrUpd©e
–
uöt16
 
ami
, uöt16 
nwkAddr
 );

237 
ZDSecMgrAddrMgrCB
–
uöt8
 
upd©e
, 
AddrMgrE¡ry_t
* 
√wE¡ry
, AddrMgrE¡ry_t* 
ﬁdE¡ry
 );

239 
uöt8
 
ZDSecMgrPîmôJoöögE«bÀd
;

240 
uöt8
 
ZDSecMgrPîmôJoöögTimed
;

242 
APSME_LökKeyD©a_t
 
Tru°CíãrLökKey
;

293 
ZDSecMgrMa°îKeyInô
( );

298 
ZSètus_t
 
ZDSecMgrAddrSt‹e
–
uöt16
 
nwkAddr
, 
uöt8
* 
extAddr
, uöt16* 
ami
 );

299 
ZSètus_t
 
ZDSecMgrExtAddrSt‹e
–
uöt16
 
nwkAddr
, 
uöt8
* 
extAddr
, uöt16* 
ami
 );

300 
ZSètus_t
 
ZDSecMgrExtAddrLookup
–
uöt8
* 
extAddr
, 
uöt16
* 
ami
 );

305 
ZSètus_t
 
ZDSecMgrMa°îKeyLookup
–
uöt16
 
ami
, 
uöt8
** 
key
 );

306 
ZSètus_t
 
ZDSecMgrMa°îKeySt‹e
–
uöt16
 
ami
, 
uöt8
* 
key
 );

311 
ZDSecMgrE¡ryInô
( );

312 
ZSètus_t
 
ZDSecMgrE¡ryLookup
–
uöt16
 
nwkAddr
, 
ZDSecMgrE¡ry_t
** 
íåy
 );

313 
ZSètus_t
 
ZDSecMgrE¡ryLookupAMI
–
uöt16
 
ami
, 
ZDSecMgrE¡ry_t
** 
íåy
 );

314 
ZSètus_t
 
ZDSecMgrE¡ryLookupExt
–
uöt8
* 
extAddr
, 
ZDSecMgrE¡ry_t
** 
íåy
 );

315 
ZDSecMgrE¡ryFªe
–
ZDSecMgrE¡ry_t
* 
íåy
 );

316 
ZSètus_t
 
ZDSecMgrE¡ryNew
–
ZDSecMgrE¡ry_t
** 
íåy
 );

317 
ZSètus_t
 
ZDSecMgrAuthítiˇti⁄Së
–
uöt8
* 
extAddr
, 
ZDSecMgr_Authítiˇti⁄_O±i⁄
 
›ti⁄
 );

322 
ZDSecMgrCålInô
( );

323 
ZDSecMgrCålRñó£
–
ZDSecMgrCål_t
* 
˘æ
 );

324 
ZDSecMgrCålLookup
–
ZDSecMgrE¡ry_t
* 
íåy
, 
ZDSecMgrCål_t
** 
˘æ
 );

325 
ZDSecMgrCålSë
–
ZDSecMgrDevi˚_t
* 
devi˚
,

326 
ZDSecMgrE¡ry_t
* 
íåy
,

327 
ZDSecMgrCål_t
* 
˘æ
 );

328 
ZSètus_t
 
ZDSecMgrCålAdd
–
ZDSecMgrDevi˚_t
* 
devi˚
, 
ZDSecMgrE¡ry_t
* 
íåy
 );

329 
ZDSecMgrCålTîm
–
ZDSecMgrE¡ry_t
* 
íåy
 );

330 
ZSètus_t
 
ZDSecMgrCålRe£t
–
ZDSecMgrDevi˚_t
* 
devi˚
,

331 
ZDSecMgrE¡ry_t
* 
íåy
 );

336 
ZSètus_t
 
ZDSecMgrMa°îKeyLﬂd
–
uöt8
* 
extAddr
, uöt8* 
key
 );

337 
ZSètus_t
 
ZDSecMgrAµKeyGë
–
uöt16
 
öôNwkAddr
,

338 
uöt8
* 
öôExtAddr
,

339 
uöt16
 
∑πNwkAddr
,

340 
uöt8
* 
∑πExtAddr
,

341 
uöt8
** 
key
,

342 
uöt8
* 
keyTy≥
 );

343 
ZDSecMgrAµKeyReq
–
ZDO_Reque°KeyInd_t
* 
öd
 );

344 
ZSètus_t
 
ZDSecMgrE°ablishKey
–
ZDSecMgrDevi˚_t
* 
devi˚
 );

345 
ZSètus_t
 
ZDSecMgrSídMa°îKey
–
ZDSecMgrDevi˚_t
* 
devi˚
 );

346 
ZSètus_t
 
ZDSecMgrSídNwkKey
–
ZDSecMgrDevi˚_t
* 
devi˚
 );

351 
ZDSecMgrDevi˚E¡ryRemove
–
ZDSecMgrE¡ry_t
* 
íåy
 );

352 
ZSètus_t
 
ZDSecMgrDevi˚E¡ryAdd
–
ZDSecMgrDevi˚_t
* 
devi˚
, 
uöt16
 
ami
 );

357 
ZDSecMgrDevi˚CålH™dÀr
–
ZDSecMgrDevi˚_t
* 
devi˚
 );

358 
ZDSecMgrDevi˚CålSëup
–
ZDSecMgrDevi˚_t
* 
devi˚
 );

359 
ZDSecMgrDevi˚CålUpd©e
–
uöt8
* 
extAddr
, uöt8 
°©e
 );

364 
ZDSecMgrDevi˚Remove
–
ZDSecMgrDevi˚_t
* 
devi˚
 );

365 
ZSètus_t
 
ZDSecMgrDevi˚VÆid©eSKKE
–
ZDSecMgrDevi˚_t
* 
devi˚
 );

366 
ZSètus_t
 
ZDSecMgrDevi˚VÆid©eRM
–
ZDSecMgrDevi˚_t
* 
devi˚
 );

367 
ZSètus_t
 
ZDSecMgrDevi˚VÆid©eCM
–
ZDSecMgrDevi˚_t
* 
devi˚
 );

368 
ZSètus_t
 
ZDSecMgrDevi˚VÆid©e
–
ZDSecMgrDevi˚_t
* 
devi˚
 );

369 
ZSètus_t
 
ZDSecMgrDevi˚Joö
–
ZDSecMgrDevi˚_t
* 
devi˚
 );

370 
ZSètus_t
 
ZDSecMgrDevi˚JoöDúe˘
–
ZDSecMgrDevi˚_t
* 
devi˚
 );

371 
ZSètus_t
 
ZDSecMgrDevi˚JoöFwd
–
ZDSecMgrDevi˚_t
* 
devi˚
 );

372 
ZSètus_t
 
ZDSecMgrDevi˚New
–
ZDSecMgrDevi˚_t
* 
devi˚
 );

377 
ZDSecMgrAssocDevi˚Auth
–
assocüãd_devi˚s_t
* 
assoc
 );

382 
ZDSecMgrAuthInôüã
–
uöt8
* 
ª•⁄dî
 );

383 
ZDSecMgrAuthNwkKey
( );

394 
ZDSecMgrMa°îKeyInô
( )

396 
uöt16
 
ödex
;

397 
uöt16
 
size
;

400 
size
 = ()–(
ZDSecMgrMa°îKeyD©a_t
Ë* 
ZDSECMGR_MASTERKEY_MAX
 );

402 
ZDSecMgrMa°îKeyD©a
 = 
oßl_mem_Æloc
–
size
 );

405 i‡–
ZDSecMgrMa°îKeyD©a
 !
NULL
 )

407  
ödex
 = 0; index < 
ZDSECMGR_MASTERKEY_MAX
; index++ )

409 
ZDSecMgrMa°îKeyD©a
[
ödex
].
ami
 = 
INVALID_NODE_ADDR
;

415 
ZDSecMgrMa°îKeyInô
( )

417 
uöt16
 
ödex
;

418 
uöt16
 
size
;

419 
AddrMgrE¡ry_t
 
íåy
;

423 
size
 = ()–(
ZDSecMgrMa°îKeyD©a_t
Ë* 
ZDSECMGR_MASTERKEY_MAX
 );

425 
ZDSecMgrMa°îKeyD©a
 = 
oßl_mem_Æloc
–
size
 );

428 i‡–
ZDSecMgrMa°îKeyD©a
 !
NULL
 )

430  
ödex
 = 0; index < 
ZDSECMGR_MASTERKEY_MAX
; index++ )

432 
ZDSecMgrMa°îKeyD©a
[
ödex
].
ami
 = 
INVALID_NODE_ADDR
;

437 #i‡–
ZDSECMGR_PRECONFIG_MAX
 != 0 )

439 i‡–
zgPªC⁄figKeys
 =
TRUE
 )

442 
íåy
.
u£r
 = 
ADDRMGR_USER_SECURITY
;

444  
ödex
 = 0; index < 
ZDSECMGR_PRECONFIG_MAX
; index++ )

447 
AddrMgrExtAddrSë
–
íåy
.
extAddr
,

448 (
uöt8
*)
ZDSecMgrPªC⁄figD©a
[
ödex
].
extAddr
 );

450 i‡–
AddrMgrE¡ryLookupExt
–&
íåy
 ) !
TRUE
 )

453 
AddrMgrE¡ryUpd©e
–&
íåy
 );

456 i‡–
íåy
.
ödex
 !
INVALID_NODE_ADDR
 )

459 
ZDSecMgrMa°îKeyD©a
[
ödex
].
ami
 = 
íåy
.index;

461 
oßl_mem˝y
–
ZDSecMgrMa°îKeyD©a
[
ödex
].
key
,

462 (*)
ZDSecMgrPªC⁄figD©a
[
ödex
].
key
, 
SEC_KEY_LEN
 );

484 
ZSètus_t
 
ZDSecMgrAddrSt‹e
–
uöt16
 
nwkAddr
, 
uöt8
* 
extAddr
, uöt16* 
ami
 )

486 
ZSètus_t
 
°©us
;

487 
AddrMgrE¡ry_t
 
íåy
;

491 
íåy
.
u£r
 = 
ADDRMGR_USER_SECURITY
;

492 
íåy
.
nwkAddr
 =ÇwkAddr;

493 
AddrMgrExtAddrSë
–
íåy
.
extAddr
,ÉxtAddr );

495 i‡–
AddrMgrE¡ryUpd©e
–&
íåy
 ) =
TRUE
 )

498 *
ami
 = 
íåy
.
ödex
;

499 
°©us
 = 
ZSuc˚ss
;

504 *
ami
 = 
íåy
.
ödex
;

505 
°©us
 = 
ZNwkUnknownDevi˚
;

508  
°©us
;

521 
ZSètus_t
 
ZDSecMgrExtAddrSt‹e
–
uöt16
 
nwkAddr
, 
uöt8
* 
extAddr
, uöt16* 
ami
 )

523 
ZSètus_t
 
°©us
;

524 
AddrMgrE¡ry_t
 
íåy
;

528 
íåy
.
u£r
 = 
ADDRMGR_USER_SECURITY
;

529 
íåy
.
nwkAddr
 =ÇwkAddr;

530 
AddrMgrExtAddrSë
–
íåy
.
extAddr
,ÉxtAddr );

532 i‡–
AddrMgrE¡ryUpd©e
–&
íåy
 ) =
TRUE
 )

535 *
ami
 = 
íåy
.
ödex
;

536 
°©us
 = 
ZSuc˚ss
;

541 *
ami
 = 
íåy
.
ödex
;

542 
°©us
 = 
ZNwkUnknownDevi˚
;

545  
°©us
;

558 
ZSètus_t
 
ZDSecMgrExtAddrLookup
–
uöt8
* 
extAddr
, 
uöt16
* 
ami
 )

560 
ZSètus_t
 
°©us
;

561 
AddrMgrE¡ry_t
 
íåy
;

565 
íåy
.
u£r
 = 
ADDRMGR_USER_SECURITY
;

566 
AddrMgrExtAddrSë
–
íåy
.
extAddr
,ÉxtAddr );

568 i‡–
AddrMgrE¡ryLookupExt
–&
íåy
 ) =
TRUE
 )

571 *
ami
 = 
íåy
.
ödex
;

572 
°©us
 = 
ZSuc˚ss
;

577 *
ami
 = 
íåy
.
ödex
;

578 
°©us
 = 
ZNwkUnknownDevi˚
;

581  
°©us
;

594 
ZSètus_t
 
ZDSecMgrMa°îKeyLookup
–
uöt16
 
ami
, 
uöt8
** 
key
 )

596 
ZSètus_t
 
°©us
;

597 
uöt16
 
ödex
;

601 *
key
 = 
NULL
;

602 
°©us
 = 
ZNwkUnknownDevi˚
;

605 i‡–
ZDSecMgrMa°îKeyD©a
 !
NULL
 )

607  
ödex
 = 0; index < 
ZDSECMGR_MASTERKEY_MAX
 ; index++ )

609 i‡–
ZDSecMgrMa°îKeyD©a
[
ödex
].
ami
 ==ámi )

612 *
key
 = 
ZDSecMgrMa°îKeyD©a
[
ödex
].key;

613 
°©us
 = 
ZSuc˚ss
;

616 
ödex
 = 
ZDSECMGR_MASTERKEY_MAX
;

621  
°©us
;

634 
ZSètus_t
 
ZDSecMgrMa°îKeySt‹e
–
uöt16
 
ami
, 
uöt8
* 
key
 )

636 
ZSètus_t
 
°©us
;

637 
uöt16
 
ödex
;

638 
uöt8
* 
íåy
;

642 
°©us
 = 
ZNwkUnknownDevi˚
;

645 i‡–
ZDSecMgrMa°îKeyD©a
 !
NULL
 )

647  
ödex
 = 0; index < 
ZDSECMGR_MASTERKEY_MAX
 ; index++ )

649 i‡–
ZDSecMgrMa°îKeyD©a
[
ödex
].
ami
 =
INVALID_NODE_ADDR
 )

652 
ZDSecMgrMa°îKeyD©a
[
ödex
].
ami
 =ámi;

654 
íåy
 = 
ZDSecMgrMa°îKeyD©a
[
ödex
].
key
;

656 i‡–
key
 !
NULL
 )

658 
oßl_mem˝y
–
íåy
, 
key
, 
SEC_KEY_LEN
 );

662 
oßl_mem£t
–
íåy
, 0, 
SEC_KEY_LEN
 );

666 
°©us
 = 
ZSuc˚ss
;

669 
ödex
 = 
ZDSECMGR_MASTERKEY_MAX
;

674  
°©us
;

686 
ZDSecMgrE¡ryInô
( )

688 
uöt16
 
size
;

689 
uöt16
 
ödex
;

692 
size
 = ()–(
ZDSecMgrE¡ry_t
Ë* 
ZDSECMGR_ENTRY_MAX
 );

694 
ZDSecMgrE¡rõs
 = 
oßl_mem_Æloc
–
size
 );

697 i‡–
ZDSecMgrE¡rõs
 !
NULL
 )

699  
ödex
 = 0; index < 
ZDSECMGR_ENTRY_MAX
; index++ )

701 
ZDSecMgrE¡rõs
[
ödex
].
ami
 = 
INVALID_NODE_ADDR
;

704 
ZDSecMgrRe°‹eFromNV
();

717 
ZSètus_t
 
ZDSecMgrE¡ryLookup
–
uöt16
 
nwkAddr
, 
ZDSecMgrE¡ry_t
** 
íåy
 )

719 
ZSètus_t
 
°©us
;

720 
uöt16
 
ödex
;

721 
AddrMgrE¡ry_t
 
addrMgrE¡ry
;

725 *
íåy
 = 
NULL
;

726 
°©us
 = 
ZNwkUnknownDevi˚
;

729 i‡–
ZDSecMgrE¡rõs
 !
NULL
 )

731 
addrMgrE¡ry
.
u£r
 = 
ADDRMGR_USER_SECURITY
;

732 
addrMgrE¡ry
.
nwkAddr
 =ÇwkAddr;

734 i‡–
AddrMgrE¡ryLookupNwk
–&
addrMgrE¡ry
 ) =
TRUE
 )

736  
ödex
 = 0; index < 
ZDSECMGR_ENTRY_MAX
 ; index++ )

738 i‡–
addrMgrE¡ry
.
ödex
 =
ZDSecMgrE¡rõs
[ödex].
ami
 )

741 *
íåy
 = &
ZDSecMgrE¡rõs
[
ödex
];

742 
°©us
 = 
ZSuc˚ss
;

745 
ödex
 = 
ZDSECMGR_ENTRY_MAX
;

751  
°©us
;

764 
ZSètus_t
 
ZDSecMgrE¡ryLookupAMI
–
uöt16
 
ami
, 
ZDSecMgrE¡ry_t
** 
íåy
 )

766 
ZSètus_t
 
°©us
;

767 
uöt16
 
ödex
;

771 *
íåy
 = 
NULL
;

772 
°©us
 = 
ZNwkUnknownDevi˚
;

775 i‡–
ZDSecMgrE¡rõs
 !
NULL
 )

777  
ödex
 = 0; index < 
ZDSECMGR_ENTRY_MAX
 ; index++ )

779 i‡–
ZDSecMgrE¡rõs
[
ödex
].
ami
 ==ámi )

782 *
íåy
 = &
ZDSecMgrE¡rõs
[
ödex
];

783 
°©us
 = 
ZSuc˚ss
;

786 
ödex
 = 
ZDSECMGR_ENTRY_MAX
;

791  
°©us
;

804 
ZSètus_t
 
ZDSecMgrE¡ryLookupExt
–
uöt8
* 
extAddr
, 
ZDSecMgrE¡ry_t
** 
íåy
 )

806 
ZSètus_t
 
°©us
;

807 
uöt16
 
ami
;

811 *
íåy
 = 
NULL
;

812 
°©us
 = 
ZNwkUnknownDevi˚
;

815 i‡–
ZDSecMgrExtAddrLookup
–
extAddr
, &
ami
 ) =
ZSuc˚ss
 )

817 
°©us
 = 
ZDSecMgrE¡ryLookupAMI
–
ami
, 
íåy
 );

820  
°©us
;

832 
ZDSecMgrE¡ryFªe
–
ZDSecMgrE¡ry_t
* 
íåy
 )

834 
íåy
->
ami
 = 
INVALID_NODE_ADDR
;

846 
ZSètus_t
 
ZDSecMgrE¡ryNew
–
ZDSecMgrE¡ry_t
** 
íåy
 )

848 
ZSètus_t
 
°©us
;

849 
uöt16
 
ödex
;

853 *
íåy
 = 
NULL
;

854 
°©us
 = 
ZNwkUnknownDevi˚
;

857 i‡–
ZDSecMgrE¡rõs
 !
NULL
 )

860  
ödex
 = 0; index < 
ZDSECMGR_ENTRY_MAX
 ; index++ )

862 i‡–
ZDSecMgrE¡rõs
[
ödex
].
ami
 =
INVALID_NODE_ADDR
 )

865 *
íåy
 = &
ZDSecMgrE¡rõs
[
ödex
];

866 
°©us
 = 
ZSuc˚ss
;

869 
ZDSecMgrE¡rõs
[
ödex
].
authítiˇãO±i⁄
 = 
ZDSecMgr_NŸ_Authítiˇãd
;

872 
ödex
 = 
ZDSECMGR_ENTRY_MAX
;

877  
°©us
;

889 
ZDSecMgrCålInô
( )

891 
uöt16
 
size
;

892 
uöt16
 
ödex
;

895 
size
 = ()–(
ZDSecMgrCål_t
Ë* 
ZDSECMGR_CTRL_MAX
 );

897 
ZDSecMgrCålD©a
 = 
oßl_mem_Æloc
–
size
 );

900 i‡–
ZDSecMgrCålD©a
 !
NULL
 )

902  
ödex
 = 0; index < 
ZDSECMGR_CTRL_MAX
; index++ )

904 
ZDSecMgrCålD©a
[
ödex
].
°©e
 = 
ZDSECMGR_CTRL_NONE
;

918 
ZDSecMgrCålRñó£
–
ZDSecMgrCål_t
* 
˘æ
 )

921 
˘æ
->
°©e
 = 
ZDSECMGR_CTRL_NONE
;

934 
ZDSecMgrCålLookup
–
ZDSecMgrE¡ry_t
* 
íåy
, 
ZDSecMgrCål_t
** 
˘æ
 )

936 
uöt16
 
ödex
;

940 *
˘æ
 = 
NULL
;

943 i‡–
ZDSecMgrCålD©a
 !
NULL
 )

945  
ödex
 = 0; index < 
ZDSECMGR_CTRL_MAX
; index++ )

948 i‡–
ZDSecMgrCålD©a
[
ödex
].
°©e
 !
ZDSECMGR_CTRL_NONE
 )

951 i‡–
ZDSecMgrCålD©a
[
ödex
].
íåy
 ==Éntry )

954 *
˘æ
 = &
ZDSecMgrCålD©a
[
ödex
];

957 
ödex
 = 
ZDSECMGR_CTRL_MAX
;

975 
ZDSecMgrCålSë
–
ZDSecMgrDevi˚_t
* 
devi˚
,

976 
ZDSecMgrE¡ry_t
* 
íåy
,

977 
ZDSecMgrCål_t
* 
˘æ
 )

980 
˘æ
->
∑ª¡Addr
 = 
devi˚
->parentAddr;

981 
˘æ
->
£cuª
 = 
devi˚
->secure;

982 
˘æ
->
íåy
 =Éntry;

983 
˘æ
->
°©e
 = 
ZDSECMGR_CTRL_INIT
;

984 
˘æ
->
˙å
 = 0;

987 
devi˚
->
˘æ
 = ctrl;

1000 
ZSètus_t
 
ZDSecMgrCålAdd
–
ZDSecMgrDevi˚_t
* 
devi˚
, 
ZDSecMgrE¡ry_t
* 
íåy
 )

1002 
ZSètus_t
 
°©us
;

1003 
uöt16
 
ödex
;

1007 
°©us
 = 
ZNwkUnknownDevi˚
;

1010 i‡–
ZDSecMgrCålD©a
 !
NULL
 )

1013  
ödex
 = 0; index < 
ZDSECMGR_CTRL_MAX
; index++ )

1015 i‡–
ZDSecMgrCålD©a
[
ödex
].
°©e
 =
ZDSECMGR_CTRL_NONE
 )

1018 
ZDSecMgrCålSë
–
devi˚
, 
íåy
, &
ZDSecMgrCålD©a
[
ödex
] );

1020 
°©us
 = 
ZSuc˚ss
;

1023 
ödex
 = 
ZDSECMGR_CTRL_MAX
;

1028  
°©us
;

1040 
ZDSecMgrCålTîm
–
ZDSecMgrE¡ry_t
* 
íåy
 )

1042 
ZDSecMgrCål_t
* 
˘æ
;

1045 
ZDSecMgrCålLookup
 ( 
íåy
, &
˘æ
 );

1047 i‡–
˘æ
 !
NULL
 )

1049 
ZDSecMgrCålRñó£
 ( 
˘æ
 );

1063 
ZSètus_t
 
ZDSecMgrCålRe£t
–
ZDSecMgrDevi˚_t
* 
devi˚
, 
ZDSecMgrE¡ry_t
* 
íåy
 )

1065 
ZSètus_t
 
°©us
;

1066 
ZDSecMgrCål_t
* 
˘æ
;

1070 
°©us
 = 
ZNwkUnknownDevi˚
;

1073 
ZDSecMgrCålLookup
–
íåy
, &
˘æ
 );

1075 i‡–
˘æ
 !
NULL
 )

1077 
ZDSecMgrCålSë
–
devi˚
, 
íåy
, 
˘æ
 );

1079 
°©us
 = 
ZSuc˚ss
;

1083 
°©us
 = 
ZDSecMgrCålAdd
–
devi˚
, 
íåy
 );

1086  
°©us
;

1100 
ZSètus_t
 
ZDSecMgrMa°îKeyLﬂd
–
uöt8
* 
extAddr
, uöt8* 
key
 )

1102 
ZSètus_t
 
°©us
;

1103 
uöt8
* 
lﬂded
;

1104 
uöt16
 
ami
;

1108 
°©us
 = 
ZDSecMgrExtAddrLookup
–
extAddr
, &
ami
 );

1110 i‡–
°©us
 =
ZSuc˚ss
 )

1113 i‡–
ZDSecMgrMa°îKeyLookup
–
ami
, &
lﬂded
 ) =
ZSuc˚ss
 )

1116 
oßl_mem˝y
–
lﬂded
, 
key
, 
SEC_KEY_LEN
 );

1121 
°©us
 = 
ZDSecMgrMa°îKeySt‹e
–
ami
, 
key
 );

1125  
°©us
;

1142 
uöt8
 
ZDSecMgrAµKeyTy≥
 = 
KEY_TYPE_APP_LINK
;

1147 
ZSètus_t
 
ZDSecMgrAµKeyGë
–
uöt16
 
öôNwkAddr
,

1148 
uöt8
* 
öôExtAddr
,

1149 
uöt16
 
∑πNwkAddr
,

1150 
uöt8
* 
∑πExtAddr
,

1151 
uöt8
** 
key
,

1152 
uöt8
* 
keyTy≥
 )

1155 ()
öôNwkAddr
;

1156 ()
öôExtAddr
;

1157 ()
∑πNwkAddr
;

1158 ()
∑πExtAddr
;

1165 
SSP_GëTrueR™d
–
SEC_KEY_LEN
, *
key
 );

1167 *
keyTy≥
 = 
ZDSecMgrAµKeyTy≥
;

1169  
ZSuc˚ss
;

1181 
ZDSecMgrAµKeyReq
–
ZDO_Reque°KeyInd_t
* 
öd
 )

1183 
APSME_Tøn•‹tKeyReq_t
 
ªq
;

1184 
uöt8
 
öôExtAddr
[
Z_EXTADDR_LEN
];

1185 
uöt16
 
∑πNwkAddr
;

1186 
uöt8
 
key
[
SEC_KEY_LEN
];

1190 i‡––
APSME_LookupNwkAddr
–
öd
->
∑πExtAddr
, &
∑πNwkAddr
 ) =
TRUE
 ) &&

1191 –
APSME_LookupExtAddr
–
öd
->
§cAddr
, 
öôExtAddr
 ) =
TRUE
 ) )

1194 
ªq
.
key
 = key;

1197 i‡–
ZDSecMgrAµKeyGë
–
öd
->
§cAddr
,

1198 
öôExtAddr
,

1199 
∑πNwkAddr
,

1200 
öd
->
∑πExtAddr
,

1201 &
ªq
.
key
,

1202 &
ªq
.
keyTy≥
 ) =
ZSuc˚ss
 )

1205 
ªq
.
nwkSecuª
 = 
TRUE
;

1206 
ªq
.
≠sSecuª
 = 
TRUE
;

1207 
ªq
.
tu¬ñ
 = 
NULL
;

1210 
ªq
.
d°Addr
 = 
öd
->
§cAddr
;

1211 
ªq
.
extAddr
 = 
öd
->
∑πExtAddr
;

1212 
ªq
.
öôüt‹
 = 
TRUE
;

1213 
APSME_Tøn•‹tKeyReq
–&
ªq
 );

1216 
ªq
.
d°Addr
 = 
∑πNwkAddr
;

1217 
ªq
.
extAddr
 = 
öôExtAddr
;

1218 
ªq
.
öôüt‹
 = 
FALSE
;

1220 
APSME_Tøn•‹tKeyReq
–&
ªq
 );

1234 
ZSètus_t
 
ZDSecMgrE°ablishKey
–
ZDSecMgrDevi˚_t
* 
devi˚
 )

1236 
ZSètus_t
 
°©us
;

1237 
APSME_E°ablishKeyReq_t
 
ªq
;

1240 
ªq
.
ª•ExtAddr
 = 
devi˚
->
extAddr
;

1241 
ªq
.
mëhod
 = 
APSME_SKKE_METHOD
;

1243 i‡–
devi˚
->
∑ª¡Addr
 =
NLME_GëSh‹tAddr
() )

1245 
ªq
.
d°Addr
 = 
devi˚
->
nwkAddr
;

1247 
ªq
.
≠sSecuª
 = 
FALSE
;

1248 
ªq
.
nwkSecuª
 = 
FALSE
;

1252 
ªq
.
d°Addr
 = 
devi˚
->
∑ª¡Addr
;

1254 
ªq
.
≠sSecuª
 = 
TRUE
;

1255 
ªq
.
nwkSecuª
 = 
TRUE
;

1258 
°©us
 = 
APSME_E°ablishKeyReq
–&
ªq
 );

1260  
°©us
;

1272 
ZSètus_t
 
ZDSecMgrSídMa°îKey
–
ZDSecMgrDevi˚_t
* 
devi˚
 )

1274 
ZSètus_t
 
°©us
;

1275 
APSME_Tøn•‹tKeyReq_t
 
ªq
;

1278 
ªq
.
keyTy≥
 = 
KEY_TYPE_TC_MASTER
;

1279 
ªq
.
extAddr
 = 
devi˚
->extAddr;

1280 
ªq
.
tu¬ñ
 = 
NULL
;

1282 
ZDSecMgrMa°îKeyLookup
–
devi˚
->
˘æ
->
íåy
->
ami
, &
ªq
.
key
 );

1285 i‡–
devi˚
->
∑ª¡Addr
 !
NLME_GëSh‹tAddr
() )

1288 
ªq
.
d°Addr
 = 
devi˚
->
∑ª¡Addr
;

1289 
ªq
.
nwkSecuª
 = 
TRUE
;

1290 
ªq
.
≠sSecuª
 = 
TRUE
;

1295 
ªq
.
d°Addr
 = 
devi˚
->
nwkAddr
;

1296 
ªq
.
nwkSecuª
 = 
FALSE
;

1297 
ªq
.
≠sSecuª
 = 
FALSE
;

1300 
°©us
 = 
APSME_Tøn•‹tKeyReq
–&
ªq
 );

1302  
°©us
;

1314 
ZSètus_t
 
ZDSecMgrSídNwkKey
–
ZDSecMgrDevi˚_t
* 
devi˚
 )

1316 
ZSètus_t
 
°©us
;

1317 
APSME_Tøn•‹tKeyReq_t
 
ªq
;

1318 
APSDE_FømeTu¬ñ_t
 
tu¬ñ
;

1320 
ªq
.
d°Addr
 = 
devi˚
->
nwkAddr
;

1321 
ªq
.
extAddr
 = 
devi˚
->extAddr;

1323 i‡–
ZG_CHECK_SECURITY_MODE
 =
ZG_SECURITY_PRO_HIGH
 )

1324 
ªq
.
keyTy≥
 = 
KEY_TYPE_NWK_HIGH
;

1326 
ªq
.
keyTy≥
 = 
KEY_TYPE_NWK
;

1328 i‡–(
ZG_CHECK_SECURITY_MODE
 =
ZG_SECURITY_PRO_HIGH
)

1329 || (
ZG_CHECK_SECURITY_MODE
 =
ZG_SECURITY_SE_STANDARD
) )

1332 
ªq
.
keySeqNum
 = 
_NIB
.
nwkA˘iveKey
.keySeqNum;

1333 
ªq
.
key
 = 
_NIB
.
nwkA˘iveKey
.key;

1337 
ªq
.
≠sSecuª
 = 
TRUE
;

1340 i‡–
devi˚
->
∑ª¡Addr
 =
NLME_GëSh‹tAddr
() )

1342 
ªq
.
nwkSecuª
 = 
FALSE
;

1343 
ªq
.
tu¬ñ
 = 
NULL
;

1347 
ªq
.
nwkSecuª
 = 
TRUE
;

1348 
ªq
.
tu¬ñ
 = &tunnel;

1349 
ªq
.
tu¬ñ
->
äa
 = 
devi˚
->
∑ª¡Addr
;

1350 
ªq
.
tu¬ñ
->
dó
 = 
devi˚
->
extAddr
;

1357 
ªq
.
nwkSecuª
 = 
TRUE
;

1358 
ªq
.
≠sSecuª
 = 
FALSE
;

1359 
ªq
.
tu¬ñ
 = 
NULL
;

1361 i‡–
devi˚
->
∑ª¡Addr
 !
NLME_GëSh‹tAddr
() )

1363 
ªq
.
d°Addr
 = 
devi˚
->
∑ª¡Addr
;

1368 i‡–
devi˚
->
£cuª
 =
FALSE
 )

1370 
ªq
.
keySeqNum
 = 
_NIB
.
nwkA˘iveKey
.keySeqNum;

1371 
ªq
.
key
 = 
_NIB
.
nwkA˘iveKey
.key;

1374 i‡–
devi˚
->
∑ª¡Addr
 =
NLME_GëSh‹tAddr
() )

1376 
ªq
.
nwkSecuª
 = 
FALSE
;

1381 
ªq
.
key
 = 
NULL
;

1382 
ªq
.
keySeqNum
 = 0;

1386 
°©us
 = 
APSME_Tøn•‹tKeyReq
–&
ªq
 );

1388  
°©us
;

1400 
ZDSecMgrDevi˚E¡ryRemove
–
ZDSecMgrE¡ry_t
* 
íåy
 )

1403 i‡––
ZG_BUILD_COORDINATOR_TYPE
 ) && ( 
ZG_DEVICE_COORDINATOR_TYPE
 ) )

1405 
ZDSecMgrCålTîm
–
íåy
 );

1409 
ZDSecMgrE¡ryFªe
–
íåy
 );

1425 
ZDSecMgrAddrMgrUpd©e
–
uöt16
 
ami
, uöt16 
nwkAddr
 )

1427 
AddrMgrE¡ry_t
 
íåy
;

1430 
íåy
.
u£r
 = 
ADDRMGR_USER_SECURITY
;

1431 
íåy
.
ödex
 = 
ami
;

1433 
AddrMgrE¡ryGë
–&
íåy
 );

1436 i‡–
íåy
.
nwkAddr
 !=ÇwkAddr )

1439 
íåy
.
nwkAddr
 =ÇwkAddr;

1441 
AddrMgrE¡ryUpd©e
–&
íåy
 );

1445 
ZSètus_t
 
ZDSecMgrDevi˚E¡ryAdd
–
ZDSecMgrDevi˚_t
* 
devi˚
, 
uöt16
 
ami
 )

1447 
ZSètus_t
 
°©us
;

1448 
ZDSecMgrE¡ry_t
* 
íåy
;

1452 
°©us
 = 
ZNwkUnknownDevi˚
;

1454 
devi˚
->
˘æ
 = 
NULL
;

1457 i‡–
ZDSecMgrE¡ryLookup
–
devi˚
->
nwkAddr
, &
íåy
 ) =
ZSuc˚ss
 )

1460 i‡–
íåy
->
ami
 !=ámi )

1463 
ZDSecMgrDevi˚E¡ryRemove
–
íåy
 );

1465 i‡–
ZDSecMgrE¡ryLookupAMI
–
ami
, &
íåy
 ) =
ZSuc˚ss
 )

1468 
ZDSecMgrAddrMgrUpd©e
–
ami
, 
devi˚
->
nwkAddr
 );

1472 i‡–
ZDSecMgrE¡ryLookupAMI
–
ami
, &
íåy
 ) =
ZSuc˚ss
 )

1475 
ZDSecMgrAddrMgrUpd©e
–
ami
, 
devi˚
->
nwkAddr
 );

1479 i‡–
íåy
 =
NULL
 )

1482 i‡–
ZDSecMgrE¡ryNew
–&
íåy
 ) =
ZSuc˚ss
 )

1487 
íåy
->
ami
 =ámi;

1490 
ZDSecMgrAddrMgrUpd©e
–
ami
, 
devi˚
->
nwkAddr
 );

1493 i‡––
ZG_BUILD_COORDINATOR_TYPE
 ) && ( 
ZG_DEVICE_COORDINATOR_TYPE
 ) )

1495 
°©us
 = 
ZDSecMgrCålAdd
–
devi˚
, 
íåy
 );

1499 
°©us
 = 
ZSuc˚ss
;

1508 i‡––
ZG_BUILD_COORDINATOR_TYPE
 ) && ( 
ZG_DEVICE_COORDINATOR_TYPE
 ) )

1510 
°©us
 = 
ZDSecMgrCålRe£t
–
devi˚
, 
íåy
 );

1514 
°©us
 = 
ZSuc˚ss
;

1518  
°©us
;

1530 
ZDSecMgrDevi˚CålH™dÀr
–
ZDSecMgrDevi˚_t
* 
devi˚
 )

1532 
uöt8
 
°©e
;

1533 
uöt8
 
˙å
;

1536 
°©e
 = 
devi˚
->
˘æ
->state;

1537 
˙å
 = 
ZDSECMGR_CTRL_BASE_CNTR
;

1539  
°©e
 )

1541 
ZDSECMGR_CTRL_TK_MASTER
:

1542 i‡–
ZDSecMgrSídMa°îKey
–
devi˚
 ) =
ZSuc˚ss
 )

1544 
°©e
 = 
ZDSECMGR_CTRL_SKKE_INIT
;

1545 
˙å
 = 
ZDSECMGR_CTRL_SKKE_INIT_CNTR
;

1549 
ZDSECMGR_CTRL_SKKE_INIT
:

1550 i‡–
ZDSecMgrE°ablishKey
–
devi˚
 ) =
ZSuc˚ss
 )

1552 
°©e
 = 
ZDSECMGR_CTRL_SKKE_WAIT
;

1556 
ZDSECMGR_CTRL_SKKE_WAIT
:

1560 
ZDSECMGR_CTRL_TK_NWK
:

1561 i‡–
ZDSecMgrSídNwkKey
–
devi˚
 ) =
ZSuc˚ss
 )

1563 
°©e
 = 
ZDSECMGR_CTRL_NONE
;

1568 
°©e
 = 
ZDSECMGR_CTRL_NONE
;

1572 i‡–
°©e
 !
ZDSECMGR_CTRL_NONE
 )

1574 
devi˚
->
˘æ
->
°©e
 = state;

1575 
devi˚
->
˘æ
->
˙å
 = cntr;

1577 
oßl_°¨t_timîEx
(
ZDAµTaskID
, 
ZDO_SECMGR_EVENT
, 100 );

1581 
ZDSecMgrCålRñó£
–
devi˚
->
˘æ
 );

1594 
ZDSecMgrDevi˚CålSëup
–
ZDSecMgrDevi˚_t
* 
devi˚
 )

1596 i‡–
devi˚
->
˘æ
 !
NULL
 )

1598 i‡–
devi˚
->
£cuª
 =
FALSE
 )

1601 
devi˚
->
˘æ
->
°©e
 = 
ZDSECMGR_CTRL_TK_MASTER
;

1606 
devi˚
->
˘æ
->
°©e
 = 
ZDSECMGR_CTRL_SKKE_INIT
;

1609 
ZDSecMgrDevi˚CålH™dÀr
–
devi˚
 );

1623 
ZDSecMgrDevi˚CålUpd©e
–
uöt8
* 
extAddr
, uöt8 
°©e
 )

1625 
ZDSecMgrE¡ry_t
* 
íåy
;

1626 
ZDSecMgrCål_t
* 
˘æ
;

1630 
ZDSecMgrE¡ryLookupExt
–
extAddr
, &
íåy
 );

1632 i‡–
íåy
 !
NULL
 )

1635 
ZDSecMgrCålLookup
–
íåy
, &
˘æ
 );

1638 i‡–
˘æ
 !
NULL
 )

1641 i‡–
˘æ
->
°©e
 =
ZDSECMGR_CTRL_SKKE_WAIT
 )

1643 i‡–
°©e
 =
ZDSECMGR_CTRL_SKKE_DONE
 )

1646 
˘æ
->
°©e
 = 
ZDSECMGR_CTRL_TK_NWK
;

1647 
˘æ
->
˙å
 = 
ZDSECMGR_CTRL_TK_NWK_CNTR
;

1649 i‡–
°©e
 =
ZDSECMGR_CTRL_SKKE_FAIL
 )

1652 
˘æ
->
°©e
 = 
ZDSECMGR_CTRL_SKKE_FAIL
;

1653 
˘æ
->
˙å
 = 
ZDSECMGR_CTRL_BASE_CNTR
;

1661 
APSME_SKA_TimîExpúed
–
uöt8
 
öôüt‹
, uöt8* 
∑πExtAddr
 );

1662 
APSME_SKA_TimîExpúed
–
uöt8
 
öôüt‹
, uöt8* 
∑πExtAddr
 )

1664 i‡––
ZG_BUILD_COORDINATOR_TYPE
 ) && ( 
ZG_DEVICE_COORDINATOR_TYPE
 ) )

1666 i‡–
öôüt‹
 =
TRUE
 )

1668 
ZDSecMgrDevi˚CålUpd©e
–
∑πExtAddr
, 
ZDSECMGR_CTRL_SKKE_FAIL
 );

1682 
ZDSecMgrDevi˚Remove
–
ZDSecMgrDevi˚_t
* 
devi˚
 )

1684 
APSME_RemoveDevi˚Req_t
 
ªmDevReq
;

1685 
NLME_LóveReq_t
 
ÀaveReq
;

1686 
assocüãd_devi˚s_t
* 
assoc
;

1690 i‡–
devi˚
->
∑ª¡Addr
 =
NLME_GëSh‹tAddr
() )

1693 
ÀaveReq
.
extAddr
 = 
devi˚
->extAddr;

1694 
ÀaveReq
.
ªmoveChûdªn
 = 
FALSE
;

1695 
ÀaveReq
.
ªjoö
 = 
FALSE
;

1698 
assoc
 = 
AssocGëWôhExt
–
devi˚
->
extAddr
 );

1700 i‡––
assoc
 !
NULL
 ) &&

1701 –
assoc
->
nodeRñ©i⁄
 >
CHILD_RFD
 ) &&

1702 –
assoc
->
nodeRñ©i⁄
 <
CHILD_FFD_RX_IDLE
 ) )

1705 i‡–
assoc
->
devSètus
 & 
DEV_SEC_AUTH_STATUS
 )

1707 
ÀaveReq
.
sûít
 = 
FALSE
;

1711 
ÀaveReq
.
sûít
 = 
TRUE
;

1714 
NLME_LóveReq
–&
ÀaveReq
 );

1720 
ªmDevReq
.
∑ª¡Addr
 = 
devi˚
->parentAddr;

1721 
ªmDevReq
.
chûdExtAddr
 = 
devi˚
->
extAddr
;

1723 
APSME_RemoveDevi˚Req
–&
ªmDevReq
 );

1736 
ZSètus_t
 
ZDSecMgrDevi˚VÆid©eSKKE
–
ZDSecMgrDevi˚_t
* 
devi˚
 )

1738 
ZSètus_t
 
°©us
;

1739 
uöt16
 
ami
;

1740 
uöt8
* 
key
;

1744 
°©us
 = 
ZDSecMgrExtAddrLookup
–
devi˚
->
extAddr
, &
ami
 );

1746 i‡–
°©us
 =
ZSuc˚ss
 )

1749 
°©us
 = 
ZDSecMgrMa°îKeyLookup
–
ami
, &
key
 );

1751 i‡–
°©us
 =
ZSuc˚ss
 )

1768 
°©us
 = 
ZDSecMgrDevi˚E¡ryAdd
–
devi˚
, 
ami
 );

1772  
°©us
;

1784 
ZSètus_t
 
ZDSecMgrDevi˚VÆid©eRM
–
ZDSecMgrDevi˚_t
* 
devi˚
 )

1787 
ZSètus_t
 
°©us
;

1788 
°©us
 = 
ZSuc˚ss
;

1790 ()
devi˚
;

1795 i‡–
zgSecuªPîmôJoö
 =
Ál£
 )

1797 
°©us
 = 
ZNwkUnknownDevi˚
;

1812 
uöt8
 
ödex
;

1813 
uöt8
* 
ª°ri˘ed
;

1816  
ödex
 = 0; index < 
ZDSECMGR_STORED_DEVICES
; index++ )

1818 
ª°ri˘ed
 = 
ZDSecMgrSt‹edDevi˚Li°
[
ödex
];

1820 i‡–
AddrMgrExtAddrEquÆ
–
ª°ri˘ed
, 
devi˚
->
extAddr
 ) =
TRUE
 )

1823 
°©us
 = 
ZNwkUnknownDevi˚
;

1826 
ödex
 = 
ZDSECMGR_STORED_DEVICES
;

1832  
°©us
;

1845 
ZSètus_t
 
ZDSecMgrDevi˚VÆid©eCM
–
ZDSecMgrDevi˚_t
* 
devi˚
 )

1847 
ZSètus_t
 
°©us
;

1848 
uöt16
 
ami
;

1849 
uöt8
* 
key
;

1873 
°©us
 = 
ZSuc˚ss
;

1876 
key
 = 
ZDSecMgrTCMa°îKey
;

1879 
°©us
 = 
ZDSecMgrAddrSt‹e
–
devi˚
->
nwkAddr
, devi˚->
extAddr
, &
ami
 );

1882 
ZDSecMgrMa°îKeyLﬂd
–
devi˚
->
extAddr
, 
key
 );

1886 i‡–
°©us
 =
ZSuc˚ss
 )

1889 
°©us
 = 
ZDSecMgrDevi˚E¡ryAdd
–
devi˚
, 
ami
 );

1892  
°©us
;

1896 
ZSètus_t
 
ZDSecMgrDevi˚VÆid©eCM
–
ZDSecMgrDevi˚_t
* 
devi˚
 )

1898 
ZSètus_t
 
°©us
;

1899 
uöt16
 
ami
;

1900 
uöt8
* 
key
;

1904 i‡–
devi˚
->
£cuª
 =
TRUE
 )

1907 
°©us
 = 
ZDSecMgrExtAddrLookup
–
devi˚
->
extAddr
, &
ami
 );

1909 i‡–
°©us
 =
ZSuc˚ss
 )

1911 
°©us
 = 
ZDSecMgrMa°îKeyLookup
–
ami
, &
key
 );

1921 
°©us
 = 
ZSuc˚ss
;

1924 i‡–
ZDSecMgrExtAddrLookup
–
devi˚
->
extAddr
, &
ami
 ) !
ZSuc˚ss
 )

1927 
°©us
 = 
ZDSecMgrAddrSt‹e
–
devi˚
->
nwkAddr
, devi˚->
extAddr
, &
ami
 );

1931 i‡–
ZDSecMgrMa°îKeyLookup
–
ami
, &
key
 ) !
ZSuc˚ss
 )

1934 
°©us
 = 
ZDSecMgrMa°îKeySt‹e
–
ami
, 
NULL
 );

1939 i‡–
°©us
 =
ZSuc˚ss
 )

1942 
°©us
 = 
ZDSecMgrDevi˚E¡ryAdd
–
devi˚
, 
ami
 );

1945  
°©us
;

1958 
ZSètus_t
 
ZDSecMgrDevi˚VÆid©e
–
ZDSecMgrDevi˚_t
* 
devi˚
 )

1960 
ZSètus_t
 
°©us
;

1963 i‡–
ZDSecMgrPîmôJoöögE«bÀd
 =
TRUE
 )

1968 i‡–
zgPªC⁄figKeys
 =
TRUE
 )

1970 
devi˚
->
£cuª
 = 
TRUE
;

1974 
devi˚
->
£cuª
 = 
FALSE
;

1977 i‡–
ZG_CHECK_SECURITY_MODE
 =
ZG_SECURITY_PRO_HIGH
 )

1979 
°©us
 = 
ZDSecMgrDevi˚VÆid©eCM
–
devi˚
 );

1983 
°©us
 = 
ZDSecMgrDevi˚VÆid©eRM
–
devi˚
 );

1988 
°©us
 = 
ZNwkUnknownDevi˚
;

1991  
°©us
;

2003 
ZSètus_t
 
ZDSecMgrDevi˚Joö
–
ZDSecMgrDevi˚_t
* 
devi˚
 )

2005 
ZSètus_t
 
°©us
;

2008 
°©us
 = 
ZDSecMgrDevi˚VÆid©e
–
devi˚
 );

2010 i‡–
°©us
 =
ZSuc˚ss
 )

2012 i‡–
ZG_CHECK_SECURITY_MODE
 =
ZG_SECURITY_PRO_HIGH
 )

2014 
ZDSecMgrDevi˚CålSëup
–
devi˚
 );

2019 
°©us
 = 
ZDSecMgrSídNwkKey
–
devi˚
 );

2025 
ZDSecMgrDevi˚Remove
–
devi˚
 );

2028  
°©us
;

2040 
ZSètus_t
 
ZDSecMgrDevi˚JoöDúe˘
–
ZDSecMgrDevi˚_t
* 
devi˚
 )

2042 
ZSètus_t
 
°©us
;

2044 
°©us
 = 
ZDSecMgrDevi˚Joö
–
devi˚
 );

2046 i‡–
°©us
 =
ZSuc˚ss
 )

2049 
ZDSecMgrAssocDevi˚Auth
–
AssocGëWôhSh‹t
–
devi˚
->
nwkAddr
 ) );

2052  
°©us
;

2064 
ZSètus_t
 
ZDSecMgrDevi˚JoöFwd
–
ZDSecMgrDevi˚_t
* 
devi˚
 )

2066 
ZSètus_t
 
°©us
;

2067 
APSME_Upd©eDevi˚Req_t
 
ªq
;

2072 
°©us
 = 
ZSuc˚ss
;

2075 
ªq
.
d°Addr
 = 
APSME_TRUSTCENTER_NWKADDR
;

2076 
ªq
.
devAddr
 = 
devi˚
->
nwkAddr
;

2077 
ªq
.
devExtAddr
 = 
devi˚
->
extAddr
;

2080 i‡–(
devi˚
->
devSètus
 & 
DEV_HIGH_SEC_STATUS
) )

2082 i‡–
devi˚
->
devSètus
 & 
DEV_REJOIN_STATUS
 )

2084 i‡–
devi˚
->
£cuª
 =
TRUE
 )

2085 
ªq
.
°©us
 = 
APSME_UD_HIGH_SECURED_REJOIN
;

2087 
ªq
.
°©us
 = 
APSME_UD_HIGH_UNSECURED_REJOIN
;

2090 
ªq
.
°©us
 = 
APSME_UD_HIGH_UNSECURED_JOIN
;

2094 i‡–
devi˚
->
devSètus
 & 
DEV_REJOIN_STATUS
 )

2096 i‡–
devi˚
->
£cuª
 =
TRUE
 )

2097 
ªq
.
°©us
 = 
APSME_UD_STANDARD_SECURED_REJOIN
;

2099 
ªq
.
°©us
 = 
APSME_UD_STANDARD_UNSECURED_REJOIN
;

2102 
ªq
.
°©us
 = 
APSME_UD_STANDARD_UNSECURED_JOIN
;

2105 i‡–
ZG_CHECK_SECURITY_MODE
 =
ZG_SECURITY_PRO_HIGH
 )

2106 
ªq
.
≠sSecuª
 = 
TRUE
;

2108 
ªq
.
≠sSecuª
 = 
FALSE
;

2111 
°©us
 = 
APSME_Upd©eDevi˚Req
–&
ªq
 );

2113  
°©us
;

2125 
ZSètus_t
 
ZDSecMgrDevi˚New
–
ZDSecMgrDevi˚_t
* 
joöî
 )

2127 
ZSètus_t
 
°©us
;

2129 i‡––
ZG_BUILD_COORDINATOR_TYPE
 ) && ( 
ZG_DEVICE_COORDINATOR_TYPE
 ) )

2132 
°©us
 = 
ZDSecMgrDevi˚JoöDúe˘
–
joöî
 );

2136 
°©us
 = 
ZDSecMgrDevi˚JoöFwd
–
joöî
 );

2139  
°©us
;

2151 
ZDSecMgrAssocDevi˚Auth
–
assocüãd_devi˚s_t
* 
assoc
 )

2153 i‡–
assoc
 !
NULL
 )

2155 
assoc
->
devSètus
 |
DEV_SEC_AUTH_STATUS
;

2168 
ZDSecMgrAuthInôüã
–
uöt8
* 
ª•⁄dî
 )

2170 
APSME_AuthítiˇãReq_t
 
ªq
;

2174 i‡–
APSME_LookupNwkAddr
–
ª•⁄dî
, &
ªq
.
nwkAddr
 ) )

2177 
ªq
.
extAddr
 = 
ª•⁄dî
;

2178 
ªq
.
a˘i⁄
 = 
APSME_EA_INITIATE
;

2179 
ªq
.
chÆÀnge
 = 
NULL
;

2182 
APSME_AuthítiˇãReq
–&
ªq
 );

2195 
ZDSecMgrAuthNwkKey
()

2197 i‡–
devSèã
 =
DEV_END_DEVICE_UNAUTH
 )

2199 i‡–
ZG_CHECK_SECURITY_MODE
 =
ZG_SECURITY_PRO_HIGH
 )

2201 
uöt8
 
∑ª¡
[
Z_EXTADDR_LEN
];

2204 
NLME_GëCo‹dExtAddr
–
∑ª¡
 );

2207 
ZDSecMgrAuthInôüã
–
∑ª¡
 );

2212 
oßl_£t_evít
 ( 
ZDAµTaskID
, 
ZDO_DEVICE_AUTH
 );

2229 #i‡–
ADDRMGR_CALLBACK_ENABLED
 == 1 )

2230 
ZDSecMgrAddrMgrCB
–
uöt8
 
upd©e
, 
AddrMgrE¡ry_t
* 
√wE¡ry
, AddrMgrE¡ry_t* 
ﬁdE¡ry
 );

2231 
ZDSecMgrAddrMgrCB
–
uöt8
 
upd©e
,

2232 
AddrMgrE¡ry_t
* 
√wE¡ry
,

2233 
AddrMgrE¡ry_t
* 
ﬁdE¡ry
 )

2235 ()
upd©e
;

2236 ()
√wE¡ry
;

2237 ()
ﬁdE¡ry
;

2241 
ZDSecMgrInô
( )

2243 i‡–(
ZG_CHECK_SECURITY_MODE
 =
ZG_SECURITY_PRO_HIGH
)

2244 || (
ZG_CHECK_SECURITY_MODE
 =
ZG_SECURITY_SE_STANDARD
) )

2247 
ZDSecMgrMa°îKeyInô
();

2248 
ZDSecMgrE¡ryInô
();

2250 i‡––
ZG_BUILD_COORDINATOR_TYPE
 ) && ( 
ZG_DEVICE_COORDINATOR_TYPE
 ) )

2252 
ZDSecMgrCålInô
();

2256 #i‡–
ADDRMGR_CALLBACK_ENABLED
 == 1 )

2257 
AddrMgrRegi°î
–
ADDRMGR_REG_SECURITY
, 
ZDSecMgrAddrMgrCB
 );

2261 i‡–
ZG_CHECK_SECURITY_MODE
 =
ZG_SECURITY_PRO_HIGH
 )

2264 
APSME_SKA_SlŸInô
–
ZDSECMGR_SKA_SLOT_MAX
 );

2266 i‡–
ZG_CHECK_SECURITY_MODE
 =
ZG_SECURITY_SE_STANDARD
 )

2269 
Tru°CíãrLökKey
.
key
 = 
zgPªC⁄figTCLökKey
;

2270 
Tru°CíãrLökKey
.
txFrmC¡r
 = 0;

2271 
Tru°CíãrLökKey
.
rxFrmC¡r
 = 0;

2272 #i‡
deföed
 ( 
NV_RESTORE
 )

2273 i‡–
oßl_nv_ôem_öô
–
ZCD_NV_SECURE_TCLINKKEY_TXFRAME
, (
uöt32
), &(
Tru°CíãrLökKey
.
txFrmC¡r
ËË=
ZSUCCESS
 )

2275 
oßl_nv_ªad
–
ZCD_NV_SECURE_TCLINKKEY_TXFRAME
, 0, (
uöt32
), &(
Tru°CíãrLökKey
.
txFrmC¡r
) );

2277 i‡–
oßl_nv_ôem_öô
–
ZCD_NV_SECURE_TCLINKKEY_RXFRAME
, (
uöt32
), &(
Tru°CíãrLökKey
.
rxFrmC¡r
ËË=
ZSUCCESS
 )

2279 
oßl_nv_ªad
–
ZCD_NV_SECURE_TCLINKKEY_RXFRAME
, 0, (
uöt32
), &(
Tru°CíãrLökKey
.
rxFrmC¡r
) );

2282 
APSME_TCLökKeySëup
–0x0000, &
Tru°CíãrLökKey
 );

2285 i‡–
ZG_SECURE_ENABLED
 )

2287 i‡––
ZG_BUILD_COORDINATOR_TYPE
 ) && ( 
ZG_DEVICE_COORDINATOR_TYPE
 ) )

2290 
ZDSecMgrPîmôJoöögE«bÀd
 = 
TRUE
;

2291 
ZDSecMgrPîmôJoöögTimed
 = 
FALSE
;

2296 
ZDSecMgrC⁄fig
();

2308 
ZDSecMgrC⁄fig
( )

2310 i‡–
ZG_SECURE_ENABLED
 )

2312 
SSP_Inô
();

2314 i‡–(
ZG_CHECK_SECURITY_MODE
 =
ZG_SECURITY_PRO_HIGH
)

2315 || (
ZG_CHECK_SECURITY_MODE
 =
ZG_SECURITY_SE_STANDARD
) )

2317 i‡––
ZG_BUILD_COORDINATOR_TYPE
 ) && ( 
ZG_DEVICE_COORDINATOR_TYPE
 ) )

2320 
APSME_SecurôyCM_CD
();

2322 i‡–
ZSTACK_ROUTER_BUILD
 )

2325 
APSME_SecurôyCM_RD
();

2330 
APSME_SecurôyCM_ED
();

2335 i‡––
ZG_BUILD_COORDINATOR_TYPE
 ) && ( 
ZG_DEVICE_COORDINATOR_TYPE
 ) )

2338 
APSME_SecurôyRM_CD
();

2340 i‡–
ZSTACK_ROUTER_BUILD
 )

2343 
APSME_SecurôyRM_RD
();

2348 
APSME_SecurôyRM_ED
();

2355 
APSME_SecurôyNM
();

2370 
uöt8
 
ZDSecMgrPîmôJoöög
–uöt8 
duøti⁄
 )

2372 
uöt8
 
ac˚±
;

2375 
ZDSecMgrPîmôJoöögTimed
 = 
FALSE
;

2377 i‡–
duøti⁄
 > 0 )

2379 
ZDSecMgrPîmôJoöögE«bÀd
 = 
TRUE
;

2381 i‡–
duøti⁄
 != 0xFF )

2383 
ZDSecMgrPîmôJoöögTimed
 = 
TRUE
;

2388 
ZDSecMgrPîmôJoöögE«bÀd
 = 
FALSE
;

2391 
ac˚±
 = 
TRUE
;

2393  
ac˚±
;

2405 
ZDSecMgrPîmôJoöögTimeout
( )

2407 i‡–
ZDSecMgrPîmôJoöögTimed
 =
TRUE
 )

2409 
ZDSecMgrPîmôJoöögE«bÀd
 = 
FALSE
;

2410 
ZDSecMgrPîmôJoöögTimed
 = 
FALSE
;

2424 
uöt8
 
ZDSecMgrNewDevi˚Evít
( )

2426 
uöt8
 
found
;

2427 
ZDSecMgrDevi˚_t
 
devi˚
;

2428 
AddrMgrE¡ry_t
 
addrE¡ry
;

2429 
assocüãd_devi˚s_t
* 
assoc
;

2430 
ZSètus_t
 
°©us
;

2433 
found
 = 
FALSE
;

2436 
assoc
 = 
AssocM©chDevi˚Sètus
–
DEV_SEC_INIT_STATUS
 );

2438 i‡–
assoc
 !
NULL
 )

2441 
found
 = 
TRUE
;

2444 i‡–
zgPªC⁄figKeys
 =
TRUE
 )

2447 
ZDSecMgrAssocDevi˚Auth
–
assoc
 );

2451 
addrE¡ry
.
u£r
 = 
ADDRMGR_USER_DEFAULT
;

2452 
addrE¡ry
.
ödex
 = 
assoc
->
addrIdx
;

2453 
AddrMgrE¡ryGë
–&
addrE¡ry
 );

2455 
devi˚
.
nwkAddr
 = 
assoc
->
sh‹tAddr
;

2456 
devi˚
.
extAddr
 = 
addrE¡ry
.extAddr;

2457 
devi˚
.
∑ª¡Addr
 = 
NLME_GëSh‹tAddr
();

2458 
devi˚
.
£cuª
 = 
FALSE
;

2459 
devi˚
.
devSètus
 = 
assoc
->devStatus;

2462 
°©us
 = 
ZDSecMgrDevi˚New
–&
devi˚
 );

2464 i‡–
°©us
 =
ZSuc˚ss
 )

2466 
assoc
->
devSètus
 &~
DEV_SEC_INIT_STATUS
;

2468 i‡–
°©us
 =
ZNwkUnknownDevi˚
 )

2470 
AssocRemove
–
addrE¡ry
.
extAddr
 );

2474  
found
;

2486 
ZDSecMgrEvít
( )

2488 
uöt8
 
a˘i⁄
;

2489 
uöt8
 
ª°¨t
;

2490 
uöt16
 
ödex
;

2491 
AddrMgrE¡ry_t
 
íåy
;

2492 
ZDSecMgrDevi˚_t
 
devi˚
;

2496 i‡–
ZDSecMgrCålD©a
 !
NULL
 )

2498 
a˘i⁄
 = 
FALSE
;

2499 
ª°¨t
 = 
FALSE
;

2502  
ödex
 = 0; index < 
ZDSECMGR_ENTRY_MAX
; index++ )

2504 i‡–
ZDSecMgrCålD©a
[
ödex
].
°©e
 !
ZDSECMGR_CTRL_NONE
 )

2506 i‡–
ZDSecMgrCålD©a
[
ödex
].
˙å
 != 0 )

2508 
ZDSecMgrCålD©a
[
ödex
].
˙å
--;

2511 i‡––
a˘i⁄
 =
FALSE
 ) && ( 
ZDSecMgrCålD©a
[
ödex
].
˙å
 == 0 ) )

2513 
a˘i⁄
 = 
TRUE
;

2516 
devi˚
.
∑ª¡Addr
 = 
ZDSecMgrCålD©a
[
ödex
].parentAddr;

2517 
devi˚
.
£cuª
 = 
ZDSecMgrCålD©a
[
ödex
].secure;

2518 
devi˚
.
˘æ
 = &
ZDSecMgrCålD©a
[
ödex
];

2521 
íåy
.
u£r
 = 
ADDRMGR_USER_SECURITY
;

2522 
íåy
.
ödex
 = 
ZDSecMgrCålD©a
[ödex].íåy->
ami
;

2525 
AddrMgrE¡ryGë
–&
íåy
 );

2528 
devi˚
.
nwkAddr
 = 
íåy
.nwkAddr;

2529 
devi˚
.
extAddr
 = 
íåy
.extAddr;

2532 
ZDSecMgrDevi˚CålH™dÀr
–&
devi˚
 );

2536 
ª°¨t
 = 
TRUE
;

2542 i‡–
ª°¨t
 =
TRUE
 )

2544 
oßl_°¨t_timîEx
(
ZDAµTaskID
, 
ZDO_SECMGR_EVENT
, 100 );

2558 
ZDSecMgrE°ablishKeyCfm
–
ZDO_E°ablishKeyCfm_t
* 
cfm
 )

2561 i‡––
ZG_BUILD_COORDINATOR_TYPE
 ) && ( 
ZG_DEVICE_COORDINATOR_TYPE
 ) )

2564 
ZDSecMgrDevi˚CålUpd©e
–
cfm
->
∑πExtAddr
, 
ZDSECMGR_CTRL_SKKE_DONE
 );

2581 
uöt8
 
ZDSecMgrTCExtAddrCheck
–uöt8* 
extAddr
 );

2582 
uöt8
 
ZDSecMgrTCExtAddrCheck
–uöt8* 
extAddr
 )

2584 
uöt8
 
m©ch
;

2585 
uöt8
 
lookup
[
Z_EXTADDR_LEN
];

2587 
m©ch
 = 
FALSE
;

2589 i‡–
AddrMgrExtAddrLookup
–
APSME_TRUSTCENTER_NWKADDR
, 
lookup
 ) )

2591 
m©ch
 = 
AddrMgrExtAddrEquÆ
–
lookup
, 
extAddr
 );

2594  
m©ch
;

2597 
ZDSecMgrTCD©aLﬂd
–
uöt8
* 
extAddr
 );

2598 
ZDSecMgrTCD©aLﬂd
–
uöt8
* 
extAddr
 )

2600 
uöt16
 
ami
;

2601 
uöt8
* 
key
;

2603 i‡–!
ZDSecMgrTCD©aLﬂded
 )

2605 i‡–
ZDSecMgrAddrSt‹e
–
APSME_TRUSTCENTER_NWKADDR
, 
extAddr
, &
ami
 ) =
ZSuc˚ss
 )

2608 i‡–
zgPªC⁄figKeys
 =
TRUE
 )

2610 i‡–
ZDSecMgrMa°îKeyLookup
–
ami
, &
key
 ) !
ZSuc˚ss
 )

2612 
ZDSecMgrMa°îKeySt‹e
–
ami
, 
ZDSecMgrTCMa°îKey
 );

2617 
ZDSecMgrTCD©aLﬂded
 = 
TRUE
;

2630 
ZDSecMgrE°ablishKeyInd
–
ZDO_E°ablishKeyInd_t
* 
öd
 )

2632 
ZDSecMgrDevi˚_t
 
devi˚
;

2633 
APSME_E°ablishKeyR•_t
 
r•
;

2637 
ZDSecMgrTCD©aLﬂd
–
öd
->
öôExtAddr
 );

2639 i‡–
ZDSecMgrTCExtAddrCheck
–
öd
->
öôExtAddr
 ) )

2648 
devi˚
.
nwkAddr
 = 
APSME_TRUSTCENTER_NWKADDR
;

2649 
devi˚
.
∑ª¡Addr
 = 
öd
->
§cAddr
;

2654 
devi˚
.
nwkAddr
 = 
öd
->
§cAddr
;

2655 
devi˚
.
∑ª¡Addr
 = 
INVALID_NODE_ADDR
;

2658 
devi˚
.
extAddr
 = 
öd
->
öôExtAddr
;

2660 
devi˚
.
£cuª
 = 
öd
->
nwkSecuª
;

2663 i‡–
ZDSecMgrDevi˚VÆid©eSKKE
–&
devi˚
 ) =
ZSuc˚ss
 )

2665 
r•
.
ac˚±
 = 
TRUE
;

2669 
r•
.
ac˚±
 = 
FALSE
;

2672 
r•
.
d°Addr
 = 
öd
->
§cAddr
;

2673 
r•
.
öôExtAddr
 = &
öd
->initExtAddr[0];

2675 
r•
.
≠sSecuª
 = 
öd
->apsSecure;

2676 
r•
.
nwkSecuª
 = 
öd
->nwkSecure;

2678 
APSME_E°ablishKeyR•
–&
r•
 );

2682 
ZDSecMgrE°ablishKeyInd
–
ZDO_E°ablishKeyInd_t
* 
öd
 )

2684 
ZDSecMgrDevi˚_t
 
devi˚
;

2685 
APSME_E°ablishKeyR•_t
 
r•
;

2688 
devi˚
.
extAddr
 = 
öd
->
öôExtAddr
;

2689 
devi˚
.
£cuª
 = 
öd
->secure;

2691 i‡–
öd
->
£cuª
 =
FALSE
 )

2694 
devi˚
.
nwkAddr
 = 
APSME_TRUSTCENTER_NWKADDR
;

2695 
devi˚
.
∑ª¡Addr
 = 
öd
->
§cAddr
;

2700 
devi˚
.
nwkAddr
 = 
öd
->
§cAddr
;

2701 
devi˚
.
∑ª¡Addr
 = 
INVALID_NODE_ADDR
;

2704 
r•
.
d°Addr
 = 
öd
->
§cAddr
;

2705 
r•
.
öôExtAddr
 = &
öd
->initExtAddr[0];

2706 
r•
.
£cuª
 = 
öd
->secure;

2709 i‡–
ZDSecMgrDevi˚VÆid©eSKKE
–&
devi˚
 ) =
ZSuc˚ss
 )

2711 
r•
.
ac˚±
 = 
TRUE
;

2715 
r•
.
ac˚±
 = 
FALSE
;

2718 
APSME_E°ablishKeyR•
–&
r•
 );

2731 
ZDSecMgrTøn•‹tKeyInd
–
ZDO_Tøn•‹tKeyInd_t
* 
öd
 )

2733 
uöt8
 
ödex
;

2736 
ZDSecMgrTCD©aLﬂd
–
öd
->
§cExtAddr
 );

2738 i‡–
öd
->
keyTy≥
 =
KEY_TYPE_TC_MASTER
 )

2740 i‡–
ZG_CHECK_SECURITY_MODE
 =
ZG_SECURITY_PRO_HIGH
 )

2743 i‡–
zgPªC⁄figKeys
 !
TRUE
 )

2746 
ZDSecMgrMa°îKeyLﬂd
–
öd
->
§cExtAddr
, ind->
key
 );

2754 i‡––
öd
->
keyTy≥
 =
KEY_TYPE_NWK
 ) ||

2755 –
öd
->
keyTy≥
 == 6 ) ||

2756 –
öd
->
keyTy≥
 =
KEY_TYPE_NWK_HIGH
 ) )

2759  
ödex
 = 0;

2760 –(
ödex
 < 
SEC_KEY_LEN
Ë&& (
öd
->
key
[index] == 0) );

2761 
ödex
++ );

2763 i‡–
ödex
 =
SEC_KEY_LEN
 )

2766 i‡–!
_NIB
.
nwkKeyLﬂded
 )

2768 
SSP_Upd©eNwkKey
–(
byã
*)
zgPªC⁄figKey
, 0 );

2769 
SSP_SwôchNwkKey
( 0 );

2774 
SSP_Upd©eNwkKey
–
öd
->
key
, ind->
keySeqNum
 );

2775 i‡–!
_NIB
.
nwkKeyLﬂded
 )

2777 
SSP_SwôchNwkKey
–
öd
->
keySeqNum
 );

2782 
ZDSecMgrAuthNwkKey
();

2784 i‡–
öd
->
keyTy≥
 =
KEY_TYPE_TC_LINK
 )

2786 i‡–
ZG_CHECK_SECURITY_MODE
 =
ZG_SECURITY_PRO_HIGH
 )

2791 i‡–
öd
->
keyTy≥
 =
KEY_TYPE_APP_MASTER
 )

2793 i‡–
ZG_CHECK_SECURITY_MODE
 =
ZG_SECURITY_PRO_HIGH
 )

2795 
uöt16
 
ami
;

2796 
AddrMgrE¡ry_t
 
íåy
;

2797 
ZDSecMgrE¡ry_t
* 
íåyZD
;

2799 
ZDSecMgrExtAddrLookup
–
öd
->
§cExtAddr
, &
ami
 );

2801 i‡–
öd
->
öôüt‹
 =
TRUE
 )

2804 
íåy
.
u£r
 = 
ADDRMGR_USER_SECURITY
;

2805 
íåy
.
ödex
 = 
ami
;

2806 
AddrMgrE¡ryGë
–&
íåy
 );

2808 i‡–
íåy
.
nwkAddr
 !
INVALID_NODE_ADDR
 )

2810 
APSME_E°ablishKeyReq_t
 
ªq
;

2811 
ZDSecMgrMa°îKeyLﬂd
–
öd
->
§cExtAddr
, ind->
key
 );

2813 
ZDSecMgrE¡ryLookupAMI
–
ami
, &
íåyZD
 );

2815 i‡–
íåyZD
 =
NULL
 )

2818 i‡–
ZDSecMgrE¡ryNew
–&
íåyZD
 ) =
ZSuc˚ss
 )

2821 
íåyZD
->
ami
 =ámi;

2825 
ªq
.
ª•ExtAddr
 = 
öd
->
§cExtAddr
;

2826 
ªq
.
mëhod
 = 
APSME_SKKE_METHOD
;

2827 
ªq
.
d°Addr
 = 
íåy
.
nwkAddr
;

2829 
ªq
.
≠sSecuª
 = 
FALSE
;

2830 
ªq
.
nwkSecuª
 = 
TRUE
;

2831 
APSME_E°ablishKeyReq
–&
ªq
 );

2836 i‡–
ami
 =
INVALID_NODE_ADDR
 )

2839 
ZDSecMgrAddrSt‹e
–
INVALID_NODE_ADDR
, 
öd
->
§cExtAddr
, &
ami
 );

2842 
ZDSecMgrMa°îKeyLﬂd
–
öd
->
§cExtAddr
, ind->
key
 );

2851 i‡–
öd
->
keyTy≥
 =
KEY_TYPE_APP_LINK
 )

2853 i‡–
ZG_CHECK_SECURITY_MODE
 =
ZG_SECURITY_PRO_HIGH
 )

2855 
uöt16
 
ami
;

2856 
ZDSecMgrE¡ry_t
* 
íåy
;

2859 i‡–
ZDSecMgrExtAddrLookup
–
öd
->
§cExtAddr
, &
ami
 ) !
ZSuc˚ss
 )

2862 
ZDSecMgrAddrSt‹e
–
INVALID_NODE_ADDR
, 
öd
->
§cExtAddr
, &
ami
 );

2863 
ZDP_NwkAddrReq
–
öd
->
§cExtAddr
, 
ZDP_ADDR_REQTYPE_SINGLE
, 0, 0 );

2866 
ZDSecMgrE¡ryLookupAMI
–
ami
, &
íåy
 );

2868 i‡–
íåy
 =
NULL
 )

2871 i‡–
ZDSecMgrE¡ryNew
–&
íåy
 ) =
ZSuc˚ss
 )

2874 
íåy
->
ami
 =ámi;

2878 
ZDSecMgrLökKeySë
–
öd
->
§cExtAddr
, ind->
key
 );

2892 
ZDSecMgrUpd©eDevi˚Ind
–
ZDO_Upd©eDevi˚Ind_t
* 
öd
 )

2894 
ZDSecMgrDevi˚_t
 
devi˚
;

2897 
devi˚
.
nwkAddr
 = 
öd
->
devAddr
;

2898 
devi˚
.
extAddr
 = 
öd
->
devExtAddr
;

2899 
devi˚
.
∑ª¡Addr
 = 
öd
->
§cAddr
;

2914 
ZDSecMgrDevi˚Joö
–&
devi˚
 );

2927 
ZDSecMgrRemoveDevi˚Ind
–
ZDO_RemoveDevi˚Ind_t
* 
öd
 )

2929 
ZDSecMgrDevi˚_t
 
devi˚
;

2933 i‡–
öd
->
§cAddr
 =
APSME_TRUSTCENTER_NWKADDR
 )

2936 i‡–
APSME_LookupNwkAddr
–
öd
->
chûdExtAddr
, &
devi˚
.
nwkAddr
 ) =
TRUE
 )

2938 
devi˚
.
∑ª¡Addr
 = 
NLME_GëSh‹tAddr
();

2939 
devi˚
.
extAddr
 = 
öd
->
chûdExtAddr
;

2942 
ZDSecMgrDevi˚Remove
–&
devi˚
 );

2956 
ZDSecMgrReque°KeyInd
–
ZDO_Reque°KeyInd_t
* 
öd
 )

2958 i‡–
öd
->
keyTy≥
 =
KEY_TYPE_NWK
 )

2961 i‡–
öd
->
keyTy≥
 =
KEY_TYPE_APP_MASTER
 )

2963 
ZDSecMgrAµKeyReq
–
öd
 );

2965 i‡–
öd
->
keyTy≥
 =
KEY_TYPE_TC_LINK
 )

2980 
ZDSecMgrSwôchKeyInd
–
ZDO_SwôchKeyInd_t
* 
öd
 )

2982 
SSP_SwôchNwkKey
–
öd
->
keySeqNum
 );

2985 
ZDAµ_NVUpd©e
();

2997 
ZDSecMgrAuthítiˇãInd
–
ZDO_AuthítiˇãInd_t
* 
öd
 )

2999 
APSME_AuthítiˇãReq_t
 
ªq
;

3000 
AddrMgrE¡ry_t
 
íåy
;

3010 
íåy
.
u£r
 = 
ADDRMGR_USER_SECURITY
;

3011 
íåy
.
nwkAddr
 = 
öd
->
≠s
.
öôNwkAddr
;

3012 
AddrMgrExtAddrSë
–
íåy
.
extAddr
, 
öd
->
≠s
.
öôExtAddr
 );

3014 i‡–
AddrMgrE¡ryUpd©e
–&
íåy
 ) =
TRUE
 )

3017 
ªq
.
nwkAddr
 = 
öd
->
≠s
.
öôNwkAddr
;

3018 
ªq
.
extAddr
 = 
öd
->
≠s
.
öôExtAddr
;

3019 
ªq
.
a˘i⁄
 = 
APSME_EA_ACCEPT
;

3020 
ªq
.
chÆÀnge
 = 
öd
->
≠s
.challenge;

3023 
APSME_AuthítiˇãReq
–&
ªq
 );

3036 
ZDSecMgrAuthítiˇãCfm
–
ZDO_AuthítiˇãCfm_t
* 
cfm
 )

3038 i‡–
cfm
->
≠s
.
°©us
 =
ZSuc˚ss
 )

3040 i‡––
cfm
->
≠s
.
öôüt‹
 =
TRUE
 ) && ( 
devSèã
 =
DEV_END_DEVICE_UNAUTH
 ) )

3043 
oßl_£t_evít
 ( 
ZDAµTaskID
, 
ZDO_DEVICE_AUTH
 );

3048 #i‡–
ZG_BUILD_COORDINATOR_TYPE
 )

3059 
ZSètus_t
 
ZDSecMgrUpd©eNwkKey
–
uöt8
* 
key
, uöt8 
keySeqNum
, 
uöt16
 
d°Addr
 )

3061 
ZSètus_t
 
°©us
;

3062 
APSME_Tøn•‹tKeyReq_t
 
ªq
;

3065 i‡–
ZG_CHECK_SECURITY_MODE
 =
ZG_SECURITY_PRO_HIGH
 )

3066 
ªq
.
keyTy≥
 = 
KEY_TYPE_NWK_HIGH
;

3068 
ªq
.
keyTy≥
 = 
KEY_TYPE_NWK
;

3070 
ªq
.
d°Addr
 = dstAddr;

3071 
ªq
.
keySeqNum
 = keySeqNum;

3072 
ªq
.
key
 = key;

3073 
ªq
.
extAddr
 = 
NULL
;

3074 
ªq
.
nwkSecuª
 = 
TRUE
;

3075 
ªq
.
≠sSecuª
 = 
TRUE
;

3076 
ªq
.
tu¬ñ
 = 
NULL
;

3078 i‡–
ZG_CHECK_SECURITY_MODE
 =
ZG_SECURITY_PRO_HIGH
 )

3080 
ZDSecMgrE¡ry_t
* 
íåy
;

3081 
uöt16
 
ödex
;

3082 
AddrMgrE¡ry_t
 
addrE¡ry
;

3084 
addrE¡ry
.
u£r
 = 
ADDRMGR_USER_SECURITY
;

3086 
°©us
 = 
ZFaûuª
;

3089 i‡–
ZDSecMgrE¡rõs
 !
NULL
 )

3092  
ödex
 = 0; index < 
ZDSECMGR_ENTRY_MAX
 ; index++ )

3094 i‡–
ZDSecMgrE¡rõs
[
ödex
].
ami
 !
INVALID_NODE_ADDR
 )

3097 
íåy
 = &
ZDSecMgrE¡rõs
[
ödex
];

3100 
addrE¡ry
.
ödex
 = 
íåy
->
ami
;

3101 i‡–
AddrMgrE¡ryGë
–&
addrE¡ry
 ) =
TRUE
 )

3103 
ªq
.
d°Addr
 = 
addrE¡ry
.
nwkAddr
;

3104 
ªq
.
extAddr
 = 
addrE¡ry
.extAddr;

3105 
°©us
 = 
APSME_Tøn•‹tKeyReq
–&
ªq
 );

3113 
°©us
 = 
APSME_Tøn•‹tKeyReq
–&
ªq
 );

3116 
SSP_Upd©eNwkKey
–
key
, 
keySeqNum
 );

3119 
ZDAµ_NVUpd©e
();

3121  
°©us
;

3125 #i‡–
ZG_BUILD_COORDINATOR_TYPE
 )

3135 
ZSètus_t
 
ZDSecMgrSwôchNwkKey
–
uöt8
 
keySeqNum
, 
uöt16
 
d°Addr
 )

3137 
ZSètus_t
 
°©us
;

3138 
APSME_SwôchKeyReq_t
 
ªq
;

3141 
ªq
.
d°Addr
 = dstAddr;

3142 
ªq
.
keySeqNum
 = keySeqNum;

3144 i‡–
ZG_CHECK_SECURITY_MODE
 =
ZG_SECURITY_PRO_HIGH
 )

3146 
ZDSecMgrE¡ry_t
* 
íåy
;

3147 
uöt16
 
ödex
;

3148 
AddrMgrE¡ry_t
 
addrE¡ry
;

3150 
addrE¡ry
.
u£r
 = 
ADDRMGR_USER_SECURITY
;

3152 
°©us
 = 
ZFaûuª
;

3155 i‡–
ZDSecMgrE¡rõs
 !
NULL
 )

3158  
ödex
 = 0; index < 
ZDSECMGR_ENTRY_MAX
 ; index++ )

3160 i‡–
ZDSecMgrE¡rõs
[
ödex
].
ami
 !
INVALID_NODE_ADDR
 )

3163 
íåy
 = &
ZDSecMgrE¡rõs
[
ödex
];

3166 
addrE¡ry
.
ödex
 = 
íåy
->
ami
;

3168 i‡–
AddrMgrE¡ryGë
–&
addrE¡ry
 ) =
TRUE
 )

3170 
ªq
.
d°Addr
 = 
addrE¡ry
.
nwkAddr
;

3171 
°©us
 = 
APSME_SwôchKeyReq
–&
ªq
 );

3179 
°©us
 = 
APSME_SwôchKeyReq
–&
ªq
 );

3182 
SSP_SwôchNwkKey
–
keySeqNum
 );

3185 
ZDAµ_NVUpd©e
();

3187  
°©us
;

3191 #i‡–
ZG_BUILD_JOINING_TYPE
 )

3201 
ZSètus_t
 
ZDSecMgrReque°AµKey
–
uöt16
 
∑πNwkAddr
 )

3203 
ZSètus_t
 
°©us
;

3204 
APSME_Reque°KeyReq_t
 
ªq
;

3205 
uöt8
 
∑πExtAddr
[
Z_EXTADDR_LEN
];

3208 i‡–
AddrMgrExtAddrLookup
–
∑πNwkAddr
, 
∑πExtAddr
 ) )

3210 
ªq
.
d°Addr
 = 0;

3211 
ªq
.
keyTy≥
 = 
KEY_TYPE_APP_MASTER
;

3212 
ªq
.
∑πExtAddr
 =ÖartExtAddr;

3213 
°©us
 = 
APSME_Reque°KeyReq
–&
ªq
 );

3217 
°©us
 = 
ZFaûuª
;

3220  
°©us
;

3224 #i‡–
ZG_BUILD_JOINING_TYPE
 )

3234 
ZSètus_t
 
ZDSecMgrSëupP¨äî
–
uöt16
 
∑πNwkAddr
, 
uöt8
* 
∑πExtAddr
 )

3236 
AddrMgrE¡ry_t
 
íåy
;

3237 
ZSètus_t
 
°©us
;

3239 
°©us
 = 
ZFaûuª
;

3242 
íåy
.
u£r
 = 
ADDRMGR_USER_SECURITY
;

3243 
íåy
.
nwkAddr
 = 
∑πNwkAddr
;

3244 
AddrMgrExtAddrSë
–
íåy
.
extAddr
, 
∑πExtAddr
 );

3246 i‡–
AddrMgrE¡ryUpd©e
–&
íåy
 ) =
TRUE
 )

3248 
°©us
 = 
ZSuc˚ss
;

3251 i‡–
∑πNwkAddr
 =
INVALID_NODE_ADDR
 )

3253 
°©us
 = 
ZDP_NwkAddrReq
–
∑πExtAddr
, 
ZDP_ADDR_REQTYPE_SINGLE
, 0, 0 );

3255 i‡–!
AddrMgrExtAddrVÆid
–
∑πExtAddr
 ) )

3257 
°©us
 = 
ZDP_IEEEAddrReq
–
∑πNwkAddr
, 
ZDP_ADDR_REQTYPE_SINGLE
, 0, 0 );

3261  
°©us
;

3265 #i‡–
ZG_BUILD_COORDINATOR_TYPE
 )

3276 
ZSètus_t
 
ZDSecMgrAµKeyTy≥Së
–
uöt8
 
keyTy≥
 )

3278 i‡–
keyTy≥
 =
KEY_TYPE_APP_LINK
 )

3280 
ZDSecMgrAµKeyTy≥
 = 
KEY_TYPE_APP_LINK
;

3284 
ZDSecMgrAµKeyTy≥
 = 
KEY_TYPE_APP_MASTER
;

3287  
ZSuc˚ss
;

3304 
ZSètus_t
 
ZDSecMgrMa°îKeyGë
–
uöt8
* 
extAddr
, uöt8** 
key
 )

3306 
ZSètus_t
 
°©us
;

3307 
uöt16
 
ami
;

3311 
°©us
 = 
ZDSecMgrExtAddrLookup
–
extAddr
, &
ami
 );

3314 i‡–
°©us
 =
ZSuc˚ss
 )

3316 
ZDSecMgrMa°îKeyLookup
–
ami
, 
key
 );

3320 *
key
 = 
NULL
;

3323  
°©us
;

3336 
ZSètus_t
 
ZDSecMgrLökKeySë
–
uöt8
* 
extAddr
, uöt8* 
key
 )

3338 
ZSètus_t
 
°©us
;

3339 
ZDSecMgrE¡ry_t
* 
íåy
;

3343 
°©us
 = 
ZDSecMgrE¡ryLookupExt
–
extAddr
, &
íåy
 );

3345 i‡–
°©us
 =
ZSuc˚ss
 )

3348 
oßl_mem˝y
–
íåy
->
lkd
.
key
, key, 
SEC_KEY_LEN
 );

3350 
íåy
->
lkd
.
≠smñkd
.
rxFrmC¡r
 = 0;

3351 
íåy
->
lkd
.
≠smñkd
.
txFrmC¡r
 = 0;

3354  
°©us
;

3367 
ZSètus_t
 
ZDSecMgrAuthítiˇti⁄Së
–
uöt8
* 
extAddr
, 
ZDSecMgr_Authítiˇti⁄_O±i⁄
 
›ti⁄
 )

3369 
ZSètus_t
 
°©us
;

3370 
ZDSecMgrE¡ry_t
* 
íåy
;

3374 
°©us
 = 
ZDSecMgrE¡ryLookupExt
–
extAddr
, &
íåy
 );

3376 i‡–
°©us
 =
ZSuc˚ss
 )

3378 
íåy
->
authítiˇãO±i⁄
 = 
›ti⁄
;

3381  
°©us
;

3396 
uöt8
 
ZDSecMgrAuthítiˇti⁄Check
–
uöt16
 
sh‹tAddr
 )

3398 #i‡
deföed
 (
SE_PROFILE
)

3400 
ZDSecMgrE¡ry_t
* 
íåy
;

3401 
uöt8
 
extAddr
[
Z_EXTADDR_LEN
];

3404 i‡–
NLME_GëSh‹tAddr
(Ë!
TCsh‹tAddr
 )

3406  
TRUE
;

3409 i‡–
AddrMgrExtAddrLookup
–
sh‹tAddr
, 
extAddr
 ) )

3412 i‡–
ZDSecMgrE¡ryLookupExt
–
extAddr
, &
íåy
 ) =
ZSuc˚ss
 )

3414 i‡–
íåy
->
authítiˇãO±i⁄
 !
ZDSecMgr_NŸ_Authítiˇãd
 )

3416  
TRUE
;

3420  
FALSE
;

3424  
FALSE
;

3427 ()
sh‹tAddr
;

3430  
TRUE
;

3446 
ZSètus_t
 
ZDSecMgrLökKeyD©aGë
(
uöt8
* 
extAddr
, 
APSME_LökKeyD©a_t
** 
d©a
)

3448 
ZSètus_t
 
°©us
;

3449 
ZDSecMgrE¡ry_t
* 
íåy
;

3453 
°©us
 = 
ZDSecMgrE¡ryLookupExt
–
extAddr
, &
íåy
 );

3455 i‡–
°©us
 =
ZSuc˚ss
 )

3458 (*
d©a
Ë&
íåy
->
lkd
.
≠smñkd
;

3459 (*
d©a
)->
key
 = 
íåy
->
lkd
.key;

3463 *
d©a
 = 
NULL
;

3466  
°©us
;

3478 
uöt8
 
ZDSecMgrKeyFwdToChûd
–
APSME_Tøn•‹tKeyInd_t
* 
öd
 )

3480 
uöt8
 
suc˚ss
;

3482 
suc˚ss
 = 
FALSE
;

3485 i‡–
öd
->
§cAddr
 =
APSME_TRUSTCENTER_NWKADDR
 )

3487 
suc˚ss
 = 
TRUE
;

3490 i‡––
öd
->
keyTy≥
 =
KEY_TYPE_NWK
 ) ||

3491 –
öd
->
keyTy≥
 == 6 ) ||

3492 –
öd
->
keyTy≥
 =
KEY_TYPE_NWK_HIGH
 ) )

3495 
ZDSecMgrAssocDevi˚Auth
–
AssocGëWôhExt
–
öd
->
d°ExtAddr
 ) );

3499  
suc˚ss
;

3515 
ZDSecMgrAddLökKey
–
uöt16
 
sh‹tAddr
, 
uöt8
 *
extAddr
, uöt8 *
key
)

3517 
uöt16
 
ami
;

3518 
ZDSecMgrE¡ry_t
* 
íåy
;

3520 
ZDSecMgrAddrSt‹e
–
sh‹tAddr
, 
extAddr
, &
ami
 );

3522 
ZDSecMgrE¡ryLookupAMI
–
ami
, &
íåy
 );

3525 i‡–
íåy
 =
NULL
 )

3527 i‡–
ZDSecMgrE¡ryNew
–&
íåy
 ) =
ZSuc˚ss
 )

3529 
íåy
->
ami
 =ámi;

3533 
APSME_LökKeySë
–
extAddr
, 
key
 );

3535 #i‡
deföed
 (
SE_PROFILE
)

3537 
ZDSecMgrAuthítiˇti⁄Së
–
extAddr
, 
ZDSecMgr_Authítiˇãd_CBCK
 );

3541 
ZDSecMgrWrôeNV
();

3553 
uöt8
 
ZDSecMgrInôNV
( )

3555 
uöt8
 
°©us
;

3556 
uöt16
 
size
;

3558 
size
 = (
uöt16
)–(
ZDSecMgrE¡ry_t
Ë* 
ZDSECMGR_ENTRY_MAX
 );

3560 
°©us
 = 
oßl_nv_ôem_öô
–
ZCD_NV_APS_LINK_KEY_TABLE
, 
size
, 
NULL
 );

3563 i‡–
°©us
 !
ZSUCCESS
 )

3565 
ZDSecMgrSëDeÁu…NV
();

3568  
°©us
;

3581 
ZDSecMgrSëDeÁu…NV
( )

3583 
nvDevi˚Li°Hdr_t
 
hdr
;

3586 
hdr
.
numRecs
 = 0;

3589 
oßl_nv_wrôe
–
ZCD_NV_APS_LINK_KEY_TABLE
, 0, –
nvDevi˚Li°Hdr_t
 ), &
hdr
 );

3603 
ZDSecMgrWrôeNV
( )

3605 
uöt16
 
i
;

3606 
nvDevi˚Li°Hdr_t
 
hdr
;

3608 
hdr
.
numRecs
 = 0;

3610  
i
 = 0; i < 
ZDSECMGR_ENTRY_MAX
; i++ )

3612 i‡–
ZDSecMgrE¡rõs
[
i
].
ami
 !
INVALID_NODE_ADDR
 )

3615 
oßl_nv_wrôe
–
ZCD_NV_APS_LINK_KEY_TABLE
,

3616 (
uöt16
)(((
nvDevi˚Li°Hdr_t
)Ë+ (
hdr
.
numRecs
 * (
ZDSecMgrE¡ry_t
))),

3617 (
ZDSecMgrE¡ry_t
), &
ZDSecMgrE¡rõs
[
i
] );

3618 
hdr
.
numRecs
++;

3623 
oßl_nv_wrôe
–
ZCD_NV_APS_LINK_KEY_TABLE
, 0, –
nvDevi˚Li°Hdr_t
 ), &
hdr
 );

3635 
ZSètus_t
 
ZDSecMgrRe°‹eFromNV
( )

3637 
uöt8
 
x
 = 0;

3638 
nvDevi˚Li°Hdr_t
 
hdr
;

3641 i‡–
oßl_nv_ªad
–
ZCD_NV_APS_LINK_KEY_TABLE
, 0, (
nvDevi˚Li°Hdr_t
), &
hdr
 ) =
ZSUCCESS
 )

3644  ; 
x
 < 
hdr
.
numRecs
; x++ )

3646 i‡–
oßl_nv_ªad
–
ZCD_NV_APS_LINK_KEY_TABLE
,

3647 (
uöt16
)((
nvDevi˚Li°Hdr_t
Ë+ (
x
 * (
ZDSecMgrE¡ry_t
))),

3648 (
ZDSecMgrE¡ry_t
), &
ZDSecMgrE¡rõs
[
x
] ) =
ZSUCCESS
 )

3650 
ZDSecMgrE¡rõs
[
x
].
lkd
.
≠smñkd
.
txFrmC¡r
 +–
MAX_APS_FRAMECOUNTER_CHANGES
 + 1 );

3655 
ZDSecMgrWrôeNV
();

3657  
ZSuc˚ss
;

3659  
ZFaûuª
;

3673 
ZSètus_t
 
ZDSecMgrAPSRemove
–
uöt16
 
nwkAddr
, 
uöt8
 *
extAddr
, uöt16 
∑ª¡Addr
 )

3675 
ZDSecMgrDevi˚_t
 
devi˚
;

3677 i‡––
nwkAddr
 =
INVALID_NODE_ADDR
 ) ||

3678 –
extAddr
 =
NULL
 ) ||

3679 –
∑ª¡Addr
 =
INVALID_NODE_ADDR
 ) )

3681  ( 
ZFaûuª
 );

3684 
devi˚
.
nwkAddr
 =ÇwkAddr;

3685 
devi˚
.
extAddr
 =ÉxtAddr;

3686 
devi˚
.
∑ª¡Addr
 =ÖarentAddr;

3689 
ZDSecMgrDevi˚Remove
–&
devi˚
 );

3691  ( 
ZSuc˚ss
 );

	@Components/stack/zdo/ZDSecMgr.h

40 #i‚de‡
ZDSECMGR_H


41 
	#ZDSECMGR_H


	)

43 #ifde‡
__˝lu•lus


51 
	~"ZComDef.h
"

52 
	~"ZDAµ.h
"

61 
ZDSecMgr_NŸ_Authítiˇãd
 = 0,

62 
ZDSecMgr_Authítiˇãd_CBCK
,

63 
ZDSecMgr_Authítiˇãd_EA


64 }
	tZDSecMgr_Authítiˇti⁄_O±i⁄
;

78 
ZDSecMgrInô
( );

89 
ZDSecMgrC⁄fig
( );

102 
uöt8
 
ZDSecMgrPîmôJoöög
–uöt8 
duøti⁄
 );

113 
ZDSecMgrPîmôJoöögTimeout
( );

125 
uöt8
 
ZDSecMgrNewDevi˚Evít
( );

136 
ZDSecMgrEvít
( );

147 
ZDSecMgrE°ablishKeyCfm
–
ZDO_E°ablishKeyCfm_t
* 
cfm
 );

158 
ZDSecMgrE°ablishKeyInd
–
ZDO_E°ablishKeyInd_t
* 
öd
 );

169 
ZDSecMgrTøn•‹tKeyInd
–
ZDO_Tøn•‹tKeyInd_t
* 
öd
 );

180 
ZDSecMgrUpd©eDevi˚Ind
–
ZDO_Upd©eDevi˚Ind_t
* 
öd
 );

191 
ZDSecMgrRemoveDevi˚Ind
–
ZDO_RemoveDevi˚Ind_t
* 
öd
 );

202 
ZDSecMgrReque°KeyInd
–
ZDO_Reque°KeyInd_t
* 
öd
 );

213 
ZDSecMgrSwôchKeyInd
–
ZDO_SwôchKeyInd_t
* 
öd
 );

224 
ZDSecMgrAuthítiˇãInd
–
ZDO_AuthítiˇãInd_t
* 
öd
 );

235 
ZDSecMgrAuthítiˇãCfm
–
ZDO_AuthítiˇãCfm_t
* 
cfm
 );

247 
ZSètus_t
 
ZDSecMgrUpd©eNwkKey
–
uöt8
* 
key
, uöt8 
keySeqNum
, 
uöt16
 
d°Addr
 );

258 
ZSètus_t
 
ZDSecMgrSwôchNwkKey
–
uöt8
 
keySeqNum
, 
uöt16
 
d°Addr
 );

269 
ZSètus_t
 
ZDSecMgrReque°AµKey
–
uöt16
 
∑πNwkAddr
 );

281 
ZSètus_t
 
ZDSecMgrSëupP¨äî
–
uöt16
 
∑πNwkAddr
, 
uöt8
* 
∑πExtAddr
 );

293 
ZSètus_t
 
ZDSecMgrAµKeyTy≥Së
–
uöt8
 
keyTy≥
 );

306 
ZDSecMgrAddLökKey
–
uöt16
 
sh‹tAddr
, 
uöt8
 *
extAddr
, uöt8 *
key
);

317 
ZDSecMgrWrôeNV
( );

328 
ZSètus_t
 
ZDSecMgrRe°‹eFromNV
( );

339 
uöt8
 
ZDSecMgrInôNV
( );

350 
ZDSecMgrSëDeÁu…NV
( );

363 
ZSètus_t
 
ZDSecMgrAPSRemove
–
uöt16
 
nwkAddr
, 
uöt8
 *
extAddr
, uöt16 
∑ª¡Addr
 );

377 
uöt8
 
ZDSecMgrAuthítiˇti⁄Check
–
uöt16
 
sh‹tAddr
 );

382 #ifde‡
__˝lu•lus


	@Components/zmac/ZMAC.h

40 #i‚de‡
ZMAC_H


41 
	#ZMAC_H


	)

43 #ifde‡
__˝lu•lus


52 
	~"ZComDef.h
"

53 
	~"zmac_öã∫Æ.h
"

60 #i‚de‡
ZMAC_MAX_BEACON_PAYLOAD_LEN


61 
	#ZMAC_MAX_BEACON_PAYLOAD_LEN
 (7 + 
Z_EXTADDR_LEN
)

	)

68 #i‡
deföed
–
MAC_API_H
 )

69 
	#ZMAC_CHAN_MASK
 ( \

	)

70 
MAC_CHAN_11_MASK
 | \

71 
MAC_CHAN_12_MASK
 | \

72 
MAC_CHAN_13_MASK
 | \

73 
MAC_CHAN_14_MASK
 | \

74 
MAC_CHAN_15_MASK
 | \

75 
MAC_CHAN_16_MASK
 | \

76 
MAC_CHAN_17_MASK
 | \

77 
MAC_CHAN_18_MASK
 | \

78 
MAC_CHAN_19_MASK
 | \

79 
MAC_CHAN_20_MASK
 | \

80 
MAC_CHAN_21_MASK
 | \

81 
MAC_CHAN_22_MASK
 | \

82 
MAC_CHAN_23_MASK
 | \

83 
MAC_CHAN_24_MASK
 | \

84 
MAC_CHAN_25_MASK
 | \

85 
MAC_CHAN_26_MASK
 | \

86 
MAC_CHAN_27_MASK
 | \

87 
MAC_CHAN_28_MASK
 )

89 
	#ZMAC_CHAN_MASK
 0x07FFF800

	)

99 
uöt8
 
Evít
;

100 
uöt8
 
Sètus
;

101 } 
	tZMacEvítHdr_t
;

106 
uöt8
 
KeySour˚
[
ZMAC_KEY_SOURCE_MAX_LEN
];

107 
uöt8
 
SecurôyLevñ
;

108 
uöt8
 
KeyIdMode
;

109 
uöt8
 
KeyIndex
;

110 }
	tZMacSec_t
;

115 
zAddrTy≥_t
 
Co‹dAddªss
;

116 
uöt16
 
Co‹dPANId
;

117 
uöt16
 
Su≥r‰ameS≥c
;

118 
uöt8
 
LogiˇlCh™√l
;

119 
uöt8
 
Ch™√lPage
;

120 
uöt8
 
GTSPîmô
;

121 
uöt8
 
LökQuÆôy
;

122 
uöt32
 
TimeSèmp
;

123 
uöt8
 
SecurôyFaûuª
;

124 
ZMacSec_t
 
Sec
;

125 } 
	tZMacP™Desc_t
;

130 
ZMacEvítHdr_t
 
hdr
;

131 
zAddrTy≥_t
 
SrcAddªss
;

132 
zAddrTy≥_t
 
D°Addªss
;

133 
uöt16
 
PANId
;

134 
uöt8
 
Rós⁄
;

135 
ZMacSec_t
 
Sec
;

136 } 
	tZMacCommSètusInd_t
;

142 
uöt8
 
LogiˇlCh™√l
;

143 
uöt8
 
Ch™√lPage
;

144 
uöt8
 
TøckBóc⁄
;

146 }
	tZMacSyncReq_t
;

153 
zAddrTy≥_t
 
D°Addr
;

154 
uöt16
 
D°PANId
;

155 
uöt8
 
SrcAddrMode
;

156 
uöt8
 
H™dÀ
;

157 
uöt8
 
TxO±i⁄s
;

158 
uöt8
 
Ch™√l
;

159 
uöt8
 
Powî
;

160 
ZMacSec_t
 
Sec
;

161 
uöt8
 
msduLígth
;

162 
uöt8
 *
msdu
;

163 } 
	tZMacD©aReq_t
;

168 
ZMacEvítHdr_t
 
hdr
;

169 
uöt8
 
msduH™dÀ
;

170 
ZMacD©aReq_t
 *
pD©aReq
;

171 
uöt32
 
Time°amp
;

172 
uöt16
 
Time°amp2
;

173 
uöt8
 
ªåõs
;

174 
uöt8
 
mpduLökQuÆôy
;

175 
uöt8
 
c‹ªœti⁄
;

176 
öt8
 
rssi
;

177 } 
	tZMacD©aCnf_t
;

185 
uöt8
 
LogiˇlCh™√l
;

186 
uöt8
 
Ch™√lPage
;

187 
zAddrTy≥_t
 
Co‹dAddªss
;

188 
uöt16
 
Co‹dPANId
;

189 
uöt8
 
C≠abûôyInf‹m©i⁄
;

190 
ZMacSec_t
 
Sec
;

191 } 
	tZMacAssocüãReq_t
;

196 
ZL⁄gAddr_t
 
Devi˚Addªss
;

197 
uöt16
 
AssocSh‹tAddªss
;

198 
uöt8
 
Sètus
;

199 
ZMacSec_t
 
Sec
;

200 } 
	tZMacAssocüãR•_t
;

205 
ZMacEvítHdr_t
 
hdr
;

206 
ZL⁄gAddr_t
 
Devi˚Addªss
;

207 
uöt8
 
C≠abûôyInf‹m©i⁄
;

208 
ZMacSec_t
 
Sec
;

209 } 
	tZMacAssocüãInd_t
;

214 
ZMacEvítHdr_t
 
hdr
;

215 
uöt16
 
AssocSh‹tAddªss
;

216 
ZMacSec_t
 
Sec
;

217 } 
	tZMacAssocüãCnf_t
;

222 
zAddrTy≥_t
 
Devi˚Addªss
;

223 
uöt16
 
Devi˚P™Id
;

224 
uöt8
 
DißssocüãRós⁄
;

225 
uöt8
 
TxIndúe˘
;

226 
ZMacSec_t
 
Sec
;

227 } 
	tZMacDißssocüãReq_t
;

232 
ZMacEvítHdr_t
 
hdr
;

233 } 
	tZMacRxE«bÀCnf_t
;

239 
uöt32
 
SˇnCh™√ls
;

240 
uöt8
 
SˇnTy≥
;

241 
uöt8
 
SˇnDuøti⁄
;

242 
uöt8
 
Ch™√lPage
;

243 
uöt8
 
MaxResu…s
;

244 
ZMacSec_t
 
Sec
;

247 
uöt8
 *
pE√rgyDëe˘
;

248 
ZMacP™Desc_t
 *
pP™Des¸ùt‹
;

249 }
Resu…
;

250 } 
	tZMacSˇnReq_t
;

255 
ZMacEvítHdr_t
 
hdr
;

256 
uöt8
 
SˇnTy≥
;

257 
uöt8
 
Ch™√lPage
;

258 
uöt32
 
Unsˇ¬edCh™√ls
;

259 
uöt8
 
Resu…Li°Size
;

262 
uöt8
 *
pE√rgyDëe˘
;

263 
ZMacP™Desc_t
 *
pP™Des¸ùt‹
;

264 }
Resu…
;

265 } 
	tZMacSˇnCnf_t
;

272 
uöt32
 
SèπTime
;

273 
uöt16
 
PANID
;

274 
uöt8
 
LogiˇlCh™√l
;

275 
uöt8
 
Ch™√lPage
;

276 
uöt8
 
Bóc⁄Ordî
;

277 
uöt8
 
Su≥r‰ameOrdî
;

278 
uöt8
 
PANCo‹dö©‹
;

279 
uöt8
 
B©ãryLi„Ext
;

280 
uöt8
 
Co‹dRólignmít
;

281 
ZMacSec_t
 
RólignSec
;

282 
ZMacSec_t
 
Bóc⁄Sec
;

283 } 
	tZMacSèπReq_t
;

288 
ZMacEvítHdr_t
 
hdr
;

289 } 
	tZMacSèπCnf_t
;

295 
zAddrTy≥_t
 
Co‹dAddªss
;

296 
uöt16
 
Co‹dP™Id
;

297 
ZMacSec_t
 
Sec
;

298 } 
	tZMacPﬁlReq_t
;

303 
ZMacEvítHdr_t
 
hdr
;

304 } 
	tZMacPﬁlCnf_t
;

309 
ZMacEvítHdr_t
 
hdr
;

310 
uöt16
 
§cSh‹tAddr
;

311 
uöt16
 
§cP™Id
;

312 } 
	tZMacPﬁlInd_t
;

318 
ZL⁄gAddr_t
 
OΩh™Addªss
;

319 
uöt16
 
Sh‹tAddªss
;

320 
uöt8
 
AssocüãdMembî
;

321 
ZMacSec_t
 
Sec
;

322 } 
	tZMacOΩh™R•_t
;

327 
ZMacEvítHdr_t
 
hdr
;

328 
ZL⁄gAddr_t
 
OΩh™Addªss
;

329 
ZMacSec_t
 
Sec
;

330 } 
	tZMacOΩh™Ind_t
;

332 #i‡
deföed
 (
MT_MAC_FUNC
Ë|| deföed (
MT_MAC_CB_FUNC
)

337 
ZMacEvítHdr_t
 
hdr
;

338 
uöt16
 
PANId
;

339 
uöt8
 
LogiˇlCh™√l
;

340 
uöt8
 
Ch™√lPage
;

341 
ZMacSec_t
 
Sec
;

342 } 
	tZMacSyncLossInd_t
;

347 
ZMacEvítHdr_t
 
hdr
;

348 
zAddrTy≥_t
 
SrcAddr
;

349 
zAddrTy≥_t
 
D°Addr
;

350 
uöt32
 
Time°amp
;

351 
uöt16
 
Time°amp2
;

352 
uöt16
 
SrcPANId
;

353 
uöt16
 
D°PANId
;

354 
uöt8
 
mpduLökQuÆôy
;

355 
uöt8
 
C‹ªœti⁄
;

356 
uöt8
 
Rssi
;

357 
uöt8
 
D¢
;

358 
ZMacSec_t
 
Sec
;

359 
uöt8
 
msduLígth
;

360 
uöt8
 *
msdu
;

361 } 
	tZMacD©aInd_t
;

366 
ZMacEvítHdr_t
 
hdr
;

367 
ZL⁄gAddr_t
 
Devi˚Addªss
;

368 
uöt8
 
DißssocüãRós⁄
;

369 
ZMacSec_t
 
Sec
;

370 } 
	tZMacDißssocüãInd_t
;

375 
ZMacEvítHdr_t
 
hdr
;

376 
zAddrTy≥_t
 
Devi˚Addªss
;

377 
uöt16
 
∑nID
;

378 } 
	tZMacDißssocüãCnf_t
;

383 
ZMacEvítHdr_t
 
hdr
;

384 
uöt8
 
BSN
;

385 
ZMacP™Desc_t
 *
pP™Desc
;

386 
uöt8
 
PídAddrS≥c
;

387 
uöt8
 *
AddrLi°
;

388 
uöt8
 
sduLígth
;

389 
uöt8
 *
sdu
;

390 } 
	tZMacBóc⁄NŸifyInd_t
;

395 
ZMacEvítHdr_t
 
hdr
;

396 
uöt8
 
msduH™dÀ
;

397 } 
	tZMacPurgeCnf_t
;

402 
TX_PWR_MAX
,

403 
TX_PWR_MINUS_1
,

404 
TX_PWR_MINUS_2
,

405 
TX_PWR_MINUS_3
,

406 
TX_PWR_MINUS_4
,

407 
TX_PWR_MINUS_5
,

408 
TX_PWR_MINUS_6
,

409 
TX_PWR_MINUS_7
,

410 
TX_PWR_MINUS_8
,

411 
TX_PWR_MINUS_9
,

412 
TX_PWR_MINUS_10
,

413 
TX_PWR_MINUS_11
,

414 
TX_PWR_MINUS_12
,

415 
TX_PWR_MINUS_13
,

416 
TX_PWR_MINUS_14
,

417 
TX_PWR_MINUS_15


418 } 
	tZMacTønsmôPowî_t
;

422 
byã
 
¥ŸocﬁID
;

423 
byã
 
°ackProfûe
;

424 
byã
 
¥ŸocﬁVîsi⁄
;

425 
byã
 
ª£rved
;

426 
byã
 
rouãrC≠acôy
;

427 
byã
 
devi˚Dïth
;

428 
byã
 
devi˚C≠acôy
;

429 
byã
 
exãndedPANID
[
Z_EXTADDR_LEN
];

430 
byã
 
txOff£t
[3];

431 
byã
 
upd©eId
;

432 } 
	tbóc⁄Paylﬂd_t
;

437 
	#NWK_CMD_ID_LEN
 –
byã
 )

	)

446 
ZMacSètus_t
 
ZMacInô
( );

451 
ZMacSètus_t
 
ZMacD©aReq
–
ZMacD©aReq_t
 *
∑øm
 );

456 
ZMacSètus_t
 
ZMacAssocüãReq
–
ZMacAssocüãReq_t
 *
∑øm
 );

461 
ZMacSètus_t
 
ZMacAssocüãR•
–
ZMacAssocüãR•_t
 *
∑øm
 );

466 
ZMacSètus_t
 
ZMacDißssocüãReq
–
ZMacDißssocüãReq_t
 *
∑øm
 );

472 
byã
 
ZMacUpd©e
( );

477 
ZMacSètus_t
 
ZMacGëReq
–
ZMacAâribuãs_t
 
©å
, 
byã
 *
vÆue
 );

483 
ZMacSètus_t
 
ZMacOΩh™R•
–
ZMacOΩh™R•_t
 *
∑øm
 );

488 
ZMacSètus_t
 
ZMacPﬁlReq
–
ZMacPﬁlReq_t
 *
∑øm
 );

493 
ZMacSètus_t
 
ZMacRe£t
–
byã
 
SëDeÁu…PIB
 );

498 
ZMacSètus_t
 
ZMacSˇnReq
–
ZMacSˇnReq_t
 *
∑øm
 );

503 
ZMacSètus_t
 
ZMacSëReq
–
ZMacAâribuãs_t
 
©å
, 
byã
 *
vÆue
 );

509 
ZMacSètus_t
 
ZMacSèπReq
–
ZMacSèπReq_t
 *
∑øm
 );

515 
ZMacSètus_t
 
ZMacSyncReq
–
ZMacSyncReq_t
 *
∑øm
 );

521 
ZMacSètus_t
 
ZMacCÀ™Req
( );

526 
ZMacSètus_t
 
ZMacPurgeReq
–
byã
 
msduH™dÀ
 );

531 
ZMacSètus_t
 
ZMacSrcM©chE«bÀ
 (
uöt8
 
addrTy≥
, uöt8 
numE¡rõs
);

536 
ZMacSètus_t
 
ZMacSrcM©chAddE¡ry
 (
zAddrTy≥_t
 *
addr
, 
uöt16
 
∑nID
);

541 
ZMacSètus_t
 
ZMacSrcM©chDñëeE¡ry
 (
zAddrTy≥_t
 *
addr
, 
uöt16
 
∑nID
);

546 
ZMacSètus_t
 
ZMacSrcM©chAckAŒPídög
 (
uöt8
 
›ti⁄
);

551 
ZMacSètus_t
 
ZMacSrcM©chCheckAŒPídög
 ();

556 
ZMacPwrOnReq
 ( );

561 
uöt8
 
ZMac_PwrMode
();

566 
ZMacSètus_t
 
ZMacSëTønsmôPowî
–
ZMacTønsmôPowî_t
 
Àvñ
 );

571 
ZMacSídNoD©a
–
uöt16
 
D°Addr
, uöt16 
D°PANId
 );

577 
uöt8
 (*
pZMac_AµCÆlback
)–uöt8 *
msgPå
 );

582 
uöt8
 
ZMacSèãIdÀ
( );

587 #ifde‡
__˝lu•lus


	@Components/zmac/f8w/zmac.c

45 
	~"ZComDef.h
"

46 
	~"OSAL.h
"

47 
	~"ZMAC.h
"

48 
	~"mac_maö.h
"

50 #i‡!
deföed
 
NONWK


51 
	~"ZGlobÆs.h
"

65 
uöt32
 
	g_SˇnCh™√ls
;

67 
uöt8
 
aExãndedAddªss
[];

74 *
	gZMac_SˇnBuf
 = 
NULL
;

98 
uöt8
 
	$ZMacInô
( )

100 
uöt8
 
°©
;

102 
	`MAC_Inô
();

103 
	`MAC_InôDevi˚
();

105 #i‡!
deföed
 
NONWK


106 i‡–
ZG_BUILD_RTR_TYPE
 )

108 
	`MAC_InôCo‹d
();

113 
°©
 = 
	`ZMacRe£t
–
TRUE
 );

116 
	`oßl_öt_dißbÀ
–
INTS_ALL
 );

118  ( 
°©
 );

119 
	}
}

130 
uöt8
 
	$ZMacRe£t
–
boﬁ
 
SëDeÁu…PIB
 )

132 
byã
 
°©
;

133 
byã
 
vÆue
;

135 
°©
 = 
	`MAC_MlmeRe£tReq
–
SëDeÁu…PIB
 );

138 
vÆue
 = 
FALSE
;

139 
	`MAC_MlmeSëReq
–
MAC_ASSOCIATED_PAN_COORD
, &
vÆue
 );

140 
	`MAC_MlmeSëReq
–
MAC_EXTENDED_ADDRESS
, &
aExãndedAddªss
 );

142 i‡(
ZMac_SˇnBuf
)

144 
	`oßl_mem_‰ì
(
ZMac_SˇnBuf
);

145 
ZMac_SˇnBuf
 = 
NULL
;

148  ( 
°©
 );

149 
	}
}

162 
uöt8
 
	$ZMacGëReq
–
uöt8
 
©å
, uöt8 *
vÆue
 )

164 i‡–
©å
 =
ZMacExtAddr
 )

166 
	`oßl_˝yExtAddr
–
vÆue
, &
aExãndedAddªss
 );

167  
ZMacSuc˚ss
;

170  (
ZMacSètus_t
Ë
	`MAC_MlmeGëReq
–
©å
, 
vÆue
 );

171 
	}
}

184 
uöt8
 
	$ZMacSëReq
–
uöt8
 
©å
, 
byã
 *
vÆue
 )

186 i‡–
©å
 =
ZMacExtAddr
 )

188 
	`oßl_˝yExtAddr
–
aExãndedAddªss
, 
vÆue
 );

191  (
ZMacSètus_t
Ë
	`MAC_MlmeSëReq
–
©å
, 
vÆue
 );

192 
	}
}

203 
uöt8
 
	$ZMacAssocüãReq
–
ZMacAssocüãReq_t
 *
pD©a
 )

206 
pD©a
->
Sec
.
SecurôyLevñ
 = 
Ál£
;

208 
	`MAC_MlmeAssocüãReq
 ( (
macMlmeAssocüãReq_t
 *)
pD©a
);

209  ( 
ZMacSuc˚ss
 );

210 
	}
}

221 
uöt8
 
	$ZMacAssocüãR•
–
ZMacAssocüãR•_t
 *
pD©a
 )

224 
pD©a
->
Sec
.
SecurôyLevñ
 = 
Ál£
;

226 
	`MAC_MlmeAssocüãR•
–(
macMlmeAssocüãR•_t
 *Ë
pD©a
 );

227  ( 
ZMacSuc˚ss
 );

228 
	}
}

239 
uöt8
 
	$ZMacDißssocüãReq
–
ZMacDißssocüãReq_t
 *
pD©a
 )

242 
pD©a
->
Sec
.
SecurôyLevñ
 = 
Ál£
;

244 
	`MAC_MlmeDißssocüãReq
–(
macMlmeDißssocüãReq_t
 *)
pD©a
);

245  ( 
ZMacSuc˚ss
 );

246 
	}
}

257 
uöt8
 
	$ZMacOΩh™R•
–
ZMacOΩh™R•_t
 *
pD©a
 )

260 
pD©a
->
Sec
.
SecurôyLevñ
 = 
Ál£
;

262 
	`MAC_MlmeOΩh™R•
–(
macMlmeOΩh™R•_t
 *)
pD©a
);

263  ( 
ZMacSuc˚ss
 );

264 
	}
}

275 
uöt8
 
	$ZMacSˇnReq
–
ZMacSˇnReq_t
 *
pD©a
 )

277 
_SˇnCh™√ls
 = 
pD©a
->
SˇnCh™√ls
;

280 i‡(
ZMac_SˇnBuf
 !
NULL
)

282  
MAC_SCAN_IN_PROGRESS
;

285 i‡(
pD©a
->
SˇnTy≥
 !
ZMAC_ORPHAN_SCAN
)

288 i‡(
pD©a
->
SˇnTy≥
 =
ZMAC_ED_SCAN
)

290 i‡((
ZMac_SˇnBuf
 = 
	`oßl_mem_Æloc
(
ZMAC_ED_SCAN_MAXCHANNELS
)Ë=
NULL
)

292  
MAC_NO_RESOURCES
;

294 
	`oßl_mem£t
(
ZMac_SˇnBuf
, 0, 
ZMAC_ED_SCAN_MAXCHANNELS
);

295 
pD©a
->
Resu…
.
pE√rgyDëe˘
 = ((
uöt8
*)
ZMac_SˇnBuf
Ë+ 
MAC_CHAN_11
;

297 i‡(
pD©a
->
MaxResu…s
 > 0)

299 i‡((
ZMac_SˇnBuf
 = 
pD©a
->
Resu…
.
pP™Des¸ùt‹
 =

300 
	`oßl_mem_Æloc
––
ZMacP™Desc_t
 ) * 
pD©a
->
MaxResu…s
 )Ë=
NULL
)

302  
MAC_NO_RESOURCES
;

308 
pD©a
->
Sec
.
SecurôyLevñ
 = 
Ál£
;

311 
pD©a
->
Ch™√lPage
 = 0x00;

313 
	`MAC_MlmeSˇnReq
 ((
macMlmeSˇnReq_t
 *)
pD©a
);

315  
ZMacSuc˚ss
;

316 
	}
}

329 
uöt8
 
	$ZMacSèπReq
–
ZMacSèπReq_t
 *
pD©a
 )

331 
uöt8
 
°©
;

334 
°©
 = 
åue
;

335 
	`MAC_MlmeSëReq
–
MAC_RX_ON_WHEN_IDLE
, &
°©
 );

338 
pD©a
->
RólignSec
.
SecurôyLevñ
 = 
Ál£
;

339 
pD©a
->
Bóc⁄Sec
.
SecurôyLevñ
 = 
Ál£
;

342 
	`MAC_MlmeSèπReq
((
macMlmeSèπReq_t
 *Ë
pD©a
);

347  
ZMacSuc˚ss
;

348 
	}
}

361 
uöt8
 
	$ZMacSyncReq
–
ZMacSyncReq_t
 *
pD©a
 )

363 
	`MAC_MlmeSyncReq
–(
macMlmeSyncReq_t
 *)
pD©a
);

364  
ZMacSuc˚ss
;

365 
	}
}

378 
uöt8
 
	$ZMacPﬁlReq
–
ZMacPﬁlReq_t
 *
pD©a
 )

381 
pD©a
->
Sec
.
SecurôyLevñ
 = 
Ál£
;

383 
	`MAC_MlmePﬁlReq
 ((
macMlmePﬁlReq_t
 *)
pD©a
);

384  ( 
ZMacSuc˚ss
 );

385 
	}
}

396 
uöt8
 
	$ZMacD©aReq
–
ZMacD©aReq_t
 *
pD©a
 )

398 
macM˝sD©aReq_t
 *
pBuf
;

401 
pBuf
 = 
	`MAC_M˝sD©aAŒoc
(
pD©a
->
msduLígth
, 
MAC_SEC_LEVEL_NONE
, 
MAC_KEY_ID_MODE_NONE
);

403 i‡(
pBuf
)

406 
	`oßl_mem˝y
 (&
pBuf
->
mac
, 
pD©a
,  (
macD©aReq_t
));

409 
pBuf
->
msdu
.
Àn
 = 
pD©a
->
msduLígth
;

410 
	`oßl_mem˝y
 (
pBuf
->
msdu
.
p
, 
pD©a
->msdu,ÖD©a->
msduLígth
);

413 
pBuf
->
£c
.
£curôyLevñ
 = 
Ál£
;

416 
	`MAC_M˝sD©aReq
(
pBuf
);

418  ( 
ZMacSuc˚ss
 );

421  
MAC_NO_RESOURCES
;

422 
	}
}

433 
uöt8
 
	$ZMacPurgeReq
–
byã
 
H™dÀ
 )

435 
	`MAC_M˝sPurgeReq
–
H™dÀ
 );

436  
ZMacSuc˚ss
;

437 
	}
}

450 
ZMacSètus_t
 
	$ZMacSrcM©chE«bÀ
 (
uöt8
 
addrTy≥
, uöt8 
numE¡rõs
)

452  (
	`MAC_SrcM©chE«bÀ
(
addrTy≥
, 
numE¡rõs
));

453 
	}
}

468 
ZMacSètus_t
 
	$ZMacSrcM©chAddE¡ry
 (
zAddrTy≥_t
 *
addr
, 
uöt16
 
∑nID
)

470  (
	`MAC_SrcM©chAddE¡ry
 ((
sAddr_t
*)
addr
, 
∑nID
));

471 
	}
}

486 
ZMacSètus_t
 
	$ZMacSrcM©chDñëeE¡ry
 (
zAddrTy≥_t
 *
addr
, 
uöt16
 
∑nID
)

488  (
	`MAC_SrcM©chDñëeE¡ry
 ((
sAddr_t
*)
addr
, 
∑nID
));

489 
	}
}

505 
ZMacSètus_t
 
	$ZMacSrcM©chAckAŒPídög
 (
uöt8
 
›ti⁄
)

507 
	`MAC_SrcM©chAckAŒPídög
 (
›ti⁄
);

509  
ZMacSuc˚ss
;

510 
	}
}

521 
ZMacSètus_t
 
	$ZMacSrcM©chCheckAŒPídög
 ()

523  (
	`MAC_SrcM©chCheckAŒPídög
 ());

524 
	}
}

539 
	$ZMacPwrOnReq
 ( )

541 
	`MAC_PwrOnReq
();

542 
	}
}

559 
uöt8
 
	$ZMac_PwrMode
()

561  (
	`MAC_PwrMode
());

562 
	}
}

573 
uöt8
 
	$ZMacSëTønsmôPowî
–
ZMacTønsmôPowî_t
 
Àvñ
 )

575  
	`MAC_MlmeSëReq
–
ZMacPhyTønsmôPowî
, &
Àvñ
 );

576 
	}
}

588 
	$ZMacSídNoD©a
 ( 
uöt16
 
D°Addr
, uöt16 
D°PANId
 )

590 
macM˝sD©aReq_t
 *
pBuf
;

593 
pBuf
 = 
	`MAC_M˝sD©aAŒoc
(0, 
MAC_SEC_LEVEL_NONE
, 
MAC_KEY_ID_MODE_NONE
);

595 i‡(
pBuf
)

598 
pBuf
->
mac
.
§cAddrMode
 = 
SADDR_MODE_SHORT
;

601 
pBuf
->
mac
.
d°Addr
.
addr
.
sh‹tAddr
 = 
D°Addr
;

602 
pBuf
->
mac
.
d°Addr
.
addrMode
 = 
SADDR_MODE_SHORT
;

603 
pBuf
->
mac
.
d°P™Id
 = 
D°PANId
;

606 
pBuf
->
mac
.
msduH™dÀ
 = 0;

607 
pBuf
->
mac
.
txO±i⁄s
 = 
ZMAC_TXOPTION_ACK
 | 
ZMAC_TXOPTION_NO_RETRANS
 | 
ZMAC_TXOPTION_NO_CNF
;

610 
pBuf
->
£c
.
£curôyLevñ
 = 
Ál£
;

613 
	`MAC_M˝sD©aReq
(
pBuf
);

616 
	}
}

627 
uöt8
 
	$ZMacSèãIdÀ
( )

629  
	`macSèãIdÀ
();

630 
	}
}

	@Components/zmac/f8w/zmac_cb.c

44 
	~"ZComDef.h
"

45 
	~"OSAL.h
"

46 
	~"ZMAC.h
"

47 
	~"MT_MAC.h
"

48 
	~"hÆ_mcu.h
"

50 #i‡!
deföed
 
NONWK


51 
	~"nwk.h
"

52 
	~"nwk_bufs.h
"

53 
	~"ZGlobÆs.h
"

56 #i‡
deföed
–
MACSIM
 )

57 
	~"mac_sim.h
"

60 
	~"mac_maö.h
"

61 *
ZMac_SˇnBuf
;

67 #i‡!
deföed
 
NONWK


69 c⁄° 
uöt8
 
CODE
 
	gzmacCBSizeTabÀ
 [] = {

71 (
ZMacAssocüãInd_t
),

72 (
ZMacAssocüãCnf_t
),

75 (
macMlmeBóc⁄NŸifyInd_t
),

76 (
ZMacOΩh™Ind_t
),

77 (
ZMacSˇnCnf_t
),

78 (
ZMacSèπCnf_t
),

80 (
ZMacPﬁlCnf_t
),

81 (
ZMacCommSètusInd_t
),

82 (
ZMacD©aCnf_t
),

83 (
macM˝sD©aInd_t
),

86 (
ZMacPﬁlInd_t
)

108 
	$uöt8
 (*
pZMac_AµCÆlback
)–
uöt8
 *
msgPå
 ) = (*)
NULL
;

124 
	$MAC_CbackEvít
(
macCbackEvít_t
 *
pD©a
)

125 #i‚de‡
MT_MAC_CB_FUNC


127 #i‡!
deföed
 
NONWK


128 
uöt8
 
evít
 = 
pD©a
->
hdr
.event;

129 
uöt16
 
tmp
 = 
zmacCBSizeTabÀ
[
evít
];

130 
macCbackEvít_t
 *
msgPå
;

135 i‡(
tmp
 == 0)

141 i‡–
evít
 =
MAC_MCPS_DATA_IND
 )

143 
	`MAC_MlmeGëReq
–
MAC_SHORT_ADDRESS
, &
tmp
 );

144 i‡((
tmp
 =
INVALID_NODE_ADDR
Ë|| (tm∞=
NWK_BROADCAST_SHORTADDR_DEVALL
) ||

145 (
pD©a
->
d©aInd
.
msdu
.
Àn
 == 0))

147 
	`oßl_msg_dóŒoˇã
–(
uöt8
 *)
pD©a
 );

150 
msgPå
 = 
pD©a
;

154 i‡(
evít
 =
MAC_MLME_BEACON_NOTIFY_IND
 )

156 
tmp
 +(
macP™Desc_t
Ë+ 
pD©a
->
bóc⁄NŸifyInd
.
sduLígth
;

158 i‡(
evít
 =
MAC_MLME_SCAN_CNF
)

160 i‡(
pD©a
->
sˇnCnf
.
sˇnTy≥
 =
ZMAC_ED_SCAN
)

162 
tmp
 +
ZMAC_ED_SCAN_MAXCHANNELS
;

166 
tmp
 +–
ZMacP™Desc_t
 ) * 
pD©a
->
sˇnCnf
.
ªsu…Li°Size
;

170 i‡–!(
msgPå
 = (
macCbackEvít_t
 *)
	`oßl_msg_Æloˇã
(
tmp
)) )

173 i‡–
evít
 =
MAC_MCPS_DATA_CNF
 )

175 
hÆI¡Sèã_t
 
ötSèã
;

179 
	`HAL_ENTER_CRITICAL_SECTION
–
ötSèã
 );

182 
	`macMaöRe£rve
–(
uöt8
 *)
pD©a
->
d©aCnf
.
pD©aReq
 );

183 
	`oßl_msg_dóŒoˇã
–(
uöt8
*)
pD©a
->
d©aCnf
.
pD©aReq
 );

184 i‡–!(
msgPå
 = (
macCbackEvít_t
 *)
	`oßl_msg_Æloˇã
(
tmp
)) )

187 
	`HAL_EXIT_CRITICAL_SECTION
–
ötSèã
 );

190 
	`HAL_EXIT_CRITICAL_SECTION
–
ötSèã
 );

191 
pD©a
->
d©aCnf
.
pD©aReq
 = 
NULL
;

199 
	`oßl_mem˝y
(
msgPå
, 
pD©a
, 
zmacCBSizeTabÀ
[
evít
]);

202 i‡–
evít
 =
MAC_MLME_BEACON_NOTIFY_IND
 )

204 
macMlmeBóc⁄NŸifyInd_t
 *
pBóc⁄
 = (macMlmeBóc⁄NŸifyInd_t*)
msgPå
;

206 
	`oßl_mem˝y
(
pBóc⁄
+1,ÖBóc⁄->
pP™Desc
, (
macP™Desc_t
));

207 
pBóc⁄
->
pP™Desc
 = (
macP™Desc_t
 *)(pBeacon+1);

208 
	`oßl_mem˝y
(
pBóc⁄
->
pP™Desc
+1,ÖBóc⁄->
pSdu
,ÖBóc⁄->
sduLígth
);

209 
pBóc⁄
->
pSdu
 = (
uöt8
 *)’Bóc⁄->
pP™Desc
+1);

211 i‡(
evít
 =
MAC_MLME_SCAN_CNF
)

213 
macMlmeSˇnCnf_t
 *
pSˇn
 = (macMlmeSˇnCnf_t*)
msgPå
;

215 i‡(
ZMac_SˇnBuf
 !
NULL
)

217 i‡(
pSˇn
->
sˇnTy≥
 =
ZMAC_ED_SCAN
)

219 
pSˇn
->
ªsu…
.
pE√rgyDëe˘
 = (
uöt8
*) (pScan + 1);

220 
	`oßl_mem˝y
(
pSˇn
->
ªsu…
.
pE√rgyDëe˘
, 
ZMac_SˇnBuf
, 
ZMAC_ED_SCAN_MAXCHANNELS
);

224 
pSˇn
->
ªsu…
.
pP™Des¸ùt‹
 = (
macP™Desc_t
*) (pScan + 1);

225 
	`oßl_mem˝y
(
pSˇn
 + 1, 
ZMac_SˇnBuf
, –
ZMacP™Desc_t
 ) *ÖSˇn->
ªsu…Li°Size
);

228 
	`oßl_mem_‰ì
(
ZMac_SˇnBuf
);

229 
ZMac_SˇnBuf
 = 
NULL
;

233 i‡––
pZMac_AµCÆlback
 =
NULL
 ) || ( 
	`pZMac_AµCÆlback
–(
uöt8
 *)
msgPå
 ) =
FALSE
 ) )

236 
	`oßl_msg_£nd
–
NWK_TaskID
, (
uöt8
 *)
msgPå
 );

239 i‡–
evít
 =
MAC_MCPS_DATA_CNF
 )

246 
	`macMaöRe£rve
–(
uöt8
 *)
pD©a
->
d©aCnf
.
pD©aReq
 );

247 
	`oßl_msg_dóŒoˇã
–(
uöt8
*)
pD©a
->
d©aCnf
.
pD©aReq
 );

250 
	}
}

254 
	gpD©a
->
	ghdr
.
	gevít
)

256 
	gMAC_MLME_ASSOCIATE_IND
:

257 i‡–
_macCÆlbackSub
 & 
CB_ID_NWK_ASSOCIATE_IND
 )

258 
nwk_MTCÆlbackSubNwkAssocüãInd
 ( (
ZMacAssocüãInd_t
 *)
pD©a
 );

261 
	gMAC_MLME_ASSOCIATE_CNF
:

262 i‡–
_macCÆlbackSub
 & 
CB_ID_NWK_ASSOCIATE_CNF
 )

263 
nwk_MTCÆlbackSubNwkAssocüãCnf
 ( (
ZMacAssocüãCnf_t
 *)
pD©a
 );

266 
	gMAC_MLME_DISASSOCIATE_IND
:

267 i‡–
_macCÆlbackSub
 & 
CB_ID_NWK_DISASSOCIATE_IND
 )

268 
nwk_MTCÆlbackSubNwkDißssocüãInd
 ( (
ZMacDißssocüãInd_t
 *)
pD©a
 );

271 
	gMAC_MLME_DISASSOCIATE_CNF
:

272 i‡–
_macCÆlbackSub
 & 
CB_ID_NWK_DISASSOCIATE_CNF
 )

273 
nwk_MTCÆlbackSubNwkDißssocüãCnf
 ( (
ZMacDißssocüãCnf_t
 *)
pD©a
 );

276 
	gMAC_MLME_BEACON_NOTIFY_IND
:

277 i‡–
_macCÆlbackSub
 & 
CB_ID_NWK_BEACON_NOTIFY_IND
 )

278 
nwk_MTCÆlbackSubNwkBóc⁄NŸifyInd
–(
ZMacBóc⁄NŸifyInd_t
 *)
pD©a
 );

281 
	gMAC_MLME_ORPHAN_IND
:

282 i‡–
_macCÆlbackSub
 & 
CB_ID_NWK_ORPHAN_IND
 )

283 
nwk_MTCÆlbackSubNwkOΩh™Ind
–(
ZMacOΩh™Ind_t
 *Ë
pD©a
 );

286 
	gMAC_MLME_SCAN_CNF
:

287 i‡–
_macCÆlbackSub
 & 
CB_ID_NWK_SCAN_CNF
 )

289 
pD©a
->
sˇnCnf
.
ªsu…
.
pE√rgyDëe˘
 = 
ZMac_SˇnBuf
;

290 
nwk_MTCÆlbackSubNwkSˇnCnf
 ( (
ZMacSˇnCnf_t
 *Ë
pD©a
 );

293 i‡(
	gZMac_SˇnBuf
 !
NULL
)

295 
oßl_mem_‰ì
(
ZMac_SˇnBuf
);

296 
	gZMac_SˇnBuf
 = 
NULL
;

300 
	gMAC_MLME_START_CNF
:

301 i‡–
_macCÆlbackSub
 & 
CB_ID_NWK_START_CNF
 )

302 
nwk_MTCÆlbackSubNwkSèπCnf
 ( 
pD©a
->
hdr
.
°©us
 );

305 
	gMAC_MLME_SYNC_LOSS_IND
:

306 i‡–
_macCÆlbackSub
 & 
CB_ID_NWK_SYNC_LOSS_IND
 )

307 
nwk_MTCÆlbackSubNwkSyncLossInd
–(
ZMacSyncLossInd_t
 *Ë
pD©a
 );

310 
	gMAC_MLME_POLL_CNF
:

311 i‡–
_macCÆlbackSub
 & 
CB_ID_NWK_POLL_CNF
 )

312 
nwk_MTCÆlbackSubNwkPﬁlCnf
–
pD©a
->
hdr
.
°©us
 );

315 
	gMAC_MLME_COMM_STATUS_IND
:

316 i‡–
_macCÆlbackSub
 & 
CB_ID_NWK_COMM_STATUS_IND
 )

317 
nwk_MTCÆlbackSubCommSètusInd
 ( (
ZMacCommSètusInd_t
 *Ë
pD©a
 );

320 
	gMAC_MCPS_DATA_CNF
:

322 
macMaöRe£rve
–(
uöt8
 *)
pD©a
->
d©aCnf
.
pD©aReq
 );

324 
oßl_msg_dóŒoˇã
((
uöt8
*)
pD©a
->
d©aCnf
.
pD©aReq
);

326 i‡–
	g_macCÆlbackSub
 & 
	gCB_ID_NWK_DATA_CNF
 )

327 
nwk_MTCÆlbackSubNwkD©aCnf
–(
ZMacD©aCnf_t
 *Ë
pD©a
 );

330 
	gMAC_MCPS_DATA_IND
:

336 
ZMacD©aInd_t
 *
pD©aInd
 = (ZMacD©aInd_à*Ë
pD©a
;

337 
uöt8
 
	gevít
, 
	g°©us
, 
	gÀn
, *
	gmsdu
;

340 
	gevít
 = 
pD©a
->
hdr
.
evít
;

341 
	g°©us
 = 
pD©a
->
hdr
.
°©us
;

342 
	gÀn
 = 
pD©a
->
d©aInd
.
msdu
.
Àn
;

343 
	gmsdu
 = 
pD©a
->
d©aInd
.
msdu
.
p
;

346 
oßl_mem˝y
(&
pD©aInd
->
SrcAddr
, &
pD©a
->
d©aInd
.
mac
, (
ZMacD©aInd_t
Ë- (
ZMacEvítHdr_t
));

349 
	gpD©aInd
->
	gSec
.
	gSecurôyLevñ
 = 
Ál£
;

352 
	gpD©aInd
->
	ghdr
.
	gSètus
 = 
°©us
;

353 
	gpD©aInd
->
	ghdr
.
	gEvít
 = 
evít
;

354 
	gpD©aInd
->
	gmsduLígth
 = 
Àn
;

356 i‡(
	gÀn
)

357 
	gpD©aInd
->
	gmsdu
 = 
msdu
;

359 
	gpD©aInd
->
	gmsdu
 = 
NULL
;

361 i‡–
	g_macCÆlbackSub
 & 
	gCB_ID_NWK_DATA_IND
 )

362 
nwk_MTCÆlbackSubNwkD©aInd
 ( 
pD©aInd
 );

365 
oßl_msg_dóŒoˇã
–(
uöt8
 *Ë
pD©a
 );

369 
	gMAC_MCPS_PURGE_CNF
:

370 i‡–
_macCÆlbackSub
 & 
CB_ID_NWK_PURGE_CNF
 )

371 
nwk_MTCÆlbackSubNwkPurgeCnf
–(
ZMacPurgeCnf_t
 *Ë
pD©a
);

389 
uöt8
 
	$MAC_CbackCheckPídög
()

391 #i‡!
	`deföed
 (
NONWK
)

392 i‡–
ZSTACK_ROUTER_BUILD
 )

394  (
	`nwkDB_Rëu∫Indúe˘HﬁdögC¡
());

403 
	}
}

	@Components/zmac/f8w/zmac_internal.h

40 #i‚de‡
ZMAC_INTERNAL_H


41 
	#ZMAC_INTERNAL_H


	)

43 #ifde‡
__˝lu•lus


52 
	~"mac_≠i.h
"

59 
	#ZMAC_F8W


	)

62 
	#OUTPUT_POWER_0DBM
 0x00

	)

63 
	#OUTPUT_POWER_N1DBM
 0x21

	)

64 
	#OUTPUT_POWER_N3DBM
 0x23

	)

65 
	#OUTPUT_POWER_N5DBM
 0x25

	)

66 
	#OUTPUT_POWER_N7DBM
 0x27

	)

67 
	#OUTPUT_POWER_N10DBM
 0x2A

	)

68 
	#OUTPUT_POWER_N15DBM
 0x2F

	)

69 
	#OUTPUT_POWER_N25DBM
 0x39

	)

74 
ZMacAckWaôDuøti⁄
 = 
MAC_ACK_WAIT_DURATION
,

75 
ZMacAssocüti⁄Pîmô
 = 
MAC_ASSOCIATION_PERMIT
,

76 
ZMacAutoReque°
 = 
MAC_AUTO_REQUEST
,

77 
ZMacB©tLi„Ext
 = 
MAC_BATT_LIFE_EXT
,

78 
ZMacB©tLe·ExtPîiods
 = 
MAC_BATT_LIFE_EXT_PERIODS
,

80 
ZMacBóc⁄MSDU
 = 
MAC_BEACON_PAYLOAD
,

81 
ZMacBóc⁄MSDULígth
 = 
MAC_BEACON_PAYLOAD_LENGTH
,

82 
ZMacBóc⁄Ordî
 = 
MAC_BEACON_ORDER
,

83 
ZMacBóc⁄TxTime
 = 
MAC_BEACON_TX_TIME
,

84 
ZMacBSN
 = 
MAC_BSN
,

86 
ZMacCo‹dExãndedAddªss
 = 
MAC_COORD_EXTENDED_ADDRESS
,

87 
ZMacCo‹dSh‹tAddªss
 = 
MAC_COORD_SHORT_ADDRESS
,

88 
ZMacDSN
 = 
MAC_DSN
,

89 
ZMacGTSPîmô
 = 
MAC_GTS_PERMIT
,

90 
ZMacMaxCSMABackoffs
 = 
MAC_MAX_CSMA_BACKOFFS
,

92 
ZMacMöBE
 = 
MAC_MIN_BE
,

93 
ZMacP™Id
 = 
MAC_PAN_ID
,

94 
ZMacPromiscuousMode
 = 
MAC_PROMISCUOUS_MODE
,

95 
ZMacRxOnIdÀ
 = 
MAC_RX_ON_WHEN_IDLE
,

96 
ZMacSh‹tAddªss
 = 
MAC_SHORT_ADDRESS
,

98 
ZMacSu≥r‰ameOrdî
 = 
MAC_SUPERFRAME_ORDER
,

99 
ZMacTønß˘i⁄Pîsi°í˚Time
 = 
MAC_TRANSACTION_PERSISTENCE_TIME
,

100 
ZMacAssocüãdP™Co‹d
 = 
MAC_ASSOCIATED_PAN_COORD
,

101 
ZMacMaxBE
 = 
MAC_MAX_BE
,

102 
ZMacMaxFømeTŸÆWaôTime
 = 
MAC_MAX_FRAME_TOTAL_WAIT_TIME
,

104 
ZMacMaxFømeRërõs
 = 
MAC_MAX_FRAME_RETRIES
,

105 
ZMacRe•⁄£WaôTime
 = 
MAC_RESPONSE_WAIT_TIME
,

106 
ZMacSyncSymbﬁOff£t
 = 
MAC_SYNC_SYMBOL_OFFSET
,

107 
ZMacTime°ampSuµ‹ãd
 = 
MAC_TIMESTAMP_SUPPORTED
,

108 
ZMacSecurôyE«bÀd
 = 
MAC_SECURITY_ENABLED
,

111 
ZMacPhyTønsmôPowî
 = 
MAC_PHY_TRANSMIT_POWER
,

112 
ZMacCh™√l
 = 
MAC_LOGICAL_CHANNEL
,

113 
ZMacExtAddr
 = 
MAC_EXTENDED_ADDRESS
,

114 
ZMacA…BE
 = 
MAC_ALT_BE
,

117 
ZMacACLDeÁu…SecurôyM©îülLígth
 = 0,

118 
ZMacTxGTSId
 = 1,

119 
ZMacUµîLayîTy≥
 = 2,

120 
ZMacRxGTSId
 = 3,

121 
ZMacSnoozePîmô
 = 4

124 
uöt8
 
	tZMacAâribuãs_t
;

127 
uöt8
 
	tZMacSètus_t
;

130 
	#ZMAC_ED_SCAN
 
MAC_SCAN_ED


	)

131 
	#ZMAC_ACTIVE_SCAN
 
MAC_SCAN_ACTIVE


	)

132 
	#ZMAC_PASSIVE_SCAN
 
MAC_SCAN_PASSIVE


	)

133 
	#ZMAC_ORPHAN_SCAN
 
MAC_SCAN_ORPHAN


	)

136 
	#ZMAC_SUCCESSFUL_ASSOCIATION
 0x00

	)

137 
	#ZMAC_PAN_AT_CAPACITY
 0x01

	)

138 
	#ZMAC_PAN_ACCESS_DENIED
 0x02

	)

141 
	#ZMAC_COORD_INITIATE
 
MAC_DISASSOC_COORD


	)

142 
	#ZMAC_DEVICE_INITIATE
 
MAC_DISASSOC_DEVICE


	)

144 
	#ZMAC_SECURITY_USE
 0x01

	)

145 
	#ZMAC_ACL_ENTRY
 0x02

	)

146 
	#ZMAC_SECURITY_FAILURE
 0x04

	)

149 
	#ZMAC_TXOPTION_ACK
 
MAC_TXOPTION_ACK


	)

150 
	#ZMAC_TXOPTION_GTS
 
MAC_TXOPTION_GTS


	)

151 
	#ZMAC_TXOPTION_INDIRECT
 
MAC_TXOPTION_INDIRECT


	)

152 
	#ZMAC_TXOPTION_SECURITY_ENABLE
 
MAC_TXOPTION_SECURITY


	)

153 
	#ZMAC_TXOPTION_NO_RETRANS
 
MAC_TXOPTION_NO_RETRANS


	)

154 
	#ZMAC_TXOPTION_NO_CNF
 
MAC_TXOPTION_NO_CNF


	)

156 
	#ZMAC_ASSOC_CAPINFO_FFD_TYPE
 
MAC_CAPABLE_FFD


	)

157 
	#ZMAC_ASSOC_CAPINFO_RX_ON_IDLE
 
MAC_CAPABLE_RX_ON_IDLE


	)

158 
	#ZMAC_ASSOC_CAPINFO_SECURITY
 
MAC_CAPABLE_SECURITY


	)

161 
	#MIN_LQI_COST_1
 12

162 
	#MIN_LQI_COST_2
 9

163 
	#MIN_LQI_COST_3
 6

164 
	#MIN_LQI_COST_4
 4

165 
	#MIN_LQI_COST_5
 2

166 
	#MIN_LQI_COST_6
 1

167 
	#MIN_LQI_COST_7
 0

168 

	)

170 
	#ZMAC_ED_SCAN_MAXCHANNELS
 27

	)

172 
	#ZMAC_SUCCESS
 
MAC_SUCCESS


	)

173 
	#ZMAC_TRANSACTION_OVERFLOW
 
MAC_TRANSACTION_OVERFLOW


	)

174 
	#ZMAC_TRANSACTION_EXPIRED
 
MAC_TRANSACTION_EXPIRED


	)

175 
	#ZMAC_CHANNEL_ACCESS_FAILURE
 
MAC_CHANNEL_ACCESS_FAILURE


	)

176 
	#ZMAC_NO_RESOURCES
 
MAC_NO_RESOURCES


	)

178 
	#ZMAC_KEY_SOURCE_MAX_LEN
 
MAC_KEY_SOURCE_MAX_LEN


	)

184 #ifde‡
__˝lu•lus


	@Projects/zstack/HomeAutomation/SampleLight/Source/OSAL_SampleLight.c

45 
	~"ZComDef.h
"

46 
	~"hÆ_drivîs.h
"

47 
	~"OSAL.h
"

48 
	~"OSAL_Tasks.h
"

50 #i‡
deföed
 ( 
MT_TASK
 )

51 
	~"MT.h
"

52 
	~"MT_TASK.h
"

55 
	~"nwk.h
"

56 
	~"APS.h
"

57 
	~"ZDAµ.h
"

58 #i‡
deföed
 ( 
ZIGBEE_FREQ_AGILITY
 ) || deföed ( 
ZIGBEE_PANID_CONFLICT
 )

59 
	~"ZDNwkMgr.h
"

61 #i‡
deföed
 ( 
ZIGBEE_FRAGMENTATION
 )

62 
	~"≠s_‰ag.h
"

65 
	~"z˛_ßm∂ñight.h
"

72 c⁄° 
pTaskEvítH™dÀrFn
 
	gèsksAº
[] = {

73 
macEvítLo›
,

74 
nwk_evít_lo›
,

75 
HÆ_Pro˚ssEvít
,

76 #i‡
deföed
–
MT_TASK
 )

77 
MT_Pro˚ssEvít
,

79 
APS_evít_lo›
,

80 #i‡
deföed
 ( 
ZIGBEE_FRAGMENTATION
 )

81 
APSF_Pro˚ssEvít
,

83 
ZDAµ_evít_lo›
,

84 #i‡
deföed
 ( 
ZIGBEE_FREQ_AGILITY
 ) || deföed ( 
ZIGBEE_PANID_CONFLICT
 )

85 
ZDNwkMgr_evít_lo›
,

87 
z˛_evít_lo›
,

88 
z˛Sam∂eLight_evít_lo›


91 c⁄° 
uöt8
 
	gèsksC¡
 = –
èsksAº
 ) / (ÅasksArr[0] );

92 
uöt16
 *
	gèsksEvíts
;

107 
	$oßlInôTasks
( )

109 
uöt8
 
èskID
 = 0;

111 
èsksEvíts
 = (
uöt16
 *)
	`oßl_mem_Æloc
––uöt16 ) * 
èsksC¡
);

112 
	`oßl_mem£t
–
èsksEvíts
, 0, (–
uöt16
 ) * 
èsksC¡
));

114 
	`macTaskInô
–
èskID
++ );

115 
	`nwk_öô
–
èskID
++ );

116 
	`HÆ_Inô
–
èskID
++ );

117 #i‡
	`deföed
–
MT_TASK
 )

118 
	`MT_TaskInô
–
èskID
++ );

120 
	`APS_Inô
–
èskID
++ );

121 #i‡
	`deföed
 ( 
ZIGBEE_FRAGMENTATION
 )

122 
	`APSF_Inô
–
èskID
++ );

124 
	`ZDAµ_Inô
–
èskID
++ );

125 #i‡
	`deföed
 ( 
ZIGBEE_FREQ_AGILITY
 ) || deföed ( 
ZIGBEE_PANID_CONFLICT
 )

126 
	`ZDNwkMgr_Inô
–
èskID
++ );

128 
	`z˛_Inô
–
èskID
++ );

129 
	`z˛Sam∂eLight_Inô
–
èskID
 );

130 
	}
}

	@Projects/zstack/HomeAutomation/SampleLight/Source/zcl_samplelight.c

50 
	~"ZComDef.h
"

51 
	~"OSAL.h
"

52 
	~"AF.h
"

53 
	~"ZDAµ.h
"

55 
	~"z˛.h
"

56 
	~"z˛_gíîÆ.h
"

57 
	~"z˛_ha.h
"

59 
	~"z˛_ßm∂ñight.h
"

61 
	~"⁄bﬂrd.h
"

64 
	~"hÆ_lcd.h
"

65 
	~"hÆ_Àd.h
"

66 
	~"hÆ_key.h
"

83 
byã
 
	gz˛Sam∂eLight_TaskID
;

94 
	#ZCLSAMPLELIGHT_BINDINGLIST
 2

	)

95 
cId_t
 
	gbödögInClu°îs
[
ZCLSAMPLELIGHT_BINDINGLIST
] =

97 
ZCL_CLUSTER_ID_GEN_ON_OFF
,

98 
ZCL_CLUSTER_ID_GEN_LEVEL_CONTROL


102 
ídPoötDesc_t
 
	gßm∂eLight_Te°Ep
 =

105 &
z˛Sam∂eLight_TaskID
,

106 (
Sim∂eDes¸ùti⁄F‹m©_t
 *)
NULL
,

107 (
afNëw‹kL©ícyReq_t
)0

113 
z˛Sam∂eLight_H™dÀKeys
–
byã
 
shi·
, byã 
keys
 );

114 
z˛Sam∂eLight_BasicRe£tCB
( );

115 
z˛Sam∂eLight_IdítifyCB
–
z˛Idítify_t
 *
pCmd
 );

116 
z˛Sam∂eLight_IdítifyQuîyR•CB
–
z˛IdítifyQuîyR•_t
 *
pR•
 );

117 
z˛Sam∂eLight_OnOffCB
–
uöt8
 
cmd
 );

118 
z˛Sam∂eLight_Pro˚ssIdítifyTimeCh™ge
( );

121 
z˛Sam∂eLight_Pro˚ssIncomögMsg
–
z˛IncomögMsg_t
 *
msg
 );

122 #ifde‡
ZCL_READ


123 
uöt8
 
z˛Sam∂eLight_Pro˚ssInRódR•Cmd
–
z˛IncomögMsg_t
 *
pInMsg
 );

125 #ifde‡
ZCL_WRITE


126 
uöt8
 
z˛Sam∂eLight_Pro˚ssInWrôeR•Cmd
–
z˛IncomögMsg_t
 *
pInMsg
 );

128 
uöt8
 
z˛Sam∂eLight_Pro˚ssInDeÁu…R•Cmd
–
z˛IncomögMsg_t
 *
pInMsg
 );

129 #ifde‡
ZCL_DISCOVER


130 
uöt8
 
z˛Sam∂eLight_Pro˚ssInDiscR•Cmd
–
z˛IncomögMsg_t
 *
pInMsg
 );

136 
z˛GíîÆ_AµCÆlbacks_t
 
	gz˛Sam∂eLight_CmdCÆlbacks
 =

138 
z˛Sam∂eLight_BasicRe£tCB
,

139 
z˛Sam∂eLight_IdítifyCB
,

140 
z˛Sam∂eLight_IdítifyQuîyR•CB
,

141 
z˛Sam∂eLight_OnOffCB
,

142 
NULL
,

143 
NULL
,

144 
NULL
,

145 
NULL
,

146 
NULL
,

147 
NULL
,

148 
NULL
,

149 
NULL
,

150 
NULL
,

151 
NULL
,

163 
	$z˛Sam∂eLight_Inô
–
byã
 
èsk_id
 )

165 
z˛Sam∂eLight_TaskID
 = 
èsk_id
;

173 
	`z˛HA_Inô
–&
z˛Sam∂eLight_Sim∂eDesc
 );

176 
	`z˛GíîÆ_Regi°îCmdCÆlbacks
–
SAMPLELIGHT_ENDPOINT
, &
z˛Sam∂eLight_CmdCÆlbacks
 );

179 
	`z˛_ªgi°îAârLi°
–
SAMPLELIGHT_ENDPOINT
, 
SAMPLELIGHT_MAX_ATTRIBUTES
, 
z˛Sam∂eLight_Aârs
 );

182 
	`z˛_ªgi°îF‹Msg
–
z˛Sam∂eLight_TaskID
 );

185 
	`Regi°îF‹Keys
–
z˛Sam∂eLight_TaskID
 );

188 
	`afRegi°î
–&
ßm∂eLight_Te°Ep
 );

189 
	}
}

200 
uöt16
 
	$z˛Sam∂eLight_evít_lo›
–
uöt8
 
èsk_id
, 
uöt16
 
evíts
 )

202 
afIncomögMSGPackë_t
 *
MSGpkt
;

204 ()
èsk_id
;

206 i‡–
evíts
 & 
SYS_EVENT_MSG
 )

208  (
MSGpkt
 = (
afIncomögMSGPackë_t
 *)
	`oßl_msg_ª˚ive
–
z˛Sam∂eLight_TaskID
 )) )

210  
MSGpkt
->
hdr
.
evít
 )

212 
ZCL_INCOMING_MSG
:

214 
	`z˛Sam∂eLight_Pro˚ssIncomögMsg
–(
z˛IncomögMsg_t
 *)
MSGpkt
 );

217 
KEY_CHANGE
:

218 
	`z˛Sam∂eLight_H™dÀKeys
–((
keyCh™ge_t
 *)
MSGpkt
)->
°©e
, ((keyCh™ge_à*)MSGpkt)->
keys
 );

226 
	`oßl_msg_dóŒoˇã
–(
uöt8
 *)
MSGpkt
 );

230  (
evíts
 ^ 
SYS_EVENT_MSG
);

233 i‡–
evíts
 & 
SAMPLELIGHT_IDENTIFY_TIMEOUT_EVT
 )

235 i‡–
z˛Sam∂eLight_IdítifyTime
 > 0 )

236 
z˛Sam∂eLight_IdítifyTime
--;

237 
	`z˛Sam∂eLight_Pro˚ssIdítifyTimeCh™ge
();

239  ( 
evíts
 ^ 
SAMPLELIGHT_IDENTIFY_TIMEOUT_EVT
 );

244 
	}
}

260 
	$z˛Sam∂eLight_H™dÀKeys
–
byã
 
shi·
, byã 
keys
 )

262 
zAddrTy≥_t
 
d°Addr
;

264 ()
shi·
;

266 i‡–
keys
 & 
HAL_KEY_SW_2
 )

270 
d°Addr
.
addrMode
 = 
afAddr16Bô
;

271 
d°Addr
.
addr
.
sh‹tAddr
 = 0;

272 
	`ZDP_EndDevi˚BödReq
–&
d°Addr
, 
	`NLME_GëSh‹tAddr
(),

273 
SAMPLELIGHT_ENDPOINT
,

274 
ZCL_HA_PROFILE_ID
,

275 
ZCLSAMPLELIGHT_BINDINGLIST
, 
bödögInClu°îs
,

276 0, 
NULL
,

277 
TRUE
 );

280 i‡–
keys
 & 
HAL_KEY_SW_3
 )

284 i‡–
keys
 & 
HAL_KEY_SW_4
 )

287 
	}
}

298 
	$z˛Sam∂eLight_Pro˚ssIdítifyTimeCh™ge
( )

300 i‡–
z˛Sam∂eLight_IdítifyTime
 > 0 )

302 
	`oßl_°¨t_timîEx
–
z˛Sam∂eLight_TaskID
, 
SAMPLELIGHT_IDENTIFY_TIMEOUT_EVT
, 1000 );

303 
	`HÆLedBlök
 ( 
HAL_LED_4
, 0xFF, 
HAL_LED_DEFAULT_DUTY_CYCLE
, 
HAL_LED_DEFAULT_FLASH_TIME
 );

307 i‡–
z˛Sam∂eLight_OnOff
 )

308 
	`HÆLedSë
 ( 
HAL_LED_4
, 
HAL_LED_MODE_ON
 );

310 
	`HÆLedSë
 ( 
HAL_LED_4
, 
HAL_LED_MODE_OFF
 );

311 
	`oßl_°›_timîEx
–
z˛Sam∂eLight_TaskID
, 
SAMPLELIGHT_IDENTIFY_TIMEOUT_EVT
 );

313 
	}
}

325 
	$z˛Sam∂eLight_BasicRe£tCB
( )

328 
	}
}

341 
	$z˛Sam∂eLight_IdítifyCB
–
z˛Idítify_t
 *
pCmd
 )

343 
z˛Sam∂eLight_IdítifyTime
 = 
pCmd
->
idítifyTime
;

344 
	`z˛Sam∂eLight_Pro˚ssIdítifyTimeCh™ge
();

345 
	}
}

358 
	$z˛Sam∂eLight_IdítifyQuîyR•CB
–
z˛IdítifyQuîyR•_t
 *
pR•
 )

361 ()
pR•
;

362 
	}
}

374 
	$z˛Sam∂eLight_OnOffCB
–
uöt8
 
cmd
 )

377 i‡–
cmd
 =
COMMAND_ON
 )

378 
z˛Sam∂eLight_OnOff
 = 
LIGHT_ON
;

381 i‡–
cmd
 =
COMMAND_OFF
 )

382 
z˛Sam∂eLight_OnOff
 = 
LIGHT_OFF
;

387 i‡–
z˛Sam∂eLight_OnOff
 =
LIGHT_OFF
 )

388 
z˛Sam∂eLight_OnOff
 = 
LIGHT_ON
;

390 
z˛Sam∂eLight_OnOff
 = 
LIGHT_OFF
;

394 i‡–
z˛Sam∂eLight_OnOff
 =
LIGHT_ON
 )

395 
	`HÆLedSë
–
HAL_LED_4
, 
HAL_LED_MODE_ON
 );

397 
	`HÆLedSë
–
HAL_LED_4
, 
HAL_LED_MODE_OFF
 );

398 
	}
}

416 
	$z˛Sam∂eLight_Pro˚ssIncomögMsg
–
z˛IncomögMsg_t
 *
pInMsg
)

418  
pInMsg
->
z˛Hdr
.
comm™dID
 )

420 #ifde‡
ZCL_READ


421 
ZCL_CMD_READ_RSP
:

422 
	`z˛Sam∂eLight_Pro˚ssInRódR•Cmd
–
pInMsg
 );

425 #ifde‡
ZCL_WRITE


426 
ZCL_CMD_WRITE_RSP
:

427 
	`z˛Sam∂eLight_Pro˚ssInWrôeR•Cmd
–
pInMsg
 );

430 #ifde‡
ZCL_REPORT


432 
ZCL_CMD_CONFIG_REPORT
:

436 
ZCL_CMD_CONFIG_REPORT_RSP
:

440 
ZCL_CMD_READ_REPORT_CFG
:

444 
ZCL_CMD_READ_REPORT_CFG_RSP
:

448 
ZCL_CMD_REPORT
:

452 
ZCL_CMD_DEFAULT_RSP
:

453 
	`z˛Sam∂eLight_Pro˚ssInDeÁu…R•Cmd
–
pInMsg
 );

455 #ifde‡
ZCL_DISCOVER


456 
ZCL_CMD_DISCOVER_RSP
:

457 
	`z˛Sam∂eLight_Pro˚ssInDiscR•Cmd
–
pInMsg
 );

464 i‡–
pInMsg
->
©åCmd
 )

465 
	`oßl_mem_‰ì
–
pInMsg
->
©åCmd
 );

466 
	}
}

468 #ifde‡
ZCL_READ


478 
uöt8
 
	$z˛Sam∂eLight_Pro˚ssInRódR•Cmd
–
z˛IncomögMsg_t
 *
pInMsg
 )

480 
z˛RódR•Cmd_t
 *
ªadR•Cmd
;

481 
uöt8
 
i
;

483 
ªadR•Cmd
 = (
z˛RódR•Cmd_t
 *)
pInMsg
->
©åCmd
;

484 
i
 = 0; i < 
ªadR•Cmd
->
numAâr
; i++)

491  
TRUE
;

492 
	}
}

495 #ifde‡
ZCL_WRITE


505 
uöt8
 
	$z˛Sam∂eLight_Pro˚ssInWrôeR•Cmd
–
z˛IncomögMsg_t
 *
pInMsg
 )

507 
z˛WrôeR•Cmd_t
 *
wrôeR•Cmd
;

508 
uöt8
 
i
;

510 
wrôeR•Cmd
 = (
z˛WrôeR•Cmd_t
 *)
pInMsg
->
©åCmd
;

511 
i
 = 0; i < 
wrôeR•Cmd
->
numAâr
; i++)

517  
TRUE
;

518 
	}
}

530 
uöt8
 
	$z˛Sam∂eLight_Pro˚ssInDeÁu…R•Cmd
–
z˛IncomögMsg_t
 *
pInMsg
 )

535 ()
pInMsg
;

537  
TRUE
;

538 
	}
}

540 #ifde‡
ZCL_DISCOVER


550 
uöt8
 
	$z˛Sam∂eLight_Pro˚ssInDiscR•Cmd
–
z˛IncomögMsg_t
 *
pInMsg
 )

552 
z˛DiscovîR•Cmd_t
 *
discovîR•Cmd
;

553 
uöt8
 
i
;

555 
discovîR•Cmd
 = (
z˛DiscovîR•Cmd_t
 *)
pInMsg
->
©åCmd
;

556  
i
 = 0; i < 
discovîR•Cmd
->
numAâr
; i++ )

561  
TRUE
;

562 
	}
}

	@Projects/zstack/HomeAutomation/SampleLight/Source/zcl_samplelight.h

41 #i‚de‡
ZCL_SAMPLELIGHT_H


42 
	#ZCL_SAMPLELIGHT_H


	)

44 #ifde‡
__˝lu•lus


52 
	~"z˛.h
"

57 
	#SAMPLELIGHT_ENDPOINT
 10

	)

59 
	#SAMPLELIGHT_MAX_ATTRIBUTES
 12

	)

61 
	#LIGHT_OFF
 0x00

	)

62 
	#LIGHT_ON
 0x01

	)

65 
	#SAMPLELIGHT_IDENTIFY_TIMEOUT_EVT
 0x0001

	)

77 
Sim∂eDes¸ùti⁄F‹m©_t
 
z˛Sam∂eLight_Sim∂eDesc
;

79 
CONST
 
z˛AârRec_t
 
z˛Sam∂eLight_Aârs
[];

81 
uöt8
 
z˛Sam∂eLight_OnOff
;

83 
uöt16
 
z˛Sam∂eLight_IdítifyTime
;

92 
z˛Sam∂eLight_Inô
–
byã
 
èsk_id
 );

97 
UINT16
 
z˛Sam∂eLight_evít_lo›
–
byã
 
èsk_id
, UINT16 
evíts
 );

103 #ifde‡
__˝lu•lus


	@Projects/zstack/HomeAutomation/SampleLight/Source/zcl_samplelight_data.c

44 
	~"ZComDef.h
"

45 
	~"OSAL.h
"

46 
	~"AF.h
"

47 
	~"ZDC⁄fig.h
"

49 
	~"z˛.h
"

50 
	~"z˛_gíîÆ.h
"

51 
	~"z˛_ha.h
"

53 
	~"z˛_ßm∂ñight.h
"

59 
	#SAMPLELIGHT_DEVICE_VERSION
 0

	)

60 
	#SAMPLELIGHT_FLAGS
 0

	)

62 
	#SAMPLELIGHT_HWVERSION
 1

	)

63 
	#SAMPLELIGHT_ZCLVERSION
 1

	)

78 c⁄° 
uöt8
 
	gz˛Sam∂eLight_HWRevisi⁄
 = 
SAMPLELIGHT_HWVERSION
;

79 c⁄° 
uöt8
 
	gz˛Sam∂eLight_ZCLVîsi⁄
 = 
SAMPLELIGHT_ZCLVERSION
;

80 c⁄° 
uöt8
 
	gz˛Sam∂eLight_M™uÁ˘uªrName
[] = { 16, 'T','e','x','a','s','I','n','s','t','r','u','m','e','n','t','s' };

81 c⁄° 
uöt8
 
	gz˛Sam∂eLight_ModñId
[] = { 16, 'T','I','0','0','0','1',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ' };

82 c⁄° 
uöt8
 
	gz˛Sam∂eLight_D©eCode
[] = { 16, '2','0','0','6','0','8','3','1',' ',' ',' ',' ',' ',' ',' ',' ' };

83 c⁄° 
uöt8
 
	gz˛Sam∂eLight_PowîSour˚
 = 
POWER_SOURCE_MAINS_1_PHASE
;

85 
uöt8
 
	gz˛Sam∂eLight_Loˇti⁄Des¸ùti⁄
[17] = { 16, ' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ' };

86 
uöt8
 
	gz˛Sam∂eLight_PhysiˇlEnvú⁄mít
 = 0;

87 
uöt8
 
	gz˛Sam∂eLight_Devi˚E«bÀ
 = 
DEVICE_ENABLED
;

90 
uöt16
 
	gz˛Sam∂eLight_IdítifyTime
 = 0;

93 
uöt8
 
	gz˛Sam∂eLight_OnOff
 = 
LIGHT_OFF
;

98 
CONST
 
z˛AârRec_t
 
	gz˛Sam∂eLight_Aârs
[
SAMPLELIGHT_MAX_ATTRIBUTES
] =

102 
ZCL_CLUSTER_ID_GEN_BASIC
,

104 
ATTRID_BASIC_HW_VERSION
,

105 
ZCL_DATATYPE_UINT8
,

106 
ACCESS_CONTROL_READ
,

107 (*)&
z˛Sam∂eLight_HWRevisi⁄


111 
ZCL_CLUSTER_ID_GEN_BASIC
,

113 
ATTRID_BASIC_ZCL_VERSION
,

114 
ZCL_DATATYPE_UINT8
,

115 
ACCESS_CONTROL_READ
,

116 (*)&
z˛Sam∂eLight_ZCLVîsi⁄


120 
ZCL_CLUSTER_ID_GEN_BASIC
,

122 
ATTRID_BASIC_MANUFACTURER_NAME
,

123 
ZCL_DATATYPE_CHAR_STR
,

124 
ACCESS_CONTROL_READ
,

125 (*)
z˛Sam∂eLight_M™uÁ˘uªrName


129 
ZCL_CLUSTER_ID_GEN_BASIC
,

131 
ATTRID_BASIC_MODEL_ID
,

132 
ZCL_DATATYPE_CHAR_STR
,

133 
ACCESS_CONTROL_READ
,

134 (*)
z˛Sam∂eLight_ModñId


138 
ZCL_CLUSTER_ID_GEN_BASIC
,

140 
ATTRID_BASIC_DATE_CODE
,

141 
ZCL_DATATYPE_CHAR_STR
,

142 
ACCESS_CONTROL_READ
,

143 (*)
z˛Sam∂eLight_D©eCode


147 
ZCL_CLUSTER_ID_GEN_BASIC
,

149 
ATTRID_BASIC_POWER_SOURCE
,

150 
ZCL_DATATYPE_UINT8
,

151 
ACCESS_CONTROL_READ
,

152 (*)&
z˛Sam∂eLight_PowîSour˚


156 
ZCL_CLUSTER_ID_GEN_BASIC
,

158 
ATTRID_BASIC_LOCATION_DESC
,

159 
ZCL_DATATYPE_CHAR_STR
,

160 (
ACCESS_CONTROL_READ
 | 
ACCESS_CONTROL_WRITE
),

161 (*)
z˛Sam∂eLight_Loˇti⁄Des¸ùti⁄


165 
ZCL_CLUSTER_ID_GEN_BASIC
,

167 
ATTRID_BASIC_PHYSICAL_ENV
,

168 
ZCL_DATATYPE_UINT8
,

169 (
ACCESS_CONTROL_READ
 | 
ACCESS_CONTROL_WRITE
),

170 (*)&
z˛Sam∂eLight_PhysiˇlEnvú⁄mít


174 
ZCL_CLUSTER_ID_GEN_BASIC
,

176 
ATTRID_BASIC_DEVICE_ENABLED
,

177 
ZCL_DATATYPE_BOOLEAN
,

178 (
ACCESS_CONTROL_READ
 | 
ACCESS_CONTROL_WRITE
),

179 (*)&
z˛Sam∂eLight_Devi˚E«bÀ


185 
ZCL_CLUSTER_ID_GEN_IDENTIFY
,

187 
ATTRID_IDENTIFY_TIME
,

188 
ZCL_DATATYPE_UINT16
,

189 (
ACCESS_CONTROL_READ
 | 
ACCESS_CONTROL_WRITE
),

190 (*)&
z˛Sam∂eLight_IdítifyTime


196 
ZCL_CLUSTER_ID_GEN_ON_OFF
,

198 
ATTRID_ON_OFF
,

199 
ZCL_DATATYPE_UINT8
,

200 
ACCESS_CONTROL_READ
,

201 (*)&
z˛Sam∂eLight_OnOff


211 
	#ZCLSAMPLELIGHT_MAX_INCLUSTERS
 5

	)

212 c⁄° 
cId_t
 
	gz˛Sam∂eLight_InClu°îLi°
[
ZCLSAMPLELIGHT_MAX_INCLUSTERS
] =

214 
ZCL_CLUSTER_ID_GEN_BASIC
,

215 
ZCL_CLUSTER_ID_GEN_SCENES
,

216 
ZCL_CLUSTER_ID_GEN_GROUPS
,

217 
ZCL_CLUSTER_ID_GEN_ON_OFF
,

218 
ZCL_CLUSTER_ID_GEN_LEVEL_CONTROL


221 
	#ZCLSAMPLELIGHT_MAX_OUTCLUSTERS
 1

	)

222 c⁄° 
cId_t
 
	gz˛Sam∂eLight_OutClu°îLi°
[
ZCLSAMPLELIGHT_MAX_OUTCLUSTERS
] =

224 
ZCL_CLUSTER_ID_GEN_BASIC


227 
Sim∂eDes¸ùti⁄F‹m©_t
 
	gz˛Sam∂eLight_Sim∂eDesc
 =

229 
SAMPLELIGHT_ENDPOINT
,

230 
ZCL_HA_PROFILE_ID
,

231 
ZCL_HA_DEVICEID_DIMMABLE_LIGHT
,

232 
SAMPLELIGHT_DEVICE_VERSION
,

233 
SAMPLELIGHT_FLAGS
,

234 
ZCLSAMPLELIGHT_MAX_INCLUSTERS
,

235 (
cId_t
 *)
z˛Sam∂eLight_InClu°îLi°
,

236 
ZCLSAMPLELIGHT_MAX_OUTCLUSTERS
,

237 (
cId_t
 *)
z˛Sam∂eLight_OutClu°îLi°


	@Projects/zstack/HomeAutomation/SampleSwitch/Source/OSAL_SampleSw.c

45 
	~"ZComDef.h
"

46 
	~"hÆ_drivîs.h
"

47 
	~"OSAL.h
"

48 
	~"OSAL_Tasks.h
"

50 #i‡
deföed
 ( 
MT_TASK
 )

51 
	~"MT.h
"

52 
	~"MT_TASK.h
"

55 
	~"nwk.h
"

56 
	~"APS.h
"

57 
	~"ZDAµ.h
"

58 #i‡
deföed
 ( 
ZIGBEE_FREQ_AGILITY
 ) || deföed ( 
ZIGBEE_PANID_CONFLICT
 )

59 
	~"ZDNwkMgr.h
"

61 #i‡
deföed
 ( 
ZIGBEE_FRAGMENTATION
 )

62 
	~"≠s_‰ag.h
"

65 
	~"z˛_ßm∂esw.h
"

72 c⁄° 
pTaskEvítH™dÀrFn
 
	gèsksAº
[] = {

73 
macEvítLo›
,

74 
nwk_evít_lo›
,

75 
HÆ_Pro˚ssEvít
,

76 #i‡
deföed
–
MT_TASK
 )

77 
MT_Pro˚ssEvít
,

79 
APS_evít_lo›
,

80 #i‡
deföed
 ( 
ZIGBEE_FRAGMENTATION
 )

81 
APSF_Pro˚ssEvít
,

83 
ZDAµ_evít_lo›
,

84 #i‡
deföed
 ( 
ZIGBEE_FREQ_AGILITY
 ) || deföed ( 
ZIGBEE_PANID_CONFLICT
 )

85 
ZDNwkMgr_evít_lo›
,

87 
z˛_evít_lo›
,

88 
z˛Sam∂eSw_evít_lo›


91 c⁄° 
uöt8
 
	gèsksC¡
 = –
èsksAº
 ) / (ÅasksArr[0] );

92 
uöt16
 *
	gèsksEvíts
;

107 
	$oßlInôTasks
( )

109 
uöt8
 
èskID
 = 0;

111 
èsksEvíts
 = (
uöt16
 *)
	`oßl_mem_Æloc
––uöt16 ) * 
èsksC¡
);

112 
	`oßl_mem£t
–
èsksEvíts
, 0, (–
uöt16
 ) * 
èsksC¡
));

114 
	`macTaskInô
–
èskID
++ );

115 
	`nwk_öô
–
èskID
++ );

116 
	`HÆ_Inô
–
èskID
++ );

117 #i‡
	`deföed
–
MT_TASK
 )

118 
	`MT_TaskInô
–
èskID
++ );

120 
	`APS_Inô
–
èskID
++ );

121 #i‡
	`deföed
 ( 
ZIGBEE_FRAGMENTATION
 )

122 
	`APSF_Inô
–
èskID
++ );

124 
	`ZDAµ_Inô
–
èskID
++ );

125 #i‡
	`deföed
 ( 
ZIGBEE_FREQ_AGILITY
 ) || deföed ( 
ZIGBEE_PANID_CONFLICT
 )

126 
	`ZDNwkMgr_Inô
–
èskID
++ );

128 
	`z˛_Inô
–
èskID
++ );

129 
	`z˛Sam∂eSw_Inô
–
èskID
 );

130 
	}
}

	@Projects/zstack/HomeAutomation/SampleSwitch/Source/zcl_samplesw.c

49 
	~"ZComDef.h
"

50 
	~"OSAL.h
"

51 
	~"AF.h
"

52 
	~"ZDAµ.h
"

53 
	~"ZDObje˘.h
"

54 
	~"ZDProfûe.h
"

56 
	~"z˛.h
"

57 
	~"z˛_gíîÆ.h
"

58 
	~"z˛_ha.h
"

59 
	~"z˛_ßm∂esw.h
"

61 
	~"⁄bﬂrd.h
"

64 
	~"hÆ_lcd.h
"

65 
	~"hÆ_Àd.h
"

66 
	~"hÆ_key.h
"

83 
byã
 
	gz˛Sam∂eSw_TaskID
;

92 
afAddrTy≥_t
 
	gz˛Sam∂eSw_D°Addr
;

94 
	#ZCLSAMPLESW_BINDINGLIST
 1

	)

95 
cId_t
 
	gbödögOutClu°îs
[
ZCLSAMPLESW_BINDINGLIST
] =

97 
ZCL_CLUSTER_ID_GEN_ON_OFF


101 
ídPoötDesc_t
 
	gßm∂eSw_Te°Ep
 =

104 &
z˛Sam∂eSw_TaskID
,

105 (
Sim∂eDes¸ùti⁄F‹m©_t
 *)
NULL
,

106 (
afNëw‹kL©ícyReq_t
)0

113 
z˛Sam∂eSw_Pro˚ssZDOMsgs
–
zdoIncomögMsg_t
 *
öMsg
 );

114 
z˛Sam∂eSw_H™dÀKeys
–
byã
 
shi·
, byã 
keys
 );

115 
z˛Sam∂eSw_BasicRe£tCB
( );

116 
z˛Sam∂eSw_IdítifyCB
–
z˛Idítify_t
 *
pCmd
 );

117 
z˛Sam∂eSw_IdítifyQuîyR•CB
–
z˛IdítifyQuîyR•_t
 *
pR•
 );

118 
z˛Sam∂eSw_Pro˚ssIdítifyTimeCh™ge
( );

121 
z˛Sam∂eSw_Pro˚ssIncomögMsg
–
z˛IncomögMsg_t
 *
msg
 );

122 #ifde‡
ZCL_READ


123 
uöt8
 
z˛Sam∂eSw_Pro˚ssInRódR•Cmd
–
z˛IncomögMsg_t
 *
pInMsg
 );

125 #ifde‡
ZCL_WRITE


126 
uöt8
 
z˛Sam∂eSw_Pro˚ssInWrôeR•Cmd
–
z˛IncomögMsg_t
 *
pInMsg
 );

128 
uöt8
 
z˛Sam∂eSw_Pro˚ssInDeÁu…R•Cmd
–
z˛IncomögMsg_t
 *
pInMsg
 );

129 #ifde‡
ZCL_DISCOVER


130 
uöt8
 
z˛Sam∂eSw_Pro˚ssInDiscR•Cmd
–
z˛IncomögMsg_t
 *
pInMsg
 );

136 
z˛GíîÆ_AµCÆlbacks_t
 
	gz˛Sam∂eSw_CmdCÆlbacks
 =

138 
z˛Sam∂eSw_BasicRe£tCB
,

139 
z˛Sam∂eSw_IdítifyCB
,

140 
z˛Sam∂eSw_IdítifyQuîyR•CB
,

141 
NULL
,

142 
NULL
,

143 
NULL
,

144 
NULL
,

145 
NULL
,

146 
NULL
,

147 
NULL
,

148 
NULL
,

149 
NULL
,

150 
NULL
,

151 
NULL
,

164 
	$z˛Sam∂eSw_Inô
–
byã
 
èsk_id
 )

166 
z˛Sam∂eSw_TaskID
 = 
èsk_id
;

169 
z˛Sam∂eSw_D°Addr
.
addrMode
 = (
afAddrMode_t
)
AddrNŸPª£¡
;

170 
z˛Sam∂eSw_D°Addr
.
ídPoöt
 = 0;

171 
z˛Sam∂eSw_D°Addr
.
addr
.
sh‹tAddr
 = 0;

174 
	`z˛HA_Inô
–&
z˛Sam∂eSw_Sim∂eDesc
 );

177 
	`z˛GíîÆ_Regi°îCmdCÆlbacks
–
SAMPLESW_ENDPOINT
, &
z˛Sam∂eSw_CmdCÆlbacks
 );

180 
	`z˛_ªgi°îAârLi°
–
SAMPLESW_ENDPOINT
, 
SAMPLESW_MAX_ATTRIBUTES
, 
z˛Sam∂eSw_Aârs
 );

183 
	`z˛_ªgi°îF‹Msg
–
z˛Sam∂eSw_TaskID
 );

186 
	`Regi°îF‹Keys
–
z˛Sam∂eSw_TaskID
 );

189 
	`afRegi°î
–&
ßm∂eSw_Te°Ep
 );

191 
	`ZDO_Regi°îF‹ZDOMsg
–
z˛Sam∂eSw_TaskID
, 
End_Devi˚_Böd_r•
 );

192 
	`ZDO_Regi°îF‹ZDOMsg
–
z˛Sam∂eSw_TaskID
, 
M©ch_Desc_r•
 );

193 
	}
}

204 
uöt16
 
	$z˛Sam∂eSw_evít_lo›
–
uöt8
 
èsk_id
, 
uöt16
 
evíts
 )

206 
afIncomögMSGPackë_t
 *
MSGpkt
;

207 ()
èsk_id
;

209 i‡–
evíts
 & 
SYS_EVENT_MSG
 )

211  (
MSGpkt
 = (
afIncomögMSGPackë_t
 *)
	`oßl_msg_ª˚ive
–
z˛Sam∂eSw_TaskID
 )) )

213  
MSGpkt
->
hdr
.
evít
 )

215 
ZCL_INCOMING_MSG
:

217 
	`z˛Sam∂eSw_Pro˚ssIncomögMsg
–(
z˛IncomögMsg_t
 *)
MSGpkt
 );

220 
ZDO_CB_MSG
:

221 
	`z˛Sam∂eSw_Pro˚ssZDOMsgs
–(
zdoIncomögMsg_t
 *)
MSGpkt
 );

224 
KEY_CHANGE
:

225 
	`z˛Sam∂eSw_H™dÀKeys
–((
keyCh™ge_t
 *)
MSGpkt
)->
°©e
, ((keyCh™ge_à*)MSGpkt)->
keys
 );

233 
	`oßl_msg_dóŒoˇã
–(
uöt8
 *)
MSGpkt
 );

237  (
evíts
 ^ 
SYS_EVENT_MSG
);

240 i‡–
evíts
 & 
SAMPLESW_IDENTIFY_TIMEOUT_EVT
 )

242 
z˛Sam∂eSw_IdítifyTime
 = 10;

243 
	`z˛Sam∂eSw_Pro˚ssIdítifyTimeCh™ge
();

245  ( 
evíts
 ^ 
SAMPLESW_IDENTIFY_TIMEOUT_EVT
 );

250 
	}
}

262 
	$z˛Sam∂eSw_Pro˚ssZDOMsgs
–
zdoIncomögMsg_t
 *
öMsg
 )

264  
öMsg
->
˛u°îID
 )

266 
End_Devi˚_Böd_r•
:

267 i‡–
	`ZDO_P¨£BödR•
–
öMsg
 ) =
ZSuc˚ss
 )

270 
	`HÆLedSë
–
HAL_LED_4
, 
HAL_LED_MODE_ON
 );

272 #i‡
	`deföed
(
BLINK_LEDS
)

276 
	`HÆLedSë
 ( 
HAL_LED_4
, 
HAL_LED_MODE_FLASH
 );

281 
M©ch_Desc_r•
:

283 
ZDO_A˘iveEndpoötR•_t
 *
pR•
 = 
	`ZDO_P¨£EPLi°R•
–
öMsg
 );

284 i‡–
pR•
 )

286 i‡–
pR•
->
°©us
 =
ZSuc˚ss
 &&ÖR•->
˙t
 )

288 
z˛Sam∂eSw_D°Addr
.
addrMode
 = (
afAddrMode_t
)
Addr16Bô
;

289 
z˛Sam∂eSw_D°Addr
.
addr
.
sh‹tAddr
 = 
pR•
->
nwkAddr
;

291 
z˛Sam∂eSw_D°Addr
.
ídPoöt
 = 
pR•
->
ïLi°
[0];

294 
	`HÆLedSë
–
HAL_LED_4
, 
HAL_LED_MODE_ON
 );

296 
	`oßl_mem_‰ì
–
pR•
 );

301 
	}
}

317 
	$z˛Sam∂eSw_H™dÀKeys
–
byã
 
shi·
, byã 
keys
 )

319 
zAddrTy≥_t
 
d°Addr
;

320 ()
shi·
;

322 i‡–
keys
 & 
HAL_KEY_SW_1
 )

325 #ifde‡
ZCL_ON_OFF


326 
	`z˛GíîÆ_SídOnOff_CmdToggÀ
–
SAMPLESW_ENDPOINT
, &
z˛Sam∂eSw_D°Addr
, 
Ál£
, 0 );

330 i‡–
keys
 & 
HAL_KEY_SW_2
 )

332 
	`HÆLedSë
 ( 
HAL_LED_4
, 
HAL_LED_MODE_OFF
 );

336 
d°Addr
.
addrMode
 = 
afAddr16Bô
;

337 
d°Addr
.
addr
.
sh‹tAddr
 = 0;

338 
	`ZDP_EndDevi˚BödReq
–&
d°Addr
, 
	`NLME_GëSh‹tAddr
(),

339 
SAMPLESW_ENDPOINT
,

340 
ZCL_HA_PROFILE_ID
,

341 0, 
NULL
,

342 
ZCLSAMPLESW_BINDINGLIST
, 
bödögOutClu°îs
,

343 
TRUE
 );

346 i‡–
keys
 & 
HAL_KEY_SW_3
 )

350 i‡–
keys
 & 
HAL_KEY_SW_4
 )

352 
	`HÆLedSë
 ( 
HAL_LED_4
, 
HAL_LED_MODE_OFF
 );

355 
d°Addr
.
addrMode
 = 
AddrBrﬂdˇ°
;

356 
d°Addr
.
addr
.
sh‹tAddr
 = 
NWK_BROADCAST_SHORTADDR
;

357 
	`ZDP_M©chDescReq
–&
d°Addr
, 
NWK_BROADCAST_SHORTADDR
,

358 
ZCL_HA_PROFILE_ID
,

359 
ZCLSAMPLESW_BINDINGLIST
, 
bödögOutClu°îs
,

360 0, 
NULL
,

361 
FALSE
 );

363 
	}
}

374 
	$z˛Sam∂eSw_Pro˚ssIdítifyTimeCh™ge
( )

376 i‡–
z˛Sam∂eSw_IdítifyTime
 > 0 )

378 
	`oßl_°¨t_timîEx
–
z˛Sam∂eSw_TaskID
, 
SAMPLESW_IDENTIFY_TIMEOUT_EVT
, 1000 );

379 
	`HÆLedBlök
 ( 
HAL_LED_4
, 0xFF, 
HAL_LED_DEFAULT_DUTY_CYCLE
, 
HAL_LED_DEFAULT_FLASH_TIME
 );

383 i‡–
z˛Sam∂eSw_OnOff
 )

384 
	`HÆLedSë
 ( 
HAL_LED_4
, 
HAL_LED_MODE_ON
 );

386 
	`HÆLedSë
 ( 
HAL_LED_4
, 
HAL_LED_MODE_OFF
 );

387 
	`oßl_°›_timîEx
–
z˛Sam∂eSw_TaskID
, 
SAMPLESW_IDENTIFY_TIMEOUT_EVT
 );

389 
	}
}

401 
	$z˛Sam∂eSw_BasicRe£tCB
( )

403 
	}
}

416 
	$z˛Sam∂eSw_IdítifyCB
–
z˛Idítify_t
 *
pCmd
 )

418 
z˛Sam∂eSw_IdítifyTime
 = 
pCmd
->
idítifyTime
;

419 
	`z˛Sam∂eSw_Pro˚ssIdítifyTimeCh™ge
();

420 
	}
}

433 
	$z˛Sam∂eSw_IdítifyQuîyR•CB
–
z˛IdítifyQuîyR•_t
 *
pR•
 )

436 ()
pR•
;

437 
	}
}

454 
	$z˛Sam∂eSw_Pro˚ssIncomögMsg
–
z˛IncomögMsg_t
 *
pInMsg
 )

456  
pInMsg
->
z˛Hdr
.
comm™dID
 )

458 #ifde‡
ZCL_READ


459 
ZCL_CMD_READ_RSP
:

460 
	`z˛Sam∂eSw_Pro˚ssInRódR•Cmd
–
pInMsg
 );

463 #ifde‡
ZCL_WRITE


464 
ZCL_CMD_WRITE_RSP
:

465 
	`z˛Sam∂eSw_Pro˚ssInWrôeR•Cmd
–
pInMsg
 );

468 #ifde‡
ZCL_REPORT


470 
ZCL_CMD_CONFIG_REPORT
:

474 
ZCL_CMD_CONFIG_REPORT_RSP
:

478 
ZCL_CMD_READ_REPORT_CFG
:

482 
ZCL_CMD_READ_REPORT_CFG_RSP
:

486 
ZCL_CMD_REPORT
:

490 
ZCL_CMD_DEFAULT_RSP
:

491 
	`z˛Sam∂eSw_Pro˚ssInDeÁu…R•Cmd
–
pInMsg
 );

493 #ifde‡
ZCL_DISCOVER


494 
ZCL_CMD_DISCOVER_RSP
:

495 
	`z˛Sam∂eSw_Pro˚ssInDiscR•Cmd
–
pInMsg
 );

502 i‡–
pInMsg
->
©åCmd
 )

503 
	`oßl_mem_‰ì
–
pInMsg
->
©åCmd
 );

504 
	}
}

506 #ifde‡
ZCL_READ


516 
uöt8
 
	$z˛Sam∂eSw_Pro˚ssInRódR•Cmd
–
z˛IncomögMsg_t
 *
pInMsg
 )

518 
z˛RódR•Cmd_t
 *
ªadR•Cmd
;

519 
uöt8
 
i
;

521 
ªadR•Cmd
 = (
z˛RódR•Cmd_t
 *)
pInMsg
->
©åCmd
;

522 
i
 = 0; i < 
ªadR•Cmd
->
numAâr
; i++)

529  
TRUE
;

530 
	}
}

533 #ifde‡
ZCL_WRITE


543 
uöt8
 
	$z˛Sam∂eSw_Pro˚ssInWrôeR•Cmd
–
z˛IncomögMsg_t
 *
pInMsg
 )

545 
z˛WrôeR•Cmd_t
 *
wrôeR•Cmd
;

546 
uöt8
 
i
;

548 
wrôeR•Cmd
 = (
z˛WrôeR•Cmd_t
 *)
pInMsg
->
©åCmd
;

549 
i
 = 0; i < 
wrôeR•Cmd
->
numAâr
; i++)

555  
TRUE
;

556 
	}
}

568 
uöt8
 
	$z˛Sam∂eSw_Pro˚ssInDeÁu…R•Cmd
–
z˛IncomögMsg_t
 *
pInMsg
 )

572 ()
pInMsg
;

573  
TRUE
;

574 
	}
}

576 #ifde‡
ZCL_DISCOVER


586 
uöt8
 
	$z˛Sam∂eSw_Pro˚ssInDiscR•Cmd
–
z˛IncomögMsg_t
 *
pInMsg
 )

588 
z˛DiscovîR•Cmd_t
 *
discovîR•Cmd
;

589 
uöt8
 
i
;

591 
discovîR•Cmd
 = (
z˛DiscovîR•Cmd_t
 *)
pInMsg
->
©åCmd
;

592  
i
 = 0; i < 
discovîR•Cmd
->
numAâr
; i++ )

597  
TRUE
;

598 
	}
}

	@Projects/zstack/HomeAutomation/SampleSwitch/Source/zcl_samplesw.h

42 #i‚de‡
ZCL_SAMPLESW_H


43 
	#ZCL_SAMPLESW_H


	)

45 #ifde‡
__˝lu•lus


53 
	~"z˛.h
"

58 
	#SAMPLESW_ENDPOINT
 10

	)

60 
	#SAMPLESW_MAX_ATTRIBUTES
 11

	)

62 
	#LIGHT_OFF
 0x00

	)

63 
	#LIGHT_ON
 0x01

	)

66 
	#SAMPLESW_IDENTIFY_TIMEOUT_EVT
 0x0001

	)

78 
Sim∂eDes¸ùti⁄F‹m©_t
 
z˛Sam∂eSw_Sim∂eDesc
;

80 
CONST
 
z˛AârRec_t
 
z˛Sam∂eSw_Aârs
[];

82 
uöt8
 
z˛Sam∂eSw_OnOff
;

84 
uöt16
 
z˛Sam∂eSw_IdítifyTime
;

93 
z˛Sam∂eSw_Inô
–
byã
 
èsk_id
 );

98 
UINT16
 
z˛Sam∂eSw_evít_lo›
–
byã
 
èsk_id
, UINT16 
evíts
 );

104 #ifde‡
__˝lu•lus


	@Projects/zstack/HomeAutomation/SampleSwitch/Source/zcl_samplesw_data.c

44 
	~"ZComDef.h
"

45 
	~"OSAL.h
"

46 
	~"AF.h
"

47 
	~"ZDC⁄fig.h
"

49 
	~"z˛.h
"

50 
	~"z˛_gíîÆ.h
"

51 
	~"z˛_ha.h
"

53 
	~"z˛_ßm∂esw.h
"

59 
	#SAMPLESW_DEVICE_VERSION
 0

	)

60 
	#SAMPLESW_FLAGS
 0

	)

62 
	#SAMPLESW_HWVERSION
 0

	)

63 
	#SAMPLESW_ZCLVERSION
 0

	)

78 c⁄° 
uöt8
 
	gz˛Sam∂eSw_HWRevisi⁄
 = 
SAMPLESW_HWVERSION
;

79 c⁄° 
uöt8
 
	gz˛Sam∂eSw_ZCLVîsi⁄
 = 
SAMPLESW_ZCLVERSION
;

80 c⁄° 
uöt8
 
	gz˛Sam∂eSw_M™uÁ˘uªrName
[] = { 16, 'T','e','x','a','s','I','n','s','t','r','u','m','e','n','t','s' };

81 c⁄° 
uöt8
 
	gz˛Sam∂eSw_ModñId
[] = { 16, 'T','I','0','0','0','1',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ' };

82 c⁄° 
uöt8
 
	gz˛Sam∂eSw_D©eCode
[] = { 16, '2','0','0','6','0','8','3','1',' ',' ',' ',' ',' ',' ',' ',' ' };

83 c⁄° 
uöt8
 
	gz˛Sam∂eSw_PowîSour˚
 = 
POWER_SOURCE_MAINS_1_PHASE
;

85 
uöt8
 
	gz˛Sam∂eSw_Loˇti⁄Des¸ùti⁄
[17] = { 16, ' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ' };

86 
uöt8
 
	gz˛Sam∂eSw_PhysiˇlEnvú⁄mít
 = 0;

87 
uöt8
 
	gz˛Sam∂eSw_Devi˚E«bÀ
 = 
DEVICE_ENABLED
;

90 
uöt16
 
	gz˛Sam∂eSw_IdítifyTime
 = 0;

93 
uöt8
 
	gz˛Sam∂eSw_OnOff
 = 
LIGHT_OFF
;

98 
CONST
 
z˛AârRec_t
 
	gz˛Sam∂eSw_Aârs
[
SAMPLESW_MAX_ATTRIBUTES
] =

102 
ZCL_CLUSTER_ID_GEN_BASIC
,

104 
ATTRID_BASIC_HW_VERSION
,

105 
ZCL_DATATYPE_UINT8
,

106 
ACCESS_CONTROL_READ
,

107 (*)&
z˛Sam∂eSw_HWRevisi⁄


111 
ZCL_CLUSTER_ID_GEN_BASIC
,

113 
ATTRID_BASIC_ZCL_VERSION
,

114 
ZCL_DATATYPE_UINT8
,

115 
ACCESS_CONTROL_READ
,

116 (*)&
z˛Sam∂eSw_ZCLVîsi⁄


120 
ZCL_CLUSTER_ID_GEN_BASIC
,

122 
ATTRID_BASIC_MANUFACTURER_NAME
,

123 
ZCL_DATATYPE_CHAR_STR
,

124 
ACCESS_CONTROL_READ
,

125 (*)
z˛Sam∂eSw_M™uÁ˘uªrName


129 
ZCL_CLUSTER_ID_GEN_BASIC
,

131 
ATTRID_BASIC_MODEL_ID
,

132 
ZCL_DATATYPE_CHAR_STR
,

133 
ACCESS_CONTROL_READ
,

134 (*)
z˛Sam∂eSw_ModñId


138 
ZCL_CLUSTER_ID_GEN_BASIC
,

140 
ATTRID_BASIC_DATE_CODE
,

141 
ZCL_DATATYPE_CHAR_STR
,

142 
ACCESS_CONTROL_READ
,

143 (*)
z˛Sam∂eSw_D©eCode


147 
ZCL_CLUSTER_ID_GEN_BASIC
,

149 
ATTRID_BASIC_POWER_SOURCE
,

150 
ZCL_DATATYPE_UINT8
,

151 
ACCESS_CONTROL_READ
,

152 (*)&
z˛Sam∂eSw_PowîSour˚


156 
ZCL_CLUSTER_ID_GEN_BASIC
,

158 
ATTRID_BASIC_LOCATION_DESC
,

159 
ZCL_DATATYPE_CHAR_STR
,

160 (
ACCESS_CONTROL_READ
 | 
ACCESS_CONTROL_WRITE
),

161 (*)
z˛Sam∂eSw_Loˇti⁄Des¸ùti⁄


165 
ZCL_CLUSTER_ID_GEN_BASIC
,

167 
ATTRID_BASIC_PHYSICAL_ENV
,

168 
ZCL_DATATYPE_UINT8
,

169 (
ACCESS_CONTROL_READ
 | 
ACCESS_CONTROL_WRITE
),

170 (*)&
z˛Sam∂eSw_PhysiˇlEnvú⁄mít


174 
ZCL_CLUSTER_ID_GEN_BASIC
,

176 
ATTRID_BASIC_DEVICE_ENABLED
,

177 
ZCL_DATATYPE_UINT8
,

178 (
ACCESS_CONTROL_READ
 | 
ACCESS_CONTROL_WRITE
),

179 (*)&
z˛Sam∂eSw_Devi˚E«bÀ


185 
ZCL_CLUSTER_ID_GEN_IDENTIFY
,

187 
ATTRID_IDENTIFY_TIME
,

188 
ZCL_DATATYPE_UINT16
,

189 (
ACCESS_CONTROL_READ
 | 
ACCESS_CONTROL_WRITE
),

190 (*)&
z˛Sam∂eSw_IdítifyTime


196 
ZCL_CLUSTER_ID_GEN_ON_OFF
,

198 
ATTRID_ON_OFF
,

199 
ZCL_DATATYPE_UINT8
,

200 
ACCESS_CONTROL_READ
,

201 (*)&
z˛Sam∂eSw_OnOff


211 
	#ZCLSAMPLESW_MAX_INCLUSTERS
 1

	)

212 c⁄° 
cId_t
 
	gz˛Sam∂eSw_InClu°îLi°
[
ZCLSAMPLESW_MAX_INCLUSTERS
] =

214 
ZCL_CLUSTER_ID_GEN_BASIC


217 
	#ZCLSAMPLESW_MAX_OUTCLUSTERS
 1

	)

218 c⁄° 
cId_t
 
	gz˛Sam∂eSw_OutClu°îLi°
[
ZCLSAMPLESW_MAX_OUTCLUSTERS
] =

220 
ZCL_CLUSTER_ID_GEN_ON_OFF


223 
Sim∂eDes¸ùti⁄F‹m©_t
 
	gz˛Sam∂eSw_Sim∂eDesc
 =

225 
SAMPLESW_ENDPOINT
,

226 
ZCL_HA_PROFILE_ID
,

227 
ZCL_HA_DEVICEID_ON_OFF_SWITCH
,

228 
SAMPLESW_DEVICE_VERSION
,

229 
SAMPLESW_FLAGS
,

230 
ZCLSAMPLESW_MAX_INCLUSTERS
,

231 (
cId_t
 *)
z˛Sam∂eSw_InClu°îLi°
,

232 
ZCLSAMPLESW_MAX_OUTCLUSTERS
,

233 (
cId_t
 *)
z˛Sam∂eSw_OutClu°îLi°


	@Projects/zstack/HomeAutomation/Source/zcl_ha.c

43 
	~"ZComDef.h
"

44 
	~"OSAL.h
"

46 
	~"z˛.h
"

47 
	~"z˛_gíîÆ.h
"

48 
	~"z˛_˛osuªs.h
"

49 
	~"z˛_HVAC.h
"

50 
	~"z˛_ss.h
"

51 
	~"z˛_ms.h
"

52 
	~"z˛_lightög.h
"

53 
	~"z˛_ha.h
"

98 
	$z˛HA_Inô
–
Sim∂eDes¸ùti⁄F‹m©_t
 *
sim∂eDesc
 )

100 
ídPoötDesc_t
 *
ïDesc
;

104 
ïDesc
 = 
	`oßl_mem_Æloc
– ( 
ídPoötDesc_t
 ) );

105 i‡–
ïDesc
 )

108 
ïDesc
->
ídPoöt
 = 
sim∂eDesc
->
EndPoöt
;

109 
ïDesc
->
èsk_id
 = &
z˛_TaskID
;

110 
ïDesc
->
sim∂eDesc
 = simpleDesc;

111 
ïDesc
->
œãncyReq
 = 
noL©ícyReqs
;

114 
	`afRegi°î
–
ïDesc
 );

116 
	}
}

	@Projects/zstack/HomeAutomation/Source/zcl_ha.h

41 #i‚de‡
ZCL_HA_H


42 
	#ZCL_HA_H


	)

44 #ifde‡
__˝lu•lus


57 
	#ZCL_HA_PROFILE_ID
 0x0104

	)

60 
	#ZCL_HA_DEVICEID_ON_OFF_SWITCH
 0x0000

	)

61 
	#ZCL_HA_DEVICEID_LEVEL_CONTROL_SWITCH
 0x0001

	)

62 
	#ZCL_HA_DEVICEID_ON_OFF_OUTPUT
 0x0002

	)

63 
	#ZCL_HA_DEVICEID_LEVEL_CONTROLLABLE_OUTPUT
 0x0003

	)

64 
	#ZCL_HA_DEVICEID_SCENE_SELECTOR
 0x0004

	)

65 
	#ZCL_HA_DEVICEID_CONFIGURATIOPN_TOOL
 0x0005

	)

66 
	#ZCL_HA_DEVICEID_REMOTE_CONTROL
 0x0006

	)

67 
	#ZCL_HA_DEVICEID_COMBINED_INETRFACE
 0x0007

	)

68 
	#ZCL_HA_DEVICEID_RANGE_EXTENDER
 0x0008

	)

69 
	#ZCL_HA_DEVICEID_MAINS_POWER_OUTLET
 0x0009

	)

71 
	#ZCL_HA_DEVICEID_TEST_DEVICE
 0x00FF

	)

74 
	#ZCL_HA_DEVICEID_ON_OFF_LIGHT
 0x0100

	)

75 
	#ZCL_HA_DEVICEID_DIMMABLE_LIGHT
 0x0101

	)

76 
	#ZCL_HA_DEVICEID_COLORED_DIMMABLE_LIGHT
 0x0102

	)

77 
	#ZCL_HA_DEVICEID_ON_OFF_LIGHT_SWITCH
 0x0103

	)

78 
	#ZCL_HA_DEVICEID_DIMMER_SWITCH
 0x0104

	)

79 
	#ZCL_HA_DEVICEID_COLOR_DIMMER_SWITCH
 0x0105

	)

80 
	#ZCL_HA_DEVICEID_LIGHT_SENSOR
 0x0106

	)

81 
	#ZCL_HA_DEVICEID_OCCUPANCY_SENSOR
 0x0107

	)

84 
	#ZCL_HA_DEVICEID_SHADE
 0x0200

	)

85 
	#ZCL_HA_DEVICEID_SHADE_CONTROLLER
 0x0201

	)

88 
	#ZCL_HA_DEVICEID_HEATING_COOLING_UNIT
 0x0300

	)

89 
	#ZCL_HA_DEVICEID_THERMOSTAT
 0x0301

	)

90 
	#ZCL_HA_DEVICEID_TEMPERATURE_SENSOR
 0x0302

	)

91 
	#ZCL_HA_DEVICEID_PUMP
 0x0303

	)

92 
	#ZCL_HA_DEVICEID_PUMP_CONTROLLER
 0x0304

	)

93 
	#ZCL_HA_DEVICEID_PRESSURE_SENSOR
 0x0305

	)

94 
	#ZCL_HA_DEVICEID_FLOW_SENSOR
 0x0306

	)

97 
	#ZCL_HA_DEVICEID_IAS_CONTROL_INDICATING_EQUIPMENT
 0x0400

	)

98 
	#ZCL_HA_DEVICEID_IAS_ANCILLARY_CONTROL_EQUIPMENT
 0x0401

	)

99 
	#ZCL_HA_DEVICEID_IAS_ZONE
 0x0402

	)

100 
	#ZCL_HA_DEVICEID_IAS_WARNING_DEVICE
 0x0403

	)

117 
z˛HA_Inô
–
Sim∂eDes¸ùti⁄F‹m©_t
 *
sim∂eDesc
 );

122 #ifde‡
__˝lu•lus


	@Projects/zstack/SE/SampleApp/Source/ESP/OSAL_ESP.c

44 
	~"ZComDef.h
"

45 
	~"hÆ_drivîs.h
"

46 
	~"OSAL_Tasks.h
"

48 #i‡
deföed
 ( 
MT_TASK
 )

49 
	~"MT_TASK.h
"

52 
	~"ZDAµ.h
"

53 #i‡
deföed
 ( 
ZIGBEE_FREQ_AGILITY
 ) || deföed ( 
ZIGBEE_PANID_CONFLICT
 )

54 
	~"ZDNwkMgr.h
"

56 #i‡
deföed
 ( 
ZIGBEE_FRAGMENTATION
 )

57 
	~"≠s_‰ag.h
"

60 #i‡
deföed
 ( 
ZCL_KEY_ESTABLISH
 )

61 
	~"z˛_key_e°ablish.h
"

64 
	~"e•.h
"

71 c⁄° 
pTaskEvítH™dÀrFn
 
	gèsksAº
[] = {

72 
macEvítLo›
,

73 
nwk_evít_lo›
,

74 
HÆ_Pro˚ssEvít
,

75 #i‡
deföed
–
MT_TASK
 )

76 
MT_Pro˚ssEvít
,

78 
APS_evít_lo›
,

79 #i‡
deföed
 ( 
ZIGBEE_FRAGMENTATION
 )

80 
APSF_Pro˚ssEvít
,

82 
ZDAµ_evít_lo›
,

83 #i‡
deföed
 ( 
ZIGBEE_FREQ_AGILITY
 ) || deföed ( 
ZIGBEE_PANID_CONFLICT
 )

84 
ZDNwkMgr_evít_lo›
,

86 
z˛_evít_lo›
,

87 #i‡
deföed
 ( 
ZCL_KEY_ESTABLISH
 )

88 
z˛KeyE°ablish_evít_lo›
,

90 
e•_evít_lo›


93 c⁄° 
uöt8
 
	gèsksC¡
 = –
èsksAº
 ) / (ÅasksArr[0] );

94 
uöt16
 *
	gèsksEvíts
;

109 
	$oßlInôTasks
( )

111 
uöt8
 
èskID
 = 0;

113 
èsksEvíts
 = (
uöt16
 *)
	`oßl_mem_Æloc
––uöt16 ) * 
èsksC¡
);

114 
	`oßl_mem£t
–
èsksEvíts
, 0, (–
uöt16
 ) * 
èsksC¡
));

116 
	`macTaskInô
–
èskID
++ );

117 
	`nwk_öô
–
èskID
++ );

118 
	`HÆ_Inô
–
èskID
++ );

119 #i‡
	`deföed
–
MT_TASK
 )

120 
	`MT_TaskInô
–
èskID
++ );

122 
	`APS_Inô
–
èskID
++ );

123 #i‡
	`deföed
 ( 
ZIGBEE_FRAGMENTATION
 )

124 
	`APSF_Inô
–
èskID
++ );

126 
	`ZDAµ_Inô
–
èskID
++ );

127 #i‡
	`deföed
 ( 
ZIGBEE_FREQ_AGILITY
 ) || deföed ( 
ZIGBEE_PANID_CONFLICT
 )

128 
	`ZDNwkMgr_Inô
–
èskID
++ );

130 
	`z˛_Inô
–
èskID
++ );

131 #i‡
	`deföed
 ( 
ZCL_KEY_ESTABLISH
 )

132 
	`z˛GíîÆ_KeyE°ablish_Inô
–
èskID
++ );

134 
	`e•_Inô
–
èskID
 );

135 
	}
}

	@Projects/zstack/SE/SampleApp/Source/ESP/esp.c

66 
	~"OSAL.h
"

67 
	~"OSAL_Clock.h
"

68 
	~"MT.h
"

69 
	~"MT_APP.h
"

70 
	~"ZDObje˘.h
"

71 
	~"AddrMgr.h
"

73 
	~"£.h
"

74 
	~"e•.h
"

75 
	~"z˛_gíîÆ.h
"

76 
	~"z˛_£.h
"

77 
	~"z˛_key_e°ablish.h
"

79 
	~"⁄bﬂrd.h
"

82 
	~"hÆ_lcd.h
"

83 
	~"hÆ_Àd.h
"

84 
	~"hÆ_key.h
"

92 
	#z˛_M™d©‹yRï‹èbÀAâribuã
–
a
 ) (á =
NULL
 )

	)

98 
	#ESP_MIN_REPORTING_INTERVAL
 5

	)

116 
uöt8
 
	ge•TaskID
;

117 
afAddrTy≥_t
 
	gùdAddr
;

118 
afAddrTy≥_t
 
	gp˘Addr
;

119 
afAddrTy≥_t
 
	glﬂdC⁄åﬁAddr
;

120 
zAddrTy≥_t
 
	gsim∂eDescReqAddr
[2];

121 
uöt8
 
	gm©chR•Cou¡
 = 0;

122 
zAddrTy≥_t
 
	gd°M©chAddr
;

123 
z˛CCLﬂdC⁄åﬁEvít_t
 
	glﬂdC⁄åﬁCmd
;

126 c⁄° 
cId_t
 
	gm©chClu°îLi°
[1] =

128 
ZCL_CLUSTER_ID_SE_LOAD_CONTROL


133 
e•_H™dÀKeys
–
uöt8
 
shi·
, uöt8 
keys
 );

134 
e•_Pro˚ssAµMsg
–
uöt8
 *
msg
 );

136 #i‡
deföed
 (
ZCL_KEY_ESTABLISH
)

137 
uöt8
 
e•_KeyE°ablish_Rëu∫LökKey
–
uöt16
 
sh‹tAddr
 );

140 #i‡
deföed
 (
ZCL_ALARMS
)

141 
e•_Pro˚ssAœrmCmd
–
uöt8
 
§cEP
, 
afAddrTy≥_t
 *
d°Addr
,

142 
uöt16
 
˛u°îID
, 
z˛FømeHdr_t
 *
hdr
, 
uöt8
 
Àn
, uöt8 *
d©a
 );

145 
e•_Pro˚ssIdítifyTimeCh™ge
( );

152 
uöt8
 
e•_VÆid©eAârD©aCB
–
z˛AârRec_t
 *
pAâr
, 
z˛WrôeRec_t
 *
pAârInfo
 );

155 
e•_BasicRe£tCB
( );

156 
e•_IdítifyCB
–
z˛Idítify_t
 *
pCmd
 );

157 
e•_IdítifyQuîyR•CB
–
z˛IdítifyQuîyR•_t
 *
pR•
 );

158 
e•_AœrmCB
–
z˛Aœrm_t
 *
pAœrm
 );

161 
e•_GëProfûeCmdCB
–
z˛CCGëProfûeCmd_t
 *
pCmd
,

162 
afAddrTy≥_t
 *
§cAddr
, 
uöt8
 
£qNum
 );

163 
e•_GëProfûeR•CB
–
z˛CCGëProfûeR•_t
 *
pCmd
,

164 
afAddrTy≥_t
 *
§cAddr
, 
uöt8
 
£qNum
 );

165 
e•_ReqMúr‹CmdCB
–
afAddrTy≥_t
 *
§cAddr
, 
uöt8
 
£qNum
 );

166 
e•_ReqMúr‹R•CB
–
z˛CCReqMúr‹R•_t
 *
pCmd
,

167 
afAddrTy≥_t
 *
§cAddr
, 
uöt8
 
£qNum
 );

168 
e•_Múr‹RemCmdCB
–
afAddrTy≥_t
 *
§cAddr
, 
uöt8
 
£qNum
 );

169 
e•_Múr‹RemR•CB
–
z˛CCMúr‹RemR•_t
 *
pCmd
,

170 
afAddrTy≥_t
 *
§cAddr
, 
uöt8
 
£qNum
 );

171 
e•_GëCuºítPri˚CB
–
z˛CCGëCuºítPri˚_t
 *
pCmd
,

172 
afAddrTy≥_t
 *
§cAddr
, 
uöt8
 
£qNum
 );

173 
e•_GëScheduÀdPri˚CB
–
z˛CCGëScheduÀdPri˚_t
 *
pCmd
,

174 
afAddrTy≥_t
 *
§cAddr
, 
uöt8
 
£qNum
 );

175 
e•_PublishPri˚CB
–
z˛CCPublishPri˚_t
 *
pCmd
,

176 
afAddrTy≥_t
 *
§cAddr
, 
uöt8
 
£qNum
 );

177 
e•_Di•œyMesßgeCB
–
z˛CCDi•œyMesßge_t
 *
pCmd
,

178 
afAddrTy≥_t
 *
§cAddr
, 
uöt8
 
£qNum
 );

179 
e•_C™˚lMesßgeCB
–
z˛CCC™˚lMesßge_t
 *
pCmd
,

180 
afAddrTy≥_t
 *
§cAddr
, 
uöt8
 
£qNum
 );

181 
e•_GëLa°MesßgeCB
–
afAddrTy≥_t
 *
§cAddr
, 
uöt8
 
£qNum
 );

182 
e•_MesßgeC⁄fúm©i⁄CB
–
z˛CCMesßgeC⁄fúm©i⁄_t
 *
pCmd
,

183 
afAddrTy≥_t
 *
§cAddr
, 
uöt8
 
£qNum
 );

184 
e•_LﬂdC⁄åﬁEvítCB
–
z˛CCLﬂdC⁄åﬁEvít_t
 *
pCmd
,

185 
afAddrTy≥_t
 *
§cAddr
, 
uöt8
 
°©us
, uöt8 
£qNum
);

186 
e•_C™˚lLﬂdC⁄åﬁEvítCB
–
z˛CCC™˚lLﬂdC⁄åﬁEvít_t
 *
pCmd
,

187 
afAddrTy≥_t
 *
§cAddr
, 
uöt8
 
£qNum
 );

188 
e•_C™˚lAŒLﬂdC⁄åﬁEvítsCB
–
z˛CCC™˚lAŒLﬂdC⁄åﬁEvíts_t
 *
pCmd
,

189 
afAddrTy≥_t
 *
§cAddr
, 
uöt8
 
£qNum
);

190 
e•_Rï‹tEvítSètusCB
–
z˛CCRï‹tEvítSètus_t
 *
pCmd
,

191 
afAddrTy≥_t
 *
§cAddr
, 
uöt8
 
£qNum
 );

192 
e•_GëScheduÀdEvítCB
–
z˛CCGëScheduÀdEvít_t
 *
pCmd
,

193 
afAddrTy≥_t
 *
§cAddr
, 
uöt8
 
£qNum
);

199 
e•_Pro˚ssZCLMsg
–
z˛IncomögMsg_t
 *
msg
 );

200 #i‡
deföed
 ( 
ZCL_READ
 )

201 
uöt8
 
e•_Pro˚ssInRódR•Cmd
–
z˛IncomögMsg_t
 *
pInMsg
 );

203 #i‡
deföed
 ( 
ZCL_WRITE
 )

204 
uöt8
 
e•_Pro˚ssInWrôeR•Cmd
–
z˛IncomögMsg_t
 *
pInMsg
 );

206 #i‡
deföed
 ( 
ZCL_REPORT
 )

207 
uöt8
 
e•_Pro˚ssInC⁄figRï‹tCmd
–
z˛IncomögMsg_t
 *
pInMsg
 );

208 
uöt8
 
e•_Pro˚ssInC⁄figRï‹tR•Cmd
–
z˛IncomögMsg_t
 *
pInMsg
 );

209 
uöt8
 
e•_Pro˚ssInRódRï‹tCfgCmd
–
z˛IncomögMsg_t
 *
pInMsg
 );

210 
uöt8
 
e•_Pro˚ssInRódRï‹tCfgR•Cmd
–
z˛IncomögMsg_t
 *
pInMsg
 );

211 
uöt8
 
e•_Pro˚ssInRï‹tCmd
–
z˛IncomögMsg_t
 *
pInMsg
 );

213 
uöt8
 
e•_Pro˚ssInDeÁu…R•Cmd
–
z˛IncomögMsg_t
 *
pInMsg
 );

214 #i‡
deföed
 ( 
ZCL_DISCOVER
 )

215 
uöt8
 
e•_Pro˚ssInDiscR•Cmd
–
z˛IncomögMsg_t
 *
pInMsg
 );

219 
e•_Pro˚ssZDOMsg
–
zdoIncomögMsg_t
 *
öMsg
 );

223 
z˛GíîÆ_AµCÆlbacks_t
 
	ge•_GíCmdCÆlbacks
 =

225 
e•_BasicRe£tCB
,

226 
e•_IdítifyCB
,

227 
e•_IdítifyQuîyR•CB
,

228 
NULL
,

229 
NULL
,

230 
NULL
,

231 
NULL
,

232 
NULL
,

233 
NULL
,

234 
NULL
,

235 
NULL
,

236 
NULL
,

237 
e•_AœrmCB
,

238 
NULL
,

239 
NULL
,

245 
z˛SE_AµCÆlbacks_t
 
	ge•_SECmdCÆlbacks
 =

247 
e•_GëProfûeCmdCB
,

248 
e•_GëProfûeR•CB
,

249 
e•_ReqMúr‹CmdCB
,

250 
e•_ReqMúr‹R•CB
,

251 
e•_Múr‹RemCmdCB
,

252 
e•_Múr‹RemR•CB
,

253 
e•_GëCuºítPri˚CB
,

254 
e•_GëScheduÀdPri˚CB
,

255 
e•_PublishPri˚CB
,

256 
e•_Di•œyMesßgeCB
,

257 
e•_C™˚lMesßgeCB
,

258 
e•_GëLa°MesßgeCB
,

259 
e•_MesßgeC⁄fúm©i⁄CB
,

260 
e•_LﬂdC⁄åﬁEvítCB
,

261 
e•_C™˚lLﬂdC⁄åﬁEvítCB
,

262 
e•_C™˚lAŒLﬂdC⁄åﬁEvítsCB
,

263 
e•_Rï‹tEvítSètusCB
,

264 
e•_GëScheduÀdEvítCB
,

276 
	$e•_Inô
–
uöt8
 
èsk_id
 )

278 
e•TaskID
 = 
èsk_id
;

281 
	`z˛SE_Inô
–&
e•Sim∂eDesc
 );

284 
	`z˛GíîÆ_Regi°îCmdCÆlbacks
–
ESP_ENDPOINT
, &
e•_GíCmdCÆlbacks
 );

287 
	`z˛SE_Regi°îCmdCÆlbacks
–
ESP_ENDPOINT
, &
e•_SECmdCÆlbacks
 );

290 
	`z˛_ªgi°îAârLi°
–
ESP_ENDPOINT
, 
ESP_MAX_ATTRIBUTES
, 
e•Aârs
 );

293 
	`z˛_ªgi°îClu°îO±i⁄Li°
–
ESP_ENDPOINT
, 
ESP_MAX_OPTIONS
, 
e•O±i⁄s
 );

296 
	`z˛_ªgi°îVÆid©eAârD©a
–
e•_VÆid©eAârD©aCB
 );

299 
	`z˛_ªgi°îF‹Msg
–
e•TaskID
 );

302 
	`ZDO_Regi°îF‹ZDOMsg
–
e•TaskID
, 
M©ch_Desc_r•
 );

303 
	`ZDO_Regi°îF‹ZDOMsg
–
e•TaskID
, 
Sim∂e_Desc_r•
 );

306 
	`Regi°îF‹Keys
–
e•TaskID
 );

309 
	`oßl_°¨t_timîEx
–
e•TaskID
, 
ESP_UPDATE_TIME_EVT
, 
ESP_UPDATE_TIME_PERIOD
 );

312 
p˘Addr
.
addrMode
 = (
afAddrMode_t
)
Addr16Bô
;

313 
p˘Addr
.
ídPoöt
 = 
ESP_ENDPOINT
;

316 
lﬂdC⁄åﬁAddr
.
addrMode
 = (
afAddrMode_t
)
Addr16Bô
;

317 
lﬂdC⁄åﬁAddr
.
ídPoöt
 = 
ESP_ENDPOINT
;

320 
lﬂdC⁄åﬁCmd
.
issuîEvít
 = 0x12345678;

321 
lﬂdC⁄åﬁCmd
.
devi˚GroupCœss
 = 0x000000;

322 
lﬂdC⁄åﬁCmd
.
°¨tTime
 = 0x00000000;

323 
lﬂdC⁄åﬁCmd
.
duøti⁄InMöuãs
 = 0x0001;

324 
lﬂdC⁄åﬁCmd
.
¸ôiˇlôyLevñ
 = 0x01;

325 
lﬂdC⁄åﬁCmd
.
coﬁögTem≥øtuªSëPoöt
 = 0x076C;

326 
lﬂdC⁄åﬁCmd
.
evítC⁄åﬁ
 = 0x00;

327 
	}
}

339 
uöt16
 
	$e•_evít_lo›
–
uöt8
 
èsk_id
, 
uöt16
 
evíts
 )

341 
afIncomögMSGPackë_t
 *
MSGpkt
;

343 i‡–
evíts
 & 
SYS_EVENT_MSG
 )

345  (
MSGpkt
 = (
afIncomögMSGPackë_t
 *)
	`oßl_msg_ª˚ive
–
e•TaskID
 )) )

347  
MSGpkt
->
hdr
.
evít
 )

349 
MT_SYS_APP_MSG
:

351 
	`e•_Pro˚ssAµMsg
–((
mtSysAµMsg_t
 *)
MSGpkt
)->
≠pD©a
 );

354 
ZCL_INCOMING_MSG
:

356 
	`e•_Pro˚ssZCLMsg
–(
z˛IncomögMsg_t
 *)
MSGpkt
 );

359 
KEY_CHANGE
:

360 
	`e•_H™dÀKeys
–((
keyCh™ge_t
 *)
MSGpkt
)->
°©e
, ((keyCh™ge_à*)MSGpkt)->
keys
 );

363 
ZDO_CB_MSG
:

365 
	`e•_Pro˚ssZDOMsg
–(
zdoIncomögMsg_t
 *)
MSGpkt
 );

373 
	`oßl_msg_dóŒoˇã
–(
uöt8
 *)
MSGpkt
 );

378  (
evíts
 ^ 
SYS_EVENT_MSG
);

382 i‡–
evíts
 & 
ESP_IDENTIFY_TIMEOUT_EVT
 )

384 i‡–
e•IdítifyTime
 > 0 )

386 
e•IdítifyTime
--;

388 
	`e•_Pro˚ssIdítifyTimeCh™ge
();

390  ( 
evíts
 ^ 
ESP_IDENTIFY_TIMEOUT_EVT
 );

394 i‡–
evíts
 & 
ESP_UPDATE_TIME_EVT
 )

396 
e•Time
 = 
	`oßl_gëClock
();

397 
	`oßl_°¨t_timîEx
–
e•TaskID
, 
ESP_UPDATE_TIME_EVT
, 
ESP_UPDATE_TIME_PERIOD
 );

399  ( 
evíts
 ^ 
ESP_UPDATE_TIME_EVT
 );

404 i‡–
evíts
 & 
SIMPLE_DESC_QUERY_EVT_1
 )

406 
	`ZDP_Sim∂eDescReq
–&
sim∂eDescReqAddr
[0], sim∂eDescReqAddr[0].
addr
.
sh‹tAddr
,

407 
ESP_ENDPOINT
, 0);

409  ( 
evíts
 ^ 
SIMPLE_DESC_QUERY_EVT_1
 );

413 i‡–
evíts
 & 
SIMPLE_DESC_QUERY_EVT_2
 )

416 
	`ZDP_Sim∂eDescReq
–&
sim∂eDescReqAddr
[1], sim∂eDescReqAddr[1].
addr
.
sh‹tAddr
,

417 
ESP_ENDPOINT
, 0);

419  ( 
evíts
 ^ 
SIMPLE_DESC_QUERY_EVT_2
 );

424 
	}
}

437 
	$e•_Pro˚ssAµMsg
–
uöt8
 *
msg
 )

439 
afAddrTy≥_t
 
d°Addr
;

441 
d°Addr
.
addr
.
sh‹tAddr
 = 
	`BUILD_UINT16
–
msg
[0], msg[1] );

442 
	`e•_KeyE°ablish_Rëu∫LökKey
–
d°Addr
.
addr
.
sh‹tAddr
 );

443 
	}
}

454 
	$e•_Pro˚ssIdítifyTimeCh™ge
( )

456 i‡–
e•IdítifyTime
 > 0 )

458 
	`oßl_°¨t_timîEx
–
e•TaskID
, 
ESP_IDENTIFY_TIMEOUT_EVT
, 1000 );

459 
	`HÆLedBlök
 ( 
HAL_LED_4
, 0xFF, 
HAL_LED_DEFAULT_DUTY_CYCLE
, 
HAL_LED_DEFAULT_FLASH_TIME
 );

463 
	`HÆLedSë
 ( 
HAL_LED_4
, 
HAL_LED_MODE_OFF
 );

464 
	`oßl_°›_timîEx
–
e•TaskID
, 
ESP_IDENTIFY_TIMEOUT_EVT
 );

466 
	}
}

469 #i‡
deföed
 (
ZCL_KEY_ESTABLISH
)

479 
uöt8
 
	$e•_KeyE°ablish_Rëu∫LökKey
–
uöt16
 
sh‹tAddr
 )

481 
APSME_LökKeyD©a_t
* 
keyD©a
;

482 
uöt8
 
°©us
 = 
ZFaûuª
;

483 
uöt8
 
buf
[1+
SEC_KEY_LEN
];

484 
uöt8
 
Àn
 = 1;

485 
AddrMgrE¡ry_t
 
íåy
;

489 
íåy
.
u£r
 = 
ADDRMGR_USER_DEFAULT
;

490 
íåy
.
nwkAddr
 = 
sh‹tAddr
;

492 i‡–
	`AddrMgrE¡ryLookupNwk
–&
íåy
 ) )

495 
	`APSME_LökKeyD©aGë
–
íåy
.
extAddr
, &
keyD©a
 );

497 i‡–(
keyD©a
 !
NULL
Ë&& (keyD©a->
key
 != NULL) )

499 
°©us
 = 
ZSuc˚ss
;

500 
Àn
 +
SEC_KEY_LEN
;

506 
°©us
 = 
ZInvÆidP¨amëî
;

509 
buf
[0] = 
°©us
;

511 if–
°©us
 =
ZSuc˚ss
 )

513 
	`oßl_mem˝y
–&(
buf
[1]), 
keyD©a
->
key
, 
SEC_KEY_LEN
 );

516 
	`MT_BuûdAndSídZToﬁRe•⁄£
–((
uöt8
)
MT_RPC_CMD_AREQ
 | (uöt8)
MT_RPC_SYS_DBG
), 
MT_DEBUG_MSG
,

517 
Àn
, 
buf
 );

518  
°©us
;

519 
	}
}

535 
	$e•_H™dÀKeys
–
uöt8
 
shi·
, uöt8 
keys
 )

538 i‡–
shi·
 )

540 i‡–
keys
 & 
HAL_KEY_SW_1
 )

543 i‡–
keys
 & 
HAL_KEY_SW_2
 )

546 i‡–
keys
 & 
HAL_KEY_SW_3
 )

549 i‡–
keys
 & 
HAL_KEY_SW_4
 )

555 i‡–
keys
 & 
HAL_KEY_SW_1
 )

558 
lﬂdC⁄åﬁCmd
.
devi˚GroupCœss
 = 
HVAC_DEVICE_CLASS
;

559 
	`z˛SE_LﬂdC⁄åﬁ_Síd_LﬂdC⁄åﬁEvít
–
ESP_ENDPOINT
, &
p˘Addr
, &
lﬂdC⁄åﬁCmd
, 
TRUE
, 0 );

562 i‡–
keys
 & 
HAL_KEY_SW_2
 )

565 
lﬂdC⁄åﬁCmd
.
devi˚GroupCœss
 = 
ONOFF_LOAD_DEVICE_CLASS
;

566 
	`z˛SE_LﬂdC⁄åﬁ_Síd_LﬂdC⁄åﬁEvít
–
ESP_ENDPOINT
, &
lﬂdC⁄åﬁAddr
, &
lﬂdC⁄åﬁCmd
, 
TRUE
, 0 );

569 i‡–
keys
 & 
HAL_KEY_SW_3
 )

571 
z˛CCDi•œyMesßge_t
 
di•œyCmd
;

572 
uöt8
 
msgSåög
[]="Rcvd MESSAGE Cmd";

575 
di•œyCmd
.
msgSåög
.
°rLí
 = (msgString);

576 
di•œyCmd
.
msgSåög
.
pSå
 = msgString;

578 
	`z˛SE_Mesßge_Síd_Di•œyMesßge
–
ESP_ENDPOINT
, &
ùdAddr
, &
di•œyCmd
, 
TRUE
, 0 );

581 i‡–
keys
 & 
HAL_KEY_SW_4
 )

585 
	`HÆLedSë
 ( 
HAL_LED_4
, 
HAL_LED_MODE_OFF
 );

587 
d°M©chAddr
.
addrMode
 = 
AddrBrﬂdˇ°
;

588 
d°M©chAddr
.
addr
.
sh‹tAddr
 = 
NWK_BROADCAST_SHORTADDR
;

589 
	`ZDP_M©chDescReq
–&
d°M©chAddr
, 
NWK_BROADCAST_SHORTADDR
,

590 
ZCL_SE_PROFILE_ID
,

591 1, (
cId_t
 *)
m©chClu°îLi°
,

592 1, (
cId_t
 *)
m©chClu°îLi°
,

593 
FALSE
 );

597 
	}
}

611 
uöt8
 
	$e•_VÆid©eAârD©aCB
–
z˛AârRec_t
 *
pAâr
, 
z˛WrôeRec_t
 *
pAârInfo
 )

613 
uöt8
 
vÆid
 = 
TRUE
;

615  
pAârInfo
->
d©aTy≥
 )

617 
ZCL_DATATYPE_BOOLEAN
:

618 i‡––*(
pAârInfo
->
©åD©a
) != 0 ) && ( *(pAttrInfo->attrData) != 1 ) )

620 
vÆid
 = 
FALSE
;

628  ( 
vÆid
 );

629 
	}
}

641 
	$e•_BasicRe£tCB
( )

644 
	}
}

656 
	$e•_IdítifyCB
–
z˛Idítify_t
 *
pCmd
 )

658 
e•IdítifyTime
 = 
pCmd
->
idítifyTime
;

659 
	`e•_Pro˚ssIdítifyTimeCh™ge
();

660 
	}
}

672 
	$e•_IdítifyQuîyR•CB
–
z˛IdítifyQuîyR•_t
 *
pR•
 )

675 
	}
}

688 
	$e•_AœrmCB
–
z˛Aœrm_t
 *
pAœrm
 )

691 
	}
}

706 
	$e•_GëProfûeCmdCB
–
z˛CCGëProfûeCmd_t
 *
pCmd
, 
afAddrTy≥_t
 *
§cAddr
, 
uöt8
 
£qNum
 )

708 #i‡
	`deföed
 ( 
ZCL_SIMPLE_METERING
 )

716 
uöt32
 
ídTime
;

717 
uöt8
 
°©us
 = 
z˛SE_Sim∂eMëî_GëProfûeR•_Sètus_Suc˚ss
;

718 
uöt8
 
¥ofûeI¡îvÆPîiod
 = 
PROFILE_INTERVAL_PERIOD_60MIN
;

719 
uöt8
 
numbîOfPîiodDñivîed
 = 5;

720 
uöt24
 
öãrvÆs
[] = {0xa00001, 0xa00002, 0xa00003, 0xa00004, 0xa00005};

734 
ídTime
 = 
pCmd
->endTime;

738 
	`z˛SE_Sim∂eMëîög_Síd_GëProfûeR•
–
ESP_ENDPOINT
, 
§cAddr
, 
ídTime
,

739 
°©us
,

740 
¥ofûeI¡îvÆPîiod
,

741 
numbîOfPîiodDñivîed
, 
öãrvÆs
,

742 
Ál£
, 
£qNum
 );

744 
	}
}

759 
	$e•_GëProfûeR•CB
–
z˛CCGëProfûeR•_t
 *
pCmd
, 
afAddrTy≥_t
 *
§cAddr
, 
uöt8
 
£qNum
 )

762 
	}
}

776 
	$e•_ReqMúr‹CmdCB
–
afAddrTy≥_t
 *
§cAddr
, 
uöt8
 
£qNum
 )

779 
	}
}

793 
	$e•_ReqMúr‹R•CB
–
z˛CCReqMúr‹R•_t
 *
pR•
, 
afAddrTy≥_t
 *
§cAddr
, 
uöt8
 
£qNum
 )

796 
	}
}

809 
	$e•_Múr‹RemCmdCB
–
afAddrTy≥_t
 *
§cAddr
, 
uöt8
 
£qNum
 )

812 
	}
}

826 
	$e•_Múr‹RemR•CB
–
z˛CCMúr‹RemR•_t
 *
pCmd
, 
afAddrTy≥_t
 *
§cAddr
, 
uöt8
 
£qNum
 )

829 
	}
}

843 
	$e•_GëCuºítPri˚CB
–
z˛CCGëCuºítPri˚_t
 *
pCmd
,

844 
afAddrTy≥_t
 *
§cAddr
, 
uöt8
 
£qNum
 )

846 #i‡
	`deföed
 ( 
ZCL_PRICING
 )

849 
z˛CCPublishPri˚_t
 
cmd
;

851 
	`oßl_mem£t
–&
cmd
, 0, –
z˛CCPublishPri˚_t
 ) );

853 
cmd
.
¥ovidîId
 = 0xbabeface;

854 
cmd
.
¥i˚Tõr
 = 0xfe;

859 
	`oßl_mem˝y
–&
ùdAddr
, 
§cAddr
,  ( 
afAddrTy≥_t
 ) );

861 
	`z˛SE_Pricög_Síd_PublishPri˚
–
ESP_ENDPOINT
, 
§cAddr
, &
cmd
, 
Ál£
, 
£qNum
 );

863 
	}
}

878 
	$e•_GëScheduÀdPri˚CB
–
z˛CCGëScheduÀdPri˚_t
 *
pCmd
, 
afAddrTy≥_t
 *
§cAddr
, 
uöt8
 
£qNum
 )

884 #i‡
	`deföed
 ( 
ZCL_PRICING
 )

885 
z˛CCPublishPri˚_t
 
cmd
;

887 
	`oßl_mem£t
–&
cmd
, 0, –
z˛CCPublishPri˚_t
 ) );

889 
cmd
.
¥ovidîId
 = 0xbabeface;

890 
cmd
.
¥i˚Tõr
 = 0xfe;

892 
	`z˛SE_Pricög_Síd_PublishPri˚
–
ESP_ENDPOINT
, 
§cAddr
, &
cmd
, 
Ál£
, 
£qNum
 );

895 
	}
}

909 
	$e•_PublishPri˚CB
–
z˛CCPublishPri˚_t
 *
pCmd
,

910 
afAddrTy≥_t
 *
§cAddr
, 
uöt8
 
£qNum
 )

913 
	}
}

928 
	$e•_Di•œyMesßgeCB
–
z˛CCDi•œyMesßge_t
 *
pCmd
,

929 
afAddrTy≥_t
 *
§cAddr
, 
uöt8
 
£qNum
 )

942 #i‡
	`deföed
 ( 
LCD_SUPPORTED
 )

943 
	`HÆLcdWrôeSåög
–(*)
pCmd
->
msgSåög
.
pSå
, 
HAL_LCD_LINE_1
 );

945 
	}
}

960 
	$e•_C™˚lMesßgeCB
–
z˛CCC™˚lMesßge_t
 *
pCmd
,

961 
afAddrTy≥_t
 *
§cAddr
, 
uöt8
 
£qNum
 )

964 
	}
}

979 
	$e•_GëLa°MesßgeCB
–
afAddrTy≥_t
 *
§cAddr
, 
uöt8
 
£qNum
 )

984 #i‡
	`deföed
 ( 
ZCL_MESSAGE
 )

985 
z˛CCDi•œyMesßge_t
 
cmd
;

986 
uöt8
 
msg
[10] = { 0x20, 0x21, 0x22, 0x23, 0x24, 0x25, 0x26, 0x27, 0x28, 0x29 };

989 
cmd
.
mesßgeId
 = 0xaabbccdd;

990 
cmd
.
mesßgeCål
.
å™smissi⁄Mode
 = 0;

991 
cmd
.
mesßgeCål
.
imp‹èn˚
 = 1;

992 
cmd
.
mesßgeCål
.
c⁄fúm©i⁄Requúed
 = 1;

993 
cmd
.
duøti⁄InMöuãs
 = 60;

995 
cmd
.
msgSåög
.
°rLí
 = 10;

996 
cmd
.
msgSåög
.
pSå
 = 
msg
;

998 
	`z˛SE_Mesßge_Síd_Di•œyMesßge
–
ESP_ENDPOINT
, 
§cAddr
, &
cmd
,

999 
Ál£
, 
£qNum
 );

1001 
	}
}

1016 
	$e•_MesßgeC⁄fúm©i⁄CB
–
z˛CCMesßgeC⁄fúm©i⁄_t
 *
pCmd
,

1017 
afAddrTy≥_t
 *
§cAddr
, 
uöt8
 
£qNum
)

1020 
	}
}

1022 #i‡
deföed
 (
ZCL_LOAD_CONTROL
)

1040 
	$e•_SídRï‹tEvítSètus
–
afAddrTy≥_t
 *
§cAddr
, 
uöt8
 
£qNum
,

1041 
uöt32
 
evítID
, uöt32 
°¨tTime
,

1042 
uöt8
 
evítSètus
, uöt8 
¸ôiˇlôyLevñ
,

1043 
uöt8
 
evítC⁄åﬁ
 )

1045 
z˛CCRï‹tEvítSètus_t
 *
pR•
;

1047 
pR•
 = (
z˛CCRï‹tEvítSètus_t
 *)
	`oßl_mem_Æloc
( ( zclCCReportEventStatus_t ) );

1049 i‡–
pR•
 !
NULL
)

1052 
pR•
->
issuîEvítID
 = 
evítID
;

1053 
pR•
->
evítSèπTime
 = 
°¨tTime
;

1054 
pR•
->
¸ôiˇlôyLevñAµlõd
 = 
¸ôiˇlôyLevñ
;

1055 
pR•
->
evítC⁄åﬁ
 =ÉventControl;

1056 
pR•
->
evítSètus
 =ÉventStatus;

1057 
pR•
->
sig«tuªTy≥
 = 
SE_PROFILE_SIGNATURE_TYPE_ECDSA
;

1061 
	`oßl_mem˝y
–
pR•
->
sig«tuª
, 
e•Sig«tuª
, 16 );

1064 
pR•
->
coﬁögTem≥øtuªSëPoötAµlõd
 = 
SE_OPTIONAL_FIELD_TEMPERATURE_SET_POINT
;

1065 
pR•
->
hótögTem≥øtuªSëPoötAµlõd
 = 
SE_OPTIONAL_FIELD_TEMPERATURE_SET_POINT
;

1066 
pR•
->
avîageLﬂdAdju°mít
 = 
SE_OPTIONAL_FIELD_INT8
;

1067 
pR•
->
dutyCy˛eAµlõd
 = 
SE_OPTIONAL_FIELD_UINT8
;

1073 
	`z˛SE_LﬂdC⁄åﬁ_Síd_Rï‹tEvítSètus
–
ESP_ENDPOINT
, 
§cAddr
,

1074 
pR•
, 
Ál£
, 
£qNum
 );

1075 
	`oßl_mem_‰ì
–
pR•
 );

1077 
	}
}

1094 
	$e•_LﬂdC⁄åﬁEvítCB
–
z˛CCLﬂdC⁄åﬁEvít_t
 *
pCmd
,

1095 
afAddrTy≥_t
 *
§cAddr
, 
uöt8
 
°©us
,

1096 
uöt8
 
£qNum
)

1098 #i‡
	`deföed
 ( 
ZCL_LOAD_CONTROL
 )

1102 
uöt8
 
evítSètus
;

1104 i‡–
°©us
 =
ZCL_STATUS_INVALID_FIELD
 )

1108 
evítSètus
 = 
EVENT_STATUS_LOAD_CONTROL_EVENT_REJECTED
;

1112 
evítSètus
 = 
EVENT_STATUS_LOAD_CONTROL_EVENT_RECEIVED
;

1116 
	`e•_SídRï‹tEvítSètus
–
§cAddr
, 
£qNum
, 
pCmd
->
issuîEvít
,

1117 
pCmd
->
°¨tTime
, 
evítSètus
,

1118 
pCmd
->
¸ôiˇlôyLevñ
,ÖCmd->
evítC⁄åﬁ
);

1120 i‡–
°©us
 !
ZCL_STATUS_INVALID_FIELD
 )

1125 
	}
}

1140 
	$e•_C™˚lLﬂdC⁄åﬁEvítCB
–
z˛CCC™˚lLﬂdC⁄åﬁEvít_t
 *
pCmd
,

1141 
afAddrTy≥_t
 *
§cAddr
, 
uöt8
 
£qNum
 )

1143 #i‡
	`deföed
 ( 
ZCL_LOAD_CONTROL
 )

1165 
	`e•_SídRï‹tEvítSètus
–
§cAddr
, 
£qNum
, 
pCmd
->
issuîEvítID
,

1166 
SE_OPTIONAL_FIELD_UINT32
,

1167 
EVENT_STATUS_LOAD_CONTROL_EVENT_RECEIVED
,

1168 
SE_OPTIONAL_FIELD_UINT8
,

1169 
SE_OPTIONAL_FIELD_UINT8
 );

1173 
	}
}

1188 
	$e•_C™˚lAŒLﬂdC⁄åﬁEvítsCB
–
z˛CCC™˚lAŒLﬂdC⁄åﬁEvíts_t
 *
pCmd
,

1189 
afAddrTy≥_t
 *
§cAddr
, 
uöt8
 
£qNum
 )

1195 
	}
}

1210 
	$e•_Rï‹tEvítSètusCB
–
z˛CCRï‹tEvítSètus_t
 *
pCmd
,

1211 
afAddrTy≥_t
 *
§cAddr
, 
uöt8
 
£qNum
)

1214 
	}
}

1228 
	$e•_GëScheduÀdEvítCB
–
z˛CCGëScheduÀdEvít_t
 *
pCmd
,

1229 
afAddrTy≥_t
 *
§cAddr
, 
uöt8
 
£qNum
 )

1232 
	}
}

1250 
	$e•_Pro˚ssZDOMsg
–
zdoIncomögMsg_t
 *
öMsg
 )

1252  
öMsg
->
˛u°îID
 )

1254 
M©ch_Desc_r•
:

1256 
ZDO_A˘iveEndpoötR•_t
 *
pR•
 = 
	`ZDO_P¨£EPLi°R•
–
öMsg
 );

1257 i‡–
pR•
 )

1259 
m©chR•Cou¡
++;

1260 i‡–
pR•
->
°©us
 =
ZSuc˚ss
 &&ÖR•->
˙t
 )

1262 i‡–
m©chR•Cou¡
 == 1 )

1264 
sim∂eDescReqAddr
[0].
addrMode
 = (
afAddrMode_t
)
Addr16Bô
;

1265 
sim∂eDescReqAddr
[0].
addr
.
sh‹tAddr
 = 
pR•
->
nwkAddr
;

1268 
	`HÆLedSë
–
HAL_LED_4
, 
HAL_LED_MODE_ON
 );

1271 
	`oßl_£t_evít
–
e•TaskID
, 
SIMPLE_DESC_QUERY_EVT_1
 );

1273 i‡–
m©chR•Cou¡
 == 2 )

1275 
m©chR•Cou¡
 = 0;

1276 
sim∂eDescReqAddr
[1].
addrMode
 = (
afAddrMode_t
)
Addr16Bô
;

1277 
sim∂eDescReqAddr
[1].
addr
.
sh‹tAddr
 = 
pR•
->
nwkAddr
;

1280 
	`HÆLedSë
–
HAL_LED_4
, 
HAL_LED_MODE_ON
 );

1283 
	`oßl_£t_evít
–
e•TaskID
, 
SIMPLE_DESC_QUERY_EVT_2
 );

1287 
	`oßl_mem_‰ì
–
pR•
 );

1291 
Sim∂e_Desc_r•
:

1293 
ZDO_Sim∂eDescR•_t
 *
pSim∂eDescR•
;

1294 
pSim∂eDescR•
 = (
ZDO_Sim∂eDescR•_t
 *)
	`oßl_mem_Æloc
( ( ZDO_SimpleDescRsp_t ) );

1296 if(
pSim∂eDescR•
)

1298 
	`ZDO_P¨£Sim∂eDescR•
–
öMsg
, 
pSim∂eDescR•
 );

1299 if–
pSim∂eDescR•
->
sim∂eDesc
.
AµDevi˚Id
 =
ZCL_SE_DEVICEID_PCT
 )

1301 
p˘Addr
.
addr
.
sh‹tAddr
 = 
pSim∂eDescR•
->
nwkAddr
;

1303 i‡–
pSim∂eDescR•
->
sim∂eDesc
.
AµDevi˚Id
 =
ZCL_SE_DEVICEID_LOAD_CTRL_EXTENSION
 )

1305 
lﬂdC⁄åﬁAddr
.
addr
.
sh‹tAddr
 = 
pSim∂eDescR•
->
nwkAddr
;

1307 
	`oßl_mem_‰ì
–
pSim∂eDescR•
 );

1313 
	}
}

1331 
	$e•_Pro˚ssZCLMsg
–
z˛IncomögMsg_t
 *
pInMsg
 )

1333  
pInMsg
->
z˛Hdr
.
comm™dID
 )

1335 #i‡
	`deföed
 ( 
ZCL_READ
 )

1336 
ZCL_CMD_READ_RSP
:

1337 
	`e•_Pro˚ssInRódR•Cmd
–
pInMsg
 );

1340 #i‡
	`deföed
 ( 
ZCL_WRITE
 )

1341 
ZCL_CMD_WRITE_RSP
:

1342 
	`e•_Pro˚ssInWrôeR•Cmd
–
pInMsg
 );

1345 #i‡
	`deföed
 ( 
ZCL_REPORT
 )

1346 
ZCL_CMD_CONFIG_REPORT
:

1347 
	`e•_Pro˚ssInC⁄figRï‹tCmd
–
pInMsg
 );

1350 
ZCL_CMD_CONFIG_REPORT_RSP
:

1351 
	`e•_Pro˚ssInC⁄figRï‹tR•Cmd
–
pInMsg
 );

1354 
ZCL_CMD_READ_REPORT_CFG
:

1355 
	`e•_Pro˚ssInRódRï‹tCfgCmd
–
pInMsg
 );

1358 
ZCL_CMD_READ_REPORT_CFG_RSP
:

1359 
	`e•_Pro˚ssInRódRï‹tCfgR•Cmd
–
pInMsg
 );

1362 
ZCL_CMD_REPORT
:

1363 
	`e•_Pro˚ssInRï‹tCmd
–
pInMsg
 );

1366 
ZCL_CMD_DEFAULT_RSP
:

1367 
	`e•_Pro˚ssInDeÁu…R•Cmd
–
pInMsg
 );

1369 #i‡
	`deföed
 ( 
ZCL_DISCOVER
 )

1370 
ZCL_CMD_DISCOVER_RSP
:

1371 
	`e•_Pro˚ssInDiscR•Cmd
–
pInMsg
 );

1378 i‡–
pInMsg
->
©åCmd
 !
NULL
 )

1381 
	`oßl_mem_‰ì
–
pInMsg
->
©åCmd
 );

1382 
pInMsg
->
©åCmd
 = 
NULL
;

1384 
	}
}

1386 #i‡
deföed
 ( 
ZCL_READ
 )

1396 
uöt8
 
	$e•_Pro˚ssInRódR•Cmd
–
z˛IncomögMsg_t
 *
pInMsg
 )

1398 
z˛RódR•Cmd_t
 *
ªadR•Cmd
;

1399 
uöt8
 
i
;

1401 
ªadR•Cmd
 = (
z˛RódR•Cmd_t
 *)
pInMsg
->
©åCmd
;

1402 
i
 = 0; i < 
ªadR•Cmd
->
numAâr
; i++)

1409  
TRUE
;

1410 
	}
}

1413 #i‡
deföed
 ( 
ZCL_WRITE
 )

1423 
uöt8
 
	$e•_Pro˚ssInWrôeR•Cmd
–
z˛IncomögMsg_t
 *
pInMsg
 )

1425 
z˛WrôeR•Cmd_t
 *
wrôeR•Cmd
;

1426 
uöt8
 
i
;

1428 
wrôeR•Cmd
 = (
z˛WrôeR•Cmd_t
 *)
pInMsg
->
©åCmd
;

1429 
i
 = 0; i < 
wrôeR•Cmd
->
numAâr
; i++)

1435  
TRUE
;

1436 
	}
}

1439 #i‡
deföed
 ( 
ZCL_REPORT
 )

1450 
uöt8
 
	$e•_Pro˚ssInC⁄figRï‹tCmd
–
z˛IncomögMsg_t
 *
pInMsg
 )

1452 
z˛CfgRï‹tCmd_t
 *
cfgRï‹tCmd
;

1453 
z˛CfgRï‹tRec_t
 *
ªp‹tRec
;

1454 
z˛CfgRï‹tR•Cmd_t
 *
cfgRï‹tR•Cmd
;

1455 
z˛AârRec_t
 
©åRec
;

1456 
uöt8
 
°©us
;

1457 
uöt8
 
i
, 
j
 = 0;

1459 
cfgRï‹tCmd
 = (
z˛CfgRï‹tCmd_t
 *)
pInMsg
->
©åCmd
;

1462 
cfgRï‹tR•Cmd
 = (
z˛CfgRï‹tR•Cmd_t
 *)
	`oßl_mem_Æloc
(  ( zclCfgReportRspCmd_t ) +

1463  ( 
z˛CfgRï‹tSètus_t
Ë* 
cfgRï‹tCmd
->
numAâr
 );

1464 i‡–
cfgRï‹tR•Cmd
 =
NULL
 )

1465  
FALSE
;

1468  
i
 = 0; i < 
cfgRï‹tCmd
->
numAâr
; i++ )

1470 
ªp‹tRec
 = &(
cfgRï‹tCmd
->
©åLi°
[
i
]);

1472 
°©us
 = 
ZCL_STATUS_SUCCESS
;

1474 i‡–
	`z˛FödAârRec
–
ESP_ENDPOINT
, 
pInMsg
->
˛u°îId
, 
ªp‹tRec
->
©åID
, &
©åRec
 ) )

1476 i‡–
ªp‹tRec
->
dúe˘i⁄
 =
ZCL_SEND_ATTR_REPORTS
 )

1478 i‡–
ªp‹tRec
->
d©aTy≥
 =
©åRec
.
©å
.dataType )

1481 i‡–
	`z˛_M™d©‹yRï‹èbÀAâribuã
–&
©åRec
 ) =
TRUE
 )

1483 i‡–
ªp‹tRec
->
möRï‹tI¡
 < 
ESP_MIN_REPORTING_INTERVAL
 ||

1484 –
ªp‹tRec
->
maxRï‹tI¡
 != 0 &&

1485 
ªp‹tRec
->
maxRï‹tI¡
 <Ñï‹tRec->
möRï‹tI¡
 ) )

1488 
°©us
 = 
ZCL_STATUS_INVALID_VALUE
;

1494 
°©us
 = 
ZCL_STATUS_UNREPORTABLE_ATTRIBUTE
;

1500 
°©us
 = 
ZCL_STATUS_UNREPORTABLE_ATTRIBUTE
;

1506 
°©us
 = 
ZCL_STATUS_INVALID_DATA_TYPE
;

1512 i‡–
	`z˛_M™d©‹yRï‹èbÀAâribuã
–&
©åRec
 ) =
TRUE
 )

1516 
°©us
 = 
ZCL_STATUS_UNSUPPORTED_ATTRIBUTE
;

1521 
°©us
 = 
ZCL_STATUS_UNSUPPORTED_ATTRIBUTE
;

1528 
°©us
 = 
ZCL_STATUS_UNSUPPORTED_ATTRIBUTE
;

1532 i‡–
°©us
 !
ZCL_STATUS_SUCCESS
 )

1534 
cfgRï‹tR•Cmd
->
©åLi°
[
j
].
°©us
 = status;

1535 
cfgRï‹tR•Cmd
->
©åLi°
[
j
++].
©åID
 = 
ªp‹tRec
->attrID;

1539 i‡–
j
 == 0 )

1544 
cfgRï‹tR•Cmd
->
©åLi°
[0].
°©us
 = 
ZCL_STATUS_SUCCESS
;

1545 
cfgRï‹tR•Cmd
->
numAâr
 = 1;

1549 
cfgRï‹tR•Cmd
->
numAâr
 = 
j
;

1553 
	`z˛_SídC⁄figRï‹tR•Cmd
–
ESP_ENDPOINT
, &(
pInMsg
->
§cAddr
),

1554 
pInMsg
->
˛u°îId
, 
cfgRï‹tR•Cmd
, 
ZCL_FRAME_SERVER_CLIENT_DIR
,

1555 
åue
, 
pInMsg
->
z˛Hdr
.
å™sSeqNum
 );

1556 
	`oßl_mem_‰ì
–
cfgRï‹tR•Cmd
 );

1558  
TRUE
 ;

1559 
	}
}

1570 
uöt8
 
	$e•_Pro˚ssInC⁄figRï‹tR•Cmd
–
z˛IncomögMsg_t
 *
pInMsg
 )

1572 
z˛CfgRï‹tR•Cmd_t
 *
cfgRï‹tR•Cmd
;

1573 
z˛AârRec_t
 
©åRec
;

1574 
uöt8
 
i
;

1576 
cfgRï‹tR•Cmd
 = (
z˛CfgRï‹tR•Cmd_t
 *)
pInMsg
->
©åCmd
;

1577 
i
 = 0; i < 
cfgRï‹tR•Cmd
->
numAâr
; i++)

1579 i‡–
	`z˛FödAârRec
–
ESP_ENDPOINT
, 
pInMsg
->
˛u°îId
,

1580 
cfgRï‹tR•Cmd
->
©åLi°
[
i
].
©åID
, &
©åRec
 ) )

1587  
TRUE
;

1588 
	}
}

1599 
uöt8
 
	$e•_Pro˚ssInRódRï‹tCfgCmd
–
z˛IncomögMsg_t
 *
pInMsg
 )

1601 
z˛RódRï‹tCfgCmd_t
 *
ªadRï‹tCfgCmd
;

1602 
z˛RódRï‹tCfgR•Cmd_t
 *
ªadRï‹tCfgR•Cmd
;

1603 
z˛Rï‹tCfgR•Rec_t
 *
ªp‹tR•Rec
;

1604 
z˛AârRec_t
 
©åRec
;

1605 
uöt8
 
ªp‹tCh™geLí
;

1606 
uöt8
 *
d©aPå
;

1607 
uöt8
 
hdrLí
;

1608 
uöt8
 
d©aLí
 = 0;

1609 
uöt8
 
°©us
;

1610 
uöt8
 
i
;

1612 
ªadRï‹tCfgCmd
 = (
z˛RódRï‹tCfgCmd_t
 *)
pInMsg
->
©åCmd
;

1615  
i
 = 0; i < 
ªadRï‹tCfgCmd
->
numAâr
; i++ )

1619 i‡–
	`z˛FödAârRec
–
ESP_ENDPOINT
, 
pInMsg
->
˛u°îId
,

1620 
ªadRï‹tCfgCmd
->
©åLi°
[
i
].
©åID
, &
©åRec
 ) )

1622 i‡–
	`z˛A«logD©aTy≥
–
©åRec
.
©å
.
d©aTy≥
 ) )

1624 
ªp‹tCh™geLí
 = 
	`z˛GëD©aTy≥Lígth
–
©åRec
.
©å
.
d©aTy≥
 );

1627 i‡–
	`PADDING_NEEDED
–
ªp‹tCh™geLí
 ) )

1628 
ªp‹tCh™geLí
++;

1629 
d©aLí
 +
ªp‹tCh™geLí
;

1634 
hdrLí
 = –
z˛RódRï‹tCfgR•Cmd_t
 ) + ( 
ªadRï‹tCfgCmd
->
numAâr
 * –
z˛Rï‹tCfgR•Rec_t
 ) );

1637 
ªadRï‹tCfgR•Cmd
 = (
z˛RódRï‹tCfgR•Cmd_t
 *)
	`oßl_mem_Æloc
–
hdrLí
 + 
d©aLí
 );

1638 i‡–
ªadRï‹tCfgR•Cmd
 =
NULL
 )

1639  
FALSE
;

1641 
d©aPå
 = (
uöt8
 *)–(uöt8 *)
ªadRï‹tCfgR•Cmd
 + 
hdrLí
 );

1642 
ªadRï‹tCfgR•Cmd
->
numAâr
 = 
ªadRï‹tCfgCmd
->numAttr;

1643 
i
 = 0; i < 
ªadRï‹tCfgCmd
->
numAâr
; i++)

1645 
ªp‹tR•Rec
 = &(
ªadRï‹tCfgR•Cmd
->
©åLi°
[
i
]);

1647 i‡–
	`z˛FödAârRec
–
ESP_ENDPOINT
, 
pInMsg
->
˛u°îId
,

1648 
ªadRï‹tCfgCmd
->
©åLi°
[
i
].
©åID
, &
©åRec
 ) )

1650 i‡–
	`z˛_M™d©‹yRï‹èbÀAâribuã
–&
©åRec
 ) =
TRUE
 )

1654 
°©us
 = 
ZCL_STATUS_UNREPORTABLE_ATTRIBUTE
;

1655 i‡–
°©us
 =
ZCL_STATUS_SUCCESS
 && 
	`z˛A«logD©aTy≥
–
©åRec
.
©å
.
d©aTy≥
 ) )

1657 
ªp‹tCh™geLí
 = 
	`z˛GëD©aTy≥Lígth
–
©åRec
.
©å
.
d©aTy≥
 );

1659 
ªp‹tR•Rec
->
ªp‹èbÀCh™ge
 = 
d©aPå
;

1662 i‡–
	`PADDING_NEEDED
–
ªp‹tCh™geLí
 ) )

1663 
ªp‹tCh™geLí
++;

1664 
d©aPå
 +
ªp‹tCh™geLí
;

1670 
°©us
 = 
ZCL_STATUS_UNREPORTABLE_ATTRIBUTE
;

1676 
°©us
 = 
ZCL_STATUS_UNSUPPORTED_ATTRIBUTE
;

1679 
ªp‹tR•Rec
->
°©us
 = status;

1680 
ªp‹tR•Rec
->
©åID
 = 
ªadRï‹tCfgCmd
->
©åLi°
[
i
].attrID;

1684 
	`z˛_SídRódRï‹tCfgR•Cmd
–
ESP_ENDPOINT
, &(
pInMsg
->
§cAddr
),

1685 
pInMsg
->
˛u°îId
, 
ªadRï‹tCfgR•Cmd
, 
ZCL_FRAME_SERVER_CLIENT_DIR
,

1686 
åue
, 
pInMsg
->
z˛Hdr
.
å™sSeqNum
 );

1687 
	`oßl_mem_‰ì
–
ªadRï‹tCfgR•Cmd
 );

1689  
TRUE
;

1690 
	}
}

1701 
uöt8
 
	$e•_Pro˚ssInRódRï‹tCfgR•Cmd
–
z˛IncomögMsg_t
 *
pInMsg
 )

1703 
z˛RódRï‹tCfgR•Cmd_t
 *
ªadRï‹tCfgR•Cmd
;

1704 
z˛Rï‹tCfgR•Rec_t
 *
ªp‹tR•Rec
;

1705 
uöt8
 
i
;

1707 
ªadRï‹tCfgR•Cmd
 = (
z˛RódRï‹tCfgR•Cmd_t
 *)
pInMsg
->
©åCmd
;

1708  
i
 = 0; i < 
ªadRï‹tCfgR•Cmd
->
numAâr
; i++ )

1710 
ªp‹tR•Rec
 = &(
ªadRï‹tCfgR•Cmd
->
©åLi°
[
i
]);

1715 i‡–
ªp‹tR•Rec
->
°©us
 =
ZCL_STATUS_SUCCESS
 )

1717 i‡–
ªp‹tR•Rec
->
dúe˘i⁄
 =
ZCL_SEND_ATTR_REPORTS
 )

1728  
TRUE
;

1729 
	}
}

1740 
uöt8
 
	$e•_Pro˚ssInRï‹tCmd
–
z˛IncomögMsg_t
 *
pInMsg
 )

1742 
z˛Rï‹tCmd_t
 *
ªp‹tCmd
;

1743 
z˛Rï‹t_t
 *
ªp‹tRec
;

1744 
uöt8
 
i
;

1745 
uöt8
 *
mëîD©a
;

1746 
lcdBuf
[13];

1748 
ªp‹tCmd
 = (
z˛Rï‹tCmd_t
 *)
pInMsg
->
©åCmd
;

1749 
i
 = 0; i < 
ªp‹tCmd
->
numAâr
; i++)

1752 
ªp‹tRec
 = &(
ªp‹tCmd
->
©åLi°
[
i
]);

1754 i‡–
ªp‹tRec
->
©åID
 =
ATTRID_SE_CURRENT_SUMMATION_DELIVERED
 )

1757 
mëîD©a
 = 
ªp‹tRec
->
©åD©a
;

1760 
i
=0; i<6; i++)

1762 if(
mëîD©a
[5-
i
] == 0)

1764 
lcdBuf
[
i
*2] = '0';

1765 
lcdBuf
[
i
*2+1] = '0';

1767 if(
mëîD©a
[5-
i
] <= 0x0A)

1769 
lcdBuf
[
i
*2] = '0';

1770 
	`_…ﬂ
(
mëîD©a
[5-
i
],(
uöt8
*)&
lcdBuf
[i*2+1],16);

1774 
	`_…ﬂ
(
mëîD©a
[5-
i
],(
uöt8
*)&
lcdBuf
[i*2],16);

1779 
	`HÆLcdWrôeSåög
("Zigbì Co‹dÉ•", 
HAL_LCD_LINE_1
);

1780 
	`HÆLcdWrôeSåög
("Cuº Summ Dlvd", 
HAL_LCD_LINE_2
);

1781 
	`HÆLcdWrôeSåög
(
lcdBuf
, 
HAL_LCD_LINE_3
);

1784  
TRUE
;

1785 
	}
}

1797 
uöt8
 
	$e•_Pro˚ssInDeÁu…R•Cmd
–
z˛IncomögMsg_t
 *
pInMsg
 )

1803  
TRUE
;

1804 
	}
}

1806 #i‡
deföed
 ( 
ZCL_DISCOVER
 )

1816 
uöt8
 
	$e•_Pro˚ssInDiscR•Cmd
–
z˛IncomögMsg_t
 *
pInMsg
 )

1818 
z˛DiscovîR•Cmd_t
 *
discovîR•Cmd
;

1819 
uöt8
 
i
;

1821 
discovîR•Cmd
 = (
z˛DiscovîR•Cmd_t
 *)
pInMsg
->
©åCmd
;

1822  
i
 = 0; i < 
discovîR•Cmd
->
numAâr
; i++ )

1827  
TRUE
;

1828 
	}
}

	@Projects/zstack/SE/SampleApp/Source/ESP/esp.h

40 #i‚de‡
ESP_H


41 
	#ESP_H


	)

43 #ifde‡
__˝lu•lus


51 
	~"z˛.h
"

56 
	#ESP_ENDPOINT
 0x09

	)

58 
	#ESP_MAX_ATTRIBUTES
 53

	)

60 
	#ESP_MAX_OPTIONS
 8

	)

62 
	#ESP_UPDATE_TIME_PERIOD
 1000

63 

	)

64 
	#HVAC_DEVICE_CLASS
 0x000001

65 
	#ONOFF_LOAD_DEVICE_CLASS
 0x000080

66 

	)

68 
	#ESP_IDENTIFY_TIMEOUT_EVT
 0x0001

	)

69 
	#ESP_UPDATE_TIME_EVT
 0x0002

	)

70 
	#SIMPLE_DESC_QUERY_EVT_1
 0x0004

	)

71 
	#SIMPLE_DESC_QUERY_EVT_2
 0x0008

	)

86 
Sim∂eDes¸ùti⁄F‹m©_t
 
e•Sim∂eDesc
;

87 
CONST
 
z˛AârRec_t
 
e•Aârs
[];

88 
z˛O±i⁄Rec_t
 
e•O±i⁄s
[];

89 
uöt8
 
e•Devi˚E«bÀd
;

90 
uöt16
 
e•Tønsôi⁄Time
;

91 
uöt16
 
e•IdítifyTime
;

92 
uöt32
 
e•Time
;

93 
uöt8
 
e•Sig«tuª
[];

101 
e•_Inô
–
uöt8
 
èsk_id
 );

105 
uöt16
 
e•_evít_lo›
–
uöt8
 
èsk_id
, uöt16 
evíts
 );

111 #ifde‡
__˝lu•lus


	@Projects/zstack/SE/SampleApp/Source/ESP/esp_data.c

44 
	~"ZComDef.h
"

45 
	~"OSAL_Clock.h
"

46 
	~"ZDC⁄fig.h
"

48 
	~"£.h
"

49 
	~"e•.h
"

50 
	~"z˛_gíîÆ.h
"

51 
	~"z˛_£.h
"

52 
	~"z˛_key_e°ablish.h
"

57 
	#ESP_DEVICE_VERSION
 0

	)

58 
	#ESP_FLAGS
 0

	)

60 
	#ESP_HWVERSION
 1

	)

61 
	#ESP_ZCLVERSION
 1

	)

75 c⁄° 
uöt8
 
	ge•ZCLVîsi⁄
 = 
ESP_ZCLVERSION
;

76 c⁄° 
uöt8
 
	ge•HWVîsi⁄
 = 
ESP_HWVERSION
;

77 c⁄° 
uöt8
 
	ge•M™uÁ˘uªrName
[] = { 16, 'T','e','x','a','s','I','n','s','t','r','u','m','e','n','t','s' };

78 c⁄° 
uöt8
 
	ge•ModñId
[] = { 16, 'T','I','0','0','0','1',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ' };

79 c⁄° 
uöt8
 
	ge•D©eCode
[] = { 16, '2','0','0','6','0','8','3','1',' ',' ',' ',' ',' ',' ',' ',' ' };

80 c⁄° 
uöt8
 
	ge•PowîSour˚
 = 
POWER_SOURCE_MAINS_1_PHASE
;

82 
uöt8
 
	ge•Loˇti⁄Des¸ùti⁄
[] = { 16, ' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ' };

83 
uöt8
 
	ge•PhysiˇlEnvú⁄mít
 = 
PHY_UNSPECIFIED_ENV
;

84 
uöt8
 
	ge•Devi˚E«bÀd
 = 
DEVICE_ENABLED
;

87 
uöt16
 
	ge•IdítifyTime
 = 0;

88 
uöt32
 
	ge•Time
 = 0;

89 
uöt8
 
	ge•TimeSètus
 = 0x01;

92 
uöt8
 
	ge•CuºítSumm©i⁄Dñivîed
[] = { 0x11, 0x22, 0x33, 0x44, 0x55, 0x66 };

93 
uöt8
 
	ge•CuºítSumm©i⁄Re˚ived
[] = { 0x11, 0x22, 0x33, 0x44, 0x55, 0x66 };

94 
uöt8
 
	ge•CuºítMaxDem™dDñivîed
[] = { 0x11, 0x22, 0x33, 0x44, 0x55, 0x66 };

95 
uöt8
 
	ge•CuºítMaxDem™dRe˚ived
[] = { 0x11, 0x22, 0x33, 0x44, 0x55, 0x66 };

96 
uöt8
 
	ge•CuºítTõr1Summ©i⁄Dñivîed
[] = { 0x11, 0x22, 0x33, 0x44, 0x55, 0x66 };

97 
uöt8
 
	ge•CuºítTõr1Summ©i⁄Re˚ived
[] = { 0x11, 0x22, 0x33, 0x44, 0x55, 0x66 };

98 
uöt8
 
	ge•CuºítTõr2Summ©i⁄Dñivîed
[] = { 0x11, 0x22, 0x33, 0x44, 0x55, 0x66 };

99 
uöt8
 
	ge•CuºítTõr2Summ©i⁄Re˚ived
[] = { 0x11, 0x22, 0x33, 0x44, 0x55, 0x66 };

100 
uöt8
 
	ge•CuºítTõr3Summ©i⁄Dñivîed
[] = { 0x11, 0x22, 0x33, 0x44, 0x55, 0x66 };

101 
uöt8
 
	ge•CuºítTõr3Summ©i⁄Re˚ived
[] = { 0x11, 0x22, 0x33, 0x44, 0x55, 0x66 };

102 
uöt8
 
	ge•CuºítTõr4Summ©i⁄Dñivîed
[] = { 0x11, 0x22, 0x33, 0x44, 0x55, 0x66 };

103 
uöt8
 
	ge•CuºítTõr4Summ©i⁄Re˚ived
[] = { 0x11, 0x22, 0x33, 0x44, 0x55, 0x66 };

104 
uöt8
 
	ge•CuºítTõr5Summ©i⁄Dñivîed
[] = { 0x11, 0x22, 0x33, 0x44, 0x55, 0x66 };

105 
uöt8
 
	ge•CuºítTõr5Summ©i⁄Re˚ived
[] = { 0x11, 0x22, 0x33, 0x44, 0x55, 0x66 };

106 
uöt8
 
	ge•CuºítTõr6Summ©i⁄Dñivîed
[] = { 0x11, 0x22, 0x33, 0x44, 0x55, 0x66 };

107 
uöt8
 
	ge•CuºítTõr6Summ©i⁄Re˚ived
[] = { 0x11, 0x22, 0x33, 0x44, 0x55, 0x66 };

108 
uöt8
 
	ge•DFTSumm©i⁄
[] = { 0x11, 0x22, 0x33, 0x44, 0x55, 0x66 };

109 
uöt16
 
	ge•DaûyFªezeTime
 = 0x01;

110 
öt8
 
	ge•PowîFa˘‹
 = 0x01;

111 
UTCTime
 
	ge•S«pshŸTime
 = 0x00;

112 
UTCTime
 
	ge•MaxDem™dDñivîdTime
 = 0x00;

113 
UTCTime
 
	ge•MaxDem™dRe˚ivedTime
 = 0x00;

116 
uöt8
 
	ge•Sètus
 = 0x12;

119 
uöt8
 
	ge•UnôOfMósuª
 = 0x01;

120 
uöt24
 
	ge•Mu…ùlõr
 = 0x01;

121 
uöt24
 
	ge•Divis‹
 = 0x01;

122 
uöt8
 
	ge•Summ©i⁄F‹m©ög
 = 0x01;

123 
uöt8
 
	ge•Dem™dF‹m©tög
 = 0x01;

124 
uöt8
 
	ge•Hi°‹iˇlC⁄sum±i⁄F‹m©tög
 = 0x01;

127 
uöt24
 
	ge•In°™ã√ousDem™d
 = 0x01;

128 
uöt24
 
	ge•CuºítdayC⁄sum±i⁄Dñivîed
 = 0x01;

129 
uöt24
 
	ge•CuºítdayC⁄sum±i⁄Re˚ived
 = 0x01;

130 
uöt24
 
	ge•PªviousdayC⁄sum±i⁄Dñivîed
 = 0x01;

131 
uöt24
 
	ge•PªviousdayC⁄sumçi⁄Re˚ived
 = 0x01;

132 
UTCTime
 
	ge•CuºítP¨tülProfûeI¡îvÆSèπTime
 = 0x1000;

133 
uöt24
 
	ge•CuºítP¨tülProfûeI¡îvÆVÆue
 = 0x0001;

134 
uöt8
 
	ge•MaxNumbîOfPîiodsDñivîed
 = 0x01;

137 
uöt8
 
	ge•UtûôyDeföedGroup
 = 0x00;

138 
uöt8
 
	ge•SèπR™domizeMöuãs
 = 0x00;

139 
uöt8
 
	ge•St›R™domizeMöuãs
 = 0x00;

140 
uöt8
 
	ge•Sig«tuª
[] = {0x00, 0x01, 0x02, 0x03, 0x04, 0x05, 0x06, 0x07,

144 
uöt16
 
	ge•KeyE°ablishmítSuôe
 = 
CERTIFICATE_BASED_KEY_ESTABLISHMENT
;

149 
CONST
 
z˛AârRec_t
 
	ge•Aârs
[
ESP_MAX_ATTRIBUTES
] =

154 
ZCL_CLUSTER_ID_GEN_BASIC
,

156 
ATTRID_BASIC_ZCL_VERSION
,

157 
ZCL_DATATYPE_UINT8
,

158 
ACCESS_CONTROL_READ
,

159 (*)&
e•ZCLVîsi⁄


163 
ZCL_CLUSTER_ID_GEN_BASIC
,

165 
ATTRID_BASIC_HW_VERSION
,

166 
ZCL_DATATYPE_UINT8
,

167 
ACCESS_CONTROL_READ
,

168 (*)&
e•HWVîsi⁄


172 
ZCL_CLUSTER_ID_GEN_BASIC
,

174 
ATTRID_BASIC_MANUFACTURER_NAME
,

175 
ZCL_DATATYPE_CHAR_STR
,

176 
ACCESS_CONTROL_READ
,

177 (*)
e•M™uÁ˘uªrName


181 
ZCL_CLUSTER_ID_GEN_BASIC
,

183 
ATTRID_BASIC_MODEL_ID
,

184 
ZCL_DATATYPE_CHAR_STR
,

185 
ACCESS_CONTROL_READ
,

186 (*)
e•ModñId


190 
ZCL_CLUSTER_ID_GEN_BASIC
,

192 
ATTRID_BASIC_DATE_CODE
,

193 
ZCL_DATATYPE_CHAR_STR
,

194 
ACCESS_CONTROL_READ
,

195 (*)
e•D©eCode


199 
ZCL_CLUSTER_ID_GEN_BASIC
,

201 
ATTRID_BASIC_POWER_SOURCE
,

202 
ZCL_DATATYPE_ENUM8
,

203 
ACCESS_CONTROL_READ
,

204 (*)&
e•PowîSour˚


208 
ZCL_CLUSTER_ID_GEN_BASIC
,

210 
ATTRID_BASIC_LOCATION_DESC
,

211 
ZCL_DATATYPE_CHAR_STR
,

212 (
ACCESS_CONTROL_READ
 | 
ACCESS_CONTROL_WRITE
),

213 (*)
e•Loˇti⁄Des¸ùti⁄


217 
ZCL_CLUSTER_ID_GEN_BASIC
,

219 
ATTRID_BASIC_PHYSICAL_ENV
,

220 
ZCL_DATATYPE_ENUM8
,

221 (
ACCESS_CONTROL_READ
 | 
ACCESS_CONTROL_WRITE
),

222 (*)&
e•PhysiˇlEnvú⁄mít


226 
ZCL_CLUSTER_ID_GEN_BASIC
,

228 
ATTRID_BASIC_DEVICE_ENABLED
,

229 
ZCL_DATATYPE_BOOLEAN
,

230 (
ACCESS_CONTROL_READ
 | 
ACCESS_CONTROL_WRITE
),

231 (*)&
e•Devi˚E«bÀd


237 
ZCL_CLUSTER_ID_GEN_IDENTIFY
,

239 
ATTRID_IDENTIFY_TIME
,

240 
ZCL_DATATYPE_UINT16
,

241 (
ACCESS_CONTROL_READ
 | 
ACCESS_CONTROL_WRITE
),

242 (*)&
e•IdítifyTime


250 
ZCL_CLUSTER_ID_GEN_TIME
,

252 
ATTRID_TIME_TIME
,

253 
ZCL_DATATYPE_UTC
,

254 
ACCESS_CONTROL_READ
,

255 (*)&
e•Time


261 
ZCL_CLUSTER_ID_GEN_TIME
,

263 
ATTRID_TIME_STATUS
,

264 
ZCL_DATATYPE_BITMAP8
,

265 
ACCESS_CONTROL_READ
,

266 (*)&
e•TimeSètus


273 
ZCL_CLUSTER_ID_SE_SIMPLE_METERING
,

275 
ATTRID_SE_CURRENT_SUMMATION_DELIVERED
,

276 
ZCL_DATATYPE_UINT48
,

277 
ACCESS_CONTROL_READ
,

278 (*)
e•CuºítSumm©i⁄Dñivîed


282 
ZCL_CLUSTER_ID_SE_SIMPLE_METERING
,

284 
ATTRID_SE_CURRENT_SUMMATION_RECEIVED
,

285 
ZCL_DATATYPE_UINT48
,

286 
ACCESS_CONTROL_READ
,

287 (*)
e•CuºítSumm©i⁄Re˚ived


291 
ZCL_CLUSTER_ID_SE_SIMPLE_METERING
,

293 
ATTRID_SE_CURRENT_MAX_DEMAND_DELIVERED
,

294 
ZCL_DATATYPE_UINT48
,

295 
ACCESS_CONTROL_READ
,

296 (*)
e•CuºítMaxDem™dDñivîed


300 
ZCL_CLUSTER_ID_SE_SIMPLE_METERING
,

302 
ATTRID_SE_CURRENT_MAX_DEMAND_RECEIVED
,

303 
ZCL_DATATYPE_UINT48
,

304 
ACCESS_CONTROL_READ
,

305 (*)
e•CuºítMaxDem™dRe˚ived


309 
ZCL_CLUSTER_ID_SE_SIMPLE_METERING
,

311 
ATTRID_SE_CURRENT_TIER1_SUMMATION_DELIVERED
,

312 
ZCL_DATATYPE_UINT48
,

313 
ACCESS_CONTROL_READ
,

314 (*)
e•CuºítTõr1Summ©i⁄Dñivîed


318 
ZCL_CLUSTER_ID_SE_SIMPLE_METERING
,

320 
ATTRID_SE_CURRENT_TIER1_SUMMATION_RECEIVED
,

321 
ZCL_DATATYPE_UINT48
,

322 
ACCESS_CONTROL_READ
,

323 (*)
e•CuºítTõr1Summ©i⁄Re˚ived


327 
ZCL_CLUSTER_ID_SE_SIMPLE_METERING
,

329 
ATTRID_SE_CURRENT_TIER2_SUMMATION_DELIVERED
,

330 
ZCL_DATATYPE_UINT48
,

331 
ACCESS_CONTROL_READ
,

332 (*)
e•CuºítTõr2Summ©i⁄Dñivîed


336 
ZCL_CLUSTER_ID_SE_SIMPLE_METERING
,

338 
ATTRID_SE_CURRENT_TIER2_SUMMATION_RECEIVED
,

339 
ZCL_DATATYPE_UINT48
,

340 
ACCESS_CONTROL_READ
,

341 (*)
e•CuºítTõr2Summ©i⁄Re˚ived


345 
ZCL_CLUSTER_ID_SE_SIMPLE_METERING
,

347 
ATTRID_SE_CURRENT_TIER3_SUMMATION_DELIVERED
,

348 
ZCL_DATATYPE_UINT48
,

349 
ACCESS_CONTROL_READ
,

350 (*)
e•CuºítTõr3Summ©i⁄Dñivîed


354 
ZCL_CLUSTER_ID_SE_SIMPLE_METERING
,

356 
ATTRID_SE_CURRENT_TIER3_SUMMATION_RECEIVED
,

357 
ZCL_DATATYPE_UINT48
,

358 
ACCESS_CONTROL_READ
,

359 (*)
e•CuºítTõr3Summ©i⁄Re˚ived


363 
ZCL_CLUSTER_ID_SE_SIMPLE_METERING
,

365 
ATTRID_SE_CURRENT_TIER4_SUMMATION_DELIVERED
,

366 
ZCL_DATATYPE_UINT48
,

367 
ACCESS_CONTROL_READ
,

368 (*)
e•CuºítTõr4Summ©i⁄Dñivîed


372 
ZCL_CLUSTER_ID_SE_SIMPLE_METERING
,

374 
ATTRID_SE_CURRENT_TIER4_SUMMATION_RECEIVED
,

375 
ZCL_DATATYPE_UINT48
,

376 
ACCESS_CONTROL_READ
,

377 (*)
e•CuºítTõr4Summ©i⁄Re˚ived


381 
ZCL_CLUSTER_ID_SE_SIMPLE_METERING
,

383 
ATTRID_SE_CURRENT_TIER5_SUMMATION_DELIVERED
,

384 
ZCL_DATATYPE_UINT48
,

385 
ACCESS_CONTROL_READ
,

386 (*)
e•CuºítTõr5Summ©i⁄Dñivîed


390 
ZCL_CLUSTER_ID_SE_SIMPLE_METERING
,

392 
ATTRID_SE_CURRENT_TIER5_SUMMATION_RECEIVED
,

393 
ZCL_DATATYPE_UINT48
,

394 
ACCESS_CONTROL_READ
,

395 (*)
e•CuºítTõr5Summ©i⁄Re˚ived


399 
ZCL_CLUSTER_ID_SE_SIMPLE_METERING
,

401 
ATTRID_SE_CURRENT_TIER6_SUMMATION_DELIVERED
,

402 
ZCL_DATATYPE_UINT48
,

403 
ACCESS_CONTROL_READ
,

404 (*)
e•CuºítTõr6Summ©i⁄Dñivîed


408 
ZCL_CLUSTER_ID_SE_SIMPLE_METERING
,

410 
ATTRID_SE_CURRENT_TIER6_SUMMATION_RECEIVED
,

411 
ZCL_DATATYPE_UINT48
,

412 
ACCESS_CONTROL_READ
,

413 (*)
e•CuºítTõr6Summ©i⁄Re˚ived


417 
ZCL_CLUSTER_ID_SE_SIMPLE_METERING
,

419 
ATTRID_SE_DFT_SUMMATION
,

420 
ZCL_DATATYPE_UINT48
,

421 
ACCESS_CONTROL_READ
,

422 (*)
e•DFTSumm©i⁄


426 
ZCL_CLUSTER_ID_SE_SIMPLE_METERING
,

428 
ATTRID_SE_DAILY_FREEZE_TIME
,

429 
ZCL_DATATYPE_UINT16
,

430 
ACCESS_CONTROL_READ
,

431 (*)&
e•DaûyFªezeTime


435 
ZCL_CLUSTER_ID_SE_SIMPLE_METERING
,

437 
ATTRID_SE_POWER_FACTOR
,

438 
ZCL_DATATYPE_INT8
,

439 
ACCESS_CONTROL_READ
,

440 (*)&
e•PowîFa˘‹


444 
ZCL_CLUSTER_ID_SE_SIMPLE_METERING
,

446 
ATTRID_SE_READING_SNAPSHOT_TIME
,

447 
ZCL_DATATYPE_UTC
,

448 
ACCESS_CONTROL_READ
,

449 (*)&
e•S«pshŸTime


453 
ZCL_CLUSTER_ID_SE_SIMPLE_METERING
,

455 
ATTRID_SE_CURRENT_MAX_DEMAND_DELIVERD_TIME
,

456 
ZCL_DATATYPE_UTC
,

457 
ACCESS_CONTROL_READ
,

458 (*)&
e•MaxDem™dDñivîdTime


462 
ZCL_CLUSTER_ID_SE_SIMPLE_METERING
,

464 
ATTRID_SE_CURRENT_MAX_DEMAND_RECEIVED_TIME
,

465 
ZCL_DATATYPE_UTC
,

466 
ACCESS_CONTROL_READ
,

467 (*)&
e•MaxDem™dRe˚ivedTime


471 
ZCL_CLUSTER_ID_SE_SIMPLE_METERING
,

473 
ATTRID_SE_STATUS
,

474 
ZCL_DATATYPE_BITMAP8
,

475 
ACCESS_CONTROL_READ
,

476 (*)&
e•Sètus


481 
ZCL_CLUSTER_ID_SE_SIMPLE_METERING
,

483 
ATTRID_SE_UNIT_OF_MEASURE
,

484 
ZCL_DATATYPE_ENUM8
,

485 
ACCESS_CONTROL_READ
,

486 (*)&
e•UnôOfMósuª


490 
ZCL_CLUSTER_ID_SE_SIMPLE_METERING
,

492 
ATTRID_SE_MULTIPLIER
,

493 
ZCL_DATATYPE_UINT24
,

494 
ACCESS_CONTROL_READ
,

495 (*)&
e•Mu…ùlõr


499 
ZCL_CLUSTER_ID_SE_SIMPLE_METERING
,

501 
ATTRID_SE_DIVISOR
,

502 
ZCL_DATATYPE_UINT24
,

503 
ACCESS_CONTROL_READ
,

504 (*)&
e•Divis‹


508 
ZCL_CLUSTER_ID_SE_SIMPLE_METERING
,

510 
ATTRID_SE_SUMMATION_FORMATTING
,

511 
ZCL_DATATYPE_BITMAP8
,

512 
ACCESS_CONTROL_READ
,

513 (*)&
e•Summ©i⁄F‹m©ög


517 
ZCL_CLUSTER_ID_SE_SIMPLE_METERING
,

519 
ATTRID_SE_DEMAND_FORMATTING
,

520 
ZCL_DATATYPE_BITMAP8
,

521 
ACCESS_CONTROL_READ
,

522 (*)&
e•Dem™dF‹m©tög


526 
ZCL_CLUSTER_ID_SE_SIMPLE_METERING
,

528 
ATTRID_SE_HISTORICAL_CONSUMPTION_FORMATTING
,

529 
ZCL_DATATYPE_BITMAP8
,

530 
ACCESS_CONTROL_READ
,

531 (*)&
e•Hi°‹iˇlC⁄sum±i⁄F‹m©tög


535 
ZCL_CLUSTER_ID_SE_SIMPLE_METERING
,

537 
ATTRID_SE_INSTANTANEOUS_DEMAND
,

538 
ZCL_DATATYPE_UINT24
,

539 
ACCESS_CONTROL_READ
,

540 (*)&
e•In°™ã√ousDem™d


544 
ZCL_CLUSTER_ID_SE_SIMPLE_METERING
,

546 
ATTRID_SE_CURRENTDAY_CONSUMPTION_DELIVERED
,

547 
ZCL_DATATYPE_UINT24
,

548 
ACCESS_CONTROL_READ
,

549 (*)&
e•CuºítdayC⁄sum±i⁄Dñivîed


553 
ZCL_CLUSTER_ID_SE_SIMPLE_METERING
,

555 
ATTRID_SE_CURRENTDAY_CONSUMPTION_RECEIVED
,

556 
ZCL_DATATYPE_UINT24
,

557 
ACCESS_CONTROL_READ
,

558 (*)&
e•CuºítdayC⁄sum±i⁄Re˚ived


562 
ZCL_CLUSTER_ID_SE_SIMPLE_METERING
,

564 
ATTRID_SE_PREVIOUSDAY_CONSUMPTION_DELIVERED
,

565 
ZCL_DATATYPE_UINT24
,

566 
ACCESS_CONTROL_READ
,

567 (*)&
e•PªviousdayC⁄sum±i⁄Dñivîed


571 
ZCL_CLUSTER_ID_SE_SIMPLE_METERING
,

573 
ATTRID_SE_PREVIOUSDAY_CONSUMPTION_RECEIVED
,

574 
ZCL_DATATYPE_UINT24
,

575 
ACCESS_CONTROL_READ
,

576 (*)&
e•PªviousdayC⁄sumçi⁄Re˚ived


580 
ZCL_CLUSTER_ID_SE_SIMPLE_METERING
,

582 
ATTRID_SE_CURRENT_PARTIAL_PROFILE_INTERVAL_START_TIME
,

583 
ZCL_DATATYPE_UTC
,

584 
ACCESS_CONTROL_READ
,

585 (*)&
e•CuºítP¨tülProfûeI¡îvÆSèπTime


590 
ZCL_CLUSTER_ID_SE_SIMPLE_METERING
,

592 
ATTRID_SE_CURRENT_PARTIAL_PROFILE_INTERVAL_VALUE
,

593 
ZCL_DATATYPE_UINT24
,

594 
ACCESS_CONTROL_READ
,

595 (*)&
e•CuºítP¨tülProfûeI¡îvÆVÆue


600 
ZCL_CLUSTER_ID_SE_SIMPLE_METERING
,

602 
ATTRID_SE_MAX_NUMBER_OF_PERIODS_DELIVERED
,

603 
ZCL_DATATYPE_UINT8
,

604 
ACCESS_CONTROL_READ
,

605 (*)&
e•MaxNumbîOfPîiodsDñivîed


609 
ZCL_CLUSTER_ID_SE_LOAD_CONTROL
,

611 
ATTRID_SE_UTILITY_DEFINED_GROUP
,

612 
ZCL_DATATYPE_UINT8
,

613 
ACCESS_CONTROL_READ
 | 
ACCESS_CONTROL_WRITE
,

614 (*)&
e•UtûôyDeföedGroup


618 
ZCL_CLUSTER_ID_SE_LOAD_CONTROL
,

620 
ATTRID_SE_START_RANDOMIZE_MINUTES
,

621 
ZCL_DATATYPE_UINT8
,

622 
ACCESS_CONTROL_READ
 | 
ACCESS_CONTROL_WRITE
,

623 (*)&
e•SèπR™domizeMöuãs


627 
ZCL_CLUSTER_ID_SE_LOAD_CONTROL
,

629 
ATTRID_SE_STOP_RANDOMIZE_MINUTES
,

630 
ZCL_DATATYPE_UINT8
,

631 
ACCESS_CONTROL_READ
 | 
ACCESS_CONTROL_WRITE
,

632 (*)&
e•St›R™domizeMöuãs


636 
ZCL_CLUSTER_ID_GEN_KEY_ESTABLISHMENT
,

638 
ATTRID_KEY_ESTABLISH_SUITE
,

639 
ZCL_DATATYPE_BITMAP16
,

640 
ACCESS_CONTROL_READ
,

641 (*)&
e•KeyE°ablishmítSuôe


649 
z˛O±i⁄Rec_t
 
	ge•O±i⁄s
[
ESP_MAX_OPTIONS
] =

653 
ZCL_CLUSTER_ID_GEN_TIME
,

654 –
AF_EN_SECURITY
 ),

659 
ZCL_CLUSTER_ID_SE_PRICING
,

660 –
AF_EN_SECURITY
 ),

663 
ZCL_CLUSTER_ID_SE_LOAD_CONTROL
,

664 –
AF_EN_SECURITY
 ),

667 
ZCL_CLUSTER_ID_SE_SIMPLE_METERING
,

668 –
AF_EN_SECURITY
 ),

671 
ZCL_CLUSTER_ID_SE_MESSAGE
,

672 –
AF_EN_SECURITY
 ),

675 
ZCL_CLUSTER_ID_SE_SE_TUNNELING
,

676 –
AF_EN_SECURITY
 ),

679 
ZCL_CLUSTER_ID_SE_PRE_PAYMENT
,

680 –
AF_EN_SECURITY
 ),

689 
	#ESP_MAX_INCLUSTERS
 6

	)

690 c⁄° 
cId_t
 
	ge•InClu°îLi°
[
ESP_MAX_INCLUSTERS
] =

692 
ZCL_CLUSTER_ID_GEN_BASIC
,

693 
ZCL_CLUSTER_ID_GEN_IDENTIFY
,

694 
ZCL_CLUSTER_ID_SE_PRICING
,

695 
ZCL_CLUSTER_ID_SE_LOAD_CONTROL
,

696 
ZCL_CLUSTER_ID_SE_SIMPLE_METERING
,

697 
ZCL_CLUSTER_ID_SE_MESSAGE


700 
	#ESP_MAX_OUTCLUSTERS
 6

	)

701 c⁄° 
cId_t
 
	ge•OutClu°îLi°
[
ESP_MAX_OUTCLUSTERS
] =

703 
ZCL_CLUSTER_ID_GEN_BASIC
,

704 
ZCL_CLUSTER_ID_GEN_IDENTIFY
,

705 
ZCL_CLUSTER_ID_SE_PRICING
,

706 
ZCL_CLUSTER_ID_SE_LOAD_CONTROL
,

707 
ZCL_CLUSTER_ID_SE_SIMPLE_METERING
,

708 
ZCL_CLUSTER_ID_SE_MESSAGE


711 
Sim∂eDes¸ùti⁄F‹m©_t
 
	ge•Sim∂eDesc
 =

713 
ESP_ENDPOINT
,

714 
ZCL_SE_PROFILE_ID
,

715 
ZCL_SE_DEVICEID_ESP
,

716 
ESP_DEVICE_VERSION
,

717 
ESP_FLAGS
,

718 
ESP_MAX_INCLUSTERS
,

719 (
cId_t
 *)
e•InClu°îLi°
,

720 
ESP_MAX_OUTCLUSTERS
,

721 (
cId_t
 *)
e•OutClu°îLi°


	@Projects/zstack/SE/SampleApp/Source/IPD/OSAL_ipd.c

44 
	~"ZComDef.h
"

45 
	~"hÆ_drivîs.h
"

46 
	~"OSAL_Tasks.h
"

48 #i‡
deföed
 ( 
MT_TASK
 )

49 
	~"MT_TASK.h
"

52 
	~"ZDAµ.h
"

53 #i‡
deföed
 ( 
ZIGBEE_FREQ_AGILITY
 ) || deföed ( 
ZIGBEE_PANID_CONFLICT
 )

54 
	~"ZDNwkMgr.h
"

56 #i‡
deföed
 ( 
ZIGBEE_FRAGMENTATION
 )

57 
	~"≠s_‰ag.h
"

60 #i‡
deföed
 ( 
ZCL_KEY_ESTABLISH
 )

61 
	~"z˛_key_e°ablish.h
"

64 
	~"ùd.h
"

71 c⁄° 
pTaskEvítH™dÀrFn
 
	gèsksAº
[] = {

72 
macEvítLo›
,

73 
nwk_evít_lo›
,

74 
HÆ_Pro˚ssEvít
,

75 #i‡
deföed
–
MT_TASK
 )

76 
MT_Pro˚ssEvít
,

78 
APS_evít_lo›
,

79 #i‡
deföed
 ( 
ZIGBEE_FRAGMENTATION
 )

80 
APSF_Pro˚ssEvít
,

82 
ZDAµ_evít_lo›
,

83 #i‡
deföed
 ( 
ZIGBEE_FREQ_AGILITY
 ) || deföed ( 
ZIGBEE_PANID_CONFLICT
 )

84 
ZDNwkMgr_evít_lo›
,

86 
z˛_evít_lo›
,

87 #i‡
deföed
 ( 
ZCL_KEY_ESTABLISH
 )

88 
z˛KeyE°ablish_evít_lo›
,

90 
ùd_evít_lo›


93 c⁄° 
uöt8
 
	gèsksC¡
 = –
èsksAº
 ) / (ÅasksArr[0] );

94 
uöt16
 *
	gèsksEvíts
;

109 
	$oßlInôTasks
( )

111 
uöt8
 
èskID
 = 0;

113 
èsksEvíts
 = (
uöt16
 *)
	`oßl_mem_Æloc
––uöt16 ) * 
èsksC¡
);

114 
	`oßl_mem£t
–
èsksEvíts
, 0, (–
uöt16
 ) * 
èsksC¡
));

116 
	`macTaskInô
–
èskID
++ );

117 
	`nwk_öô
–
èskID
++ );

118 
	`HÆ_Inô
–
èskID
++ );

119 #i‡
	`deföed
–
MT_TASK
 )

120 
	`MT_TaskInô
–
èskID
++ );

122 
	`APS_Inô
–
èskID
++ );

123 #i‡
	`deföed
 ( 
ZIGBEE_FRAGMENTATION
 )

124 
	`APSF_Inô
–
èskID
++ );

126 
	`ZDAµ_Inô
–
èskID
++ );

127 #i‡
	`deföed
 ( 
ZIGBEE_FREQ_AGILITY
 ) || deföed ( 
ZIGBEE_PANID_CONFLICT
 )

128 
	`ZDNwkMgr_Inô
–
èskID
++ );

130 
	`z˛_Inô
–
èskID
++ );

131 #i‡
	`deföed
 ( 
ZCL_KEY_ESTABLISH
 )

132 
	`z˛GíîÆ_KeyE°ablish_Inô
–
èskID
++ );

134 
	`ùd_Inô
–
èskID
 );

135 
	}
}

	@Projects/zstack/SE/SampleApp/Source/IPD/ipd.c

65 
	~"OSAL.h
"

66 
	~"OSAL_Clock.h
"

67 
	~"ZDAµ.h
"

68 
	~"AddrMgr.h
"

70 
	~"£.h
"

71 
	~"ùd.h
"

72 
	~"z˛_gíîÆ.h
"

73 
	~"z˛_£.h
"

74 
	~"z˛_key_e°ablish.h
"

76 
	~"⁄bﬂrd.h
"

79 
	~"hÆ_lcd.h
"

80 
	~"hÆ_Àd.h
"

81 
	~"hÆ_key.h
"

89 
	#z˛_M™d©‹yRï‹èbÀAâribuã
–
a
 ) (á =
NULL
 )

	)

111 
uöt8
 
	gùdTaskID
;

112 
uöt8
 
	gùdTønsID
;

113 
devSèãs_t
 
	gùdNwkSèã
;

114 
afAddrTy≥_t
 
	gESPAddr
;

115 
uöt8
 
	glökKeySètus
;

116 
uöt8
 
	g›ti⁄
;

121 
ùd_H™dÀKeys
–
uöt8
 
shi·
, uöt8 
keys
 );

123 #i‡
deföed
 (
ZCL_KEY_ESTABLISH
)

124 
uöt8
 
ùd_KeyE°ablish_Rëu∫LökKey
–
uöt16
 
sh‹tAddr
 );

127 #i‡
deföed
 ( 
ZCL_ALARMS
 )

128 
ùd_Pro˚ssAœrmCmd
–
uöt8
 
§cEP
, 
afAddrTy≥_t
 *
d°Addr
,

129 
uöt16
 
˛u°îID
, 
z˛FømeHdr_t
 *
hdr
, 
uöt8
 
Àn
, uöt8 *
d©a
 );

132 
ùd_Pro˚ssIdítifyTimeCh™ge
( );

139 
uöt8
 
ùd_VÆid©eAârD©aCB
–
z˛AârRec_t
 *
pAâr
, 
z˛WrôeRec_t
 *
pAârInfo
 );

142 
ùd_BasicRe£tCB
( );

143 
ùd_IdítifyCB
–
z˛Idítify_t
 *
pCmd
 );

144 
ùd_IdítifyQuîyR•CB
–
z˛IdítifyQuîyR•_t
 *
pR•
 );

145 
ùd_AœrmCB
–
z˛Aœrm_t
 *
pAœrm
 );

148 
ùd_GëCuºítPri˚CB
–
z˛CCGëCuºítPri˚_t
 *
pCmd
,

149 
afAddrTy≥_t
 *
§cAddr
, 
uöt8
 
£qNum
 );

150 
ùd_GëScheduÀdPri˚CB
–
z˛CCGëScheduÀdPri˚_t
 *
pCmd
,

151 
afAddrTy≥_t
 *
§cAddr
, 
uöt8
 
£qNum
 );

152 
ùd_PublishPri˚CB
–
z˛CCPublishPri˚_t
 *
pCmd
,

153 
afAddrTy≥_t
 *
§cAddr
, 
uöt8
 
£qNum
 );

154 
ùd_Di•œyMesßgeCB
–
z˛CCDi•œyMesßge_t
 *
pCmd
,

155 
afAddrTy≥_t
 *
§cAddr
, 
uöt8
 
£qNum
 );

156 
ùd_C™˚lMesßgeCB
–
z˛CCC™˚lMesßge_t
 *
pCmd
,

157 
afAddrTy≥_t
 *
§cAddr
, 
uöt8
 
£qNum
 );

158 
ùd_GëLa°MesßgeCB
–
afAddrTy≥_t
 *
§cAddr
, 
uöt8
 
£qNum
 );

159 
ùd_MesßgeC⁄fúm©i⁄CB
–
z˛CCMesßgeC⁄fúm©i⁄_t
 *
pCmd
,

160 
afAddrTy≥_t
 *
§cAddr
, 
uöt8
 
£qNum
 );

167 
ùd_Pro˚ssZCLMsg
–
z˛IncomögMsg_t
 *
msg
 );

168 #i‡
deföed
 ( 
ZCL_READ
 )

169 
uöt8
 
ùd_Pro˚ssInRódR•Cmd
–
z˛IncomögMsg_t
 *
pInMsg
 );

171 #i‡
deföed
 ( 
ZCL_WRITE
 )

172 
uöt8
 
ùd_Pro˚ssInWrôeR•Cmd
–
z˛IncomögMsg_t
 *
pInMsg
 );

174 
uöt8
 
ùd_Pro˚ssInDeÁu…R•Cmd
–
z˛IncomögMsg_t
 *
pInMsg
 );

175 #i‡
deföed
 ( 
ZCL_DISCOVER
 )

176 
uöt8
 
ùd_Pro˚ssInDiscR•Cmd
–
z˛IncomögMsg_t
 *
pInMsg
 );

182 
z˛GíîÆ_AµCÆlbacks_t
 
	gùd_GíCmdCÆlbacks
 =

184 
ùd_BasicRe£tCB
,

185 
ùd_IdítifyCB
,

186 
ùd_IdítifyQuîyR•CB
,

187 
NULL
,

188 
NULL
,

189 
NULL
,

190 
NULL
,

191 
NULL
,

192 
NULL
,

193 
NULL
,

194 
NULL
,

195 
NULL
,

196 
ùd_AœrmCB
,

197 
NULL
,

198 
NULL
,

204 
z˛SE_AµCÆlbacks_t
 
	gùd_SECmdCÆlbacks
 =

206 
NULL
,

207 
NULL
,

208 
NULL
,

209 
NULL
,

210 
NULL
,

211 
NULL
,

212 
ùd_GëCuºítPri˚CB
,

213 
ùd_GëScheduÀdPri˚CB
,

214 
ùd_PublishPri˚CB
,

215 
ùd_Di•œyMesßgeCB
,

216 
ùd_C™˚lMesßgeCB
,

217 
ùd_GëLa°MesßgeCB
,

218 
ùd_MesßgeC⁄fúm©i⁄CB
,

219 
NULL
,

220 
NULL
,

221 
NULL
,

222 
NULL
,

223 
NULL
,

235 
	$ùd_Inô
–
uöt8
 
èsk_id
 )

237 
ùdTaskID
 = 
èsk_id
;

238 
ùdNwkSèã
 = 
DEV_INIT
;

239 
ùdTønsID
 = 0;

246 
ESPAddr
.
addrMode
 = (
afAddrMode_t
)
Addr16Bô
;

247 
ESPAddr
.
ídPoöt
 = 
IPD_ENDPOINT
;

248 
ESPAddr
.
addr
.
sh‹tAddr
 = 0;

251 
	`z˛SE_Inô
–&
ùdSim∂eDesc
 );

254 
	`z˛GíîÆ_Regi°îCmdCÆlbacks
–
IPD_ENDPOINT
, &
ùd_GíCmdCÆlbacks
 );

257 
	`z˛SE_Regi°îCmdCÆlbacks
–
IPD_ENDPOINT
, &
ùd_SECmdCÆlbacks
 );

260 
	`z˛_ªgi°îAârLi°
–
IPD_ENDPOINT
, 
IPD_MAX_ATTRIBUTES
, 
ùdAârs
 );

263 
	`z˛_ªgi°îClu°îO±i⁄Li°
–
IPD_ENDPOINT
, 
IPD_MAX_OPTIONS
, 
ùdO±i⁄s
 );

266 
	`z˛_ªgi°îVÆid©eAârD©a
–
ùd_VÆid©eAârD©aCB
 );

269 
	`z˛_ªgi°îF‹Msg
–
ùdTaskID
 );

272 
	`Regi°îF‹Keys
–
ùdTaskID
 );

275 
	`oßl_°¨t_timîEx
–
ùdTaskID
, 
IPD_UPDATE_TIME_EVT
, 
IPD_UPDATE_TIME_PERIOD
 );

276 
	}
}

288 
uöt16
 
	$ùd_evít_lo›
–
uöt8
 
èsk_id
, 
uöt16
 
evíts
 )

290 
afIncomögMSGPackë_t
 *
MSGpkt
;

292 i‡–
evíts
 & 
SYS_EVENT_MSG
 )

294  (
MSGpkt
 = (
afIncomögMSGPackë_t
 *)
	`oßl_msg_ª˚ive
–
ùdTaskID
 )) )

296  
MSGpkt
->
hdr
.
evít
 )

298 
ZCL_INCOMING_MSG
:

300 
	`ùd_Pro˚ssZCLMsg
–(
z˛IncomögMsg_t
 *)
MSGpkt
 );

303 
KEY_CHANGE
:

304 
	`ùd_H™dÀKeys
–((
keyCh™ge_t
 *)
MSGpkt
)->
°©e
, ((keyCh™ge_à*)MSGpkt)->
keys
 );

307 
ZDO_STATE_CHANGE
:

308 
ùdNwkSèã
 = (
devSèãs_t
)(
MSGpkt
->
hdr
.
°©us
);

310 i‡(
ZG_SECURE_ENABLED
)

312 i‡–
ùdNwkSèã
 =
DEV_END_DEVICE
 )

315 
lökKeySètus
 = 
	`ùd_KeyE°ablish_Rëu∫LökKey
(
ESPAddr
.
addr
.
sh‹tAddr
);

317 i‡(
lökKeySètus
 !
ZSuc˚ss
)

320 
	`oßl_£t_evít
–
ùdTaskID
, 
IPD_KEY_ESTABLISHMENT_REQUEST_EVT
);

325 
	`oßl_°¨t_timîEx
–
ùdTaskID
, 
IPD_GET_PRICING_INFO_EVT
, 
IPD_GET_PRICING_INFO_PERIOD
 );

331 
	`oßl_°¨t_timîEx
–
ùdTaskID
, 
IPD_GET_PRICING_INFO_EVT
, 
IPD_GET_PRICING_INFO_PERIOD
 );

334 
	`NLME_SëPﬁlR©e
 ( 
SE_DEVICE_POLL_RATE
 );

338 #i‡
	`deföed
–
ZCL_KEY_ESTABLISH
 )

339 
ZCL_KEY_ESTABLISH_IND
:

340 
	`oßl_°¨t_timîEx
–
ùdTaskID
, 
IPD_GET_PRICING_INFO_EVT
, 
IPD_GET_PRICING_INFO_PERIOD
 );

350 
	`oßl_msg_dóŒoˇã
–(
uöt8
 *)
MSGpkt
 );

355  (
evíts
 ^ 
SYS_EVENT_MSG
);

359 i‡–
evíts
 & 
IPD_KEY_ESTABLISHMENT_REQUEST_EVT
 )

361 
	`z˛GíîÆ_KeyE°ablish_InôüãKeyE°ablishmít
(
ùdTaskID
, &
ESPAddr
, 
ùdTønsID
);

363  ( 
evíts
 ^ 
IPD_KEY_ESTABLISHMENT_REQUEST_EVT
 );

367 i‡–
evíts
 & 
IPD_GET_PRICING_INFO_EVT
 )

369 
	`z˛SE_Pricög_Síd_GëCuºítPri˚
–
IPD_ENDPOINT
, &
ESPAddr
, 
›ti⁄
, 
TRUE
, 0 );

371 
	`oßl_°¨t_timîEx
–
ùdTaskID
, 
IPD_GET_PRICING_INFO_EVT
, 
IPD_GET_PRICING_INFO_PERIOD
 );

373  ( 
evíts
 ^ 
IPD_GET_PRICING_INFO_EVT
 );

377 i‡–
evíts
 & 
IPD_IDENTIFY_TIMEOUT_EVT
 )

379 i‡–
ùdIdítifyTime
 > 0 )

381 
ùdIdítifyTime
--;

383 
	`ùd_Pro˚ssIdítifyTimeCh™ge
();

385  ( 
evíts
 ^ 
IPD_IDENTIFY_TIMEOUT_EVT
 );

389 i‡–
evíts
 & 
IPD_UPDATE_TIME_EVT
 )

391 
ùdTime
 = 
	`oßl_gëClock
();

392 
	`oßl_°¨t_timîEx
–
ùdTaskID
, 
IPD_UPDATE_TIME_EVT
, 
IPD_UPDATE_TIME_PERIOD
 );

394  ( 
evíts
 ^ 
IPD_UPDATE_TIME_EVT
 );

399 
	}
}

412 
	$ùd_Pro˚ssIdítifyTimeCh™ge
( )

414 i‡–
ùdIdítifyTime
 > 0 )

416 
	`oßl_°¨t_timîEx
–
ùdTaskID
, 
IPD_IDENTIFY_TIMEOUT_EVT
, 1000 );

417 
	`HÆLedBlök
 ( 
HAL_LED_4
, 0xFF, 
HAL_LED_DEFAULT_DUTY_CYCLE
, 
HAL_LED_DEFAULT_FLASH_TIME
 );

421 
	`HÆLedSë
 ( 
HAL_LED_4
, 
HAL_LED_MODE_OFF
 );

422 
	`oßl_°›_timîEx
–
ùdTaskID
, 
IPD_IDENTIFY_TIMEOUT_EVT
 );

424 
	}
}

426 #i‡
deföed
 (
ZCL_KEY_ESTABLISH
)

436 
uöt8
 
	$ùd_KeyE°ablish_Rëu∫LökKey
–
uöt16
 
sh‹tAddr
 )

438 
APSME_LökKeyD©a_t
* 
keyD©a
;

439 
uöt8
 
°©us
 = 
ZFaûuª
;

440 
AddrMgrE¡ry_t
 
íåy
;

444 
íåy
.
u£r
 = 
ADDRMGR_USER_DEFAULT
;

445 
íåy
.
nwkAddr
 = 
sh‹tAddr
;

447 i‡–
	`AddrMgrE¡ryLookupNwk
–&
íåy
 ) )

450 
	`APSME_LökKeyD©aGë
–
íåy
.
extAddr
, &
keyD©a
 );

452 i‡–(
keyD©a
 !
NULL
Ë&& (keyD©a->
key
 != NULL) )

454 
°©us
 = 
ZSuc˚ss
;

460 
°©us
 = 
ZInvÆidP¨amëî
;

463  
°©us
;

464 
	}
}

480 
	$ùd_H™dÀKeys
–
uöt8
 
shi·
, uöt8 
keys
 )

483 i‡–
shi·
 )

485 i‡–
keys
 & 
HAL_KEY_SW_1
 )

488 i‡–
keys
 & 
HAL_KEY_SW_2
 )

491 i‡–
keys
 & 
HAL_KEY_SW_3
 )

494 i‡–
keys
 & 
HAL_KEY_SW_4
 )

500 i‡–
keys
 & 
HAL_KEY_SW_1
 )

502 
	`ZDOInôDevi˚
(0);

505 i‡–
keys
 & 
HAL_KEY_SW_2
 )

510 i‡–
keys
 & 
HAL_KEY_SW_3
 )

515 i‡–
keys
 & 
HAL_KEY_SW_4
 )

520 
	}
}

533 
uöt8
 
	$ùd_VÆid©eAârD©aCB
–
z˛AârRec_t
 *
pAâr
, 
z˛WrôeRec_t
 *
pAârInfo
 )

535 
uöt8
 
vÆid
 = 
TRUE
;

537  
pAârInfo
->
d©aTy≥
 )

539 
ZCL_DATATYPE_BOOLEAN
:

540 i‡––*(
pAârInfo
->
©åD©a
) != 0 ) && ( *(pAttrInfo->attrData) != 1 ) )

541 
vÆid
 = 
FALSE
;

548  ( 
vÆid
 );

549 
	}
}

561 
	$ùd_BasicRe£tCB
( )

564 
	}
}

576 
	$ùd_IdítifyCB
–
z˛Idítify_t
 *
pCmd
 )

578 
ùdIdítifyTime
 = 
pCmd
->
idítifyTime
;

579 
	`ùd_Pro˚ssIdítifyTimeCh™ge
();

580 
	}
}

592 
	$ùd_IdítifyQuîyR•CB
–
z˛IdítifyQuîyR•_t
 *
pR•
 )

595 
	}
}

608 
	$ùd_AœrmCB
–
z˛Aœrm_t
 *
pAœrm
 )

611 
	}
}

626 
	$ùd_GëCuºítPri˚CB
–
z˛CCGëCuºítPri˚_t
 *
pCmd
,

627 
afAddrTy≥_t
 *
§cAddr
, 
uöt8
 
£qNum
 )

629 #i‡
	`deföed
 ( 
ZCL_PRICING
 )

632 
z˛CCPublishPri˚_t
 
cmd
;

634 
	`oßl_mem£t
–&
cmd
, 0, –
z˛CCPublishPri˚_t
 ) );

636 
cmd
.
¥ovidîId
 = 0xbabeface;

637 
cmd
.
¥i˚Tõr
 = 0xfe;

639 
	`z˛SE_Pricög_Síd_PublishPri˚
–
IPD_ENDPOINT
, 
§cAddr
, &
cmd
, 
Ál£
, 
£qNum
 );

641 
	}
}

656 
	$ùd_GëScheduÀdPri˚CB
–
z˛CCGëScheduÀdPri˚_t
 *
pCmd
, 
afAddrTy≥_t
 *
§cAddr
, 
uöt8
 
£qNum
 )

662 #i‡
	`deföed
 ( 
ZCL_PRICING
 )

663 
z˛CCPublishPri˚_t
 
cmd
;

665 
	`oßl_mem£t
–&
cmd
, 0, –
z˛CCPublishPri˚_t
 ) );

667 
cmd
.
¥ovidîId
 = 0xbabeface;

668 
cmd
.
¥i˚Tõr
 = 0xfe;

670 
	`z˛SE_Pricög_Síd_PublishPri˚
–
IPD_ENDPOINT
, 
§cAddr
, &
cmd
, 
Ál£
, 
£qNum
 );

673 
	}
}

687 
	$ùd_PublishPri˚CB
–
z˛CCPublishPri˚_t
 *
pCmd
,

688 
afAddrTy≥_t
 *
§cAddr
, 
uöt8
 
£qNum
 )

690 i‡–
pCmd
 )

693 
	`HÆLcdWrôeSåög
("Providî ID", 
HAL_LCD_LINE_1
);

694 
	`HÆLcdWrôeVÆue
–
pCmd
->
¥ovidîId
, 10, 
HAL_LCD_LINE_2
 );

696 
	}
}

711 
	$ùd_Di•œyMesßgeCB
–
z˛CCDi•œyMesßge_t
 *
pCmd
,

712 
afAddrTy≥_t
 *
§cAddr
, 
uöt8
 
£qNum
 )

725 #i‡
	`deföed
 ( 
LCD_SUPPORTED
 )

726 
	`HÆLcdWrôeSåög
–(*)
pCmd
->
msgSåög
.
pSå
, 
HAL_LCD_LINE_3
 );

728 
	}
}

743 
	$ùd_C™˚lMesßgeCB
–
z˛CCC™˚lMesßge_t
 *
pCmd
,

744 
afAddrTy≥_t
 *
§cAddr
, 
uöt8
 
£qNum
 )

747 
	}
}

762 
	$ùd_GëLa°MesßgeCB
–
afAddrTy≥_t
 *
§cAddr
, 
uöt8
 
£qNum
 )

767 #i‡
	`deföed
 ( 
ZCL_MESSAGE
 )

768 
z˛CCDi•œyMesßge_t
 
cmd
;

769 
uöt8
 
msg
[10] = { 0x20, 0x21, 0x22, 0x23, 0x24, 0x25, 0x26, 0x27, 0x28, 0x29 };

772 
cmd
.
mesßgeId
 = 0xaabbccdd;

773 
cmd
.
mesßgeCål
.
å™smissi⁄Mode
 = 0;

774 
cmd
.
mesßgeCål
.
imp‹èn˚
 = 1;

775 
cmd
.
mesßgeCål
.
c⁄fúm©i⁄Requúed
 = 1;

776 
cmd
.
duøti⁄InMöuãs
 = 60;

778 
cmd
.
msgSåög
.
°rLí
 = 10;

779 
cmd
.
msgSåög
.
pSå
 = 
msg
;

781 
	`z˛SE_Mesßge_Síd_Di•œyMesßge
–
IPD_ENDPOINT
, 
§cAddr
, &
cmd
,

782 
Ál£
, 
£qNum
 );

784 
	}
}

799 
	$ùd_MesßgeC⁄fúm©i⁄CB
–
z˛CCMesßgeC⁄fúm©i⁄_t
 *
pCmd
,

800 
afAddrTy≥_t
 *
§cAddr
, 
uöt8
 
£qNum
)

803 
	}
}

820 
	$ùd_Pro˚ssZCLMsg
–
z˛IncomögMsg_t
 *
pInMsg
 )

822  
pInMsg
->
z˛Hdr
.
comm™dID
 )

824 #i‡
	`deföed
 ( 
ZCL_READ
 )

825 
ZCL_CMD_READ_RSP
:

826 
	`ùd_Pro˚ssInRódR•Cmd
–
pInMsg
 );

829 #i‡
	`deföed
 ( 
ZCL_WRITE
 )

830 
ZCL_CMD_WRITE_RSP
:

831 
	`ùd_Pro˚ssInWrôeR•Cmd
–
pInMsg
 );

834 
ZCL_CMD_DEFAULT_RSP
:

835 
	`ùd_Pro˚ssInDeÁu…R•Cmd
–
pInMsg
 );

837 #i‡
	`deföed
 ( 
ZCL_DISCOVER
 )

838 
ZCL_CMD_DISCOVER_RSP
:

839 
	`ùd_Pro˚ssInDiscR•Cmd
–
pInMsg
 );

846 i‡–
pInMsg
->
©åCmd
 !
NULL
 )

849 
	`oßl_mem_‰ì
–
pInMsg
->
©åCmd
 );

850 
pInMsg
->
©åCmd
 = 
NULL
;

852 
	}
}

854 #i‡
deföed
 ( 
ZCL_READ
 )

864 
uöt8
 
	$ùd_Pro˚ssInRódR•Cmd
–
z˛IncomögMsg_t
 *
pInMsg
 )

866 
z˛RódR•Cmd_t
 *
ªadR•Cmd
;

867 
uöt8
 
i
;

869 
ªadR•Cmd
 = (
z˛RódR•Cmd_t
 *)
pInMsg
->
©åCmd
;

870 
i
 = 0; i < 
ªadR•Cmd
->
numAâr
; i++)

877  
TRUE
;

878 
	}
}

881 #i‡
deföed
 ( 
ZCL_WRITE
 )

891 
uöt8
 
	$ùd_Pro˚ssInWrôeR•Cmd
–
z˛IncomögMsg_t
 *
pInMsg
 )

893 
z˛WrôeR•Cmd_t
 *
wrôeR•Cmd
;

894 
uöt8
 
i
;

896 
wrôeR•Cmd
 = (
z˛WrôeR•Cmd_t
 *)
pInMsg
->
©åCmd
;

897 
i
 = 0; i < 
wrôeR•Cmd
->
numAâr
; i++)

903  
TRUE
;

904 
	}
}

916 
uöt8
 
	$ùd_Pro˚ssInDeÁu…R•Cmd
–
z˛IncomögMsg_t
 *
pInMsg
 )

922  
TRUE
;

923 
	}
}

925 #i‡
deföed
 ( 
ZCL_DISCOVER
 )

935 
uöt8
 
	$ùd_Pro˚ssInDiscR•Cmd
–
z˛IncomögMsg_t
 *
pInMsg
 )

937 
z˛DiscovîR•Cmd_t
 *
discovîR•Cmd
;

938 
uöt8
 
i
;

940 
discovîR•Cmd
 = (
z˛DiscovîR•Cmd_t
 *)
pInMsg
->
©åCmd
;

941  
i
 = 0; i < 
discovîR•Cmd
->
numAâr
; i++ )

946  
TRUE
;

947 
	}
}

	@Projects/zstack/SE/SampleApp/Source/IPD/ipd.h

40 #i‚de‡
IPD_H


41 
	#IPD_H


	)

43 #ifde‡
__˝lu•lus


51 
	~"z˛.h
"

56 
	#IPD_ENDPOINT
 0x09

	)

58 
	#IPD_MAX_ATTRIBUTES
 13

	)

60 
	#IPD_MAX_OPTIONS
 3

	)

62 
	#IPD_UPDATE_TIME_PERIOD
 1000

63 
	#IPD_GET_PRICING_INFO_PERIOD
 5000

64 
	#SE_DEVICE_POLL_RATE
 8000

65 

	)

67 
	#IPD_IDENTIFY_TIMEOUT_EVT
 0x0001

	)

68 
	#IPD_UPDATE_TIME_EVT
 0x0002

	)

69 
	#IPD_KEY_ESTABLISHMENT_REQUEST_EVT
 0x0004

	)

70 
	#IPD_GET_PRICING_INFO_EVT
 0x0008

	)

85 
Sim∂eDes¸ùti⁄F‹m©_t
 
ùdSim∂eDesc
;

86 
CONST
 
z˛AârRec_t
 
ùdAârs
[];

87 
z˛O±i⁄Rec_t
 
ùdO±i⁄s
[];

88 
uöt8
 
ùdDevi˚E«bÀd
;

89 
uöt16
 
ùdTønsôi⁄Time
;

90 
uöt16
 
ùdIdítifyTime
;

91 
uöt32
 
ùdTime
;

99 
ùd_Inô
–
uöt8
 
èsk_id
 );

104 
uöt16
 
ùd_evít_lo›
–
uöt8
 
èsk_id
, uöt16 
evíts
 );

110 #ifde‡
__˝lu•lus


	@Projects/zstack/SE/SampleApp/Source/IPD/ipd_data.c

45 
	~"OSAL.h
"

46 
	~"ZDC⁄fig.h
"

48 
	~"£.h
"

49 
	~"ùd.h
"

50 
	~"z˛_gíîÆ.h
"

51 
	~"z˛_key_e°ablish.h
"

56 
	#IPD_DEVICE_VERSION
 0

	)

57 
	#IPD_FLAGS
 0

	)

59 
	#IPD_HWVERSION
 1

	)

60 
	#IPD_ZCLVERSION
 1

	)

74 c⁄° 
uöt8
 
	gùdZCLVîsi⁄
 = 
IPD_ZCLVERSION
;

75 c⁄° 
uöt8
 
	gùdHWVîsi⁄
 = 
IPD_HWVERSION
;

76 c⁄° 
uöt8
 
	gùdM™uÁ˘uªrName
[] = { 16, 'T','e','x','a','s','I','n','s','t','r','u','m','e','n','t','s' };

77 c⁄° 
uöt8
 
	gùdModñId
[] = { 16, 'T','I','0','0','0','1',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ' };

78 c⁄° 
uöt8
 
	gùdD©eCode
[] = { 16, '2','0','0','6','0','8','3','1',' ',' ',' ',' ',' ',' ',' ',' ' };

79 c⁄° 
uöt8
 
	gùdPowîSour˚
 = 
POWER_SOURCE_MAINS_1_PHASE
;

81 
uöt8
 
	gùdLoˇti⁄Des¸ùti⁄
[] = { 16, ' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ' };

82 
uöt8
 
	gùdPhysiˇlEnvú⁄mít
 = 
PHY_UNSPECIFIED_ENV
;

83 
uöt8
 
	gùdDevi˚E«bÀd
 = 
DEVICE_ENABLED
;

86 
uöt16
 
	gùdIdítifyTime
 = 0;

87 
uöt32
 
	gùdTime
 = 0;

88 
uöt8
 
	gùdTimeSètus
 = 0x01;

91 
uöt16
 
	gùdKeyE°ablishmítSuôe
 = 
CERTIFICATE_BASED_KEY_ESTABLISHMENT
;

96 
CONST
 
z˛AârRec_t
 
	gùdAârs
[
IPD_MAX_ATTRIBUTES
] =

101 
ZCL_CLUSTER_ID_GEN_BASIC
,

103 
ATTRID_BASIC_ZCL_VERSION
,

104 
ZCL_DATATYPE_UINT8
,

105 
ACCESS_CONTROL_READ
,

106 (*)&
ùdZCLVîsi⁄


110 
ZCL_CLUSTER_ID_GEN_BASIC
,

112 
ATTRID_BASIC_HW_VERSION
,

113 
ZCL_DATATYPE_UINT8
,

114 
ACCESS_CONTROL_READ
,

115 (*)&
ùdHWVîsi⁄


119 
ZCL_CLUSTER_ID_GEN_BASIC
,

121 
ATTRID_BASIC_MANUFACTURER_NAME
,

122 
ZCL_DATATYPE_CHAR_STR
,

123 
ACCESS_CONTROL_READ
,

124 (*)
ùdM™uÁ˘uªrName


128 
ZCL_CLUSTER_ID_GEN_BASIC
,

130 
ATTRID_BASIC_MODEL_ID
,

131 
ZCL_DATATYPE_CHAR_STR
,

132 
ACCESS_CONTROL_READ
,

133 (*)
ùdModñId


137 
ZCL_CLUSTER_ID_GEN_BASIC
,

139 
ATTRID_BASIC_DATE_CODE
,

140 
ZCL_DATATYPE_CHAR_STR
,

141 
ACCESS_CONTROL_READ
,

142 (*)
ùdD©eCode


146 
ZCL_CLUSTER_ID_GEN_BASIC
,

148 
ATTRID_BASIC_POWER_SOURCE
,

149 
ZCL_DATATYPE_ENUM8
,

150 
ACCESS_CONTROL_READ
,

151 (*)&
ùdPowîSour˚


155 
ZCL_CLUSTER_ID_GEN_BASIC
,

157 
ATTRID_BASIC_LOCATION_DESC
,

158 
ZCL_DATATYPE_CHAR_STR
,

159 (
ACCESS_CONTROL_READ
 | 
ACCESS_CONTROL_WRITE
),

160 (*)
ùdLoˇti⁄Des¸ùti⁄


164 
ZCL_CLUSTER_ID_GEN_BASIC
,

166 
ATTRID_BASIC_PHYSICAL_ENV
,

167 
ZCL_DATATYPE_ENUM8
,

168 (
ACCESS_CONTROL_READ
 | 
ACCESS_CONTROL_WRITE
),

169 (*)&
ùdPhysiˇlEnvú⁄mít


173 
ZCL_CLUSTER_ID_GEN_BASIC
,

175 
ATTRID_BASIC_DEVICE_ENABLED
,

176 
ZCL_DATATYPE_BOOLEAN
,

177 (
ACCESS_CONTROL_READ
 | 
ACCESS_CONTROL_WRITE
),

178 (*)&
ùdDevi˚E«bÀd


184 
ZCL_CLUSTER_ID_GEN_IDENTIFY
,

186 
ATTRID_IDENTIFY_TIME
,

187 
ZCL_DATATYPE_UINT16
,

188 (
ACCESS_CONTROL_READ
 | 
ACCESS_CONTROL_WRITE
),

189 (*)&
ùdIdítifyTime


197 
ZCL_CLUSTER_ID_GEN_TIME
,

199 
ATTRID_TIME_TIME
,

200 
ZCL_DATATYPE_UTC
,

201 
ACCESS_CONTROL_READ
,

202 (*)&
ùdTime


208 
ZCL_CLUSTER_ID_GEN_TIME
,

210 
ATTRID_TIME_STATUS
,

211 
ZCL_DATATYPE_BITMAP8
,

212 
ACCESS_CONTROL_READ
,

213 (*)&
ùdTimeSètus


217 
ZCL_CLUSTER_ID_GEN_KEY_ESTABLISHMENT
,

219 
ATTRID_KEY_ESTABLISH_SUITE
,

220 
ZCL_DATATYPE_BITMAP16
,

221 
ACCESS_CONTROL_READ
,

222 (*)&
ùdKeyE°ablishmítSuôe


230 
z˛O±i⁄Rec_t
 
	gùdO±i⁄s
[
IPD_MAX_OPTIONS
] =

234 
ZCL_CLUSTER_ID_GEN_TIME
,

235 –
AF_EN_SECURITY
 ),

240 
ZCL_CLUSTER_ID_SE_PRICING
,

241 –
AF_EN_SECURITY
 ),

244 
ZCL_CLUSTER_ID_SE_MESSAGE
,

245 –
AF_EN_SECURITY
 ),

254 
	#IPD_MAX_INCLUSTERS
 4

	)

255 c⁄° 
cId_t
 
	gùdInClu°îLi°
[
IPD_MAX_INCLUSTERS
] =

257 
ZCL_CLUSTER_ID_GEN_BASIC
,

258 
ZCL_CLUSTER_ID_GEN_IDENTIFY
,

259 
ZCL_CLUSTER_ID_SE_PRICING
,

260 
ZCL_CLUSTER_ID_SE_MESSAGE


263 
	#IPD_MAX_OUTCLUSTERS
 4

	)

264 c⁄° 
cId_t
 
	gùdOutClu°îLi°
[
IPD_MAX_OUTCLUSTERS
] =

266 
ZCL_CLUSTER_ID_GEN_BASIC
,

267 
ZCL_CLUSTER_ID_GEN_IDENTIFY
,

268 
ZCL_CLUSTER_ID_SE_PRICING
,

269 
ZCL_CLUSTER_ID_SE_MESSAGE


272 
Sim∂eDes¸ùti⁄F‹m©_t
 
	gùdSim∂eDesc
 =

274 
IPD_ENDPOINT
,

275 
ZCL_SE_PROFILE_ID
,

276 
ZCL_SE_DEVICEID_IN_PREMISE_DISPLAY
,

277 
IPD_DEVICE_VERSION
,

278 
IPD_FLAGS
,

279 
IPD_MAX_INCLUSTERS
,

280 (
cId_t
 *)
ùdInClu°îLi°
,

281 
IPD_MAX_OUTCLUSTERS
,

282 (
cId_t
 *)
ùdOutClu°îLi°


	@Projects/zstack/SE/SampleApp/Source/LoadControl/OSAL_LoadControl.c

44 
	~"ZComDef.h
"

45 
	~"hÆ_drivîs.h
"

46 
	~"OSAL_Tasks.h
"

48 #i‡
deföed
 ( 
MT_TASK
 )

49 
	~"MT_TASK.h
"

52 
	~"ZDAµ.h
"

53 #i‡
deföed
 ( 
ZIGBEE_FREQ_AGILITY
 ) || deföed ( 
ZIGBEE_PANID_CONFLICT
 )

54 
	~"ZDNwkMgr.h
"

56 #i‡
deföed
 ( 
ZIGBEE_FRAGMENTATION
 )

57 
	~"≠s_‰ag.h
"

60 #i‡
deföed
 ( 
ZCL_KEY_ESTABLISH
 )

61 
	~"z˛_key_e°ablish.h
"

64 
	~"lﬂdc⁄åﬁ.h
"

71 c⁄° 
pTaskEvítH™dÀrFn
 
	gèsksAº
[] = {

72 
macEvítLo›
,

73 
nwk_evít_lo›
,

74 
HÆ_Pro˚ssEvít
,

75 #i‡
deföed
–
MT_TASK
 )

76 
MT_Pro˚ssEvít
,

78 
APS_evít_lo›
,

79 #i‡
deföed
 ( 
ZIGBEE_FRAGMENTATION
 )

80 
APSF_Pro˚ssEvít
,

82 
ZDAµ_evít_lo›
,

83 #i‡
deföed
 ( 
ZIGBEE_FREQ_AGILITY
 ) || deföed ( 
ZIGBEE_PANID_CONFLICT
 )

84 
ZDNwkMgr_evít_lo›
,

86 
z˛_evít_lo›
,

87 #i‡
deföed
 ( 
ZCL_KEY_ESTABLISH
 )

88 
z˛KeyE°ablish_evít_lo›
,

90 
lﬂdc⁄åﬁ_evít_lo›


93 c⁄° 
uöt8
 
	gèsksC¡
 = –
èsksAº
 ) / (ÅasksArr[0] );

94 
uöt16
 *
	gèsksEvíts
;

109 
	$oßlInôTasks
( )

111 
uöt8
 
èskID
 = 0;

113 
èsksEvíts
 = (
uöt16
 *)
	`oßl_mem_Æloc
––uöt16 ) * 
èsksC¡
);

114 
	`oßl_mem£t
–
èsksEvíts
, 0, (–
uöt16
 ) * 
èsksC¡
));

116 
	`macTaskInô
–
èskID
++ );

117 
	`nwk_öô
–
èskID
++ );

118 
	`HÆ_Inô
–
èskID
++ );

119 #i‡
	`deföed
–
MT_TASK
 )

120 
	`MT_TaskInô
–
èskID
++ );

122 
	`APS_Inô
–
èskID
++ );

123 #i‡
	`deföed
 ( 
ZIGBEE_FRAGMENTATION
 )

124 
	`APSF_Inô
–
èskID
++ );

126 
	`ZDAµ_Inô
–
èskID
++ );

127 #i‡
	`deföed
 ( 
ZIGBEE_FREQ_AGILITY
 ) || deföed ( 
ZIGBEE_PANID_CONFLICT
 )

128 
	`ZDNwkMgr_Inô
–
èskID
++ );

130 
	`z˛_Inô
–
èskID
++ );

131 #i‡
	`deföed
 ( 
ZCL_KEY_ESTABLISH
 )

132 
	`z˛GíîÆ_KeyE°ablish_Inô
–
èskID
++ );

134 
	`lﬂdc⁄åﬁ_Inô
–
èskID
 );

135 
	}
}

	@Projects/zstack/SE/SampleApp/Source/LoadControl/loadcontrol.c

63 
	~"OSAL.h
"

64 
	~"OSAL_Clock.h
"

65 
	~"ZDAµ.h
"

66 
	~"AddrMgr.h
"

68 
	~"£.h
"

69 
	~"lﬂdc⁄åﬁ.h
"

70 
	~"z˛_gíîÆ.h
"

71 
	~"z˛_£.h
"

72 
	~"z˛_key_e°ablish.h
"

74 
	~"⁄bﬂrd.h
"

77 
	~"hÆ_lcd.h
"

78 
	~"hÆ_Àd.h
"

79 
	~"hÆ_key.h
"

87 
	#z˛_M™d©‹yRï‹èbÀAâribuã
–
a
 ) (á =
NULL
 )

	)

109 
uöt8
 
	glﬂdC⁄åﬁTaskID
;

110 
devSèãs_t
 
	glﬂdC⁄åﬁNwkSèã
;

111 
uöt8
 
	glﬂdC⁄åﬁTønsID
;

112 
afAddrTy≥_t
 
	gESPAddr
;

113 
uöt8
 
	glökKeySètus
;

114 
z˛CCRï‹tEvítSètus_t
 
	gr•
;

119 
lﬂdc⁄åﬁ_H™dÀKeys
–
uöt8
 
shi·
, uöt8 
keys
 );

121 #i‡
deföed
 (
ZCL_KEY_ESTABLISH
)

122 
uöt8
 
lﬂdc⁄åﬁ_KeyE°ablish_Rëu∫LökKey
–
uöt16
 
sh‹tAddr
 );

125 #i‡
deföed
 ( 
ZCL_ALARMS
 )

126 
lﬂdc⁄åﬁ_Pro˚ssAœrmCmd
–
uöt8
 
§cEP
, 
afAddrTy≥_t
 *
d°Addr
,

127 
uöt16
 
˛u°îID
, 
z˛FømeHdr_t
 *
hdr
, 
uöt8
 
Àn
, uöt8 *
d©a
 );

130 
lﬂdc⁄åﬁ_Pro˚ssIdítifyTimeCh™ge
( );

137 
uöt8
 
lﬂdc⁄åﬁ_VÆid©eAârD©aCB
–
z˛AârRec_t
 *
pAâr
, 
z˛WrôeRec_t
 *
pAârInfo
 );

140 
lﬂdc⁄åﬁ_BasicRe£tCB
( );

141 
lﬂdc⁄åﬁ_IdítifyCB
–
z˛Idítify_t
 *
pCmd
 );

142 
lﬂdc⁄åﬁ_IdítifyQuîyR•CB
–
z˛IdítifyQuîyR•_t
 *
pR•
 );

143 
lﬂdc⁄åﬁ_AœrmCB
–
z˛Aœrm_t
 *
pAœrm
 );

147 
lﬂdc⁄åﬁ_LﬂdC⁄åﬁEvítCB
–
z˛CCLﬂdC⁄åﬁEvít_t
 *
pCmd
,

148 
afAddrTy≥_t
 *
§cAddr
, 
uöt8
 
°©us
, uöt8 
£qNum
);

149 
lﬂdc⁄åﬁ_C™˚lLﬂdC⁄åﬁEvítCB
–
z˛CCC™˚lLﬂdC⁄åﬁEvít_t
 *
pCmd
,

150 
afAddrTy≥_t
 *
§cAddr
, 
uöt8
 
£qNum
 );

151 
lﬂdc⁄åﬁ_C™˚lAŒLﬂdC⁄åﬁEvítsCB
–
z˛CCC™˚lAŒLﬂdC⁄åﬁEvíts_t
 *
pCmd
,

152 
afAddrTy≥_t
 *
§cAddr
, 
uöt8
 
£qNum
);

153 
lﬂdc⁄åﬁ_Rï‹tEvítSètusCB
–
z˛CCRï‹tEvítSètus_t
 *
pCmd
,

154 
afAddrTy≥_t
 *
§cAddr
, 
uöt8
 
£qNum
 );

155 
lﬂdc⁄åﬁ_GëScheduÀdEvítCB
–
z˛CCGëScheduÀdEvít_t
 *
pCmd
,

156 
afAddrTy≥_t
 *
§cAddr
, 
uöt8
 
£qNum
);

162 
lﬂdc⁄åﬁ_Pro˚ssZCLMsg
–
z˛IncomögMsg_t
 *
msg
 );

163 #i‡
deföed
 ( 
ZCL_READ
 )

164 
uöt8
 
lﬂdc⁄åﬁ_Pro˚ssInRódR•Cmd
–
z˛IncomögMsg_t
 *
pInMsg
 );

166 #i‡
deföed
 ( 
ZCL_WRITE
 )

167 
uöt8
 
lﬂdc⁄åﬁ_Pro˚ssInWrôeR•Cmd
–
z˛IncomögMsg_t
 *
pInMsg
 );

169 
uöt8
 
lﬂdc⁄åﬁ_Pro˚ssInDeÁu…R•Cmd
–
z˛IncomögMsg_t
 *
pInMsg
 );

170 #i‡
deföed
 ( 
ZCL_DISCOVER
 )

171 
uöt8
 
lﬂdc⁄åﬁ_Pro˚ssInDiscR•Cmd
–
z˛IncomögMsg_t
 *
pInMsg
 );

177 
z˛GíîÆ_AµCÆlbacks_t
 
	glﬂdc⁄åﬁ_GíCmdCÆlbacks
 =

179 
lﬂdc⁄åﬁ_BasicRe£tCB
,

180 
lﬂdc⁄åﬁ_IdítifyCB
,

181 
lﬂdc⁄åﬁ_IdítifyQuîyR•CB
,

182 
NULL
,

183 
NULL
,

184 
NULL
,

185 
NULL
,

186 
NULL
,

187 
NULL
,

188 
NULL
,

189 
NULL
,

190 
NULL
,

191 
lﬂdc⁄åﬁ_AœrmCB
,

192 
NULL
,

193 
NULL
,

199 
z˛SE_AµCÆlbacks_t
 
	glﬂdc⁄åﬁ_SECmdCÆlbacks
 =

201 
NULL
,

202 
NULL
,

203 
NULL
,

204 
NULL
,

205 
NULL
,

206 
NULL
,

207 
NULL
,

208 
NULL
,

209 
NULL
,

210 
NULL
,

211 
NULL
,

212 
NULL
,

213 
NULL
,

214 
lﬂdc⁄åﬁ_LﬂdC⁄åﬁEvítCB
,

215 
lﬂdc⁄åﬁ_C™˚lLﬂdC⁄åﬁEvítCB
,

216 
lﬂdc⁄åﬁ_C™˚lAŒLﬂdC⁄åﬁEvítsCB
,

217 
lﬂdc⁄åﬁ_Rï‹tEvítSètusCB
,

218 
lﬂdc⁄åﬁ_GëScheduÀdEvítCB
,

230 
	$lﬂdc⁄åﬁ_Inô
–
uöt8
 
èsk_id
 )

232 
lﬂdC⁄åﬁTaskID
 = 
èsk_id
;

235 
ESPAddr
.
addrMode
 = (
afAddrMode_t
)
Addr16Bô
;

236 
ESPAddr
.
ídPoöt
 = 
LOADCONTROL_ENDPOINT
;

237 
ESPAddr
.
addr
.
sh‹tAddr
 = 0;

240 
	`z˛SE_Inô
–&
lﬂdC⁄åﬁSim∂eDesc
 );

243 
	`z˛GíîÆ_Regi°îCmdCÆlbacks
–
LOADCONTROL_ENDPOINT
, &
lﬂdc⁄åﬁ_GíCmdCÆlbacks
 );

246 
	`z˛SE_Regi°îCmdCÆlbacks
–
LOADCONTROL_ENDPOINT
, &
lﬂdc⁄åﬁ_SECmdCÆlbacks
 );

249 
	`z˛_ªgi°îAârLi°
–
LOADCONTROL_ENDPOINT
, 
LOADCONTROL_MAX_ATTRIBUTES
, 
lﬂdC⁄åﬁAârs
 );

252 
	`z˛_ªgi°îClu°îO±i⁄Li°
–
LOADCONTROL_ENDPOINT
, 
LOADCONTROL_MAX_OPTIONS
, 
lﬂdC⁄åﬁO±i⁄s
 );

255 
	`z˛_ªgi°îVÆid©eAârD©a
–
lﬂdc⁄åﬁ_VÆid©eAârD©aCB
 );

258 
	`z˛_ªgi°îF‹Msg
–
lﬂdC⁄åﬁTaskID
 );

261 
	`Regi°îF‹Keys
–
lﬂdC⁄åﬁTaskID
 );

264 
	`oßl_°¨t_timîEx
–
lﬂdC⁄åﬁTaskID
, 
LOADCONTROL_UPDATE_TIME_EVT
, 
LOADCONTROL_UPDATE_TIME_PERIOD
 );

265 
	}
}

277 
uöt16
 
	$lﬂdc⁄åﬁ_evít_lo›
–
uöt8
 
èsk_id
, 
uöt16
 
evíts
 )

279 
afIncomögMSGPackë_t
 *
MSGpkt
;

281 i‡–
evíts
 & 
SYS_EVENT_MSG
 )

283  (
MSGpkt
 = (
afIncomögMSGPackë_t
 *)
	`oßl_msg_ª˚ive
–
lﬂdC⁄åﬁTaskID
 )) )

285  
MSGpkt
->
hdr
.
evít
 )

287 
ZCL_INCOMING_MSG
:

289 
	`lﬂdc⁄åﬁ_Pro˚ssZCLMsg
–(
z˛IncomögMsg_t
 *)
MSGpkt
 );

292 
KEY_CHANGE
:

293 
	`lﬂdc⁄åﬁ_H™dÀKeys
–((
keyCh™ge_t
 *)
MSGpkt
)->
°©e
, ((keyCh™ge_à*)MSGpkt)->
keys
 );

296 
ZDO_STATE_CHANGE
:

297 
lﬂdC⁄åﬁNwkSèã
 = (
devSèãs_t
)(
MSGpkt
->
hdr
.
°©us
);

299 i‡(
ZG_SECURE_ENABLED
)

301 i‡–
lﬂdC⁄åﬁNwkSèã
 =
DEV_ROUTER
 )

304 
lökKeySètus
 = 
	`lﬂdc⁄åﬁ_KeyE°ablish_Rëu∫LökKey
(
ESPAddr
.
addr
.
sh‹tAddr
);

306 i‡(
lökKeySètus
 !
ZSuc˚ss
)

309 
	`oßl_£t_evít
–
lﬂdC⁄åﬁTaskID
, 
LOADCONTROL_KEY_ESTABLISHMENT_REQUEST_EVT
);

321 
	`oßl_msg_dóŒoˇã
–(
uöt8
 *)
MSGpkt
 );

326  (
evíts
 ^ 
SYS_EVENT_MSG
);

330 i‡–
evíts
 & 
LOADCONTROL_KEY_ESTABLISHMENT_REQUEST_EVT
 )

332 
	`z˛GíîÆ_KeyE°ablish_InôüãKeyE°ablishmít
(
lﬂdC⁄åﬁTaskID
, &
ESPAddr
, 
lﬂdC⁄åﬁTønsID
);

334  ( 
evíts
 ^ 
LOADCONTROL_KEY_ESTABLISHMENT_REQUEST_EVT
 );

338 i‡–
evíts
 & 
LOADCONTROL_IDENTIFY_TIMEOUT_EVT
 )

340 i‡–
lﬂdC⁄åﬁIdítifyTime
 > 0 )

342 
lﬂdC⁄åﬁIdítifyTime
--;

344 
	`lﬂdc⁄åﬁ_Pro˚ssIdítifyTimeCh™ge
();

346  ( 
evíts
 ^ 
LOADCONTROL_IDENTIFY_TIMEOUT_EVT
 );

350 i‡–
evíts
 & 
LOADCONTROL_UPDATE_TIME_EVT
 )

352 
lﬂdC⁄åﬁTime
 = 
	`oßl_gëClock
();

353 
	`oßl_°¨t_timîEx
–
lﬂdC⁄åﬁTaskID
, 
LOADCONTROL_UPDATE_TIME_EVT
, 
LOADCONTROL_UPDATE_TIME_PERIOD
 );

355  ( 
evíts
 ^ 
LOADCONTROL_UPDATE_TIME_EVT
 );

359 i‡–
evíts
 & 
LOADCONTROL_LOAD_CTRL_EVT
 )

367 
r•
.
evítSètus
 = 
EVENT_STATUS_LOAD_CONTROL_EVENT_COMPLETED
;

368 
	`z˛SE_LﬂdC⁄åﬁ_Síd_Rï‹tEvítSètus
–
LOADCONTROL_ENDPOINT
, &
ESPAddr
,

369 &
r•
, 
Ál£
, 
lﬂdC⁄åﬁTønsID
 );

371 
	`HÆLcdWrôeSåög
("Lﬂd EvàCom∂ëe", 
HAL_LCD_LINE_3
);

373 
	`HÆLedSë
(
HAL_LED_4
, 
HAL_LED_MODE_OFF
);

375  ( 
evíts
 ^ 
LOADCONTROL_LOAD_CTRL_EVT
 );

381 
	}
}

394 
	$lﬂdc⁄åﬁ_Pro˚ssIdítifyTimeCh™ge
( )

396 i‡–
lﬂdC⁄åﬁIdítifyTime
 > 0 )

398 
	`oßl_°¨t_timîEx
–
lﬂdC⁄åﬁTaskID
, 
LOADCONTROL_IDENTIFY_TIMEOUT_EVT
, 1000 );

399 
	`HÆLedBlök
 ( 
HAL_LED_4
, 0xFF, 
HAL_LED_DEFAULT_DUTY_CYCLE
, 
HAL_LED_DEFAULT_FLASH_TIME
 );

403 
	`HÆLedSë
 ( 
HAL_LED_4
, 
HAL_LED_MODE_OFF
 );

404 
	`oßl_°›_timîEx
–
lﬂdC⁄åﬁTaskID
, 
LOADCONTROL_IDENTIFY_TIMEOUT_EVT
 );

406 
	}
}

408 #i‡
deföed
 (
ZCL_KEY_ESTABLISH
)

418 
uöt8
 
	$lﬂdc⁄åﬁ_KeyE°ablish_Rëu∫LökKey
–
uöt16
 
sh‹tAddr
 )

420 
APSME_LökKeyD©a_t
* 
keyD©a
;

421 
uöt8
 
°©us
 = 
ZFaûuª
;

422 
AddrMgrE¡ry_t
 
íåy
;

426 
íåy
.
u£r
 = 
ADDRMGR_USER_DEFAULT
;

427 
íåy
.
nwkAddr
 = 
sh‹tAddr
;

429 i‡–
	`AddrMgrE¡ryLookupNwk
–&
íåy
 ) )

432 
	`APSME_LökKeyD©aGë
–
íåy
.
extAddr
, &
keyD©a
 );

434 i‡–(
keyD©a
 !
NULL
Ë&& (keyD©a->
key
 != NULL) )

436 
°©us
 = 
ZSuc˚ss
;

442 
°©us
 = 
ZInvÆidP¨amëî
;

445  
°©us
;

446 
	}
}

462 
	$lﬂdc⁄åﬁ_H™dÀKeys
–
uöt8
 
shi·
, uöt8 
keys
 )

465 i‡–
shi·
 )

467 i‡–
keys
 & 
HAL_KEY_SW_1
 )

470 i‡–
keys
 & 
HAL_KEY_SW_2
 )

473 i‡–
keys
 & 
HAL_KEY_SW_3
 )

476 i‡–
keys
 & 
HAL_KEY_SW_4
 )

482 i‡–
keys
 & 
HAL_KEY_SW_1
 )

484 
	`ZDOInôDevi˚
(0);

487 i‡–
keys
 & 
HAL_KEY_SW_2
 )

492 i‡–
keys
 & 
HAL_KEY_SW_3
 )

497 i‡–
keys
 & 
HAL_KEY_SW_4
 )

502 
	}
}

515 
uöt8
 
	$lﬂdc⁄åﬁ_VÆid©eAârD©aCB
–
z˛AârRec_t
 *
pAâr
, 
z˛WrôeRec_t
 *
pAârInfo
 )

517 
uöt8
 
vÆid
 = 
TRUE
;

519  
pAârInfo
->
d©aTy≥
 )

521 
ZCL_DATATYPE_BOOLEAN
:

522 i‡––*(
pAârInfo
->
©åD©a
) != 0 ) && ( *(pAttrInfo->attrData) != 1 ) )

523 
vÆid
 = 
FALSE
;

530  ( 
vÆid
 );

531 
	}
}

543 
	$lﬂdc⁄åﬁ_BasicRe£tCB
( )

546 
	}
}

558 
	$lﬂdc⁄åﬁ_IdítifyCB
–
z˛Idítify_t
 *
pCmd
 )

560 
lﬂdC⁄åﬁIdítifyTime
 = 
pCmd
->
idítifyTime
;

561 
	`lﬂdc⁄åﬁ_Pro˚ssIdítifyTimeCh™ge
();

562 
	}
}

574 
	$lﬂdc⁄åﬁ_IdítifyQuîyR•CB
–
z˛IdítifyQuîyR•_t
 *
pR•
 )

577 
	}
}

590 
	$lﬂdc⁄åﬁ_AœrmCB
–
z˛Aœrm_t
 *
pAœrm
 )

593 
	}
}

595 #i‡
deföed
 (
ZCL_LOAD_CONTROL
)

613 
	$lﬂdc⁄åﬁ_SídRï‹tEvítSètus
–
afAddrTy≥_t
 *
§cAddr
, 
uöt8
 
£qNum
,

614 
uöt32
 
evítID
, uöt32 
°¨tTime
,

615 
uöt8
 
evítSètus
, uöt8 
¸ôiˇlôyLevñ
,

616 
uöt8
 
evítC⁄åﬁ
 )

620 
r•
.
issuîEvítID
 = 
evítID
;

621 
r•
.
evítSèπTime
 = 
°¨tTime
;

622 
r•
.
¸ôiˇlôyLevñAµlõd
 = 
¸ôiˇlôyLevñ
;

623 
r•
.
evítC⁄åﬁ
 =ÉventControl;

624 
r•
.
evítSètus
 =ÉventStatus;

625 
r•
.
sig«tuªTy≥
 = 
SE_PROFILE_SIGNATURE_TYPE_ECDSA
;

629 
	`oßl_mem˝y
–
r•
.
sig«tuª
, 
lﬂdC⁄åﬁSig«tuª
, 
SE_PROFILE_SIGNATURE_LENGTH
 );

632 
r•
.
coﬁögTem≥øtuªSëPoötAµlõd
 = 
SE_OPTIONAL_FIELD_TEMPERATURE_SET_POINT
;

633 
r•
.
hótögTem≥øtuªSëPoötAµlõd
 = 
SE_OPTIONAL_FIELD_TEMPERATURE_SET_POINT
;

634 
r•
.
avîageLﬂdAdju°mít
 = 
SE_OPTIONAL_FIELD_INT8
;

635 
r•
.
dutyCy˛eAµlõd
 = 
SE_OPTIONAL_FIELD_UINT8
;

641 
	`z˛SE_LﬂdC⁄åﬁ_Síd_Rï‹tEvítSètus
–
LOADCONTROL_ENDPOINT
, 
§cAddr
,

642 &
r•
, 
Ál£
, 
£qNum
 );

643 
	}
}

660 
	$lﬂdc⁄åﬁ_LﬂdC⁄åﬁEvítCB
–
z˛CCLﬂdC⁄åﬁEvít_t
 *
pCmd
,

661 
afAddrTy≥_t
 *
§cAddr
, 
uöt8
 
°©us
,

662 
uöt8
 
£qNum
)

664 #i‡
	`deföed
 ( 
ZCL_LOAD_CONTROL
 )

668 
uöt8
 
evítSètus
;

670 i‡–
°©us
 =
ZCL_STATUS_INVALID_FIELD
 )

674 
evítSètus
 = 
EVENT_STATUS_LOAD_CONTROL_EVENT_REJECTED
;

678 
evítSètus
 = 
EVENT_STATUS_LOAD_CONTROL_EVENT_RECEIVED
;

682 
	`lﬂdc⁄åﬁ_SídRï‹tEvítSètus
–
§cAddr
, 
£qNum
, 
pCmd
->
issuîEvít
,

683 
pCmd
->
°¨tTime
, 
evítSètus
,

684 
pCmd
->
¸ôiˇlôyLevñ
,ÖCmd->
evítC⁄åﬁ
);

687 i‡–
°©us
 !
ZCL_STATUS_INVALID_FIELD
 )

690 i‡–
pCmd
->
issuîEvít
 =
LOADCONTROL_EVENT_ID
 )

692 i‡–
pCmd
->
°¨tTime
 =
START_TIME_NOW
 )

695 
evítSètus
 = 
EVENT_STATUS_LOAD_CONTROL_EVENT_STARTED
;

696 
	`lﬂdc⁄åﬁ_SídRï‹tEvítSètus
–
§cAddr
, 
£qNum
, 
pCmd
->
issuîEvít
,

697 
pCmd
->
°¨tTime
, 
evítSètus
,

698 
pCmd
->
¸ôiˇlôyLevñ
,ÖCmd->
evítC⁄åﬁ
);

699 i‡–
pCmd
->
devi˚GroupCœss
 =
ONOFF_LOAD_DEVICE_CLASS
 )

701 
	`HÆLcdWrôeSåög
("Lﬂd EvàSèπed", 
HAL_LCD_LINE_3
);

703 i‡–
pCmd
->
devi˚GroupCœss
 =
HVAC_DEVICE_CLASS
 )

705 
	`HÆLcdWrôeSåög
("PCT EvàSèπed", 
HAL_LCD_LINE_3
);

707 
	`HÆLedBlök
 ( 
HAL_LED_4
, 0, 50, 500 );

709 
	`oßl_°¨t_timîEx
–
lﬂdC⁄åﬁTaskID
, 
LOADCONTROL_LOAD_CTRL_EVT
,

710 (
LOADCONTROL_LOAD_CTRL_PERIOD
 * (
pCmd
->
duøti⁄InMöuãs
)) );

715 
	}
}

730 
	$lﬂdc⁄åﬁ_C™˚lLﬂdC⁄åﬁEvítCB
–
z˛CCC™˚lLﬂdC⁄åﬁEvít_t
 *
pCmd
,

731 
afAddrTy≥_t
 *
§cAddr
, 
uöt8
 
£qNum
 )

733 #i‡
	`deföed
 ( 
ZCL_LOAD_CONTROL
 )

755 
	`lﬂdc⁄åﬁ_SídRï‹tEvítSètus
–
§cAddr
, 
£qNum
, 
pCmd
->
issuîEvítID
,

756 
SE_OPTIONAL_FIELD_UINT32
,

757 
EVENT_STATUS_LOAD_CONTROL_EVENT_RECEIVED
,

758 
SE_OPTIONAL_FIELD_UINT8
,

759 
SE_OPTIONAL_FIELD_UINT8
 );

764 
	}
}

779 
	$lﬂdc⁄åﬁ_C™˚lAŒLﬂdC⁄åﬁEvítsCB
–
z˛CCC™˚lAŒLﬂdC⁄åﬁEvíts_t
 *
pCmd
,

780 
afAddrTy≥_t
 *
§cAddr
, 
uöt8
 
£qNum
 )

786 
	}
}

801 
	$lﬂdc⁄åﬁ_Rï‹tEvítSètusCB
–
z˛CCRï‹tEvítSètus_t
 *
pCmd
,

802 
afAddrTy≥_t
 *
§cAddr
, 
uöt8
 
£qNum
)

805 
	}
}

819 
	$lﬂdc⁄åﬁ_GëScheduÀdEvítCB
–
z˛CCGëScheduÀdEvít_t
 *
pCmd
,

820 
afAddrTy≥_t
 *
§cAddr
, 
uöt8
 
£qNum
 )

823 
	}
}

840 
	$lﬂdc⁄åﬁ_Pro˚ssZCLMsg
–
z˛IncomögMsg_t
 *
pInMsg
 )

842  
pInMsg
->
z˛Hdr
.
comm™dID
 )

844 #i‡
	`deföed
 ( 
ZCL_READ
 )

845 
ZCL_CMD_READ_RSP
:

846 
	`lﬂdc⁄åﬁ_Pro˚ssInRódR•Cmd
–
pInMsg
 );

849 #i‡
	`deföed
 ( 
ZCL_WRITE
 )

850 
ZCL_CMD_WRITE_RSP
:

851 
	`lﬂdc⁄åﬁ_Pro˚ssInWrôeR•Cmd
–
pInMsg
 );

854 
ZCL_CMD_DEFAULT_RSP
:

855 
	`lﬂdc⁄åﬁ_Pro˚ssInDeÁu…R•Cmd
–
pInMsg
 );

857 #i‡
	`deföed
 ( 
ZCL_DISCOVER
 )

858 
ZCL_CMD_DISCOVER_RSP
:

859 
	`lﬂdc⁄åﬁ_Pro˚ssInDiscR•Cmd
–
pInMsg
 );

866 i‡–
pInMsg
->
©åCmd
 !
NULL
 )

869 
	`oßl_mem_‰ì
–
pInMsg
->
©åCmd
 );

870 
pInMsg
->
©åCmd
 = 
NULL
;

872 
	}
}

874 #i‡
deföed
 ( 
ZCL_READ
 )

884 
uöt8
 
	$lﬂdc⁄åﬁ_Pro˚ssInRódR•Cmd
–
z˛IncomögMsg_t
 *
pInMsg
 )

886 
z˛RódR•Cmd_t
 *
ªadR•Cmd
;

887 
uöt8
 
i
;

889 
ªadR•Cmd
 = (
z˛RódR•Cmd_t
 *)
pInMsg
->
©åCmd
;

890 
i
 = 0; i < 
ªadR•Cmd
->
numAâr
; i++)

897  
TRUE
;

898 
	}
}

901 #i‡
deföed
 ( 
ZCL_WRITE
 )

911 
uöt8
 
	$lﬂdc⁄åﬁ_Pro˚ssInWrôeR•Cmd
–
z˛IncomögMsg_t
 *
pInMsg
 )

913 
z˛WrôeR•Cmd_t
 *
wrôeR•Cmd
;

914 
uöt8
 
i
;

916 
wrôeR•Cmd
 = (
z˛WrôeR•Cmd_t
 *)
pInMsg
->
©åCmd
;

917 
i
 = 0; i < 
wrôeR•Cmd
->
numAâr
; i++)

923  
TRUE
;

924 
	}
}

937 
uöt8
 
	$lﬂdc⁄åﬁ_Pro˚ssInDeÁu…R•Cmd
–
z˛IncomögMsg_t
 *
pInMsg
 )

943  
TRUE
;

944 
	}
}

946 #i‡
deföed
 ( 
ZCL_DISCOVER
 )

956 
uöt8
 
	$lﬂdc⁄åﬁ_Pro˚ssInDiscR•Cmd
–
z˛IncomögMsg_t
 *
pInMsg
 )

958 
z˛DiscovîR•Cmd_t
 *
discovîR•Cmd
;

959 
uöt8
 
i
;

961 
discovîR•Cmd
 = (
z˛DiscovîR•Cmd_t
 *)
pInMsg
->
©åCmd
;

962  
i
 = 0; i < 
discovîR•Cmd
->
numAâr
; i++ )

967  
TRUE
;

968 
	}
}

	@Projects/zstack/SE/SampleApp/Source/LoadControl/loadcontrol.h

40 #i‚de‡
LOADCONTROL_H


41 
	#LOADCONTROL_H


	)

43 #ifde‡
__˝lu•lus


51 
	~"z˛.h
"

56 
	#LOADCONTROL_ENDPOINT
 0x09

	)

58 
	#LOADCONTROL_MAX_ATTRIBUTES
 16

	)

59 
	#LOADCONTROL_MAX_OPTIONS
 2

	)

61 
	#LOADCONTROL_UPDATE_TIME_PERIOD
 1000

62 
	#LOADCONTROL_LOAD_CTRL_PERIOD
 60000

63 
	#LOADCONTROL_EVENT_ID
 0x12345678

64 
	#START_TIME_NOW
 0x00000000

65 
	#HVAC_DEVICE_CLASS
 0x000001

66 
	#ONOFF_LOAD_DEVICE_CLASS
 0x000080

67 

	)

69 
	#LOADCONTROL_IDENTIFY_TIMEOUT_EVT
 0x0001

	)

70 
	#LOADCONTROL_UPDATE_TIME_EVT
 0x0002

	)

71 
	#LOADCONTROL_KEY_ESTABLISHMENT_REQUEST_EVT
 0x0004

	)

72 
	#LOADCONTROL_LOAD_CTRL_EVT
 0x0008

	)

87 
Sim∂eDes¸ùti⁄F‹m©_t
 
lﬂdC⁄åﬁSim∂eDesc
;

88 
CONST
 
z˛AârRec_t
 
lﬂdC⁄åﬁAârs
[];

89 
z˛O±i⁄Rec_t
 
lﬂdC⁄åﬁO±i⁄s
[];

90 
uöt8
 
lﬂdC⁄åﬁDevi˚E«bÀd
;

91 
uöt16
 
lﬂdC⁄åﬁTønsôi⁄Time
;

92 
uöt16
 
lﬂdC⁄åﬁIdítifyTime
;

93 
uöt32
 
lﬂdC⁄åﬁTime
;

94 
uöt8
 
lﬂdC⁄åﬁSig«tuª
[];

102 
lﬂdc⁄åﬁ_Inô
–
uöt8
 
èsk_id
 );

107 
uöt16
 
lﬂdc⁄åﬁ_evít_lo›
–
uöt8
 
èsk_id
, uöt16 
evíts
 );

113 #ifde‡
__˝lu•lus


	@Projects/zstack/SE/SampleApp/Source/LoadControl/loadcontrol_data.c

45 
	~"OSAL.h
"

46 
	~"ZDC⁄fig.h
"

48 
	~"£.h
"

49 
	~"lﬂdc⁄åﬁ.h
"

50 
	~"z˛_gíîÆ.h
"

51 
	~"z˛_£.h
"

52 
	~"z˛_key_e°ablish.h
"

57 
	#LOADCONTROL_DEVICE_VERSION
 0

	)

58 
	#LOADCONTROL_FLAGS
 0

	)

60 
	#LOADCONTROL_HWVERSION
 1

	)

61 
	#LOADCONTROL_ZCLVERSION
 1

	)

75 c⁄° 
uöt8
 
	glﬂdC⁄åﬁZCLVîsi⁄
 = 
LOADCONTROL_ZCLVERSION
;

76 c⁄° 
uöt8
 
	glﬂdC⁄åﬁHWVîsi⁄
 = 
LOADCONTROL_HWVERSION
;

77 c⁄° 
uöt8
 
	glﬂdC⁄åﬁM™uÁ˘uªrName
[] = { 16, 'T','e','x','a','s','I','n','s','t','r','u','m','e','n','t','s' };

78 c⁄° 
uöt8
 
	glﬂdC⁄åﬁModñId
[] = { 16, 'T','I','0','0','0','1',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ' };

79 c⁄° 
uöt8
 
	glﬂdC⁄åﬁD©eCode
[] = { 16, '2','0','0','6','0','8','3','1',' ',' ',' ',' ',' ',' ',' ',' ' };

80 c⁄° 
uöt8
 
	glﬂdC⁄åﬁPowîSour˚
 = 
POWER_SOURCE_MAINS_1_PHASE
;

82 
uöt8
 
	glﬂdC⁄åﬁLoˇti⁄Des¸ùti⁄
[] = { 16, ' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ' };

83 
uöt8
 
	glﬂdC⁄åﬁPhysiˇlEnvú⁄mít
 = 
PHY_UNSPECIFIED_ENV
;

84 
uöt8
 
	glﬂdC⁄åﬁDevi˚E«bÀd
 = 
DEVICE_ENABLED
;

87 
uöt16
 
	glﬂdC⁄åﬁIdítifyTime
 = 0;

88 
uöt32
 
	glﬂdC⁄åﬁTime
 = 0;

89 
uöt8
 
	glﬂdC⁄åﬁTimeSètus
 = 0x01;

92 
uöt8
 
	glﬂdC⁄åﬁUtûôyDeföedGroup
 = 0x00;

93 
uöt8
 
	glﬂdC⁄åﬁSèπR™domizeMöuãs
 = 0x00;

94 
uöt8
 
	glﬂdC⁄åﬁSt›R™domizeMöuãs
 = 0x00;

95 
uöt8
 
	glﬂdC⁄åﬁSig«tuª
[] = {0x00, 0x01, 0x02, 0x03, 0x04, 0x05, 0x06, 0x07,

99 
uöt16
 
	glﬂdC⁄åﬁKeyE°ablishmítSuôe
 = 
CERTIFICATE_BASED_KEY_ESTABLISHMENT
;

104 
CONST
 
z˛AârRec_t
 
	glﬂdC⁄åﬁAârs
[
LOADCONTROL_MAX_ATTRIBUTES
] =

109 
ZCL_CLUSTER_ID_GEN_BASIC
,

111 
ATTRID_BASIC_ZCL_VERSION
,

112 
ZCL_DATATYPE_UINT8
,

113 
ACCESS_CONTROL_READ
,

114 (*)&
lﬂdC⁄åﬁZCLVîsi⁄


118 
ZCL_CLUSTER_ID_GEN_BASIC
,

120 
ATTRID_BASIC_HW_VERSION
,

121 
ZCL_DATATYPE_UINT8
,

122 
ACCESS_CONTROL_READ
,

123 (*)&
lﬂdC⁄åﬁHWVîsi⁄


127 
ZCL_CLUSTER_ID_GEN_BASIC
,

129 
ATTRID_BASIC_MANUFACTURER_NAME
,

130 
ZCL_DATATYPE_CHAR_STR
,

131 
ACCESS_CONTROL_READ
,

132 (*)
lﬂdC⁄åﬁM™uÁ˘uªrName


136 
ZCL_CLUSTER_ID_GEN_BASIC
,

138 
ATTRID_BASIC_MODEL_ID
,

139 
ZCL_DATATYPE_CHAR_STR
,

140 
ACCESS_CONTROL_READ
,

141 (*)
lﬂdC⁄åﬁModñId


145 
ZCL_CLUSTER_ID_GEN_BASIC
,

147 
ATTRID_BASIC_DATE_CODE
,

148 
ZCL_DATATYPE_CHAR_STR
,

149 
ACCESS_CONTROL_READ
,

150 (*)
lﬂdC⁄åﬁD©eCode


154 
ZCL_CLUSTER_ID_GEN_BASIC
,

156 
ATTRID_BASIC_POWER_SOURCE
,

157 
ZCL_DATATYPE_ENUM8
,

158 
ACCESS_CONTROL_READ
,

159 (*)&
lﬂdC⁄åﬁPowîSour˚


163 
ZCL_CLUSTER_ID_GEN_BASIC
,

165 
ATTRID_BASIC_LOCATION_DESC
,

166 
ZCL_DATATYPE_CHAR_STR
,

167 (
ACCESS_CONTROL_READ
 | 
ACCESS_CONTROL_WRITE
),

168 (*)
lﬂdC⁄åﬁLoˇti⁄Des¸ùti⁄


172 
ZCL_CLUSTER_ID_GEN_BASIC
,

174 
ATTRID_BASIC_PHYSICAL_ENV
,

175 
ZCL_DATATYPE_ENUM8
,

176 (
ACCESS_CONTROL_READ
 | 
ACCESS_CONTROL_WRITE
),

177 (*)&
lﬂdC⁄åﬁPhysiˇlEnvú⁄mít


181 
ZCL_CLUSTER_ID_GEN_BASIC
,

183 
ATTRID_BASIC_DEVICE_ENABLED
,

184 
ZCL_DATATYPE_BOOLEAN
,

185 (
ACCESS_CONTROL_READ
 | 
ACCESS_CONTROL_WRITE
),

186 (*)&
lﬂdC⁄åﬁDevi˚E«bÀd


192 
ZCL_CLUSTER_ID_GEN_IDENTIFY
,

194 
ATTRID_IDENTIFY_TIME
,

195 
ZCL_DATATYPE_UINT16
,

196 (
ACCESS_CONTROL_READ
 | 
ACCESS_CONTROL_WRITE
),

197 (*)&
lﬂdC⁄åﬁIdítifyTime


205 
ZCL_CLUSTER_ID_GEN_TIME
,

207 
ATTRID_TIME_TIME
,

208 
ZCL_DATATYPE_UTC
,

209 
ACCESS_CONTROL_READ
,

210 (*)&
lﬂdC⁄åﬁTime


216 
ZCL_CLUSTER_ID_GEN_TIME
,

218 
ATTRID_TIME_STATUS
,

219 
ZCL_DATATYPE_BITMAP8
,

220 
ACCESS_CONTROL_READ
,

221 (*)&
lﬂdC⁄åﬁTimeSètus


228 
ZCL_CLUSTER_ID_SE_LOAD_CONTROL
,

230 
ATTRID_SE_UTILITY_DEFINED_GROUP
,

231 
ZCL_DATATYPE_UINT8
,

232 
ACCESS_CONTROL_READ
 | 
ACCESS_CONTROL_WRITE
,

233 (*)&
lﬂdC⁄åﬁUtûôyDeföedGroup


237 
ZCL_CLUSTER_ID_SE_LOAD_CONTROL
,

239 
ATTRID_SE_START_RANDOMIZE_MINUTES
,

240 
ZCL_DATATYPE_UINT8
,

241 
ACCESS_CONTROL_READ
 | 
ACCESS_CONTROL_WRITE
,

242 (*)&
lﬂdC⁄åﬁSèπR™domizeMöuãs


246 
ZCL_CLUSTER_ID_SE_LOAD_CONTROL
,

248 
ATTRID_SE_STOP_RANDOMIZE_MINUTES
,

249 
ZCL_DATATYPE_UINT8
,

250 
ACCESS_CONTROL_READ
 | 
ACCESS_CONTROL_WRITE
,

251 (*)&
lﬂdC⁄åﬁSt›R™domizeMöuãs


255 
ZCL_CLUSTER_ID_GEN_KEY_ESTABLISHMENT
,

257 
ATTRID_KEY_ESTABLISH_SUITE
,

258 
ZCL_DATATYPE_BITMAP16
,

259 
ACCESS_CONTROL_READ
,

260 (*)&
lﬂdC⁄åﬁKeyE°ablishmítSuôe


268 
z˛O±i⁄Rec_t
 
	glﬂdC⁄åﬁO±i⁄s
[
LOADCONTROL_MAX_OPTIONS
] =

272 
ZCL_CLUSTER_ID_GEN_TIME
,

273 –
AF_EN_SECURITY
 ),

278 
ZCL_CLUSTER_ID_SE_LOAD_CONTROL
,

279 –
AF_EN_SECURITY
 ),

288 
	#LOADCONTROL_MAX_INCLUSTERS
 3

	)

289 c⁄° 
cId_t
 
	glﬂdC⁄åﬁInClu°îLi°
[
LOADCONTROL_MAX_INCLUSTERS
] =

291 
ZCL_CLUSTER_ID_GEN_BASIC
,

292 
ZCL_CLUSTER_ID_GEN_IDENTIFY
,

293 
ZCL_CLUSTER_ID_SE_LOAD_CONTROL


296 
	#LOADCONTROL_MAX_OUTCLUSTERS
 3

	)

297 c⁄° 
cId_t
 
	glﬂdC⁄åﬁOutClu°îLi°
[
LOADCONTROL_MAX_OUTCLUSTERS
] =

299 
ZCL_CLUSTER_ID_GEN_BASIC
,

300 
ZCL_CLUSTER_ID_GEN_IDENTIFY
,

301 
ZCL_CLUSTER_ID_SE_LOAD_CONTROL


304 
Sim∂eDes¸ùti⁄F‹m©_t
 
	glﬂdC⁄åﬁSim∂eDesc
 =

306 
LOADCONTROL_ENDPOINT
,

307 
ZCL_SE_PROFILE_ID
,

308 
ZCL_SE_DEVICEID_LOAD_CTRL_EXTENSION
,

309 
LOADCONTROL_DEVICE_VERSION
,

310 
LOADCONTROL_FLAGS
,

311 
LOADCONTROL_MAX_INCLUSTERS
,

312 (
cId_t
 *)
lﬂdC⁄åﬁInClu°îLi°
,

313 
LOADCONTROL_MAX_OUTCLUSTERS
,

314 (
cId_t
 *)
lﬂdC⁄åﬁOutClu°îLi°


	@Projects/zstack/SE/SampleApp/Source/PCT/OSAL_pct.c

44 
	~"ZComDef.h
"

45 
	~"hÆ_drivîs.h
"

46 
	~"OSAL_Tasks.h
"

48 #i‡
deföed
 ( 
MT_TASK
 )

49 
	~"MT_TASK.h
"

52 
	~"ZDAµ.h
"

53 #i‡
deföed
 ( 
ZIGBEE_FREQ_AGILITY
 ) || deföed ( 
ZIGBEE_PANID_CONFLICT
 )

54 
	~"ZDNwkMgr.h
"

56 #i‡
deföed
 ( 
ZIGBEE_FRAGMENTATION
 )

57 
	~"≠s_‰ag.h
"

60 #i‡
deföed
 ( 
ZCL_KEY_ESTABLISH
 )

61 
	~"z˛_key_e°ablish.h
"

64 
	~"p˘.h
"

71 c⁄° 
pTaskEvítH™dÀrFn
 
	gèsksAº
[] = {

72 
macEvítLo›
,

73 
nwk_evít_lo›
,

74 
HÆ_Pro˚ssEvít
,

75 #i‡
deföed
–
MT_TASK
 )

76 
MT_Pro˚ssEvít
,

78 
APS_evít_lo›
,

79 #i‡
deföed
 ( 
ZIGBEE_FRAGMENTATION
 )

80 
APSF_Pro˚ssEvít
,

82 
ZDAµ_evít_lo›
,

83 #i‡
deföed
 ( 
ZIGBEE_FREQ_AGILITY
 ) || deföed ( 
ZIGBEE_PANID_CONFLICT
 )

84 
ZDNwkMgr_evít_lo›
,

86 
z˛_evít_lo›
,

87 #i‡
deföed
 ( 
ZCL_KEY_ESTABLISH
 )

88 
z˛KeyE°ablish_evít_lo›
,

90 
p˘_evít_lo›


93 c⁄° 
uöt8
 
	gèsksC¡
 = –
èsksAº
 ) / (ÅasksArr[0] );

94 
uöt16
 *
	gèsksEvíts
;

109 
	$oßlInôTasks
( )

111 
uöt8
 
èskID
 = 0;

113 
èsksEvíts
 = (
uöt16
 *)
	`oßl_mem_Æloc
––uöt16 ) * 
èsksC¡
);

114 
	`oßl_mem£t
–
èsksEvíts
, 0, (–
uöt16
 ) * 
èsksC¡
));

116 
	`macTaskInô
–
èskID
++ );

117 
	`nwk_öô
–
èskID
++ );

118 
	`HÆ_Inô
–
èskID
++ );

119 #i‡
	`deföed
–
MT_TASK
 )

120 
	`MT_TaskInô
–
èskID
++ );

122 
	`APS_Inô
–
èskID
++ );

123 #i‡
	`deföed
 ( 
ZIGBEE_FRAGMENTATION
 )

124 
	`APSF_Inô
–
èskID
++ );

126 
	`ZDAµ_Inô
–
èskID
++ );

127 #i‡
	`deföed
 ( 
ZIGBEE_FREQ_AGILITY
 ) || deföed ( 
ZIGBEE_PANID_CONFLICT
 )

128 
	`ZDNwkMgr_Inô
–
èskID
++ );

130 
	`z˛_Inô
–
èskID
++ );

131 #i‡
	`deföed
 ( 
ZCL_KEY_ESTABLISH
 )

132 
	`z˛GíîÆ_KeyE°ablish_Inô
–
èskID
++ );

134 
	`p˘_Inô
–
èskID
 );

135 
	}
}

	@Projects/zstack/SE/SampleApp/Source/PCT/pct.c

63 
	~"OSAL.h
"

64 
	~"OSAL_Clock.h
"

65 
	~"ZDAµ.h
"

66 
	~"AddrMgr.h
"

68 
	~"£.h
"

69 
	~"p˘.h
"

70 
	~"z˛_gíîÆ.h
"

71 
	~"z˛_£.h
"

72 
	~"z˛_key_e°ablish.h
"

74 
	~"⁄bﬂrd.h
"

77 
	~"hÆ_lcd.h
"

78 
	~"hÆ_Àd.h
"

79 
	~"hÆ_key.h
"

87 
	#z˛_M™d©‹yRï‹èbÀAâribuã
–
a
 ) (á =
NULL
 )

	)

109 
uöt8
 
	gp˘TaskID
;

110 
devSèãs_t
 
	gp˘NwkSèã
;

111 
uöt8
 
	gp˘TønsID
;

112 
afAddrTy≥_t
 
	gESPAddr
;

113 
uöt8
 
	glökKeySètus
;

114 
z˛CCRï‹tEvítSètus_t
 
	gr•
;

119 
p˘_H™dÀKeys
–
uöt8
 
shi·
, uöt8 
keys
 );

121 #i‡
deföed
 (
ZCL_KEY_ESTABLISH
)

122 
uöt8
 
p˘_KeyE°ablish_Rëu∫LökKey
–
uöt16
 
sh‹tAddr
 );

125 #i‡
deföed
 ( 
ZCL_ALARMS
 )

126 
p˘_Pro˚ssAœrmCmd
–
uöt8
 
§cEP
, 
afAddrTy≥_t
 *
d°Addr
,

127 
uöt16
 
˛u°îID
, 
z˛FømeHdr_t
 *
hdr
, 
uöt8
 
Àn
, uöt8 *
d©a
 );

130 
p˘_Pro˚ssIdítifyTimeCh™ge
( );

137 
uöt8
 
p˘_VÆid©eAârD©aCB
–
z˛AârRec_t
 *
pAâr
, 
z˛WrôeRec_t
 *
pAârInfo
 );

140 
p˘_BasicRe£tCB
( );

141 
p˘_IdítifyCB
–
z˛Idítify_t
 *
pCmd
 );

142 
p˘_IdítifyQuîyR•CB
–
z˛IdítifyQuîyR•_t
 *
pR•
 );

143 
p˘_AœrmCB
–
z˛Aœrm_t
 *
pAœrm
 );

147 
p˘_LﬂdC⁄åﬁEvítCB
–
z˛CCLﬂdC⁄åﬁEvít_t
 *
pCmd
,

148 
afAddrTy≥_t
 *
§cAddr
, 
uöt8
 
°©us
, uöt8 
£qNum
);

149 
p˘_C™˚lLﬂdC⁄åﬁEvítCB
–
z˛CCC™˚lLﬂdC⁄åﬁEvít_t
 *
pCmd
,

150 
afAddrTy≥_t
 *
§cAddr
, 
uöt8
 
£qNum
 );

151 
p˘_C™˚lAŒLﬂdC⁄åﬁEvítsCB
–
z˛CCC™˚lAŒLﬂdC⁄åﬁEvíts_t
 *
pCmd
,

152 
afAddrTy≥_t
 *
§cAddr
, 
uöt8
 
£qNum
);

153 
p˘_Rï‹tEvítSètusCB
–
z˛CCRï‹tEvítSètus_t
 *
pCmd
,

154 
afAddrTy≥_t
 *
§cAddr
, 
uöt8
 
£qNum
 );

155 
p˘_GëScheduÀdEvítCB
–
z˛CCGëScheduÀdEvít_t
 *
pCmd
,

156 
afAddrTy≥_t
 *
§cAddr
, 
uöt8
 
£qNum
);

162 
p˘_Pro˚ssZCLMsg
–
z˛IncomögMsg_t
 *
msg
 );

163 #i‡
deföed
 ( 
ZCL_READ
 )

164 
uöt8
 
p˘_Pro˚ssInRódR•Cmd
–
z˛IncomögMsg_t
 *
pInMsg
 );

166 #i‡
deföed
 ( 
ZCL_WRITE
 )

167 
uöt8
 
p˘_Pro˚ssInWrôeR•Cmd
–
z˛IncomögMsg_t
 *
pInMsg
 );

169 
uöt8
 
p˘_Pro˚ssInDeÁu…R•Cmd
–
z˛IncomögMsg_t
 *
pInMsg
 );

170 #i‡
deföed
 ( 
ZCL_DISCOVER
 )

171 
uöt8
 
p˘_Pro˚ssInDiscR•Cmd
–
z˛IncomögMsg_t
 *
pInMsg
 );

177 
z˛GíîÆ_AµCÆlbacks_t
 
	gp˘_GíCmdCÆlbacks
 =

179 
p˘_BasicRe£tCB
,

180 
p˘_IdítifyCB
,

181 
p˘_IdítifyQuîyR•CB
,

182 
NULL
,

183 
NULL
,

184 
NULL
,

185 
NULL
,

186 
NULL
,

187 
NULL
,

188 
NULL
,

189 
NULL
,

190 
NULL
,

191 
p˘_AœrmCB
,

192 
NULL
,

193 
NULL
,

199 
z˛SE_AµCÆlbacks_t
 
	gp˘_SECmdCÆlbacks
 =

201 
NULL
,

202 
NULL
,

203 
NULL
,

204 
NULL
,

205 
NULL
,

206 
NULL
,

207 
NULL
,

208 
NULL
,

209 
NULL
,

210 
NULL
,

211 
NULL
,

212 
NULL
,

213 
NULL
,

214 
p˘_LﬂdC⁄åﬁEvítCB
,

215 
p˘_C™˚lLﬂdC⁄åﬁEvítCB
,

216 
p˘_C™˚lAŒLﬂdC⁄åﬁEvítsCB
,

217 
p˘_Rï‹tEvítSètusCB
,

218 
p˘_GëScheduÀdEvítCB
,

230 
	$p˘_Inô
–
uöt8
 
èsk_id
 )

232 
p˘TaskID
 = 
èsk_id
;

235 
ESPAddr
.
addrMode
 = (
afAddrMode_t
)
Addr16Bô
;

236 
ESPAddr
.
ídPoöt
 = 
PCT_ENDPOINT
;

237 
ESPAddr
.
addr
.
sh‹tAddr
 = 0;

240 
	`z˛SE_Inô
–&
p˘Sim∂eDesc
 );

243 
	`z˛GíîÆ_Regi°îCmdCÆlbacks
–
PCT_ENDPOINT
, &
p˘_GíCmdCÆlbacks
 );

246 
	`z˛SE_Regi°îCmdCÆlbacks
–
PCT_ENDPOINT
, &
p˘_SECmdCÆlbacks
 );

249 
	`z˛_ªgi°îAârLi°
–
PCT_ENDPOINT
, 
PCT_MAX_ATTRIBUTES
, 
p˘Aârs
 );

252 
	`z˛_ªgi°îClu°îO±i⁄Li°
–
PCT_ENDPOINT
, 
PCT_MAX_OPTIONS
, 
p˘O±i⁄s
 );

255 
	`z˛_ªgi°îVÆid©eAârD©a
–
p˘_VÆid©eAârD©aCB
 );

258 
	`z˛_ªgi°îF‹Msg
–
p˘TaskID
 );

261 
	`Regi°îF‹Keys
–
p˘TaskID
 );

264 
	`oßl_°¨t_timîEx
–
p˘TaskID
, 
PCT_UPDATE_TIME_EVT
, 
PCT_UPDATE_TIME_PERIOD
 );

265 
	}
}

277 
uöt16
 
	$p˘_evít_lo›
–
uöt8
 
èsk_id
, 
uöt16
 
evíts
 )

279 
afIncomögMSGPackë_t
 *
MSGpkt
;

281 i‡–
evíts
 & 
SYS_EVENT_MSG
 )

283  (
MSGpkt
 = (
afIncomögMSGPackë_t
 *)
	`oßl_msg_ª˚ive
–
p˘TaskID
 )) )

285  
MSGpkt
->
hdr
.
evít
 )

287 
ZCL_INCOMING_MSG
:

289 
	`p˘_Pro˚ssZCLMsg
–(
z˛IncomögMsg_t
 *)
MSGpkt
 );

292 
KEY_CHANGE
:

293 
	`p˘_H™dÀKeys
–((
keyCh™ge_t
 *)
MSGpkt
)->
°©e
, ((keyCh™ge_à*)MSGpkt)->
keys
 );

296 
ZDO_STATE_CHANGE
:

297 
p˘NwkSèã
 = (
devSèãs_t
)(
MSGpkt
->
hdr
.
°©us
);

299 i‡(
ZG_SECURE_ENABLED
)

301 i‡–
p˘NwkSèã
 =
DEV_END_DEVICE
 )

304 
lökKeySètus
 = 
	`p˘_KeyE°ablish_Rëu∫LökKey
(
ESPAddr
.
addr
.
sh‹tAddr
);

306 i‡(
lökKeySètus
 !
ZSuc˚ss
)

309 
	`oßl_£t_evít
–
p˘TaskID
, 
PCT_KEY_ESTABLISHMENT_REQUEST_EVT
);

314 
	`NLME_SëPﬁlR©e
 ( 
SE_DEVICE_POLL_RATE
 );

323 
	`oßl_msg_dóŒoˇã
–(
uöt8
 *)
MSGpkt
 );

328  (
evíts
 ^ 
SYS_EVENT_MSG
);

332 i‡–
evíts
 & 
PCT_KEY_ESTABLISHMENT_REQUEST_EVT
 )

334 
	`z˛GíîÆ_KeyE°ablish_InôüãKeyE°ablishmít
(
p˘TaskID
, &
ESPAddr
, 
p˘TønsID
);

336  ( 
evíts
 ^ 
PCT_KEY_ESTABLISHMENT_REQUEST_EVT
 );

340 i‡–
evíts
 & 
PCT_IDENTIFY_TIMEOUT_EVT
 )

342 i‡–
p˘IdítifyTime
 > 0 )

344 
p˘IdítifyTime
--;

346 
	`p˘_Pro˚ssIdítifyTimeCh™ge
();

348  ( 
evíts
 ^ 
PCT_IDENTIFY_TIMEOUT_EVT
 );

352 i‡–
evíts
 & 
PCT_UPDATE_TIME_EVT
 )

354 
p˘Time
 = 
	`oßl_gëClock
();

355 
	`oßl_°¨t_timîEx
–
p˘TaskID
, 
PCT_UPDATE_TIME_EVT
, 
PCT_UPDATE_TIME_PERIOD
 );

357  ( 
evíts
 ^ 
PCT_UPDATE_TIME_EVT
 );

361 i‡–
evíts
 & 
PCT_LOAD_CTRL_EVT
 )

369 
r•
.
evítSètus
 = 
EVENT_STATUS_LOAD_CONTROL_EVENT_COMPLETED
;

370 
	`z˛SE_LﬂdC⁄åﬁ_Síd_Rï‹tEvítSètus
–
PCT_ENDPOINT
, &
ESPAddr
,

371 &
r•
, 
Ál£
, 
p˘TønsID
 );

373 
	`HÆLcdWrôeSåög
("PCT EvàCom∂ëe", 
HAL_LCD_LINE_3
);

375 
	`HÆLedSë
(
HAL_LED_4
, 
HAL_LED_MODE_OFF
);

377  ( 
evíts
 ^ 
PCT_LOAD_CTRL_EVT
 );

383 
	}
}

396 
	$p˘_Pro˚ssIdítifyTimeCh™ge
( )

398 i‡–
p˘IdítifyTime
 > 0 )

400 
	`oßl_°¨t_timîEx
–
p˘TaskID
, 
PCT_IDENTIFY_TIMEOUT_EVT
, 1000 );

401 
	`HÆLedBlök
 ( 
HAL_LED_4
, 0xFF, 
HAL_LED_DEFAULT_DUTY_CYCLE
, 
HAL_LED_DEFAULT_FLASH_TIME
 );

405 
	`HÆLedSë
 ( 
HAL_LED_4
, 
HAL_LED_MODE_OFF
 );

406 
	`oßl_°›_timîEx
–
p˘TaskID
, 
PCT_IDENTIFY_TIMEOUT_EVT
 );

408 
	}
}

410 #i‡
deföed
 (
ZCL_KEY_ESTABLISH
)

420 
uöt8
 
	$p˘_KeyE°ablish_Rëu∫LökKey
–
uöt16
 
sh‹tAddr
 )

422 
APSME_LökKeyD©a_t
* 
keyD©a
;

423 
uöt8
 
°©us
 = 
ZFaûuª
;

424 
AddrMgrE¡ry_t
 
íåy
;

428 
íåy
.
u£r
 = 
ADDRMGR_USER_DEFAULT
;

429 
íåy
.
nwkAddr
 = 
sh‹tAddr
;

431 i‡–
	`AddrMgrE¡ryLookupNwk
–&
íåy
 ) )

434 
	`APSME_LökKeyD©aGë
–
íåy
.
extAddr
, &
keyD©a
 );

436 i‡–(
keyD©a
 !
NULL
Ë&& (keyD©a->
key
 != NULL) )

438 
°©us
 = 
ZSuc˚ss
;

444 
°©us
 = 
ZInvÆidP¨amëî
;

447  
°©us
;

448 
	}
}

464 
	$p˘_H™dÀKeys
–
uöt8
 
shi·
, uöt8 
keys
 )

467 i‡–
shi·
 )

469 i‡–
keys
 & 
HAL_KEY_SW_1
 )

472 i‡–
keys
 & 
HAL_KEY_SW_2
 )

475 i‡–
keys
 & 
HAL_KEY_SW_3
 )

478 i‡–
keys
 & 
HAL_KEY_SW_4
 )

484 i‡–
keys
 & 
HAL_KEY_SW_1
 )

486 
	`ZDOInôDevi˚
(0);

489 i‡–
keys
 & 
HAL_KEY_SW_2
 )

494 i‡–
keys
 & 
HAL_KEY_SW_3
 )

499 i‡–
keys
 & 
HAL_KEY_SW_4
 )

504 
	}
}

517 
uöt8
 
	$p˘_VÆid©eAârD©aCB
–
z˛AârRec_t
 *
pAâr
, 
z˛WrôeRec_t
 *
pAârInfo
 )

519 
uöt8
 
vÆid
 = 
TRUE
;

521  
pAârInfo
->
d©aTy≥
 )

523 
ZCL_DATATYPE_BOOLEAN
:

524 i‡––*(
pAârInfo
->
©åD©a
) != 0 ) && ( *(pAttrInfo->attrData) != 1 ) )

525 
vÆid
 = 
FALSE
;

532  ( 
vÆid
 );

533 
	}
}

545 
	$p˘_BasicRe£tCB
( )

548 
	}
}

560 
	$p˘_IdítifyCB
–
z˛Idítify_t
 *
pCmd
 )

562 
p˘IdítifyTime
 = 
pCmd
->
idítifyTime
;

563 
	`p˘_Pro˚ssIdítifyTimeCh™ge
();

564 
	}
}

576 
	$p˘_IdítifyQuîyR•CB
–
z˛IdítifyQuîyR•_t
 *
pR•
 )

579 
	}
}

592 
	$p˘_AœrmCB
–
z˛Aœrm_t
 *
pAœrm
 )

595 
	}
}

597 #i‡
deföed
 (
ZCL_LOAD_CONTROL
)

615 
	$p˘_SídRï‹tEvítSètus
–
afAddrTy≥_t
 *
§cAddr
, 
uöt8
 
£qNum
,

616 
uöt32
 
evítID
, uöt32 
°¨tTime
,

617 
uöt8
 
evítSètus
, uöt8 
¸ôiˇlôyLevñ
,

618 
uöt8
 
evítC⁄åﬁ
 )

622 
r•
.
issuîEvítID
 = 
evítID
;

623 
r•
.
evítSèπTime
 = 
°¨tTime
;

624 
r•
.
¸ôiˇlôyLevñAµlõd
 = 
¸ôiˇlôyLevñ
;

625 
r•
.
evítC⁄åﬁ
 =ÉventControl;

626 
r•
.
evítSètus
 =ÉventStatus;

627 
r•
.
sig«tuªTy≥
 = 
SE_PROFILE_SIGNATURE_TYPE_ECDSA
;

631 
	`oßl_mem˝y
–
r•
.
sig«tuª
, 
p˘Sig«tuª
, 
SE_PROFILE_SIGNATURE_LENGTH
 );

634 
r•
.
coﬁögTem≥øtuªSëPoötAµlõd
 = 
SE_OPTIONAL_FIELD_TEMPERATURE_SET_POINT
;

635 
r•
.
hótögTem≥øtuªSëPoötAµlõd
 = 
SE_OPTIONAL_FIELD_TEMPERATURE_SET_POINT
;

636 
r•
.
avîageLﬂdAdju°mít
 = 
SE_OPTIONAL_FIELD_INT8
;

637 
r•
.
dutyCy˛eAµlõd
 = 
SE_OPTIONAL_FIELD_UINT8
;

643 
	`z˛SE_LﬂdC⁄åﬁ_Síd_Rï‹tEvítSètus
–
PCT_ENDPOINT
, 
§cAddr
,

644 &
r•
, 
Ál£
, 
£qNum
 );

645 
	}
}

662 
	$p˘_LﬂdC⁄åﬁEvítCB
–
z˛CCLﬂdC⁄åﬁEvít_t
 *
pCmd
,

663 
afAddrTy≥_t
 *
§cAddr
, 
uöt8
 
°©us
,

664 
uöt8
 
£qNum
)

666 #i‡
	`deföed
 ( 
ZCL_LOAD_CONTROL
 )

670 
uöt8
 
evítSètus
;

672 i‡–
°©us
 =
ZCL_STATUS_INVALID_FIELD
 )

676 
evítSètus
 = 
EVENT_STATUS_LOAD_CONTROL_EVENT_REJECTED
;

680 
evítSètus
 = 
EVENT_STATUS_LOAD_CONTROL_EVENT_RECEIVED
;

684 
	`p˘_SídRï‹tEvítSètus
–
§cAddr
, 
£qNum
, 
pCmd
->
issuîEvít
,

685 
pCmd
->
°¨tTime
, 
evítSètus
,

686 
pCmd
->
¸ôiˇlôyLevñ
,ÖCmd->
evítC⁄åﬁ
);

689 i‡–
°©us
 !
ZCL_STATUS_INVALID_FIELD
 )

692 i‡–
pCmd
->
issuîEvít
 =
LOADCONTROL_EVENT_ID
 )

694 i‡–
pCmd
->
°¨tTime
 =
START_TIME_NOW
 )

697 
evítSètus
 = 
EVENT_STATUS_LOAD_CONTROL_EVENT_STARTED
;

698 
	`p˘_SídRï‹tEvítSètus
–
§cAddr
, 
£qNum
, 
pCmd
->
issuîEvít
,

699 
pCmd
->
°¨tTime
, 
evítSètus
,

700 
pCmd
->
¸ôiˇlôyLevñ
,ÖCmd->
evítC⁄åﬁ
);

702 i‡–
pCmd
->
devi˚GroupCœss
 =
ONOFF_LOAD_DEVICE_CLASS
 )

704 
	`HÆLcdWrôeSåög
("Lﬂd EvàSèπed", 
HAL_LCD_LINE_3
);

706 i‡–
pCmd
->
devi˚GroupCœss
 =
HVAC_DEVICE_CLASS
 )

708 
	`HÆLcdWrôeSåög
("PCT EvàSèπed", 
HAL_LCD_LINE_3
);

711 
	`HÆLedBlök
 ( 
HAL_LED_4
, 0, 50, 500 );

713 
	`oßl_°¨t_timîEx
–
p˘TaskID
, 
PCT_LOAD_CTRL_EVT
,

714 (
PCT_LOAD_CTRL_PERIOD
 * (
pCmd
->
duøti⁄InMöuãs
)) );

719 
	}
}

734 
	$p˘_C™˚lLﬂdC⁄åﬁEvítCB
–
z˛CCC™˚lLﬂdC⁄åﬁEvít_t
 *
pCmd
,

735 
afAddrTy≥_t
 *
§cAddr
, 
uöt8
 
£qNum
 )

737 #i‡
	`deföed
 ( 
ZCL_LOAD_CONTROL
 )

759 
	`p˘_SídRï‹tEvítSètus
–
§cAddr
, 
£qNum
, 
pCmd
->
issuîEvítID
,

760 
SE_OPTIONAL_FIELD_UINT32
,

761 
EVENT_STATUS_LOAD_CONTROL_EVENT_RECEIVED
,

762 
SE_OPTIONAL_FIELD_UINT8
,

763 
SE_OPTIONAL_FIELD_UINT8
 );

767 
	}
}

782 
	$p˘_C™˚lAŒLﬂdC⁄åﬁEvítsCB
–
z˛CCC™˚lAŒLﬂdC⁄åﬁEvíts_t
 *
pCmd
,

783 
afAddrTy≥_t
 *
§cAddr
, 
uöt8
 
£qNum
 )

789 
	}
}

804 
	$p˘_Rï‹tEvítSètusCB
–
z˛CCRï‹tEvítSètus_t
 *
pCmd
,

805 
afAddrTy≥_t
 *
§cAddr
, 
uöt8
 
£qNum
)

808 
	}
}

822 
	$p˘_GëScheduÀdEvítCB
–
z˛CCGëScheduÀdEvít_t
 *
pCmd
,

823 
afAddrTy≥_t
 *
§cAddr
, 
uöt8
 
£qNum
 )

826 
	}
}

843 
	$p˘_Pro˚ssZCLMsg
–
z˛IncomögMsg_t
 *
pInMsg
 )

845  
pInMsg
->
z˛Hdr
.
comm™dID
 )

847 #i‡
	`deföed
 ( 
ZCL_READ
 )

848 
ZCL_CMD_READ_RSP
:

849 
	`p˘_Pro˚ssInRódR•Cmd
–
pInMsg
 );

852 #i‡
	`deföed
 ( 
ZCL_WRITE
 )

853 
ZCL_CMD_WRITE_RSP
:

854 
	`p˘_Pro˚ssInWrôeR•Cmd
–
pInMsg
 );

857 
ZCL_CMD_DEFAULT_RSP
:

858 
	`p˘_Pro˚ssInDeÁu…R•Cmd
–
pInMsg
 );

860 #i‡
	`deföed
 ( 
ZCL_DISCOVER
 )

861 
ZCL_CMD_DISCOVER_RSP
:

862 
	`p˘_Pro˚ssInDiscR•Cmd
–
pInMsg
 );

869 i‡–
pInMsg
->
©åCmd
 !
NULL
 )

872 
	`oßl_mem_‰ì
–
pInMsg
->
©åCmd
 );

873 
pInMsg
->
©åCmd
 = 
NULL
;

875 
	}
}

877 #i‡
deföed
 ( 
ZCL_READ
 )

887 
uöt8
 
	$p˘_Pro˚ssInRódR•Cmd
–
z˛IncomögMsg_t
 *
pInMsg
 )

889 
z˛RódR•Cmd_t
 *
ªadR•Cmd
;

890 
uöt8
 
i
;

892 
ªadR•Cmd
 = (
z˛RódR•Cmd_t
 *)
pInMsg
->
©åCmd
;

893 
i
 = 0; i < 
ªadR•Cmd
->
numAâr
; i++)

900  
TRUE
;

901 
	}
}

904 #i‡
deföed
 ( 
ZCL_WRITE
 )

914 
uöt8
 
	$p˘_Pro˚ssInWrôeR•Cmd
–
z˛IncomögMsg_t
 *
pInMsg
 )

916 
z˛WrôeR•Cmd_t
 *
wrôeR•Cmd
;

917 
uöt8
 
i
;

919 
wrôeR•Cmd
 = (
z˛WrôeR•Cmd_t
 *)
pInMsg
->
©åCmd
;

920 
i
 = 0; i < 
wrôeR•Cmd
->
numAâr
; i++)

926  
TRUE
;

927 
	}
}

940 
uöt8
 
	$p˘_Pro˚ssInDeÁu…R•Cmd
–
z˛IncomögMsg_t
 *
pInMsg
 )

946  
TRUE
;

947 
	}
}

949 #i‡
deföed
 ( 
ZCL_DISCOVER
 )

959 
uöt8
 
	$p˘_Pro˚ssInDiscR•Cmd
–
z˛IncomögMsg_t
 *
pInMsg
 )

961 
z˛DiscovîR•Cmd_t
 *
discovîR•Cmd
;

962 
uöt8
 
i
;

964 
discovîR•Cmd
 = (
z˛DiscovîR•Cmd_t
 *)
pInMsg
->
©åCmd
;

965  
i
 = 0; i < 
discovîR•Cmd
->
numAâr
; i++ )

970  
TRUE
;

971 
	}
}

	@Projects/zstack/SE/SampleApp/Source/PCT/pct.h

40 #i‚de‡
PCT_H


41 
	#PCT_H


	)

43 #ifde‡
__˝lu•lus


51 
	~"z˛.h
"

56 
	#PCT_ENDPOINT
 0x09

	)

58 
	#PCT_MAX_ATTRIBUTES
 16

	)

60 
	#PCT_MAX_OPTIONS
 3

	)

62 
	#PCT_UPDATE_TIME_PERIOD
 1000

63 
	#PCT_LOAD_CTRL_PERIOD
 60000

	)

64 
	#LOADCONTROL_EVENT_ID
 0x12345678

65 
	#START_TIME_NOW
 0x00000000

66 
	#HVAC_DEVICE_CLASS
 0x000001

67 
	#ONOFF_LOAD_DEVICE_CLASS
 0x000080

68 
	#SE_DEVICE_POLL_RATE
 8000

69 

	)

71 
	#PCT_IDENTIFY_TIMEOUT_EVT
 0x0001

	)

72 
	#PCT_UPDATE_TIME_EVT
 0x0002

	)

73 
	#PCT_KEY_ESTABLISHMENT_REQUEST_EVT
 0x0004

	)

74 
	#PCT_LOAD_CTRL_EVT
 0x0008

	)

89 
Sim∂eDes¸ùti⁄F‹m©_t
 
p˘Sim∂eDesc
;

90 
CONST
 
z˛AârRec_t
 
p˘Aârs
[];

91 
z˛O±i⁄Rec_t
 
p˘O±i⁄s
[];

92 
uöt8
 
p˘Devi˚E«bÀd
;

93 
uöt16
 
p˘Tønsôi⁄Time
;

94 
uöt16
 
p˘IdítifyTime
;

95 
uöt32
 
p˘Time
;

96 
uöt8
 
p˘Sig«tuª
[];

104 
p˘_Inô
–
uöt8
 
èsk_id
 );

109 
uöt16
 
p˘_evít_lo›
–
uöt8
 
èsk_id
, uöt16 
evíts
 );

115 #ifde‡
__˝lu•lus


	@Projects/zstack/SE/SampleApp/Source/PCT/pct_data.c

45 
	~"OSAL.h
"

46 
	~"ZDC⁄fig.h
"

48 
	~"£.h
"

49 
	~"p˘.h
"

50 
	~"z˛_gíîÆ.h
"

51 
	~"z˛_£.h
"

52 
	~"z˛_key_e°ablish.h
"

57 
	#PCT_DEVICE_VERSION
 0

	)

58 
	#PCT_FLAGS
 0

	)

60 
	#PCT_HWVERSION
 1

	)

61 
	#PCT_ZCLVERSION
 1

	)

75 c⁄° 
uöt8
 
	gp˘ZCLVîsi⁄
 = 
PCT_ZCLVERSION
;

76 c⁄° 
uöt8
 
	gp˘HWVîsi⁄
 = 
PCT_HWVERSION
;

77 c⁄° 
uöt8
 
	gp˘M™uÁ˘uªrName
[] = { 16, 'T','e','x','a','s','I','n','s','t','r','u','m','e','n','t','s' };

78 c⁄° 
uöt8
 
	gp˘ModñId
[] = { 16, 'T','I','0','0','0','1',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ' };

79 c⁄° 
uöt8
 
	gp˘D©eCode
[] = { 16, '2','0','0','6','0','8','3','1',' ',' ',' ',' ',' ',' ',' ',' ' };

80 c⁄° 
uöt8
 
	gp˘PowîSour˚
 = 
POWER_SOURCE_MAINS_1_PHASE
;

82 
uöt8
 
	gp˘Loˇti⁄Des¸ùti⁄
[] = { 16, ' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ' };

83 
uöt8
 
	gp˘PhysiˇlEnvú⁄mít
 = 
PHY_UNSPECIFIED_ENV
;

84 
uöt8
 
	gp˘Devi˚E«bÀd
 = 
DEVICE_ENABLED
;

87 
uöt16
 
	gp˘IdítifyTime
 = 0;

88 
uöt32
 
	gp˘Time
 = 0;

89 
uöt8
 
	gp˘TimeSètus
 = 0x01;

92 
uöt8
 
	gp˘UtûôyDeföedGroup
 = 0x00;

93 
uöt8
 
	gp˘SèπR™domizeMöuãs
 = 0x00;

94 
uöt8
 
	gp˘St›R™domizeMöuãs
 = 0x00;

95 
uöt8
 
	gp˘Sig«tuª
[] = {0x00, 0x01, 0x02, 0x03, 0x04, 0x05, 0x06, 0x07,

99 
uöt16
 
	gp˘KeyE°ablishmítSuôe
 = 
CERTIFICATE_BASED_KEY_ESTABLISHMENT
;

104 
CONST
 
z˛AârRec_t
 
	gp˘Aârs
[
PCT_MAX_ATTRIBUTES
] =

109 
ZCL_CLUSTER_ID_GEN_BASIC
,

111 
ATTRID_BASIC_ZCL_VERSION
,

112 
ZCL_DATATYPE_UINT8
,

113 
ACCESS_CONTROL_READ
,

114 (*)&
p˘ZCLVîsi⁄


118 
ZCL_CLUSTER_ID_GEN_BASIC
,

120 
ATTRID_BASIC_HW_VERSION
,

121 
ZCL_DATATYPE_UINT8
,

122 
ACCESS_CONTROL_READ
,

123 (*)&
p˘HWVîsi⁄


127 
ZCL_CLUSTER_ID_GEN_BASIC
,

129 
ATTRID_BASIC_MANUFACTURER_NAME
,

130 
ZCL_DATATYPE_CHAR_STR
,

131 
ACCESS_CONTROL_READ
,

132 (*)
p˘M™uÁ˘uªrName


136 
ZCL_CLUSTER_ID_GEN_BASIC
,

138 
ATTRID_BASIC_MODEL_ID
,

139 
ZCL_DATATYPE_CHAR_STR
,

140 
ACCESS_CONTROL_READ
,

141 (*)
p˘ModñId


145 
ZCL_CLUSTER_ID_GEN_BASIC
,

147 
ATTRID_BASIC_DATE_CODE
,

148 
ZCL_DATATYPE_CHAR_STR
,

149 
ACCESS_CONTROL_READ
,

150 (*)
p˘D©eCode


154 
ZCL_CLUSTER_ID_GEN_BASIC
,

156 
ATTRID_BASIC_POWER_SOURCE
,

157 
ZCL_DATATYPE_ENUM8
,

158 
ACCESS_CONTROL_READ
,

159 (*)&
p˘PowîSour˚


163 
ZCL_CLUSTER_ID_GEN_BASIC
,

165 
ATTRID_BASIC_LOCATION_DESC
,

166 
ZCL_DATATYPE_CHAR_STR
,

167 (
ACCESS_CONTROL_READ
 | 
ACCESS_CONTROL_WRITE
),

168 (*)
p˘Loˇti⁄Des¸ùti⁄


172 
ZCL_CLUSTER_ID_GEN_BASIC
,

174 
ATTRID_BASIC_PHYSICAL_ENV
,

175 
ZCL_DATATYPE_ENUM8
,

176 (
ACCESS_CONTROL_READ
 | 
ACCESS_CONTROL_WRITE
),

177 (*)&
p˘PhysiˇlEnvú⁄mít


181 
ZCL_CLUSTER_ID_GEN_BASIC
,

183 
ATTRID_BASIC_DEVICE_ENABLED
,

184 
ZCL_DATATYPE_BOOLEAN
,

185 (
ACCESS_CONTROL_READ
 | 
ACCESS_CONTROL_WRITE
),

186 (*)&
p˘Devi˚E«bÀd


192 
ZCL_CLUSTER_ID_GEN_IDENTIFY
,

194 
ATTRID_IDENTIFY_TIME
,

195 
ZCL_DATATYPE_UINT16
,

196 (
ACCESS_CONTROL_READ
 | 
ACCESS_CONTROL_WRITE
),

197 (*)&
p˘IdítifyTime


205 
ZCL_CLUSTER_ID_GEN_TIME
,

207 
ATTRID_TIME_TIME
,

208 
ZCL_DATATYPE_UTC
,

209 
ACCESS_CONTROL_READ
,

210 (*)&
p˘Time


216 
ZCL_CLUSTER_ID_GEN_TIME
,

218 
ATTRID_TIME_STATUS
,

219 
ZCL_DATATYPE_BITMAP8
,

220 
ACCESS_CONTROL_READ
,

221 (*)&
p˘TimeSètus


228 
ZCL_CLUSTER_ID_SE_LOAD_CONTROL
,

230 
ATTRID_SE_UTILITY_DEFINED_GROUP
,

231 
ZCL_DATATYPE_UINT8
,

232 
ACCESS_CONTROL_READ
 | 
ACCESS_CONTROL_WRITE
,

233 (*)&
p˘UtûôyDeföedGroup


237 
ZCL_CLUSTER_ID_SE_LOAD_CONTROL
,

239 
ATTRID_SE_START_RANDOMIZE_MINUTES
,

240 
ZCL_DATATYPE_UINT8
,

241 
ACCESS_CONTROL_READ
 | 
ACCESS_CONTROL_WRITE
,

242 (*)&
p˘SèπR™domizeMöuãs


246 
ZCL_CLUSTER_ID_SE_LOAD_CONTROL
,

248 
ATTRID_SE_STOP_RANDOMIZE_MINUTES
,

249 
ZCL_DATATYPE_UINT8
,

250 
ACCESS_CONTROL_READ
 | 
ACCESS_CONTROL_WRITE
,

251 (*)&
p˘St›R™domizeMöuãs


255 
ZCL_CLUSTER_ID_GEN_KEY_ESTABLISHMENT
,

257 
ATTRID_KEY_ESTABLISH_SUITE
,

258 
ZCL_DATATYPE_BITMAP16
,

259 
ACCESS_CONTROL_READ
,

260 (*)&
p˘KeyE°ablishmítSuôe


268 
z˛O±i⁄Rec_t
 
	gp˘O±i⁄s
[
PCT_MAX_OPTIONS
] =

272 
ZCL_CLUSTER_ID_GEN_TIME
,

273 –
AF_EN_SECURITY
 ),

278 
ZCL_CLUSTER_ID_SE_PRICING
,

279 –
AF_EN_SECURITY
 ),

282 
ZCL_CLUSTER_ID_SE_LOAD_CONTROL
,

283 –
AF_EN_SECURITY
 ),

292 
	#PCT_MAX_INCLUSTERS
 3

	)

293 c⁄° 
cId_t
 
	gp˘InClu°îLi°
[
PCT_MAX_INCLUSTERS
] =

295 
ZCL_CLUSTER_ID_GEN_BASIC
,

296 
ZCL_CLUSTER_ID_GEN_IDENTIFY
,

297 
ZCL_CLUSTER_ID_SE_LOAD_CONTROL


300 
	#PCT_MAX_OUTCLUSTERS
 3

	)

301 c⁄° 
cId_t
 
	gp˘OutClu°îLi°
[
PCT_MAX_OUTCLUSTERS
] =

303 
ZCL_CLUSTER_ID_GEN_BASIC
,

304 
ZCL_CLUSTER_ID_GEN_IDENTIFY
,

305 
ZCL_CLUSTER_ID_SE_LOAD_CONTROL


308 
Sim∂eDes¸ùti⁄F‹m©_t
 
	gp˘Sim∂eDesc
 =

310 
PCT_ENDPOINT
,

311 
ZCL_SE_PROFILE_ID
,

312 
ZCL_SE_DEVICEID_PCT
,

313 
PCT_DEVICE_VERSION
,

314 
PCT_FLAGS
,

315 
PCT_MAX_INCLUSTERS
,

316 (
cId_t
 *)
p˘InClu°îLi°
,

317 
PCT_MAX_OUTCLUSTERS
,

318 (
cId_t
 *)
p˘OutClu°îLi°


	@Projects/zstack/SE/SampleApp/Source/RangeExt/OSAL_RangeExt.c

44 
	~"ZComDef.h
"

45 
	~"hÆ_drivîs.h
"

46 
	~"OSAL_Tasks.h
"

48 #i‡
deföed
 ( 
MT_TASK
 )

49 
	~"MT_TASK.h
"

52 
	~"ZDAµ.h
"

53 #i‡
deföed
 ( 
ZIGBEE_FREQ_AGILITY
 ) || deföed ( 
ZIGBEE_PANID_CONFLICT
 )

54 
	~"ZDNwkMgr.h
"

56 #i‡
deföed
 ( 
ZIGBEE_FRAGMENTATION
 )

57 
	~"≠s_‰ag.h
"

60 #i‡
deföed
 ( 
ZCL_KEY_ESTABLISH
 )

61 
	~"z˛_key_e°ablish.h
"

64 
	~"øngìxt.h
"

71 c⁄° 
pTaskEvítH™dÀrFn
 
	gèsksAº
[] = {

72 
macEvítLo›
,

73 
nwk_evít_lo›
,

74 
HÆ_Pro˚ssEvít
,

75 #i‡
deföed
–
MT_TASK
 )

76 
MT_Pro˚ssEvít
,

78 
APS_evít_lo›
,

79 #i‡
deföed
 ( 
ZIGBEE_FRAGMENTATION
 )

80 
APSF_Pro˚ssEvít
,

82 
ZDAµ_evít_lo›
,

83 #i‡
deföed
 ( 
ZIGBEE_FREQ_AGILITY
 ) || deföed ( 
ZIGBEE_PANID_CONFLICT
 )

84 
ZDNwkMgr_evít_lo›
,

86 
z˛_evít_lo›
,

87 #i‡
deföed
 ( 
ZCL_KEY_ESTABLISH
 )

88 
z˛KeyE°ablish_evít_lo›
,

90 
øngìxt_evít_lo›


93 c⁄° 
uöt8
 
	gèsksC¡
 = –
èsksAº
 ) / (ÅasksArr[0] );

94 
uöt16
 *
	gèsksEvíts
;

109 
	$oßlInôTasks
( )

111 
uöt8
 
èskID
 = 0;

113 
èsksEvíts
 = (
uöt16
 *)
	`oßl_mem_Æloc
––uöt16 ) * 
èsksC¡
);

114 
	`oßl_mem£t
–
èsksEvíts
, 0, (–
uöt16
 ) * 
èsksC¡
));

116 
	`macTaskInô
–
èskID
++ );

117 
	`nwk_öô
–
èskID
++ );

118 
	`HÆ_Inô
–
èskID
++ );

119 #i‡
	`deföed
–
MT_TASK
 )

120 
	`MT_TaskInô
–
èskID
++ );

122 
	`APS_Inô
–
èskID
++ );

123 #i‡
	`deföed
 ( 
ZIGBEE_FRAGMENTATION
 )

124 
	`APSF_Inô
–
èskID
++ );

126 
	`ZDAµ_Inô
–
èskID
++ );

127 #i‡
	`deföed
 ( 
ZIGBEE_FREQ_AGILITY
 ) || deföed ( 
ZIGBEE_PANID_CONFLICT
 )

128 
	`ZDNwkMgr_Inô
–
èskID
++ );

130 
	`z˛_Inô
–
èskID
++ );

131 #i‡
	`deföed
 ( 
ZCL_KEY_ESTABLISH
 )

132 
	`z˛GíîÆ_KeyE°ablish_Inô
–
èskID
++ );

134 
	`øngìxt_Inô
–
èskID
 );

135 
	}
}

	@Projects/zstack/SE/SampleApp/Source/RangeExt/rangeext.c

61 
	~"OSAL.h
"

62 
	~"OSAL_Clock.h
"

63 
	~"ZDAµ.h
"

64 
	~"AddrMgr.h
"

66 
	~"£.h
"

67 
	~"øngìxt.h
"

68 
	~"z˛_gíîÆ.h
"

69 
	~"z˛_key_e°ablish.h
"

71 
	~"⁄bﬂrd.h
"

74 
	~"hÆ_lcd.h
"

75 
	~"hÆ_Àd.h
"

76 
	~"hÆ_key.h
"

84 
	#z˛_M™d©‹yRï‹èbÀAâribuã
–
a
 ) (á =
NULL
 )

	)

106 
uöt8
 
	gøngeExtTaskID
;

107 
devSèãs_t
 
	gøngeExtNwkSèã
;

108 
uöt8
 
	gøngeExtTønsID
;

109 
afAddrTy≥_t
 
	gESPAddr
;

110 
uöt8
 
	glökKeySètus
;

115 
øngìxt_H™dÀKeys
–
uöt8
 
shi·
, uöt8 
keys
 );

117 #i‡
deföed
 ( 
ZCL_KEY_ESTABLISH
 )

118 
uöt8
 
øngìxt_KeyE°ablish_Rëu∫LökKey
–
uöt16
 
sh‹tAddr
 );

121 #i‡
deföed
 ( 
ZCL_ALARMS
 )

122 
øngìxt_Pro˚ssAœrmCmd
–
uöt8
 
§cEP
, 
afAddrTy≥_t
 *
d°Addr
,

123 
uöt16
 
˛u°îID
, 
z˛FømeHdr_t
 *
hdr
, 
uöt8
 
Àn
, uöt8 *
d©a
 );

126 
øngìxt_Pro˚ssIdítifyTimeCh™ge
( );

133 
uöt8
 
øngìxt_VÆid©eAârD©aCB
–
z˛AârRec_t
 *
pAâr
, 
z˛WrôeRec_t
 *
pAârInfo
 );

136 
øngìxt_BasicRe£tCB
( );

137 
øngìxt_IdítifyCB
–
z˛Idítify_t
 *
pCmd
 );

138 
øngìxt_IdítifyQuîyR•CB
–
z˛IdítifyQuîyR•_t
 *
pR•
 );

139 
øngìxt_AœrmCB
–
z˛Aœrm_t
 *
pAœrm
 );

145 
øngìxt_Pro˚ssZCLMsg
–
z˛IncomögMsg_t
 *
msg
 );

146 #i‡
deföed
 ( 
ZCL_READ
 )

147 
uöt8
 
øngìxt_Pro˚ssInRódR•Cmd
–
z˛IncomögMsg_t
 *
pInMsg
 );

149 #i‡
deföed
 ( 
ZCL_WRITE
 )

150 
uöt8
 
øngìxt_Pro˚ssInWrôeR•Cmd
–
z˛IncomögMsg_t
 *
pInMsg
 );

152 
uöt8
 
øngìxt_Pro˚ssInDeÁu…R•Cmd
–
z˛IncomögMsg_t
 *
pInMsg
 );

153 #i‡
deföed
 ( 
ZCL_DISCOVER
 )

154 
uöt8
 
øngìxt_Pro˚ssInDiscR•Cmd
–
z˛IncomögMsg_t
 *
pInMsg
 );

160 
z˛GíîÆ_AµCÆlbacks_t
 
	gøngìxt_GíCmdCÆlbacks
 =

162 
øngìxt_BasicRe£tCB
,

163 
øngìxt_IdítifyCB
,

164 
øngìxt_IdítifyQuîyR•CB
,

165 
NULL
,

166 
NULL
,

167 
NULL
,

168 
NULL
,

169 
NULL
,

170 
NULL
,

171 
NULL
,

172 
NULL
,

173 
NULL
,

174 
øngìxt_AœrmCB
,

175 
NULL
,

176 
NULL
,

188 
	$øngìxt_Inô
–
uöt8
 
èsk_id
 )

190 
øngeExtTaskID
 = 
èsk_id
;

193 
ESPAddr
.
addrMode
 = (
afAddrMode_t
)
Addr16Bô
;

194 
ESPAddr
.
ídPoöt
 = 
RANGEEXT_ENDPOINT
;

195 
ESPAddr
.
addr
.
sh‹tAddr
 = 0;

198 
	`z˛SE_Inô
–&
øngeExtSim∂eDesc
 );

201 
	`z˛GíîÆ_Regi°îCmdCÆlbacks
–
RANGEEXT_ENDPOINT
, &
øngìxt_GíCmdCÆlbacks
 );

204 
	`z˛_ªgi°îAârLi°
–
RANGEEXT_ENDPOINT
, 
RANGEEXT_MAX_ATTRIBUTES
, 
øngeExtAârs
 );

207 
	`z˛_ªgi°îClu°îO±i⁄Li°
–
RANGEEXT_ENDPOINT
, 
RANGEEXT_MAX_OPTIONS
, 
øngeExtO±i⁄s
 );

210 
	`z˛_ªgi°îVÆid©eAârD©a
–
øngìxt_VÆid©eAârD©aCB
 );

213 
	`z˛_ªgi°îF‹Msg
–
øngeExtTaskID
 );

216 
	`Regi°îF‹Keys
–
øngeExtTaskID
 );

217 
	}
}

229 
uöt16
 
	$øngìxt_evít_lo›
–
uöt8
 
èsk_id
, 
uöt16
 
evíts
 )

231 
afIncomögMSGPackë_t
 *
MSGpkt
;

233 i‡–
evíts
 & 
SYS_EVENT_MSG
 )

235  (
MSGpkt
 = (
afIncomögMSGPackë_t
 *)
	`oßl_msg_ª˚ive
–
øngeExtTaskID
 )) )

237  
MSGpkt
->
hdr
.
evít
 )

239 
ZCL_INCOMING_MSG
:

241 
	`øngìxt_Pro˚ssZCLMsg
–(
z˛IncomögMsg_t
 *)
MSGpkt
 );

244 
KEY_CHANGE
:

245 
	`øngìxt_H™dÀKeys
–((
keyCh™ge_t
 *)
MSGpkt
)->
°©e
, ((keyCh™ge_à*)MSGpkt)->
keys
 );

248 
ZDO_STATE_CHANGE
:

249 
øngeExtNwkSèã
 = (
devSèãs_t
)(
MSGpkt
->
hdr
.
°©us
);

251 i‡(
ZG_SECURE_ENABLED
)

253 i‡–
øngeExtNwkSèã
 =
DEV_ROUTER
 )

256 
lökKeySètus
 = 
	`øngìxt_KeyE°ablish_Rëu∫LökKey
(
ESPAddr
.
addr
.
sh‹tAddr
);

258 i‡(
lökKeySètus
 !
ZSuc˚ss
)

261 
	`oßl_£t_evít
–
øngeExtTaskID
, 
RANGEEXT_KEY_ESTABLISHMENT_REQUEST_EVT
);

273 
	`oßl_msg_dóŒoˇã
–(
uöt8
 *)
MSGpkt
 );

278  (
evíts
 ^ 
SYS_EVENT_MSG
);

282 i‡–
evíts
 & 
RANGEEXT_KEY_ESTABLISHMENT_REQUEST_EVT
 )

284 
	`z˛GíîÆ_KeyE°ablish_InôüãKeyE°ablishmít
(
øngeExtTaskID
, &
ESPAddr
, 
øngeExtTønsID
);

286  ( 
evíts
 ^ 
RANGEEXT_KEY_ESTABLISHMENT_REQUEST_EVT
 );

291 i‡–
evíts
 & 
RANGEEXT_IDENTIFY_TIMEOUT_EVT
 )

293 i‡–
øngeExtIdítifyTime
 > 0 )

295 
øngeExtIdítifyTime
--;

297 
	`øngìxt_Pro˚ssIdítifyTimeCh™ge
();

299  ( 
evíts
 ^ 
RANGEEXT_IDENTIFY_TIMEOUT_EVT
 );

304 
	}
}

316 
	$øngìxt_Pro˚ssIdítifyTimeCh™ge
( )

318 i‡–
øngeExtIdítifyTime
 > 0 )

320 
	`oßl_°¨t_timîEx
–
øngeExtTaskID
, 
RANGEEXT_IDENTIFY_TIMEOUT_EVT
, 1000 );

321 
	`HÆLedBlök
 ( 
HAL_LED_4
, 0xFF, 
HAL_LED_DEFAULT_DUTY_CYCLE
, 
HAL_LED_DEFAULT_FLASH_TIME
 );

325 
	`HÆLedSë
 ( 
HAL_LED_4
, 
HAL_LED_MODE_OFF
 );

326 
	`oßl_°›_timîEx
–
øngeExtTaskID
, 
RANGEEXT_IDENTIFY_TIMEOUT_EVT
 );

328 
	}
}

330 #i‡
deföed
 ( 
ZCL_KEY_ESTABLISH
 )

340 
uöt8
 
	$øngìxt_KeyE°ablish_Rëu∫LökKey
–
uöt16
 
sh‹tAddr
 )

342 
APSME_LökKeyD©a_t
* 
keyD©a
;

343 
uöt8
 
°©us
 = 
ZFaûuª
;

344 
AddrMgrE¡ry_t
 
íåy
;

348 
íåy
.
u£r
 = 
ADDRMGR_USER_DEFAULT
;

349 
íåy
.
nwkAddr
 = 
sh‹tAddr
;

351 i‡–
	`AddrMgrE¡ryLookupNwk
–&
íåy
 ) )

354 
	`APSME_LökKeyD©aGë
–
íåy
.
extAddr
, &
keyD©a
 );

356 i‡–(
keyD©a
 !
NULL
Ë&& (keyD©a->
key
 != NULL) )

358 
°©us
 = 
ZSuc˚ss
;

364 
°©us
 = 
ZInvÆidP¨amëî
;

367  
°©us
;

368 
	}
}

384 
	$øngìxt_H™dÀKeys
–
uöt8
 
shi·
, uöt8 
keys
 )

387 i‡–
shi·
 )

389 i‡–
keys
 & 
HAL_KEY_SW_1
 )

392 i‡–
keys
 & 
HAL_KEY_SW_2
 )

395 i‡–
keys
 & 
HAL_KEY_SW_3
 )

398 i‡–
keys
 & 
HAL_KEY_SW_4
 )

404 i‡–
keys
 & 
HAL_KEY_SW_1
 )

406 
	`ZDOInôDevi˚
(0);

409 i‡–
keys
 & 
HAL_KEY_SW_2
 )

414 i‡–
keys
 & 
HAL_KEY_SW_3
 )

419 i‡–
keys
 & 
HAL_KEY_SW_4
 )

424 
	}
}

437 
uöt8
 
	$øngìxt_VÆid©eAârD©aCB
–
z˛AârRec_t
 *
pAâr
, 
z˛WrôeRec_t
 *
pAârInfo
 )

439 
uöt8
 
vÆid
 = 
TRUE
;

441  
pAârInfo
->
d©aTy≥
 )

443 
ZCL_DATATYPE_BOOLEAN
:

444 i‡––*(
pAârInfo
->
©åD©a
) != 0 ) && ( *(pAttrInfo->attrData) != 1 ) )

445 
vÆid
 = 
FALSE
;

452  ( 
vÆid
 );

453 
	}
}

465 
	$øngìxt_BasicRe£tCB
( )

468 
	}
}

480 
	$øngìxt_IdítifyCB
–
z˛Idítify_t
 *
pCmd
 )

482 
øngeExtIdítifyTime
 = 
pCmd
->
idítifyTime
;

483 
	`øngìxt_Pro˚ssIdítifyTimeCh™ge
();

484 
	}
}

496 
	$øngìxt_IdítifyQuîyR•CB
–
z˛IdítifyQuîyR•_t
 *
pR•
 )

499 
	}
}

512 
	$øngìxt_AœrmCB
–
z˛Aœrm_t
 *
pAœrm
 )

515 
	}
}

532 
	$øngìxt_Pro˚ssZCLMsg
–
z˛IncomögMsg_t
 *
pInMsg
 )

534  
pInMsg
->
z˛Hdr
.
comm™dID
 )

536 #i‡
	`deföed
 ( 
ZCL_READ
 )

537 
ZCL_CMD_READ_RSP
:

538 
	`øngìxt_Pro˚ssInRódR•Cmd
–
pInMsg
 );

541 #i‡
	`deföed
 ( 
ZCL_WRITE
 )

542 
ZCL_CMD_WRITE_RSP
:

543 
	`øngìxt_Pro˚ssInWrôeR•Cmd
–
pInMsg
 );

546 
ZCL_CMD_DEFAULT_RSP
:

547 
	`øngìxt_Pro˚ssInDeÁu…R•Cmd
–
pInMsg
 );

549 #i‡
	`deföed
 ( 
ZCL_DISCOVER
 )

550 
ZCL_CMD_DISCOVER_RSP
:

551 
	`øngìxt_Pro˚ssInDiscR•Cmd
–
pInMsg
 );

558 i‡–
pInMsg
->
©åCmd
 !
NULL
 )

561 
	`oßl_mem_‰ì
–
pInMsg
->
©åCmd
 );

562 
pInMsg
->
©åCmd
 = 
NULL
;

564 
	}
}

566 #i‡
deföed
 ( 
ZCL_READ
 )

576 
uöt8
 
	$øngìxt_Pro˚ssInRódR•Cmd
–
z˛IncomögMsg_t
 *
pInMsg
 )

578 
z˛RódR•Cmd_t
 *
ªadR•Cmd
;

579 
uöt8
 
i
;

581 
ªadR•Cmd
 = (
z˛RódR•Cmd_t
 *)
pInMsg
->
©åCmd
;

582 
i
 = 0; i < 
ªadR•Cmd
->
numAâr
; i++)

589  
TRUE
;

590 
	}
}

593 #i‡
deföed
 ( 
ZCL_WRITE
 )

603 
uöt8
 
	$øngìxt_Pro˚ssInWrôeR•Cmd
–
z˛IncomögMsg_t
 *
pInMsg
 )

605 
z˛WrôeR•Cmd_t
 *
wrôeR•Cmd
;

606 
uöt8
 
i
;

608 
wrôeR•Cmd
 = (
z˛WrôeR•Cmd_t
 *)
pInMsg
->
©åCmd
;

609 
i
 = 0; i < 
wrôeR•Cmd
->
numAâr
; i++)

615  
TRUE
;

616 
	}
}

628 
uöt8
 
	$øngìxt_Pro˚ssInDeÁu…R•Cmd
–
z˛IncomögMsg_t
 *
pInMsg
 )

634  
TRUE
;

635 
	}
}

637 #i‡
deföed
 ( 
ZCL_DISCOVER
 )

647 
uöt8
 
	$øngìxt_Pro˚ssInDiscR•Cmd
–
z˛IncomögMsg_t
 *
pInMsg
 )

649 
z˛DiscovîR•Cmd_t
 *
discovîR•Cmd
;

650 
uöt8
 
i
;

652 
discovîR•Cmd
 = (
z˛DiscovîR•Cmd_t
 *)
pInMsg
->
©åCmd
;

653  
i
 = 0; i < 
discovîR•Cmd
->
numAâr
; i++ )

658  
TRUE
;

659 
	}
}

	@Projects/zstack/SE/SampleApp/Source/RangeExt/rangeext.h

40 #i‚de‡
RANGEEXT_H


41 
	#RANGEEXT_H


	)

43 #ifde‡
__˝lu•lus


51 
	~"z˛.h
"

56 
	#RANGEEXT_ENDPOINT
 0x09

	)

58 
	#RANGEEXT_MAX_ATTRIBUTES
 13

	)

60 
	#RANGEEXT_MAX_OPTIONS
 1

	)

62 
	#RANGEEXT_UPDATE_TIME_PERIOD
 1000

63 

	)

65 
	#RANGEEXT_IDENTIFY_TIMEOUT_EVT
 0x0001

	)

66 
	#RANGEEXT_KEY_ESTABLISHMENT_REQUEST_EVT
 0x0002

	)

82 
Sim∂eDes¸ùti⁄F‹m©_t
 
øngeExtSim∂eDesc
;

83 
CONST
 
z˛AârRec_t
 
øngeExtAârs
[];

84 
z˛O±i⁄Rec_t
 
øngeExtO±i⁄s
[];

85 
uöt8
 
øngeExtDevi˚E«bÀd
;

86 
uöt16
 
øngeExtTønsôi⁄Time
;

87 
uöt16
 
øngeExtIdítifyTime
;

88 
uöt32
 
øngeExtTime
;

97 
øngìxt_Inô
–
uöt8
 
èsk_id
 );

102 
uöt16
 
øngìxt_evít_lo›
–
uöt8
 
èsk_id
, uöt16 
evíts
 );

108 #ifde‡
__˝lu•lus


	@Projects/zstack/SE/SampleApp/Source/RangeExt/rangeext_data.c

45 
	~"ZDC⁄fig.h
"

47 
	~"£.h
"

48 
	~"øngìxt.h
"

49 
	~"z˛_gíîÆ.h
"

50 
	~"z˛_key_e°ablish.h
"

55 
	#RANGEEXT_DEVICE_VERSION
 0

	)

56 
	#RANGEEXT_FLAGS
 0

	)

58 
	#RANGEEXT_HWVERSION
 1

	)

59 
	#RANGEEXT_ZCLVERSION
 1

	)

73 c⁄° 
uöt8
 
	gøngeExtZCLVîsi⁄
 = 
RANGEEXT_ZCLVERSION
;

74 c⁄° 
uöt8
 
	gøngeExtHWVîsi⁄
 = 
RANGEEXT_HWVERSION
;

75 c⁄° 
uöt8
 
	gøngeExtM™uÁ˘uªrName
[] = { 16, 'T','e','x','a','s','I','n','s','t','r','u','m','e','n','t','s' };

76 c⁄° 
uöt8
 
	gøngeExtModñId
[] = { 16, 'T','I','0','0','0','1',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ' };

77 c⁄° 
uöt8
 
	gøngeExtD©eCode
[] = { 16, '2','0','0','6','0','8','3','1',' ',' ',' ',' ',' ',' ',' ',' ' };

78 c⁄° 
uöt8
 
	gøngeExtPowîSour˚
 = 
POWER_SOURCE_MAINS_1_PHASE
;

80 
uöt8
 
	gøngeExtLoˇti⁄Des¸ùti⁄
[] = { 16, ' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ' };

81 
uöt8
 
	gøngeExtPhysiˇlEnvú⁄mít
 = 
PHY_UNSPECIFIED_ENV
;

82 
uöt8
 
	gøngeExtDevi˚E«bÀd
 = 
DEVICE_ENABLED
;

85 
uöt16
 
	gøngeExtIdítifyTime
 = 0;

86 
uöt32
 
	gøngeExtTime
 = 0;

87 
uöt8
 
	gøngeExtTimeSètus
 = 0x01;

90 
uöt8
 
	gz˛R™geExt_KeyE°ablishmítSuôe
 = 
CERTIFICATE_BASED_KEY_ESTABLISHMENT
;

95 
CONST
 
z˛AârRec_t
 
	gøngeExtAârs
[
RANGEEXT_MAX_ATTRIBUTES
] =

100 
ZCL_CLUSTER_ID_GEN_BASIC
,

102 
ATTRID_BASIC_ZCL_VERSION
,

103 
ZCL_DATATYPE_UINT8
,

104 
ACCESS_CONTROL_READ
,

105 (*)&
øngeExtZCLVîsi⁄


109 
ZCL_CLUSTER_ID_GEN_BASIC
,

111 
ATTRID_BASIC_HW_VERSION
,

112 
ZCL_DATATYPE_UINT8
,

113 
ACCESS_CONTROL_READ
,

114 (*)&
øngeExtHWVîsi⁄


118 
ZCL_CLUSTER_ID_GEN_BASIC
,

120 
ATTRID_BASIC_MANUFACTURER_NAME
,

121 
ZCL_DATATYPE_CHAR_STR
,

122 
ACCESS_CONTROL_READ
,

123 (*)
øngeExtM™uÁ˘uªrName


127 
ZCL_CLUSTER_ID_GEN_BASIC
,

129 
ATTRID_BASIC_MODEL_ID
,

130 
ZCL_DATATYPE_CHAR_STR
,

131 
ACCESS_CONTROL_READ
,

132 (*)
øngeExtModñId


136 
ZCL_CLUSTER_ID_GEN_BASIC
,

138 
ATTRID_BASIC_DATE_CODE
,

139 
ZCL_DATATYPE_CHAR_STR
,

140 
ACCESS_CONTROL_READ
,

141 (*)
øngeExtD©eCode


145 
ZCL_CLUSTER_ID_GEN_BASIC
,

147 
ATTRID_BASIC_POWER_SOURCE
,

148 
ZCL_DATATYPE_ENUM8
,

149 
ACCESS_CONTROL_READ
,

150 (*)&
øngeExtPowîSour˚


154 
ZCL_CLUSTER_ID_GEN_BASIC
,

156 
ATTRID_BASIC_LOCATION_DESC
,

157 
ZCL_DATATYPE_CHAR_STR
,

158 (
ACCESS_CONTROL_READ
 | 
ACCESS_CONTROL_WRITE
),

159 (*)
øngeExtLoˇti⁄Des¸ùti⁄


163 
ZCL_CLUSTER_ID_GEN_BASIC
,

165 
ATTRID_BASIC_PHYSICAL_ENV
,

166 
ZCL_DATATYPE_ENUM8
,

167 (
ACCESS_CONTROL_READ
 | 
ACCESS_CONTROL_WRITE
),

168 (*)&
øngeExtPhysiˇlEnvú⁄mít


172 
ZCL_CLUSTER_ID_GEN_BASIC
,

174 
ATTRID_BASIC_DEVICE_ENABLED
,

175 
ZCL_DATATYPE_BOOLEAN
,

176 (
ACCESS_CONTROL_READ
 | 
ACCESS_CONTROL_WRITE
),

177 (*)&
øngeExtDevi˚E«bÀd


183 
ZCL_CLUSTER_ID_GEN_IDENTIFY
,

185 
ATTRID_IDENTIFY_TIME
,

186 
ZCL_DATATYPE_UINT16
,

187 (
ACCESS_CONTROL_READ
 | 
ACCESS_CONTROL_WRITE
),

188 (*)&
øngeExtIdítifyTime


196 
ZCL_CLUSTER_ID_GEN_TIME
,

198 
ATTRID_TIME_TIME
,

199 
ZCL_DATATYPE_UTC
,

200 
ACCESS_CONTROL_READ
,

201 (*)&
øngeExtTime


207 
ZCL_CLUSTER_ID_GEN_TIME
,

209 
ATTRID_TIME_STATUS
,

210 
ZCL_DATATYPE_BITMAP8
,

211 
ACCESS_CONTROL_READ
,

212 (*)&
øngeExtTimeSètus


219 
ZCL_CLUSTER_ID_GEN_KEY_ESTABLISHMENT
,

221 
ATTRID_KEY_ESTABLISH_SUITE
,

222 
ZCL_DATATYPE_BITMAP16
,

223 
ACCESS_CONTROL_READ
,

224 (*)&
z˛R™geExt_KeyE°ablishmítSuôe


232 
z˛O±i⁄Rec_t
 
	gøngeExtO±i⁄s
[
RANGEEXT_MAX_OPTIONS
] =

236 
ZCL_CLUSTER_ID_GEN_TIME
,

237 –
AF_EN_SECURITY
 ),

246 
	#RANGEEXT_MAX_INCLUSTERS
 2

	)

247 c⁄° 
cId_t
 
	gøngeExtInClu°îLi°
[
RANGEEXT_MAX_INCLUSTERS
] =

249 
ZCL_CLUSTER_ID_GEN_BASIC
,

250 
ZCL_CLUSTER_ID_GEN_IDENTIFY


253 
	#RANGEEXT_MAX_OUTCLUSTERS
 2

	)

254 c⁄° 
cId_t
 
	gøngeExtOutClu°îLi°
[
RANGEEXT_MAX_OUTCLUSTERS
] =

256 
ZCL_CLUSTER_ID_GEN_BASIC
,

257 
ZCL_CLUSTER_ID_GEN_IDENTIFY


260 
Sim∂eDes¸ùti⁄F‹m©_t
 
	gøngeExtSim∂eDesc
 =

262 
RANGEEXT_ENDPOINT
,

263 
ZCL_SE_PROFILE_ID
,

264 
ZCL_SE_DEVICEID_RANGE_EXTENDER
,

265 
RANGEEXT_DEVICE_VERSION
,

266 
RANGEEXT_FLAGS
,

267 
RANGEEXT_MAX_INCLUSTERS
,

268 (
cId_t
 *)
øngeExtInClu°îLi°
,

269 
RANGEEXT_MAX_OUTCLUSTERS
,

270 (
cId_t
 *)
øngeExtOutClu°îLi°


	@Projects/zstack/SE/SampleApp/Source/SimpleMeter/OSAL_SimpleMeter.c

44 
	~"ZComDef.h
"

45 
	~"hÆ_drivîs.h
"

46 
	~"OSAL_Tasks.h
"

48 #i‡
deföed
 ( 
MT_TASK
 )

49 
	~"MT_TASK.h
"

52 
	~"ZDAµ.h
"

53 #i‡
deföed
 ( 
ZIGBEE_FREQ_AGILITY
 ) || deföed ( 
ZIGBEE_PANID_CONFLICT
 )

54 
	~"ZDNwkMgr.h
"

56 #i‡
deföed
 ( 
ZIGBEE_FRAGMENTATION
 )

57 
	~"≠s_‰ag.h
"

60 #i‡
deföed
 ( 
ZCL_KEY_ESTABLISH
 )

61 
	~"z˛_key_e°ablish.h
"

64 
	~"sim∂emëî.h
"

71 c⁄° 
pTaskEvítH™dÀrFn
 
	gèsksAº
[] = {

72 
macEvítLo›
,

73 
nwk_evít_lo›
,

74 
HÆ_Pro˚ssEvít
,

75 #i‡
deföed
–
MT_TASK
 )

76 
MT_Pro˚ssEvít
,

78 
APS_evít_lo›
,

79 #i‡
deföed
 ( 
ZIGBEE_FRAGMENTATION
 )

80 
APSF_Pro˚ssEvít
,

82 
ZDAµ_evít_lo›
,

83 #i‡
deföed
 ( 
ZIGBEE_FREQ_AGILITY
 ) || deföed ( 
ZIGBEE_PANID_CONFLICT
 )

84 
ZDNwkMgr_evít_lo›
,

86 
z˛_evít_lo›
,

87 #i‡
deföed
 ( 
ZCL_KEY_ESTABLISH
 )

88 
z˛KeyE°ablish_evít_lo›
,

90 
sim∂emëî_evít_lo›


93 c⁄° 
uöt8
 
	gèsksC¡
 = –
èsksAº
 ) / (ÅasksArr[0] );

94 
uöt16
 *
	gèsksEvíts
;

109 
	$oßlInôTasks
( )

111 
uöt8
 
èskID
 = 0;

113 
èsksEvíts
 = (
uöt16
 *)
	`oßl_mem_Æloc
––uöt16 ) * 
èsksC¡
);

114 
	`oßl_mem£t
–
èsksEvíts
, 0, (–
uöt16
 ) * 
èsksC¡
));

116 
	`macTaskInô
–
èskID
++ );

117 
	`nwk_öô
–
èskID
++ );

118 
	`HÆ_Inô
–
èskID
++ );

119 #i‡
	`deföed
–
MT_TASK
 )

120 
	`MT_TaskInô
–
èskID
++ );

122 
	`APS_Inô
–
èskID
++ );

123 #i‡
	`deföed
 ( 
ZIGBEE_FRAGMENTATION
 )

124 
	`APSF_Inô
–
èskID
++ );

126 
	`ZDAµ_Inô
–
èskID
++ );

127 #i‡
	`deföed
 ( 
ZIGBEE_FREQ_AGILITY
 ) || deföed ( 
ZIGBEE_PANID_CONFLICT
 )

128 
	`ZDNwkMgr_Inô
–
èskID
++ );

130 
	`z˛_Inô
–
èskID
++ );

131 #i‡
	`deföed
 ( 
ZCL_KEY_ESTABLISH
 )

132 
	`z˛GíîÆ_KeyE°ablish_Inô
–
èskID
++ );

134 
	`sim∂emëî_Inô
–
èskID
 );

135 
	}
}

	@Projects/zstack/SE/SampleApp/Source/SimpleMeter/simplemeter.c

63 
	~"OSAL.h
"

64 
	~"OSAL_Clock.h
"

65 
	~"ZDAµ.h
"

66 
	~"AddrMgr.h
"

68 
	~"£.h
"

69 
	~"sim∂emëî.h
"

70 
	~"z˛_gíîÆ.h
"

71 
	~"z˛_£.h
"

72 
	~"z˛_key_e°ablish.h
"

74 
	~"⁄bﬂrd.h
"

77 
	~"hÆ_lcd.h
"

78 
	~"hÆ_Àd.h
"

79 
	~"hÆ_key.h
"

87 
	#z˛_M™d©‹yRï‹èbÀAâribuã
–
a
 ) (á =
NULL
 )

	)

93 
	#SIMPLEMETER_MIN_REPORTING_INTERVAL
 5

	)

111 
uöt8
 
	gsim∂eMëîTaskID
;

112 
uöt8
 
	gsim∂eMëîTønsID
;

113 
devSèãs_t
 
	gsim∂eMëîNwkSèã
;

114 
afAddrTy≥_t
 
	gESPAddr
;

115 
z˛Rï‹tCmd_t
 *
	gpRï‹tCmd
;

116 
uöt8
 
	gnumAâr
 = 1;

117 
uöt8
 
sim∂eMëîCuºítSumm©i⁄Dñivîed
[];

118 
uöt8
 
	glökKeySètus
;

123 
sim∂emëî_H™dÀKeys
–
uöt8
 
shi·
, uöt8 
keys
 );

125 #i‡
deföed
 (
ZCL_KEY_ESTABLISH
)

126 
uöt8
 
sim∂emëî_KeyE°ablish_Rëu∫LökKey
–
uöt16
 
sh‹tAddr
 );

129 #i‡
deföed
 ( 
ZCL_ALARMS
 )

130 
sim∂emëî_Pro˚ssAœrmCmd
–
uöt8
 
§cEP
, 
afAddrTy≥_t
 *
d°Addr
,

131 
uöt16
 
˛u°îID
, 
z˛FømeHdr_t
 *
hdr
, 
uöt8
 
Àn
, uöt8 *
d©a
 );

134 
sim∂emëî_Pro˚ssIdítifyTimeCh™ge
( );

141 
uöt8
 
sim∂emëî_VÆid©eAârD©aCB
–
z˛AârRec_t
 *
pAâr
, 
z˛WrôeRec_t
 *
pAârInfo
 );

144 
sim∂emëî_BasicRe£tCB
( );

145 
sim∂emëî_IdítifyCB
–
z˛Idítify_t
 *
pCmd
 );

146 
sim∂emëî_IdítifyQuîyR•CB
–
z˛IdítifyQuîyR•_t
 *
pR•
 );

147 
sim∂emëî_AœrmCB
–
z˛Aœrm_t
 *
pAœrm
 );

150 
sim∂emëî_GëProfûeCmdCB
–
z˛CCGëProfûeCmd_t
 *
pCmd
,

151 
afAddrTy≥_t
 *
§cAddr
, 
uöt8
 
£qNum
 );

152 
sim∂emëî_GëProfûeR•CB
–
z˛CCGëProfûeR•_t
 *
pCmd
,

153 
afAddrTy≥_t
 *
§cAddr
, 
uöt8
 
£qNum
 );

154 
sim∂emëî_ReqMúr‹CmdCB
–
afAddrTy≥_t
 *
§cAddr
, 
uöt8
 
£qNum
 );

155 
sim∂emëî_ReqMúr‹R•CB
–
z˛CCReqMúr‹R•_t
 *
pCmd
,

156 
afAddrTy≥_t
 *
§cAddr
, 
uöt8
 
£qNum
 );

157 
sim∂emëî_Múr‹RemCmdCB
–
afAddrTy≥_t
 *
§cAddr
, 
uöt8
 
£qNum
 );

158 
sim∂emëî_Múr‹RemR•CB
–
z˛CCMúr‹RemR•_t
 *
pCmd
,

159 
afAddrTy≥_t
 *
§cAddr
, 
uöt8
 
£qNum
 );

166 
sim∂emëî_Pro˚ssZCLMsg
–
z˛IncomögMsg_t
 *
msg
 );

167 #i‡
deföed
 ( 
ZCL_READ
 )

168 
uöt8
 
sim∂emëî_Pro˚ssInRódR•Cmd
–
z˛IncomögMsg_t
 *
pInMsg
 );

170 #i‡
deföed
 ( 
ZCL_WRITE
 )

171 
uöt8
 
sim∂emëî_Pro˚ssInWrôeR•Cmd
–
z˛IncomögMsg_t
 *
pInMsg
 );

173 #i‡
deföed
 ( 
ZCL_REPORT
 )

174 
uöt8
 
sim∂emëî_Pro˚ssInC⁄figRï‹tCmd
–
z˛IncomögMsg_t
 *
pInMsg
 );

175 
uöt8
 
sim∂emëî_Pro˚ssInC⁄figRï‹tR•Cmd
–
z˛IncomögMsg_t
 *
pInMsg
 );

176 
uöt8
 
sim∂emëî_Pro˚ssInRódRï‹tCfgCmd
–
z˛IncomögMsg_t
 *
pInMsg
 );

177 
uöt8
 
sim∂emëî_Pro˚ssInRódRï‹tCfgR•Cmd
–
z˛IncomögMsg_t
 *
pInMsg
 );

178 
uöt8
 
sim∂emëî_Pro˚ssInRï‹tCmd
–
z˛IncomögMsg_t
 *
pInMsg
 );

180 
uöt8
 
sim∂emëî_Pro˚ssInDeÁu…R•Cmd
–
z˛IncomögMsg_t
 *
pInMsg
 );

181 #i‡
deföed
 ( 
ZCL_DISCOVER
 )

182 
uöt8
 
sim∂emëî_Pro˚ssInDiscR•Cmd
–
z˛IncomögMsg_t
 *
pInMsg
 );

188 
z˛GíîÆ_AµCÆlbacks_t
 
	gsim∂emëî_GíCmdCÆlbacks
 =

190 
sim∂emëî_BasicRe£tCB
,

191 
sim∂emëî_IdítifyCB
,

192 
sim∂emëî_IdítifyQuîyR•CB
,

193 
NULL
,

194 
NULL
,

195 
NULL
,

196 
NULL
,

197 
NULL
,

198 
NULL
,

199 
NULL
,

200 
NULL
,

201 
NULL
,

202 
sim∂emëî_AœrmCB
,

203 
NULL
,

204 
NULL
,

210 
z˛SE_AµCÆlbacks_t
 
	gsim∂emëî_SECmdCÆlbacks
 =

212 
sim∂emëî_GëProfûeCmdCB
,

213 
sim∂emëî_GëProfûeR•CB
,

214 
sim∂emëî_ReqMúr‹CmdCB
,

215 
sim∂emëî_ReqMúr‹R•CB
,

216 
sim∂emëî_Múr‹RemCmdCB
,

217 
sim∂emëî_Múr‹RemR•CB
,

218 
NULL
,

219 
NULL
,

220 
NULL
,

221 
NULL
,

222 
NULL
,

223 
NULL
,

224 
NULL
,

225 
NULL
,

226 
NULL
,

227 
NULL
,

228 
NULL
,

229 
NULL
,

241 
	$sim∂emëî_Inô
–
uöt8
 
èsk_id
 )

243 
sim∂eMëîTaskID
 = 
èsk_id
;

244 
sim∂eMëîNwkSèã
 = 
DEV_INIT
;

245 
sim∂eMëîTønsID
 = 0;

252 
ESPAddr
.
addrMode
 = (
afAddrMode_t
)
Addr16Bô
;

253 
ESPAddr
.
ídPoöt
 = 
SIMPLEMETER_ENDPOINT
;

254 
ESPAddr
.
addr
.
sh‹tAddr
 = 0;

257 
	`z˛SE_Inô
–&
sim∂eMëîSim∂eDesc
 );

260 
	`z˛GíîÆ_Regi°îCmdCÆlbacks
–
SIMPLEMETER_ENDPOINT
, &
sim∂emëî_GíCmdCÆlbacks
 );

263 
	`z˛SE_Regi°îCmdCÆlbacks
–
SIMPLEMETER_ENDPOINT
, &
sim∂emëî_SECmdCÆlbacks
 );

266 
	`z˛_ªgi°îAârLi°
–
SIMPLEMETER_ENDPOINT
, 
SIMPLEMETER_MAX_ATTRIBUTES
, 
sim∂eMëîAârs
 );

269 
	`z˛_ªgi°îClu°îO±i⁄Li°
–
SIMPLEMETER_ENDPOINT
, 
SIMPLEMETER_MAX_OPTIONS
, 
sim∂eMëîO±i⁄s
 );

272 
	`z˛_ªgi°îVÆid©eAârD©a
–
sim∂emëî_VÆid©eAârD©aCB
 );

275 
	`z˛_ªgi°îF‹Msg
–
sim∂eMëîTaskID
 );

278 
	`Regi°îF‹Keys
–
sim∂eMëîTaskID
 );

281 
	`oßl_°¨t_timîEx
–
sim∂eMëîTaskID
, 
SIMPLEMETER_UPDATE_TIME_EVT
, 
SIMPLEMETER_UPDATE_TIME_PERIOD
 );

285 
pRï‹tCmd
 = (
z˛Rï‹tCmd_t
 *)
	`oßl_mem_Æloc
––z˛Rï‹tCmd_àË+ ( 
numAâr
 * –
z˛Rï‹t_t
 ) ) );

286 i‡–
pRï‹tCmd
 !
NULL
 )

288 
pRï‹tCmd
->
numAâr
 =ÇumAttr;

291 
pRï‹tCmd
->
©åLi°
[0].
©åID
 = 
ATTRID_SE_CURRENT_SUMMATION_DELIVERED
;

292 
pRï‹tCmd
->
©åLi°
[0].
d©aTy≥
 = 
ZCL_DATATYPE_UINT48
;

293 
pRï‹tCmd
->
©åLi°
[0].
©åD©a
 = 
sim∂eMëîCuºítSumm©i⁄Dñivîed
;

297 
	}
}

309 
uöt16
 
	$sim∂emëî_evít_lo›
–
uöt8
 
èsk_id
, 
uöt16
 
evíts
 )

311 
afIncomögMSGPackë_t
 *
MSGpkt
;

313 i‡–
evíts
 & 
SYS_EVENT_MSG
 )

315  (
MSGpkt
 = (
afIncomögMSGPackë_t
 *)
	`oßl_msg_ª˚ive
–
sim∂eMëîTaskID
 )) )

317  
MSGpkt
->
hdr
.
evít
 )

319 
ZCL_INCOMING_MSG
:

321 
	`sim∂emëî_Pro˚ssZCLMsg
–(
z˛IncomögMsg_t
 *)
MSGpkt
 );

324 
KEY_CHANGE
:

325 
	`sim∂emëî_H™dÀKeys
–((
keyCh™ge_t
 *)
MSGpkt
)->
°©e
, ((keyCh™ge_à*)MSGpkt)->
keys
 );

328 
ZDO_STATE_CHANGE
:

329 
sim∂eMëîNwkSèã
 = (
devSèãs_t
)(
MSGpkt
->
hdr
.
°©us
);

331 i‡(
ZG_SECURE_ENABLED
)

333 i‡–(
sim∂eMëîNwkSèã
 =
DEV_ROUTER
Ë|| (sim∂eMëîNwkSèã =
DEV_END_DEVICE
) )

336 
lökKeySètus
 = 
	`sim∂emëî_KeyE°ablish_Rëu∫LökKey
(
ESPAddr
.
addr
.
sh‹tAddr
);

338 i‡(
lökKeySètus
 !
ZSuc˚ss
)

341 
	`oßl_£t_evít
–
sim∂eMëîTaskID
, 
SIMPLEMETER_KEY_ESTABLISHMENT_REQUEST_EVT
);

347 
	`oßl_°¨t_timîEx
–
sim∂eMëîTaskID
, 
SIMPLEMETER_REPORT_ATTRIBUTE_EVT
, 
SIMPLEMETER_REPORT_PERIOD
 );

353 
	`oßl_°¨t_timîEx
–
sim∂eMëîTaskID
, 
SIMPLEMETER_REPORT_ATTRIBUTE_EVT
, 
SIMPLEMETER_REPORT_PERIOD
 );

356 
	`NLME_SëPﬁlR©e
 ( 
SE_DEVICE_POLL_RATE
 );

360 #i‡
	`deföed
–
ZCL_KEY_ESTABLISH
 )

361 
ZCL_KEY_ESTABLISH_IND
:

362 
	`oßl_°¨t_timîEx
–
sim∂eMëîTaskID
, 
SIMPLEMETER_REPORT_ATTRIBUTE_EVT
, 
SIMPLEMETER_REPORT_PERIOD
 );

372 
	`oßl_msg_dóŒoˇã
–(
uöt8
 *)
MSGpkt
 );

377  (
evíts
 ^ 
SYS_EVENT_MSG
);

381 i‡–
evíts
 & 
SIMPLEMETER_KEY_ESTABLISHMENT_REQUEST_EVT
 )

383 
	`z˛GíîÆ_KeyE°ablish_InôüãKeyE°ablishmít
(
sim∂eMëîTaskID
, &
ESPAddr
, 
sim∂eMëîTønsID
);

385  ( 
evíts
 ^ 
SIMPLEMETER_KEY_ESTABLISHMENT_REQUEST_EVT
 );

389 i‡–
evíts
 & 
SIMPLEMETER_REPORT_ATTRIBUTE_EVT
 )

391 i‡–
pRï‹tCmd
 !
NULL
 )

393 
	`z˛_SídRï‹tCmd
–
SIMPLEMETER_ENDPOINT
, &
ESPAddr
,

394 
ZCL_CLUSTER_ID_SE_SIMPLE_METERING
, 
pRï‹tCmd
,

395 
ZCL_FRAME_SERVER_CLIENT_DIR
, 1, 0 );

397 
	`oßl_°¨t_timîEx
–
sim∂eMëîTaskID
, 
SIMPLEMETER_REPORT_ATTRIBUTE_EVT
, 
SIMPLEMETER_REPORT_PERIOD
 );

400  ( 
evíts
 ^ 
SIMPLEMETER_REPORT_ATTRIBUTE_EVT
 );

404 i‡–
evíts
 & 
SIMPLEMETER_IDENTIFY_TIMEOUT_EVT
 )

406 i‡–
sim∂eMëîIdítifyTime
 > 0 )

408 
sim∂eMëîIdítifyTime
--;

410 
	`sim∂emëî_Pro˚ssIdítifyTimeCh™ge
();

412  ( 
evíts
 ^ 
SIMPLEMETER_IDENTIFY_TIMEOUT_EVT
 );

416 i‡–
evíts
 & 
SIMPLEMETER_UPDATE_TIME_EVT
 )

418 
sim∂eMëîTime
 = 
	`oßl_gëClock
();

419 
	`oßl_°¨t_timîEx
–
sim∂eMëîTaskID
, 
SIMPLEMETER_UPDATE_TIME_EVT
, 
SIMPLEMETER_UPDATE_TIME_PERIOD
 );

421  ( 
evíts
 ^ 
SIMPLEMETER_UPDATE_TIME_EVT
 );

426 
	}
}

439 
	$sim∂emëî_Pro˚ssIdítifyTimeCh™ge
( )

441 i‡–
sim∂eMëîIdítifyTime
 > 0 )

443 
	`oßl_°¨t_timîEx
–
sim∂eMëîTaskID
, 
SIMPLEMETER_IDENTIFY_TIMEOUT_EVT
, 1000 );

444 
	`HÆLedBlök
 ( 
HAL_LED_4
, 0xFF, 
HAL_LED_DEFAULT_DUTY_CYCLE
, 
HAL_LED_DEFAULT_FLASH_TIME
 );

448 
	`HÆLedSë
 ( 
HAL_LED_4
, 
HAL_LED_MODE_OFF
 );

449 
	`oßl_°›_timîEx
–
sim∂eMëîTaskID
, 
SIMPLEMETER_IDENTIFY_TIMEOUT_EVT
 );

451 
	}
}

453 #i‡
deföed
 ( 
ZCL_KEY_ESTABLISH
 )

463 
uöt8
 
	$sim∂emëî_KeyE°ablish_Rëu∫LökKey
–
uöt16
 
sh‹tAddr
 )

465 
APSME_LökKeyD©a_t
* 
keyD©a
;

466 
uöt8
 
°©us
 = 
ZFaûuª
;

467 
AddrMgrE¡ry_t
 
íåy
;

471 
íåy
.
u£r
 = 
ADDRMGR_USER_DEFAULT
;

472 
íåy
.
nwkAddr
 = 
sh‹tAddr
;

474 i‡–
	`AddrMgrE¡ryLookupNwk
–&
íåy
 ) )

477 
	`APSME_LökKeyD©aGë
–
íåy
.
extAddr
, &
keyD©a
 );

479 i‡–(
keyD©a
 !
NULL
Ë&& (keyD©a->
key
 != NULL) )

481 
°©us
 = 
ZSuc˚ss
;

487 
°©us
 = 
ZInvÆidP¨amëî
;

490  
°©us
;

491 
	}
}

507 
	$sim∂emëî_H™dÀKeys
–
uöt8
 
shi·
, uöt8 
keys
 )

510 i‡–
shi·
 )

512 i‡–
keys
 & 
HAL_KEY_SW_1
 )

515 i‡–
keys
 & 
HAL_KEY_SW_2
 )

518 i‡–
keys
 & 
HAL_KEY_SW_3
 )

521 i‡–
keys
 & 
HAL_KEY_SW_4
 )

527 i‡–
keys
 & 
HAL_KEY_SW_1
 )

529 
	`ZDOInôDevi˚
(0);

532 i‡–
keys
 & 
HAL_KEY_SW_2
 )

537 i‡–
keys
 & 
HAL_KEY_SW_3
 )

542 i‡–
keys
 & 
HAL_KEY_SW_4
 )

547 
	}
}

560 
uöt8
 
	$sim∂emëî_VÆid©eAârD©aCB
–
z˛AârRec_t
 *
pAâr
, 
z˛WrôeRec_t
 *
pAârInfo
 )

562 
uöt8
 
vÆid
 = 
TRUE
;

564  
pAârInfo
->
d©aTy≥
 )

566 
ZCL_DATATYPE_BOOLEAN
:

567 i‡––*(
pAârInfo
->
©åD©a
) != 0 ) && ( *(pAttrInfo->attrData) != 1 ) )

568 
vÆid
 = 
FALSE
;

575  ( 
vÆid
 );

576 
	}
}

588 
	$sim∂emëî_BasicRe£tCB
( )

591 
	}
}

603 
	$sim∂emëî_IdítifyCB
–
z˛Idítify_t
 *
pCmd
 )

605 
sim∂eMëîIdítifyTime
 = 
pCmd
->
idítifyTime
;

606 
	`sim∂emëî_Pro˚ssIdítifyTimeCh™ge
();

607 
	}
}

619 
	$sim∂emëî_IdítifyQuîyR•CB
–
z˛IdítifyQuîyR•_t
 *
pR•
 )

622 
	}
}

637 
	$sim∂emëî_AœrmCB
–
z˛Aœrm_t
 *
pAœrm
 )

640 
	}
}

655 
	$sim∂emëî_GëProfûeCmdCB
–
z˛CCGëProfûeCmd_t
 *
pCmd
, 
afAddrTy≥_t
 *
§cAddr
, 
uöt8
 
£qNum
 )

657 #i‡
	`deföed
 ( 
ZCL_SIMPLE_METERING
 )

665 
uöt32
 
ídTime
;

666 
uöt8
 
°©us
 = 
z˛SE_Sim∂eMëî_GëProfûeR•_Sètus_Suc˚ss
;

667 
uöt8
 
¥ofûeI¡îvÆPîiod
 = 
PROFILE_INTERVAL_PERIOD_60MIN
;

668 
uöt8
 
numbîOfPîiodDñivîed
 = 5;

669 
uöt24
 
öãrvÆs
[] = {0xa00001, 0xa00002, 0xa00003, 0xa00004, 0xa00005};

683 
ídTime
 = 
pCmd
->endTime;

687 
	`z˛SE_Sim∂eMëîög_Síd_GëProfûeR•
–
SIMPLEMETER_ENDPOINT
, 
§cAddr
, 
ídTime
,

688 
°©us
,

689 
¥ofûeI¡îvÆPîiod
,

690 
numbîOfPîiodDñivîed
, 
öãrvÆs
,

691 
Ál£
, 
£qNum
 );

693 
	}
}

708 
	$sim∂emëî_GëProfûeR•CB
–
z˛CCGëProfûeR•_t
 *
pCmd
, 
afAddrTy≥_t
 *
§cAddr
, 
uöt8
 
£qNum
 )

711 
	}
}

725 
	$sim∂emëî_ReqMúr‹CmdCB
–
afAddrTy≥_t
 *
§cAddr
, 
uöt8
 
£qNum
 )

728 
	}
}

742 
	$sim∂emëî_ReqMúr‹R•CB
–
z˛CCReqMúr‹R•_t
 *
pR•
, 
afAddrTy≥_t
 *
§cAddr
, 
uöt8
 
£qNum
 )

745 
	}
}

758 
	$sim∂emëî_Múr‹RemCmdCB
–
afAddrTy≥_t
 *
§cAddr
, 
uöt8
 
£qNum
 )

761 
	}
}

775 
	$sim∂emëî_Múr‹RemR•CB
–
z˛CCMúr‹RemR•_t
 *
pCmd
, 
afAddrTy≥_t
 *
§cAddr
, 
uöt8
 
£qNum
 )

778 
	}
}

796 
	$sim∂emëî_Pro˚ssZCLMsg
–
z˛IncomögMsg_t
 *
pInMsg
 )

798  
pInMsg
->
z˛Hdr
.
comm™dID
 )

800 #i‡
	`deföed
 ( 
ZCL_READ
 )

801 
ZCL_CMD_READ_RSP
:

802 
	`sim∂emëî_Pro˚ssInRódR•Cmd
–
pInMsg
 );

805 #i‡
	`deföed
 ( 
ZCL_WRITE
 )

806 
ZCL_CMD_WRITE_RSP
:

807 
	`sim∂emëî_Pro˚ssInWrôeR•Cmd
–
pInMsg
 );

810 #i‡
	`deföed
 ( 
ZCL_REPORT
 )

811 
ZCL_CMD_CONFIG_REPORT
:

812 
	`sim∂emëî_Pro˚ssInC⁄figRï‹tCmd
–
pInMsg
 );

815 
ZCL_CMD_CONFIG_REPORT_RSP
:

816 
	`sim∂emëî_Pro˚ssInC⁄figRï‹tR•Cmd
–
pInMsg
 );

819 
ZCL_CMD_READ_REPORT_CFG
:

820 
	`sim∂emëî_Pro˚ssInRódRï‹tCfgCmd
–
pInMsg
 );

823 
ZCL_CMD_READ_REPORT_CFG_RSP
:

824 
	`sim∂emëî_Pro˚ssInRódRï‹tCfgR•Cmd
–
pInMsg
 );

827 
ZCL_CMD_REPORT
:

828 
	`sim∂emëî_Pro˚ssInRï‹tCmd
–
pInMsg
 );

831 
ZCL_CMD_DEFAULT_RSP
:

832 
	`sim∂emëî_Pro˚ssInDeÁu…R•Cmd
–
pInMsg
 );

834 #i‡
	`deföed
 ( 
ZCL_DISCOVER
 )

835 
ZCL_CMD_DISCOVER_RSP
:

836 
	`sim∂emëî_Pro˚ssInDiscR•Cmd
–
pInMsg
 );

843 i‡–
pInMsg
->
©åCmd
 !
NULL
 )

846 
	`oßl_mem_‰ì
–
pInMsg
->
©åCmd
 );

847 
pInMsg
->
©åCmd
 = 
NULL
;

849 
	}
}

851 #i‡
deföed
 ( 
ZCL_READ
 )

861 
uöt8
 
	$sim∂emëî_Pro˚ssInRódR•Cmd
–
z˛IncomögMsg_t
 *
pInMsg
 )

863 
z˛RódR•Cmd_t
 *
ªadR•Cmd
;

864 
uöt8
 
i
;

866 
ªadR•Cmd
 = (
z˛RódR•Cmd_t
 *)
pInMsg
->
©åCmd
;

867 
i
 = 0; i < 
ªadR•Cmd
->
numAâr
; i++)

874  
TRUE
;

875 
	}
}

878 #i‡
deföed
 ( 
ZCL_WRITE
 )

888 
uöt8
 
	$sim∂emëî_Pro˚ssInWrôeR•Cmd
–
z˛IncomögMsg_t
 *
pInMsg
 )

890 
z˛WrôeR•Cmd_t
 *
wrôeR•Cmd
;

891 
uöt8
 
i
;

893 
wrôeR•Cmd
 = (
z˛WrôeR•Cmd_t
 *)
pInMsg
->
©åCmd
;

894 
i
 = 0; i < 
wrôeR•Cmd
->
numAâr
; i++)

900  
TRUE
;

901 
	}
}

904 #i‡
deföed
 ( 
ZCL_REPORT
 )

915 
uöt8
 
	$sim∂emëî_Pro˚ssInC⁄figRï‹tCmd
–
z˛IncomögMsg_t
 *
pInMsg
 )

917 
z˛CfgRï‹tCmd_t
 *
cfgRï‹tCmd
;

918 
z˛CfgRï‹tRec_t
 *
ªp‹tRec
;

919 
z˛CfgRï‹tR•Cmd_t
 *
cfgRï‹tR•Cmd
;

920 
z˛AârRec_t
 
©åRec
;

921 
uöt8
 
°©us
;

922 
uöt8
 
i
, 
j
 = 0;

924 
cfgRï‹tCmd
 = (
z˛CfgRï‹tCmd_t
 *)
pInMsg
->
©åCmd
;

927 
cfgRï‹tR•Cmd
 = (
z˛CfgRï‹tR•Cmd_t
 *)
	`oßl_mem_Æloc
(  ( zclCfgReportRspCmd_t ) + \

928  ( 
z˛CfgRï‹tSètus_t
Ë* 
cfgRï‹tCmd
->
numAâr
 );

929 i‡–
cfgRï‹tR•Cmd
 =
NULL
 )

930  
FALSE
;

933  
i
 = 0; i < 
cfgRï‹tCmd
->
numAâr
; i++ )

935 
ªp‹tRec
 = &(
cfgRï‹tCmd
->
©åLi°
[
i
]);

937 
°©us
 = 
ZCL_STATUS_SUCCESS
;

939 i‡–
	`z˛FödAârRec
–
SIMPLEMETER_ENDPOINT
, 
pInMsg
->
˛u°îId
, 
ªp‹tRec
->
©åID
, &
©åRec
 ) )

941 i‡–
ªp‹tRec
->
dúe˘i⁄
 =
ZCL_SEND_ATTR_REPORTS
 )

943 i‡–
ªp‹tRec
->
d©aTy≥
 =
©åRec
.
©å
.dataType )

946 i‡–
	`z˛_M™d©‹yRï‹èbÀAâribuã
–&
©åRec
 ) =
TRUE
 )

948 i‡–
ªp‹tRec
->
möRï‹tI¡
 < 
SIMPLEMETER_MIN_REPORTING_INTERVAL
 ||

949 –
ªp‹tRec
->
maxRï‹tI¡
 != 0 &&

950 
ªp‹tRec
->
maxRï‹tI¡
 <Ñï‹tRec->
möRï‹tI¡
 ) )

953 
°©us
 = 
ZCL_STATUS_INVALID_VALUE
;

959 
°©us
 = 
ZCL_STATUS_UNREPORTABLE_ATTRIBUTE
;

965 
°©us
 = 
ZCL_STATUS_UNREPORTABLE_ATTRIBUTE
;

971 
°©us
 = 
ZCL_STATUS_INVALID_DATA_TYPE
;

977 i‡–
	`z˛_M™d©‹yRï‹èbÀAâribuã
–&
©åRec
 ) =
TRUE
 )

981 
°©us
 = 
ZCL_STATUS_UNSUPPORTED_ATTRIBUTE
;

986 
°©us
 = 
ZCL_STATUS_UNSUPPORTED_ATTRIBUTE
;

993 
°©us
 = 
ZCL_STATUS_UNSUPPORTED_ATTRIBUTE
;

997 i‡–
°©us
 !
ZCL_STATUS_SUCCESS
 )

999 
cfgRï‹tR•Cmd
->
©åLi°
[
j
].
°©us
 = status;

1000 
cfgRï‹tR•Cmd
->
©åLi°
[
j
++].
©åID
 = 
ªp‹tRec
->attrID;

1004 i‡–
j
 == 0 )

1009 
cfgRï‹tR•Cmd
->
©åLi°
[0].
°©us
 = 
ZCL_STATUS_SUCCESS
;

1010 
cfgRï‹tR•Cmd
->
numAâr
 = 1;

1014 
cfgRï‹tR•Cmd
->
numAâr
 = 
j
;

1018 
	`z˛_SídC⁄figRï‹tR•Cmd
–
SIMPLEMETER_ENDPOINT
, &(
pInMsg
->
§cAddr
),

1019 
pInMsg
->
˛u°îId
, 
cfgRï‹tR•Cmd
, 
ZCL_FRAME_SERVER_CLIENT_DIR
,

1020 
åue
, 
pInMsg
->
z˛Hdr
.
å™sSeqNum
 );

1021 
	`oßl_mem_‰ì
–
cfgRï‹tR•Cmd
 );

1023  
TRUE
 ;

1024 
	}
}

1035 
uöt8
 
	$sim∂emëî_Pro˚ssInC⁄figRï‹tR•Cmd
–
z˛IncomögMsg_t
 *
pInMsg
 )

1037 
z˛CfgRï‹tR•Cmd_t
 *
cfgRï‹tR•Cmd
;

1038 
z˛AârRec_t
 
©åRec
;

1039 
uöt8
 
i
;

1041 
cfgRï‹tR•Cmd
 = (
z˛CfgRï‹tR•Cmd_t
 *)
pInMsg
->
©åCmd
;

1042 
i
 = 0; i < 
cfgRï‹tR•Cmd
->
numAâr
; i++)

1044 i‡–
	`z˛FödAârRec
–
SIMPLEMETER_ENDPOINT
, 
pInMsg
->
˛u°îId
,

1045 
cfgRï‹tR•Cmd
->
©åLi°
[
i
].
©åID
, &
©åRec
 ) )

1052  
TRUE
;

1053 
	}
}

1064 
uöt8
 
	$sim∂emëî_Pro˚ssInRódRï‹tCfgCmd
–
z˛IncomögMsg_t
 *
pInMsg
 )

1066 
z˛RódRï‹tCfgCmd_t
 *
ªadRï‹tCfgCmd
;

1067 
z˛RódRï‹tCfgR•Cmd_t
 *
ªadRï‹tCfgR•Cmd
;

1068 
z˛Rï‹tCfgR•Rec_t
 *
ªp‹tR•Rec
;

1069 
z˛AârRec_t
 
©åRec
;

1070 
uöt8
 
ªp‹tCh™geLí
;

1071 
uöt8
 *
d©aPå
;

1072 
uöt8
 
hdrLí
;

1073 
uöt8
 
d©aLí
 = 0;

1074 
uöt8
 
°©us
;

1075 
uöt8
 
i
;

1077 
ªadRï‹tCfgCmd
 = (
z˛RódRï‹tCfgCmd_t
 *)
pInMsg
->
©åCmd
;

1080  
i
 = 0; i < 
ªadRï‹tCfgCmd
->
numAâr
; i++ )

1084 i‡–
	`z˛FödAârRec
–
SIMPLEMETER_ENDPOINT
, 
pInMsg
->
˛u°îId
,

1085 
ªadRï‹tCfgCmd
->
©åLi°
[
i
].
©åID
, &
©åRec
 ) )

1087 i‡–
	`z˛A«logD©aTy≥
–
©åRec
.
©å
.
d©aTy≥
 ) )

1089 
ªp‹tCh™geLí
 = 
	`z˛GëD©aTy≥Lígth
–
©åRec
.
©å
.
d©aTy≥
 );

1092 i‡–
	`PADDING_NEEDED
–
ªp‹tCh™geLí
 ) )

1093 
ªp‹tCh™geLí
++;

1094 
d©aLí
 +
ªp‹tCh™geLí
;

1099 
hdrLí
 = –
z˛RódRï‹tCfgR•Cmd_t
 ) + ( 
ªadRï‹tCfgCmd
->
numAâr
 * –
z˛Rï‹tCfgR•Rec_t
 ) );

1102 
ªadRï‹tCfgR•Cmd
 = (
z˛RódRï‹tCfgR•Cmd_t
 *)
	`oßl_mem_Æloc
–
hdrLí
 + 
d©aLí
 );

1103 i‡–
ªadRï‹tCfgR•Cmd
 =
NULL
 )

1104  
FALSE
;

1106 
d©aPå
 = (
uöt8
 *)–(uöt8 *)
ªadRï‹tCfgR•Cmd
 + 
hdrLí
 );

1107 
ªadRï‹tCfgR•Cmd
->
numAâr
 = 
ªadRï‹tCfgCmd
->numAttr;

1108 
i
 = 0; i < 
ªadRï‹tCfgCmd
->
numAâr
; i++)

1110 
ªp‹tR•Rec
 = &(
ªadRï‹tCfgR•Cmd
->
©åLi°
[
i
]);

1112 i‡–
	`z˛FödAârRec
–
SIMPLEMETER_ENDPOINT
, 
pInMsg
->
˛u°îId
,

1113 
ªadRï‹tCfgCmd
->
©åLi°
[
i
].
©åID
, &
©åRec
 ) )

1115 i‡–
	`z˛_M™d©‹yRï‹èbÀAâribuã
–&
©åRec
 ) =
TRUE
 )

1119 
°©us
 = 
ZCL_STATUS_UNREPORTABLE_ATTRIBUTE
;

1120 i‡–
°©us
 =
ZCL_STATUS_SUCCESS
 && 
	`z˛A«logD©aTy≥
–
©åRec
.
©å
.
d©aTy≥
 ) )

1122 
ªp‹tCh™geLí
 = 
	`z˛GëD©aTy≥Lígth
–
©åRec
.
©å
.
d©aTy≥
 );

1124 
ªp‹tR•Rec
->
ªp‹èbÀCh™ge
 = 
d©aPå
;

1127 i‡–
	`PADDING_NEEDED
–
ªp‹tCh™geLí
 ) )

1128 
ªp‹tCh™geLí
++;

1129 
d©aPå
 +
ªp‹tCh™geLí
;

1135 
°©us
 = 
ZCL_STATUS_UNREPORTABLE_ATTRIBUTE
;

1141 
°©us
 = 
ZCL_STATUS_UNSUPPORTED_ATTRIBUTE
;

1144 
ªp‹tR•Rec
->
°©us
 = status;

1145 
ªp‹tR•Rec
->
©åID
 = 
ªadRï‹tCfgCmd
->
©åLi°
[
i
].attrID;

1149 
	`z˛_SídRódRï‹tCfgR•Cmd
–
SIMPLEMETER_ENDPOINT
, &(
pInMsg
->
§cAddr
),

1150 
pInMsg
->
˛u°îId
, 
ªadRï‹tCfgR•Cmd
, 
ZCL_FRAME_SERVER_CLIENT_DIR
,

1151 
åue
, 
pInMsg
->
z˛Hdr
.
å™sSeqNum
 );

1152 
	`oßl_mem_‰ì
–
ªadRï‹tCfgR•Cmd
 );

1154  
TRUE
;

1155 
	}
}

1166 
uöt8
 
	$sim∂emëî_Pro˚ssInRódRï‹tCfgR•Cmd
–
z˛IncomögMsg_t
 *
pInMsg
 )

1168 
z˛RódRï‹tCfgR•Cmd_t
 *
ªadRï‹tCfgR•Cmd
;

1169 
z˛Rï‹tCfgR•Rec_t
 *
ªp‹tR•Rec
;

1170 
uöt8
 
i
;

1172 
ªadRï‹tCfgR•Cmd
 = (
z˛RódRï‹tCfgR•Cmd_t
 *)
pInMsg
->
©åCmd
;

1173  
i
 = 0; i < 
ªadRï‹tCfgR•Cmd
->
numAâr
; i++ )

1175 
ªp‹tR•Rec
 = &(
ªadRï‹tCfgR•Cmd
->
©åLi°
[
i
]);

1180 i‡–
ªp‹tR•Rec
->
°©us
 =
ZCL_STATUS_SUCCESS
 )

1182 i‡–
ªp‹tR•Rec
->
dúe˘i⁄
 =
ZCL_SEND_ATTR_REPORTS
 )

1193  
TRUE
;

1194 
	}
}

1205 
uöt8
 
	$sim∂emëî_Pro˚ssInRï‹tCmd
–
z˛IncomögMsg_t
 *
pInMsg
 )

1207 
z˛Rï‹tCmd_t
 *
ªp‹tCmd
;

1208 
uöt8
 
i
;

1210 
ªp‹tCmd
 = (
z˛Rï‹tCmd_t
 *)
pInMsg
->
©åCmd
;

1211 
i
 = 0; i < 
ªp‹tCmd
->
numAâr
; i++)

1216  
TRUE
;

1217 
	}
}

1229 
uöt8
 
	$sim∂emëî_Pro˚ssInDeÁu…R•Cmd
–
z˛IncomögMsg_t
 *
pInMsg
 )

1235  
TRUE
;

1236 
	}
}

1238 #i‡
deföed
 ( 
ZCL_DISCOVER
 )

1248 
uöt8
 
	$sim∂emëî_Pro˚ssInDiscR•Cmd
–
z˛IncomögMsg_t
 *
pInMsg
 )

1250 
z˛DiscovîR•Cmd_t
 *
discovîR•Cmd
;

1251 
uöt8
 
i
;

1253 
discovîR•Cmd
 = (
z˛DiscovîR•Cmd_t
 *)
pInMsg
->
©åCmd
;

1254  
i
 = 0; i < 
discovîR•Cmd
->
numAâr
; i++ )

1259  
TRUE
;

1260 
	}
}

	@Projects/zstack/SE/SampleApp/Source/SimpleMeter/simplemeter.h

40 #i‚de‡
SIMPLEMETER_H


41 
	#SIMPLEMETER_H


	)

43 #ifde‡
__˝lu•lus


51 
	~"z˛.h
"

56 
	#SIMPLEMETER_ENDPOINT
 0x09

	)

58 
	#SIMPLEMETER_MAX_ATTRIBUTES
 50

	)

60 
	#SIMPLEMETER_MAX_OPTIONS
 2

	)

62 
	#SIMPLEMETER_UPDATE_TIME_PERIOD
 1000

63 
	#SIMPLEMETER_REPORT_PERIOD
 5000

64 
	#SE_DEVICE_POLL_RATE
 8000

65 

	)

67 
	#SIMPLEMETER_IDENTIFY_TIMEOUT_EVT
 0x0001

	)

68 
	#SIMPLEMETER_UPDATE_TIME_EVT
 0x0002

	)

69 
	#SIMPLEMETER_KEY_ESTABLISHMENT_REQUEST_EVT
 0x0004

	)

70 
	#SIMPLEMETER_REPORT_ATTRIBUTE_EVT
 0x0008

	)

83 
Sim∂eDes¸ùti⁄F‹m©_t
 
sim∂eMëîSim∂eDesc
;

84 
CONST
 
z˛AârRec_t
 
sim∂eMëîAârs
[];

85 
z˛O±i⁄Rec_t
 
sim∂eMëîO±i⁄s
[];

86 
uöt8
 
sim∂eMëîDevi˚E«bÀd
;

87 
uöt16
 
sim∂eMëîTønsôi⁄Time
;

88 
uöt16
 
sim∂eMëîIdítifyTime
;

89 
uöt32
 
sim∂eMëîTime
;

98 
sim∂emëî_Inô
–
uöt8
 
èsk_id
 );

103 
uöt16
 
sim∂emëî_evít_lo›
–
uöt8
 
èsk_id
, uöt16 
evíts
 );

109 #ifde‡
__˝lu•lus


	@Projects/zstack/SE/SampleApp/Source/SimpleMeter/simplemeter_data.c

45 
	~"OSAL.h
"

46 
	~"OSAL_Clock.h
"

47 
	~"ZDC⁄fig.h
"

49 
	~"£.h
"

50 
	~"sim∂emëî.h
"

51 
	~"z˛_gíîÆ.h
"

52 
	~"z˛_£.h
"

53 
	~"z˛_key_e°ablish.h
"

58 
	#SIMPLEMETER_DEVICE_VERSION
 0

	)

59 
	#SIMPLEMETER_FLAGS
 0

	)

61 
	#SIMPLEMETER_HWVERSION
 1

	)

62 
	#SIMPLEMETER_ZCLVERSION
 1

	)

76 c⁄° 
uöt8
 
	gsim∂eMëîZCLVîsi⁄
 = 
SIMPLEMETER_ZCLVERSION
;

77 c⁄° 
uöt8
 
	gsim∂eMëîHWVîsi⁄
 = 
SIMPLEMETER_HWVERSION
;

78 c⁄° 
uöt8
 
	gsim∂eMëîM™uÁ˘uªrName
[] = { 16, 'T','e','x','a','s','I','n','s','t','r','u','m','e','n','t','s' };

79 c⁄° 
uöt8
 
	gsim∂eMëîModñId
[] = { 16, 'T','I','0','0','0','1',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ' };

80 c⁄° 
uöt8
 
	gsim∂eMëîD©eCode
[] = { 16, '2','0','0','6','0','8','3','1',' ',' ',' ',' ',' ',' ',' ',' ' };

81 c⁄° 
uöt8
 
	gsim∂eMëîPowîSour˚
 = 
POWER_SOURCE_MAINS_1_PHASE
;

83 
uöt8
 
	gsim∂eMëîLoˇti⁄Des¸ùti⁄
[] = { 16, ' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ' };

84 
uöt8
 
	gsim∂eMëîPhysiˇlEnvú⁄mít
 = 
PHY_UNSPECIFIED_ENV
;

85 
uöt8
 
	gsim∂eMëîDevi˚E«bÀd
 = 
DEVICE_ENABLED
;

88 
uöt16
 
	gsim∂eMëîIdítifyTime
 = 0;

89 
uöt32
 
	gsim∂eMëîTime
 = 0;

90 
uöt8
 
	gsim∂eMëîTimeSètus
 = 0x01;

93 
uöt8
 
	gsim∂eMëîCuºítSumm©i⁄Dñivîed
[] = { 0x11, 0x22, 0x33, 0x44, 0x55, 0x66 };

94 
uöt8
 
	gsim∂eMëîCuºítSumm©i⁄Re˚ived
[] = { 0x11, 0x22, 0x33, 0x44, 0x55, 0x66 };

95 
uöt8
 
	gsim∂eMëîCuºítMaxDem™dDñivîed
[] = { 0x11, 0x22, 0x33, 0x44, 0x55, 0x66 };

96 
uöt8
 
	gsim∂eMëîCuºítMaxDem™dRe˚ived
[] = { 0x11, 0x22, 0x33, 0x44, 0x55, 0x66 };

97 
uöt8
 
	gsim∂eMëîCuºítTõr1Summ©i⁄Dñivîed
[] = { 0x11, 0x22, 0x33, 0x44, 0x55, 0x66 };

98 
uöt8
 
	gsim∂eMëîCuºítTõr1Summ©i⁄Re˚ived
[] = { 0x11, 0x22, 0x33, 0x44, 0x55, 0x66 };

99 
uöt8
 
	gsim∂eMëîCuºítTõr2Summ©i⁄Dñivîed
[] = { 0x11, 0x22, 0x33, 0x44, 0x55, 0x66 };

100 
uöt8
 
	gsim∂eMëîCuºítTõr2Summ©i⁄Re˚ived
[] = { 0x11, 0x22, 0x33, 0x44, 0x55, 0x66 };

101 
uöt8
 
	gsim∂eMëîCuºítTõr3Summ©i⁄Dñivîed
[] = { 0x11, 0x22, 0x33, 0x44, 0x55, 0x66 };

102 
uöt8
 
	gsim∂eMëîCuºítTõr3Summ©i⁄Re˚ived
[] = { 0x11, 0x22, 0x33, 0x44, 0x55, 0x66 };

103 
uöt8
 
	gsim∂eMëîCuºítTõr4Summ©i⁄Dñivîed
[] = { 0x11, 0x22, 0x33, 0x44, 0x55, 0x66 };

104 
uöt8
 
	gsim∂eMëîCuºítTõr4Summ©i⁄Re˚ived
[] = { 0x11, 0x22, 0x33, 0x44, 0x55, 0x66 };

105 
uöt8
 
	gsim∂eMëîCuºítTõr5Summ©i⁄Dñivîed
[] = { 0x11, 0x22, 0x33, 0x44, 0x55, 0x66 };

106 
uöt8
 
	gsim∂eMëîCuºítTõr5Summ©i⁄Re˚ived
[] = { 0x11, 0x22, 0x33, 0x44, 0x55, 0x66 };

107 
uöt8
 
	gsim∂eMëîCuºítTõr6Summ©i⁄Dñivîed
[] = { 0x11, 0x22, 0x33, 0x44, 0x55, 0x66 };

108 
uöt8
 
	gsim∂eMëîCuºítTõr6Summ©i⁄Re˚ived
[] = { 0x11, 0x22, 0x33, 0x44, 0x55, 0x66 };

109 
uöt8
 
	gsim∂eMëîDFTSumm©i⁄
[] = { 0x11, 0x22, 0x33, 0x44, 0x55, 0x66 };

110 
uöt16
 
	gsim∂eMëîDaûyFªezeTime
 = 0x01;

111 
öt8
 
	gsim∂eMëîPowîFa˘‹
 = 0x01;

112 
UTCTime
 
	gsim∂eMëîS«pshŸTime
 = 0x00;

113 
UTCTime
 
	gsim∂eMëîMaxDem™dDñivîdTime
 = 0x00;

114 
UTCTime
 
	gsim∂eMëîMaxDem™dRe˚ivedTime
 = 0x00;

117 
uöt8
 
	gsim∂eMëîSètus
 = 0x12;

120 
uöt8
 
	gsim∂eMëîUnôOfMósuª
 = 0x01;

121 
uöt24
 
	gsim∂eMëîMu…ùlõr
 = 0x01;

122 
uöt24
 
	gsim∂eMëîDivis‹
 = 0x01;

123 
uöt8
 
	gsim∂eMëîSumm©i⁄F‹m©ög
 = 0x01;

124 
uöt8
 
	gsim∂eMëîDem™dF‹m©tög
 = 0x01;

125 
uöt8
 
	gsim∂eMëîHi°‹iˇlC⁄sum±i⁄F‹m©tög
 = 0x01;

128 
uöt24
 
	gsim∂eMëîIn°™ã√ousDem™d
 = 0x01;

129 
uöt24
 
	gsim∂eMëîCuºítdayC⁄sum±i⁄Dñivîed
 = 0x01;

130 
uöt24
 
	gsim∂eMëîCuºítdayC⁄sum±i⁄Re˚ived
 = 0x01;

131 
uöt24
 
	gsim∂eMëîPªviousdayC⁄sum±i⁄Dñivîed
 = 0x01;

132 
uöt24
 
	gsim∂eMëîPªviousdayC⁄sumçi⁄Re˚ived
 = 0x01;

133 
UTCTime
 
	gsim∂eMëîCuºítP¨tülProfûeI¡îvÆSèπTime
 = 0x1000;

134 
uöt24
 
	gsim∂eMëîCuºítP¨tülProfûeI¡îvÆVÆue
 = 0x0001;

135 
uöt8
 
	gsim∂eMëîMaxNumbîOfPîiodsDñivîed
 = 0x01;

138 
uöt16
 
	gsim∂eMëîKeyE°ablishmítSuôe
 = 
CERTIFICATE_BASED_KEY_ESTABLISHMENT
;

143 
CONST
 
z˛AârRec_t
 
	gsim∂eMëîAârs
[
SIMPLEMETER_MAX_ATTRIBUTES
] =

148 
ZCL_CLUSTER_ID_GEN_BASIC
,

150 
ATTRID_BASIC_ZCL_VERSION
,

151 
ZCL_DATATYPE_UINT8
,

152 
ACCESS_CONTROL_READ
,

153 (*)&
sim∂eMëîZCLVîsi⁄


157 
ZCL_CLUSTER_ID_GEN_BASIC
,

159 
ATTRID_BASIC_HW_VERSION
,

160 
ZCL_DATATYPE_UINT8
,

161 
ACCESS_CONTROL_READ
,

162 (*)&
sim∂eMëîHWVîsi⁄


166 
ZCL_CLUSTER_ID_GEN_BASIC
,

168 
ATTRID_BASIC_MANUFACTURER_NAME
,

169 
ZCL_DATATYPE_CHAR_STR
,

170 
ACCESS_CONTROL_READ
,

171 (*)
sim∂eMëîM™uÁ˘uªrName


175 
ZCL_CLUSTER_ID_GEN_BASIC
,

177 
ATTRID_BASIC_MODEL_ID
,

178 
ZCL_DATATYPE_CHAR_STR
,

179 
ACCESS_CONTROL_READ
,

180 (*)
sim∂eMëîModñId


184 
ZCL_CLUSTER_ID_GEN_BASIC
,

186 
ATTRID_BASIC_DATE_CODE
,

187 
ZCL_DATATYPE_CHAR_STR
,

188 
ACCESS_CONTROL_READ
,

189 (*)
sim∂eMëîD©eCode


193 
ZCL_CLUSTER_ID_GEN_BASIC
,

195 
ATTRID_BASIC_POWER_SOURCE
,

196 
ZCL_DATATYPE_ENUM8
,

197 
ACCESS_CONTROL_READ
,

198 (*)&
sim∂eMëîPowîSour˚


202 
ZCL_CLUSTER_ID_GEN_BASIC
,

204 
ATTRID_BASIC_LOCATION_DESC
,

205 
ZCL_DATATYPE_CHAR_STR
,

206 (
ACCESS_CONTROL_READ
 | 
ACCESS_CONTROL_WRITE
),

207 (*)
sim∂eMëîLoˇti⁄Des¸ùti⁄


211 
ZCL_CLUSTER_ID_GEN_BASIC
,

213 
ATTRID_BASIC_PHYSICAL_ENV
,

214 
ZCL_DATATYPE_ENUM8
,

215 (
ACCESS_CONTROL_READ
 | 
ACCESS_CONTROL_WRITE
),

216 (*)&
sim∂eMëîPhysiˇlEnvú⁄mít


220 
ZCL_CLUSTER_ID_GEN_BASIC
,

222 
ATTRID_BASIC_DEVICE_ENABLED
,

223 
ZCL_DATATYPE_BOOLEAN
,

224 (
ACCESS_CONTROL_READ
 | 
ACCESS_CONTROL_WRITE
),

225 (*)&
sim∂eMëîDevi˚E«bÀd


231 
ZCL_CLUSTER_ID_GEN_IDENTIFY
,

233 
ATTRID_IDENTIFY_TIME
,

234 
ZCL_DATATYPE_UINT16
,

235 (
ACCESS_CONTROL_READ
 | 
ACCESS_CONTROL_WRITE
),

236 (*)&
sim∂eMëîIdítifyTime


244 
ZCL_CLUSTER_ID_GEN_TIME
,

246 
ATTRID_TIME_TIME
,

247 
ZCL_DATATYPE_UTC
,

248 
ACCESS_CONTROL_READ
,

249 (*)&
sim∂eMëîTime


255 
ZCL_CLUSTER_ID_GEN_TIME
,

257 
ATTRID_TIME_STATUS
,

258 
ZCL_DATATYPE_BITMAP8
,

259 
ACCESS_CONTROL_READ
,

260 (*)&
sim∂eMëîTimeSètus


267 
ZCL_CLUSTER_ID_SE_SIMPLE_METERING
,

269 
ATTRID_SE_CURRENT_SUMMATION_DELIVERED
,

270 
ZCL_DATATYPE_UINT48
,

271 
ACCESS_CONTROL_READ
,

272 (*)
sim∂eMëîCuºítSumm©i⁄Dñivîed


276 
ZCL_CLUSTER_ID_SE_SIMPLE_METERING
,

278 
ATTRID_SE_CURRENT_SUMMATION_RECEIVED
,

279 
ZCL_DATATYPE_UINT48
,

280 
ACCESS_CONTROL_READ
,

281 (*)
sim∂eMëîCuºítSumm©i⁄Re˚ived


285 
ZCL_CLUSTER_ID_SE_SIMPLE_METERING
,

287 
ATTRID_SE_CURRENT_MAX_DEMAND_DELIVERED
,

288 
ZCL_DATATYPE_UINT48
,

289 
ACCESS_CONTROL_READ
,

290 (*)
sim∂eMëîCuºítMaxDem™dDñivîed


294 
ZCL_CLUSTER_ID_SE_SIMPLE_METERING
,

296 
ATTRID_SE_CURRENT_MAX_DEMAND_RECEIVED
,

297 
ZCL_DATATYPE_UINT48
,

298 
ACCESS_CONTROL_READ
,

299 (*)
sim∂eMëîCuºítMaxDem™dRe˚ived


303 
ZCL_CLUSTER_ID_SE_SIMPLE_METERING
,

305 
ATTRID_SE_CURRENT_TIER1_SUMMATION_DELIVERED
,

306 
ZCL_DATATYPE_UINT48
,

307 
ACCESS_CONTROL_READ
,

308 (*)
sim∂eMëîCuºítTõr1Summ©i⁄Dñivîed


312 
ZCL_CLUSTER_ID_SE_SIMPLE_METERING
,

314 
ATTRID_SE_CURRENT_TIER1_SUMMATION_RECEIVED
,

315 
ZCL_DATATYPE_UINT48
,

316 
ACCESS_CONTROL_READ
,

317 (*)
sim∂eMëîCuºítTõr1Summ©i⁄Re˚ived


321 
ZCL_CLUSTER_ID_SE_SIMPLE_METERING
,

323 
ATTRID_SE_CURRENT_TIER2_SUMMATION_DELIVERED
,

324 
ZCL_DATATYPE_UINT48
,

325 
ACCESS_CONTROL_READ
,

326 (*)
sim∂eMëîCuºítTõr2Summ©i⁄Dñivîed


330 
ZCL_CLUSTER_ID_SE_SIMPLE_METERING
,

332 
ATTRID_SE_CURRENT_TIER2_SUMMATION_RECEIVED
,

333 
ZCL_DATATYPE_UINT48
,

334 
ACCESS_CONTROL_READ
,

335 (*)
sim∂eMëîCuºítTõr2Summ©i⁄Re˚ived


339 
ZCL_CLUSTER_ID_SE_SIMPLE_METERING
,

341 
ATTRID_SE_CURRENT_TIER3_SUMMATION_DELIVERED
,

342 
ZCL_DATATYPE_UINT48
,

343 
ACCESS_CONTROL_READ
,

344 (*)
sim∂eMëîCuºítTõr3Summ©i⁄Dñivîed


348 
ZCL_CLUSTER_ID_SE_SIMPLE_METERING
,

350 
ATTRID_SE_CURRENT_TIER3_SUMMATION_RECEIVED
,

351 
ZCL_DATATYPE_UINT48
,

352 
ACCESS_CONTROL_READ
,

353 (*)
sim∂eMëîCuºítTõr3Summ©i⁄Re˚ived


357 
ZCL_CLUSTER_ID_SE_SIMPLE_METERING
,

359 
ATTRID_SE_CURRENT_TIER4_SUMMATION_DELIVERED
,

360 
ZCL_DATATYPE_UINT48
,

361 
ACCESS_CONTROL_READ
,

362 (*)
sim∂eMëîCuºítTõr4Summ©i⁄Dñivîed


366 
ZCL_CLUSTER_ID_SE_SIMPLE_METERING
,

368 
ATTRID_SE_CURRENT_TIER4_SUMMATION_RECEIVED
,

369 
ZCL_DATATYPE_UINT48
,

370 
ACCESS_CONTROL_READ
,

371 (*)
sim∂eMëîCuºítTõr4Summ©i⁄Re˚ived


375 
ZCL_CLUSTER_ID_SE_SIMPLE_METERING
,

377 
ATTRID_SE_CURRENT_TIER5_SUMMATION_DELIVERED
,

378 
ZCL_DATATYPE_UINT48
,

379 
ACCESS_CONTROL_READ
,

380 (*)
sim∂eMëîCuºítTõr5Summ©i⁄Dñivîed


384 
ZCL_CLUSTER_ID_SE_SIMPLE_METERING
,

386 
ATTRID_SE_CURRENT_TIER5_SUMMATION_RECEIVED
,

387 
ZCL_DATATYPE_UINT48
,

388 
ACCESS_CONTROL_READ
,

389 (*)
sim∂eMëîCuºítTõr5Summ©i⁄Re˚ived


393 
ZCL_CLUSTER_ID_SE_SIMPLE_METERING
,

395 
ATTRID_SE_CURRENT_TIER6_SUMMATION_DELIVERED
,

396 
ZCL_DATATYPE_UINT48
,

397 
ACCESS_CONTROL_READ
,

398 (*)
sim∂eMëîCuºítTõr5Summ©i⁄Dñivîed


402 
ZCL_CLUSTER_ID_SE_SIMPLE_METERING
,

404 
ATTRID_SE_CURRENT_TIER6_SUMMATION_RECEIVED
,

405 
ZCL_DATATYPE_UINT48
,

406 
ACCESS_CONTROL_READ
,

407 (*)
sim∂eMëîCuºítTõr5Summ©i⁄Re˚ived


411 
ZCL_CLUSTER_ID_SE_SIMPLE_METERING
,

413 
ATTRID_SE_DFT_SUMMATION
,

414 
ZCL_DATATYPE_UINT48
,

415 
ACCESS_CONTROL_READ
,

416 (*)
sim∂eMëîDFTSumm©i⁄


420 
ZCL_CLUSTER_ID_SE_SIMPLE_METERING
,

422 
ATTRID_SE_DAILY_FREEZE_TIME
,

423 
ZCL_DATATYPE_UINT16
,

424 
ACCESS_CONTROL_READ
,

425 (*)&
sim∂eMëîDaûyFªezeTime


429 
ZCL_CLUSTER_ID_SE_SIMPLE_METERING
,

431 
ATTRID_SE_POWER_FACTOR
,

432 
ZCL_DATATYPE_INT8
,

433 
ACCESS_CONTROL_READ
,

434 (*)&
sim∂eMëîPowîFa˘‹


438 
ZCL_CLUSTER_ID_SE_SIMPLE_METERING
,

440 
ATTRID_SE_READING_SNAPSHOT_TIME
,

441 
ZCL_DATATYPE_UTC
,

442 
ACCESS_CONTROL_READ
,

443 (*)&
sim∂eMëîS«pshŸTime


447 
ZCL_CLUSTER_ID_SE_SIMPLE_METERING
,

449 
ATTRID_SE_CURRENT_MAX_DEMAND_DELIVERD_TIME
,

450 
ZCL_DATATYPE_UTC
,

451 
ACCESS_CONTROL_READ
,

452 (*)&
sim∂eMëîMaxDem™dDñivîdTime


456 
ZCL_CLUSTER_ID_SE_SIMPLE_METERING
,

458 
ATTRID_SE_CURRENT_MAX_DEMAND_RECEIVED_TIME
,

459 
ZCL_DATATYPE_UTC
,

460 
ACCESS_CONTROL_READ
,

461 (*)&
sim∂eMëîMaxDem™dRe˚ivedTime


465 
ZCL_CLUSTER_ID_SE_SIMPLE_METERING
,

467 
ATTRID_SE_STATUS
,

468 
ZCL_DATATYPE_BITMAP8
,

469 
ACCESS_CONTROL_READ
,

470 (*)&
sim∂eMëîSètus


475 
ZCL_CLUSTER_ID_SE_SIMPLE_METERING
,

477 
ATTRID_SE_UNIT_OF_MEASURE
,

478 
ZCL_DATATYPE_ENUM8
,

479 
ACCESS_CONTROL_READ
,

480 (*)&
sim∂eMëîUnôOfMósuª


484 
ZCL_CLUSTER_ID_SE_SIMPLE_METERING
,

486 
ATTRID_SE_MULTIPLIER
,

487 
ZCL_DATATYPE_UINT24
,

488 
ACCESS_CONTROL_READ
,

489 (*)&
sim∂eMëîMu…ùlõr


493 
ZCL_CLUSTER_ID_SE_SIMPLE_METERING
,

495 
ATTRID_SE_DIVISOR
,

496 
ZCL_DATATYPE_UINT24
,

497 
ACCESS_CONTROL_READ
,

498 (*)&
sim∂eMëîDivis‹


502 
ZCL_CLUSTER_ID_SE_SIMPLE_METERING
,

504 
ATTRID_SE_SUMMATION_FORMATTING
,

505 
ZCL_DATATYPE_BITMAP8
,

506 
ACCESS_CONTROL_READ
,

507 (*)&
sim∂eMëîSumm©i⁄F‹m©ög


511 
ZCL_CLUSTER_ID_SE_SIMPLE_METERING
,

513 
ATTRID_SE_DEMAND_FORMATTING
,

514 
ZCL_DATATYPE_BITMAP8
,

515 
ACCESS_CONTROL_READ
,

516 (*)&
sim∂eMëîDem™dF‹m©tög


520 
ZCL_CLUSTER_ID_SE_SIMPLE_METERING
,

522 
ATTRID_SE_HISTORICAL_CONSUMPTION_FORMATTING
,

523 
ZCL_DATATYPE_BITMAP8
,

524 
ACCESS_CONTROL_READ
,

525 (*)&
sim∂eMëîHi°‹iˇlC⁄sum±i⁄F‹m©tög


529 
ZCL_CLUSTER_ID_SE_SIMPLE_METERING
,

531 
ATTRID_SE_INSTANTANEOUS_DEMAND
,

532 
ZCL_DATATYPE_UINT24
,

533 
ACCESS_CONTROL_READ
,

534 (*)&
sim∂eMëîIn°™ã√ousDem™d


538 
ZCL_CLUSTER_ID_SE_SIMPLE_METERING
,

540 
ATTRID_SE_CURRENTDAY_CONSUMPTION_DELIVERED
,

541 
ZCL_DATATYPE_UINT24
,

542 
ACCESS_CONTROL_READ
,

543 (*)&
sim∂eMëîCuºítdayC⁄sum±i⁄Dñivîed


547 
ZCL_CLUSTER_ID_SE_SIMPLE_METERING
,

549 
ATTRID_SE_CURRENTDAY_CONSUMPTION_RECEIVED
,

550 
ZCL_DATATYPE_UINT24
,

551 
ACCESS_CONTROL_READ
,

552 (*)&
sim∂eMëîCuºítdayC⁄sum±i⁄Re˚ived


556 
ZCL_CLUSTER_ID_SE_SIMPLE_METERING
,

558 
ATTRID_SE_PREVIOUSDAY_CONSUMPTION_DELIVERED
,

559 
ZCL_DATATYPE_UINT24
,

560 
ACCESS_CONTROL_READ
,

561 (*)&
sim∂eMëîPªviousdayC⁄sum±i⁄Dñivîed


565 
ZCL_CLUSTER_ID_SE_SIMPLE_METERING
,

567 
ATTRID_SE_PREVIOUSDAY_CONSUMPTION_RECEIVED
,

568 
ZCL_DATATYPE_UINT24
,

569 
ACCESS_CONTROL_READ
,

570 (*)&
sim∂eMëîPªviousdayC⁄sumçi⁄Re˚ived


574 
ZCL_CLUSTER_ID_SE_SIMPLE_METERING
,

576 
ATTRID_SE_CURRENT_PARTIAL_PROFILE_INTERVAL_START_TIME
,

577 
ZCL_DATATYPE_UTC
,

578 
ACCESS_CONTROL_READ
,

579 (*)&
sim∂eMëîCuºítP¨tülProfûeI¡îvÆSèπTime


584 
ZCL_CLUSTER_ID_SE_SIMPLE_METERING
,

586 
ATTRID_SE_CURRENT_PARTIAL_PROFILE_INTERVAL_VALUE
,

587 
ZCL_DATATYPE_UINT24
,

588 
ACCESS_CONTROL_READ
,

589 (*)&
sim∂eMëîCuºítP¨tülProfûeI¡îvÆVÆue


594 
ZCL_CLUSTER_ID_SE_SIMPLE_METERING
,

596 
ATTRID_SE_MAX_NUMBER_OF_PERIODS_DELIVERED
,

597 
ZCL_DATATYPE_UINT8
,

598 
ACCESS_CONTROL_READ
,

599 (*)&
sim∂eMëîMaxNumbîOfPîiodsDñivîed


603 
ZCL_CLUSTER_ID_GEN_KEY_ESTABLISHMENT
,

605 
ATTRID_KEY_ESTABLISH_SUITE
,

606 
ZCL_DATATYPE_BITMAP16
,

607 
ACCESS_CONTROL_READ
,

608 (*)&
sim∂eMëîKeyE°ablishmítSuôe


616 
z˛O±i⁄Rec_t
 
	gsim∂eMëîO±i⁄s
[
SIMPLEMETER_MAX_OPTIONS
] =

620 
ZCL_CLUSTER_ID_GEN_TIME
,

621 –
AF_EN_SECURITY
 ),

626 
ZCL_CLUSTER_ID_SE_SIMPLE_METERING
,

627 –
AF_EN_SECURITY
 ),

636 
	#SIMPLEMETER_MAX_INCLUSTERS
 3

	)

637 c⁄° 
cId_t
 
	gsim∂eMëîInClu°îLi°
[
SIMPLEMETER_MAX_INCLUSTERS
] =

639 
ZCL_CLUSTER_ID_GEN_BASIC
,

640 
ZCL_CLUSTER_ID_GEN_IDENTIFY
,

641 
ZCL_CLUSTER_ID_SE_SIMPLE_METERING


644 
	#SIMPLEMETER_MAX_OUTCLUSTERS
 3

	)

645 c⁄° 
cId_t
 
	gsim∂eMëîOutClu°îLi°
[
SIMPLEMETER_MAX_OUTCLUSTERS
] =

647 
ZCL_CLUSTER_ID_GEN_BASIC
,

648 
ZCL_CLUSTER_ID_GEN_IDENTIFY
,

649 
ZCL_CLUSTER_ID_SE_SIMPLE_METERING


652 
Sim∂eDes¸ùti⁄F‹m©_t
 
	gsim∂eMëîSim∂eDesc
 =

654 
SIMPLEMETER_ENDPOINT
,

655 
ZCL_SE_PROFILE_ID
,

656 
ZCL_SE_DEVICEID_METER
,

657 
SIMPLEMETER_DEVICE_VERSION
,

658 
SIMPLEMETER_FLAGS
,

659 
SIMPLEMETER_MAX_INCLUSTERS
,

660 (
cId_t
 *)
sim∂eMëîInClu°îLi°
,

661 
SIMPLEMETER_MAX_OUTCLUSTERS
,

662 (
cId_t
 *)
sim∂eMëîOutClu°îLi°


	@Projects/zstack/SE/Source/se.c

44 
	~"ZComDef.h
"

45 
	~"OSAL.h
"

47 
	~"z˛.h
"

48 
	~"z˛_gíîÆ.h
"

49 
	~"z˛_£.h
"

50 
	~"z˛_key_e°ablish.h
"

52 
	~"£.h
"

102 
	$z˛SE_Inô
–
Sim∂eDes¸ùti⁄F‹m©_t
 *
sim∂eDesc
 )

104 
ídPoötDesc_t
 *
ïDesc
;

108 
ïDesc
 = 
	`oßl_mem_Æloc
– ( 
ídPoötDesc_t
 ) );

109 i‡–
ïDesc
 )

112 
ïDesc
->
ídPoöt
 = 
sim∂eDesc
->
EndPoöt
;

113 
ïDesc
->
èsk_id
 = &
z˛_TaskID
;

114 
ïDesc
->
sim∂eDesc
 = simpleDesc;

115 
ïDesc
->
œãncyReq
 = 
noL©ícyReqs
;

118 
	`afRegi°î
–
ïDesc
 );

120 
	}
}

	@Projects/zstack/SE/Source/se.h

41 #i‚de‡
SE_H


42 
	#SE_H


	)

44 #ifde‡
__˝lu•lus


57 
	#ZCL_SE_PROFILE_ID
 0x0109

	)

60 
	#ZCL_SE_DEVICEID_RANGE_EXTENDER
 0x0008

	)

63 
	#ZCL_SE_DEVICEID_ESP
 0x0500

	)

64 
	#ZCL_SE_DEVICEID_METER
 0x0501

	)

65 
	#ZCL_SE_DEVICEID_IN_PREMISE_DISPLAY
 0x0502

	)

66 
	#ZCL_SE_DEVICEID_PCT
 0x0503

	)

67 
	#ZCL_SE_DEVICEID_LOAD_CTRL_EXTENSION
 0x0504

	)

68 
	#ZCL_SE_DEVICEID_SMART_APPLIANCE
 0x0505

	)

69 
	#ZCL_SE_DEVICEID_PREPAY_TERMINAL
 0x0506

	)

86 
z˛SE_Inô
–
Sim∂eDes¸ùti⁄F‹m©_t
 *
sim∂eDesc
 );

91 #ifde‡
__˝lu•lus


	@Projects/zstack/Samples/BeginApp/Source/BeginApp.c

63 
	~"OSAL.h
"

64 
	~"AF.h
"

65 
	~"ZDAµ.h
"

66 
	~"ZDObje˘.h
"

67 
	~"ZDProfûe.h
"

69 
	~"BegöAµ.h
"

70 
	~"DebugTø˚.h
"

72 #i‡!
deföed
–
WIN32
 )

73 
	~"OnBﬂrd.h
"

77 
	~"hÆ_lcd.h
"

78 
	~"hÆ_Àd.h
"

79 
	~"hÆ_key.h
"

80 
	~"hÆ_u¨t.h
"

99 c⁄° 
cId_t
 
	gBegöAµ_Clu°îLi°
[
BEGINAPP_MAX_CLUSTERS
] =

101 
BEGINAPP_CLUSTERID


104 c⁄° 
Sim∂eDes¸ùti⁄F‹m©_t
 
	gBegöAµ_Sim∂eDesc
 =

106 
BEGINAPP_ENDPOINT
,

107 
BEGINAPP_PROFID
,

108 
BEGINAPP_DEVICEID
,

109 
BEGINAPP_DEVICE_VERSION
,

110 
BEGINAPP_FLAGS
,

111 
BEGINAPP_MAX_CLUSTERS
,

112 (
cId_t
 *)
BegöAµ_Clu°îLi°
,

113 
BEGINAPP_MAX_CLUSTERS
,

114 (
cId_t
 *)
BegöAµ_Clu°îLi°


121 
ídPoötDesc_t
 
	gBegöAµ_ïDesc
;

134 
byã
 
	gBegöAµ_TaskID
;

137 
devSèãs_t
 
	gBegöAµ_NwkSèã
;

140 
byã
 
	gBegöAµ_TønsID
;

142 
afAddrTy≥_t
 
	gBegöAµ_D°Addr
;

147 
BegöAµ_Pro˚ssZDOMsgs
–
zdoIncomögMsg_t
 *
öMsg
 );

148 
BegöAµ_H™dÀKeys
–
byã
 
shi·
, byã 
keys
 );

149 
BegöAµ_MesßgeMSGCB
–
afIncomögMSGPackë_t
 *
pckt
 );

150 
BegöAµ_SídTheMesßge
( );

174 
	$BegöAµ_Inô
–
byã
 
èsk_id
 )

176 
BegöAµ_TaskID
 = 
èsk_id
;

177 
BegöAµ_NwkSèã
 = 
DEV_INIT
;

178 
BegöAµ_TønsID
 = 0;

184 
BegöAµ_D°Addr
.
addrMode
 = (
afAddrMode_t
)
AddrNŸPª£¡
;

185 
BegöAµ_D°Addr
.
ídPoöt
 = 0;

186 
BegöAµ_D°Addr
.
addr
.
sh‹tAddr
 = 0;

189 
BegöAµ_ïDesc
.
ídPoöt
 = 
BEGINAPP_ENDPOINT
;

190 
BegöAµ_ïDesc
.
èsk_id
 = &
BegöAµ_TaskID
;

191 
BegöAµ_ïDesc
.
sim∂eDesc


192 (
Sim∂eDes¸ùti⁄F‹m©_t
 *)&
BegöAµ_Sim∂eDesc
;

193 
BegöAµ_ïDesc
.
œãncyReq
 = 
noL©ícyReqs
;

196 
	`afRegi°î
–&
BegöAµ_ïDesc
 );

199 
	`Regi°îF‹Keys
–
BegöAµ_TaskID
 );

202 #i‡
	`deföed
 ( 
LCD_SUPPORTED
 )

203 
	`HÆLcdWrôeSåög
–"BegöAµ", 
HAL_LCD_LINE_1
 );

206 
	`ZDO_Regi°îF‹ZDOMsg
–
BegöAµ_TaskID
, 
End_Devi˚_Böd_r•
 );

207 
	`ZDO_Regi°îF‹ZDOMsg
–
BegöAµ_TaskID
, 
M©ch_Desc_r•
 );

208 
	}
}

223 
UINT16
 
	$BegöAµ_Pro˚ssEvít
–
byã
 
èsk_id
, 
UINT16
 
evíts
 )

225 
afIncomögMSGPackë_t
 *
MSGpkt
;

226 
afD©aC⁄fúm_t
 *
afD©aC⁄fúm
;

229 
byã
 
£¡EP
;

230 
ZSètus_t
 
£¡Sètus
;

231 
byã
 
£¡TønsID
;

232 ()
èsk_id
;

234 i‡–
evíts
 & 
SYS_EVENT_MSG
 )

236 
MSGpkt
 = (
afIncomögMSGPackë_t
 *)
	`oßl_msg_ª˚ive
–
BegöAµ_TaskID
 );

237  
MSGpkt
 )

239  
MSGpkt
->
hdr
.
evít
 )

241 
ZDO_CB_MSG
:

242 
	`BegöAµ_Pro˚ssZDOMsgs
–(
zdoIncomögMsg_t
 *)
MSGpkt
 );

245 
KEY_CHANGE
:

246 
	`BegöAµ_H™dÀKeys
–((
keyCh™ge_t
 *)
MSGpkt
)->
°©e
, ((keyCh™ge_à*)MSGpkt)->
keys
 );

249 
AF_DATA_CONFIRM_CMD
:

253 
afD©aC⁄fúm
 = (
afD©aC⁄fúm_t
 *)
MSGpkt
;

254 
£¡EP
 = 
afD©aC⁄fúm
->
ídpoöt
;

255 
£¡Sètus
 = 
afD©aC⁄fúm
->
hdr
.
°©us
;

256 
£¡TønsID
 = 
afD©aC⁄fúm
->
å™sID
;

257 ()
£¡EP
;

258 ()
£¡TønsID
;

261 i‡–
£¡Sètus
 !
ZSuc˚ss
 )

267 
AF_INCOMING_MSG_CMD
:

268 
	`BegöAµ_MesßgeMSGCB
–
MSGpkt
 );

271 
ZDO_STATE_CHANGE
:

272 
BegöAµ_NwkSèã
 = (
devSèãs_t
)(
MSGpkt
->
hdr
.
°©us
);

273 i‡–(
BegöAµ_NwkSèã
 =
DEV_ZB_COORD
)

274 || (
BegöAµ_NwkSèã
 =
DEV_ROUTER
)

275 || (
BegöAµ_NwkSèã
 =
DEV_END_DEVICE
) )

277 
	`HÆLedSë
–
HAL_LED_3
, 
HAL_LED_MODE_FLASH
 );

279 
	`oßl_°¨t_timîEx
–
BegöAµ_TaskID
,

280 
BEGINAPP_SEND_MSG_EVT
,

281 
BEGINAPP_SEND_MSG_TIMEOUT
 );

290 
	`oßl_msg_dóŒoˇã
–(
uöt8
 *)
MSGpkt
 );

293 
MSGpkt
 = (
afIncomögMSGPackë_t
 *)
	`oßl_msg_ª˚ive
–
BegöAµ_TaskID
 );

297  (
evíts
 ^ 
SYS_EVENT_MSG
);

302 i‡–
evíts
 & 
BEGINAPP_SEND_MSG_EVT
 )

305 
	`BegöAµ_SídTheMesßge
();

308 
	`oßl_°¨t_timîEx
–
BegöAµ_TaskID
,

309 
BEGINAPP_SEND_MSG_EVT
,

310 
BEGINAPP_SEND_MSG_TIMEOUT
 );

313  (
evíts
 ^ 
BEGINAPP_SEND_MSG_EVT
);

318 
	}
}

333 
	$BegöAµ_Pro˚ssZDOMsgs
–
zdoIncomögMsg_t
 *
öMsg
 )

335  
öMsg
->
˛u°îID
 )

337 
End_Devi˚_Böd_r•
:

338 i‡–
	`ZDO_P¨£BödR•
–
öMsg
 ) =
ZSuc˚ss
 )

341 
	`HÆLedSë
–
HAL_LED_4
, 
HAL_LED_MODE_ON
 );

343 #i‡
	`deföed
(
BLINK_LEDS
)

347 
	`HÆLedSë
 ( 
HAL_LED_4
, 
HAL_LED_MODE_FLASH
 );

352 
M©ch_Desc_r•
:

354 
ZDO_A˘iveEndpoötR•_t
 *
pR•
 = 
	`ZDO_P¨£EPLi°R•
–
öMsg
 );

355 i‡–
pR•
 )

357 i‡–
pR•
->
°©us
 =
ZSuc˚ss
 &&ÖR•->
˙t
 )

359 
BegöAµ_D°Addr
.
addrMode
 = (
afAddrMode_t
)
Addr16Bô
;

360 
BegöAµ_D°Addr
.
addr
.
sh‹tAddr
 = 
pR•
->
nwkAddr
;

362 
BegöAµ_D°Addr
.
ídPoöt
 = 
pR•
->
ïLi°
[0];

365 
	`HÆLedSë
–
HAL_LED_4
, 
HAL_LED_MODE_ON
 );

367 
	`oßl_mem_‰ì
–
pR•
 );

372 
	}
}

388 
	$BegöAµ_H™dÀKeys
–
byã
 
shi·
, byã 
keys
 )

390 
zAddrTy≥_t
 
d°Addr
;

393 i‡–
shi·
 )

395 i‡–
keys
 & 
HAL_KEY_SW_1
 )

398 i‡–
keys
 & 
HAL_KEY_SW_2
 )

401 i‡–
keys
 & 
HAL_KEY_SW_3
 )

404 i‡–
keys
 & 
HAL_KEY_SW_4
 )

410 i‡–
keys
 & 
HAL_KEY_SW_1
 )

414 i‡–
keys
 & 
HAL_KEY_SW_2
 )

416 
	`HÆLedSë
 ( 
HAL_LED_4
, 
HAL_LED_MODE_OFF
 );

419 
d°Addr
.
addrMode
 = 
Addr16Bô
;

420 
d°Addr
.
addr
.
sh‹tAddr
 = 0x0000;

421 
	`ZDP_EndDevi˚BödReq
–&
d°Addr
, 
	`NLME_GëSh‹tAddr
(),

422 
BegöAµ_ïDesc
.
ídPoöt
,

423 
BEGINAPP_PROFID
,

424 
BEGINAPP_MAX_CLUSTERS
, (
cId_t
 *)
BegöAµ_Clu°îLi°
,

425 
BEGINAPP_MAX_CLUSTERS
, (
cId_t
 *)
BegöAµ_Clu°îLi°
,

426 
FALSE
 );

429 i‡–
keys
 & 
HAL_KEY_SW_3
 )

433 i‡–
keys
 & 
HAL_KEY_SW_4
 )

435 
	`HÆLedSë
 ( 
HAL_LED_4
, 
HAL_LED_MODE_OFF
 );

437 
d°Addr
.
addrMode
 = 
AddrBrﬂdˇ°
;

438 
d°Addr
.
addr
.
sh‹tAddr
 = 
NWK_BROADCAST_SHORTADDR
;

439 
	`ZDP_M©chDescReq
–&
d°Addr
, 
NWK_BROADCAST_SHORTADDR
,

440 
BEGINAPP_PROFID
,

441 
BEGINAPP_MAX_CLUSTERS
, (
cId_t
 *)
BegöAµ_Clu°îLi°
,

442 
BEGINAPP_MAX_CLUSTERS
, (
cId_t
 *)
BegöAµ_Clu°îLi°
,

443 
FALSE
 );

446 
	}
}

463 
	$BegöAµ_MesßgeMSGCB
–
afIncomögMSGPackë_t
 *
pkt
 )

465  
pkt
->
˛u°îId
 )

467 
BEGINAPP_CLUSTERID
:

469 #i‡
	`deföed
–
LCD_SUPPORTED
 )

470 
	`HÆLcdWrôeS¸ìn
–(*)
pkt
->
cmd
.
D©a
, "rcvd" );

471 #ñi‡
	`deföed
–
WIN32
 )

472 
	`WPRINTSTR
–
pkt
->
cmd
.
D©a
 );

476 
	}
}

487 
	$BegöAµ_SídTheMesßge
( )

489 
a
=
BegöAµ_TønsID
%5;

490 
theMesßge
[5][30] = {"Hello World","iniil","asfweofj","9jfjf0","jowef98383"};

492 i‡–
	`AF_D©aReque°
–&
BegöAµ_D°Addr
, &
BegöAµ_ïDesc
,

493 
BEGINAPP_CLUSTERID
,

494 (
byã
)
	`oßl_°æí
–
theMesßge
[
a
] ) + 1,

495 (
byã
 *)&
theMesßge
[
a
],

496 &
BegöAµ_TønsID
,

497 
AF_DISCV_ROUTE
, 
AF_DEFAULT_RADIUS
 ) =
afSètus_SUCCESS
 )

505 
	}
}

	@Projects/zstack/Samples/BeginApp/Source/BeginApp.h

40 #i‚de‡
BEGINAPP_H


41 
	#BEGINAPP_H


	)

43 #ifde‡
__˝lu•lus


51 
	~"ZComDef.h
"

59 
	#BEGINAPP_ENDPOINT
 10

	)

61 
	#BEGINAPP_PROFID
 0x0F04

	)

62 
	#BEGINAPP_DEVICEID
 0x0001

	)

63 
	#BEGINAPP_DEVICE_VERSION
 0

	)

64 
	#BEGINAPP_FLAGS
 0

	)

66 
	#BEGINAPP_MAX_CLUSTERS
 1

	)

67 
	#BEGINAPP_CLUSTERID
 1

	)

70 
	#BEGINAPP_SEND_MSG_TIMEOUT
 5000

71 

	)

73 
	#BEGINAPP_SEND_MSG_EVT
 0x0001

	)

86 
BegöAµ_Inô
–
byã
 
èsk_id
 );

91 
UINT16
 
BegöAµ_Pro˚ssEvít
–
byã
 
èsk_id
, UINT16 
evíts
 );

96 #ifde‡
__˝lu•lus


	@Projects/zstack/Samples/BeginApp/Source/OSAL_BeginApp.c

45 
	~"ZComDef.h
"

46 
	~"hÆ_drivîs.h
"

47 
	~"OSAL.h
"

48 
	~"OSAL_Tasks.h
"

50 #i‡
deföed
 ( 
MT_TASK
 )

51 
	~"MT.h
"

52 
	~"MT_TASK.h
"

55 
	~"nwk.h
"

56 
	~"APS.h
"

57 
	~"ZDAµ.h
"

58 #i‡
deföed
 ( 
ZIGBEE_FREQ_AGILITY
 ) || deföed ( 
ZIGBEE_PANID_CONFLICT
 )

59 
	~"ZDNwkMgr.h
"

61 #i‡
deföed
 ( 
ZIGBEE_FRAGMENTATION
 )

62 
	~"≠s_‰ag.h
"

65 
	~"BegöAµ.h
"

72 c⁄° 
pTaskEvítH™dÀrFn
 
	gèsksAº
[] = {

73 
macEvítLo›
,

74 
nwk_evít_lo›
,

75 
HÆ_Pro˚ssEvít
,

76 #i‡
deföed
–
MT_TASK
 )

77 
MT_Pro˚ssEvít
,

79 
APS_evít_lo›
,

80 #i‡
deföed
 ( 
ZIGBEE_FRAGMENTATION
 )

81 
APSF_Pro˚ssEvít
,

83 
ZDAµ_evít_lo›
,

84 #i‡
deföed
 ( 
ZIGBEE_FREQ_AGILITY
 ) || deföed ( 
ZIGBEE_PANID_CONFLICT
 )

85 
ZDNwkMgr_evít_lo›
,

87 
BegöAµ_Pro˚ssEvít


90 c⁄° 
uöt8
 
	gèsksC¡
 = –
èsksAº
 ) / (ÅasksArr[0] );

91 
uöt16
 *
	gèsksEvíts
;

106 
	$oßlInôTasks
( )

108 
uöt8
 
èskID
 = 0;

110 
èsksEvíts
 = (
uöt16
 *)
	`oßl_mem_Æloc
––uöt16 ) * 
èsksC¡
);

111 
	`oßl_mem£t
–
èsksEvíts
, 0, (–
uöt16
 ) * 
èsksC¡
));

113 
	`macTaskInô
–
èskID
++ );

114 
	`nwk_öô
–
èskID
++ );

115 
	`HÆ_Inô
–
èskID
++ );

116 #i‡
	`deföed
–
MT_TASK
 )

117 
	`MT_TaskInô
–
èskID
++ );

119 
	`APS_Inô
–
èskID
++ );

120 #i‡
	`deföed
 ( 
ZIGBEE_FRAGMENTATION
 )

121 
	`APSF_Inô
–
èskID
++ );

123 
	`ZDAµ_Inô
–
èskID
++ );

124 #i‡
	`deföed
 ( 
ZIGBEE_FREQ_AGILITY
 ) || deföed ( 
ZIGBEE_PANID_CONFLICT
 )

125 
	`ZDNwkMgr_Inô
–
èskID
++ );

127 
	`BegöAµ_Inô
–
èskID
 );

128 
	}
}

	@Projects/zstack/Samples/GenericApp/Source/GenericApp.c

63 
	~"OSAL.h
"

64 
	~"AF.h
"

65 
	~"ZDAµ.h
"

66 
	~"ZDObje˘.h
"

67 
	~"ZDProfûe.h
"

69 
	~"GíîicAµ.h
"

70 
	~"DebugTø˚.h
"

72 #i‡!
deföed
–
WIN32
 )

73 
	~"OnBﬂrd.h
"

77 
	~"hÆ_lcd.h
"

78 
	~"hÆ_Àd.h
"

79 
	~"hÆ_key.h
"

80 
	~"hÆ_u¨t.h
"

99 c⁄° 
cId_t
 
	gGíîicAµ_Clu°îLi°
[
GENERICAPP_MAX_CLUSTERS
] =

101 
GENERICAPP_CLUSTERID


104 c⁄° 
Sim∂eDes¸ùti⁄F‹m©_t
 
	gGíîicAµ_Sim∂eDesc
 =

106 
GENERICAPP_ENDPOINT
,

107 
GENERICAPP_PROFID
,

108 
GENERICAPP_DEVICEID
,

109 
GENERICAPP_DEVICE_VERSION
,

110 
GENERICAPP_FLAGS
,

111 
GENERICAPP_MAX_CLUSTERS
,

112 (
cId_t
 *)
GíîicAµ_Clu°îLi°
,

113 
GENERICAPP_MAX_CLUSTERS
,

114 (
cId_t
 *)
GíîicAµ_Clu°îLi°


121 
ídPoötDesc_t
 
	gGíîicAµ_ïDesc
;

134 
byã
 
	gGíîicAµ_TaskID
;

137 
devSèãs_t
 
	gGíîicAµ_NwkSèã
;

140 
byã
 
	gGíîicAµ_TønsID
;

142 
afAddrTy≥_t
 
	gGíîicAµ_D°Addr
;

147 
GíîicAµ_Pro˚ssZDOMsgs
–
zdoIncomögMsg_t
 *
öMsg
 );

148 
GíîicAµ_H™dÀKeys
–
byã
 
shi·
, byã 
keys
 );

149 
GíîicAµ_MesßgeMSGCB
–
afIncomögMSGPackë_t
 *
pckt
 );

150 
GíîicAµ_SídTheMesßge
( );

174 
	$GíîicAµ_Inô
–
byã
 
èsk_id
 )

176 
GíîicAµ_TaskID
 = 
èsk_id
;

177 
GíîicAµ_NwkSèã
 = 
DEV_INIT
;

178 
GíîicAµ_TønsID
 = 0;

184 
GíîicAµ_D°Addr
.
addrMode
 = (
afAddrMode_t
)
AddrNŸPª£¡
;

185 
GíîicAµ_D°Addr
.
ídPoöt
 = 0;

186 
GíîicAµ_D°Addr
.
addr
.
sh‹tAddr
 = 0;

189 
GíîicAµ_ïDesc
.
ídPoöt
 = 
GENERICAPP_ENDPOINT
;

190 
GíîicAµ_ïDesc
.
èsk_id
 = &
GíîicAµ_TaskID
;

191 
GíîicAµ_ïDesc
.
sim∂eDesc


192 (
Sim∂eDes¸ùti⁄F‹m©_t
 *)&
GíîicAµ_Sim∂eDesc
;

193 
GíîicAµ_ïDesc
.
œãncyReq
 = 
noL©ícyReqs
;

196 
	`afRegi°î
–&
GíîicAµ_ïDesc
 );

199 
	`Regi°îF‹Keys
–
GíîicAµ_TaskID
 );

202 #i‡
	`deföed
 ( 
LCD_SUPPORTED
 )

203 
	`HÆLcdWrôeSåög
–"GíîicAµ", 
HAL_LCD_LINE_1
 );

206 
	`ZDO_Regi°îF‹ZDOMsg
–
GíîicAµ_TaskID
, 
End_Devi˚_Böd_r•
 );

207 
	`ZDO_Regi°îF‹ZDOMsg
–
GíîicAµ_TaskID
, 
M©ch_Desc_r•
 );

208 
	}
}

223 
UINT16
 
	$GíîicAµ_Pro˚ssEvít
–
byã
 
èsk_id
, 
UINT16
 
evíts
 )

225 
afIncomögMSGPackë_t
 *
MSGpkt
;

226 
afD©aC⁄fúm_t
 *
afD©aC⁄fúm
;

229 
byã
 
£¡EP
;

230 
ZSètus_t
 
£¡Sètus
;

231 
byã
 
£¡TønsID
;

232 ()
èsk_id
;

234 i‡–
evíts
 & 
SYS_EVENT_MSG
 )

236 
MSGpkt
 = (
afIncomögMSGPackë_t
 *)
	`oßl_msg_ª˚ive
–
GíîicAµ_TaskID
 );

237  
MSGpkt
 )

239  
MSGpkt
->
hdr
.
evít
 )

241 
ZDO_CB_MSG
:

242 
	`GíîicAµ_Pro˚ssZDOMsgs
–(
zdoIncomögMsg_t
 *)
MSGpkt
 );

245 
KEY_CHANGE
:

246 
	`GíîicAµ_H™dÀKeys
–((
keyCh™ge_t
 *)
MSGpkt
)->
°©e
, ((keyCh™ge_à*)MSGpkt)->
keys
 );

249 
AF_DATA_CONFIRM_CMD
:

253 
afD©aC⁄fúm
 = (
afD©aC⁄fúm_t
 *)
MSGpkt
;

254 
£¡EP
 = 
afD©aC⁄fúm
->
ídpoöt
;

255 
£¡Sètus
 = 
afD©aC⁄fúm
->
hdr
.
°©us
;

256 
£¡TønsID
 = 
afD©aC⁄fúm
->
å™sID
;

257 ()
£¡EP
;

258 ()
£¡TønsID
;

261 i‡–
£¡Sètus
 !
ZSuc˚ss
 )

267 
AF_INCOMING_MSG_CMD
:

268 
	`GíîicAµ_MesßgeMSGCB
–
MSGpkt
 );

271 
ZDO_STATE_CHANGE
:

272 
GíîicAµ_NwkSèã
 = (
devSèãs_t
)(
MSGpkt
->
hdr
.
°©us
);

273 i‡–(
GíîicAµ_NwkSèã
 =
DEV_ZB_COORD
)

274 || (
GíîicAµ_NwkSèã
 =
DEV_ROUTER
)

275 || (
GíîicAµ_NwkSèã
 =
DEV_END_DEVICE
) )

278 
	`oßl_°¨t_timîEx
–
GíîicAµ_TaskID
,

279 
GENERICAPP_SEND_MSG_EVT
,

280 
GENERICAPP_SEND_MSG_TIMEOUT
 );

289 
	`oßl_msg_dóŒoˇã
–(
uöt8
 *)
MSGpkt
 );

292 
MSGpkt
 = (
afIncomögMSGPackë_t
 *)
	`oßl_msg_ª˚ive
–
GíîicAµ_TaskID
 );

296  (
evíts
 ^ 
SYS_EVENT_MSG
);

301 i‡–
evíts
 & 
GENERICAPP_SEND_MSG_EVT
 )

304 
	`GíîicAµ_SídTheMesßge
();

307 
	`oßl_°¨t_timîEx
–
GíîicAµ_TaskID
,

308 
GENERICAPP_SEND_MSG_EVT
,

309 
GENERICAPP_SEND_MSG_TIMEOUT
 );

312  (
evíts
 ^ 
GENERICAPP_SEND_MSG_EVT
);

317 
	}
}

332 
	$GíîicAµ_Pro˚ssZDOMsgs
–
zdoIncomögMsg_t
 *
öMsg
 )

334  
öMsg
->
˛u°îID
 )

336 
End_Devi˚_Böd_r•
:

337 i‡–
	`ZDO_P¨£BödR•
–
öMsg
 ) =
ZSuc˚ss
 )

340 
	`HÆLedSë
–
HAL_LED_4
, 
HAL_LED_MODE_ON
 );

342 #i‡
	`deföed
(
BLINK_LEDS
)

346 
	`HÆLedSë
 ( 
HAL_LED_4
, 
HAL_LED_MODE_FLASH
 );

351 
M©ch_Desc_r•
:

353 
ZDO_A˘iveEndpoötR•_t
 *
pR•
 = 
	`ZDO_P¨£EPLi°R•
–
öMsg
 );

354 i‡–
pR•
 )

356 i‡–
pR•
->
°©us
 =
ZSuc˚ss
 &&ÖR•->
˙t
 )

358 
GíîicAµ_D°Addr
.
addrMode
 = (
afAddrMode_t
)
Addr16Bô
;

359 
GíîicAµ_D°Addr
.
addr
.
sh‹tAddr
 = 
pR•
->
nwkAddr
;

361 
GíîicAµ_D°Addr
.
ídPoöt
 = 
pR•
->
ïLi°
[0];

364 
	`HÆLedSë
–
HAL_LED_4
, 
HAL_LED_MODE_ON
 );

366 
	`oßl_mem_‰ì
–
pR•
 );

371 
	}
}

387 
	$GíîicAµ_H™dÀKeys
–
byã
 
shi·
, byã 
keys
 )

389 
zAddrTy≥_t
 
d°Addr
;

392 i‡–
shi·
 )

394 i‡–
keys
 & 
HAL_KEY_SW_1
 )

397 i‡–
keys
 & 
HAL_KEY_SW_2
 )

400 i‡–
keys
 & 
HAL_KEY_SW_3
 )

403 i‡–
keys
 & 
HAL_KEY_SW_4
 )

409 i‡–
keys
 & 
HAL_KEY_SW_1
 )

413 i‡–
keys
 & 
HAL_KEY_SW_2
 )

415 
	`HÆLedSë
 ( 
HAL_LED_4
, 
HAL_LED_MODE_OFF
 );

418 
d°Addr
.
addrMode
 = 
Addr16Bô
;

419 
d°Addr
.
addr
.
sh‹tAddr
 = 0x0000;

420 
	`ZDP_EndDevi˚BödReq
–&
d°Addr
, 
	`NLME_GëSh‹tAddr
(),

421 
GíîicAµ_ïDesc
.
ídPoöt
,

422 
GENERICAPP_PROFID
,

423 
GENERICAPP_MAX_CLUSTERS
, (
cId_t
 *)
GíîicAµ_Clu°îLi°
,

424 
GENERICAPP_MAX_CLUSTERS
, (
cId_t
 *)
GíîicAµ_Clu°îLi°
,

425 
FALSE
 );

428 i‡–
keys
 & 
HAL_KEY_SW_3
 )

432 i‡–
keys
 & 
HAL_KEY_SW_4
 )

434 
	`HÆLedSë
 ( 
HAL_LED_4
, 
HAL_LED_MODE_OFF
 );

436 
d°Addr
.
addrMode
 = 
AddrBrﬂdˇ°
;

437 
d°Addr
.
addr
.
sh‹tAddr
 = 
NWK_BROADCAST_SHORTADDR
;

438 
	`ZDP_M©chDescReq
–&
d°Addr
, 
NWK_BROADCAST_SHORTADDR
,

439 
GENERICAPP_PROFID
,

440 
GENERICAPP_MAX_CLUSTERS
, (
cId_t
 *)
GíîicAµ_Clu°îLi°
,

441 
GENERICAPP_MAX_CLUSTERS
, (
cId_t
 *)
GíîicAµ_Clu°îLi°
,

442 
FALSE
 );

445 
	}
}

462 
	$GíîicAµ_MesßgeMSGCB
–
afIncomögMSGPackë_t
 *
pkt
 )

464  
pkt
->
˛u°îId
 )

466 
GENERICAPP_CLUSTERID
:

468 #i‡
	`deföed
–
LCD_SUPPORTED
 )

469 
	`HÆLcdWrôeS¸ìn
–(*)
pkt
->
cmd
.
D©a
, "rcvd" );

470 #ñi‡
	`deföed
–
WIN32
 )

471 
	`WPRINTSTR
–
pkt
->
cmd
.
D©a
 );

475 
	}
}

486 
	$GíîicAµ_SídTheMesßge
( )

488 
theMesßgeD©a
[] = "Hello World";

490 i‡–
	`AF_D©aReque°
–&
GíîicAµ_D°Addr
, &
GíîicAµ_ïDesc
,

491 
GENERICAPP_CLUSTERID
,

492 (
byã
)
	`oßl_°æí
–
theMesßgeD©a
 ) + 1,

493 (
byã
 *)&
theMesßgeD©a
,

494 &
GíîicAµ_TønsID
,

495 
AF_DISCV_ROUTE
, 
AF_DEFAULT_RADIUS
 ) =
afSètus_SUCCESS
 )

503 
	}
}

	@Projects/zstack/Samples/GenericApp/Source/GenericApp.h

40 #i‚de‡
GENERICAPP_H


41 
	#GENERICAPP_H


	)

43 #ifde‡
__˝lu•lus


51 
	~"ZComDef.h
"

59 
	#GENERICAPP_ENDPOINT
 10

	)

61 
	#GENERICAPP_PROFID
 0x0F04

	)

62 
	#GENERICAPP_DEVICEID
 0x0001

	)

63 
	#GENERICAPP_DEVICE_VERSION
 0

	)

64 
	#GENERICAPP_FLAGS
 0

	)

66 
	#GENERICAPP_MAX_CLUSTERS
 1

	)

67 
	#GENERICAPP_CLUSTERID
 1

	)

70 
	#GENERICAPP_SEND_MSG_TIMEOUT
 5000

71 

	)

73 
	#GENERICAPP_SEND_MSG_EVT
 0x0001

	)

86 
GíîicAµ_Inô
–
byã
 
èsk_id
 );

91 
UINT16
 
GíîicAµ_Pro˚ssEvít
–
byã
 
èsk_id
, UINT16 
evíts
 );

96 #ifde‡
__˝lu•lus


	@Projects/zstack/Samples/GenericApp/Source/OSAL_GenericApp.c

45 
	~"ZComDef.h
"

46 
	~"hÆ_drivîs.h
"

47 
	~"OSAL.h
"

48 
	~"OSAL_Tasks.h
"

50 #i‡
deföed
 ( 
MT_TASK
 )

51 
	~"MT.h
"

52 
	~"MT_TASK.h
"

55 
	~"nwk.h
"

56 
	~"APS.h
"

57 
	~"ZDAµ.h
"

58 #i‡
deföed
 ( 
ZIGBEE_FREQ_AGILITY
 ) || deföed ( 
ZIGBEE_PANID_CONFLICT
 )

59 
	~"ZDNwkMgr.h
"

61 #i‡
deföed
 ( 
ZIGBEE_FRAGMENTATION
 )

62 
	~"≠s_‰ag.h
"

65 
	~"GíîicAµ.h
"

72 c⁄° 
pTaskEvítH™dÀrFn
 
	gèsksAº
[] = {

73 
macEvítLo›
,

74 
nwk_evít_lo›
,

75 
HÆ_Pro˚ssEvít
,

76 #i‡
deföed
–
MT_TASK
 )

77 
MT_Pro˚ssEvít
,

79 
APS_evít_lo›
,

80 #i‡
deföed
 ( 
ZIGBEE_FRAGMENTATION
 )

81 
APSF_Pro˚ssEvít
,

83 
ZDAµ_evít_lo›
,

84 #i‡
deföed
 ( 
ZIGBEE_FREQ_AGILITY
 ) || deföed ( 
ZIGBEE_PANID_CONFLICT
 )

85 
ZDNwkMgr_evít_lo›
,

87 
GíîicAµ_Pro˚ssEvít


90 c⁄° 
uöt8
 
	gèsksC¡
 = –
èsksAº
 ) / (ÅasksArr[0] );

91 
uöt16
 *
	gèsksEvíts
;

106 
	$oßlInôTasks
( )

108 
uöt8
 
èskID
 = 0;

110 
èsksEvíts
 = (
uöt16
 *)
	`oßl_mem_Æloc
––uöt16 ) * 
èsksC¡
);

111 
	`oßl_mem£t
–
èsksEvíts
, 0, (–
uöt16
 ) * 
èsksC¡
));

113 
	`macTaskInô
–
èskID
++ );

114 
	`nwk_öô
–
èskID
++ );

115 
	`HÆ_Inô
–
èskID
++ );

116 #i‡
	`deföed
–
MT_TASK
 )

117 
	`MT_TaskInô
–
èskID
++ );

119 
	`APS_Inô
–
èskID
++ );

120 #i‡
	`deföed
 ( 
ZIGBEE_FRAGMENTATION
 )

121 
	`APSF_Inô
–
èskID
++ );

123 
	`ZDAµ_Inô
–
èskID
++ );

124 #i‡
	`deföed
 ( 
ZIGBEE_FREQ_AGILITY
 ) || deföed ( 
ZIGBEE_PANID_CONFLICT
 )

125 
	`ZDNwkMgr_Inô
–
èskID
++ );

127 
	`GíîicAµ_Inô
–
èskID
 );

128 
	}
}

	@Projects/zstack/Samples/SampleApp/CC2530DB/Source/SampleAppHw.c

43 
	~"ZComDef.h
"

44 
	~"hÆ_mcu.h
"

45 
	~"hÆ_defs.h
"

47 
	~"Sam∂eAµHw.h
"

57 
	#JUMPERIN_BIT
 
	`BV
(2)

58 
	#JUMPERIN_SEL
 
P0SEL


	)

59 
	#JUMPERIN_DIR
 
P0DIR


	)

60 
	#JUMPERIN
 
P0


	)

62 
	#JUMPEROUT_BIT
 
	`BV
(3)

63 
	#JUMPEROUT_SEL
 
P0SEL


	)

64 
	#JUMPEROUT_DIR
 
P0DIR


	)

65 
	#JUMPEROUT
 
P0


	)

76 
uöt8
 
	$ªadCo‹dö©‹Jum≥r
( )

79 
uöt8
 
jum≥ªd
 = 
TRUE
;

80 
uöt8
 
ªsu…
;

81 
uöt8
 
x
,
y
;

83 
JUMPERIN_SEL
 &~(
JUMPERIN_BIT
);

84 
JUMPEROUT_SEL
 &~(
JUMPEROUT_BIT
);

85 
JUMPERIN_DIR
 &~(
JUMPERIN_BIT
);

86 
JUMPEROUT_DIR
 |
JUMPEROUT_BIT
;

88 
jum≥ªd
 = 
TRUE
;

90  
x
 = 0; x < 8; x++ )

92 i‡–
x
 & 0x01 )

94 
JUMPEROUT
 |
JUMPEROUT_BIT
;

95  
y
 = 0; y < 8; y++ );

96 
ªsu…
 = 
JUMPERIN
 & 
JUMPERIN_BIT
;

97 i‡–
ªsu…
 !
JUMPERIN_BIT
 )

98 
jum≥ªd
 = 
FALSE
;

102 
JUMPEROUT
 &~(
JUMPEROUT_BIT
);

103  
y
 = 0; y < 8; y++ );

104 
ªsu…
 = 
JUMPERIN
 & 
JUMPERIN_BIT
;

105 i‡–
ªsu…
 != 0x00 )

106 
jum≥ªd
 = 
FALSE
;

110  ( 
jum≥ªd
 );

112 
	}
}

	@Projects/zstack/Samples/SampleApp/Source/OSAL_SampleApp.c

45 
	~"ZComDef.h
"

46 
	~"hÆ_drivîs.h
"

47 
	~"OSAL.h
"

48 
	~"OSAL_Tasks.h
"

50 #i‡
deföed
 ( 
MT_TASK
 )

51 
	~"MT.h
"

52 
	~"MT_TASK.h
"

55 
	~"nwk.h
"

56 
	~"APS.h
"

57 
	~"ZDAµ.h
"

58 #i‡
deföed
 ( 
ZIGBEE_FREQ_AGILITY
 ) || deföed ( 
ZIGBEE_PANID_CONFLICT
 )

59 
	~"ZDNwkMgr.h
"

61 #i‡
deföed
 ( 
ZIGBEE_FRAGMENTATION
 )

62 
	~"≠s_‰ag.h
"

65 
	~"Sam∂eAµ.h
"

72 c⁄° 
pTaskEvítH™dÀrFn
 
	gèsksAº
[] = {

73 
macEvítLo›
,

74 
nwk_evít_lo›
,

75 
HÆ_Pro˚ssEvít
,

76 #i‡
deföed
–
MT_TASK
 )

77 
MT_Pro˚ssEvít
,

79 
APS_evít_lo›
,

80 #i‡
deföed
 ( 
ZIGBEE_FRAGMENTATION
 )

81 
APSF_Pro˚ssEvít
,

83 
ZDAµ_evít_lo›
,

84 #i‡
deföed
 ( 
ZIGBEE_FREQ_AGILITY
 ) || deföed ( 
ZIGBEE_PANID_CONFLICT
 )

85 
ZDNwkMgr_evít_lo›
,

87 
Sam∂eAµ_Pro˚ssEvít


90 c⁄° 
uöt8
 
	gèsksC¡
 = –
èsksAº
 ) / (ÅasksArr[0] );

91 
uöt16
 *
	gèsksEvíts
;

106 
	$oßlInôTasks
( )

108 
uöt8
 
èskID
 = 0;

110 
èsksEvíts
 = (
uöt16
 *)
	`oßl_mem_Æloc
––uöt16 ) * 
èsksC¡
);

111 
	`oßl_mem£t
–
èsksEvíts
, 0, (–
uöt16
 ) * 
èsksC¡
));

113 
	`macTaskInô
–
èskID
++ );

114 
	`nwk_öô
–
èskID
++ );

115 
	`HÆ_Inô
–
èskID
++ );

116 #i‡
	`deföed
–
MT_TASK
 )

117 
	`MT_TaskInô
–
èskID
++ );

119 
	`APS_Inô
–
èskID
++ );

120 #i‡
	`deföed
 ( 
ZIGBEE_FRAGMENTATION
 )

121 
	`APSF_Inô
–
èskID
++ );

123 
	`ZDAµ_Inô
–
èskID
++ );

124 #i‡
	`deföed
 ( 
ZIGBEE_FREQ_AGILITY
 ) || deföed ( 
ZIGBEE_PANID_CONFLICT
 )

125 
	`ZDNwkMgr_Inô
–
èskID
++ );

127 
	`Sam∂eAµ_Inô
–
èskID
 );

128 
	}
}

	@Projects/zstack/Samples/SampleApp/Source/SampleApp.c

59 
	~"OSAL.h
"

60 
	~"ZGlobÆs.h
"

61 
	~"AF.h
"

62 
	~"≠s_groups.h
"

63 
	~"ZDAµ.h
"

65 
	~"Sam∂eAµ.h
"

66 
	~"Sam∂eAµHw.h
"

68 
	~"OnBﬂrd.h
"

71 
	~"hÆ_lcd.h
"

72 
	~"hÆ_Àd.h
"

73 
	~"hÆ_key.h
"

92 c⁄° 
cId_t
 
	gSam∂eAµ_Clu°îLi°
[
SAMPLEAPP_MAX_CLUSTERS
] =

94 
SAMPLEAPP_PERIODIC_CLUSTERID
,

95 
SAMPLEAPP_FLASH_CLUSTERID


98 c⁄° 
Sim∂eDes¸ùti⁄F‹m©_t
 
	gSam∂eAµ_Sim∂eDesc
 =

100 
SAMPLEAPP_ENDPOINT
,

101 
SAMPLEAPP_PROFID
,

102 
SAMPLEAPP_DEVICEID
,

103 
SAMPLEAPP_DEVICE_VERSION
,

104 
SAMPLEAPP_FLAGS
,

105 
SAMPLEAPP_MAX_CLUSTERS
,

106 (
cId_t
 *)
Sam∂eAµ_Clu°îLi°
,

107 
SAMPLEAPP_MAX_CLUSTERS
,

108 (
cId_t
 *)
Sam∂eAµ_Clu°îLi°


115 
ídPoötDesc_t
 
	gSam∂eAµ_ïDesc
;

128 
uöt8
 
	gSam∂eAµ_TaskID
;

131 
devSèãs_t
 
	gSam∂eAµ_NwkSèã
;

133 
uöt8
 
	gSam∂eAµ_TønsID
;

135 
afAddrTy≥_t
 
	gSam∂eAµ_Pîiodic_D°Addr
;

136 
afAddrTy≥_t
 
	gSam∂eAµ_Fœsh_D°Addr
;

138 
≠s_Group_t
 
	gSam∂eAµ_Group
;

140 
uöt8
 
	gSam∂eAµPîiodicCou¡î
 = 0;

141 
uöt8
 
	gSam∂eAµFœshCou¡î
 = 0;

146 
Sam∂eAµ_H™dÀKeys
–
uöt8
 
shi·
, uöt8 
keys
 );

147 
Sam∂eAµ_MesßgeMSGCB
–
afIncomögMSGPackë_t
 *
pckt
 );

148 
Sam∂eAµ_SídPîiodicMesßge
( );

149 
Sam∂eAµ_SídFœshMesßge
–
uöt16
 
ÊashTime
 );

173 
	$Sam∂eAµ_Inô
–
uöt8
 
èsk_id
 )

175 
Sam∂eAµ_TaskID
 = 
èsk_id
;

176 
Sam∂eAµ_NwkSèã
 = 
DEV_INIT
;

177 
Sam∂eAµ_TønsID
 = 0;

183 #i‡
	`deföed
 ( 
BUILD_ALL_DEVICES
 )

188 i‡–
	`ªadCo‹dö©‹Jum≥r
() )

189 
zgDevi˚LogiˇlTy≥
 = 
ZG_DEVICETYPE_COORDINATOR
;

191 
zgDevi˚LogiˇlTy≥
 = 
ZG_DEVICETYPE_ROUTER
;

194 #i‡
	`deföed
 ( 
HOLD_AUTO_START
 )

198 
	`ZDOInôDevi˚
(0);

203 
Sam∂eAµ_Pîiodic_D°Addr
.
addrMode
 = (
afAddrMode_t
)
AddrBrﬂdˇ°
;

204 
Sam∂eAµ_Pîiodic_D°Addr
.
ídPoöt
 = 
SAMPLEAPP_ENDPOINT
;

205 
Sam∂eAµ_Pîiodic_D°Addr
.
addr
.
sh‹tAddr
 = 0xFFFF;

208 
Sam∂eAµ_Fœsh_D°Addr
.
addrMode
 = (
afAddrMode_t
)
afAddrGroup
;

209 
Sam∂eAµ_Fœsh_D°Addr
.
ídPoöt
 = 
SAMPLEAPP_ENDPOINT
;

210 
Sam∂eAµ_Fœsh_D°Addr
.
addr
.
sh‹tAddr
 = 
SAMPLEAPP_FLASH_GROUP
;

213 
Sam∂eAµ_ïDesc
.
ídPoöt
 = 
SAMPLEAPP_ENDPOINT
;

214 
Sam∂eAµ_ïDesc
.
èsk_id
 = &
Sam∂eAµ_TaskID
;

215 
Sam∂eAµ_ïDesc
.
sim∂eDesc


216 (
Sim∂eDes¸ùti⁄F‹m©_t
 *)&
Sam∂eAµ_Sim∂eDesc
;

217 
Sam∂eAµ_ïDesc
.
œãncyReq
 = 
noL©ícyReqs
;

220 
	`afRegi°î
–&
Sam∂eAµ_ïDesc
 );

223 
	`Regi°îF‹Keys
–
Sam∂eAµ_TaskID
 );

226 
Sam∂eAµ_Group
.
ID
 = 0x0001;

227 
	`oßl_mem˝y
–
Sam∂eAµ_Group
.
«me
, "Group 1", 7 );

228 
	`≠s_AddGroup
–
SAMPLEAPP_ENDPOINT
, &
Sam∂eAµ_Group
 );

230 #i‡
	`deföed
 ( 
LCD_SUPPORTED
 )

231 
	`HÆLcdWrôeSåög
–"Sam∂eAµ", 
HAL_LCD_LINE_1
 );

233 
	}
}

248 
uöt16
 
	$Sam∂eAµ_Pro˚ssEvít
–
uöt8
 
èsk_id
, 
uöt16
 
evíts
 )

250 
afIncomögMSGPackë_t
 *
MSGpkt
;

251 ()
èsk_id
;

253 i‡–
evíts
 & 
SYS_EVENT_MSG
 )

255 
MSGpkt
 = (
afIncomögMSGPackë_t
 *)
	`oßl_msg_ª˚ive
–
Sam∂eAµ_TaskID
 );

256  
MSGpkt
 )

258  
MSGpkt
->
hdr
.
evít
 )

261 
KEY_CHANGE
:

262 
	`Sam∂eAµ_H™dÀKeys
–((
keyCh™ge_t
 *)
MSGpkt
)->
°©e
, ((keyCh™ge_à*)MSGpkt)->
keys
 );

266 
AF_INCOMING_MSG_CMD
:

267 
	`Sam∂eAµ_MesßgeMSGCB
–
MSGpkt
 );

271 
ZDO_STATE_CHANGE
:

272 
Sam∂eAµ_NwkSèã
 = (
devSèãs_t
)(
MSGpkt
->
hdr
.
°©us
);

273 i‡–(
Sam∂eAµ_NwkSèã
 =
DEV_ZB_COORD
)

274 || (
Sam∂eAµ_NwkSèã
 =
DEV_ROUTER
)

275 || (
Sam∂eAµ_NwkSèã
 =
DEV_END_DEVICE
) )

277 
	`HÆLedSë
–
HAL_LED_1
,
HAL_LED_MODE_ON
 );

279 
	`oßl_°¨t_timîEx
–
Sam∂eAµ_TaskID
,

280 
SAMPLEAPP_SEND_PERIODIC_MSG_EVT
,

281 
SAMPLEAPP_SEND_PERIODIC_MSG_TIMEOUT
 );

294 
	`oßl_msg_dóŒoˇã
–(
uöt8
 *)
MSGpkt
 );

297 
MSGpkt
 = (
afIncomögMSGPackë_t
 *)
	`oßl_msg_ª˚ive
–
Sam∂eAµ_TaskID
 );

301  (
evíts
 ^ 
SYS_EVENT_MSG
);

306 i‡–
evíts
 & 
SAMPLEAPP_SEND_PERIODIC_MSG_EVT
 )

309 
	`Sam∂eAµ_SídPîiodicMesßge
();

312 
	`oßl_°¨t_timîEx
–
Sam∂eAµ_TaskID
, 
SAMPLEAPP_SEND_PERIODIC_MSG_EVT
,

313 (
SAMPLEAPP_SEND_PERIODIC_MSG_TIMEOUT
 + (
	`oßl_ønd
() & 0x00FF)) );

316  (
evíts
 ^ 
SAMPLEAPP_SEND_PERIODIC_MSG_EVT
);

321 
	}
}

338 
	$Sam∂eAµ_H™dÀKeys
–
uöt8
 
shi·
, uöt8 
keys
 )

340 ()
shi·
;

342 i‡–
keys
 & 
HAL_KEY_SW_1
 )

348 
	`Sam∂eAµ_SídFœshMesßge
–
SAMPLEAPP_FLASH_DURATION
 );

351 i‡–
keys
 & 
HAL_KEY_SW_2
 )

358 
≠s_Group_t
 *
gΩ
;

359 
gΩ
 = 
	`≠s_FödGroup
–
SAMPLEAPP_ENDPOINT
, 
SAMPLEAPP_FLASH_GROUP
 );

360 i‡–
gΩ
 )

363 
	`≠s_RemoveGroup
–
SAMPLEAPP_ENDPOINT
, 
SAMPLEAPP_FLASH_GROUP
 );

368 
	`≠s_AddGroup
–
SAMPLEAPP_ENDPOINT
, &
Sam∂eAµ_Group
 );

371 
	}
}

388 
	$Sam∂eAµ_MesßgeMSGCB
–
afIncomögMSGPackë_t
 *
pkt
 )

390 
uöt16
 
ÊashTime
;

392  
pkt
->
˛u°îId
 )

394 
SAMPLEAPP_PERIODIC_CLUSTERID
:

397 
SAMPLEAPP_FLASH_CLUSTERID
:

398 
ÊashTime
 = 
	`BUILD_UINT16
(
pkt
->
cmd
.
D©a
[1],Ökt->cmd.Data[2] );

399 
	`HÆLedBlök
–
HAL_LED_1
, 4, 50, (
ÊashTime
 / 4) );

402 
	}
}

413 
	$Sam∂eAµ_SídPîiodicMesßge
( )

415 i‡–
	`AF_D©aReque°
–&
Sam∂eAµ_Pîiodic_D°Addr
, &
Sam∂eAµ_ïDesc
,

416 
SAMPLEAPP_PERIODIC_CLUSTERID
,

418 (
uöt8
*)&
Sam∂eAµPîiodicCou¡î
,

419 &
Sam∂eAµ_TønsID
,

420 
AF_DISCV_ROUTE
,

421 
AF_DEFAULT_RADIUS
 ) =
afSètus_SUCCESS
 )

428 
	}
}

439 
	$Sam∂eAµ_SídFœshMesßge
–
uöt16
 
ÊashTime
 )

441 
uöt8
 
buf„r
[3];

442 
buf„r
[0] = (
uöt8
)(
Sam∂eAµFœshCou¡î
++);

443 
buf„r
[1] = 
	`LO_UINT16
–
ÊashTime
 );

444 
buf„r
[2] = 
	`HI_UINT16
–
ÊashTime
 );

446 i‡–
	`AF_D©aReque°
–&
Sam∂eAµ_Fœsh_D°Addr
, &
Sam∂eAµ_ïDesc
,

447 
SAMPLEAPP_FLASH_CLUSTERID
,

449 
buf„r
,

450 &
Sam∂eAµ_TønsID
,

451 
AF_DISCV_ROUTE
,

452 
AF_DEFAULT_RADIUS
 ) =
afSètus_SUCCESS
 )

459 
	}
}

	@Projects/zstack/Samples/SampleApp/Source/SampleApp.h

40 #i‚de‡
SAMPLEAPP_H


41 
	#SAMPLEAPP_H


	)

43 #ifde‡
__˝lu•lus


51 
	~"ZComDef.h
"

59 
	#SAMPLEAPP_ENDPOINT
 20

	)

61 
	#SAMPLEAPP_PROFID
 0x0F08

	)

62 
	#SAMPLEAPP_DEVICEID
 0x0001

	)

63 
	#SAMPLEAPP_DEVICE_VERSION
 0

	)

64 
	#SAMPLEAPP_FLAGS
 0

	)

66 
	#SAMPLEAPP_MAX_CLUSTERS
 2

	)

67 
	#SAMPLEAPP_PERIODIC_CLUSTERID
 1

	)

68 
	#SAMPLEAPP_FLASH_CLUSTERID
 2

	)

71 
	#SAMPLEAPP_SEND_PERIODIC_MSG_TIMEOUT
 5000

72 

	)

74 
	#SAMPLEAPP_SEND_PERIODIC_MSG_EVT
 0x0001

	)

77 
	#SAMPLEAPP_FLASH_GROUP
 0x0001

	)

80 
	#SAMPLEAPP_FLASH_DURATION
 1000

	)

93 
Sam∂eAµ_Inô
–
uöt8
 
èsk_id
 );

98 
UINT16
 
Sam∂eAµ_Pro˚ssEvít
–
uöt8
 
èsk_id
, 
uöt16
 
evíts
 );

103 #ifde‡
__˝lu•lus


	@Projects/zstack/Samples/SampleApp/Source/SampleAppHw.h

40 #i‚de‡
SAMPLEAPPHW_H


41 
	#SAMPLEAPPHW_H


	)

43 #ifde‡
__˝lu•lus


67 
uöt8
 
ªadCo‹dö©‹Jum≥r
( );

72 #ifde‡
__˝lu•lus


	@Projects/zstack/Samples/SimpleApp/Source/SimpleApp.h

40 #i‚de‡
SIMPLE_APP_H


41 
	#SIMPLE_APP_H


	)

43 
	#MY_PROFILE_ID
 0x0F10

	)

45 
	#MY_ENDPOINT_ID
 0x02

	)

48 
	#DEV_ID_SWITCH
 1

	)

49 
	#DEV_ID_CONTROLLER
 2

	)

50 
	#DEV_ID_SENSOR
 3

	)

51 
	#DEV_ID_COLLECTOR
 4

	)

53 
	#DEVICE_VERSION_SWITCH
 1

	)

54 
	#DEVICE_VERSION_CONTROLLER
 1

	)

55 
	#DEVICE_VERSION_SENSOR
 1

	)

56 
	#DEVICE_VERSION_COLLECTOR
 1

	)

59 
	#TOGGLE_LIGHT_CMD_ID
 1

	)

60 
	#SENSOR_REPORT_CMD_ID
 2

	)

	@Projects/zstack/Samples/SimpleApp/Source/SimpleCollector.c

45 
	~"ZComDef.h
"

46 
	~"OSAL.h
"

47 
	~"ßpi.h
"

48 
	~"hÆ_key.h
"

49 
	~"hÆ_Àd.h
"

50 
	~"DebugTø˚.h
"

51 
	~"Sim∂eAµ.h
"

58 
	#APP_INIT
 0

	)

59 
	#APP_START
 1

	)

62 
	#MY_START_EVT
 0x0001

	)

65 
	#TEMP_REPORT
 0x01

	)

66 
	#BATTERY_REPORT
 0x02

	)

75 
uöt8
 
	gmyAµSèã
 = 
APP_INIT
;

76 
uöt8
 
	gmySèπRëryDñay
 = 10;

83 
	#NUM_OUT_CMD_COLLECTOR
 0

	)

84 
	#NUM_IN_CMD_COLLECTOR
 1

	)

87 c⁄° 
cId_t
 
	gzb_InCmdLi°
[
NUM_IN_CMD_COLLECTOR
] =

89 
SENSOR_REPORT_CMD_ID


93 c⁄° 
Sim∂eDes¸ùti⁄F‹m©_t
 
	gzb_Sim∂eDesc
 =

95 
MY_ENDPOINT_ID
,

96 
MY_PROFILE_ID
,

97 
DEV_ID_COLLECTOR
,

98 
DEVICE_VERSION_COLLECTOR
,

100 
NUM_IN_CMD_COLLECTOR
,

101 (
cId_t
 *Ë
zb_InCmdLi°
,

102 
NUM_OUT_CMD_COLLECTOR
,

103 (
cId_t
 *Ë
NULL


116 
	$zb_H™dÀOßlEvít
–
uöt16
 
evít
 )

119 
	}
}

134 
	$zb_H™dÀKeys
–
uöt8
 
shi·
, uöt8 
keys
 )

136 
uöt8
 
°¨tO±i⁄s
;

137 
uöt8
 
logiˇlTy≥
;

140 i‡–
shi·
 )

142 i‡–
keys
 & 
HAL_KEY_SW_1
 )

145 i‡–
keys
 & 
HAL_KEY_SW_2
 )

148 i‡–
keys
 & 
HAL_KEY_SW_3
 )

151 i‡–
keys
 & 
HAL_KEY_SW_4
 )

157 i‡–
keys
 & 
HAL_KEY_SW_1
 )

159 i‡–
myAµSèã
 =
APP_INIT
 )

164 
	`zb_RódC⁄figuøti⁄
–
ZCD_NV_LOGICAL_TYPE
, (
uöt8
), &
logiˇlTy≥
 );

165 i‡–
logiˇlTy≥
 !
ZG_DEVICETYPE_ENDDEVICE
 )

167 
logiˇlTy≥
 = 
ZG_DEVICETYPE_COORDINATOR
;

168 
	`zb_WrôeC⁄figuøti⁄
(
ZCD_NV_LOGICAL_TYPE
, (
uöt8
), &
logiˇlTy≥
);

175 
	`zb_RódC⁄figuøti⁄
–
ZCD_NV_STARTUP_OPTION
, (
uöt8
), &
°¨tO±i⁄s
 );

176 
°¨tO±i⁄s
 = 
ZCD_STARTOPT_AUTO_START
;

177 
	`zb_WrôeC⁄figuøti⁄
–
ZCD_NV_STARTUP_OPTION
, (
uöt8
), &
°¨tO±i⁄s
 );

178 
	`zb_Sy°emRe£t
();

184 
	`zb_AŒowBöd
( 0xFF );

185 
	`HÆLedSë
–
HAL_LED_1
, 
HAL_LED_MODE_ON
 );

188 i‡–
keys
 & 
HAL_KEY_SW_2
 )

190 i‡–
myAµSèã
 =
APP_INIT
 )

195 
	`zb_RódC⁄figuøti⁄
–
ZCD_NV_LOGICAL_TYPE
, (
uöt8
), &
logiˇlTy≥
 );

196 i‡–
logiˇlTy≥
 !
ZG_DEVICETYPE_ENDDEVICE
 )

198 
logiˇlTy≥
 = 
ZG_DEVICETYPE_ROUTER
;

199 
	`zb_WrôeC⁄figuøti⁄
(
ZCD_NV_LOGICAL_TYPE
, (
uöt8
), &
logiˇlTy≥
);

202 
	`zb_RódC⁄figuøti⁄
–
ZCD_NV_STARTUP_OPTION
, (
uöt8
), &
°¨tO±i⁄s
 );

203 
°¨tO±i⁄s
 = 
ZCD_STARTOPT_AUTO_START
;

204 
	`zb_WrôeC⁄figuøti⁄
–
ZCD_NV_STARTUP_OPTION
, (
uöt8
), &
°¨tO±i⁄s
 );

205 
	`zb_Sy°emRe£t
();

210 
	`zb_AŒowBöd
( 0x00 );

211 
	`HÆLedSë
–
HAL_LED_1
, 
HAL_LED_MODE_OFF
 );

214 i‡–
keys
 & 
HAL_KEY_SW_3
 )

217 i‡–
keys
 & 
HAL_KEY_SW_4
 )

221 
	}
}

234 
	$zb_SèπC⁄fúm
–
uöt8
 
°©us
 )

238 i‡–
°©us
 =
ZB_SUCCESS
 )

240 
myAµSèã
 = 
APP_START
;

245 
	`oßl_°¨t_timîEx
–
ßpi_TaskID
, 
MY_START_EVT
, 
mySèπRëryDñay
 );

247 
	}
}

259 
	$zb_SídD©aC⁄fúm
–
uöt8
 
h™dÀ
, uöt8 
°©us
 )

261 
	}
}

273 
	$zb_BödC⁄fúm
–
uöt16
 
comm™dId
, 
uöt8
 
°©us
 )

275 
	}
}

285 
	$zb_AŒowBödC⁄fúm
–
uöt16
 
sour˚
 )

287 
	}
}

300 
	$zb_FödDevi˚C⁄fúm
–
uöt8
 
£¨chTy≥
, uöt8 *
£¨chKey
, uöt8 *
ªsu…
 )

302 
	}
}

317 
CONST
 
uöt8
 
	g°rDevi˚
[] = "Device:0x";

318 
CONST
 
uöt8
 
	g°rTemp
[] = "Temp: ";

319 
CONST
 
uöt8
 
	g°rB©ãry
[] = "Battery: ";

320 
	$zb_Re˚iveD©aIndiˇti⁄
–
uöt16
 
sour˚
, uöt16 
comm™d
, uöt16 
Àn
, 
uöt8
 *
pD©a
 )

322 
uöt8
 
buf
[32];

323 
uöt8
 *
pBuf
;

324 
uöt8
 
tmpLí
;

325 
uöt8
 
£ns‹Ródög
;

327 i‡(
comm™d
 =
SENSOR_REPORT_CMD_ID
)

330 
£ns‹Ródög
 = 
pD©a
[1];

334 
tmpLí
 = (
uöt8
)
	`oßl_°æí
–(*)
°rDevi˚
 );

335 
pBuf
 = 
	`oßl_mem˝y
–
buf
, 
°rDevi˚
, 
tmpLí
 );

336 
	`_…ﬂ
–
sour˚
, 
pBuf
, 16 );

337 
pBuf
 += 4;

338 *
pBuf
++ = ' ';

340 i‡–
pD©a
[0] =
BATTERY_REPORT
 )

342 
tmpLí
 = (
uöt8
)
	`oßl_°æí
–(*)
°rB©ãry
 );

343 
pBuf
 = 
	`oßl_mem˝y
–pBuf, 
°rB©ãry
, 
tmpLí
 );

345 *
pBuf
++ = (
£ns‹Ródög
 / 10 ) + '0';

346 *
pBuf
++ = '.';

347 *
pBuf
++ = (
£ns‹Ródög
 % 10 ) + '0';

348 *
pBuf
++ = ' ';

349 *
pBuf
++ = 'V';

353 
tmpLí
 = (
uöt8
)
	`oßl_°æí
–(*)
°rTemp
 );

354 
pBuf
 = 
	`oßl_mem˝y
–pBuf, 
°rTemp
, 
tmpLí
 );

356 *
pBuf
++ = (
£ns‹Ródög
 / 10 ) + '0';

357 *
pBuf
++ = (
£ns‹Ródög
 % 10 ) + '0';

358 *
pBuf
++ = ' ';

359 *
pBuf
++ = 'C';

362 *
pBuf
++ = '\r';

363 *
pBuf
++ = '\n';

364 *
pBuf
 = '\0';

366 #i‡
	`deföed
–
MT_TASK
 )

367 
	`debug_°r
–(
uöt8
 *)
buf
 );

373 
	}
}

	@Projects/zstack/Samples/SimpleApp/Source/SimpleController.c

47 
	~"ZComDef.h
"

48 
	~"OSAL.h
"

49 
	~"ßpi.h
"

50 
	~"hÆ_key.h
"

51 
	~"hÆ_Àd.h
"

53 
	~"Sim∂eAµ.h
"

60 
	#APP_INIT
 0

	)

61 
	#APP_START
 1

	)

64 
	#MY_START_EVT
 0x0001

	)

73 
uöt8
 
	gmyAµSèã
 = 
APP_INIT
;

74 
uöt8
 
	gmySèπRëryDñay
 = 10;

75 
uöt8
 
	gmyAŒowBödTimeout
 = 10;

82 
	#NUM_OUT_CMD_CONTROLLER
 0

	)

83 
	#NUM_IN_CMD_CONTROLLER
 1

	)

86 c⁄° 
cId_t
 
	gzb_InCmdLi°
[
NUM_IN_CMD_CONTROLLER
] =

88 
TOGGLE_LIGHT_CMD_ID


92 c⁄° 
Sim∂eDes¸ùti⁄F‹m©_t
 
	gzb_Sim∂eDesc
 =

94 
MY_ENDPOINT_ID
,

95 
MY_PROFILE_ID
,

96 
DEV_ID_CONTROLLER
,

97 
DEVICE_VERSION_CONTROLLER
,

99 
NUM_IN_CMD_CONTROLLER
,

100 (
cId_t
 *Ë
zb_InCmdLi°
,

101 
NUM_OUT_CMD_CONTROLLER
,

102 (
cId_t
 *Ë
NULL


115 
	$zb_H™dÀOßlEvít
–
uöt16
 
evít
 )

118 
	}
}

133 
	$zb_H™dÀKeys
–
uöt8
 
shi·
, uöt8 
keys
 )

135 
uöt8
 
°¨tO±i⁄s
;

136 
uöt8
 
logiˇlTy≥
;

139 i‡–
shi·
 )

141 i‡–
keys
 & 
HAL_KEY_SW_1
 )

144 i‡–
keys
 & 
HAL_KEY_SW_2
 )

147 i‡–
keys
 & 
HAL_KEY_SW_3
 )

150 i‡–
keys
 & 
HAL_KEY_SW_4
 )

156 i‡–
keys
 & 
HAL_KEY_SW_1
 )

158 i‡–
myAµSèã
 =
APP_INIT
 )

163 
	`zb_RódC⁄figuøti⁄
–
ZCD_NV_LOGICAL_TYPE
, (
uöt8
), &
logiˇlTy≥
 );

164 i‡–
logiˇlTy≥
 !
ZG_DEVICETYPE_ENDDEVICE
 )

166 
logiˇlTy≥
 = 
ZG_DEVICETYPE_COORDINATOR
;

167 
	`zb_WrôeC⁄figuøti⁄
(
ZCD_NV_LOGICAL_TYPE
, (
uöt8
), &
logiˇlTy≥
);

174 
	`zb_RódC⁄figuøti⁄
–
ZCD_NV_STARTUP_OPTION
, (
uöt8
), &
°¨tO±i⁄s
 );

175 
°¨tO±i⁄s
 = 
ZCD_STARTOPT_AUTO_START
;

176 
	`zb_WrôeC⁄figuøti⁄
–
ZCD_NV_STARTUP_OPTION
, (
uöt8
), &
°¨tO±i⁄s
 );

177 
	`zb_Sy°emRe£t
();

183 
	`zb_AŒowBöd
–
myAŒowBödTimeout
 );

186 i‡–
keys
 & 
HAL_KEY_SW_2
 )

188 i‡–
myAµSèã
 =
APP_INIT
 )

193 
	`zb_RódC⁄figuøti⁄
–
ZCD_NV_LOGICAL_TYPE
, (
uöt8
), &
logiˇlTy≥
 );

194 i‡–
logiˇlTy≥
 !
ZG_DEVICETYPE_ENDDEVICE
 )

196 
logiˇlTy≥
 = 
ZG_DEVICETYPE_ROUTER
;

197 
	`zb_WrôeC⁄figuøti⁄
(
ZCD_NV_LOGICAL_TYPE
, (
uöt8
), &
logiˇlTy≥
);

200 
	`zb_RódC⁄figuøti⁄
–
ZCD_NV_STARTUP_OPTION
, (
uöt8
), &
°¨tO±i⁄s
 );

201 
°¨tO±i⁄s
 = 
ZCD_STARTOPT_AUTO_START
;

202 
	`zb_WrôeC⁄figuøti⁄
–
ZCD_NV_STARTUP_OPTION
, (
uöt8
), &
°¨tO±i⁄s
 );

203 
	`zb_Sy°emRe£t
();

209 i‡–
keys
 & 
HAL_KEY_SW_3
 )

212 i‡–
keys
 & 
HAL_KEY_SW_4
 )

216 
	}
}

229 
	$zb_SèπC⁄fúm
–
uöt8
 
°©us
 )

232 i‡–
°©us
 =
ZB_SUCCESS
 )

234 
myAµSèã
 = 
APP_START
;

239 
	`oßl_°¨t_timîEx
(
ßpi_TaskID
, 
MY_START_EVT
, 
mySèπRëryDñay
);

241 
	}
}

254 
	$zb_SídD©aC⁄fúm
–
uöt8
 
h™dÀ
, uöt8 
°©us
 )

256 
	}
}

269 
	$zb_BödC⁄fúm
–
uöt16
 
comm™dId
, 
uöt8
 
°©us
 )

271 
	}
}

281 
	$zb_AŒowBödC⁄fúm
–
uöt16
 
sour˚
 )

284 
	`HÆLedSë
–
HAL_LED_1
, 
HAL_LED_MODE_BLINK
 );

285 
	}
}

298 
	$zb_FödDevi˚C⁄fúm
–
uöt8
 
£¨chTy≥
, uöt8 *
£¨chKey
, uöt8 *
ªsu…
 )

300 
	}
}

316 
	$zb_Re˚iveD©aIndiˇti⁄
–
uöt16
 
sour˚
, uöt16 
comm™d
, uöt16 
Àn
, 
uöt8
 *
pD©a
 )

318 i‡(
comm™d
 =
TOGGLE_LIGHT_CMD_ID
)

321 
	`HÆLedSë
(
HAL_LED_1
, 
HAL_LED_MODE_TOGGLE
);

323 
	}
}

	@Projects/zstack/Samples/SimpleApp/Source/SimpleSensor.c

45 
	~"ZComDef.h
"

46 
	~"OSAL.h
"

47 
	~"ßpi.h
"

48 
	~"hÆ_key.h
"

49 
	~"hÆ_Àd.h
"

50 
	~"hÆ_adc.h
"

51 
	~"hÆ_mcu.h
"

52 
	~"Sim∂eAµ.h
"

59 
	#APP_INIT
 0

60 
	#APP_START
 1

61 
	#APP_BOUND
 2

62 

	)

65 
	#MY_START_EVT
 0x0001

	)

66 
	#MY_REPORT_TEMP_EVT
 0x0002

	)

67 
	#MY_REPORT_BATT_EVT
 0x0004

	)

68 
	#MY_FIND_COLLECTOR_EVT
 0x0008

	)

71 #i‡
deföed
 (
HAL_MCU_CC2430
Ë|| deföed (
HAL_MCU_CC2530
)

72 
	#HAL_ADC_REF_125V
 0x00

	)

73 
	#HAL_ADC_DEC_064
 0x00

	)

74 
	#HAL_ADC_DEC_128
 0x10

	)

75 
	#HAL_ADC_DEC_512
 0x30

	)

76 
	#HAL_ADC_CHN_VDD3
 0x0‡

	)

77 
	#HAL_ADC_CHN_TEMP
 0x0ê

	)

88 
uöt8
 
	gmyAµSèã
 = 
APP_INIT
;

90 
uöt16
 
	gmySèπRëryDñay
 = 10000;

91 
uöt16
 
	gmyTempRï‹tPîiod
 = 5000;

92 
uöt16
 
	gmyB©ãryCheckPîiod
 = 21000;

93 
uöt16
 
	gmyBödRëryDñay
 = 10000;

99 
	#NUM_OUT_CMD_SENSOR
 1

	)

100 
	#NUM_IN_CMD_SENSOR
 0

	)

103 c⁄° 
cId_t
 
	gzb_OutCmdLi°
[
NUM_OUT_CMD_SENSOR
] =

105 
SENSOR_REPORT_CMD_ID


109 
	#TEMP_REPORT
 0x01

	)

110 
	#BATTERY_REPORT
 0x02

	)

114 c⁄° 
Sim∂eDes¸ùti⁄F‹m©_t
 
	gzb_Sim∂eDesc
 =

116 
MY_ENDPOINT_ID
,

117 
MY_PROFILE_ID
,

118 
DEV_ID_SENSOR
,

119 
DEVICE_VERSION_SENSOR
,

121 
NUM_IN_CMD_SENSOR
,

122 (
cId_t
 *Ë
NULL
,

123 
NUM_OUT_CMD_SENSOR
,

124 (
cId_t
 *Ë
zb_OutCmdLi°


131 
myAµ_SèπRï‹tög
( );

132 
myAµ_St›Rï‹tög
( );

134 
uöt8
 
myAµ_RódTem≥øtuª
( );

135 
uöt8
 
myAµ_RódB©ãry
( );

147 
	$zb_H™dÀOßlEvít
–
uöt16
 
evít
 )

149 
uöt8
 
pD©a
[2];

151 i‡–
evít
 & 
MY_START_EVT
 )

153 
	`zb_SèπReque°
();

155 i‡–
evít
 & 
MY_REPORT_TEMP_EVT
 )

158 
pD©a
[0] = 
TEMP_REPORT
;

159 
pD©a
[1] = 
	`myAµ_RódTem≥øtuª
();

160 
	`zb_SídD©aReque°
–0xFFFE, 
SENSOR_REPORT_CMD_ID
, 2, 
pD©a
, 0, 
AF_ACK_REQUEST
, 0 );

161 
	`oßl_°¨t_timîEx
–
ßpi_TaskID
, 
MY_REPORT_TEMP_EVT
, 
myTempRï‹tPîiod
 );

164 i‡–
evít
 & 
MY_REPORT_BATT_EVT
 )

168 
pD©a
[0] = 
BATTERY_REPORT
;

169 
pD©a
[1] = 
	`myAµ_RódB©ãry
();

170 
	`zb_SídD©aReque°
–0xFFFE, 
SENSOR_REPORT_CMD_ID
, 2, 
pD©a
, 0, 
AF_ACK_REQUEST
, 0 );

171 
	`oßl_°¨t_timîEx
–
ßpi_TaskID
, 
MY_REPORT_BATT_EVT
, 
myB©ãryCheckPîiod
 );

174 i‡–
evít
 & 
MY_FIND_COLLECTOR_EVT
 )

177 
	`zb_BödDevi˚
–
TRUE
, 
SENSOR_REPORT_CMD_ID
, (
uöt8
 *)
NULL
 );

180 
	}
}

195 
	$zb_H™dÀKeys
–
uöt8
 
shi·
, uöt8 
keys
 )

197 
uöt8
 
°¨tO±i⁄s
;

198 
uöt8
 
logiˇlTy≥
;

201 i‡–
shi·
 )

203 i‡–
keys
 & 
HAL_KEY_SW_1
 )

206 i‡–
keys
 & 
HAL_KEY_SW_2
 )

209 i‡–
keys
 & 
HAL_KEY_SW_3
 )

212 i‡–
keys
 & 
HAL_KEY_SW_4
 )

218 i‡–
keys
 & 
HAL_KEY_SW_1
 )

220 i‡–
myAµSèã
 =
APP_INIT
 )

224 
logiˇlTy≥
 = 
ZG_DEVICETYPE_ENDDEVICE
;

225 
	`zb_WrôeC⁄figuøti⁄
(
ZCD_NV_LOGICAL_TYPE
, (
uöt8
), &
logiˇlTy≥
);

229 
	`zb_RódC⁄figuøti⁄
–
ZCD_NV_STARTUP_OPTION
, (
uöt8
), &
°¨tO±i⁄s
 );

230 
°¨tO±i⁄s
 = 
ZCD_STARTOPT_AUTO_START
;

231 
	`zb_WrôeC⁄figuøti⁄
–
ZCD_NV_STARTUP_OPTION
, (
uöt8
), &
°¨tO±i⁄s
 );

232 
	`zb_Sy°emRe£t
();

236 i‡–
keys
 & 
HAL_KEY_SW_2
 )

238 i‡–
myAµSèã
 =
APP_INIT
 )

242 
logiˇlTy≥
 = 
ZG_DEVICETYPE_ENDDEVICE
;

243 
	`zb_WrôeC⁄figuøti⁄
(
ZCD_NV_LOGICAL_TYPE
, (
uöt8
), &
logiˇlTy≥
);

247 
	`zb_RódC⁄figuøti⁄
–
ZCD_NV_STARTUP_OPTION
, (
uöt8
), &
°¨tO±i⁄s
 );

248 
°¨tO±i⁄s
 = 
ZCD_STARTOPT_AUTO_START
;

249 
	`zb_WrôeC⁄figuøti⁄
–
ZCD_NV_STARTUP_OPTION
, (
uöt8
), &
°¨tO±i⁄s
 );

250 
	`zb_Sy°emRe£t
();

253 i‡–
keys
 & 
HAL_KEY_SW_3
 )

256 i‡–
keys
 & 
HAL_KEY_SW_4
 )

260 
	}
}

273 
	$zb_SèπC⁄fúm
–
uöt8
 
°©us
 )

275 i‡–
°©us
 =
ZB_SUCCESS
 )

277 
myAµSèã
 = 
APP_START
;

280 
	`oßl_°¨t_timîEx
–
ßpi_TaskID
, 
MY_FIND_COLLECTOR_EVT
, 
myBödRëryDñay
 );

285 
	`oßl_°¨t_timîEx
–
ßpi_TaskID
, 
MY_START_EVT
, 
mySèπRëryDñay
 );

287 
	}
}

299 
	$zb_SídD©aC⁄fúm
–
uöt8
 
h™dÀ
, uöt8 
°©us
 )

301 ()
h™dÀ
;

303 i‡–
°©us
 !
ZSuc˚ss
 )

306 
	`zb_BödDevi˚
–
FALSE
, 
SENSOR_REPORT_CMD_ID
, (
uöt8
 *)
NULL
 );

308 
myAµSèã
 = 
APP_START
;

309 
	`myAµ_St›Rï‹tög
();

312 
	`oßl_°¨t_timîEx
–
ßpi_TaskID
, 
MY_FIND_COLLECTOR_EVT
, 1 );

318 
	}
}

330 
	$zb_BödC⁄fúm
–
uöt16
 
comm™dId
, 
uöt8
 
°©us
 )

332 ()
comm™dId
;

334 i‡––
°©us
 =
ZB_SUCCESS
 ) && ( 
myAµSèã
 =
APP_START
 ) )

336 
myAµSèã
 = 
APP_BOUND
;

339 
	`myAµ_SèπRï‹tög
();

344 
	`oßl_°¨t_timîEx
–
ßpi_TaskID
, 
MY_FIND_COLLECTOR_EVT
, 
myBödRëryDñay
 );

346 
	}
}

356 
	$zb_AŒowBödC⁄fúm
–
uöt16
 
sour˚
 )

358 ()
sour˚
;

359 
	}
}

372 
	$zb_FödDevi˚C⁄fúm
–
uöt8
 
£¨chTy≥
, uöt8 *
£¨chKey
, uöt8 *
ªsu…
 )

375 ()
£¨chTy≥
;

376 ()
£¨chKey
;

377 ()
ªsu…
;

378 
	}
}

394 
	$zb_Re˚iveD©aIndiˇti⁄
–
uöt16
 
sour˚
, uöt16 
comm™d
, uöt16 
Àn
, 
uöt8
 *
pD©a
 )

397 ()
sour˚
;

398 ()
comm™d
;

399 ()
Àn
;

400 ()
pD©a
;

401 
	}
}

411 
	$myAµ_SèπRï‹tög
( )

413 
	`oßl_°¨t_timîEx
–
ßpi_TaskID
, 
MY_REPORT_TEMP_EVT
, 
myTempRï‹tPîiod
 );

414 
	`oßl_°¨t_timîEx
–
ßpi_TaskID
, 
MY_REPORT_BATT_EVT
, 
myB©ãryCheckPîiod
 );

415 
	`HÆLedSë
–
HAL_LED_1
, 
HAL_LED_MODE_ON
 );

417 
	}
}

427 
	$myAµ_St›Rï‹tög
( )

429 
	`oßl_°›_timîEx
–
ßpi_TaskID
, 
MY_REPORT_TEMP_EVT
 );

430 
	`oßl_°›_timîEx
–
ßpi_TaskID
, 
MY_REPORT_BATT_EVT
 );

431 
	`HÆLedSë
–
HAL_LED_1
, 
HAL_LED_MODE_OFF
 );

432 
	}
}

442 
uöt8
 
	$myAµ_RódB©ãry
( )

445 #i‡
	`deföed
 (
HAL_MCU_CC2430
Ë|| deföed (
HAL_MCU_CC2530
)

447 
uöt16
 
vÆue
;

450 
ADCIF
 = 0;

452 
ADCCON3
 = (
HAL_ADC_REF_125V
 | 
HAL_ADC_DEC_128
 | 
HAL_ADC_CHN_VDD3
);

455  !
ADCIF
 );

458 
vÆue
 = 
ADCL
;

459 
vÆue
 |((
uöt16
Ë
ADCH
) << 8;

468 
vÆue
 = value >> 6;

469 
vÆue
 = (
uöt16
)(value * 37.5);

470 
vÆue
 = value >> 9;

472  
vÆue
;

476 #i‡
deföed
 
HAL_MCU_MSP430


478 
uöt16
 
vÆue
;

483 #i‡
	`deföed
 (
HAL_BOARD_F5438
)

485 
vÆue
 = 
	`HÆAdcRód
 (
HAL_ADC_CHANNEL_VDD
, 
HAL_ADC_RESOLUTION_14
);

486 
vÆue
 = value * 50;

487 
vÆue
 = value / 4096;

491 
ADC12CTL0
 = 
ADC12ON
+
SHT0_2
+
REFON
;

492 
ADC12CTL1
 = 
SHP
;

493 
ADC12MCTL0
 = 
SREF_1
+
INCH_11
;

495 
ADC12CTL0
 |
ENC
 | 
ADC12SC
;

496 (
ADC12IFG
 & 
BIT0
)==0);

498 
vÆue
 = 
ADC12MEM0
;

507 
vÆue
 = value >> 1;

508 
vÆue
 = value * 30;

509 
vÆue
 = value >> 11;

513  ( 
vÆue
 );

517 #i‡
deföed
 
HAL_MCU_AVR


521 
uöt8
 
vÆue
;

522 
vÆue
 = 20 + ( 
	`oßl_ønd
() & 0x000F );

523  ( 
vÆue
 );

527 
	}
}

537 
uöt8
 
	$myAµ_RódTem≥øtuª
( )

540 #i‡
	`deföed
 (
HAL_MCU_CC2430
Ë|| deföed (
HAL_MCU_CC2530
)

542 
uöt16
 
vÆue
;

545 
ADCIF
 = 0;

547 
ADCCON3
 = (
HAL_ADC_REF_125V
 | 
HAL_ADC_DEC_512
 | 
HAL_ADC_CHN_TEMP
);

550  !
ADCIF
 );

553 
vÆue
 = 
ADCL
;

554 
vÆue
 |((
uöt16
Ë
ADCH
) << 8;

564 #i‡
	`deföed
 (
HAL_MCU_CC2430
)

565 
	#VOLTAGE_AT_TEMP_ZERO
 19477

566 
	#TEMP_COEFFICIENT
 62.9

567 #ñi‡
	`deföed
 (
HAL_MCU_CC2530
)

	)

569 
	#VOLTAGE_AT_TEMP_ZERO
 5158

	)

570 
	#TEMP_COEFFICIENT
 14

	)

574 i‡–
vÆue
 < 
VOLTAGE_AT_TEMP_ZERO
 )

575 
vÆue
 = 
VOLTAGE_AT_TEMP_ZERO
;

577 
vÆue
 = vÆuê- 
VOLTAGE_AT_TEMP_ZERO
;

580 i‡–
vÆue
 > 
TEMP_COEFFICIENT
 * 99 )

581 
vÆue
 = 
TEMP_COEFFICIENT
 * 99;

583  ( (
uöt8
)(
vÆue
/
TEMP_COEFFICIENT
) );

588 #i‡
deföed
 
HAL_MCU_MSP430


590 
uöt16
 
vÆue
;

595 #i‡
	`deföed
 (
HAL_BOARD_F5438
)

597 
mu…ùlõr
, 
off£t
;

599 
vÆue
 = 
	`HÆAdcRód
 (
HAL_ADC_CHANNEL_TEMP
, 
HAL_ADC_RESOLUTION_14
);

601 
mu…ùlõr
 = () 7040 * 9 /5 ;

602 
off£t
 = () 2620 * 9 / 5 - 320;

604 
vÆue
 = (ËvÆuê* 
mu…ùlõr
/4096 - 
off£t
;

606  (
vÆue
);

609 
ADC12CTL0
 = 
ADC12ON
+
SHT0_7
+
REFON
;

610 
ADC12CTL1
 = 
SHP
;

611 
ADC12MCTL0
 = 
SREF_1
+
INCH_10
;

613 
ADC12CTL0
 |
ENC
 | 
ADC12SC
;

614 (
ADC12IFG
 & 
BIT0
)==0);

616 
vÆue
 = 
ADC12MEM0
;

627 
	#VOLTAGE_AT_TEMP_ZERO
 2692

628 
	#TEMP_COEFFICIENT
 9.69

629 

	)

631 i‡–
vÆue
 < 
VOLTAGE_AT_TEMP_ZERO
 )

632 
vÆue
 = 
VOLTAGE_AT_TEMP_ZERO
;

634 
vÆue
 = vÆuê- 
VOLTAGE_AT_TEMP_ZERO
;

637 i‡–
vÆue
 > 
TEMP_COEFFICIENT
 * 99 )

638 
vÆue
 = 
TEMP_COEFFICIENT
 * 99;

640  ( (
uöt8
)(
vÆue
/
TEMP_COEFFICIENT
) );

645 #i‡
deföed
 
HAL_MCU_AVR


648 
uöt8
 
vÆue
;

649 
vÆue
 = 20 + ( 
	`oßl_ønd
() & 0x000F );

650  ( 
vÆue
 );

654 
	}
}

	@Projects/zstack/Samples/SimpleApp/Source/SimpleSwitch.c

45 
	~"ZComDef.h
"

46 
	~"OSAL.h
"

47 
	~"ßpi.h
"

48 
	~"hÆ_key.h
"

49 
	~"hÆ_Àd.h
"

51 
	~"Sim∂eAµ.h
"

58 
	#APP_INIT
 0

59 
	#APP_START
 1

60 

	)

62 
	#MY_START_EVT
 0x0001

	)

71 
uöt8
 
	gmyAµSeqNumbî
 = 0;

72 
uöt8
 
	gmyAµSèã
 = 
APP_INIT
;

73 
uöt8
 
	gmySèπRëryDñay
 = 10;

80 
	#NUM_OUT_CMD_SWITCH
 1

	)

81 
	#NUM_IN_CMD_SWITCH
 0

	)

84 c⁄° 
cId_t
 
	gzb_OutCmdLi°
[
NUM_OUT_CMD_SWITCH
] =

86 
TOGGLE_LIGHT_CMD_ID


90 c⁄° 
Sim∂eDes¸ùti⁄F‹m©_t
 
	gzb_Sim∂eDesc
 =

92 
MY_ENDPOINT_ID
,

93 
MY_PROFILE_ID
,

94 
DEV_ID_SWITCH
,

95 
DEVICE_VERSION_SWITCH
,

97 
NUM_IN_CMD_SWITCH
,

98 (
cId_t
 *Ë
NULL
,

99 
NUM_OUT_CMD_SWITCH
,

100 (
cId_t
 *Ë
zb_OutCmdLi°


113 
	$zb_H™dÀOßlEvít
–
uöt16
 
evít
 )

116 i‡–
evít
 & 
MY_START_EVT
 )

118 
	`zb_SèπReque°
();

121 
	}
}

136 
	$zb_H™dÀKeys
–
uöt8
 
shi·
, uöt8 
keys
 )

138 
uöt8
 
°¨tO±i⁄s
;

139 
uöt8
 
logiˇlTy≥
;

142 i‡–
shi·
 )

144 i‡–
keys
 & 
HAL_KEY_SW_1
 )

147 i‡–
keys
 & 
HAL_KEY_SW_2
 )

150 i‡–
keys
 & 
HAL_KEY_SW_3
 )

153 i‡–
keys
 & 
HAL_KEY_SW_4
 )

159 i‡–
keys
 & 
HAL_KEY_SW_1
 )

161 i‡–
myAµSèã
 =
APP_INIT
 )

165 
logiˇlTy≥
 = 
ZG_DEVICETYPE_ENDDEVICE
;

166 
	`zb_WrôeC⁄figuøti⁄
(
ZCD_NV_LOGICAL_TYPE
, (
uöt8
), &
logiˇlTy≥
);

170 
	`zb_RódC⁄figuøti⁄
–
ZCD_NV_STARTUP_OPTION
, (
uöt8
), &
°¨tO±i⁄s
 );

171 
°¨tO±i⁄s
 = 
ZCD_STARTOPT_AUTO_START
;

172 
	`zb_WrôeC⁄figuøti⁄
–
ZCD_NV_STARTUP_OPTION
, (
uöt8
), &
°¨tO±i⁄s
 );

173 
	`zb_Sy°emRe£t
();

179 
	`zb_BödDevi˚
(
TRUE
, 
TOGGLE_LIGHT_CMD_ID
, 
NULL
);

182 i‡–
keys
 & 
HAL_KEY_SW_2
 )

184 i‡–
myAµSèã
 =
APP_INIT
 )

188 
logiˇlTy≥
 = 
ZG_DEVICETYPE_ENDDEVICE
;

189 
	`zb_WrôeC⁄figuøti⁄
(
ZCD_NV_LOGICAL_TYPE
, (
uöt8
), &
logiˇlTy≥
);

192 
	`zb_RódC⁄figuøti⁄
–
ZCD_NV_STARTUP_OPTION
, (
uöt8
), &
°¨tO±i⁄s
 );

193 
°¨tO±i⁄s
 = 
ZCD_STARTOPT_AUTO_START
;

194 
	`zb_WrôeC⁄figuøti⁄
–
ZCD_NV_STARTUP_OPTION
, (
uöt8
), &
°¨tO±i⁄s
 );

195 
	`zb_Sy°emRe£t
();

200 
	`zb_SídD©aReque°
–0xFFFE, 
TOGGLE_LIGHT_CMD_ID
, 0,

201 (
uöt8
 *)
NULL
, 
myAµSeqNumbî
, 0, 0 );

204 i‡–
keys
 & 
HAL_KEY_SW_3
 )

207 
	`zb_BödDevi˚
(
FALSE
, 
TOGGLE_LIGHT_CMD_ID
, 
NULL
);

209 i‡–
keys
 & 
HAL_KEY_SW_4
 )

213 
	}
}

226 
	$zb_SèπC⁄fúm
–
uöt8
 
°©us
 )

229 i‡–
°©us
 =
ZB_SUCCESS
 )

231 
myAµSèã
 = 
APP_START
;

236 
	`oßl_°¨t_timîEx
–
ßpi_TaskID
, 
MY_START_EVT
, 
mySèπRëryDñay
 );

238 
	}
}

251 
	$zb_SídD©aC⁄fúm
–
uöt8
 
h™dÀ
, uöt8 
°©us
 )

253 
	}
}

266 
	$zb_BödC⁄fúm
–
uöt16
 
comm™dId
, 
uöt8
 
°©us
 )

269 i‡––
°©us
 =
ZB_SUCCESS
 ) && ( 
myAµSèã
 =
APP_START
 ) )

272 
	`HÆLedSë
–
HAL_LED_1
, 
HAL_LED_MODE_ON
 );

274 
	}
}

284 
	$zb_AŒowBödC⁄fúm
–
uöt16
 
sour˚
 )

287 
	}
}

300 
	$zb_FödDevi˚C⁄fúm
–
uöt8
 
£¨chTy≥
, uöt8 *
£¨chKey
, uöt8 *
ªsu…
 )

302 
	}
}

318 
	$zb_Re˚iveD©aIndiˇti⁄
–
uöt16
 
sour˚
, uöt16 
comm™d
, uöt16 
Àn
, 
uöt8
 *
pD©a
 )

321 
	}
}

	@Projects/zstack/Utilities/SerialApp/Source/OSAL_SerialApp.c

45 
	~"ZComDef.h
"

46 
	~"hÆ_drivîs.h
"

47 
	~"OSAL.h
"

48 
	~"OSAL_Tasks.h
"

50 #i‡
deföed
 ( 
MT_TASK
 )

51 
	~"MT.h
"

52 
	~"MT_TASK.h
"

55 
	~"nwk.h
"

56 
	~"APS.h
"

57 
	~"ZDAµ.h
"

58 #i‡
deföed
 ( 
ZIGBEE_FREQ_AGILITY
 ) || deföed ( 
ZIGBEE_PANID_CONFLICT
 )

59 
	~"ZDNwkMgr.h
"

61 #i‡
deföed
 ( 
ZIGBEE_FRAGMENTATION
 )

62 
	~"≠s_‰ag.h
"

65 
	~"SîülAµ.h
"

72 c⁄° 
pTaskEvítH™dÀrFn
 
	gèsksAº
[] = {

73 
macEvítLo›
,

74 
nwk_evít_lo›
,

75 
HÆ_Pro˚ssEvít
,

76 #i‡
deföed
–
MT_TASK
 )

77 
MT_Pro˚ssEvít
,

79 
APS_evít_lo›
,

80 #i‡
deföed
 ( 
ZIGBEE_FRAGMENTATION
 )

81 
APSF_Pro˚ssEvít
,

83 
ZDAµ_evít_lo›
,

84 #i‡
deföed
 ( 
ZIGBEE_FREQ_AGILITY
 ) || deföed ( 
ZIGBEE_PANID_CONFLICT
 )

85 
ZDNwkMgr_evít_lo›
,

87 
SîülAµ_Pro˚ssEvít


90 c⁄° 
uöt8
 
	gèsksC¡
 = –
èsksAº
 ) / (ÅasksArr[0] );

91 
uöt16
 *
	gèsksEvíts
;

106 
	$oßlInôTasks
( )

108 
uöt8
 
èskID
 = 0;

110 
èsksEvíts
 = (
uöt16
 *)
	`oßl_mem_Æloc
––uöt16 ) * 
èsksC¡
);

111 
	`oßl_mem£t
–
èsksEvíts
, 0, (–
uöt16
 ) * 
èsksC¡
));

113 
	`macTaskInô
–
èskID
++ );

114 
	`nwk_öô
–
èskID
++ );

115 
	`HÆ_Inô
–
èskID
++ );

116 #i‡
	`deföed
–
MT_TASK
 )

117 
	`MT_TaskInô
–
èskID
++ );

119 
	`APS_Inô
–
èskID
++ );

120 #i‡
	`deföed
 ( 
ZIGBEE_FRAGMENTATION
 )

121 
	`APSF_Inô
–
èskID
++ );

123 
	`ZDAµ_Inô
–
èskID
++ );

124 #i‡
	`deföed
 ( 
ZIGBEE_FREQ_AGILITY
 ) || deföed ( 
ZIGBEE_PANID_CONFLICT
 )

125 
	`ZDNwkMgr_Inô
–
èskID
++ );

127 
	`SîülAµ_Inô
–
èskID
 );

128 
	}
}

	@Projects/zstack/Utilities/SerialApp/Source/SerialApp.c

62 
	~"AF.h
"

63 
	~"OnBﬂrd.h
"

64 
	~"OSAL_Tasks.h
"

65 
	~"SîülAµ.h
"

66 
	~"ZDAµ.h
"

67 
	~"ZDObje˘.h
"

68 
	~"ZDProfûe.h
"

70 
	~"hÆ_drivîs.h
"

71 
	~"hÆ_key.h
"

72 #i‡
deföed
 ( 
LCD_SUPPORTED
 )

73 
	~"hÆ_lcd.h
"

75 
	~"hÆ_Àd.h
"

76 
	~"hÆ_u¨t.h
"

86 #i‡!
deföed
–
SERIAL_APP_PORT
 )

87 
	#SERIAL_APP_PORT
 0

	)

90 #i‡!
deföed
–
SERIAL_APP_BAUD
 )

91 
	#SERIAL_APP_BAUD
 
HAL_UART_BR_38400


	)

96 #i‡!
deföed
–
SERIAL_APP_THRESH
 )

97 
	#SERIAL_APP_THRESH
 64

	)

100 #i‡!
deföed
–
SERIAL_APP_RX_SZ
 )

101 
	#SERIAL_APP_RX_SZ
 128

	)

104 #i‡!
deföed
–
SERIAL_APP_TX_SZ
 )

105 
	#SERIAL_APP_TX_SZ
 128

	)

109 #i‡!
deföed
–
SERIAL_APP_IDLE
 )

110 
	#SERIAL_APP_IDLE
 6

	)

114 #i‡!
deföed
–
SERIAL_APP_LOOPBACK
 )

115 
	#SERIAL_APP_LOOPBACK
 
FALSE


	)

119 #i‡!
deföed
–
SERIAL_APP_TX_MAX
 )

120 
	#SERIAL_APP_TX_MAX
 80

	)

123 
	#SERIAL_APP_RSP_CNT
 4

	)

126 c⁄° 
cId_t
 
	gSîülAµ_Clu°îLi°
[
SERIALAPP_MAX_CLUSTERS
] =

128 
SERIALAPP_CLUSTERID1
,

129 
SERIALAPP_CLUSTERID2


132 c⁄° 
Sim∂eDes¸ùti⁄F‹m©_t
 
	gSîülAµ_Sim∂eDesc
 =

134 
SERIALAPP_ENDPOINT
,

135 
SERIALAPP_PROFID
,

136 
SERIALAPP_DEVICEID
,

137 
SERIALAPP_DEVICE_VERSION
,

138 
SERIALAPP_FLAGS
,

139 
SERIALAPP_MAX_CLUSTERS
,

140 (
cId_t
 *)
SîülAµ_Clu°îLi°
,

141 
SERIALAPP_MAX_CLUSTERS
,

142 (
cId_t
 *)
SîülAµ_Clu°îLi°


145 c⁄° 
ídPoötDesc_t
 
	gSîülAµ_ïDesc
 =

147 
SERIALAPP_ENDPOINT
,

148 &
SîülAµ_TaskID
,

149 (
Sim∂eDes¸ùti⁄F‹m©_t
 *)&
SîülAµ_Sim∂eDesc
,

150 
noL©ícyReqs


161 
uöt8
 
	gSîülAµ_TaskID
;

175 
uöt8
 
	gSîülAµ_MsgID
;

177 
afAddrTy≥_t
 
	gSîülAµ_TxAddr
;

178 
uöt8
 
	gSîülAµ_TxSeq
;

179 
uöt8
 
	gSîülAµ_TxBuf
[
SERIAL_APP_TX_MAX
+1];

180 
uöt8
 
	gSîülAµ_TxLí
;

182 
afAddrTy≥_t
 
	gSîülAµ_RxAddr
;

183 
uöt8
 
	gSîülAµ_RxSeq
;

184 
uöt8
 
	gSîülAµ_R•Buf
[
SERIAL_APP_RSP_CNT
];

190 
SîülAµ_Pro˚ssZDOMsgs
–
zdoIncomögMsg_t
 *
öMsg
 );

191 
SîülAµ_H™dÀKeys
–
uöt8
 
shi·
, uöt8 
keys
 );

192 
SîülAµ_Pro˚ssMSGCmd
–
afIncomögMSGPackë_t
 *
pkt
 );

193 
SîülAµ_Síd
();

194 
SîülAµ_Re•
();

195 
SîülAµ_CÆlBack
(
uöt8
 
p‹t
, uöt8 
evít
);

206 
	$SîülAµ_Inô
–
uöt8
 
èsk_id
 )

208 
hÆUARTCfg_t
 
u¨tC⁄fig
;

210 
SîülAµ_TaskID
 = 
èsk_id
;

211 
SîülAµ_RxSeq
 = 0xC3;

213 
	`afRegi°î
–(
ídPoötDesc_t
 *)&
SîülAµ_ïDesc
 );

215 
	`Regi°îF‹Keys
–
èsk_id
 );

217 
u¨tC⁄fig
.
c⁄figuªd
 = 
TRUE
;

218 
u¨tC⁄fig
.
baudR©e
 = 
SERIAL_APP_BAUD
;

219 
u¨tC⁄fig
.
ÊowC⁄åﬁ
 = 
FALSE
;

220 
u¨tC⁄fig
.
ÊowC⁄åﬁThªshﬁd
 = 
SERIAL_APP_THRESH
;

221 
u¨tC⁄fig
.
rx
.
maxBufSize
 = 
SERIAL_APP_RX_SZ
;

222 
u¨tC⁄fig
.
tx
.
maxBufSize
 = 
SERIAL_APP_TX_SZ
;

223 
u¨tC⁄fig
.
idÀTimeout
 = 
SERIAL_APP_IDLE
;

224 
u¨tC⁄fig
.
ötE«bÀ
 = 
TRUE
;

225 
u¨tC⁄fig
.
ˇŒBackFunc
 = 
SîülAµ_CÆlBack
;

226 
	`HÆUARTO≥n
 (
SERIAL_APP_PORT
, &
u¨tC⁄fig
);

228 #i‡
	`deföed
 ( 
LCD_SUPPORTED
 )

229 
	`HÆLcdWrôeSåög
–"SîülAµ", 
HAL_LCD_LINE_2
 );

232 
	`ZDO_Regi°îF‹ZDOMsg
–
SîülAµ_TaskID
, 
End_Devi˚_Böd_r•
 );

233 
	`ZDO_Regi°îF‹ZDOMsg
–
SîülAµ_TaskID
, 
M©ch_Desc_r•
 );

234 
	}
}

246 
UINT16
 
	$SîülAµ_Pro˚ssEvít
–
uöt8
 
èsk_id
, 
UINT16
 
evíts
 )

248 ()
èsk_id
;

250 i‡–
evíts
 & 
SYS_EVENT_MSG
 )

252 
afIncomögMSGPackë_t
 *
MSGpkt
;

254  (
MSGpkt
 = (
afIncomögMSGPackë_t
 *)
	`oßl_msg_ª˚ive
–
SîülAµ_TaskID
 )) )

256  
MSGpkt
->
hdr
.
evít
 )

258 
ZDO_CB_MSG
:

259 
	`SîülAµ_Pro˚ssZDOMsgs
–(
zdoIncomögMsg_t
 *)
MSGpkt
 );

262 
KEY_CHANGE
:

263 
	`SîülAµ_H™dÀKeys
–((
keyCh™ge_t
 *)
MSGpkt
)->
°©e
, ((keyCh™ge_à*)MSGpkt)->
keys
 );

266 
AF_INCOMING_MSG_CMD
:

267 
	`SîülAµ_Pro˚ssMSGCmd
–
MSGpkt
 );

274 
	`oßl_msg_dóŒoˇã
–(
uöt8
 *)
MSGpkt
 );

277  ( 
evíts
 ^ 
SYS_EVENT_MSG
 );

280 i‡–
evíts
 & 
SERIALAPP_SEND_EVT
 )

282 
	`SîülAµ_Síd
();

283  ( 
evíts
 ^ 
SERIALAPP_SEND_EVT
 );

286 i‡–
evíts
 & 
SERIALAPP_RESP_EVT
 )

288 
	`SîülAµ_Re•
();

289  ( 
evíts
 ^ 
SERIALAPP_RESP_EVT
 );

293 
	}
}

304 
	$SîülAµ_Pro˚ssZDOMsgs
–
zdoIncomögMsg_t
 *
öMsg
 )

306  
öMsg
->
˛u°îID
 )

308 
End_Devi˚_Böd_r•
:

309 i‡–
	`ZDO_P¨£BödR•
–
öMsg
 ) =
ZSuc˚ss
 )

312 
	`HÆLedSë
–
HAL_LED_4
, 
HAL_LED_MODE_ON
 );

314 #i‡
	`deföed
(
BLINK_LEDS
)

318 
	`HÆLedSë
 ( 
HAL_LED_4
, 
HAL_LED_MODE_FLASH
 );

323 
M©ch_Desc_r•
:

325 
ZDO_A˘iveEndpoötR•_t
 *
pR•
 = 
	`ZDO_P¨£EPLi°R•
–
öMsg
 );

326 i‡–
pR•
 )

328 i‡–
pR•
->
°©us
 =
ZSuc˚ss
 &&ÖR•->
˙t
 )

330 
SîülAµ_TxAddr
.
addrMode
 = (
afAddrMode_t
)
Addr16Bô
;

331 
SîülAµ_TxAddr
.
addr
.
sh‹tAddr
 = 
pR•
->
nwkAddr
;

333 
SîülAµ_TxAddr
.
ídPoöt
 = 
pR•
->
ïLi°
[0];

336 
	`HÆLedSë
–
HAL_LED_4
, 
HAL_LED_MODE_ON
 );

338 
	`oßl_mem_‰ì
–
pR•
 );

343 
	}
}

355 
	$SîülAµ_H™dÀKeys
–
uöt8
 
shi·
, uöt8 
keys
 )

357 
zAddrTy≥_t
 
txAddr
;

359 i‡–
shi·
 )

361 i‡–
keys
 & 
HAL_KEY_SW_1
 )

364 i‡–
keys
 & 
HAL_KEY_SW_2
 )

367 i‡–
keys
 & 
HAL_KEY_SW_3
 )

370 i‡–
keys
 & 
HAL_KEY_SW_4
 )

376 i‡–
keys
 & 
HAL_KEY_SW_1
 )

380 i‡–
keys
 & 
HAL_KEY_SW_2
 )

382 
	`HÆLedSë
 ( 
HAL_LED_4
, 
HAL_LED_MODE_OFF
 );

385 
txAddr
.
addrMode
 = 
Addr16Bô
;

386 
txAddr
.
addr
.
sh‹tAddr
 = 0x0000;

387 
	`ZDP_EndDevi˚BödReq
–&
txAddr
, 
	`NLME_GëSh‹tAddr
(),

388 
SîülAµ_ïDesc
.
ídPoöt
,

389 
SERIALAPP_PROFID
,

390 
SERIALAPP_MAX_CLUSTERS
, (
cId_t
 *)
SîülAµ_Clu°îLi°
,

391 
SERIALAPP_MAX_CLUSTERS
, (
cId_t
 *)
SîülAµ_Clu°îLi°
,

392 
FALSE
 );

395 i‡–
keys
 & 
HAL_KEY_SW_3
 )

399 i‡–
keys
 & 
HAL_KEY_SW_4
 )

401 
	`HÆLedSë
 ( 
HAL_LED_4
, 
HAL_LED_MODE_OFF
 );

404 
txAddr
.
addrMode
 = 
AddrBrﬂdˇ°
;

405 
txAddr
.
addr
.
sh‹tAddr
 = 
NWK_BROADCAST_SHORTADDR
;

406 
	`ZDP_M©chDescReq
–&
txAddr
, 
NWK_BROADCAST_SHORTADDR
,

407 
SERIALAPP_PROFID
,

408 
SERIALAPP_MAX_CLUSTERS
, (
cId_t
 *)
SîülAµ_Clu°îLi°
,

409 
SERIALAPP_MAX_CLUSTERS
, (
cId_t
 *)
SîülAµ_Clu°îLi°
,

410 
FALSE
 );

413 
	}
}

427 
	$SîülAµ_Pro˚ssMSGCmd
–
afIncomögMSGPackë_t
 *
pkt
 )

429 
uöt8
 
°©
;

430 
uöt8
 
£qnb
;

431 
uöt8
 
dñay
;

433  
pkt
->
˛u°îId
 )

436 
SERIALAPP_CLUSTERID1
:

438 
	`oßl_mem˝y
(&
SîülAµ_RxAddr
, &(
pkt
->
§cAddr
), –
afAddrTy≥_t
 ));

440 
£qnb
 = 
pkt
->
cmd
.
D©a
[0];

443 i‡–(
£qnb
 > 
SîülAµ_RxSeq
) ||

444 ((
£qnb
 < 0x80 ) && ( 
SîülAµ_RxSeq
 > 0x80)) )

447 i‡–
	`HÆUARTWrôe
–
SERIAL_APP_PORT
, 
pkt
->
cmd
.
D©a
+1, (pkt->cmd.
D©aLígth
-1) ) )

450 
SîülAµ_RxSeq
 = 
£qnb
;

451 
°©
 = 
OTA_SUCCESS
;

455 
°©
 = 
OTA_SER_BUSY
;

460 
°©
 = 
OTA_DUP_MSG
;

464 
dñay
 = (
°©
 =
OTA_SER_BUSY
Ë? 
SERIALAPP_NAK_DELAY
 : 
SERIALAPP_ACK_DELAY
;

467 
SîülAµ_R•Buf
[0] = 
°©
;

468 
SîülAµ_R•Buf
[1] = 
£qnb
;

469 
SîülAµ_R•Buf
[2] = 
	`LO_UINT16
–
dñay
 );

470 
SîülAµ_R•Buf
[3] = 
	`HI_UINT16
–
dñay
 );

471 
	`oßl_£t_evít
–
SîülAµ_TaskID
, 
SERIALAPP_RESP_EVT
 );

472 
	`oßl_°›_timîEx
(
SîülAµ_TaskID
, 
SERIALAPP_RESP_EVT
);

476 
SERIALAPP_CLUSTERID2
:

477 i‡((
pkt
->
cmd
.
D©a
[1] =
SîülAµ_TxSeq
) &&

478 ((
pkt
->
cmd
.
D©a
[0] =
OTA_SUCCESS
Ë|| (pkt->cmd.D©a[0] =
OTA_DUP_MSG
)))

480 
SîülAµ_TxLí
 = 0;

481 
	`oßl_°›_timîEx
(
SîülAµ_TaskID
, 
SERIALAPP_SEND_EVT
);

486 
dñay
 = 
	`BUILD_UINT16
–
pkt
->
cmd
.
D©a
[2],Ökt->cmd.Data[3] );

487 
	`oßl_°¨t_timîEx
–
SîülAµ_TaskID
, 
SERIALAPP_SEND_EVT
, 
dñay
 );

494 
	}
}

505 
	$SîülAµ_Síd
()

507 #i‡
SERIAL_APP_LOOPBACK


508 i‡(
SîülAµ_TxLí
 < 
SERIAL_APP_TX_MAX
)

510 
SîülAµ_TxLí
 +
	`HÆUARTRód
(
SERIAL_APP_PORT
, 
SîülAµ_TxBuf
+SerialApp_TxLen+1,

511 
SERIAL_APP_TX_MAX
-
SîülAµ_TxLí
);

514 i‡(
SîülAµ_TxLí
)

516 ()
SîülAµ_TxAddr
;

517 i‡(
	`HÆUARTWrôe
(
SERIAL_APP_PORT
, 
SîülAµ_TxBuf
+1, 
SîülAµ_TxLí
))

519 
SîülAµ_TxLí
 = 0;

523 
	`oßl_£t_evít
(
SîülAµ_TaskID
, 
SERIALAPP_SEND_EVT
);

527 i‡(!
SîülAµ_TxLí
 &&

528 (
SîülAµ_TxLí
 = 
	`HÆUARTRód
(
SERIAL_APP_PORT
, 
SîülAµ_TxBuf
+1, 
SERIAL_APP_TX_MAX
)))

531 
SîülAµ_TxBuf
[0] = ++
SîülAµ_TxSeq
;

534 i‡(
SîülAµ_TxLí
)

536 i‡(
afSètus_SUCCESS
 !
	`AF_D©aReque°
(&
SîülAµ_TxAddr
,

537 (
ídPoötDesc_t
 *)&
SîülAµ_ïDesc
,

538 
SERIALAPP_CLUSTERID1
,

539 
SîülAµ_TxLí
+1, 
SîülAµ_TxBuf
,

540 &
SîülAµ_MsgID
, 0, 
AF_DEFAULT_RADIUS
))

542 
	`oßl_£t_evít
(
SîülAµ_TaskID
, 
SERIALAPP_SEND_EVT
);

546 
	}
}

557 
	$SîülAµ_Re•
()

559 i‡(
afSètus_SUCCESS
 !
	`AF_D©aReque°
(&
SîülAµ_RxAddr
,

560 (
ídPoötDesc_t
 *)&
SîülAµ_ïDesc
,

561 
SERIALAPP_CLUSTERID2
,

562 
SERIAL_APP_RSP_CNT
, 
SîülAµ_R•Buf
,

563 &
SîülAµ_MsgID
, 0, 
AF_DEFAULT_RADIUS
))

565 
	`oßl_£t_evít
(
SîülAµ_TaskID
, 
SERIALAPP_RESP_EVT
);

567 
	}
}

579 
	$SîülAµ_CÆlBack
(
uöt8
 
p‹t
, uöt8 
evít
)

581 ()
p‹t
;

583 i‡((
evít
 & (
HAL_UART_RX_FULL
 | 
HAL_UART_RX_ABOUT_FULL
 | 
HAL_UART_RX_TIMEOUT
)) &&

584 #i‡
SERIAL_APP_LOOPBACK


585 (
SîülAµ_TxLí
 < 
SERIAL_APP_TX_MAX
))

587 !
SîülAµ_TxLí
)

590 
	`SîülAµ_Síd
();

592 
	}
}

	@Projects/zstack/Utilities/SerialApp/Source/SerialApp.h

40 #i‚de‡
SERIALAPP_H


41 
	#SERIALAPP_H


	)

43 #ifde‡
__˝lu•lus


51 
	~"ZComDef.h
"

59 
	#SERIALAPP_ENDPOINT
 11

	)

61 
	#SERIALAPP_PROFID
 0x0F05

	)

62 
	#SERIALAPP_DEVICEID
 0x0001

	)

63 
	#SERIALAPP_DEVICE_VERSION
 0

	)

64 
	#SERIALAPP_FLAGS
 0

	)

66 
	#SERIALAPP_MAX_CLUSTERS
 2

	)

67 
	#SERIALAPP_CLUSTERID1
 1

	)

68 
	#SERIALAPP_CLUSTERID2
 2

	)

70 
	#SERIALAPP_SEND_EVT
 0x0001

	)

71 
	#SERIALAPP_RESP_EVT
 0x0002

	)

74 
	#SERIALAPP_ACK_DELAY
 1

	)

75 
	#SERIALAPP_NAK_DELAY
 16

	)

78 
	#OTA_SUCCESS
 
ZSuc˚ss


	)

79 
	#OTA_DUP_MSG
 (
ZSuc˚ss
+1)

	)

80 
	#OTA_SER_BUSY
 (
ZSuc˚ss
+2)

	)

89 
byã
 
SîülAµ_TaskID
;

98 
SîülAµ_Inô
–
byã
 
èsk_id
 );

103 
UINT16
 
SîülAµ_Pro˚ssEvít
–
byã
 
èsk_id
, UINT16 
evíts
 );

108 #ifde‡
__˝lu•lus


	@Projects/zstack/Utilities/Transmit/Source/OSAL_TransmitApp.c

46 
	~"ZComDef.h
"

47 
	~"hÆ_drivîs.h
"

48 
	~"OSAL.h
"

49 
	~"OSAL_Tasks.h
"

51 #i‡
deföed
 ( 
MT_TASK
 )

52 
	~"MT.h
"

53 
	~"MT_TASK.h
"

56 
	~"nwk.h
"

57 
	~"APS.h
"

58 
	~"ZDAµ.h
"

59 #i‡
deföed
 ( 
ZIGBEE_FREQ_AGILITY
 ) || deföed ( 
ZIGBEE_PANID_CONFLICT
 )

60 
	~"ZDNwkMgr.h
"

62 #i‡
deföed
 ( 
ZIGBEE_FRAGMENTATION
 )

63 
	~"≠s_‰ag.h
"

66 
	~"TønsmôAµ.h
"

73 c⁄° 
pTaskEvítH™dÀrFn
 
	gèsksAº
[] = {

74 
macEvítLo›
,

75 
nwk_evít_lo›
,

76 
HÆ_Pro˚ssEvít
,

77 #i‡
deföed
–
MT_TASK
 )

78 
MT_Pro˚ssEvít
,

80 
APS_evít_lo›
,

81 #i‡
deföed
 ( 
ZIGBEE_FRAGMENTATION
 )

82 
APSF_Pro˚ssEvít
,

84 
ZDAµ_evít_lo›
,

85 #i‡
deföed
 ( 
ZIGBEE_FREQ_AGILITY
 ) || deföed ( 
ZIGBEE_PANID_CONFLICT
 )

86 
ZDNwkMgr_evít_lo›
,

88 
TønsmôAµ_Pro˚ssEvít


91 c⁄° 
uöt8
 
	gèsksC¡
 = –
èsksAº
 ) / (ÅasksArr[0] );

92 
uöt16
 *
	gèsksEvíts
;

107 
	$oßlInôTasks
( )

109 
uöt8
 
èskID
 = 0;

111 
èsksEvíts
 = (
uöt16
 *)
	`oßl_mem_Æloc
––uöt16 ) * 
èsksC¡
);

112 
	`oßl_mem£t
–
èsksEvíts
, 0, (–
uöt16
 ) * 
èsksC¡
));

114 
	`macTaskInô
–
èskID
++ );

115 
	`nwk_öô
–
èskID
++ );

116 
	`HÆ_Inô
–
èskID
++ );

117 #i‡
	`deföed
–
MT_TASK
 )

118 
	`MT_TaskInô
–
èskID
++ );

120 
	`APS_Inô
–
èskID
++ );

121 #i‡
	`deföed
 ( 
ZIGBEE_FRAGMENTATION
 )

122 
	`APSF_Inô
–
èskID
++ );

124 
	`ZDAµ_Inô
–
èskID
++ );

125 #i‡
	`deföed
 ( 
ZIGBEE_FREQ_AGILITY
 ) || deföed ( 
ZIGBEE_PANID_CONFLICT
 )

126 
	`ZDNwkMgr_Inô
–
èskID
++ );

128 
	`TønsmôAµ_Inô
–
èskID
 );

129 
	}
}

	@Projects/zstack/Utilities/Transmit/Source/TransmitApp.c

91 
	~"OSAL.h
"

92 
	~"AF.h
"

93 
	~"ZDObje˘.h
"

94 
	~"ZDProfûe.h
"

96 
	~"TønsmôAµ.h
"

97 
	~"OnBﬂrd.h
"

99 
	~"DebugTø˚.h
"

102 
	~"hÆ_lcd.h
"

103 
	~"hÆ_Àd.h
"

104 
	~"hÆ_key.h
"

105 
	~"hÆ_u¨t.h
"

116 
	#TRANSMITAPP_STATE_WAITING
 0

	)

117 
	#TRANSMITAPP_STATE_SENDING
 1

	)

119 #i‡!
deföed
 ( 
RTR_NWK
 )

122 
	#TRANSMITAPP_DELAY_SEND


	)

123 
	#TRANSMITAPP_SEND_DELAY
 (
RESPONSE_POLL_RATE
 * 2)

125 

	)

128 
	#TRANSMITAPP_TX_OPTIONS
 
AF_DISCV_ROUTE


	)

130 
	#TRANSMITAPP_INITIAL_MSG_COUNT
 2

	)

132 
	#TRANSMITAPP_TRANSMIT_TIME
 4

133 
	#TRANSMITAPP_DISPLAY_TIMER
 (2 * 1000)

	)

135 #i‡
deföed
 ( 
TRANSMITAPP_FRAGMENTED
 )

136 
	#TRANSMITAPP_MAX_DATA_LEN
 225

	)

138 
	#TRANSMITAPP_MAX_DATA_LEN
 102

	)

150 
byã
 
	gTønsmôAµ_Msg
[ 
TRANSMITAPP_MAX_DATA_LEN
 ];

154 c⁄° 
cId_t
 
	gTønsmôAµ_Clu°îLi°
[
TRANSMITAPP_MAX_CLUSTERS
] =

156 
TRANSMITAPP_CLUSTERID_TESTMSG


159 c⁄° 
Sim∂eDes¸ùti⁄F‹m©_t
 
	gTønsmôAµ_Sim∂eDesc
 =

161 
TRANSMITAPP_ENDPOINT
,

162 
TRANSMITAPP_PROFID
,

163 
TRANSMITAPP_DEVICEID
,

164 
TRANSMITAPP_DEVICE_VERSION
,

165 
TRANSMITAPP_FLAGS
,

166 
TRANSMITAPP_MAX_CLUSTERS
,

167 (
cId_t
 *)
TønsmôAµ_Clu°îLi°
,

168 
TRANSMITAPP_MAX_CLUSTERS
,

169 (
cId_t
 *)
TønsmôAµ_Clu°îLi°


176 
ídPoötDesc_t
 
	gTønsmôAµ_ïDesc
;

191 
byã
 
	gTønsmôAµ_TaskID
;

193 
devSèãs_t
 
	gTønsmôAµ_NwkSèã
;

195 
byã
 
	gTønsmôAµ_TønsID
;

197 
afAddrTy≥_t
 
	gTønsmôAµ_D°Addr
;

199 
byã
 
	gTønsmôAµ_Sèã
;

202 
uöt32
 
	g˛kShdw
;

204 
uöt32
 
	grxTŸÆ
, 
	gtxTŸÆ
;

206 
uöt32
 
	grxAccum
, 
	gtxAccum
;

208 
byã
 
	gtimîOn
;

210 
byã
 
	gtimesToSíd
;

212 
uöt16
 
	gpktCou¡î
;

215 
uöt16
 
	gTønsmôAµ_MaxD©aLígth
;

220 
TønsmôAµ_Pro˚ssZDOMsgs
–
zdoIncomögMsg_t
 *
öMsg
 );

221 
TønsmôAµ_H™dÀKeys
–
byã
 
shi·
, byã 
keys
 );

222 
TønsmôAµ_MesßgeMSGCB
–
afIncomögMSGPackë_t
 *
pckt
 );

223 
TønsmôAµ_SídTheMesßge
( );

224 
TønsmôAµ_Ch™geSèã
( );

233 
TønsmôAµ_Di•œyResu…s
( );

249 
	$TønsmôAµ_Inô
–
byã
 
èsk_id
 )

251 #i‡!
	`deföed
 ( 
TRANSMITAPP_FRAGMENTED
 )

252 
afD©aReqMTU_t
 
mtu
;

254 
uöt16
 
i
;

256 
TønsmôAµ_TaskID
 = 
èsk_id
;

257 
TønsmôAµ_NwkSèã
 = 
DEV_INIT
;

258 
TønsmôAµ_TønsID
 = 0;

260 
pktCou¡î
 = 0;

262 
TønsmôAµ_Sèã
 = 
TRANSMITAPP_STATE_WAITING
;

268 
TønsmôAµ_D°Addr
.
addrMode
 = (
afAddrMode_t
)
AddrNŸPª£¡
;

269 
TønsmôAµ_D°Addr
.
ídPoöt
 = 0;

270 
TønsmôAµ_D°Addr
.
addr
.
sh‹tAddr
 = 0;

273 
TønsmôAµ_ïDesc
.
ídPoöt
 = 
TRANSMITAPP_ENDPOINT
;

274 
TønsmôAµ_ïDesc
.
èsk_id
 = &
TønsmôAµ_TaskID
;

275 
TønsmôAµ_ïDesc
.
sim∂eDesc


276 (
Sim∂eDes¸ùti⁄F‹m©_t
 *)&
TønsmôAµ_Sim∂eDesc
;

277 
TønsmôAµ_ïDesc
.
œãncyReq
 = 
noL©ícyReqs
;

280 
	`afRegi°î
–&
TønsmôAµ_ïDesc
 );

283 
	`Regi°îF‹Keys
–
TønsmôAµ_TaskID
 );

286 #i‡
	`deföed
 ( 
LCD_SUPPORTED
 )

287 
	`HÆLcdWrôeSåög
–"TønsmôAµ", 
HAL_LCD_LINE_2
 );

291 #i‡
	`deföed
 ( 
TRANSMITAPP_FRAGMENTED
 )

292 
TønsmôAµ_MaxD©aLígth
 = 
TRANSMITAPP_MAX_DATA_LEN
;

294 
mtu
.
kvp
 = 
FALSE
;

295 
mtu
.
≠s
.
£cuª
 = 
FALSE
;

296 
TønsmôAµ_MaxD©aLígth
 = 
	`afD©aReqMTU
–&
mtu
 );

300 
i
=0; i<
TønsmôAµ_MaxD©aLígth
; i++)

302 
TønsmôAµ_Msg
[
i
] = (
uöt8
) i;

305 
	`ZDO_Regi°îF‹ZDOMsg
–
TønsmôAµ_TaskID
, 
End_Devi˚_Böd_r•
 );

306 
	`ZDO_Regi°îF‹ZDOMsg
–
TønsmôAµ_TaskID
, 
M©ch_Desc_r•
 );

307 
	}
}

322 
UINT16
 
	$TønsmôAµ_Pro˚ssEvít
–
byã
 
èsk_id
, 
UINT16
 
evíts
 )

324 
afIncomögMSGPackë_t
 *
MSGpkt
;

325 
afD©aC⁄fúm_t
 *
afD©aC⁄fúm
;

326 ()
èsk_id
;

329 
ZSètus_t
 
£¡Sètus
;

330 
byã
 
£¡EP
;

332 i‡–
evíts
 & 
SYS_EVENT_MSG
 )

334 
MSGpkt
 = (
afIncomögMSGPackë_t
 *)
	`oßl_msg_ª˚ive
–
TønsmôAµ_TaskID
 );

335  
MSGpkt
 )

337  
MSGpkt
->
hdr
.
evít
 )

339 
ZDO_CB_MSG
:

340 
	`TønsmôAµ_Pro˚ssZDOMsgs
–(
zdoIncomögMsg_t
 *)
MSGpkt
 );

343 
KEY_CHANGE
:

344 
	`TønsmôAµ_H™dÀKeys
–((
keyCh™ge_t
 *)
MSGpkt
)->
°©e
, ((keyCh™ge_à*)MSGpkt)->
keys
 );

347 
AF_DATA_CONFIRM_CMD
:

351 
afD©aC⁄fúm
 = (
afD©aC⁄fúm_t
 *)
MSGpkt
;

352 
£¡EP
 = 
afD©aC⁄fúm
->
ídpoöt
;

353 
£¡Sètus
 = 
afD©aC⁄fúm
->
hdr
.
°©us
;

355 i‡–(
ZSuc˚ss
 =
£¡Sètus
) &&

356 (
TønsmôAµ_ïDesc
.
ídPoöt
 =
£¡EP
) )

358 #i‡!
	`deföed
 ( 
TRANSMITAPP_RANDOM_LEN
 )

359 
txAccum
 +
TønsmôAµ_MaxD©aLígth
;

361 i‡–!
timîOn
 )

363 
	`oßl_°¨t_timîEx
–
TønsmôAµ_TaskID
,
TRANSMITAPP_RCVTIMER_EVT
,

364 
TRANSMITAPP_DISPLAY_TIMER
);

365 
˛kShdw
 = 
	`oßl_GëSy°emClock
();

366 
timîOn
 = 
TRUE
;

371 
	`TønsmôAµ_SëSídEvt
();

374 
AF_INCOMING_MSG_CMD
:

375 
	`TønsmôAµ_MesßgeMSGCB
–
MSGpkt
 );

378 
ZDO_STATE_CHANGE
:

379 
TønsmôAµ_NwkSèã
 = (
devSèãs_t
)(
MSGpkt
->
hdr
.
°©us
);

387 
	`oßl_msg_dóŒoˇã
–(
uöt8
 *)
MSGpkt
 );

390 
MSGpkt
 = (
afIncomögMSGPackë_t
 *)
	`oßl_msg_ª˚ive
–
TønsmôAµ_TaskID
 );

394 ()
£¡Sètus
;

395 ()
£¡EP
;

398  (
evíts
 ^ 
SYS_EVENT_MSG
);

402 i‡–
evíts
 & 
TRANSMITAPP_SEND_MSG_EVT
 )

404 i‡–
TønsmôAµ_Sèã
 =
TRANSMITAPP_STATE_SENDING
 )

406 
	`TønsmôAµ_SídTheMesßge
();

410  (
evíts
 ^ 
TRANSMITAPP_SEND_MSG_EVT
);

414 i‡–
evíts
 & 
TRANSMITAPP_SEND_ERR_EVT
 )

416 
	`TønsmôAµ_SëSídEvt
();

419  (
evíts
 ^ 
TRANSMITAPP_SEND_ERR_EVT
);

423 i‡–
evíts
 & 
TRANSMITAPP_RCVTIMER_EVT
 )

426 
	`oßl_°¨t_timîEx
–
TønsmôAµ_TaskID
, 
TRANSMITAPP_RCVTIMER_EVT
,

427 
TRANSMITAPP_DISPLAY_TIMER
 );

428 
	`TønsmôAµ_Di•œyResu…s
();

430  (
evíts
 ^ 
TRANSMITAPP_RCVTIMER_EVT
);

435 
	}
}

449 
	$TønsmôAµ_Pro˚ssZDOMsgs
–
zdoIncomögMsg_t
 *
öMsg
 )

451  
öMsg
->
˛u°îID
 )

453 
End_Devi˚_Böd_r•
:

454 i‡–
	`ZDO_P¨£BödR•
–
öMsg
 ) =
ZSuc˚ss
 )

457 
	`HÆLedSë
–
HAL_LED_4
, 
HAL_LED_MODE_ON
 );

459 #i‡
	`deföed
(
BLINK_LEDS
)

463 
	`HÆLedSë
 ( 
HAL_LED_4
, 
HAL_LED_MODE_FLASH
 );

468 
M©ch_Desc_r•
:

470 
ZDO_A˘iveEndpoötR•_t
 *
pR•
 = 
	`ZDO_P¨£EPLi°R•
–
öMsg
 );

471 i‡–
pR•
 )

473 i‡–
pR•
->
°©us
 =
ZSuc˚ss
 &&ÖR•->
˙t
 )

475 
TønsmôAµ_D°Addr
.
addrMode
 = (
afAddrMode_t
)
Addr16Bô
;

476 
TønsmôAµ_D°Addr
.
addr
.
sh‹tAddr
 = 
pR•
->
nwkAddr
;

478 
TønsmôAµ_D°Addr
.
ídPoöt
 = 
pR•
->
ïLi°
[0];

481 
	`HÆLedSë
–
HAL_LED_4
, 
HAL_LED_MODE_ON
 );

483 
	`oßl_mem_‰ì
–
pR•
 );

488 
	}
}

504 
	$TønsmôAµ_H™dÀKeys
–
byã
 
shi·
, byã 
keys
 )

506 
zAddrTy≥_t
 
d°Addr
;

509 i‡–
shi·
 )

511 i‡–
keys
 & 
HAL_KEY_SW_1
 )

514 i‡–
keys
 & 
HAL_KEY_SW_2
 )

517 i‡–
keys
 & 
HAL_KEY_SW_3
 )

520 i‡–
keys
 & 
HAL_KEY_SW_4
 )

526 i‡–
keys
 & 
HAL_KEY_SW_1
 )

528 
	`TønsmôAµ_Ch™geSèã
();

531 i‡–
keys
 & 
HAL_KEY_SW_2
 )

533 
	`HÆLedSë
 ( 
HAL_LED_4
, 
HAL_LED_MODE_OFF
 );

536 
d°Addr
.
addrMode
 = 
Addr16Bô
;

537 
d°Addr
.
addr
.
sh‹tAddr
 = 0x0000;

538 
	`ZDP_EndDevi˚BödReq
–&
d°Addr
, 
	`NLME_GëSh‹tAddr
(),

539 
TønsmôAµ_ïDesc
.
ídPoöt
,

540 
TRANSMITAPP_PROFID
,

541 
TRANSMITAPP_MAX_CLUSTERS
, (
cId_t
 *)
TønsmôAµ_Clu°îLi°
,

542 
TRANSMITAPP_MAX_CLUSTERS
, (
cId_t
 *)
TønsmôAµ_Clu°îLi°
,

543 
FALSE
 );

546 i‡–
keys
 & 
HAL_KEY_SW_3
 )

548 
rxTŸÆ
 = 
txTŸÆ
 = 0;

549 
rxAccum
 = 
txAccum
 = 0;

550 
	`TønsmôAµ_Di•œyResu…s
();

553 i‡–
keys
 & 
HAL_KEY_SW_4
 )

555 
	`HÆLedSë
 ( 
HAL_LED_4
, 
HAL_LED_MODE_OFF
 );

558 
d°Addr
.
addrMode
 = 
AddrBrﬂdˇ°
;

559 
d°Addr
.
addr
.
sh‹tAddr
 = 
NWK_BROADCAST_SHORTADDR
;

560 
	`ZDP_M©chDescReq
–&
d°Addr
, 
NWK_BROADCAST_SHORTADDR
,

561 
TRANSMITAPP_PROFID
,

562 
TRANSMITAPP_MAX_CLUSTERS
, (
cId_t
 *)
TønsmôAµ_Clu°îLi°
,

563 
TRANSMITAPP_MAX_CLUSTERS
, (
cId_t
 *)
TønsmôAµ_Clu°îLi°
,

564 
FALSE
 );

567 
	}
}

584 
	$TønsmôAµ_MesßgeMSGCB
–
afIncomögMSGPackë_t
 *
pkt
 )

586 
öt16
 
i
;

587 
uöt8
 
îr‹
 = 
FALSE
;

589  
pkt
->
˛u°îId
 )

591 
TRANSMITAPP_CLUSTERID_TESTMSG
:

592 #i‡!
	`deföed
 ( 
TRANSMITAPP_RANDOM_LEN
 )

593 i‡(
pkt
->
cmd
.
D©aLígth
 !
TønsmôAµ_MaxD©aLígth
)

595 
îr‹
 = 
TRUE
;

599 
i
=4; i<
pkt
->
cmd
.
D©aLígth
; i++)

601 i‡(
pkt
->
cmd
.
D©a
[
i
] != i%256)

602 
îr‹
 = 
TRUE
;

605 i‡(
îr‹
)

608 
	`HÆLedSë
(
HAL_LED_1
, 
HAL_LED_MODE_ON
);

612 i‡–!
timîOn
 )

614 
	`oßl_°¨t_timîEx
–
TønsmôAµ_TaskID
, 
TRANSMITAPP_RCVTIMER_EVT
,

615 
TRANSMITAPP_DISPLAY_TIMER
 );

616 
˛kShdw
 = 
	`oßl_GëSy°emClock
();

617 
timîOn
 = 
TRUE
;

619 
rxAccum
 +
pkt
->
cmd
.
D©aLígth
;

627 
	}
}

638 
	$TønsmôAµ_SídTheMesßge
( )

640 
uöt16
 
Àn
;

641 
uöt8
 
tmp
;

645 
tmp
 = 
	`HI_UINT8
–
TønsmôAµ_TønsID
 );

646 
tmp
 += (tmp <= 9) ? ('0') : ('A' - 0x0A);

647 
TønsmôAµ_Msg
[2] = 
tmp
;

648 
tmp
 = 
	`LO_UINT8
–
TønsmôAµ_TønsID
 );

649 
tmp
 += (tmp <= 9) ? ('0') : ('A' - 0x0A);

650 
TønsmôAµ_Msg
[3] = 
tmp
;

652 
Àn
 = 
TønsmôAµ_MaxD©aLígth
;

654 #i‡
	`deföed
 ( 
TRANSMITAPP_RANDOM_LEN
 )

655 
Àn
 = (
uöt8
)(
	`oßl_ønd
() & 0x7F);

656 if–
Àn
 > 
TønsmôAµ_MaxD©aLígth
 ||Üen == 0 )

657 
Àn
 = 
TønsmôAµ_MaxD©aLígth
;

658 i‡–
Àn
 < 4 )

659 
Àn
 = 4;

662 
tmp
 = 
	`AF_D©aReque°
–&
TønsmôAµ_D°Addr
, &
TønsmôAµ_ïDesc
,

663 
TRANSMITAPP_CLUSTERID_TESTMSG
,

664 
Àn
, 
TønsmôAµ_Msg
,

665 &
TønsmôAµ_TønsID
,

666 
TRANSMITAPP_TX_OPTIONS
,

667 
AF_DEFAULT_RADIUS
 );

669 #i‡
	`deföed
 ( 
TRANSMITAPP_RANDOM_LEN
 )

670 i‡–
tmp
 =
afSètus_SUCCESS
 )

672 
txAccum
 +
Àn
;

676 i‡–
timesToSíd
 )

678 
timesToSíd
--;

680 }  (
timesToSíd
 !0Ë&& (
afSètus_SUCCESS
 =
tmp
) );

682 i‡–
afSètus_SUCCESS
 =
tmp
 )

684 
pktCou¡î
++;

689 
	`oßl_°¨t_timîEx
–
TønsmôAµ_TaskID
, 
TRANSMITAPP_SEND_ERR_EVT
, 10 );

691 
	}
}

702 
	$TønsmôAµ_Ch™geSèã
( )

704 i‡–
TønsmôAµ_Sèã
 =
TRANSMITAPP_STATE_WAITING
 )

706 
TønsmôAµ_Sèã
 = 
TRANSMITAPP_STATE_SENDING
;

707 
	`TønsmôAµ_SëSídEvt
();

708 
timesToSíd
 = 
TRANSMITAPP_INITIAL_MSG_COUNT
;

712 
TønsmôAµ_Sèã
 = 
TRANSMITAPP_STATE_WAITING
;

714 
	}
}

725 
	$TønsmôAµ_SëSídEvt
( )

727 #i‡
	`deföed
–
TRANSMITAPP_DELAY_SEND
 )

729 
	`oßl_°¨t_timîEx
–
TønsmôAµ_TaskID
,

730 
TRANSMITAPP_SEND_MSG_EVT
, 
TRANSMITAPP_SEND_DELAY
 );

733 
	`oßl_£t_evít
–
TønsmôAµ_TaskID
, 
TRANSMITAPP_SEND_MSG_EVT
 );

735 
	}
}

746 
	$TønsmôAµ_Di•œyResu…s
( )

748 #ifde‡
LCD_SUPPORTED


749 
	#LCD_W
 16

	)

750 
uöt32
 
rxShdw
, 
txShdw
, 
tmp
;

751 
byã
 
lcd_buf
[
LCD_W
+1];

752 
byã
 
idx
;

755 
uöt32
 
m£cs
 = 
	`oßl_GëSy°emClock
(Ë- 
˛kShdw
;

756 
˛kShdw
 = 
	`oßl_GëSy°emClock
();

758 
rxTŸÆ
 +
rxAccum
;

759 
txTŸÆ
 +
txAccum
;

761 #i‡
	`deföed
 ( 
LCD_SUPPORTED
 )

762 
rxShdw
 = (
rxAccum
 * 1000 + 
m£cs
/2) / msecs;

763 
txShdw
 = (
txAccum
 * 1000 + 
m£cs
/2) / msecs;

765 
	`oßl_mem£t
–
lcd_buf
, ' ', 
LCD_W
 );

766 
lcd_buf
[
LCD_W
] = 
NULL
;

768 
idx
 = 4;

769 
tmp
 = (
rxShdw
 >= 100000) ? 99999 :ÑxShdw;

772 
lcd_buf
[
idx
--] = (
uöt8
Ë('0' + (
tmp
 % 10));

773 
tmp
 /= 10;

774 }  
tmp
 );

776 
idx
 = 
LCD_W
-1;

777 
tmp
 = 
rxTŸÆ
;

780 
lcd_buf
[
idx
--] = (
uöt8
Ë('0' + (
tmp
 % 10));

781 
tmp
 /= 10;

782 }  
tmp
 );

784 
	`HÆLcdWrôeSåög
–(*)
lcd_buf
, 
HAL_LCD_LINE_1
 );

785 
	`oßl_mem£t
–
lcd_buf
, ' ', 
LCD_W
 );

787 
idx
 = 4;

788 
tmp
 = (
txShdw
 >= 100000) ? 99999 :ÅxShdw;

791 
lcd_buf
[
idx
--] = (
uöt8
Ë('0' + (
tmp
 % 10));

792 
tmp
 /= 10;

793 }  
tmp
 );

795 
idx
 = 
LCD_W
-1;

796 
tmp
 = 
txTŸÆ
;

799 
lcd_buf
[
idx
--] = (
uöt8
Ë('0' + (
tmp
 % 10));

800 
tmp
 /= 10;

801 }  
tmp
 );

803 
	`HÆLcdWrôeSåög
–(*)
lcd_buf
, 
HAL_LCD_LINE_2
 );

805 
	`DEBUG_INFO
–
COMPID_APP
, 
SEVERITY_INFORMATION
, 3, 
rxAccum
,

806 (
uöt16
)
m£cs
, (uöt16)
rxTŸÆ
 );

809 i‡–(
rxAccum
 =0Ë&& (
txAccum
 == 0) )

811 
	`oßl_°›_timîEx
–
TønsmôAµ_TaskID
, 
TRANSMITAPP_RCVTIMER_EVT
 );

812 
timîOn
 = 
FALSE
;

815 
rxAccum
 = 
txAccum
 = 0;

816 
	}
}

	@Projects/zstack/Utilities/Transmit/Source/TransmitApp.h

40 #i‚de‡
TRANSMITAPP_H


41 
	#TRANSMITAPP_H


	)

43 #ifde‡
__˝lu•lus


51 
	~"ZComDef.h
"

59 
	#TRANSMITAPP_ENDPOINT
 1

	)

61 
	#TRANSMITAPP_PROFID
 0x0F05

	)

62 
	#TRANSMITAPP_DEVICEID
 0x0001

	)

63 
	#TRANSMITAPP_DEVICE_VERSION
 0

	)

64 
	#TRANSMITAPP_FLAGS
 0

	)

66 
	#TRANSMITAPP_MAX_CLUSTERS
 1

	)

67 
	#TRANSMITAPP_CLUSTERID_TESTMSG
 1

	)

70 
	#TRANSMITAPP_SEND_MSG_EVT
 0x0001

	)

71 
	#TRANSMITAPP_RCVTIMER_EVT
 0x0002

	)

72 
	#TRANSMITAPP_SEND_ERR_EVT
 0x0004

	)

88 
TønsmôAµ_Inô
–
byã
 
èsk_id
 );

93 
UINT16
 
TønsmôAµ_Pro˚ssEvít
–
byã
 
èsk_id
, UINT16 
evíts
 );

95 
TønsmôAµ_Ch™geSèã
( );

96 
TønsmôAµ_SëSídEvt
( );

101 #ifde‡
__˝lu•lus


	@Projects/zstack/ZMain/TI2530DB/OnBoard.c

46 
	~"ZComDef.h
"

47 
	~"OnBﬂrd.h
"

48 
	~"OSAL.h
"

49 
	~"MT.h
"

50 
	~"MT_SYS.h
"

51 
	~"DebugTø˚.h
"

54 
	~"hÆ_lcd.h
"

55 
	~"hÆ_mcu.h
"

56 
	~"hÆ_timî.h
"

57 
	~"hÆ_key.h
"

58 
	~"hÆ_Àd.h
"

69 
	#NO_TASK_ID
 0xFF

	)

72 
	#MIN_RAM_INIT
 12

	)

82 
uöt8
 
	gOnbﬂrdKeyI¡E«bÀ
;

85 
uöt8
 
	gaExãndedAddªss
[8];

95 
uöt8
 
macMcuR™domByã
();

102 
byã
 
	gªgi°îedKeysTaskID
 = 
NO_TASK_ID
;

108 
ChkRe£t
( );

116 
	$InôBﬂrd
–
byã
 
Àvñ
 )

118 i‡–
Àvñ
 =
OB_COLD
 )

121 
	`oßl_öt_dißbÀ
–
INTS_ALL
 );

123 
	`HÆLedSë
–
HAL_LED_ALL
, 
HAL_LED_MODE_OFF
 );

125 
	`ChkRe£t
();

129 #ifde‡
ZTOOL_PORT


130 
	`MT_SysRe£tInd
();

134 
OnbﬂrdKeyI¡E«bÀ
 = 
HAL_KEY_INTERRUPT_DISABLE
;

135 
	`HÆKeyC⁄fig
–
OnbﬂrdKeyI¡E«bÀ
, 
OnBﬂrd_KeyCÆlback
);

137 
	}
}

147 
	$ChkRe£t
( )

149 
uöt8
 
Àd
;

150 
uöt8
 
rib
;

153 
rib
 = 
SLEEPSTA
 & 
LRESET
;

155 i‡–
rib
 =
RESETPO
 )

159 i‡–
rib
 =
RESETEX
 )

163 i‡–
rib
 =
RESETWD
 )

170 
	`HAL_DISABLE_INTERRUPTS
();

171 
Àd
 = 
HAL_LED_4
;

173 
	`HÆLedSë
–
Àd
, 
HAL_LED_MODE_ON
 );

174 
	`Mi¸oWaô
( 62500 );

175 
	`Mi¸oWaô
( 62500 );

176 
	`HÆLedSë
–
Àd
, 
HAL_LED_MODE_OFF
 );

177 
	`Mi¸oWaô
( 37500 );

178 
	`Mi¸oWaô
( 37500 );

179 i‡–!(
Àd
 >>= 1) )

180 
Àd
 = 
HAL_LED_4
;

183 
	}
}

198 
byã
 
	$Regi°îF‹Keys
–
byã
 
èsk_id
 )

201 i‡–
ªgi°îedKeysTaskID
 =
NO_TASK_ID
 )

203 
ªgi°îedKeysTaskID
 = 
èsk_id
;

204  ( 
åue
 );

207  ( 
Ál£
 );

208 
	}
}

220 
byã
 
	$OnBﬂrd_SídKeys
–
byã
 
keys
, byã 
°©e
 )

222 
keyCh™ge_t
 *
msgPå
;

224 i‡–
ªgi°îedKeysTaskID
 !
NO_TASK_ID
 )

227 
msgPå
 = (
keyCh™ge_t
 *)
	`oßl_msg_Æloˇã
( (keyChange_t) );

228 i‡–
msgPå
 )

230 
msgPå
->
hdr
.
evít
 = 
KEY_CHANGE
;

231 
msgPå
->
°©e
 = state;

232 
msgPå
->
keys
 = keys;

234 
	`oßl_msg_£nd
–
ªgi°îedKeysTaskID
, (
uöt8
 *)
msgPå
 );

236  ( 
ZSuc˚ss
 );

239  ( 
ZFaûuª
 );

240 
	}
}

252 
	$OnBﬂrd_KeyCÆlback
 ( 
uöt8
 
keys
, uöt8 
°©e
 )

254 
uöt8
 
shi·
;

256 ()
°©e
;

260 
shi·
 = (
OnbﬂrdKeyI¡E«bÀ
 =
HAL_KEY_INTERRUPT_ENABLE
Ë? 
Ál£
 : ((
keys
 & 
HAL_KEY_SW_6
Ë? 
åue
 : false);

262 i‡–
	`OnBﬂrd_SídKeys
–
keys
, 
shi·
 ) !
ZSuc˚ss
 )

265 i‡–
keys
 & 
HAL_KEY_SW_1
 )

269 i‡–
keys
 & 
HAL_KEY_SW_2
 )

273 i‡–
keys
 & 
HAL_KEY_SW_3
 )

277 i‡–
keys
 & 
HAL_KEY_SW_4
 )

281 i‡–
keys
 & 
HAL_KEY_SW_5
 )

285 i‡–
keys
 & 
HAL_KEY_SW_6
 )

289 
	}
}

309 
uöt16
 
	$OnBﬂrd_°ack_u£d
( )

311 
byã
 *
pSèck
 = (byã*)
MCU_RAM_END
;

312 
byã
 *
pHﬁd
;

313 
byã
 
found
 = 
Ál£
;

314 
byã
 
x
;

318  !
found
 && 
pSèck
 )

321 i‡–*
pSèck
 =
STACK_INIT_VALUE
 )

324 
pHﬁd
 = 
pSèck
;

325  
x
 = 0; x < 
MIN_RAM_INIT
; x++ )

327 i‡–*
pHﬁd
 !
STACK_INIT_VALUE
 )

330 
pHﬁd
--;

333 i‡–
x
 >
MIN_RAM_INIT
 )

334 
found
 = 
åue
;

336 i‡–!
found
 )

337 
pSèck
--;

340 i‡–
pSèck
 )

341  ( (
uöt16
)((
byã
*)
MCU_RAM_END
 - 
pSèck
) );

344 
	}
}

358 
	$_ôﬂ
(
uöt16
 
num
, 
byã
 *
buf
, byã 
ødix
)

360 
c
,
i
;

361 
byã
 *
p
, 
r°
[5];

363 
p
 = 
r°
;

364  
i
=0; i<5; i++,
p
++ )

366 
c
 = 
num
 % 
ødix
;

367 *
p
 = 
c
 + (( c < 10 ) ? '0' : '7');

368 
num
 /
ødix
;

369 i‡–!
num
 )

373  
c
=0 ; c<=
i
; c++ )

374 *
buf
++ = *
p
--;

376 *
buf
 = '\0';

377 
	}
}

389 
uöt16
 
	$Onbﬂrd_ønd
( )

391 
uöt16
 
øndNum
;

393 
øndNum
 = 
	`macMcuR™domByã
();

394 
øndNum
 +(
	`macMcuR™domByã
() << 8);

395  ( 
øndNum
 );

396 
	}
}

408 
	$Onbﬂrd_waô
–
uöt16
 
timeout
 )

410 
timeout
--)

412 
	`asm
("NOP");

413 
	`asm
("NOP");

414 
	`asm
("NOP");

416 
	}
}

426 
	$BigLight_On
( )

429 
	}
}

431 
	$BigLight_Off
( )

434 
	}
}

436 
	$BuzzîC⁄åﬁ
–
byã
 
⁄
 )

439 ()
⁄
;

440 
	}
}

442 
	$Dimmî
–
byã
 
lvl
 )

445 ()
lvl
;

446 
	}
}

449 
byã
 
	$GëU£rDùSw
( )

452 
	}
}

	@Projects/zstack/ZMain/TI2530DB/OnBoard.h

41 #i‚de‡
ONBOARD_H


42 
	#ONBOARD_H


	)

44 #ifde‡
__˝lu•lus


54 
	~"hÆ_mcu.h
"

55 
	~"hÆ_u¨t.h
"

56 
	~"hÆ_¶ìp.h
"

57 
	~"oßl.h
"

65 
uöt8
 
aExãndedAddªss
[8];

72 
	#TIMER_DECR_TIME
 1

73 

	)

75 
	#TICK_TIME
 1000

76 

	)

80 #ifde‡
CPU_16MHZ


81 
	#TICK_COUNT
 1

82 
	#RETUNE_THRESHOLD
 1

83 #ñi‡
deföed
 
CPU32MHZ


	)

84 
	#TICK_COUNT
 1

85 
	#RETUNE_THRESHOLD
 1

87 

	)

89 
	#OSAL_TIMER
 
HAL_TIMER_2


	)

94 
	#ALWAYS1
 0x01

95 
	#CACHDIS
 0x02

96 
	#FMAP0
 0x10

97 
	#FMAP1
 0x20

98 
	#FMAP
 0x30

99 
	#MUNIF
 0x40

100 

	)

102 
	#PMODESET
 0x01

103 

	)

105 
	#LRESET
 0x18

106 
	#RESETPO
 0x00

107 
	#RESETEX
 0x08

108 
	#RESETWD
 0x10

109 

	)

112 
	#GPIO_0
 0x01

113 
	#GPIO_1
 0x02

114 
	#GPIO_2
 0x04

115 
	#GPIO_3
 0x08

116 
	#GPIO_4
 0x10

117 
	#GPIO_5
 0x20

118 
	#GPIO_6
 0x40

119 
	#GPIO_7
 0x80

120 

	)

124 
	#WDINT0
 0x01

125 
	#WDINT1
 0x02

126 
	#WDINT
 0x03

127 
	#WDMODE
 0x04

128 
	#WDEN
 0x08

129 
	#WDCLR0
 0x10

130 
	#WDCLR1
 0x20

131 
	#WDCLR2
 0x40

132 
	#WDCLR3
 0x80

133 
	#WDCLR
 0xF0

134 

	)

136 
	#WDTISH
 0x03

137 
	#WDTIMD
 0x02

138 
	#WDTILG
 0x01

139 
	#WDTIMX
 0x00

140 

	)

142 
	#WDCLP1
 0xA0

143 
	#WDCLP2
 0x50

144 

	)

150 #ifde‡
CC2430DB


151 
	#INIT_DBIO
(Ë{ 
P1DIR
 |
GPIO_2
; 
P1_2
 = 0; }

	)

152 
	#STOP_DBIO
(Ë{ 
P1_2
 = 1; }

	)

154 
	#INIT_DBIO
()

	)

155 
	#STOP_DBIO
()

	)

160 
	#SW_BYPASS_NV
 
HAL_KEY_SW_5


161 
	#SW_BYPASS_START
 
HAL_KEY_SW_1


162 

	)

165 #ifde‡
LCD_SUPPORTED


166 #i‡!
deföed
 
DEBUG


167 
	#DEBUG
 0

	)

169 #i‡
LCD_SUPPORTED
==
DEBUG


170 
	#SERIAL_DEBUG_SUPPORTED


172 #ñ£ // NÿLCD suµ‹t

	)

173 #unde‡
SERIAL_DEBUG_SUPPORTED


178 #i‡
deföed
 (
ZAPP_P1
Ë|| deföed (
ZTOOL_P1
)

179 
	#SERIAL_PORT1
 
HAL_UART_PORT_0


	)

181 #unde‡
SERIAL_PORT1


184 #i‡
deföed
 (
ZAPP_P2
Ë|| deföed (
ZTOOL_P2
)

185 
	#SERIAL_PORT2
 
HAL_UART_PORT_1


	)

187 #unde‡
SERIAL_PORT2


191 #i‡
deföed
 (
ZAPP_P1
)

192 
	#ZAPP_PORT
 
SERIAL_PORT1


	)

193 #ñi‡
deföed
 (
ZAPP_P2
)

194 
	#ZAPP_PORT
 
SERIAL_PORT2


	)

196 #unde‡
ZAPP_PORT


198 #i‡
deföed
 (
ZTOOL_P1
)

199 
	#ZTOOL_PORT
 
SERIAL_PORT1


	)

200 #ñi‡
deföed
 (
ZTOOL_P2
)

201 
	#ZTOOL_PORT
 
SERIAL_PORT2


	)

203 #unde‡
ZTOOL_PORT


206 
	#MT_UART_TX_BUFF_MAX
 128

	)

207 
	#MT_UART_RX_BUFF_MAX
 128

	)

208 
	#MT_UART_THRESHOLD
 (
MT_UART_RX_BUFF_MAX
 / 2)

	)

209 
	#MT_UART_IDLE_TIMEOUT
 6

	)

212 
	#Re£tRós⁄
(Ë((
SLEEPSTA
 >> 3Ë& 0x03)

	)

215 
	#W©chDogE«bÀ
(
wdti
Ë\

	)

217 
	gWDCTL
 = 
WDCLP1
 | 
WDEN
 | (
wdti
 & 
WDINT
); \

218 
	gWDCTL
 = 
WDCLP2
 | 
WDEN
 | (
wdti
 & 
WDINT
); \

223 
	#Sy°emRe£t
(Ë\

	)

225 
HAL_DISABLE_INTERRUPTS
(); \

226 
W©chDogE«bÀ
–
WDTISH
 ); \

227 1Ë
asm
("NOP"); \

231 
	#BoŸLﬂdî
(Ë\

	)

233 
HAL_DISABLE_INTERRUPTS
(); \

234 
	gmboxMsg
.
	gBoŸRód
 = 
MBOX_SBL_SHELL
; \

235 
W©chDogE«bÀ
–
WDTISH
 ); \

236 1Ë
asm
("NOP"); \

240 
	#READ_BOOT_MBOX
(
x
Ë\

	)

242 
	gx
 = (
uöt32
)
mboxMsg
.
AµRód
; \

243 
	gmboxMsg
.
	gBoŸRód
 = 0; \

247 
	#Mi¸oWaô
(
t
Ë
	`Onbﬂrd_waô
—)

	)

249 
	#OSAL_SET_CPU_INTO_SLEEP
(
timeout
Ë
	`hÆSÀï
—imeout);

	)

252 
	#MCU_RAM_BEG
 0xE000

	)

253 
	#MCU_RAM_END
 0xFFFF

	)

254 
	#MCU_RAM_LEN
 (
MCU_RAM_END
 - 
MCU_RAM_BEG
 + 1)

	)

257 
	#CSTK_PTR
 
	`_Pøgma
("£gmít=\"XSP\""Ë
	`__£gmít_begö
("XSP")

	)

258 
	#CSTK_BEG
 
	`_Pøgma
("£gmít=\"XSTACK\""Ë
	`__£gmít_begö
("XSTACK")

	)

259 
	#RSTK_END
 
	`_Pøgma
("£gmít=\"ISTACK\""Ë
	`__£gmít_íd
("ISTACK")

	)

262 
	#STACK_INIT_VALUE
 0xCD

	)

265 #i‡!
deföed
–
INT_HEAP_LEN
 )

266 #i‡
deföed
–
ZDO_COORDINATOR
 )

267 
	#INT_HEAP_LEN
 3072

	)

268 #ñi‡
deföed
–
RTR_NWK
 )

269 
	#INT_HEAP_LEN
 3072

	)

271 
	#INT_HEAP_LEN
 2048

	)

276 
	#MAXMEMHEAP
 
INT_HEAP_LEN


277 

	)

278 
	#KEY_CHANGE_SHIFT_IDX
 1

	)

279 
	#KEY_CHANGE_KEYS_IDX
 2

	)

282 
	#MAX_LCD_CHARS
 16

	)

285 
	#OB_COLD
 0

	)

286 
	#OB_WARM
 1

	)

287 
	#OB_READY
 2

	)

289 #ifde‡
LCD_SUPPORTED


290 
	#BUZZER_OFF
 0

	)

291 
	#BUZZER_ON
 1

	)

292 
	#BUZZER_BLIP
 2

	)

297 
oßl_evít_hdr_t
 
	ghdr
;

298 
uöt8
 
	g°©e
;

299 
uöt8
 
	gkeys
;

300 } 
	tkeyCh™ge_t
;

314 
InôBﬂrd
–
uöt8
 
Àvñ
 );

319 
uöt32
 
TimîEœp£d
( );

324 
uöt8
 
Regi°îF‹Keys
–uöt8 
èsk_id
 );

331 
uöt8
 
OnBﬂrd_SídKeys
–uöt8 
keys
, uöt8 
shi·
);

336 
uöt8
 
OnBﬂrd_GëKeys
( );

343 
_ôﬂ
(
uöt16
 
num
, 
uöt8
 *
buf
, uöt8 
ødix
);

346 
Dimmî
–
uöt8
 
lvl
 );

352 
BigLight_On
( );

357 
BigLight_Off
( );

363 
BuzzîC⁄åﬁ
–
uöt8
 
⁄
 );

368 
uöt8
 
GëU£rDùSw
( );

373 
uöt16
 
OnBﬂrd_°ack_u£d
( );

378 
OnBﬂrd_KeyCÆlback
 ( 
uöt8
 
keys
, uöt8 
°©e
 );

383 
uöt16
 
Onbﬂrd_ønd
( );

388 
Onbﬂrd_waô
–
uöt16
 
timeout
 );

393 #ifde‡
__˝lu•lus


	@Projects/zstack/ZMain/TI2530DB/ZMain.c

45 
	~"ZComDef.h
"

46 
	~"OSAL.h
"

47 
	~"OSAL_Nv.h
"

48 
	~"OnBﬂrd.h
"

49 
	~"ZMAC.h
"

51 #i‚de‡
NONWK


52 
	~"AF.h
"

56 
	~"hÆ_lcd.h
"

57 
	~"hÆ_Àd.h
"

58 
	~"hÆ_adc.h
"

59 
	~"hÆ_drivîs.h
"

60 
	~"hÆ_as£π.h
"

61 
	~"hÆ_Êash.h
"

72 
	#MAX_VDD_SAMPLES
 3

	)

73 
	#ZMAIN_VDD_LIMIT
 
HAL_ADC_VDD_LIMIT_4


	)

91 
boﬁ
 
HÆAdcCheckVdd
 (
uöt8
 
limô
);

92 
HÆLcdWrôeSåög
 ( *
°r
, 
uöt8
 
›ti⁄
);

102 
zmaö_dev_öfo
( );

103 
zmaö_ext_addr
( );

104 
zmaö_øm_öô
( );

105 
zmaö_vdd_check
( );

107 #ifde‡
LCD_SUPPORTED


108 
zmaö_lcd_öô
( );

116 
	$maö
( )

119 
	`oßl_öt_dißbÀ
–
INTS_ALL
 );

122 
	`HAL_BOARD_INIT
();

125 
	`zmaö_vdd_check
();

128 
	`zmaö_øm_öô
();

131 
	`InôBﬂrd
–
OB_COLD
 );

134 
	`HÆDrivîInô
();

137 
	`oßl_nv_öô
–
NULL
 );

140 
	`zgInô
();

143 
	`ZMacInô
();

146 
	`zmaö_ext_addr
();

148 #i‚de‡
NONWK


150 
	`afInô
();

154 
	`oßl_öô_sy°em
();

157 
	`oßl_öt_íabÀ
–
INTS_ALL
 );

160 
	`InôBﬂrd
–
OB_READY
 );

163 
	`zmaö_dev_öfo
();

166 #ifde‡
LCD_SUPPORTED


167 
	`zmaö_lcd_öô
();

170 #ifde‡
WDT_IN_PM1


172 
	`W©chDogE«bÀ
–
WDTIMX
 );

175 
	`oßl_°¨t_sy°em
();

179 
	}
}

186 
	$zmaö_vdd_check
( )

188 
uöt8
 
vdd_∑s£d_cou¡
 = 0;

189 
boﬁ
 
toggÀ
 = 0;

193  
vdd_∑s£d_cou¡
 < 
MAX_VDD_SAMPLES
 )

195 i‡–
	`HÆAdcCheckVdd
 (
ZMAIN_VDD_LIMIT
) )

197 
vdd_∑s£d_cou¡
++;

198 
	`Mi¸oWaô
 (10000);

202 
vdd_∑s£d_cou¡
 = 0;

203 
	`Mi¸oWaô
 (50000);

204 
	`Mi¸oWaô
 (50000);

208 i‡(
vdd_∑s£d_cou¡
 == 0)

210 i‡((
toggÀ
 = !(toggle)))

211 
	`HAL_TOGGLE_LED1
();

213 
	`HAL_TOGGLE_LED2
();

218 
	`HAL_TURN_OFF_LED1
();

219 
	`HAL_TURN_OFF_LED2
();

220 
	}
}

238 
	$zmaö_ext_addr
()

240 
uöt8
 
nuŒAddr
[
Z_EXTADDR_LEN
] = {0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF};

241 
uöt8
 
wrôeNV
 = 
TRUE
;

244 i‡((
SUCCESS
 !
	`oßl_nv_ôem_öô
(
ZCD_NV_EXTADDR
, 
Z_EXTADDR_LEN
, 
NULL
)) ||

245 (
SUCCESS
 !
	`oßl_nv_ªad
(
ZCD_NV_EXTADDR
, 0, 
Z_EXTADDR_LEN
, 
aExãndedAddªss
)) ||

246 (
	`oßl_memcmp
(
aExãndedAddªss
, 
nuŒAddr
, 
Z_EXTADDR_LEN
)))

250 
	`HÆFœshRód
(
HAL_FLASH_IEEE_PAGE
, 
HAL_FLASH_IEEE_OSET
, 
aExãndedAddªss
, 
Z_EXTADDR_LEN
);

252 i‡(
	`oßl_memcmp
(
aExãndedAddªss
, 
nuŒAddr
, 
Z_EXTADDR_LEN
))

255 i‡(!
	`oßl_memcmp
((
uöt8
 *)(
P_INFOPAGE
+
HAL_INFOP_IEEE_OSET
), 
nuŒAddr
, 
Z_EXTADDR_LEN
))

257 
	`oßl_mem˝y
(
aExãndedAddªss
, (
uöt8
 *)(
P_INFOPAGE
+
HAL_INFOP_IEEE_OSET
), 
Z_EXTADDR_LEN
);

261 
uöt8
 
idx
;

263 #i‡!
	`deföed
 ( 
NV_RESTORE
 )

264 
wrôeNV
 = 
FALSE
;

271 
idx
 = 0; idx < (
Z_EXTADDR_LEN
 - 2);)

273 
uöt16
 
øndy
 = 
	`oßl_ønd
();

274 
aExãndedAddªss
[
idx
++] = 
	`LO_UINT16
(
øndy
);

275 
aExãndedAddªss
[
idx
++] = 
	`HI_UINT16
(
øndy
);

278 #i‡
deföed
 
ZDO_COORDINATOR


279 
aExãndedAddªss
[
idx
++] = 0x10;

280 #ñi‡
deföed
 
RTR_NWK


281 
aExãndedAddªss
[
idx
++] = 0x20;

283 
aExãndedAddªss
[
idx
++] = 0x30;

286 
aExãndedAddªss
[
idx
] = 0xF8;

290 i‡–
wrôeNV
 )

292 ()
	`oßl_nv_wrôe
(
ZCD_NV_EXTADDR
, 0, 
Z_EXTADDR_LEN
, 
aExãndedAddªss
);

297 ()
	`ZMacSëReq
(
MAC_EXTENDED_ADDRESS
, 
aExãndedAddªss
);

298 
	}
}

316 
	$zmaö_dev_öfo
()

318 #ifde‡
LCD_SUPPORTED


319 
uöt8
 
i
;

320 
uöt8
 *
xad
;

321 
uöt8
 
lcd_buf
[
Z_EXTADDR_LEN
*2+1];

324 
xad
 = 
aExãndedAddªss
 + 
Z_EXTADDR_LEN
 - 1;

326 
i
 = 0; i < 
Z_EXTADDR_LEN
*2; 
xad
--)

328 
uöt8
 
ch
;

329 
ch
 = (*
xad
 >> 4) & 0x0F;

330 
lcd_buf
[
i
++] = 
ch
 + (( ch < 10 ) ? '0' : '7');

331 
ch
 = *
xad
 & 0x0F;

332 
lcd_buf
[
i
++] = 
ch
 + (( ch < 10 ) ? '0' : '7');

334 
lcd_buf
[
Z_EXTADDR_LEN
*2] = '\0';

335 
	`HÆLcdWrôeSåög
–"IEEE: ", 
HAL_LCD_LINE_2
);

336 
	`HÆLcdWrôeSåög
–(*)
lcd_buf
, 
HAL_LCD_LINE_3
 );

338 
	}
}

345 
	$zmaö_øm_öô
( )

347 
uöt8
 *
íd
;

348 
uöt8
 *
±r
;

351 
íd
 = (
uöt8
*)
CSTK_BEG
;

352 
±r
 = (
uöt8
*)(*–
__id©a
 
uöt16
*)(
CSTK_PTR
));

353  --
±r
 > 
íd
 )

354 *
±r
 = 
STACK_INIT_VALUE
;

357 
±r
 = (
uöt8
*)
RSTK_END
 - 1;

358  --
±r
 > (
uöt8
*)
SP
 )

359 *(
__id©a
 
uöt8
*)
±r
 = 
STACK_INIT_VALUE
;

360 
	}
}

362 #ifde‡
LCD_SUPPORTED


368 
	$zmaö_lcd_öô
 ( )

370 #ifde‡
SERIAL_DEBUG_SUPPORTED


372 
	`HÆLcdWrôeSåög
–"TexasIn°rumíts", 
HAL_LCD_LINE_1
 );

374 #i‡
	`deföed
–
MT_MAC_FUNC
 )

375 #i‡
	`deföed
–
ZDO_COORDINATOR
 )

376 
	`HÆLcdWrôeSåög
–"MAC-MT Co‹d", 
HAL_LCD_LINE_2
 );

378 
	`HÆLcdWrôeSåög
–"MAC-MT Devi˚", 
HAL_LCD_LINE_2
 );

380 #ñi‡
	`deföed
–
MT_NWK_FUNC
 )

381 #i‡
	`deföed
–
ZDO_COORDINATOR
 )

382 
	`HÆLcdWrôeSåög
–"NWK Co‹dö©‹", 
HAL_LCD_LINE_2
 );

384 
	`HÆLcdWrôeSåög
–"NWK Devi˚", 
HAL_LCD_LINE_2
 );

389 
	}
}

	@/usr/include/ioCC2530.h

12 #i‚de‡
IOCC2530_H


13 
	#IOCC2530_H


	)

19 #ifde‡
__IAR_SYSTEMS_ICC__


20 #¥agm®
œnguage
=
exãnded


21 
	#SFR
(
«me
,
addr
Ë
__s‰
 
__no_öô
 vﬁ©ûê«mê@áddr;

	)

22 
	#SFRBIT
(
«me
, 
addr
, 
bô7
, 
bô6
, 
bô5
, 
bô4
, 
bô3
, 
bô2
, 
bô1
, 
bô0
Ë\

	)

23 
__s‰
 
__no_öô
 volatile \

25 
	g«me
; \

27 
	gbô0
 : 1; \

28 
	gbô1
 : 1; \

29 
	gbô2
 : 1; \

30 
	gbô3
 : 1; \

31 
	gbô4
 : 1; \

32 
	gbô5
 : 1; \

33 
	gbô6
 : 1; \

34 
	gbô7
 : 1; \

36 } @ 
	gaddr
;

37 
	#SBIT
(
«me
,
addr
Ë

	)

38 
	#XREG
(
addr
Ë((vﬁ©ûê
__xd©a
 *Ë0)[addr]

	)

39 
	#PXREG
(
addr
Ë((vﬁ©ûê
__xd©a
 *Ëaddr)

	)

40 
	#VECT
(
num
,
addr
Ë
	)
addr

42 #ñi‡
deföed
 
__IAR_SYSTEMS_ASM__


43 
	#SFR
(
«me
,
addr
Ë«mê
DEFINE
 
	)
addr

44 
SFRBITMACRO
 
MACRO
 
	gt
, 
	gaddr
, 
	gbô7
 , 
	gbô6
, 
	gbô5
, 
	gbô4
, 
	gbô3
, 
	gbô2
, 
	gbô1
, 
bô0


45 
t
 
DEFINE
 
addr


46 
bô7
 
DEFINE
 
	gaddr
.7

47 
bô6
 
DEFINE
 
	gaddr
.6

48 
bô5
 
DEFINE
 
	gaddr
.5

49 
bô4
 
DEFINE
 
	gaddr
.4 ;; 
	gNB
: dÿ
nŸ
 
modify
 
ödíèti⁄
 
of
 
this
 
ma¸o


50 
bô3
 
DEFINE
 
addr
.3

51 
bô2
 
DEFINE
 
addr
.2

52 
bô1
 
DEFINE
 
addr
.1

53 
bô0
 
DEFINE
 
addr
.0

54 
ENDM


55 
	#SFRBIT
(
«me
, 
addr
, 
bô7
, 
bô6
, 
bô5
, 
bô4
, 
bô3
, 
bô2
, 
bô1
, 
bô0
Ë\

	)

56 
	gSFRBITMACRO
 <
	g«me
>, <
	gaddr
>, <
	gbô7
>, <
	gbô6
>, <
	gbô5
>, <
	gbô4
>, <
	gbô3
>, <
	gbô2
>, <
	gbô1
>, <
	gbô0
>

57 
	#SBIT
(
«me
,
addr
Ë«mê
DEFINE
 
	)
addr

58 
	#XREG
(
addr
Ë
	)
addr

59 
	#VECT
(
num
,
addr
Ë
	)
addr

61 
	#SP
 
SPx


	)

62 
	#ACC
 
ACCx


	)

63 
	#B
 
Bx


	)

64 
	#PSW
 
PSWx


	)

65 
	#CY
 
CYx


	)

66 
	#AC
 
ACx


	)

67 
	#F0
 
F0x


	)

68 
	#RS1
 
RS1x


	)

69 
	#RS0
 
RS0x


	)

70 
	#OV
 
OVx


	)

71 
	#P
 
Px


	)

73 #ñi‡
deföed
 
__KEIL__


74 
	#SFR
(
«me
,
addr
Ë
s‰
Çamêaddr;

	)

75 
	#SFRBIT
(
«me
, 
addr
, 
bô7
, 
bô6
, 
bô5
, 
bô4
, 
bô3
, 
bô2
, 
bô1
, 
bô0
Ë\

	)

76 
s‰
 
	g«me
 = 
addr
; \

77 
sbô
 
	gbô7
 = 
addr
^7; \

78 
sbô
 
	gbô6
 = 
addr
^6; \

79 
sbô
 
	gbô5
 = 
addr
^5; \

80 
sbô
 
	gbô4
 = 
addr
^4; \

81 
sbô
 
	gbô3
 = 
addr
^3; \

82 
sbô
 
	gbô2
 = 
addr
^2; \

83 
sbô
 
	gbô1
 = 
addr
^1; \

84 
sbô
 
	gbô0
 = 
addr
^0;

85 
	#SBIT
(
«me
,
addr
Ë
sbô
Çamêaddr;

	)

86 
	#VECT
(
num
,
addr
Ë
	)
num

88 #ifde‡
__C51__


89 
	#XREG
(
addr
Ë((vﬁ©ûê
xd©a
 *Ë0)[addr]

	)

90 
	#PXREG
(
addr
Ë((vﬁ©ûê
__xd©a
 *Ëaddr)

	)

91 #ñi‡
deföed
 
__AX51__
 || deföed 
__A51__


92 
	#XREG
(
addr
Ë
	)
addr

93 
	#PXREG
(
addr
Ë
	)
addr

98 #ñi‡
deföed
 
SDCC


99 
	#SFR
(
«me
, 
addr
Ë
__s‰
 
	`__©
◊ddrË«me;

	)

100 
	#SBIT
(
«me
, 
addr
, 
bô
Ë
__sbô
 
	`__©
◊ddr+bôË«me;

	)

101 
	#SFRBIT
(
«me
, 
addr
, 
bô7
, 
bô6
, 
bô5
, 
bô4
, 
bô3
, 
bô2
, 
bô1
, 
bô0
Ë\

	)

102 
__s‰
 
	$__©
(
addr
Ë
«me
; \

103 
__sbô
 
	`__©
(
addr
+7Ë
bô7
; \

104 
__sbô
 
	`__©
(
addr
+6Ë
bô6
; \

105 
__sbô
 
	`__©
(
addr
+5Ë
bô5
; \

106 
__sbô
 
	`__©
(
addr
+4Ë
bô4
; \

107 
__sbô
 
	`__©
(
addr
+3Ë
bô3
; \

108 
__sbô
 
	`__©
(
addr
+2Ë
bô2
; \

109 
__sbô
 
	`__©
(
addr
+1Ë
bô1
; \

110 
__sbô
 
	`__©
(
addr
+0Ë
bô0
;

111 
	#XREG
(
addr
Ë((
__xd©a
 vﬁ©ûê*Ë0)[addr]

	)

112 
	#PXREG
(
addr
Ë((
__xd©a
 vﬁ©ûê*Ëaddr)

	)

113 
	#VECT
(
num
,
addr
Ë
	)
num

124 
	#RFERR_VECTOR
 
	`VECT
–0, 0x03 )

	)

125 
	#ADC_VECTOR
 
	`VECT
–1, 0x0B )

	)

126 
	#URX0_VECTOR
 
	`VECT
–2, 0x13 )

	)

127 
	#URX1_VECTOR
 
	`VECT
–3, 0x1B )

	)

128 
	#ENC_VECTOR
 
	`VECT
–4, 0x23 )

	)

129 
	#ST_VECTOR
 
	`VECT
–5, 0x2B )

	)

130 
	#P2INT_VECTOR
 
	`VECT
–6, 0x33 )

	)

131 
	#UTX0_VECTOR
 
	`VECT
–7, 0x3B )

	)

132 
	#DMA_VECTOR
 
	`VECT
–8, 0x43 )

	)

133 
	#T1_VECTOR
 
	`VECT
–9, 0x4B )

	)

134 
	#T2_VECTOR
 
	`VECT
–10, 0x53 )

	)

135 
	#T3_VECTOR
 
	`VECT
–11, 0x5B )

	)

136 
	#T4_VECTOR
 
	`VECT
–12, 0x63 )

	)

137 
	#P0INT_VECTOR
 
	`VECT
–13, 0x6B )

	)

138 
	#UTX1_VECTOR
 
	`VECT
–14, 0x73 )

	)

139 
	#P1INT_VECTOR
 
	`VECT
–15, 0x7B )

	)

140 
	#RF_VECTOR
 
	`VECT
–16, 0x83 )

	)

141 
	#WDT_VECTOR
 
	`VECT
–17, 0x8B )

	)

155 
	$SFRBIT
–
P0
 , 0x80, 
P0_7
, 
P0_6
, 
P0_5
, 
P0_4
, 
P0_3
, 
P0_2
, 
P0_1
, 
P0_0
 )

156 
	$SFR
–
SP
 , 0x81 )

157 
	$SFR
–
DPL0
 , 0x82 )

158 
	$SFR
–
DPH0
 , 0x83 )

159 
	$SFR
–
DPL1
 , 0x84 )

160 
	$SFR
–
DPH1
 , 0x85 )

161 
	$SFR
–
U0CSR
 , 0x86 )

162 
	$SFR
–
PCON
 , 0x87 )

165 
	$SFRBIT
–
TCON
 , 0x88, 
URX1IF
, 
_TCON6
, 
ADCIF
, 
_TCON4
, 
URX0IF
, 
IT1
, 
RFERRIF
, 
IT0
 )

166 
	$SFR
–
P0IFG
 , 0x89 )

167 
	$SFR
–
P1IFG
 , 0x8A )

168 
	$SFR
–
P2IFG
 , 0x8B )

169 
	$SFR
–
PICTL
 , 0x8C )

170 
	$SFR
–
P1IEN
 , 0x8D )

171 
	$SFR
–
_SFR8E
 , 0x8E )

172 
	$SFR
–
P0INP
 , 0x8F )

175 
	$SFRBIT
–
P1
 , 0x90, 
P1_7
, 
P1_6
, 
P1_5
, 
P1_4
, 
P1_3
, 
P1_2
, 
P1_1
, 
P1_0
 )

176 
	$SFR
–
RFIRQF1
 , 0x91 )

177 
	$SFR
–
DPS
 , 0x92 )

178 
	$SFR
–
MPAGE
 , 0x93 )

179 
	$SFR
–
T2CTRL
 , 0x94 )

180 
	$SFR
–
ST0
 , 0x95 )

181 
	$SFR
–
ST1
 , 0x96 )

182 
	$SFR
–
ST2
 , 0x97 )

185 
	$SFRBIT
–
S0CON
 , 0x98, 
_S0CON7
, 
_S0CON6
, 
_S0CON5
, 
_S0CON4
, 
_S0CON3
, 
_S0CON2
, 
ENCIF_1
, 
ENCIF_0
 )

186 
	$SFR
–
_SFR99
 , 0x99 )

187 
	$SFR
–
IEN2
 , 0x9A )

188 
	$SFR
–
S1CON
 , 0x9B )

189 
	$SFR
–
T2CSPCFG
 , 0x9C )

190 
	$SFR
–
T2EVTCFG
 , 0x9C )

191 
	$SFR
–
SLEEPSTA
 , 0x9D )

192 
	$SFR
–
CLKCONSTA
 , 0x9E )

193 
	$SFR
–
FMAP
 , 0x9F )

196 
	$SFRBIT
–
P2
 , 0xA0, 
_P2_7
, 
_P2_6
, 
_P2_5
, 
P2_4
, 
P2_3
, 
P2_2
, 
P2_1
, 
P2_0
 )

197 
	$SFR
–
T2IRQF
 , 0xA1 )

198 
	$SFR
–
T2M0
 , 0xA2 )

199 
	$SFR
–
T2M1
 , 0xA3 )

200 
	$SFR
–
T2MOVF0
 , 0xA4 )

201 
	$SFR
–
T2MOVF1
 , 0xA5 )

202 
	$SFR
–
T2MOVF2
 , 0xA6 )

203 
	$SFR
–
T2IRQM
 , 0xA7 )

206 
	$SFRBIT
–
IEN0
 , 0xA8, 
EA
, 
_IEN06
, 
STIE
, 
ENCIE
, 
URX1IE
, 
URX0IE
, 
ADCIE
, 
RFERRIE
 )

207 
	$SFR
–
IP0
 , 0xA9 )

208 
	$SFR
–
_SFRAA
 , 0xAA )

209 
	$SFR
–
P0IEN
 , 0xAB )

210 
	$SFR
–
P2IEN
 , 0xAC )

211 
	$SFR
–
STLOAD
 , 0xAD )

212 
	$SFR
–
PMUX
 , 0xAE )

213 
	$SFR
–
T1STAT
 , 0xAF )

215 
	$SFR
–
_SFRB0
 , 0xB0 )

216 
	$SFR
–
ENCDI
 , 0xB1 )

217 
	$SFR
–
ENCDO
 , 0xB2 )

218 
	$SFR
–
ENCCS
 , 0xB3 )

219 
	$SFR
–
ADCCON1
 , 0xB4 )

220 
	$SFR
–
ADCCON2
 , 0xB5 )

221 
	$SFR
–
ADCCON3
 , 0xB6 )

222 
	$SFR
–
_SFRB7
 , 0xB7 )

225 
	$SFRBIT
–
IEN1
 , 0xB8, 
_IEN17
, 
_IEN16
, 
P0IE
, 
T4IE
, 
T3IE
, 
T2IE
, 
T1IE
, 
DMAIE
 )

226 
	$SFR
–
IP1
 , 0xB9 )

227 
	$SFR
–
ADCL
 , 0xBA )

228 
	$SFR
–
ADCH
 , 0xBB )

229 
	$SFR
–
RNDL
 , 0xBC )

230 
	$SFR
–
RNDH
 , 0xBD )

231 
	$SFR
–
SLEEPCMD
 , 0xBE )

232 
	$SFR
–
RFERRF
 , 0xBF )

235 
	$SFRBIT
–
IRCON
 , 0xC0, 
STIF
, 
_IRCON6
, 
P0IF
, 
T4IF
, 
T3IF
, 
T2IF
, 
T1IF
, 
DMAIF
 )

236 
	$SFR
–
U0DBUF
 , 0xC1 )

237 
	$SFR
–
U0BAUD
 , 0xC2 )

238 
	$SFR
–
T2MSEL
 , 0xC3 )

239 
	$SFR
–
U0UCR
 , 0xC4 )

240 
	$SFR
–
U0GCR
 , 0xC5 )

241 
	$SFR
–
CLKCONCMD
 , 0xC6 )

242 
	$SFR
–
MEMCTR
 , 0xC7 )

244 
	$SFR
–
_SFRC8
 , 0xC8 )

245 
	$SFR
–
WDCTL
 , 0xC9 )

246 
	$SFR
–
T3CNT
 , 0xCA )

247 
	$SFR
–
T3CTL
 , 0xCB )

248 
	$SFR
–
T3CCTL0
 , 0xCC )

249 
	$SFR
–
T3CC0
 , 0xCD )

250 
	$SFR
–
T3CCTL1
 , 0xCE )

251 
	$SFR
–
T3CC1
 , 0xCF )

254 
	$SFRBIT
–
PSW
 , 0xD0, 
CY
, 
AC
, 
F0
, 
RS1
, 
RS0
, 
OV
, 
F1
, 
P
 )

255 
	$SFR
–
DMAIRQ
 , 0xD1 )

256 
	$SFR
–
DMA1CFGL
 , 0xD2 )

257 
	$SFR
–
DMA1CFGH
 , 0xD3 )

258 
	$SFR
–
DMA0CFGL
 , 0xD4 )

259 
	$SFR
–
DMA0CFGH
 , 0xD5 )

260 
	$SFR
–
DMAARM
 , 0xD6 )

261 
	$SFR
–
DMAREQ
 , 0xD7 )

264 
	$SFRBIT
–
TIMIF
 , 0xD8 , 
_TIMIF7
, 
T1OVFIM
, 
T4CH1IF
, 
T4CH0IF
, 
T4OVFIF
, 
T3CH1IF
, 
T3CH0IF
, 
T3OVFIF
 )

265 
	$SFR
–
RFD
 , 0xD9 )

266 
	$SFR
–
T1CC0L
 , 0xDA )

267 
	$SFR
–
T1CC0H
 , 0xDB )

268 
	$SFR
–
T1CC1L
 , 0xDC )

269 
	$SFR
–
T1CC1H
 , 0xDD )

270 
	$SFR
–
T1CC2L
 , 0xDE )

271 
	$SFR
–
T1CC2H
 , 0xDF )

273 
	$SFR
–
ACC
 , 0xE0 )

274 
	$SFR
–
RFST
 , 0xE1 )

275 
	$SFR
–
T1CNTL
 , 0xE2 )

276 
	$SFR
–
T1CNTH
 , 0xE3 )

277 
	$SFR
–
T1CTL
 , 0xE4 )

278 
	$SFR
–
T1CCTL0
 , 0xE5 )

279 
	$SFR
–
T1CCTL1
 , 0xE6 )

280 
	$SFR
–
T1CCTL2
 , 0xE7 )

283 
	$SFRBIT
–
IRCON2
 , 0xE8, 
_IRCON27
, 
_IRCON26
, 
_IRCON25
, 
WDTIF
, 
P1IF
, 
UTX1IF
, 
UTX0IF
, 
P2IF
 )

284 
	$SFR
–
RFIRQF0
 , 0xE9 )

285 
	$SFR
–
T4CNT
 , 0xEA )

286 
	$SFR
–
T4CTL
 , 0xEB )

287 
	$SFR
–
T4CCTL0
 , 0xEC )

288 
	$SFR
–
T4CC0
 , 0xED )

289 
	$SFR
–
T4CCTL1
 , 0xEE )

290 
	$SFR
–
T4CC1
 , 0xEF )

292 
	$SFR
–
B
 , 0xF0 )

293 
	$SFR
–
PERCFG
 , 0xF1 )

294 
	$SFR
–
ADCCFG
 , 0xF2 )

295 
	$SFR
–
APCFG
 , 0xF2 )

296 
	$SFR
–
P0SEL
 , 0xF3 )

297 
	$SFR
–
P1SEL
 , 0xF4 )

298 
	$SFR
–
P2SEL
 , 0xF5 )

299 
	$SFR
–
P1INP
 , 0xF6 )

300 
	$SFR
–
P2INP
 , 0xF7 )

303 
	$SFRBIT
–
U1CSR
 , 0xF8, 
U1MODE
, 
U1RE
, 
U1SLAVE
, 
U1FE
, 
U1ERR
, 
U1RX_BYTE
, 
U1TX_BYTE
, 
U1ACTIVE
 )

304 
	$SFR
–
U1DBUF
 , 0xF9 )

305 
	$SFR
–
U1BAUD
 , 0xFA )

306 
	$SFR
–
U1UCR
 , 0xFB )

307 
	$SFR
–
U1GCR
 , 0xFC )

308 
	$SFR
–
P0DIR
 , 0xFD )

309 
	$SFR
–
P1DIR
 , 0xFE )

310 
	$SFR
–
P2DIR
 , 0xFF )

318 
	#RFCORE_RAM
 
	`PXREG
–0x6000 )

	)

319 
	#RFCORE_RAM_SZ
 384

	)

322 
	#RXFIFO
 
	`PXREG
–0x6000 )

	)

323 
	#RXFIFO_SZ
 128

	)

324 
	#TXFIFO
 
	`PXREG
–0x6080 )

	)

325 
	#TXFIFO_SZ
 128

	)

328 
	#FRMF_SRCM_RAM
 
	`PXREG
–0x6100 )

	)

329 
	#FRMF_SRCM_RAM_SZ
 128

	)

332 
	#SRC_ADDR_TABLE
 
	`PXREG
–0x6100 )

	)

333 
	#SRC_ADDR_TABLE_SZ
 96

	)

336 
	#SRCRESMASK0
 
	`XREG
–0x6160 )

	)

337 
	#SRCRESMASK1
 
	`XREG
–0x6161 )

	)

338 
	#SRCRESMASK2
 
	`XREG
–0x6162 )

	)

339 
	#SRCRESINDEX
 
	`XREG
–0x6163 )

	)

340 
	#SRCEXTPENDEN0
 
	`XREG
–0x6164 )

	)

341 
	#SRCEXTPENDEN1
 
	`XREG
–0x6165 )

	)

342 
	#SRCEXTPENDEN2
 
	`XREG
–0x6166 )

	)

343 
	#SRCSHORTPENDEN0
 
	`XREG
–0x6167 )

	)

344 
	#SRCSHORTPENDEN1
 
	`XREG
–0x6168 )

	)

345 
	#SRCSHORTPENDEN2
 
	`XREG
–0x6169 )

	)

348 
	#EXT_ADDR0
 
	`XREG
–0x616A )

	)

349 
	#EXT_ADDR1
 
	`XREG
–0x616B )

	)

350 
	#EXT_ADDR2
 
	`XREG
–0x616C )

	)

351 
	#EXT_ADDR3
 
	`XREG
–0x616D )

	)

352 
	#EXT_ADDR4
 
	`XREG
–0x616E )

	)

353 
	#EXT_ADDR5
 
	`XREG
–0x616F )

	)

354 
	#EXT_ADDR6
 
	`XREG
–0x6170 )

	)

355 
	#EXT_ADDR7
 
	`XREG
–0x6171 )

	)

356 
	#PAN_ID0
 
	`XREG
–0x6172 )

	)

357 
	#PAN_ID1
 
	`XREG
–0x6173 )

	)

358 
	#SHORT_ADDR0
 
	`XREG
–0x6174 )

	)

359 
	#SHORT_ADDR1
 
	`XREG
–0x6175 )

	)

362 
	#FRMFILT0
 
	`XREG
–0x6180 )

	)

363 
	#FRMFILT1
 
	`XREG
–0x6181 )

	)

364 
	#SRCMATCH
 
	`XREG
–0x6182 )

	)

365 
	#SRCSHORTEN0
 
	`XREG
–0x6183 )

	)

366 
	#SRCSHORTEN1
 
	`XREG
–0x6184 )

	)

367 
	#SRCSHORTEN2
 
	`XREG
–0x6185 )

	)

368 
	#SRCEXTEN0
 
	`XREG
–0x6186 )

	)

369 
	#SRCEXTEN1
 
	`XREG
–0x6187 )

	)

370 
	#SRCEXTEN2
 
	`XREG
–0x6188 )

	)

373 
	#FRMCTRL0
 
	`XREG
–0x6189 )

	)

374 
	#FRMCTRL1
 
	`XREG
–0x618A )

	)

375 
	#RXENABLE
 
	`XREG
–0x618B )

	)

376 
	#RXMASKSET
 
	`XREG
–0x618C )

	)

377 
	#RXMASKCLR
 
	`XREG
–0x618D )

	)

378 
	#FREQTUNE
 
	`XREG
–0x618E )

	)

379 
	#FREQCTRL
 
	`XREG
–0x618F )

	)

380 
	#TXPOWER
 
	`XREG
–0x6190 )

	)

381 
	#TXCTRL
 
	`XREG
–0x6191 )

	)

382 
	#FSMSTAT0
 
	`XREG
–0x6192 )

	)

383 
	#FSMSTAT1
 
	`XREG
–0x6193 )

	)

384 
	#FIFOPCTRL
 
	`XREG
–0x6194 )

	)

385 
	#FSMCTRL
 
	`XREG
–0x6195 )

	)

386 
	#CCACTRL0
 
	`XREG
–0x6196 )

	)

387 
	#CCACTRL1
 
	`XREG
–0x6197 )

	)

388 
	#RSSI
 
	`XREG
–0x6198 )

	)

389 
	#RSSISTAT
 
	`XREG
–0x6199 )

	)

390 
	#RXFIRST
 
	`XREG
–0x619A )

	)

391 
	#RXFIFOCNT
 
	`XREG
–0x619B )

	)

392 
	#TXFIFOCNT
 
	`XREG
–0x619C )

	)

393 
	#RXFIRST_PTR
 
	`XREG
–0x619D )

	)

394 
	#RXLAST_PTR
 
	`XREG
–0x619E )

	)

395 
	#RXP1_PTR
 
	`XREG
–0x619F )

	)

396 
	#_XREG61A0
 
	`XREG
–0x61A0 )

	)

397 
	#TXFIRST_PTR
 
	`XREG
–0x61A1 )

	)

398 
	#TXLAST_PTR
 
	`XREG
–0x61A2 )

	)

401 
	#RFIRQM0
 
	`XREG
–0x61A3 )

	)

402 
	#RFIRQM1
 
	`XREG
–0x61A4 )

	)

403 
	#RFERRM
 
	`XREG
–0x61A5 )

	)

406 
	#RFRND
 
	`XREG
–0x61A7 )

	)

409 
	#MDMCTRL0
 
	`XREG
–0x61A8 )

	)

410 
	#MDMCTRL1
 
	`XREG
–0x61A9 )

	)

411 
	#FREQEST
 
	`XREG
–0x61AA )

	)

412 
	#RXCTRL
 
	`XREG
–0x61AB )

	)

413 
	#FSCTRL
 
	`XREG
–0x61AC )

	)

414 
	#FSCAL0
 
	`XREG
–0x61AD )

	)

415 
	#FSCAL1
 
	`XREG
–0x61AE )

	)

416 
	#FSCAL2
 
	`XREG
–0x61AF )

	)

417 
	#FSCAL3
 
	`XREG
–0x61B0 )

	)

418 
	#AGCCTRL0
 
	`XREG
–0x61B1 )

	)

419 
	#AGCCTRL1
 
	`XREG
–0x61B2 )

	)

420 
	#AGCCTRL2
 
	`XREG
–0x61B3 )

	)

421 
	#AGCCTRL3
 
	`XREG
–0x61B4 )

	)

422 
	#ADCTEST0
 
	`XREG
–0x61B5 )

	)

423 
	#ADCTEST1
 
	`XREG
–0x61B6 )

	)

424 
	#ADCTEST2
 
	`XREG
–0x61B7 )

	)

425 
	#MDMTEST0
 
	`XREG
–0x61B8 )

	)

426 
	#MDMTEST1
 
	`XREG
–0x61B9 )

	)

427 
	#DACTEST0
 
	`XREG
–0x61BA )

	)

428 
	#DACTEST1
 
	`XREG
–0x61BB )

	)

429 
	#DACTEST2
 
	`XREG
–0x61BC )

	)

430 
	#ATEST
 
	`XREG
–0x61BD )

	)

431 
	#PTEST0
 
	`XREG
–0x61BE )

	)

432 
	#PTEST1
 
	`XREG
–0x61BF )

	)

433 
	#TXFILTCFG
 
	`XREG
–0x61FA )

	)

436 
	#CSPPROG0
 
	`XREG
–0x61C0 )

	)

437 
	#CSPPROG1
 
	`XREG
–0x61C1 )

	)

438 
	#CSPPROG2
 
	`XREG
–0x61C2 )

	)

439 
	#CSPPROG3
 
	`XREG
–0x61C3 )

	)

440 
	#CSPPROG4
 
	`XREG
–0x61C4 )

	)

441 
	#CSPPROG5
 
	`XREG
–0x61C5 )

	)

442 
	#CSPPROG6
 
	`XREG
–0x61C6 )

	)

443 
	#CSPPROG7
 
	`XREG
–0x61C7 )

	)

444 
	#CSPPROG8
 
	`XREG
–0x61C8 )

	)

445 
	#CSPPROG9
 
	`XREG
–0x61C9 )

	)

446 
	#CSPPROG10
 
	`XREG
–0x61CA )

	)

447 
	#CSPPROG11
 
	`XREG
–0x61CB )

	)

448 
	#CSPPROG12
 
	`XREG
–0x61CC )

	)

449 
	#CSPPROG13
 
	`XREG
–0x61CD )

	)

450 
	#CSPPROG14
 
	`XREG
–0x61CE )

	)

451 
	#CSPPROG15
 
	`XREG
–0x61CF )

	)

452 
	#CSPPROG16
 
	`XREG
–0x61D0 )

	)

453 
	#CSPPROG17
 
	`XREG
–0x61D1 )

	)

454 
	#CSPPROG18
 
	`XREG
–0x61D2 )

	)

455 
	#CSPPROG19
 
	`XREG
–0x61D3 )

	)

456 
	#CSPPROG20
 
	`XREG
–0x61D4 )

	)

457 
	#CSPPROG21
 
	`XREG
–0x61D5 )

	)

458 
	#CSPPROG22
 
	`XREG
–0x61D6 )

	)

459 
	#CSPPROG23
 
	`XREG
–0x61D7 )

	)

460 
	#_XREG61D8
 
	`XREG
–0x61D8 )

	)

461 
	#_XREG61D9
 
	`XREG
–0x61D9 )

	)

462 
	#_XREG61DA
 
	`XREG
–0x61DA )

	)

463 
	#_XREG61DB
 
	`XREG
–0x61DB )

	)

464 
	#_XREG61DC
 
	`XREG
–0x61DC )

	)

465 
	#_XREG61DD
 
	`XREG
–0x61DD )

	)

466 
	#_XREG61DE
 
	`XREG
–0x61DE )

	)

467 
	#_XREG61DF
 
	`XREG
–0x61DF )

	)

468 
	#CSPCTRL
 
	`XREG
–0x61E0 )

	)

469 
	#CSPSTAT
 
	`XREG
–0x61E1 )

	)

470 
	#CSPX
 
	`XREG
–0x61E2 )

	)

471 
	#CSPY
 
	`XREG
–0x61E3 )

	)

472 
	#CSPZ
 
	`XREG
–0x61E4 )

	)

473 
	#CSPT
 
	`XREG
–0x61E5 )

	)

474 
	#_XREG61E6
 
	`XREG
–0x61E6 )

	)

475 
	#_XREG61E7
 
	`XREG
–0x61E7 )

	)

476 
	#_XREG61E8
 
	`XREG
–0x61E8 )

	)

477 
	#_XREG61E9
 
	`XREG
–0x61E9 )

	)

478 
	#_XREG61EA
 
	`XREG
–0x61EA )

	)

482 
	#RFC_OBS_CTRL0
 
	`XREG
–0x61EB )

	)

483 
	#RFC_OBS_CTRL1
 
	`XREG
–0x61EC )

	)

484 
	#RFC_OBS_CTRL2
 
	`XREG
–0x61ED )

	)

485 
	#OBSSEL0
 
	`XREG
–0x6243 )

	)

486 
	#OBSSEL1
 
	`XREG
–0x6244 )

	)

487 
	#OBSSEL2
 
	`XREG
–0x6245 )

	)

488 
	#OBSSEL3
 
	`XREG
–0x6246 )

	)

489 
	#OBSSEL4
 
	`XREG
–0x6247 )

	)

490 
	#OBSSEL5
 
	`XREG
–0x6248 )

	)

491 
	#TR0
 
	`XREG
–0x624B )

	)

494 
	#CHVER
 
	`XREG
–0x6249 )

	)

495 
	#CHIPID
 
	`XREG
–0x624A )

	)

498 
	#DBGDATA
 
	`XREG
–0x6260 )

	)

501 
	#FCTL
 
	`XREG
–0x6270 )

	)

502 
	#FADDRL
 
	`XREG
–0x6271 )

	)

503 
	#FADDRH
 
	`XREG
–0x6272 )

	)

504 
	#FWDATA
 
	`XREG
–0x6273 )

	)

505 
	#_XREG6274
 
	`XREG
–0x6274 )

	)

506 
	#_XREG6275
 
	`XREG
–0x6275 )

	)

509 
	#CHIPINFO0
 
	`XREG
–0x6276 )

	)

510 
	#CHIPINFO1
 
	`XREG
–0x6277 )

	)

513 
	#CLD
 
	`XREG
–0x6290 )

	)

516 
	#T1CCTL3
 
	`XREG
–0x62A3 )

	)

517 
	#T1CCTL4
 
	`XREG
–0x62A4 )

	)

518 
	#T1CC3L
 
	`XREG
–0x62AC )

	)

519 
	#T1CC3H
 
	`XREG
–0x62AD )

	)

520 
	#T1CC4L
 
	`XREG
–0x62AE )

	)

521 
	#T1CC4H
 
	`XREG
–0x62AF )

	)

523 
	#XX_T1CCTL0
 
	`XREG
–0x62A0 )

	)

524 
	#XX_T1CCTL1
 
	`XREG
–0x62A1 )

	)

525 
	#XX_T1CCTL2
 
	`XREG
–0x62A2 )

	)

526 
	#XX_T1CCTL3
 
	`XREG
–0x62A3 )

	)

527 
	#XX_T1CCTL4
 
	`XREG
–0x62A4 )

	)

528 
	#XX_T1CC0L
 
	`XREG
–0x62A6 )

	)

529 
	#XX_T1CC0H
 
	`XREG
–0x62A7 )

	)

530 
	#XX_T1CC1L
 
	`XREG
–0x62A8 )

	)

531 
	#XX_T1CC1H
 
	`XREG
–0x62A9 )

	)

532 
	#XX_T1CC2L
 
	`XREG
–0x62AA )

	)

533 
	#XX_T1CC2H
 
	`XREG
–0x62AB )

	)

534 
	#XX_T1CC3L
 
	`XREG
–0x62AC )

	)

535 
	#XX_T1CC3H
 
	`XREG
–0x62AD )

	)

536 
	#XX_T1CC4L
 
	`XREG
–0x62AE )

	)

537 
	#XX_T1CC4H
 
	`XREG
–0x62AF )

	)

539 
	#P_T1CCTL
 
	`PXREG
–0x62A0 )

	)

540 
	#P_T1CC
 
	`PXREG
–0x62A6 )

	)

543 
	#STCC
 
	`XREG
–0x62B0 )

	)

544 
	#STCS
 
	`XREG
–0x62B1 )

	)

545 
	#STCV0
 
	`XREG
–0x62B2 )

	)

546 
	#STCV1
 
	`XREG
–0x62B3 )

	)

547 
	#STCV2
 
	`XREG
–0x62B4 )

	)

550 
	#OPAMPC
 
	`XREG
–0x62C0 )

	)

551 
	#OPAMPS
 
	`XREG
–0x62C1 )

	)

554 
	#CMPCTL
 
	`XREG
–0x62D0 )

	)

572 
	#X_P0
 
	`XREG
–0x7080 )

	)

573 
	#_NA_SP
 
	`XREG
–0x7081 )

	)

574 
	#_NA_DPL0
 
	`XREG
–0x7082 )

	)

575 
	#_NA_DPH0
 
	`XREG
–0x7083 )

	)

576 
	#_NA_DPL1
 
	`XREG
–0x7084 )

	)

577 
	#_NA_DPH1
 
	`XREG
–0x7085 )

	)

578 
	#X_U0CSR
 
	`XREG
–0x7086 )

	)

579 
	#_NA_PCON
 
	`XREG
–0x7087 )

	)

581 
	#_NA_TCON
 
	`XREG
–0x7088 )

	)

582 
	#X_P0IFG
 
	`XREG
–0x7089 )

	)

583 
	#X_P1IFG
 
	`XREG
–0x708A )

	)

584 
	#X_P2IFG
 
	`XREG
–0x708B )

	)

585 
	#X_PICTL
 
	`XREG
–0x708C )

	)

586 
	#X_P1IEN
 
	`XREG
–0x708D )

	)

587 
	#_NA_SFR8E
 
	`XREG
–0x708E )

	)

588 
	#X_P0INP
 
	`XREG
–0x708F )

	)

590 
	#X_P1
 
	`XREG
–0x7090 )

	)

591 
	#X_RFIRQF1
 
	`XREG
–0x7091 )

	)

592 
	#_NA_DPS
 
	`XREG
–0x7092 )

	)

593 
	#X_MPAGE
 
	`XREG
–0x7093 )

	)

594 
	#X_T2CTRL
 
	`XREG
–0x7094 )

	)

595 
	#X_ST0
 
	`XREG
–0x7095 )

	)

596 
	#X_ST1
 
	`XREG
–0x7096 )

	)

597 
	#X_ST2
 
	`XREG
–0x7097 )

	)

599 
	#_NA_S0CON
 
	`XREG
–0x7098 )

	)

600 
	#_NA_SFR99
 
	`XREG
–0x7099 )

	)

601 
	#_NA_IEN2
 
	`XREG
–0x709A )

	)

602 
	#_NA_S1CON
 
	`XREG
–0x709B )

	)

603 
	#X_T2CSPCFG
 
	`XREG
–0x709C )

	)

604 
	#X_T2EVTCFG
 
	`XREG
–0x709C )

	)

605 
	#X_SLEEPSTA
 
	`XREG
–0x709D )

	)

606 
	#X_CLKCONSTA
 
	`XREG
–0x709E )

	)

607 
	#X_FMAP
 
	`XREG
–0x709F )

	)

609 
	#X_P2
 
	`XREG
–0x70A0 )

	)

610 
	#X_T2IRQF
 
	`XREG
–0x70A1 )

	)

611 
	#X_T2M0
 
	`XREG
–0x70A2 )

	)

612 
	#X_T2M1
 
	`XREG
–0x70A3 )

	)

613 
	#X_T2MOVF0
 
	`XREG
–0x70A4 )

	)

614 
	#X_T2MOVF1
 
	`XREG
–0x70A5 )

	)

615 
	#X_T2MOVF2
 
	`XREG
–0x70A6 )

	)

616 
	#X_T2IRQM
 
	`XREG
–0x70A7 )

	)

618 
	#_NA_IEN0
 
	`XREG
–0x70A8 )

	)

619 
	#_NA_IP0
 
	`XREG
–0x70A9 )

	)

620 
	#_NA_SFRAA
 
	`XREG
–0x70AA )

	)

621 
	#X_P0IEN
 
	`XREG
–0x70AB )

	)

622 
	#X_P2IEN
 
	`XREG
–0x70AC )

	)

623 
	#X_STLOAD
 
	`XREG
–0x70AD )

	)

624 
	#X_PMUX
 
	`XREG
–0x70AE )

	)

625 
	#X_T1STAT
 
	`XREG
–0x70AF )

	)

627 
	#_NA_SFRB0
 
	`XREG
–0x70A8 )

	)

628 
	#X_ENCDI
 
	`XREG
–0x70B1 )

	)

629 
	#X_ENCDO
 
	`XREG
–0x70B2 )

	)

630 
	#X_ENCCS
 
	`XREG
–0x70B3 )

	)

631 
	#X_ADCCON1
 
	`XREG
–0x70B4 )

	)

632 
	#X_ADCCON2
 
	`XREG
–0x70B5 )

	)

633 
	#X_ADCCON3
 
	`XREG
–0x70B6 )

	)

634 
	#_NA_SFRB7
 
	`XREG
–0x70B7 )

	)

636 
	#_NA_IEN1
 
	`XREG
–0x70B8 )

	)

637 
	#_NA_IP1
 
	`XREG
–0x70B9 )

	)

638 
	#X_ADCL
 
	`XREG
–0x70BA )

	)

639 
	#X_ADCH
 
	`XREG
–0x70BB )

	)

640 
	#X_RNDL
 
	`XREG
–0x70BC )

	)

641 
	#X_RNDH
 
	`XREG
–0x70BD )

	)

642 
	#X_SLEEPCMD
 
	`XREG
–0x70BE )

	)

643 
	#X_RFERRF
 
	`XREG
–0x70BF )

	)

645 
	#_NA_IRCON
 
	`XREG
–0x70C0 )

	)

646 
	#X_U0DBUF
 
	`XREG
–0x70C1 )

	)

647 
	#X_U0BAUD
 
	`XREG
–0x70C2 )

	)

648 
	#X_T2MSEL
 
	`XREG
–0x70C3 )

	)

649 
	#X_U0UCR
 
	`XREG
–0x70C4 )

	)

650 
	#X_U0GCR
 
	`XREG
–0x70C5 )

	)

651 
	#X_CLKCONCMD
 
	`XREG
–0x70C6 )

	)

652 
	#X_MEMCTR
 
	`XREG
–0x70C7 )

	)

654 
	#_NA_SFRC8
 
	`XREG
–0x70C8 )

	)

655 
	#X_WDCTL
 
	`XREG
–0x70C9 )

	)

656 
	#X_T3CNT
 
	`XREG
–0x70CA )

	)

657 
	#X_T3CTL
 
	`XREG
–0x70CB )

	)

658 
	#X_T3CCTL0
 
	`XREG
–0x70CC )

	)

659 
	#X_T3CC0
 
	`XREG
–0x70CD )

	)

660 
	#X_T3CCTL1
 
	`XREG
–0x70CE )

	)

661 
	#X_T3CC1
 
	`XREG
–0x70CF )

	)

663 
	#_NA_PSW
 
	`XREG
–0x70D0 )

	)

664 
	#X_DMAIRQ
 
	`XREG
–0x70D1 )

	)

665 
	#X_DMA1CFGL
 
	`XREG
–0x70D2 )

	)

666 
	#X_DMA1CFGH
 
	`XREG
–0x70D3 )

	)

667 
	#X_DMA0CFGL
 
	`XREG
–0x70D4 )

	)

668 
	#X_DMA0CFGH
 
	`XREG
–0x70D5 )

	)

669 
	#X_DMAARM
 
	`XREG
–0x70D6 )

	)

670 
	#X_DMAREQ
 
	`XREG
–0x70D7 )

	)

672 
	#X_TIMIF
 
	`XREG
–0x70D8 )

	)

673 
	#X_RFD
 
	`XREG
–0x70D9 )

	)

674 
	#X_T1CC0L
 
	`XREG
–0x70DA )

	)

675 
	#X_T1CC0H
 
	`XREG
–0x70DB )

	)

676 
	#X_T1CC1L
 
	`XREG
–0x70DC )

	)

677 
	#X_T1CC1H
 
	`XREG
–0x70DD )

	)

678 
	#X_T1CC2L
 
	`XREG
–0x70DE )

	)

679 
	#X_T1CC2H
 
	`XREG
–0x70DF )

	)

681 
	#_NA_ACC
 
	`XREG
–0x70E0 )

	)

682 
	#X_RFST
 
	`XREG
–0x70E1 )

	)

683 
	#X_T1CNTL
 
	`XREG
–0x70E2 )

	)

684 
	#X_T1CNTH
 
	`XREG
–0x70E3 )

	)

685 
	#X_T1CTL
 
	`XREG
–0x70E4 )

	)

686 
	#X_T1CCTL0
 
	`XREG
–0x70E5 )

	)

687 
	#X_T1CCTL1
 
	`XREG
–0x70E6 )

	)

688 
	#X_T1CCTL2
 
	`XREG
–0x70E7 )

	)

690 
	#_NA_IRCON2
 
	`XREG
–0x70E8 )

	)

691 
	#X_RFIRQF0
 
	`XREG
–0x70E9 )

	)

692 
	#X_T4CNT
 
	`XREG
–0x70EA )

	)

693 
	#X_T4CTL
 
	`XREG
–0x70EB )

	)

694 
	#X_T4CCTL0
 
	`XREG
–0x70EC )

	)

695 
	#X_T4CC0
 
	`XREG
–0x70ED )

	)

696 
	#X_T4CCTL1
 
	`XREG
–0x70EE )

	)

697 
	#X_T4CC1
 
	`XREG
–0x70EF )

	)

699 
	#_NA_B
 
	`XREG
–0x70F0 )

	)

700 
	#X_PERCFG
 
	`XREG
–0x70F1 )

	)

701 
	#X_ADCCFG
 
	`XREG
–0x70F2 )

	)

702 
	#X_APCFG
 
	`XREG
–0x70F2 )

	)

703 
	#X_P0SEL
 
	`XREG
–0x70F3 )

	)

704 
	#X_P1SEL
 
	`XREG
–0x70F4 )

	)

705 
	#X_P2SEL
 
	`XREG
–0x70F5 )

	)

706 
	#X_P1INP
 
	`XREG
–0x70F6 )

	)

707 
	#X_P2INP
 
	`XREG
–0x70F7 )

	)

709 
	#X_U1CSR
 
	`XREG
–0x70F8 )

	)

710 
	#X_U1DBUF
 
	`XREG
–0x70F9 )

	)

711 
	#X_U1BAUD
 
	`XREG
–0x70FA )

	)

712 
	#X_U1UCR
 
	`XREG
–0x70FB )

	)

713 
	#X_U1GCR
 
	`XREG
–0x70FC )

	)

714 
	#X_P0DIR
 
	`XREG
–0x70FD )

	)

715 
	#X_P1DIR
 
	`XREG
–0x70FE )

	)

716 
	#X_P2DIR
 
	`XREG
–0x70FF )

	)

723 
	#P_INFOPAGE
 
	`PXREG
–0x7800 )

	)

724 
	#P_XBANK
 
	`PXREG
–0x8000 )

	)

729 #ifde‡
__IAR_SYSTEMS_ICC__


730 #¥agm®
œnguage
=

	@/usr/include/string.h

22 #i‚def 
_STRING_H


23 
	#_STRING_H
 1

	)

25 
	~<„©uªs.h
>

27 
	g__BEGIN_DECLS


30 
	#__√ed_size_t


	)

31 
	#__√ed_NULL


	)

32 
	~<°ddef.h
>

35 #i‡
deföed
 
__˝lu•lus
 && 
__GNUC_PREREQ
 (4, 4)

36 
	#__CORRECT_ISO_CPP_STRING_H_PROTO


	)

40 
__BEGIN_NAMESPACE_STD


42 *
	$mem˝y
 (*
__ª°ri˘
 
__de°
, c⁄° *__ª°ri˘ 
__§c
,

43 
size_t
 
__n
Ë
__THROW
 
	`__n⁄nuŒ
 ((1, 2));

46 *
	$memmove
 (*
__de°
, c⁄° *
__§c
, 
size_t
 
__n
)

47 
__THROW
 
	`__n⁄nuŒ
 ((1, 2));

48 
__END_NAMESPACE_STD


53 #i‡
deföed
 
__USE_SVID
 || deföed 
__USE_BSD
 || deföed 
__USE_XOPEN


54 *
	$memc˝y
 (*
__ª°ri˘
 
__de°
, c⁄° *__ª°ri˘ 
__§c
,

55 
__c
, 
size_t
 
__n
)

56 
__THROW
 
	`__n⁄nuŒ
 ((1, 2));

60 
__BEGIN_NAMESPACE_STD


62 *
	$mem£t
 (*
__s
, 
__c
, 
size_t
 
__n
Ë
__THROW
 
	`__n⁄nuŒ
 ((1));

65 
	$memcmp
 (c⁄° *
__s1
, c⁄° *
__s2
, 
size_t
 
__n
)

66 
__THROW
 
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1, 2));

69 #ifde‡
__CORRECT_ISO_CPP_STRING_H_PROTO


72 *
	`memchr
 (*
__s
, 
__c
, 
size_t
 
__n
)

73 
__THROW
 
	`__asm
 ("memchr"Ë
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1));

74 c⁄° *
	`memchr
 (c⁄° *
__s
, 
__c
, 
size_t
 
__n
)

75 
__THROW
 
	`__asm
 ("memchr"Ë
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1));

77 #ifde‡
__OPTIMIZE__


78 
__exã∫_Æways_ölöe
 *

79 
	`memchr
 (*
__s
, 
__c
, 
size_t
 
__n
Ë
__THROW


81  
	`__buûtö_memchr
 (
__s
, 
__c
, 
__n
);

84 
__exã∫_Æways_ölöe
 const *

85 
	`memchr
 (c⁄° *
__s
, 
__c
, 
size_t
 
__n
Ë
__THROW


87  
	`__buûtö_memchr
 (
__s
, 
__c
, 
__n
);

90 
	}
}

92 *
	$memchr
 (c⁄° *
__s
, 
__c
, 
size_t
 
__n
)

93 
__THROW
 
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1));

95 
__END_NAMESPACE_STD


97 #ifde‡
__USE_GNU


100 #ifde‡
__CORRECT_ISO_CPP_STRING_H_PROTO


101 "C++" *
	$øwmemchr
 (*
__s
, 
__c
)

102 
__THROW
 
	`__asm
 ("øwmemchr"Ë
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1));

103 "C++" c⁄° *
	$øwmemchr
 (c⁄° *
__s
, 
__c
)

104 
__THROW
 
	`__asm
 ("øwmemchr"Ë
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1));

106 *
	$øwmemchr
 (c⁄° *
__s
, 
__c
)

107 
__THROW
 
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1));

111 #ifde‡
__CORRECT_ISO_CPP_STRING_H_PROTO


112 "C++" *
	$memrchr
 (*
__s
, 
__c
, 
size_t
 
__n
)

113 
__THROW
 
	`__asm
 ("memrchr"Ë
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1));

114 "C++" c⁄° *
	$memrchr
 (c⁄° *
__s
, 
__c
, 
size_t
 
__n
)

115 
__THROW
 
	`__asm
 ("memrchr"Ë
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1));

117 *
	$memrchr
 (c⁄° *
__s
, 
__c
, 
size_t
 
__n
)

118 
__THROW
 
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1));

123 
__BEGIN_NAMESPACE_STD


125 *
	$°r˝y
 (*
__ª°ri˘
 
__de°
, c⁄° *__ª°ri˘ 
__§c
)

126 
__THROW
 
	`__n⁄nuŒ
 ((1, 2));

128 *
	$°∫˝y
 (*
__ª°ri˘
 
__de°
,

129 c⁄° *
__ª°ri˘
 
__§c
, 
size_t
 
__n
)

130 
__THROW
 
	`__n⁄nuŒ
 ((1, 2));

133 *
	$°rˇt
 (*
__ª°ri˘
 
__de°
, c⁄° *__ª°ri˘ 
__§c
)

134 
__THROW
 
	`__n⁄nuŒ
 ((1, 2));

136 *
	$°∫ˇt
 (*
__ª°ri˘
 
__de°
, c⁄° *__ª°ri˘ 
__§c
,

137 
size_t
 
__n
Ë
__THROW
 
	`__n⁄nuŒ
 ((1, 2));

140 
	$°rcmp
 (c⁄° *
__s1
, c⁄° *
__s2
)

141 
__THROW
 
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1, 2));

143 
	$°∫cmp
 (c⁄° *
__s1
, c⁄° *
__s2
, 
size_t
 
__n
)

144 
__THROW
 
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1, 2));

147 
	$°rcﬁl
 (c⁄° *
__s1
, c⁄° *
__s2
)

148 
__THROW
 
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1, 2));

150 
size_t
 
	$°rx‰m
 (*
__ª°ri˘
 
__de°
,

151 c⁄° *
__ª°ri˘
 
__§c
, 
size_t
 
__n
)

152 
__THROW
 
	`__n⁄nuŒ
 ((2));

153 
__END_NAMESPACE_STD


155 #ifde‡
__USE_XOPEN2K8


159 
	~<xloˇÀ.h
>

162 
	$°rcﬁl_l
 (c⁄° *
__s1
, c⁄° *
__s2
, 
__loˇÀ_t
 
__l
)

163 
__THROW
 
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1, 2, 3));

165 
size_t
 
	$°rx‰m_l
 (*
__de°
, c⁄° *
__§c
, 
size_t
 
__n
,

166 
__loˇÀ_t
 
__l
Ë
__THROW
 
	`__n⁄nuŒ
 ((2, 4));

169 #i‡
deföed
 
__USE_SVID
 || deföed 
__USE_BSD
 || deföed 
__USE_XOPEN_EXTENDED
 \

170 || 
deföed
 
__USE_XOPEN2K8


172 *
	$°rdup
 (c⁄° *
__s
)

173 
__THROW
 
__©åibuã_mÆloc__
 
	`__n⁄nuŒ
 ((1));

179 #i‡
deföed
 
__USE_XOPEN2K8


180 *
	$°∫dup
 (c⁄° *
__°rög
, 
size_t
 
__n
)

181 
__THROW
 
__©åibuã_mÆloc__
 
	`__n⁄nuŒ
 ((1));

184 #i‡
deföed
 
__USE_GNU
 && deföed 
__GNUC__


186 
	#°rdu∑
(
s
) \

187 (
__exãnsi⁄__
 \

189 c⁄° *
__ﬁd
 = (
s
); \

190 
size_t
 
__Àn
 = 
	`°æí
 (
__ﬁd
) + 1; \

191 *
__√w
 = (*Ë
	`__buûtö_Æloˇ
 (
__Àn
); \

192 (*Ë
	`mem˝y
 (
__√w
, 
__ﬁd
, 
__Àn
); \

193 
	}
}))

	)

196 
	#°∫du∑
(
s
, 
n
) \

197 (
__exãnsi⁄__
 \

199 c⁄° *
__ﬁd
 = (
s
); \

200 
size_t
 
__Àn
 = 
	`°∫Àn
 (
__ﬁd
, (
n
)); \

201 *
__√w
 = (*Ë
	`__buûtö_Æloˇ
 (
__Àn
 + 1); \

202 
__√w
[
__Àn
] = '\0'; \

203 (*Ë
	`mem˝y
 (
__√w
, 
__ﬁd
, 
__Àn
); \

204 }))

	)

207 
	g__BEGIN_NAMESPACE_STD


209 #ifde‡
__CORRECT_ISO_CPP_STRING_H_PROTO


212 *
°rchr
 (*
__s
, 
__c
)

213 
__THROW
 
__asm
 ("°rchr"Ë
__©åibuã_puª__
 
__n⁄nuŒ
 ((1));

214 c⁄° *
°rchr
 (c⁄° *
__s
, 
__c
)

215 
__THROW
 
__asm
 ("°rchr"Ë
__©åibuã_puª__
 
__n⁄nuŒ
 ((1));

217 #ifde‡
__OPTIMIZE__


218 
__exã∫_Æways_ölöe
 *

219 
°rchr
 (*
__s
, 
__c
Ë
	g__THROW


221  
__buûtö_°rchr
 (
__s
, 
__c
);

224 
__exã∫_Æways_ölöe
 const *

225 
°rchr
 (c⁄° *
__s
, 
__c
Ë
	g__THROW


227  
__buûtö_°rchr
 (
__s
, 
__c
);

232 *
	$°rchr
 (c⁄° *
__s
, 
__c
)

233 
__THROW
 
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1));

236 #ifde‡
__CORRECT_ISO_CPP_STRING_H_PROTO


239 *
	`°ºchr
 (*
__s
, 
__c
)

240 
__THROW
 
	`__asm
 ("°ºchr"Ë
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1));

241 c⁄° *
	`°ºchr
 (c⁄° *
__s
, 
__c
)

242 
__THROW
 
	`__asm
 ("°ºchr"Ë
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1));

244 #ifde‡
__OPTIMIZE__


245 
__exã∫_Æways_ölöe
 *

246 
	`°ºchr
 (*
__s
, 
__c
Ë
__THROW


248  
	`__buûtö_°ºchr
 (
__s
, 
__c
);

251 
__exã∫_Æways_ölöe
 const *

252 
	`°ºchr
 (c⁄° *
__s
, 
__c
Ë
__THROW


254  
	`__buûtö_°ºchr
 (
__s
, 
__c
);

257 
	}
}

259 *
	$°ºchr
 (c⁄° *
__s
, 
__c
)

260 
__THROW
 
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1));

262 
__END_NAMESPACE_STD


264 #ifde‡
__USE_GNU


267 #ifde‡
__CORRECT_ISO_CPP_STRING_H_PROTO


268 "C++" *
	$°rch∫ul
 (*
__s
, 
__c
)

269 
__THROW
 
	`__asm
 ("°rch∫ul"Ë
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1));

270 "C++" c⁄° *
	$°rch∫ul
 (c⁄° *
__s
, 
__c
)

271 
__THROW
 
	`__asm
 ("°rch∫ul"Ë
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1));

273 *
	$°rch∫ul
 (c⁄° *
__s
, 
__c
)

274 
__THROW
 
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1));

278 
__BEGIN_NAMESPACE_STD


281 
size_t
 
	$°rc•n
 (c⁄° *
__s
, c⁄° *
__ªje˘
)

282 
__THROW
 
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1, 2));

285 
size_t
 
	$°r•n
 (c⁄° *
__s
, c⁄° *
__ac˚±
)

286 
__THROW
 
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1, 2));

288 #ifde‡
__CORRECT_ISO_CPP_STRING_H_PROTO


291 *
	`°Ωbrk
 (*
__s
, c⁄° *
__ac˚±
)

292 
__THROW
 
	`__asm
 ("°Ωbrk"Ë
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1, 2));

293 c⁄° *
	`°Ωbrk
 (c⁄° *
__s
, c⁄° *
__ac˚±
)

294 
__THROW
 
	`__asm
 ("°Ωbrk"Ë
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1, 2));

296 #ifde‡
__OPTIMIZE__


297 
__exã∫_Æways_ölöe
 *

298 
	`°Ωbrk
 (*
__s
, c⁄° *
__ac˚±
Ë
__THROW


300  
	`__buûtö_°Ωbrk
 (
__s
, 
__ac˚±
);

303 
__exã∫_Æways_ölöe
 const *

304 
	`°Ωbrk
 (c⁄° *
__s
, c⁄° *
__ac˚±
Ë
__THROW


306  
	`__buûtö_°Ωbrk
 (
__s
, 
__ac˚±
);

309 
	}
}

311 *
	$°Ωbrk
 (c⁄° *
__s
, c⁄° *
__ac˚±
)

312 
__THROW
 
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1, 2));

315 #ifde‡
__CORRECT_ISO_CPP_STRING_H_PROTO


318 *
	`°r°r
 (*
__hay°ack
, c⁄° *
__√edÀ
)

319 
__THROW
 
	`__asm
 ("°r°r"Ë
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1, 2));

320 c⁄° *
	`°r°r
 (c⁄° *
__hay°ack
, c⁄° *
__√edÀ
)

321 
__THROW
 
	`__asm
 ("°r°r"Ë
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1, 2));

323 #ifde‡
__OPTIMIZE__


324 
__exã∫_Æways_ölöe
 *

325 
	`°r°r
 (*
__hay°ack
, c⁄° *
__√edÀ
Ë
__THROW


327  
	`__buûtö_°r°r
 (
__hay°ack
, 
__√edÀ
);

330 
__exã∫_Æways_ölöe
 const *

331 
	`°r°r
 (c⁄° *
__hay°ack
, c⁄° *
__√edÀ
Ë
__THROW


333  
	`__buûtö_°r°r
 (
__hay°ack
, 
__√edÀ
);

336 
	}
}

338 *
	$°r°r
 (c⁄° *
__hay°ack
, c⁄° *
__√edÀ
)

339 
__THROW
 
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1, 2));

344 *
	$°πok
 (*
__ª°ri˘
 
__s
, c⁄° *__ª°ri˘ 
__dñim
)

345 
__THROW
 
	`__n⁄nuŒ
 ((2));

346 
__END_NAMESPACE_STD


350 *
	$__°πok_r
 (*
__ª°ri˘
 
__s
,

351 c⁄° *
__ª°ri˘
 
__dñim
,

352 **
__ª°ri˘
 
__ßve_±r
)

353 
__THROW
 
	`__n⁄nuŒ
 ((2, 3));

354 #i‡
deföed
 
__USE_POSIX
 || deföed 
__USE_MISC


355 *
	$°πok_r
 (*
__ª°ri˘
 
__s
, c⁄° *__ª°ri˘ 
__dñim
,

356 **
__ª°ri˘
 
__ßve_±r
)

357 
__THROW
 
	`__n⁄nuŒ
 ((2, 3));

360 #ifde‡
__USE_GNU


362 #ifde‡
__CORRECT_ISO_CPP_STRING_H_PROTO


363 "C++" *
	$°rˇ£°r
 (*
__hay°ack
, c⁄° *
__√edÀ
)

364 
__THROW
 
	`__asm
 ("°rˇ£°r"Ë
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1, 2));

365 "C++" c⁄° *
	$°rˇ£°r
 (c⁄° *
__hay°ack
,

366 c⁄° *
__√edÀ
)

367 
__THROW
 
	`__asm
 ("°rˇ£°r"Ë
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1, 2));

369 *
	$°rˇ£°r
 (c⁄° *
__hay°ack
, c⁄° *
__√edÀ
)

370 
__THROW
 
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1, 2));

374 #ifde‡
__USE_GNU


378 *
	$memmem
 (c⁄° *
__hay°ack
, 
size_t
 
__hay°ackÀn
,

379 c⁄° *
__√edÀ
, 
size_t
 
__√edÀÀn
)

380 
__THROW
 
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1, 3));

384 *
	$__memp˝y
 (*
__ª°ri˘
 
__de°
,

385 c⁄° *
__ª°ri˘
 
__§c
, 
size_t
 
__n
)

386 
__THROW
 
	`__n⁄nuŒ
 ((1, 2));

387 *
	$memp˝y
 (*
__ª°ri˘
 
__de°
,

388 c⁄° *
__ª°ri˘
 
__§c
, 
size_t
 
__n
)

389 
__THROW
 
	`__n⁄nuŒ
 ((1, 2));

393 
__BEGIN_NAMESPACE_STD


395 
size_t
 
	$°æí
 (c⁄° *
__s
)

396 
__THROW
 
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1));

397 
__END_NAMESPACE_STD


399 #ifdef 
__USE_XOPEN2K8


402 
size_t
 
	$°∫Àn
 (c⁄° *
__°rög
, 
size_t
 
__maxÀn
)

403 
__THROW
 
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1));

407 
__BEGIN_NAMESPACE_STD


409 *
	$°ªº‹
 (
__î∫um
Ë
__THROW
;

410 
__END_NAMESPACE_STD


411 #i‡
deföed
 
__USE_XOPEN2K
 || deföed 
__USE_MISC


419 #i‡
deföed
 
__USE_XOPEN2K
 && !deföed 
__USE_GNU


422 #ifde‡
__REDIRECT_NTH


423 
	`__REDIRECT_NTH
 (
°ªº‹_r
,

424 (
__î∫um
, *
__buf
, 
size_t
 
__buÊí
),

425 
__xpg_°ªº‹_r
Ë
	`__n⁄nuŒ
 ((2));

427 
	$__xpg_°ªº‹_r
 (
__î∫um
, *
__buf
, 
size_t
 
__buÊí
)

428 
__THROW
 
	`__n⁄nuŒ
 ((2));

429 
	#°ªº‹_r
 
__xpg_°ªº‹_r


	)

434 *
	$°ªº‹_r
 (
__î∫um
, *
__buf
, 
size_t
 
__buÊí
)

435 
__THROW
 
	`__n⁄nuŒ
 ((2)Ë
__wur
;

439 #ifde‡
__USE_XOPEN2K8


441 *
	$°ªº‹_l
 (
__î∫um
, 
__loˇÀ_t
 
__l
Ë
__THROW
;

447 
	$__bzîo
 (*
__s
, 
size_t
 
__n
Ë
__THROW
 
	`__n⁄nuŒ
 ((1));

449 #ifde‡
__USE_BSD


451 
	$bc›y
 (c⁄° *
__§c
, *
__de°
, 
size_t
 
__n
)

452 
__THROW
 
	`__n⁄nuŒ
 ((1, 2));

455 
	$bzîo
 (*
__s
, 
size_t
 
__n
Ë
__THROW
 
	`__n⁄nuŒ
 ((1));

458 
	$bcmp
 (c⁄° *
__s1
, c⁄° *
__s2
, 
size_t
 
__n
)

459 
__THROW
 
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1, 2));

462 #ifde‡
__CORRECT_ISO_CPP_STRING_H_PROTO


465 *
	`ödex
 (*
__s
, 
__c
)

466 
__THROW
 
	`__asm
 ("ödex"Ë
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1));

467 c⁄° *
	`ödex
 (c⁄° *
__s
, 
__c
)

468 
__THROW
 
	`__asm
 ("ödex"Ë
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1));

470 #i‡
deföed
 
__OPTIMIZE__
 && !deföed 
__CORRECT_ISO_CPP_STRINGS_H_PROTO


471 
__exã∫_Æways_ölöe
 *

472 
	`ödex
 (*
__s
, 
__c
Ë
__THROW


474  
	`__buûtö_ödex
 (
__s
, 
__c
);

477 
__exã∫_Æways_ölöe
 const *

478 
	`ödex
 (c⁄° *
__s
, 
__c
Ë
__THROW


480  
	`__buûtö_ödex
 (
__s
, 
__c
);

483 
	}
}

485 *
	$ödex
 (c⁄° *
__s
, 
__c
)

486 
__THROW
 
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1));

490 #ifde‡
__CORRECT_ISO_CPP_STRING_H_PROTO


493 *
	`rödex
 (*
__s
, 
__c
)

494 
__THROW
 
	`__asm
 ("rödex"Ë
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1));

495 c⁄° *
	`rödex
 (c⁄° *
__s
, 
__c
)

496 
__THROW
 
	`__asm
 ("rödex"Ë
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1));

498 #i‡
deföed
 
__OPTIMIZE__
 && !deföed 
__CORRECT_ISO_CPP_STRINGS_H_PROTO


499 
__exã∫_Æways_ölöe
 *

500 
	`rödex
 (*
__s
, 
__c
Ë
__THROW


502  
	`__buûtö_rödex
 (
__s
, 
__c
);

505 
__exã∫_Æways_ölöe
 const *

506 
	`rödex
 (c⁄° *
__s
, 
__c
Ë
__THROW


508  
	`__buûtö_rödex
 (
__s
, 
__c
);

511 
	}
}

513 *
	$rödex
 (c⁄° *
__s
, 
__c
)

514 
__THROW
 
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1));

519 
	$ffs
 (
__i
Ë
__THROW
 
	`__©åibuã__
 ((
__c⁄°__
));

523 #ifdef 
__USE_GNU


524 
	$ff¶
 (
__l
Ë
__THROW
 
	`__©åibuã__
 ((
__c⁄°__
));

525 
__exãnsi⁄__
 
	$ff¶l
 (
__Œ
)

526 
__THROW
 
	`__©åibuã__
 ((
__c⁄°__
));

530 
	$°rˇ£cmp
 (c⁄° *
__s1
, c⁄° *
__s2
)

531 
__THROW
 
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1, 2));

534 
	$°∫ˇ£cmp
 (c⁄° *
__s1
, c⁄° *
__s2
, 
size_t
 
__n
)

535 
__THROW
 
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1, 2));

538 #ifdef 
__USE_GNU


541 
	$°rˇ£cmp_l
 (c⁄° *
__s1
, c⁄° *
__s2
,

542 
__loˇÀ_t
 
__loc
)

543 
__THROW
 
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1, 2, 3));

545 
	$°∫ˇ£cmp_l
 (c⁄° *
__s1
, c⁄° *
__s2
,

546 
size_t
 
__n
, 
__loˇÀ_t
 
__loc
)

547 
__THROW
 
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1, 2, 4));

550 #ifdef 
__USE_BSD


553 *
	$°r£p
 (**
__ª°ri˘
 
__°rögp
,

554 c⁄° *
__ª°ri˘
 
__dñim
)

555 
__THROW
 
	`__n⁄nuŒ
 ((1, 2));

558 #ifdef 
__USE_XOPEN2K8


560 *
	$°rsig«l
 (
__sig
Ë
__THROW
;

563 *
	$__°p˝y
 (*
__ª°ri˘
 
__de°
, c⁄° *__ª°ri˘ 
__§c
)

564 
__THROW
 
	`__n⁄nuŒ
 ((1, 2));

565 *
	$°p˝y
 (*
__ª°ri˘
 
__de°
, c⁄° *__ª°ri˘ 
__§c
)

566 
__THROW
 
	`__n⁄nuŒ
 ((1, 2));

570 *
	$__°≤˝y
 (*
__ª°ri˘
 
__de°
,

571 c⁄° *
__ª°ri˘
 
__§c
, 
size_t
 
__n
)

572 
__THROW
 
	`__n⁄nuŒ
 ((1, 2));

573 *
	$°≤˝y
 (*
__ª°ri˘
 
__de°
,

574 c⁄° *
__ª°ri˘
 
__§c
, 
size_t
 
__n
)

575 
__THROW
 
	`__n⁄nuŒ
 ((1, 2));

578 #ifdef 
__USE_GNU


580 
	$°rvîscmp
 (c⁄° *
__s1
, c⁄° *
__s2
)

581 
__THROW
 
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1, 2));

584 *
	$°r‰y
 (*
__°rög
Ë
__THROW
 
	`__n⁄nuŒ
 ((1));

587 *
	$mem‰ob
 (*
__s
, 
size_t
 
__n
Ë
__THROW
 
	`__n⁄nuŒ
 ((1));

589 #i‚de‡
ba£«me


594 #ifde‡
__CORRECT_ISO_CPP_STRING_H_PROTO


595 "C++" *
	$ba£«me
 (*
__fûíame
)

596 
__THROW
 
	`__asm
 ("ba£«me"Ë
	`__n⁄nuŒ
 ((1));

597 "C++" c⁄° *
	$ba£«me
 (c⁄° *
__fûíame
)

598 
__THROW
 
	`__asm
 ("ba£«me"Ë
	`__n⁄nuŒ
 ((1));

600 *
	$ba£«me
 (c⁄° *
__fûíame
Ë
__THROW
 
	`__n⁄nuŒ
 ((1));

606 #i‡
deföed
 
__GNUC__
 && __GNUC__ >= 2

607 #i‡
deföed
 
__OPTIMIZE__
 && !deföed 
__OPTIMIZE_SIZE__
 \

608 && !
deföed
 
__NO_INLINE__
 && !deföed 
__˝lu•lus


628 
	~<bôs/°rög.h
>

631 
	~<bôs/°rög2.h
>

634 #i‡
__USE_FORTIFY_LEVEL
 > 0 && 
deföed
 
__f‹tify_fun˘i⁄


636 
	~<bôs/°rög3.h
>

640 
__END_DECLS


	@/usr/include/bits/string.h

19 #i‚de‡
_STRING_H


24 
	#_STRING_ARCH_u«lig√d
 1

	)

28 #i‡!
deföed
 
__x86_64__
 && (deföed 
__i486__
 || deföed 
__≥¡ium__
 \

29 || 
deföed
 
	g__≥¡ium¥o__
 || deföed 
	g__≥¡ium4__
 \

30 || 
deföed
 
	g__noc⁄a__
 || deföed 
	g__©om__
 \

31 || 
deföed
 
	g__c‹e2__
 || deföed 
	g__c‹ei7__
 \

32 || 
deföed
 
	g__k6__
 || deföed 
	g__geode__
 \

33 || 
deföed
 
	g__k8__
 || deföed 
	g__©hl⁄__
 \

34 || 
deföed
 
	g__amdÁm10__
)

38 #i‡!
deföed
 
__NO_STRING_INLINES
 && deföed 
__USE_STRING_INLINES
 \

39 && 
deföed
 
	g__GNUC__
 && __GNUC__ >= 2

41 #i‚de‡
__STRING_INLINE


42 #i‚de‡
__exã∫_ölöe


43 
	#__STRING_INLINE
 
ölöe


	)

45 
	#__STRING_INLINE
 
__exã∫_ölöe


	)

50 
	#__STRING_SMALL_GET16
(
§c
, 
idx
) \

51 ((((c⁄° *Ë(
§c
))[
idx
 + 1] << 8) \

52 | ((c⁄° *Ë(
§c
))[
idx
])

	)

53 
	#__STRING_SMALL_GET32
(
§c
, 
idx
) \

54 (((((c⁄° *Ë(
§c
))[
idx
 + 3] << 8 \

55 | ((c⁄° *Ë(
§c
))[
idx
 + 2]) << 8 \

56 | ((c⁄° *Ë(
§c
))[
idx
 + 1]) << 8 \

57 | ((c⁄° *Ë(
§c
))[
idx
])

	)

61 
	#_HAVE_STRING_ARCH_mem˝y
 1

	)

62 
	#mem˝y
(
de°
, 
§c
, 
n
) \

63 (
	`__exãnsi⁄__
 (
	`__buûtö_c⁄°™t_p
 (
n
) \

64 ? 
	`__mem˝y_c
 ((
de°
), (
§c
), (
n
)) \

65 : 
	`__mem˝y_g
 ((
de°
), (
§c
), (
n
))))

	)

66 
	#__mem˝y_c
(
de°
, 
§c
, 
n
) \

67 ((
n
) == 0 \

68 ? (
de°
) \

69 : (((
n
) % 4 == 0) \

70 ? 
	`__mem˝y_by4
 (
de°
, 
§c
, 
n
) \

71 : (((
n
) % 2 == 0) \

72 ? 
	`__mem˝y_by2
 (
de°
, 
§c
, 
n
) \

73 : 
	`__mem˝y_g
 (
de°
, 
§c
, 
n
))))

	)

75 
__STRING_INLINE
 *
__mem˝y_by4
 (*
__de°
, c⁄° *
__§c
,

76 
size_t
 
__n
);

78 
__STRING_INLINE
 *

79 
	$__mem˝y_by4
 (*
__de°
, c⁄° *
__§c
, 
size_t
 
__n
)

81 
__d0
, 
__d1
;

82 *
__tmp
 = 
__de°
;

83 
__asm__
 
__vﬁ©ûe__


91 : "=&r" (
__d0
), "=&r" (
__tmp
), "=&r" (
__§c
), "=&r" (
__d1
)

92 : "1" (
__tmp
), "2" (
__§c
), "3" (
__n
 / 4)

94  
__de°
;

95 
	}
}

97 
__STRING_INLINE
 *
__mem˝y_by2
 (*
__de°
, c⁄° *
__§c
,

98 
size_t
 
__n
);

100 
__STRING_INLINE
 *

101 
	$__mem˝y_by2
 (*
__de°
, c⁄° *
__§c
, 
size_t
 
__n
)

103 
__d0
, 
__d1
;

104 *
__tmp
 = 
__de°
;

105 
__asm__
 
__vﬁ©ûe__


118 : "=&q" (
__d0
), "=&r" (
__tmp
), "=&r" (
__§c
), "=&r" (
__d1
)

119 : "1" (
__tmp
), "2" (
__§c
), "3" (
__n
 / 2)

121  
__de°
;

122 
	}
}

124 
__STRING_INLINE
 *
__mem˝y_g
 (*
__de°
, c⁄° *
__§c
, 
size_t
 
__n
);

126 
__STRING_INLINE
 *

127 
	$__mem˝y_g
 (*
__de°
, c⁄° *
__§c
, 
size_t
 
__n
)

129 
__d0
, 
__d1
, 
__d2
;

130 *
__tmp
 = 
__de°
;

131 
__asm__
 
__vﬁ©ûe__


142 : "=&c" (
__d0
), "=&D" (
__d1
), "=&S" (
__d2
),

143 "=m" ( *(°ru˘ { 
__exãnsi⁄__
 
__x
[
__n
]; } *)
__de°
)

144 : "0" (
__n
), "1" (
__tmp
), "2" (
__§c
),

145 "m" ( *(°ru˘ { 
__exãnsi⁄__
 
__x
[
__n
]; } *)
__§c
)

147  
__de°
;

148 
	}
}

150 
	#_HAVE_STRING_ARCH_memmove
 1

	)

151 #i‚de‡
_FORCE_INLINES


154 
	#memmove
(
de°
, 
§c
, 
n
Ë
	`__memmove_g
 (de°, src,Ç)

	)

156 
__STRING_INLINE
 *
	$__memmove_g
 (*, c⁄° *, 
size_t
)

157 
	`__asm__
 ("memmove");

159 
__STRING_INLINE
 *

160 
	$__memmove_g
 (*
__de°
, c⁄° *
__§c
, 
size_t
 
__n
)

162 
__d0
, 
__d1
, 
__d2
;

163 *
__tmp
 = 
__de°
;

164 i‡(
__de°
 < 
__§c
)

165 
__asm__
 
__vﬁ©ûe__


168 : "=&c" (
__d0
), "=&S" (
__d1
), "=&D" (
__d2
),

169 "=m" ( *(°ru˘ { 
__exãnsi⁄__
 
__x
[
__n
]; } *)
__de°
)

170 : "0" (
__n
), "1" (
__§c
), "2" (
__tmp
),

171 "m" ( *(°ru˘ { 
__exãnsi⁄__
 
__x
[
__n
]; } *)
__§c
));

173 
__asm__
 
__vﬁ©ûe__


177 : "=&c" (
__d0
), "=&S" (
__d1
), "=&D" (
__d2
),

178 "=m" ( *(°ru˘ { 
__exãnsi⁄__
 
__x
[
__n
]; } *)
__de°
)

179 : "0" (
__n
), "1" (__¿- 1 + (c⁄° *Ë
__§c
),

180 "2" (
__n
 - 1 + (*Ë
__tmp
),

181 "m" ( *(°ru˘ { 
__exãnsi⁄__
 
__x
[
__n
]; } *)
__§c
));

182  
__de°
;

183 
	}
}

187 
	#_HAVE_STRING_ARCH_memcmp
 1

	)

188 #i‚de‡
_FORCE_INLINES


189 #i‚de‡
__PIC__


191 
__STRING_INLINE
 

192 
	$memcmp
 (c⁄° *
__s1
, c⁄° *
__s2
, 
size_t
 
__n
)

194 
__d0
, 
__d1
, 
__d2
;

195 
__ªs
;

196 
__asm__
 
__vﬁ©ûe__


204 : "=&a" (
__ªs
), "=&S" (
__d0
), "=&D" (
__d1
), "=&c" (
__d2
)

205 : "0" (0), "1" (
__s1
), "2" (
__s2
), "3" (
__n
),

206 "m" ( *(°ru˘ { 
__exãnsi⁄__
 
__x
[
__n
]; } *)
__s1
),

207 "m" ( *(°ru˘ { 
__exãnsi⁄__
 
__x
[
__n
]; } *)
__s2
)

209  
__ªs
;

210 
	}
}

215 
	#_HAVE_STRING_ARCH_mem£t
 1

	)

216 
	#_USE_STRING_ARCH_mem£t
 1

	)

217 
	#mem£t
(
s
, 
c
, 
n
) \

218 (
	`__exãnsi⁄__
 (
	`__buûtö_c⁄°™t_p
 (
n
) && (n) <= 16 \

219 ? ((
n
) == 1 \

220 ? 
	`__mem£t_c1
 ((
s
), (
c
)) \

221 : 
	`__mem£t_gc
 ((
s
), (
c
), (
n
))) \

222 : (
	`__buûtö_c⁄°™t_p
 (
c
) \

223 ? (
	`__buûtö_c⁄°™t_p
 (
n
) \

224 ? 
	`__mem£t_c˙
 ((
s
), (
c
), (
n
)) \

225 : 
	`mem£t
 ((
s
), (
c
), (
n
))) \

226 : (
	`__buûtö_c⁄°™t_p
 (
n
) \

227 ? 
	`__mem£t_g˙
 ((
s
), (
c
), (
n
)) \

228 : 
	`mem£t
 ((
s
), (
c
), (
n
))))))

	)

230 
	#__mem£t_c1
(
s
, 
c
Ë({ *
__s
 = (s); \

231 *((*Ë
__s
Ë(Ë(
c
); \

232 
__s
; })

	)

234 
	#__mem£t_gc
(
s
, 
c
, 
n
) \

235 ({ *
__s
 = (
s
); \

237 
__ui
; \

238 
__usi
; \

239 
__uc
; \

240 } *
__u
 = 
__s
; \

241 
__c
 = ((Ë((Ë(
c
))) * 0x01010101; \

247 i‡((
n
) == 3 || (n) >= 5) \

248 
__asm__
 
	`__vﬁ©ûe__
 ("" : "Ù" (
__c
) : "0" (__c)); \

251 
n
) \

254 
__u
->
__ui
 = 
__c
; \

255 
__u
 = 
	`__exãnsi⁄__
 ((*) __u + 4); \

257 
__u
->
__ui
 = 
__c
; \

258 
__u
 = 
	`__exãnsi⁄__
 ((*) __u + 4); \

260 
__u
->
__ui
 = 
__c
; \

261 
__u
 = 
	`__exãnsi⁄__
 ((*) __u + 4); \

263 
__u
->
__usi
 = (Ë
__c
; \

264 
__u
 = 
	`__exãnsi⁄__
 ((*) __u + 2); \

265 
__u
->
__uc
 = (Ë
__c
; \

269 
__u
->
__ui
 = 
__c
; \

270 
__u
 = 
	`__exãnsi⁄__
 ((*) __u + 4); \

272 
__u
->
__ui
 = 
__c
; \

273 
__u
 = 
	`__exãnsi⁄__
 ((*) __u + 4); \

275 
__u
->
__ui
 = 
__c
; \

276 
__u
 = 
	`__exãnsi⁄__
 ((*) __u + 4); \

278 
__u
->
__usi
 = (Ë
__c
; \

282 
__u
->
__ui
 = 
__c
; \

283 
__u
 = 
	`__exãnsi⁄__
 ((*) __u + 4); \

285 
__u
->
__ui
 = 
__c
; \

286 
__u
 = 
	`__exãnsi⁄__
 ((*) __u + 4); \

288 
__u
->
__ui
 = 
__c
; \

289 
__u
 = 
	`__exãnsi⁄__
 ((*) __u + 4); \

291 
__u
->
__uc
 = (Ë
__c
; \

295 
__u
->
__ui
 = 
__c
; \

296 
__u
 = 
	`__exãnsi⁄__
 ((*) __u + 4); \

298 
__u
->
__ui
 = 
__c
; \

299 
__u
 = 
	`__exãnsi⁄__
 ((*) __u + 4); \

301 
__u
->
__ui
 = 
__c
; \

302 
__u
 = 
	`__exãnsi⁄__
 ((*) __u + 4); \

304 
__u
->
__ui
 = 
__c
; \

309 
__s
; })

	)

311 
	#__mem£t_c˙
(
s
, 
c
, 
n
) \

312 (((
n
) % 4 == 0) \

313 ? 
	`__mem£t_c˙_by4
 (
s
, ((Ë((Ë(
c
))) * 0x01010101,\

314 
n
) \

315 : (((
n
) % 2 == 0) \

316 ? 
	`__mem£t_c˙_by2
 (
s
, \

317 ((Ë((Ë(
c
))) * 0x01010101,\

318 
n
) \

319 : 
	`mem£t
 (
s
, 
c
, 
n
)))

	)

321 
__STRING_INLINE
 *
__mem£t_c˙_by4
 (*
__s
, 
__c
,

322 
size_t
 
__n
);

324 
__STRING_INLINE
 *

325 
	$__mem£t_c˙_by4
 (*
__s
, 
__c
, 
size_t
 
__n
)

327 *
__tmp
 = 
__s
;

328 
__d0
;

329 #ifde‡
__i686__


330 
__asm__
 
__vﬁ©ûe__


333 : "=&a" (
__c
), "=&D" (
__tmp
), "=&c" (
__d0
),

334 "=m" ( *(°ru˘ { 
__exãnsi⁄__
 
__x
[
__n
]; } *)
__s
)

335 : "0" ((Ë
__c
), "1" (
__tmp
), "2" (
__n
 / 4)

338 
__asm__
 
__vﬁ©ûe__


344 : "=&r" (
__c
), "=&r" (
__tmp
), "=&r" (
__d0
),

345 "=m" ( *(°ru˘ { 
__exãnsi⁄__
 
__x
[
__n
]; } *)
__s
)

346 : "0" ((Ë
__c
), "1" (
__tmp
), "2" (
__n
 / 4)

349  
__s
;

350 
	}
}

352 
__STRING_INLINE
 *
__mem£t_c˙_by2
 (*
__s
, 
__c
,

353 
size_t
 
__n
);

355 
__STRING_INLINE
 *

356 
	$__mem£t_c˙_by2
 (*
__s
, 
__c
, 
size_t
 
__n
)

358 
__d0
, 
__d1
;

359 *
__tmp
 = 
__s
;

360 #ifde‡
__i686__


361 
__asm__
 
__vﬁ©ûe__


365 : "=&a" (
__d0
), "=&D" (
__tmp
), "=&c" (
__d1
),

366 "=m" ( *(°ru˘ { 
__exãnsi⁄__
 
__x
[
__n
]; } *)
__s
)

367 : "0" ((Ë
__c
), "1" (
__tmp
), "2" (
__n
 / 4)

370 
__asm__
 
__vﬁ©ûe__


376 : "=&q" (
__d0
), "=&r" (
__tmp
), "=&r" (
__d1
),

377 "=m" ( *(°ru˘ { 
__exãnsi⁄__
 
__x
[
__n
]; } *)
__s
)

378 : "0" ((Ë
__c
), "1" (
__tmp
), "2" (
__n
 / 4)

381  
__s
;

382 
	}
}

384 
	#__mem£t_g˙
(
s
, 
c
, 
n
) \

385 (((
n
) % 4 == 0) \

386 ? 
	`__mem£t_g˙_by4
 (
s
, 
c
, 
n
) \

387 : (((
n
) % 2 == 0) \

388 ? 
	`__mem£t_g˙_by2
 (
s
, 
c
, 
n
) \

389 : 
	`mem£t
 (
s
, 
c
, 
n
)))

	)

391 
__STRING_INLINE
 *
__mem£t_g˙_by4
 (*
__s
, 
__c
, 
size_t
 
__n
);

393 
__STRING_INLINE
 *

394 
	$__mem£t_g˙_by4
 (*
__s
, 
__c
, 
size_t
 
__n
)

396 *
__tmp
 = 
__s
;

397 
__d0
;

398 
__asm__
 
__vﬁ©ûe__


408 : "=&q" (
__c
), "=&r" (
__tmp
), "=&r" (
__d0
),

409 "=m" ( *(°ru˘ { 
__exãnsi⁄__
 
__x
[
__n
]; } *)
__s
)

410 : "0" ((Ë
__c
), "1" (
__tmp
), "2" (
__n
 / 4)

412  
__s
;

413 
	}
}

415 
__STRING_INLINE
 *
__mem£t_g˙_by2
 (*
__s
, 
__c
, 
size_t
 
__n
);

417 
__STRING_INLINE
 *

418 
	$__mem£t_g˙_by2
 (*
__s
, 
__c
, 
size_t
 
__n
)

420 
__d0
, 
__d1
;

421 *
__tmp
 = 
__s
;

422 
__asm__
 
__vﬁ©ûe__


433 : "=&q" (
__d0
), "=&r" (
__tmp
), "=&r" (
__d1
),

434 "=m" ( *(°ru˘ { 
__exãnsi⁄__
 
__x
[
__n
]; } *)
__s
)

435 : "0" ((Ë
__c
), "1" (
__tmp
), "2" (
__n
 / 4)

437  
__s
;

438 
	}
}

442 
	#_HAVE_STRING_ARCH_memchr
 1

	)

443 #i‚de‡
_FORCE_INLINES


444 
__STRING_INLINE
 *

445 
	$memchr
 (c⁄° *
__s
, 
__c
, 
size_t
 
__n
)

447 
__d0
;

448 #ifde‡
__i686__


449 
__d1
;

451 *
__ªs
;

452 i‡(
__n
 == 0)

453  
NULL
;

454 #ifde‡
__i686__


455 
__asm__
 
__vﬁ©ûe__


459 : "=D" (
__ªs
), "=&c" (
__d0
), "=&r" (
__d1
)

460 : "a" (
__c
), "0" (
__s
), "1" (
__n
), "2" (1),

461 "m" ( *(°ru˘ { 
__exãnsi⁄__
 
__x
[
__n
]; } *)
__s
)

464 
__asm__
 
__vﬁ©ûe__


470 : "=D" (
__ªs
), "=&c" (
__d0
)

471 : "a" (
__c
), "0" (
__s
), "1" (
__n
),

472 "m" ( *(°ru˘ { 
__exãnsi⁄__
 
__x
[
__n
]; } *)
__s
)

475  
__ªs
 - 1;

476 
	}
}

479 
	#_HAVE_STRING_ARCH_memrchr
 1

	)

480 #i‚de‡
_FORCE_INLINES


481 
__STRING_INLINE
 *
__memrchr
 (c⁄° *
__s
, 
__c
, 
size_t
 
__n
);

483 
__STRING_INLINE
 *

484 
	$__memrchr
 (c⁄° *
__s
, 
__c
, 
size_t
 
__n
)

486 
__d0
;

487 #ifde‡
__i686__


488 
__d1
;

490 *
__ªs
;

491 i‡(
__n
 == 0)

492  
NULL
;

493 #ifde‡
__i686__


494 
__asm__
 
__vﬁ©ûe__


500 : "=D" (
__ªs
), "=&c" (
__d0
), "=&r" (
__d1
)

501 : "a" (
__c
), "0" (
__s
 + 
__n
 - 1), "1" (__n), "2" (-1),

502 "m" ( *(°ru˘ { 
__exãnsi⁄__
 
__x
[
__n
]; } *)
__s
)

505 
__asm__
 
__vﬁ©ûe__


512 : "=D" (
__ªs
), "=&c" (
__d0
)

513 : "a" (
__c
), "0" (
__s
 + 
__n
 - 1), "1" (__n),

514 "m" ( *(°ru˘ { 
__exãnsi⁄__
 
__x
[
__n
]; } *)
__s
)

517  
__ªs
;

518 
	}
}

519 #ifde‡
__USE_GNU


520 
	#memrchr
(
s
, 
c
, 
n
Ë
	`__memrchr
 ((s), (c), (n))

	)

525 
	#_HAVE_STRING_ARCH_øwmemchr
 1

	)

526 
__STRING_INLINE
 *
__øwmemchr
 (c⁄° *
__s
, 
__c
);

528 #i‚de‡
_FORCE_INLINES


529 
__STRING_INLINE
 *

530 
	$__øwmemchr
 (c⁄° *
__s
, 
__c
)

532 
__d0
;

533 *
__ªs
;

534 
__asm__
 
__vﬁ©ûe__


537 : "=D" (
__ªs
), "=&c" (
__d0
)

538 : "a" (
__c
), "0" (
__s
), "1" (0xffffffff),

539 "m" ( *(°ru˘ { 
__x
[0xfffffff]; } *)
__s
)

541  
__ªs
 - 1;

542 
	}
}

543 #ifde‡
__USE_GNU


544 
__STRING_INLINE
 *

545 
	$øwmemchr
 (c⁄° *
__s
, 
__c
)

547  
	`__øwmemchr
 (
__s
, 
__c
);

548 
	}
}

554 
	#_HAVE_STRING_ARCH_°æí
 1

	)

555 
	#°æí
(
°r
) \

556 (
	`__exãnsi⁄__
 (
	`__buûtö_c⁄°™t_p
 (
°r
) \

557 ? 
	`__buûtö_°æí
 (
°r
) \

558 : 
	`__°æí_g
 (
°r
)))

	)

559 
__STRING_INLINE
 
size_t
 
__°æí_g
 (c⁄° *
__°r
);

561 
__STRING_INLINE
 
size_t


562 
	$__°æí_g
 (c⁄° *
__°r
)

564 
__dummy
;

565 c⁄° *
__tmp
 = 
__°r
;

566 
__asm__
 
__vﬁ©ûe__


572 : "Ù" (
__tmp
), "=&q" (
__dummy
)

573 : "0" (
__°r
),

574 "m" ( *(°ru˘ { 
__x
[0xfffffff]; } *)
__°r
)

576  
__tmp
 - 
__°r
 - 1;

577 
	}
}

581 
	#_HAVE_STRING_ARCH_°r˝y
 1

	)

582 
	#°r˝y
(
de°
, 
§c
) \

583 (
	`__exãnsi⁄__
 (
	`__buûtö_c⁄°™t_p
 (
§c
) \

584 ? ( ((
§c
)[0]Ë=1 && 
	`°æí
 (src) + 1 <= 8 \

585 ? 
	`__°r˝y_a_smÆl
 ((
de°
), (
§c
), 
	`°æí
 (src) + 1) \

586 : (*Ë
	`mem˝y
 ((*Ë(
de°
), \

587 (c⁄° *Ë(
§c
), \

588 
	`°æí
 (
§c
) + 1)) \

589 : 
	`__°r˝y_g
 ((
de°
), (
§c
))))

	)

591 
	#__°r˝y_a_smÆl
(
de°
, 
§c
, 
§˛í
) \

592 (
	`__exãnsi⁄__
 ({ *
__de°
 = (
de°
); \

594 
__ui
; \

595 
__usi
; \

596 
__uc
; \

597 
__c
; \

598 } *
__u
 = (*Ë
__de°
; \

599 
§˛í
) \

602 
__u
->
__uc
 = '\0'; \

605 
__u
->
__usi
 = 
	`__STRING_SMALL_GET16
 (
§c
, 0); \

608 
__u
->
__usi
 = 
	`__STRING_SMALL_GET16
 (
§c
, 0); \

609 
__u
 = 
	`__exãnsi⁄__
 ((*) __u + 2); \

610 
__u
->
__uc
 = '\0'; \

613 
__u
->
__ui
 = 
	`__STRING_SMALL_GET32
 (
§c
, 0); \

616 
__u
->
__ui
 = 
	`__STRING_SMALL_GET32
 (
§c
, 0); \

617 
__u
 = 
	`__exãnsi⁄__
 ((*) __u + 4); \

618 
__u
->
__uc
 = '\0'; \

621 
__u
->
__ui
 = 
	`__STRING_SMALL_GET32
 (
§c
, 0); \

622 
__u
 = 
	`__exãnsi⁄__
 ((*) __u + 4); \

623 
__u
->
__usi
 = 
	`__STRING_SMALL_GET16
 (
§c
, 4); \

626 
__u
->
__ui
 = 
	`__STRING_SMALL_GET32
 (
§c
, 0); \

627 
__u
 = 
	`__exãnsi⁄__
 ((*) __u + 4); \

628 
__u
->
__usi
 = 
	`__STRING_SMALL_GET16
 (
§c
, 4); \

629 
__u
 = 
	`__exãnsi⁄__
 ((*) __u + 2); \

630 
__u
->
__uc
 = '\0'; \

633 
__u
->
__ui
 = 
	`__STRING_SMALL_GET32
 (
§c
, 0); \

634 
__u
 = 
	`__exãnsi⁄__
 ((*) __u + 4); \

635 
__u
->
__ui
 = 
	`__STRING_SMALL_GET32
 (
§c
, 4); \

638 (*Ë
__de°
; }))

	)

640 
__STRING_INLINE
 *
__°r˝y_g
 (*
__de°
, c⁄° *
__§c
);

642 
__STRING_INLINE
 *

643 
	$__°r˝y_g
 (*
__de°
, c⁄° *
__§c
)

645 *
__tmp
 = 
__de°
;

646 
__dummy
;

647 
__asm__
 
__vﬁ©ûe__


656 : "=&r" (
__§c
), "=&r" (
__tmp
), "=&q" (
__dummy
),

657 "=m" ( *(°ru˘ { 
__x
[0xfffffff]; } *)
__de°
)

658 : "0" (
__§c
), "1" (
__tmp
),

659 "m" ( *(°ru˘ { 
__x
[0xfffffff]; } *)
__§c
)

661  
__de°
;

662 
	}
}

665 #ifde‡
__USE_GNU


666 
	#_HAVE_STRING_ARCH_°p˝y
 1

	)

668 
	#__°p˝y
(
de°
, 
§c
) \

669 (
	`__exãnsi⁄__
 (
	`__buûtö_c⁄°™t_p
 (
§c
) \

670 ? (
	`°æí
 (
§c
) + 1 <= 8 \

671 ? 
	`__°p˝y_a_smÆl
 ((
de°
), (
§c
), 
	`°æí
 (src) + 1) \

672 : 
	`__°p˝y_c
 ((
de°
), (
§c
), 
	`°æí
 (src) + 1)) \

673 : 
	`__°p˝y_g
 ((
de°
), (
§c
))))

	)

674 
	#__°p˝y_c
(
de°
, 
§c
, 
§˛í
) \

675 ((
§˛í
) % 4 == 0 \

676 ? 
	`__memp˝y_by4
 (
de°
, 
§c
, 
§˛í
) - 1 \

677 : ((
§˛í
) % 2 == 0 \

678 ? 
	`__memp˝y_by2
 (
de°
, 
§c
, 
§˛í
) - 1 \

679 : 
	`__memp˝y_byn
 (
de°
, 
§c
, 
§˛í
Ë- 1))

	)

682 
	#°p˝y
(
de°
, 
§c
Ë
	`__°p˝y
 ((de°), (§c))

	)

684 
	#__°p˝y_a_smÆl
(
de°
, 
§c
, 
§˛í
) \

685 (
	`__exãnsi⁄__
 ({ union { \

686 
__ui
; \

687 
__usi
; \

688 
__uc
; \

689 
__c
; \

690 } *
__u
 = (*Ë(
de°
); \

691 
§˛í
) \

694 
__u
->
__uc
 = '\0'; \

697 
__u
->
__usi
 = 
	`__STRING_SMALL_GET16
 (
§c
, 0); \

698 
__u
 = 
	`__exãnsi⁄__
 ((*) __u + 1); \

701 
__u
->
__usi
 = 
	`__STRING_SMALL_GET16
 (
§c
, 0); \

702 
__u
 = 
	`__exãnsi⁄__
 ((*) __u + 2); \

703 
__u
->
__uc
 = '\0'; \

706 
__u
->
__ui
 = 
	`__STRING_SMALL_GET32
 (
§c
, 0); \

707 
__u
 = 
	`__exãnsi⁄__
 ((*) __u + 3); \

710 
__u
->
__ui
 = 
	`__STRING_SMALL_GET32
 (
§c
, 0); \

711 
__u
 = 
	`__exãnsi⁄__
 ((*) __u + 4); \

712 
__u
->
__uc
 = '\0'; \

715 
__u
->
__ui
 = 
	`__STRING_SMALL_GET32
 (
§c
, 0); \

716 
__u
 = 
	`__exãnsi⁄__
 ((*) __u + 4); \

717 
__u
->
__usi
 = 
	`__STRING_SMALL_GET16
 (
§c
, 4); \

718 
__u
 = 
	`__exãnsi⁄__
 ((*) __u + 1); \

721 
__u
->
__ui
 = 
	`__STRING_SMALL_GET32
 (
§c
, 0); \

722 
__u
 = 
	`__exãnsi⁄__
 ((*) __u + 4); \

723 
__u
->
__usi
 = 
	`__STRING_SMALL_GET16
 (
§c
, 4); \

724 
__u
 = 
	`__exãnsi⁄__
 ((*) __u + 2); \

725 
__u
->
__uc
 = '\0'; \

728 
__u
->
__ui
 = 
	`__STRING_SMALL_GET32
 (
§c
, 0); \

729 
__u
 = 
	`__exãnsi⁄__
 ((*) __u + 4); \

730 
__u
->
__ui
 = 
	`__STRING_SMALL_GET32
 (
§c
, 4); \

731 
__u
 = 
	`__exãnsi⁄__
 ((*) __u + 3); \

734 (*Ë
__u
; }))

	)

736 
__STRING_INLINE
 *
__memp˝y_by4
 (*
__de°
, c⁄° *
__§c
,

737 
size_t
 
__§˛í
);

739 
__STRING_INLINE
 *

740 
	$__memp˝y_by4
 (*
__de°
, c⁄° *
__§c
, 
size_t
 
__§˛í
)

742 *
__tmp
 = 
__de°
;

743 
__d0
, 
__d1
;

744 
__asm__
 
__vﬁ©ûe__


752 : "=&r" (
__d0
), "Ù" (
__tmp
), "=&r" (
__§c
), "=&r" (
__d1
)

753 : "1" (
__tmp
), "2" (
__§c
), "3" (
__§˛í
 / 4)

755  
__tmp
;

756 
	}
}

758 
__STRING_INLINE
 *
__memp˝y_by2
 (*
__de°
, c⁄° *
__§c
,

759 
size_t
 
__§˛í
);

761 
__STRING_INLINE
 *

762 
	$__memp˝y_by2
 (*
__de°
, c⁄° *
__§c
, 
size_t
 
__§˛í
)

764 *
__tmp
 = 
__de°
;

765 
__d0
, 
__d1
;

766 
__asm__
 
__vﬁ©ûe__


779 : "=&q" (
__d0
), "Ù" (
__tmp
), "=&r" (
__§c
), "=&r" (
__d1
),

780 "=m" ( *(°ru˘ { 
__exãnsi⁄__
 
__x
[
__§˛í
]; } *)
__de°
)

781 : "1" (
__tmp
), "2" (
__§c
), "3" (
__§˛í
 / 2),

782 "m" ( *(°ru˘ { 
__exãnsi⁄__
 
__x
[
__§˛í
]; } *)
__§c
)

784  
__tmp
 + 2;

785 
	}
}

787 
__STRING_INLINE
 *
__memp˝y_byn
 (*
__de°
, c⁄° *
__§c
,

788 
size_t
 
__§˛í
);

790 
__STRING_INLINE
 *

791 
	$__memp˝y_byn
 (*
__de°
, c⁄° *
__§c
, 
size_t
 
__§˛í
)

793 
__d0
, 
__d1
;

794 *
__tmp
 = 
__de°
;

795 
__asm__
 
__vﬁ©ûe__


806 : "=D" (
__tmp
), "=&c" (
__d0
), "=&S" (
__d1
),

807 "=m" ( *(°ru˘ { 
__exãnsi⁄__
 
__x
[
__§˛í
]; } *)
__de°
)

808 : "0" (
__tmp
), "1" (
__§˛í
), "2" (
__§c
),

809 "m" ( *(°ru˘ { 
__exãnsi⁄__
 
__x
[
__§˛í
]; } *)
__§c
)

811  
__tmp
;

812 
	}
}

814 
__STRING_INLINE
 *
__°p˝y_g
 (*
__de°
, c⁄° *
__§c
);

816 
__STRING_INLINE
 *

817 
	$__°p˝y_g
 (*
__de°
, c⁄° *
__§c
)

819 *
__tmp
 = 
__de°
;

820 
__dummy
;

821 
__asm__
 
__vﬁ©ûe__


830 : "=&r" (
__§c
), "Ù" (
__tmp
), "=&q" (
__dummy
),

831 "=m" ( *(°ru˘ { 
__x
[0xfffffff]; } *)
__de°
)

832 : "0" (
__§c
), "1" (
__tmp
),

833 "m" ( *(°ru˘ { 
__x
[0xfffffff]; } *)
__§c
)

835  
__tmp
 - 1;

836 
	}
}

841 
	#_HAVE_STRING_ARCH_°∫˝y
 1

	)

842 
	#°∫˝y
(
de°
, 
§c
, 
n
) \

843 (
	`__exãnsi⁄__
 (
	`__buûtö_c⁄°™t_p
 (
§c
) \

844 ? ((
	`°æí
 (
§c
Ë+ 1 >((
size_t
Ë(
n
)) \

845 ? (*Ë
	`mem˝y
 ((*Ë(
de°
), \

846 (c⁄° *Ë(
§c
), 
n
) \

847 : 
	`__°∫˝y_cg
 ((
de°
), (
§c
), 
	`°æí
 (§cË+ 1, 
n
))) \

848 : 
	`__°∫˝y_gg
 ((
de°
), (
§c
), 
n
)))

	)

849 
	#__°∫˝y_cg
(
de°
, 
§c
, 
§˛í
, 
n
) \

850 (((
§˛í
) % 4 == 0) \

851 ? 
	`__°∫˝y_by4
 (
de°
, 
§c
, 
§˛í
, 
n
) \

852 : (((
§˛í
) % 2 == 0) \

853 ? 
	`__°∫˝y_by2
 (
de°
, 
§c
, 
§˛í
, 
n
) \

854 : 
	`__°∫˝y_byn
 (
de°
, 
§c
, 
§˛í
, 
n
)))

	)

856 
__STRING_INLINE
 *
__°∫˝y_by4
 (*
__de°
, c⁄° 
__§c
[],

857 
size_t
 
__§˛í
, size_à
__n
);

859 
__STRING_INLINE
 *

860 
	$__°∫˝y_by4
 (*
__de°
, c⁄° 
__§c
[], 
size_t
 
__§˛í
, size_à
__n
)

862 *
__tmp
 = 
__de°
;

863 
__dummy1
, 
__dummy2
;

864 
__asm__
 
__vﬁ©ûe__


872 : "=&r" (
__dummy1
), "Ù" (
__tmp
), "=&r" (
__§c
), "=&r" (
__dummy2
),

873 "=m" ( *(°ru˘ { 
__exãnsi⁄__
 
__x
[
__§˛í
]; } *)
__de°
)

874 : "1" (
__tmp
), "2" (
__§c
), "3" (
__§˛í
 / 4),

875 "m" ( *(°ru˘ { 
__exãnsi⁄__
 
__x
[
__§˛í
]; } *)
__§c
)

877 (Ë
	`mem£t
 (
__tmp
, '\0', 
__n
 - 
__§˛í
);

878  
__de°
;

879 
	}
}

881 
__STRING_INLINE
 *
__°∫˝y_by2
 (*
__de°
, c⁄° 
__§c
[],

882 
size_t
 
__§˛í
, size_à
__n
);

884 
__STRING_INLINE
 *

885 
	$__°∫˝y_by2
 (*
__de°
, c⁄° 
__§c
[], 
size_t
 
__§˛í
, size_à
__n
)

887 *
__tmp
 = 
__de°
;

888 
__dummy1
, 
__dummy2
;

889 
__asm__
 
__vﬁ©ûe__


902 : "=&q" (
__dummy1
), "Ù" (
__tmp
), "=&r" (
__§c
), "=&r" (
__dummy2
),

903 "=m" ( *(°ru˘ { 
__exãnsi⁄__
 
__x
[
__§˛í
]; } *)
__de°
)

904 : "1" (
__tmp
), "2" (
__§c
), "3" (
__§˛í
 / 2),

905 "m" ( *(°ru˘ { 
__exãnsi⁄__
 
__x
[
__§˛í
]; } *)
__§c
)

907 (Ë
	`mem£t
 (
__tmp
 + 2, '\0', 
__n
 - 
__§˛í
);

908  
__de°
;

909 
	}
}

911 
__STRING_INLINE
 *
__°∫˝y_byn
 (*
__de°
, c⁄° 
__§c
[],

912 
size_t
 
__§˛í
, size_à
__n
);

914 
__STRING_INLINE
 *

915 
	$__°∫˝y_byn
 (*
__de°
, c⁄° 
__§c
[], 
size_t
 
__§˛í
, size_à
__n
)

917 
__d0
, 
__d1
;

918 *
__tmp
 = 
__de°
;

919 
__asm__
 
__vﬁ©ûe__


930 : "=D" (
__tmp
), "=&c" (
__d0
), "=&S" (
__d1
),

931 "=m" ( *(°ru˘ { 
__exãnsi⁄__
 
__x
[
__§˛í
]; } *)
__de°
)

932 : "1" (
__§˛í
), "0" (
__tmp
),"2" (
__§c
),

933 "m" ( *(°ru˘ { 
__exãnsi⁄__
 
__x
[
__§˛í
]; } *)
__§c
)

935 (Ë
	`mem£t
 (
__tmp
, '\0', 
__n
 - 
__§˛í
);

936  
__de°
;

937 
	}
}

939 
__STRING_INLINE
 *
__°∫˝y_gg
 (*
__de°
, c⁄° *
__§c
,

940 
size_t
 
__n
);

942 
__STRING_INLINE
 *

943 
	$__°∫˝y_gg
 (*
__de°
, c⁄° *
__§c
, 
size_t
 
__n
)

945 *
__tmp
 = 
__de°
;

946 
__dummy
;

947 i‡(
__n
 > 0)

948 
__asm__
 
__vﬁ©ûe__


964 : "=&r" (
__§c
), "=&r" (
__tmp
), "=&q" (
__dummy
), "=&r" (
__n
)

965 : "0" (
__§c
), "1" (
__tmp
), "3" (
__n
)

968  
__de°
;

969 
	}
}

973 
	#_HAVE_STRING_ARCH_°rˇt
 1

	)

974 
	#°rˇt
(
de°
, 
§c
) \

975 (
	`__exãnsi⁄__
 (
	`__buûtö_c⁄°™t_p
 (
§c
) \

976 ? 
	`__°rˇt_c
 ((
de°
), (
§c
), 
	`°æí
 (src) + 1) \

977 : 
	`__°rˇt_g
 ((
de°
), (
§c
))))

	)

979 
__STRING_INLINE
 *
__°rˇt_c
 (*
__de°
, c⁄° 
__§c
[],

980 
size_t
 
__§˛í
);

982 
__STRING_INLINE
 *

983 
	$__°rˇt_c
 (*
__de°
, c⁄° 
__§c
[], 
size_t
 
__§˛í
)

985 #ifde‡
__i686__


986 
__d0
;

987 *
__tmp
;

988 
__asm__
 
__vﬁ©ûe__


990 : "=D" (
__tmp
), "=&c" (
__d0
),

991 "=m" ( *(°ru˘ { 
__x
[0xfffffff]; } *)
__de°
)

992 : "0" (
__de°
), "1" (0xffffffff), "a" (0),

993 "m" ( *(°ru˘ { 
__exãnsi⁄__
 
__x
[
__§˛í
]; } *)
__§c
)

995 --
__tmp
;

997 *
__tmp
 = 
__de°
 - 1;

998 
__asm__
 
__vﬁ©ûe__


1003 : "Ù" (
__tmp
),

1004 "=m" ( *(°ru˘ { 
__x
[0xfffffff]; } *)
__de°
)

1005 : "0" (
__tmp
),

1006 "m" ( *(°ru˘ { 
__exãnsi⁄__
 
__x
[
__§˛í
]; } *)
__§c
)

1009 (Ë
	`mem˝y
 (
__tmp
, 
__§c
, 
__§˛í
);

1010  
__de°
;

1011 
	}
}

1013 
__STRING_INLINE
 *
__°rˇt_g
 (*
__de°
, c⁄° *
__§c
);

1015 
__STRING_INLINE
 *

1016 
	$__°rˇt_g
 (*
__de°
, c⁄° *
__§c
)

1018 *
__tmp
 = 
__de°
 - 1;

1019 
__dummy
;

1020 
__asm__
 
__vﬁ©ûe__


1032 : "=&q" (
__dummy
), "=&r" (
__tmp
), "=&r" (
__§c
),

1033 "=m" ( *(°ru˘ { 
__x
[0xfffffff]; } *)
__de°
)

1034 : "1" (
__tmp
), "2" (
__§c
),

1035 "m" ( *(°ru˘ { 
__x
[0xfffffff]; } *)
__§c
)

1037  
__de°
;

1038 
	}
}

1042 
	#_HAVE_STRING_ARCH_°∫ˇt
 1

	)

1043 
	#°∫ˇt
(
de°
, 
§c
, 
n
) \

1044 (
	`__exãnsi⁄__
 ({ *
__de°
 = (
de°
); \

1045 
	`__buûtö_c⁄°™t_p
 (
§c
Ë&& __buûtö_c⁄°™t_∞(
n
) \

1046 ? (
	`°æí
 (
§c
Ë< ((
size_t
Ë(
n
)) \

1047 ? 
	`°rˇt
 (
__de°
, (
§c
)) \

1048 : (*(*)
	`__memp˝y
 (
	`°rchr
 (
__de°
, '\0'), \

1049 (c⁄° *Ë(
§c
), \

1050 (
n
)Ë0, 
__de°
)) \

1051 : 
	`__°∫ˇt_g
 (
__de°
, (
§c
), (
n
)); }))

	)

1053 
__STRING_INLINE
 *
__°∫ˇt_g
 (*
__de°
, c⁄° 
__§c
[],

1054 
size_t
 
__n
);

1056 
__STRING_INLINE
 *

1057 
	$__°∫ˇt_g
 (*
__de°
, c⁄° 
__§c
[], 
size_t
 
__n
)

1059 *
__tmp
 = 
__de°
;

1060 
__dummy
;

1061 #ifde‡
__i686__


1062 
__asm__
 
__vﬁ©ûe__


1076 : "=&a" (
__dummy
), "=&D" (
__tmp
), "=&S" (
__§c
), "=&c" (
__n
)

1077 : "g" (
__n
), "0" (0), "1" (
__tmp
), "2" (
__§c
), "3" (0xffffffff)

1080 --
__tmp
;

1081 
__asm__
 
__vﬁ©ûe__


1098 : "=&q" (
__dummy
), "=&r" (
__tmp
), "=&r" (
__§c
), "=&r" (
__n
)

1099 : "1" (
__tmp
), "2" (
__§c
), "3" (
__n
)

1102  
__de°
;

1103 
	}
}

1107 
	#_HAVE_STRING_ARCH_°rcmp
 1

	)

1108 
	#°rcmp
(
s1
, 
s2
) \

1109 (
	`__exãnsi⁄__
 (
	`__buûtö_c⁄°™t_p
 (
s1
Ë&& __buûtö_c⁄°™t_∞(
s2
) \

1110 && ( ((
s1
)[0]Ë!1 || 
	`°æí
 (s1) >= 4) \

1111 && ( ((
s2
)[0]Ë!1 || 
	`°æí
 (s2) >= 4) \

1112 ? 
	`memcmp
 ((c⁄° *Ë(
s1
), (c⁄° *Ë(
s2
), \

1113 (
	`°æí
 (
s1
Ë< såÀ¿(
s2
) \

1114 ? 
	`°æí
 (
s1
Ë: såÀ¿(
s2
)) + 1) \

1115 : (
	`__buûtö_c⁄°™t_p
 (
s1
) &&  ((s1)[0]) == 1 \

1116 &&  ((
s2
)[0]Ë=1 && 
	`°æí
 (
s1
) < 4 \

1117 ? (
	`__buûtö_c⁄°™t_p
 (
s2
) &&  ((s2)[0]) == 1 \

1118 ? 
	`__°rcmp_cc
 ((c⁄° *Ë(
s1
), \

1119 (c⁄° *Ë(
s2
), \

1120 
	`°æí
 (
s1
)) \

1121 : 
	`__°rcmp_cg
 ((c⁄° *Ë(
s1
), \

1122 (c⁄° *Ë(
s2
), \

1123 
	`°æí
 (
s1
))) \

1124 : (
	`__buûtö_c⁄°™t_p
 (
s2
Ë&&  ((
s1
)[0]) == 1 \

1125 &&  ((
s2
)[0]Ë=1 && 
	`°æí
 (s2) < 4 \

1126 ? (
	`__buûtö_c⁄°™t_p
 (
s1
) \

1127 ? 
	`__°rcmp_cc
 ((c⁄° *Ë(
s1
), \

1128 (c⁄° *Ë(
s2
), \

1129 
	`°æí
 (
s2
)) \

1130 : 
	`__°rcmp_gc
 ((c⁄° *Ë(
s1
), \

1131 (c⁄° *Ë(
s2
), \

1132 
	`°æí
 (
s2
))) \

1133 : 
	`__°rcmp_gg
 ((
s1
), (
s2
))))))

	)

1135 
	#__°rcmp_cc
(
s1
, 
s2
, 
l
) \

1136 (
	`__exãnsi⁄__
 ({ 
__ªsu…
 = (
s1
)[0] - (
s2
)[0]; \

1137 i‡(
l
 > 0 && 
__ªsu…
 == 0) \

1139 
__ªsu…
 = (
s1
)[1] - (
s2
)[1]; \

1140 i‡(
l
 > 1 && 
__ªsu…
 == 0) \

1142 
__ªsu…
 = (
s1
)[2] - (
s2
)[2]; \

1143 i‡(
l
 > 2 && 
__ªsu…
 == 0) \

1144 
__ªsu…
 = (
s1
)[3] - (
s2
)[3]; \

1147 
__ªsu…
; }))

	)

1149 
	#__°rcmp_cg
(
s1
, 
s2
, 
l1
) \

1150 (
	`__exãnsi⁄__
 ({ c⁄° *
__s2
 = (
s2
); \

1151 
__ªsu…
 = (
s1
)[0] - 
__s2
[0]; \

1152 i‡(
l1
 > 0 && 
__ªsu…
 == 0) \

1154 
__ªsu…
 = (
s1
)[1] - 
__s2
[1]; \

1155 i‡(
l1
 > 1 && 
__ªsu…
 == 0) \

1157 
__ªsu…
 = (
s1
)[2] - 
__s2
[2]; \

1158 i‡(
l1
 > 2 && 
__ªsu…
 == 0) \

1159 
__ªsu…
 = (
s1
)[3] - 
__s2
[3]; \

1162 
__ªsu…
; }))

	)

1164 
	#__°rcmp_gc
(
s1
, 
s2
, 
l2
) \

1165 (
	`__exãnsi⁄__
 ({ c⁄° *
__s1
 = (
s1
); \

1166 
__ªsu…
 = 
__s1
[0] - (
s2
)[0]; \

1167 i‡(
l2
 > 0 && 
__ªsu…
 == 0) \

1169 
__ªsu…
 = 
__s1
[1] - (
s2
)[1]; \

1170 i‡(
l2
 > 1 && 
__ªsu…
 == 0) \

1172 
__ªsu…
 = 
__s1
[2] - (
s2
)[2]; \

1173 i‡(
l2
 > 2 && 
__ªsu…
 == 0) \

1174 
__ªsu…
 = 
__s1
[3] - (
s2
)[3]; \

1177 
__ªsu…
; }))

	)

1179 
__STRING_INLINE
 
__°rcmp_gg
 (c⁄° *
__s1
, c⁄° *
__s2
);

1181 
__STRING_INLINE
 

1182 
	$__°rcmp_gg
 (c⁄° *
__s1
, c⁄° *
__s2
)

1184 
__ªs
;

1185 
__asm__
 
__vﬁ©ûe__


1201 : "=q" (
__ªs
), "=&r" (
__s1
), "=&r" (
__s2
)

1202 : "1" (
__s1
), "2" (
__s2
),

1203 "m" ( *(°ru˘ { 
__x
[0xfffffff]; } *)
__s1
),

1204 "m" ( *(°ru˘ { 
__x
[0xfffffff]; } *)
__s2
)

1206  
__ªs
;

1207 
	}
}

1211 
	#_HAVE_STRING_ARCH_°∫cmp
 1

	)

1212 
	#°∫cmp
(
s1
, 
s2
, 
n
) \

1213 (
	`__exãnsi⁄__
 (
	`__buûtö_c⁄°™t_p
 (
s1
Ë&& 
	`°æí
 (s1Ë< ((
size_t
Ë(
n
)) \

1214 ? 
	`°rcmp
 ((
s1
), (
s2
)) \

1215 : (
	`__buûtö_c⁄°™t_p
 (
s2
Ë&& 
	`°æí
 (s2Ë< ((
size_t
Ë(
n
))\

1216 ? 
	`°rcmp
 ((
s1
), (
s2
)) \

1217 : 
	`__°∫cmp_g
 ((
s1
), (
s2
), (
n
)))))

	)

1219 
__STRING_INLINE
 
__°∫cmp_g
 (c⁄° *
__s1
, c⁄° *
__s2
,

1220 
size_t
 
__n
);

1222 
__STRING_INLINE
 

1223 
	$__°∫cmp_g
 (c⁄° *
__s1
, c⁄° *
__s2
, 
size_t
 
__n
)

1225 
__ªs
;

1226 
__asm__
 
__vﬁ©ûe__


1245 : "=q" (
__ªs
), "=&r" (
__s1
), "=&r" (
__s2
), "=&r" (
__n
)

1246 : "1" (
__s1
), "2" (
__s2
), "3" (
__n
),

1247 "m" ( *(°ru˘ { 
__exãnsi⁄__
 
__x
[
__n
]; } *)
__s1
),

1248 "m" ( *(°ru˘ { 
__exãnsi⁄__
 
__x
[
__n
]; } *)
__s2
)

1250  
__ªs
;

1251 
	}
}

1255 
	#_HAVE_STRING_ARCH_°rchr
 1

	)

1256 
	#_USE_STRING_ARCH_°rchr
 1

	)

1257 
	#°rchr
(
s
, 
c
) \

1258 (
	`__exãnsi⁄__
 (
	`__buûtö_c⁄°™t_p
 (
c
) \

1259 ? ((
c
) == '\0' \

1260 ? (*Ë
	`__øwmemchr
 ((
s
), (
c
)) \

1261 : 
	`__°rchr_c
 ((
s
), ((
c
) & 0xff) << 8)) \

1262 : 
	`__°rchr_g
 ((
s
), (
c
))))

	)

1264 
__STRING_INLINE
 *
__°rchr_c
 (c⁄° *
__s
, 
__c
);

1266 
__STRING_INLINE
 *

1267 
	$__°rchr_c
 (c⁄° *
__s
, 
__c
)

1269 
__d0
;

1270 *
__ªs
;

1271 
__asm__
 
__vﬁ©ûe__


1281 : "Ù" (
__ªs
), "=&a" (
__d0
)

1282 : "0" (
__s
), "1" (
__c
),

1283 "m" ( *(°ru˘ { 
__x
[0xfffffff]; } *)
__s
)

1285  
__ªs
;

1286 
	}
}

1288 
__STRING_INLINE
 *
__°rchr_g
 (c⁄° *
__s
, 
__c
);

1290 
__STRING_INLINE
 *

1291 
	$__°rchr_g
 (c⁄° *
__s
, 
__c
)

1293 
__d0
;

1294 *
__ªs
;

1295 
__asm__
 
__vﬁ©ûe__


1306 : "Ù" (
__ªs
), "=&a" (
__d0
)

1307 : "0" (
__s
), "1" (
__c
),

1308 "m" ( *(°ru˘ { 
__x
[0xfffffff]; } *)
__s
)

1310  
__ªs
;

1311 
	}
}

1315 
	#_HAVE_STRING_ARCH_°rch∫ul
 1

	)

1316 
	#__°rch∫ul
(
s
, 
c
) \

1317 (
	`__exãnsi⁄__
 (
	`__buûtö_c⁄°™t_p
 (
c
) \

1318 ? ((
c
) == '\0' \

1319 ? (*Ë
	`__øwmemchr
 ((
s
), 
c
) \

1320 : 
	`__°rch∫ul_c
 ((
s
), ((
c
) & 0xff) << 8)) \

1321 : 
	`__°rch∫ul_g
 ((
s
), 
c
)))

	)

1323 
__STRING_INLINE
 *
__°rch∫ul_c
 (c⁄° *
__s
, 
__c
);

1325 
__STRING_INLINE
 *

1326 
	$__°rch∫ul_c
 (c⁄° *
__s
, 
__c
)

1328 
__d0
;

1329 *
__ªs
;

1330 
__asm__
 
__vﬁ©ûe__


1340 : "Ù" (
__ªs
), "=&a" (
__d0
)

1341 : "0" (
__s
), "1" (
__c
),

1342 "m" ( *(°ru˘ { 
__x
[0xfffffff]; } *)
__s
)

1344  
__ªs
;

1345 
	}
}

1347 
__STRING_INLINE
 *
__°rch∫ul_g
 (c⁄° *
__s
, 
__c
);

1349 
__STRING_INLINE
 *

1350 
	$__°rch∫ul_g
 (c⁄° *
__s
, 
__c
)

1352 
__d0
;

1353 *
__ªs
;

1354 
__asm__
 
__vﬁ©ûe__


1365 : "Ù" (
__ªs
), "=&a" (
__d0
)

1366 : "0" (
__s
), "1" (
__c
),

1367 "m" ( *(°ru˘ { 
__x
[0xfffffff]; } *)
__s
)

1369  
__ªs
;

1370 
	}
}

1371 #ifde‡
__USE_GNU


1372 
	#°rch∫ul
(
s
, 
c
Ë
	`__°rch∫ul
 ((s), (c))

	)

1376 #i‡
deföed
 
__USE_BSD
 || deföed 
__USE_XOPEN_EXTENDED


1378 
	#_HAVE_STRING_ARCH_ödex
 1

	)

1379 
	#ödex
(
s
, 
c
) \

1380 (
	`__exãnsi⁄__
 (
	`__buûtö_c⁄°™t_p
 (
c
) \

1381 ? 
	`__°rchr_c
 ((
s
), ((
c
) & 0xff) << 8) \

1382 : 
	`__°rchr_g
 ((
s
), (
c
))))

	)

1387 
	#_HAVE_STRING_ARCH_°ºchr
 1

	)

1388 
	#°ºchr
(
s
, 
c
) \

1389 (
	`__exãnsi⁄__
 (
	`__buûtö_c⁄°™t_p
 (
c
) \

1390 ? 
	`__°ºchr_c
 ((
s
), ((
c
) & 0xff) << 8) \

1391 : 
	`__°ºchr_g
 ((
s
), (
c
))))

	)

1393 #ifde‡
__i686__


1394 
__STRING_INLINE
 *
__°ºchr_c
 (c⁄° *
__s
, 
__c
);

1396 
__STRING_INLINE
 *

1397 
	$__°ºchr_c
 (c⁄° *
__s
, 
__c
)

1399 
__d0
, 
__d1
;

1400 *
__ªs
;

1401 
__asm__
 
__vﬁ©ûe__


1409 : "=d" (
__ªs
), "=&S" (
__d0
), "=&a" (
__d1
)

1410 : "0" (1), "1" (
__s
), "2" (
__c
),

1411 "m" ( *(°ru˘ { 
__x
[0xfffffff]; } *)
__s
)

1413  
__ªs
 - 1;

1414 
	}
}

1416 
__STRING_INLINE
 *
__°ºchr_g
 (c⁄° *
__s
, 
__c
);

1418 
__STRING_INLINE
 *

1419 
	$__°ºchr_g
 (c⁄° *
__s
, 
__c
)

1421 
__d0
, 
__d1
;

1422 *
__ªs
;

1423 
__asm__
 
__vﬁ©ûe__


1432 : "=d" (
__ªs
), "=&S" (
__d0
), "=&a" (
__d1
)

1433 : "0" (1), "1" (
__s
), "2" (
__c
),

1434 "m" ( *(°ru˘ { 
__x
[0xfffffff]; } *)
__s
)

1436  
__ªs
 - 1;

1437 
	}
}

1439 
__STRING_INLINE
 *
__°ºchr_c
 (c⁄° *
__s
, 
__c
);

1441 
__STRING_INLINE
 *

1442 
	$__°ºchr_c
 (c⁄° *
__s
, 
__c
)

1444 
__d0
, 
__d1
;

1445 *
__ªs
;

1446 
__asm__
 
__vﬁ©ûe__


1456 : "=d" (
__ªs
), "=&S" (
__d0
), "=&a" (
__d1
)

1457 : "0" (0), "1" (
__s
), "2" (
__c
),

1458 "m" ( *(°ru˘ { 
__x
[0xfffffff]; } *)
__s
)

1460  
__ªs
;

1461 
	}
}

1463 
__STRING_INLINE
 *
__°ºchr_g
 (c⁄° *
__s
, 
__c
);

1465 
__STRING_INLINE
 *

1466 
	$__°ºchr_g
 (c⁄° *
__s
, 
__c
)

1468 
__d0
, 
__d1
;

1469 *
__ªs
;

1470 
__asm__
 
__vﬁ©ûe__


1481 : "Ù" (
__ªs
), "=&S" (
__d0
), "=&a" (
__d1
)

1482 : "0" (0), "1" (
__s
), "2" (
__c
),

1483 "m" ( *(°ru˘ { 
__x
[0xfffffff]; } *)
__s
)

1485  
__ªs
;

1486 
	}
}

1490 #i‡
deföed
 
__USE_BSD
 || deföed 
__USE_XOPEN_EXTENDED


1492 
	#_HAVE_STRING_ARCH_rödex
 1

	)

1493 
	#rödex
(
s
, 
c
) \

1494 (
	`__exãnsi⁄__
 (
	`__buûtö_c⁄°™t_p
 (
c
) \

1495 ? 
	`__°ºchr_c
 ((
s
), ((
c
) & 0xff) << 8) \

1496 : 
	`__°ºchr_g
 ((
s
), (
c
))))

	)

1502 
	#_HAVE_STRING_ARCH_°rc•n
 1

	)

1503 
	#°rc•n
(
s
, 
ªje˘
) \

1504 (
	`__exãnsi⁄__
 (
	`__buûtö_c⁄°™t_p
 (
ªje˘
) &&  ((reject)[0]) == 1 \

1505 ? ((
ªje˘
)[0] == '\0' \

1506 ? 
	`°æí
 (
s
) \

1507 : ((
ªje˘
)[1] == '\0' \

1508 ? 
	`__°rc•n_c1
 ((
s
), (((
ªje˘
)[0] << 8) & 0xff00)) \

1509 : 
	`__°rc•n_cg
 ((
s
), (
ªje˘
), 
	`°æí
 (reject)))) \

1510 : 
	`__°rc•n_g
 ((
s
), (
ªje˘
))))

	)

1512 
__STRING_INLINE
 
size_t
 
__°rc•n_c1
 (c⁄° *
__s
, 
__ªje˘
);

1514 #i‚de‡
_FORCE_INLINES


1515 
__STRING_INLINE
 
size_t


1516 
	$__°rc•n_c1
 (c⁄° *
__s
, 
__ªje˘
)

1518 
__d0
;

1519 *
__ªs
;

1520 
__asm__
 
__vﬁ©ûe__


1529 : "Ù" (
__ªs
), "=&a" (
__d0
)

1530 : "0" (
__s
), "1" (
__ªje˘
),

1531 "m" ( *(°ru˘ { 
__x
[0xfffffff]; } *)
__s
)

1533  (
__ªs
 - 1Ë- 
__s
;

1534 
	}
}

1537 
__STRING_INLINE
 
size_t
 
__°rc•n_cg
 (c⁄° *
__s
, c⁄° 
__ªje˘
[],

1538 
size_t
 
__ªje˘_Àn
);

1540 
__STRING_INLINE
 
size_t


1541 
	$__°rc•n_cg
 (c⁄° *
__s
, c⁄° 
__ªje˘
[], 
size_t
 
__ªje˘_Àn
)

1543 
__d0
, 
__d1
, 
__d2
;

1544 c⁄° *
__ªs
;

1545 
__asm__
 
__vﬁ©ûe__


1556 : "=S" (
__ªs
), "=&a" (
__d0
), "=&c" (
__d1
), "=&D" (
__d2
)

1557 : "0" (
__s
), "d" (
__ªje˘
), "g" (
__ªje˘_Àn
)

1559  (
__ªs
 - 1Ë- 
__s
;

1560 
	}
}

1562 
__STRING_INLINE
 
size_t
 
__°rc•n_g
 (c⁄° *
__s
, c⁄° *
__ªje˘
);

1563 #ifde‡
__PIC__


1565 
__STRING_INLINE
 
size_t


1566 
	$__°rc•n_g
 (c⁄° *
__s
, c⁄° *
__ªje˘
)

1568 
__d0
, 
__d1
, 
__d2
;

1569 c⁄° *
__ªs
;

1570 
__asm__
 
__vﬁ©ûe__


1587 : "=S" (
__ªs
), "=&a" (
__d0
), "=&c" (
__d1
), "=&D" (
__d2
)

1588 : "r" (
__ªje˘
), "0" (
__s
), "1" (0), "2" (0xffffffff)

1590  (
__ªs
 - 1Ë- 
__s
;

1591 
	}
}

1593 
__STRING_INLINE
 
size_t


1594 
	$__°rc•n_g
 (c⁄° *
__s
, c⁄° *
__ªje˘
)

1596 
__d0
, 
__d1
, 
__d2
, 
__d3
;

1597 c⁄° *
__ªs
;

1598 
__asm__
 
__vﬁ©ûe__


1612 : "=S" (
__ªs
), "=&a" (
__d0
), "=&c" (
__d1
), "=&D" (
__d2
), "=&d" (
__d3
)

1613 : "0" (
__s
), "1" (0), "2" (0xffffffff), "3" (
__ªje˘
), "b" (__reject)

1616  (
__ªs
 - 1Ë- 
__s
;

1617 
	}
}

1623 
	#_HAVE_STRING_ARCH_°r•n
 1

	)

1624 
	#°r•n
(
s
, 
ac˚±
) \

1625 (
	`__exãnsi⁄__
 (
	`__buûtö_c⁄°™t_p
 (
ac˚±
) &&  ((accept)[0]) == 1 \

1626 ? ((
ac˚±
)[0] == '\0' \

1627 ? ((Ë(
s
), 0) \

1628 : ((
ac˚±
)[1] == '\0' \

1629 ? 
	`__°r•n_c1
 ((
s
), (((
ac˚±
)[0] << 8 ) & 0xff00)) \

1630 : 
	`__°r•n_cg
 ((
s
), (
ac˚±
), 
	`°æí
 (accept)))) \

1631 : 
	`__°r•n_g
 ((
s
), (
ac˚±
))))

	)

1633 #i‚de‡
_FORCE_INLINES


1634 
__STRING_INLINE
 
size_t
 
__°r•n_c1
 (c⁄° *
__s
, 
__ac˚±
);

1636 
__STRING_INLINE
 
size_t


1637 
	$__°r•n_c1
 (c⁄° *
__s
, 
__ac˚±
)

1639 
__d0
;

1640 *
__ªs
;

1642 
__asm__
 
__vﬁ©ûe__


1648 : "Ù" (
__ªs
), "=&q" (
__d0
)

1649 : "0" (
__s
), "1" (
__ac˚±
),

1650 "m" ( *(°ru˘ { 
__x
[0xfffffff]; } *)
__s
)

1652  (
__ªs
 - 1Ë- 
__s
;

1653 
	}
}

1656 
__STRING_INLINE
 
size_t
 
__°r•n_cg
 (c⁄° *
__s
, c⁄° 
__ac˚±
[],

1657 
size_t
 
__ac˚±_Àn
);

1659 
__STRING_INLINE
 
size_t


1660 
	$__°r•n_cg
 (c⁄° *
__s
, c⁄° 
__ac˚±
[], 
size_t
 
__ac˚±_Àn
)

1662 
__d0
, 
__d1
, 
__d2
;

1663 c⁄° *
__ªs
;

1664 
__asm__
 
__vﬁ©ûe__


1675 : "=S" (
__ªs
), "=&a" (
__d0
), "=&c" (
__d1
), "=&D" (
__d2
)

1676 : "0" (
__s
), "g" (
__ac˚±
), "g" (
__ac˚±_Àn
),

1679 "m" ( *(°ru˘ { 
__x
[0xfffffff]; } *)
__s
),

1680 "m" ( *(°ru˘ { 
__exãnsi⁄__
 
__x
[
__ac˚±_Àn
]; } *)
__ac˚±
)

1682  (
__ªs
 - 1Ë- 
__s
;

1683 
	}
}

1685 
__STRING_INLINE
 
size_t
 
__°r•n_g
 (c⁄° *
__s
, c⁄° *
__ac˚±
);

1686 #ifde‡
__PIC__


1688 
__STRING_INLINE
 
size_t


1689 
	$__°r•n_g
 (c⁄° *
__s
, c⁄° *
__ac˚±
)

1691 
__d0
, 
__d1
, 
__d2
;

1692 c⁄° *
__ªs
;

1693 
__asm__
 
__vﬁ©ûe__


1709 : "=S" (
__ªs
), "=&a" (
__d0
), "=&c" (
__d1
), "=&D" (
__d2
)

1710 : "d" (
__ac˚±
), "0" (
__s
), "1" (0), "2" (0xffffffff), "3" (__accept)

1712  (
__ªs
 - 1Ë- 
__s
;

1713 
	}
}

1715 
__STRING_INLINE
 
size_t


1716 
	$__°r•n_g
 (c⁄° *
__s
, c⁄° *
__ac˚±
)

1718 
__d0
, 
__d1
, 
__d2
, 
__d3
;

1719 c⁄° *
__ªs
;

1720 
__asm__
 
__vﬁ©ûe__


1734 : "=S" (
__ªs
), "=&a" (
__d0
), "=&c" (
__d1
), "=&D" (
__d2
), "=&d" (
__d3
)

1735 : "0" (
__s
), "1" (0), "2" (0xffffffff), "3" (
__ac˚±
), "b" (__accept)

1737  (
__ªs
 - 1Ë- 
__s
;

1738 
	}
}

1743 
	#_HAVE_STRING_ARCH_°Ωbrk
 1

	)

1744 
	#°Ωbrk
(
s
, 
ac˚±
) \

1745 (
	`__exãnsi⁄__
 (
	`__buûtö_c⁄°™t_p
 (
ac˚±
) &&  ((accept)[0]) == 1 \

1746 ? ((
ac˚±
)[0] == '\0' \

1747 ? ((Ë(
s
), (*) 0) \

1748 : ((
ac˚±
)[1] == '\0' \

1749 ? 
	`°rchr
 ((
s
), (
ac˚±
)[0]) \

1750 : 
	`__°Ωbrk_cg
 ((
s
), (
ac˚±
), 
	`°æí
 (accept)))) \

1751 : 
	`__°Ωbrk_g
 ((
s
), (
ac˚±
))))

	)

1753 
__STRING_INLINE
 *
__°Ωbrk_cg
 (c⁄° *
__s
, c⁄° 
__ac˚±
[],

1754 
size_t
 
__ac˚±_Àn
);

1756 
__STRING_INLINE
 *

1757 
	$__°Ωbrk_cg
 (c⁄° *
__s
, c⁄° 
__ac˚±
[], 
size_t
 
__ac˚±_Àn
)

1759 
__d0
, 
__d1
, 
__d2
;

1760 *
__ªs
;

1761 
__asm__
 
__vﬁ©ûe__


1776 : "=S" (
__ªs
), "=&a" (
__d0
), "=&c" (
__d1
), "=&D" (
__d2
)

1777 : "0" (
__s
), "d" (
__ac˚±
), "g" (
__ac˚±_Àn
)

1779  
__ªs
;

1780 
	}
}

1782 
__STRING_INLINE
 *
__°Ωbrk_g
 (c⁄° *
__s
, c⁄° *
__ac˚±
);

1783 #ifde‡
__PIC__


1785 
__STRING_INLINE
 *

1786 
	$__°Ωbrk_g
 (c⁄° *
__s
, c⁄° *
__ac˚±
)

1788 
__d0
, 
__d1
, 
__d2
;

1789 *
__ªs
;

1790 
__asm__
 
__vﬁ©ûe__


1811 : "=S" (
__ªs
), "=&a" (
__d0
), "=&c" (
__d1
), "=&D" (
__d2
)

1812 : "d" (
__ac˚±
), "0" (
__s
), "1" (0), "2" (0xffffffff)

1814  
__ªs
;

1815 
	}
}

1817 
__STRING_INLINE
 *

1818 
	$__°Ωbrk_g
 (c⁄° *
__s
, c⁄° *
__ac˚±
)

1820 
__d0
, 
__d1
, 
__d2
, 
__d3
;

1821 *
__ªs
;

1822 
__asm__
 
__vﬁ©ûe__


1841 : "=S" (
__ªs
), "=&a" (
__d0
), "=&c" (
__d1
), "=&d" (
__d2
), "=&D" (
__d3
)

1842 : "0" (
__s
), "1" (0), "2" (0xffffffff), "b" (
__ac˚±
)

1844  
__ªs
;

1845 
	}
}

1850 
	#_HAVE_STRING_ARCH_°r°r
 1

	)

1851 
	#°r°r
(
hay°ack
, 
√edÀ
) \

1852 (
	`__exãnsi⁄__
 (
	`__buûtö_c⁄°™t_p
 (
√edÀ
) &&  ((needle)[0]) == 1 \

1853 ? ((
√edÀ
)[0] == '\0' \

1854 ? (
hay°ack
) \

1855 : ((
√edÀ
)[1] == '\0' \

1856 ? 
	`°rchr
 ((
hay°ack
), (
√edÀ
)[0]) \

1857 : 
	`__°r°r_cg
 ((
hay°ack
), (
√edÀ
), \

1858 
	`°æí
 (
√edÀ
)))) \

1859 : 
	`__°r°r_g
 ((
hay°ack
), (
√edÀ
))))

	)

1863 
__STRING_INLINE
 *
__°r°r_cg
 (c⁄° *
__hay°ack
,

1864 c⁄° 
__√edÀ
[],

1865 
size_t
 
__√edÀ_Àn
);

1867 
__STRING_INLINE
 *

1868 
	$__°r°r_cg
 (c⁄° *
__hay°ack
, c⁄° 
__√edÀ
[],

1869 
size_t
 
__√edÀ_Àn
)

1871 
__d0
, 
__d1
, 
__d2
;

1872 *
__ªs
;

1873 
__asm__
 
__vﬁ©ûe__


1886 : "=&a" (
__ªs
), "=&S" (
__d0
), "=&D" (
__d1
), "=&c" (
__d2
)

1887 : "g" (
__√edÀ_Àn
), "1" (
__hay°ack
), "d" (
__√edÀ
)

1889  
__ªs
;

1890 
	}
}

1892 
__STRING_INLINE
 *
__°r°r_g
 (c⁄° *
__hay°ack
,

1893 c⁄° *
__√edÀ
);

1894 #ifde‡
__PIC__


1896 
__STRING_INLINE
 *

1897 
	$__°r°r_g
 (c⁄° *
__hay°ack
, c⁄° *
__√edÀ
)

1899 
__d0
, 
__d1
, 
__d2
;

1900 *
__ªs
;

1901 
__asm__
 
__vﬁ©ûe__


1920 : "=&a" (
__ªs
), "=&c" (
__d0
), "=&S" (
__d1
), "=&D" (
__d2
)

1921 : "0" (0), "1" (0xffffffff), "2" (
__hay°ack
), "3" (
__√edÀ
),

1922 "d" (
__√edÀ
)

1924  
__ªs
;

1925 
	}
}

1927 
__STRING_INLINE
 *

1928 
	$__°r°r_g
 (c⁄° *
__hay°ack
, c⁄° *
__√edÀ
)

1930 
__d0
, 
__d1
, 
__d2
, 
__d3
;

1931 *
__ªs
;

1932 
__asm__
 
__vﬁ©ûe__


1949 : "=&a" (
__ªs
), "=&c" (
__d0
), "=&S" (
__d1
), "=&D" (
__d2
), "=&d" (
__d3
)

1950 : "0" (0), "1" (0xffffffff), "2" (
__hay°ack
), "3" (
__√edÀ
),

1951 "b" (
__√edÀ
)

1953  
__ªs
;

1954 
	}
}

1960 #i‡
deföed
 
__USE_BSD
 || deföed 
__USE_XOPEN_EXTENDED


1961 #ifde‡
__i686__


1962 
	#_HAVE_STRING_ARCH_ffs
 1

	)

1963 
	#ffs
(
w‹d
Ë(
	`__buûtö_c⁄°™t_p
 (word) \

1964 ? 
	`__buûtö_ffs
 (
w‹d
) \

1965 : ({ 
__˙t
, 
__tmp
; \

1966 
__asm__
 
__vﬁ©ûe__
 \

1969 : "=&r" (
__˙t
), "Ù" (
__tmp
) \

1970 : "rm" (
w‹d
), "1" (-1)); \

1971 
__˙t
 + 1; }))

	)

1973 #i‚de‡
ff¶


1974 
	#ff¶
(
w‹d
Ë
	`ffs
(w‹d)

	)

1979 #i‚de‡
_FORCE_INLINES


1980 #unde‡
__STRING_INLINE


	@/usr/include/bits/string2.h

20 #i‚de‡
_STRING_H


24 #i‚de‡
__NO_STRING_INLINES


41 #i‚de‡
__STRING_INLINE


42 #ifde‡
__˝lu•lus


43 
	#__STRING_INLINE
 
ölöe


	)

45 
	#__STRING_INLINE
 
__exã∫_ölöe


	)

49 #i‡
_STRING_ARCH_u«lig√d


51 
	~<ídün.h
>

52 
	~<bôs/ty≥s.h
>

54 #i‡
__BYTE_ORDER
 =
__LITTLE_ENDIAN


55 
	#__STRING2_SMALL_GET16
(
§c
, 
idx
) \

56 (((c⁄° *Ë(c⁄° *Ë(
§c
))[
idx
 + 1] << 8 \

57 | ((c⁄° *Ë(c⁄° *Ë(
§c
))[
idx
])

	)

58 
	#__STRING2_SMALL_GET32
(
§c
, 
idx
) \

59 (((((c⁄° *Ë(c⁄° *Ë(
§c
))[
idx
 + 3] << 8 \

60 | ((c⁄° *Ë(c⁄° *Ë(
§c
))[
idx
 + 2]) << 8 \

61 | ((c⁄° *Ë(c⁄° *Ë(
§c
))[
idx
 + 1]) << 8 \

62 | ((c⁄° *Ë(c⁄° *Ë(
§c
))[
idx
])

	)

64 
	#__STRING2_SMALL_GET16
(
§c
, 
idx
) \

65 (((c⁄° *Ë(c⁄° *Ë(
§c
))[
idx
] << 8 \

66 | ((c⁄° *Ë(c⁄° *Ë(
§c
))[
idx
 + 1])

	)

67 
	#__STRING2_SMALL_GET32
(
§c
, 
idx
) \

68 (((((c⁄° *Ë(c⁄° *Ë(
§c
))[
idx
] << 8 \

69 | ((c⁄° *Ë(c⁄° *Ë(
§c
))[
idx
 + 1]) << 8 \

70 | ((c⁄° *Ë(c⁄° *Ë(
§c
))[
idx
 + 2]) << 8 \

71 | ((c⁄° *Ë(c⁄° *Ë(
§c
))[
idx
 + 3])

	)

76 
	#__STRING2_COPY_TYPE
(
N
) \

77 °ru˘ { 
__¨r
[
N
]; } \

78 
	t__©åibuã__
 ((
	t__∑cked__
)Ë
	t__STRING2_COPY_ARR
##
	tN


	)

79 
	t__STRING2_COPY_TYPE
 (2);

80 
__STRING2_COPY_TYPE
 (3);

81 
__STRING2_COPY_TYPE
 (4);

82 
__STRING2_COPY_TYPE
 (5);

83 
__STRING2_COPY_TYPE
 (6);

84 
__STRING2_COPY_TYPE
 (7);

85 
__STRING2_COPY_TYPE
 (8);

86 #unde‡
__STRING2_COPY_TYPE


92 
	#__°rög2_1b±r_p
(
__x
) \

93 ((
size_t
)(c⁄° *)((
__x
Ë+ 1Ë- (size_t)(c⁄° *)(__xË=1)

	)

96 #i‡!
deföed
 
_HAVE_STRING_ARCH_mem£t


97 #i‡!
__GNUC_PREREQ
 (3, 0)

98 #i‡
_STRING_ARCH_u«lig√d


99 
	#mem£t
(
s
, 
c
, 
n
) \

100 (
	`__exãnsi⁄__
 (
	`__buûtö_c⁄°™t_p
 (
n
) && (n) <= 16 \

101 ? ((
n
) == 1 \

102 ? 
	`__mem£t_1
 (
s
, 
c
) \

103 : 
	`__mem£t_gc
 (
s
, 
c
, 
n
)) \

104 : (
	`__buûtö_c⁄°™t_p
 (
c
) && (c) == '\0' \

105 ? ({ *
__s
 = (
s
); 
	`__bzîo
 (__s, 
n
); __s; }) \

106 : 
	`mem£t
 (
s
, 
c
, 
n
))))

	)

108 
	#__mem£t_1
(
s
, 
c
Ë({ *
__s
 = (s); \

109 *((
__uöt8_t
 *Ë
__s
Ë(__uöt8_tË
c
; __s; })

	)

111 
	#__mem£t_gc
(
s
, 
c
, 
n
) \

112 ({ *
__s
 = (
s
); \

114 
__ui
; \

115 
__usi
; \

116 
__uc
; \

117 } *
__u
 = 
__s
; \

118 
__uöt8_t
 
__c
 = (__uöt8_tË(
c
); \

121 (Ë(
n
)) \

124 
__u
->
__ui
 = 
__c
 * 0x01010101; \

125 
__u
 = 
	`__exãnsi⁄__
 ((*) __u + 4); \

127 
__u
->
__ui
 = 
__c
 * 0x01010101; \

128 
__u
 = 
	`__exãnsi⁄__
 ((*) __u + 4); \

130 
__u
->
__ui
 = 
__c
 * 0x01010101; \

131 
__u
 = 
	`__exãnsi⁄__
 ((*) __u + 4); \

133 
__u
->
__usi
 = (Ë
__c
 * 0x0101; \

134 
__u
 = 
	`__exãnsi⁄__
 ((*) __u + 2); \

135 
__u
->
__uc
 = (Ë
__c
; \

139 
__u
->
__ui
 = 
__c
 * 0x01010101; \

140 
__u
 = 
	`__exãnsi⁄__
 ((*) __u + 4); \

142 
__u
->
__ui
 = 
__c
 * 0x01010101; \

143 
__u
 = 
	`__exãnsi⁄__
 ((*) __u + 4); \

145 
__u
->
__ui
 = 
__c
 * 0x01010101; \

146 
__u
 = 
	`__exãnsi⁄__
 ((*) __u + 4); \

148 
__u
->
__usi
 = (Ë
__c
 * 0x0101; \

152 
__u
->
__ui
 = 
__c
 * 0x01010101; \

153 
__u
 = 
	`__exãnsi⁄__
 ((*) __u + 4); \

155 
__u
->
__ui
 = 
__c
 * 0x01010101; \

156 
__u
 = 
	`__exãnsi⁄__
 ((*) __u + 4); \

158 
__u
->
__ui
 = 
__c
 * 0x01010101; \

159 
__u
 = 
	`__exãnsi⁄__
 ((*) __u + 4); \

161 
__u
->
__uc
 = (Ë
__c
; \

165 
__u
->
__ui
 = 
__c
 * 0x01010101; \

166 
__u
 = 
	`__exãnsi⁄__
 ((*) __u + 4); \

168 
__u
->
__ui
 = 
__c
 * 0x01010101; \

169 
__u
 = 
	`__exãnsi⁄__
 ((*) __u + 4); \

171 
__u
->
__ui
 = 
__c
 * 0x01010101; \

172 
__u
 = 
	`__exãnsi⁄__
 ((*) __u + 4); \

174 
__u
->
__ui
 = 
__c
 * 0x01010101; \

179 
__s
; })

	)

181 
	#mem£t
(
s
, 
c
, 
n
) \

182 (
	`__exãnsi⁄__
 (
	`__buûtö_c⁄°™t_p
 (
c
) && (c) == '\0' \

183 ? ({ *
__s
 = (
s
); 
	`__bzîo
 (__s, 
n
); __s; }) \

184 : 
	`mem£t
 (
s
, 
c
, 
n
)))

	)

193 #i‡
__GNUC_PREREQ
 (2, 91)

194 
	#__bzîo
(
s
, 
n
Ë
	`__buûtö_mem£t
 (s, '\0',Ç)

	)

202 #ifde‡
__USE_GNU


203 #i‡!
deföed
 
_HAVE_STRING_ARCH_memp˝y
 || deföed 
_FORCE_INLINES


204 #i‚de‡
_HAVE_STRING_ARCH_memp˝y


205 #i‡
__GNUC_PREREQ
 (3, 4)

206 
	#__memp˝y
(
de°
, 
§c
, 
n
Ë
	`__buûtö_memp˝y
 (de°, src,Ç)

	)

207 #ñi‡
__GNUC_PREREQ
 (3, 0)

208 
	#__memp˝y
(
de°
, 
§c
, 
n
) \

209 (
	`__exãnsi⁄__
 (
	`__buûtö_c⁄°™t_p
 (
§c
Ë&& __buûtö_c⁄°™t_∞(
n
) \

210 && 
	`__°rög2_1b±r_p
 (
§c
Ë&& 
n
 <= 8 \

211 ? 
	`__buûtö_mem˝y
 (
de°
, 
§c
, 
n
) + (n) \

212 : 
	`__memp˝y
 (
de°
, 
§c
, 
n
)))

	)

214 
	#__memp˝y
(
de°
, 
§c
, 
n
) \

215 (
	`__exãnsi⁄__
 (
	`__buûtö_c⁄°™t_p
 (
§c
Ë&& __buûtö_c⁄°™t_∞(
n
) \

216 && 
	`__°rög2_1b±r_p
 (
§c
Ë&& 
n
 <= 8 \

217 ? 
	`__memp˝y_smÆl
 (
de°
, 
	`__memp˝y_¨gs
 (
§c
), 
n
) \

218 : 
	`__memp˝y
 (
de°
, 
§c
, 
n
)))

	)

222 
	#memp˝y
(
de°
, 
§c
, 
n
Ë
	`__memp˝y
 (de°, src,Ç)

	)

225 #i‡!
__GNUC_PREREQ
 (3, 0Ë|| 
deföed
 
_FORCE_INLINES


226 #i‡
_STRING_ARCH_u«lig√d


227 #i‚de‡
_FORCE_INLINES


228 
	#__memp˝y_¨gs
(
§c
) \

229 ((c⁄° *Ë(
§c
))[0], ((const *) (src))[2], \

230 ((c⁄° *Ë(
§c
))[4], ((const *) (src))[6], \

231 
__exãnsi⁄__
 
	`__STRING2_SMALL_GET16
 (
§c
, 0), \

232 
__exãnsi⁄__
 
	`__STRING2_SMALL_GET16
 (
§c
, 4), \

233 
__exãnsi⁄__
 
	`__STRING2_SMALL_GET32
 (
§c
, 0), \

234 
__exãnsi⁄__
 
	`__STRING2_SMALL_GET32
 (
§c
, 4)

	)

236 
__STRING_INLINE
 *
__memp˝y_smÆl
 (*, , , , ,

237 
__uöt16_t
, __uöt16_t, 
__uöt32_t
,

238 
__uöt32_t
, 
size_t
);

239 
__STRING_INLINE
 *

240 
	$__memp˝y_smÆl
 (*
__de°1
,

241 
__§c0_1
, 
__§c2_1
, 
__§c4_1
, 
__§c6_1
,

242 
__uöt16_t
 
__§c0_2
, __uöt16_à
__§c4_2
,

243 
__uöt32_t
 
__§c0_4
, __uöt32_à
__§c4_4
,

244 
size_t
 
__§˛í
)

247 
__uöt32_t
 
__ui
;

248 
__uöt16_t
 
__usi
;

249 
__uc
;

250 
__c
;

251 } *
__u
 = 
__de°1
;

252 (Ë
__§˛í
)

255 
__u
->
__c
 = 
__§c0_1
;

256 
__u
 = 
	`__exãnsi⁄__
 ((*) __u + 1);

259 
__u
->
__usi
 = 
__§c0_2
;

260 
__u
 = 
	`__exãnsi⁄__
 ((*) __u + 2);

263 
__u
->
__usi
 = 
__§c0_2
;

264 
__u
 = 
	`__exãnsi⁄__
 ((*) __u + 2);

265 
__u
->
__c
 = 
__§c2_1
;

266 
__u
 = 
	`__exãnsi⁄__
 ((*) __u + 1);

269 
__u
->
__ui
 = 
__§c0_4
;

270 
__u
 = 
	`__exãnsi⁄__
 ((*) __u + 4);

273 
__u
->
__ui
 = 
__§c0_4
;

274 
__u
 = 
	`__exãnsi⁄__
 ((*) __u + 4);

275 
__u
->
__c
 = 
__§c4_1
;

276 
__u
 = 
	`__exãnsi⁄__
 ((*) __u + 1);

279 
__u
->
__ui
 = 
__§c0_4
;

280 
__u
 = 
	`__exãnsi⁄__
 ((*) __u + 4);

281 
__u
->
__usi
 = 
__§c4_2
;

282 
__u
 = 
	`__exãnsi⁄__
 ((*) __u + 2);

285 
__u
->
__ui
 = 
__§c0_4
;

286 
__u
 = 
	`__exãnsi⁄__
 ((*) __u + 4);

287 
__u
->
__usi
 = 
__§c4_2
;

288 
__u
 = 
	`__exãnsi⁄__
 ((*) __u + 2);

289 
__u
->
__c
 = 
__§c6_1
;

290 
__u
 = 
	`__exãnsi⁄__
 ((*) __u + 1);

293 
__u
->
__ui
 = 
__§c0_4
;

294 
__u
 = 
	`__exãnsi⁄__
 ((*) __u + 4);

295 
__u
->
__ui
 = 
__§c4_4
;

296 
__u
 = 
	`__exãnsi⁄__
 ((*) __u + 4);

299  (*Ë
__u
;

300 
	}
}

302 #i‚de‡
_FORCE_INLINES


303 
	#__memp˝y_¨gs
(
§c
) \

304 ((c⁄° *Ë(
§c
))[0], \

305 
	`__exãnsi⁄__
 ((
__STRING2_COPY_ARR2
) \

306 { { ((c⁄° *Ë(
§c
))[0], ((const *) (src))[1] } }), \

307 
	`__exãnsi⁄__
 ((
__STRING2_COPY_ARR3
) \

308 { { ((c⁄° *Ë(
§c
))[0], ((const *) (src))[1], \

309 ((c⁄° *Ë(
§c
))[2] } }), \

310 
	`__exãnsi⁄__
 ((
__STRING2_COPY_ARR4
) \

311 { { ((c⁄° *Ë(
§c
))[0], ((const *) (src))[1], \

312 ((c⁄° *Ë(
§c
))[2], ((const *) (src))[3] } }), \

313 
	`__exãnsi⁄__
 ((
__STRING2_COPY_ARR5
) \

314 { { ((c⁄° *Ë(
§c
))[0], ((const *) (src))[1], \

315 ((c⁄° *Ë(
§c
))[2], ((const *) (src))[3], \

316 ((c⁄° *Ë(
§c
))[4] } }), \

317 
	`__exãnsi⁄__
 ((
__STRING2_COPY_ARR6
) \

318 { { ((c⁄° *Ë(
§c
))[0], ((const *) (src))[1], \

319 ((c⁄° *Ë(
§c
))[2], ((const *) (src))[3], \

320 ((c⁄° *Ë(
§c
))[4], ((const *) (src))[5] } }), \

321 
	`__exãnsi⁄__
 ((
__STRING2_COPY_ARR7
) \

322 { { ((c⁄° *Ë(
§c
))[0], ((const *) (src))[1], \

323 ((c⁄° *Ë(
§c
))[2], ((const *) (src))[3], \

324 ((c⁄° *Ë(
§c
))[4], ((const *) (src))[5], \

325 ((c⁄° *Ë(
§c
))[6] } }), \

326 
	`__exãnsi⁄__
 ((
__STRING2_COPY_ARR8
) \

327 { { ((c⁄° *Ë(
§c
))[0], ((const *) (src))[1], \

328 ((c⁄° *Ë(
§c
))[2], ((const *) (src))[3], \

329 ((c⁄° *Ë(
§c
))[4], ((const *) (src))[5], \

330 ((c⁄° *Ë(
§c
))[6], ((c⁄° *Ë(§c))[7] } })

	)

332 
__STRING_INLINE
 *
__memp˝y_smÆl
 (*, , 
__STRING2_COPY_ARR2
,

333 
__STRING2_COPY_ARR3
,

334 
__STRING2_COPY_ARR4
,

335 
__STRING2_COPY_ARR5
,

336 
__STRING2_COPY_ARR6
,

337 
__STRING2_COPY_ARR7
,

338 
__STRING2_COPY_ARR8
, 
size_t
);

339 
__STRING_INLINE
 *

340 
	$__memp˝y_smÆl
 (*
__de°
, 
__§c1
,

341 
__STRING2_COPY_ARR2
 
__§c2
, 
__STRING2_COPY_ARR3
 
__§c3
,

342 
__STRING2_COPY_ARR4
 
__§c4
, 
__STRING2_COPY_ARR5
 
__§c5
,

343 
__STRING2_COPY_ARR6
 
__§c6
, 
__STRING2_COPY_ARR7
 
__§c7
,

344 
__STRING2_COPY_ARR8
 
__§c8
, 
size_t
 
__§˛í
)

347 
__c
;

348 
__STRING2_COPY_ARR2
 
__sˇ2
;

349 
__STRING2_COPY_ARR3
 
__sˇ3
;

350 
__STRING2_COPY_ARR4
 
__sˇ4
;

351 
__STRING2_COPY_ARR5
 
__sˇ5
;

352 
__STRING2_COPY_ARR6
 
__sˇ6
;

353 
__STRING2_COPY_ARR7
 
__sˇ7
;

354 
__STRING2_COPY_ARR8
 
__sˇ8
;

355 } *
__u
 = 
__de°
;

356 (Ë
__§˛í
)

359 
__u
->
__c
 = 
__§c1
;

362 
__exãnsi⁄__
 
__u
->
__sˇ2
 = 
__§c2
;

365 
__exãnsi⁄__
 
__u
->
__sˇ3
 = 
__§c3
;

368 
__exãnsi⁄__
 
__u
->
__sˇ4
 = 
__§c4
;

371 
__exãnsi⁄__
 
__u
->
__sˇ5
 = 
__§c5
;

374 
__exãnsi⁄__
 
__u
->
__sˇ6
 = 
__§c6
;

377 
__exãnsi⁄__
 
__u
->
__sˇ7
 = 
__§c7
;

380 
__exãnsi⁄__
 
__u
->
__sˇ8
 = 
__§c8
;

383  
	`__exãnsi⁄__
 ((*Ë
__u
 + 
__§˛í
);

384 
	}
}

392 #i‚de‡
_HAVE_STRING_ARCH_°rchr


393 *
__øwmemchr
 (c⁄° *
__s
, 
__c
);

394 #i‡
__GNUC_PREREQ
 (3, 2)

395 
	#°rchr
(
s
, 
c
) \

396 (
	`__exãnsi⁄__
 (
	`__buûtö_c⁄°™t_p
 (
c
Ë&& !__buûtö_c⁄°™t_∞(
s
) \

397 && (
c
) == '\0' \

398 ? (*Ë
	`__øwmemchr
 (
s
, 
c
) \

399 : 
	`__buûtö_°rchr
 (
s
, 
c
)))

	)

401 
	#°rchr
(
s
, 
c
) \

402 (
	`__exãnsi⁄__
 (
	`__buûtö_c⁄°™t_p
 (
c
) && (c) == '\0' \

403 ? (*Ë
	`__øwmemchr
 (
s
, 
c
) \

404 : 
	`°rchr
 (
s
, 
c
)))

	)

410 #i‡(!
deföed
 
_HAVE_STRING_ARCH_°r˝y
 && !
__GNUC_PREREQ
 (3, 0)) \

411 || 
deföed
 
	g_FORCE_INLINES


412 #i‡!
deföed
 
_HAVE_STRING_ARCH_°r˝y
 && !
__GNUC_PREREQ
 (3, 0)

413 
	#°r˝y
(
de°
, 
§c
) \

414 (
	`__exãnsi⁄__
 (
	`__buûtö_c⁄°™t_p
 (
§c
) \

415 ? (
	`__°rög2_1b±r_p
 (
§c
Ë&& 
	`°æí
 (src) + 1 <= 8 \

416 ? 
	`__°r˝y_smÆl
 (
de°
, 
	`__°r˝y_¨gs
 (
§c
), \

417 
	`°æí
 (
§c
) + 1) \

418 : (*Ë
	`mem˝y
 (
de°
, 
§c
, 
	`°æí
 (src) + 1)) \

419 : 
	`°r˝y
 (
de°
, 
§c
)))

	)

422 #i‡
_STRING_ARCH_u«lig√d


423 #i‚de‡
_FORCE_INLINES


424 
	#__°r˝y_¨gs
(
§c
) \

425 
__exãnsi⁄__
 
	`__STRING2_SMALL_GET16
 (
§c
, 0), \

426 
__exãnsi⁄__
 
	`__STRING2_SMALL_GET16
 (
§c
, 4), \

427 
__exãnsi⁄__
 
	`__STRING2_SMALL_GET32
 (
§c
, 0), \

428 
__exãnsi⁄__
 
	`__STRING2_SMALL_GET32
 (
§c
, 4)

	)

430 
__STRING_INLINE
 *
__°r˝y_smÆl
 (*, 
__uöt16_t
, __uint16_t,

431 
__uöt32_t
, __uöt32_t, 
size_t
);

432 
__STRING_INLINE
 *

433 
	$__°r˝y_smÆl
 (*
__de°
,

434 
__uöt16_t
 
__§c0_2
, __uöt16_à
__§c4_2
,

435 
__uöt32_t
 
__§c0_4
, __uöt32_à
__§c4_4
,

436 
size_t
 
__§˛í
)

439 
__uöt32_t
 
__ui
;

440 
__uöt16_t
 
__usi
;

441 
__uc
;

442 } *
__u
 = (*Ë
__de°
;

443 (Ë
__§˛í
)

446 
__u
->
__uc
 = '\0';

449 
__u
->
__usi
 = 
__§c0_2
;

452 
__u
->
__usi
 = 
__§c0_2
;

453 
__u
 = 
	`__exãnsi⁄__
 ((*) __u + 2);

454 
__u
->
__uc
 = '\0';

457 
__u
->
__ui
 = 
__§c0_4
;

460 
__u
->
__ui
 = 
__§c0_4
;

461 
__u
 = 
	`__exãnsi⁄__
 ((*) __u + 4);

462 
__u
->
__uc
 = '\0';

465 
__u
->
__ui
 = 
__§c0_4
;

466 
__u
 = 
	`__exãnsi⁄__
 ((*) __u + 4);

467 
__u
->
__usi
 = 
__§c4_2
;

470 
__u
->
__ui
 = 
__§c0_4
;

471 
__u
 = 
	`__exãnsi⁄__
 ((*) __u + 4);

472 
__u
->
__usi
 = 
__§c4_2
;

473 
__u
 = 
	`__exãnsi⁄__
 ((*) __u + 2);

474 
__u
->
__uc
 = '\0';

477 
__u
->
__ui
 = 
__§c0_4
;

478 
__u
 = 
	`__exãnsi⁄__
 ((*) __u + 4);

479 
__u
->
__ui
 = 
__§c4_4
;

482  
__de°
;

483 
	}
}

485 #i‚de‡
_FORCE_INLINES


486 
	#__°r˝y_¨gs
(
§c
) \

487 
	`__exãnsi⁄__
 ((
__STRING2_COPY_ARR2
) \

488 { { ((c⁄° *Ë(
§c
))[0], '\0' } }), \

489 
	`__exãnsi⁄__
 ((
__STRING2_COPY_ARR3
) \

490 { { ((c⁄° *Ë(
§c
))[0], ((const *) (src))[1], \

492 
	`__exãnsi⁄__
 ((
__STRING2_COPY_ARR4
) \

493 { { ((c⁄° *Ë(
§c
))[0], ((const *) (src))[1], \

494 ((c⁄° *Ë(
§c
))[2], '\0' } }), \

495 
	`__exãnsi⁄__
 ((
__STRING2_COPY_ARR5
) \

496 { { ((c⁄° *Ë(
§c
))[0], ((const *) (src))[1], \

497 ((c⁄° *Ë(
§c
))[2], ((const *) (src))[3], \

499 
	`__exãnsi⁄__
 ((
__STRING2_COPY_ARR6
) \

500 { { ((c⁄° *Ë(
§c
))[0], ((const *) (src))[1], \

501 ((c⁄° *Ë(
§c
))[2], ((const *) (src))[3], \

502 ((c⁄° *Ë(
§c
))[4], '\0' } }), \

503 
	`__exãnsi⁄__
 ((
__STRING2_COPY_ARR7
) \

504 { { ((c⁄° *Ë(
§c
))[0], ((const *) (src))[1], \

505 ((c⁄° *Ë(
§c
))[2], ((const *) (src))[3], \

506 ((c⁄° *Ë(
§c
))[4], ((const *) (src))[5], \

508 
	`__exãnsi⁄__
 ((
__STRING2_COPY_ARR8
) \

509 { { ((c⁄° *Ë(
§c
))[0], ((const *) (src))[1], \

510 ((c⁄° *Ë(
§c
))[2], ((const *) (src))[3], \

511 ((c⁄° *Ë(
§c
))[4], ((const *) (src))[5], \

512 ((c⁄° *Ë(
§c
))[6], '\0' } })

	)

514 
__STRING_INLINE
 *
__°r˝y_smÆl
 (*, 
__STRING2_COPY_ARR2
,

515 
__STRING2_COPY_ARR3
,

516 
__STRING2_COPY_ARR4
,

517 
__STRING2_COPY_ARR5
,

518 
__STRING2_COPY_ARR6
,

519 
__STRING2_COPY_ARR7
,

520 
__STRING2_COPY_ARR8
, 
size_t
);

521 
__STRING_INLINE
 *

522 
	$__°r˝y_smÆl
 (*
__de°
,

523 
__STRING2_COPY_ARR2
 
__§c2
, 
__STRING2_COPY_ARR3
 
__§c3
,

524 
__STRING2_COPY_ARR4
 
__§c4
, 
__STRING2_COPY_ARR5
 
__§c5
,

525 
__STRING2_COPY_ARR6
 
__§c6
, 
__STRING2_COPY_ARR7
 
__§c7
,

526 
__STRING2_COPY_ARR8
 
__§c8
, 
size_t
 
__§˛í
)

529 
__c
;

530 
__STRING2_COPY_ARR2
 
__sˇ2
;

531 
__STRING2_COPY_ARR3
 
__sˇ3
;

532 
__STRING2_COPY_ARR4
 
__sˇ4
;

533 
__STRING2_COPY_ARR5
 
__sˇ5
;

534 
__STRING2_COPY_ARR6
 
__sˇ6
;

535 
__STRING2_COPY_ARR7
 
__sˇ7
;

536 
__STRING2_COPY_ARR8
 
__sˇ8
;

537 } *
__u
 = (*Ë
__de°
;

538 (Ë
__§˛í
)

541 
__u
->
__c
 = '\0';

544 
__exãnsi⁄__
 
__u
->
__sˇ2
 = 
__§c2
;

547 
__exãnsi⁄__
 
__u
->
__sˇ3
 = 
__§c3
;

550 
__exãnsi⁄__
 
__u
->
__sˇ4
 = 
__§c4
;

553 
__exãnsi⁄__
 
__u
->
__sˇ5
 = 
__§c5
;

556 
__exãnsi⁄__
 
__u
->
__sˇ6
 = 
__§c6
;

559 
__exãnsi⁄__
 
__u
->
__sˇ7
 = 
__§c7
;

562 
__exãnsi⁄__
 
__u
->
__sˇ8
 = 
__§c8
;

565  
__de°
;

566 
	}
}

572 #ifde‡
__USE_GNU


573 #i‡!
deföed
 
_HAVE_STRING_ARCH_°p˝y
 || deföed 
_FORCE_INLINES


574 #i‚de‡
_HAVE_STRING_ARCH_°p˝y


575 #i‡
__GNUC_PREREQ
 (3, 4)

576 
	#__°p˝y
(
de°
, 
§c
Ë
	`__buûtö_°p˝y
 (de°, src)

	)

577 #ñi‡
__GNUC_PREREQ
 (3, 0)

578 
	#__°p˝y
(
de°
, 
§c
) \

579 (
	`__exãnsi⁄__
 (
	`__buûtö_c⁄°™t_p
 (
§c
) \

580 ? (
	`__°rög2_1b±r_p
 (
§c
Ë&& 
	`°æí
 (src) + 1 <= 8 \

581 ? 
	`__buûtö_°r˝y
 (
de°
, 
§c
Ë+ 
	`°æí
 (src) \

582 : ((*Ë(
__memp˝y
Ë(
de°
, 
§c
, 
	`°æí
 (src) + 1) \

584 : 
	`__°p˝y
 (
de°
, 
§c
)))

	)

586 
	#__°p˝y
(
de°
, 
§c
) \

587 (
	`__exãnsi⁄__
 (
	`__buûtö_c⁄°™t_p
 (
§c
) \

588 ? (
	`__°rög2_1b±r_p
 (
§c
Ë&& 
	`°æí
 (src) + 1 <= 8 \

589 ? 
	`__°p˝y_smÆl
 (
de°
, 
	`__°p˝y_¨gs
 (
§c
), \

590 
	`°æí
 (
§c
) + 1) \

591 : ((*Ë(
__memp˝y
Ë(
de°
, 
§c
, 
	`°æí
 (src) + 1) \

593 : 
	`__°p˝y
 (
de°
, 
§c
)))

	)

597 
	#°p˝y
(
de°
, 
§c
Ë
	`__°p˝y
 (de°, src)

	)

600 #i‡!
__GNUC_PREREQ
 (3, 0Ë|| 
deföed
 
_FORCE_INLINES


601 #i‡
_STRING_ARCH_u«lig√d


602 #i‚de‡
_FORCE_INLINES


603 
	#__°p˝y_¨gs
(
§c
) \

604 
__exãnsi⁄__
 
	`__STRING2_SMALL_GET16
 (
§c
, 0), \

605 
__exãnsi⁄__
 
	`__STRING2_SMALL_GET16
 (
§c
, 4), \

606 
__exãnsi⁄__
 
	`__STRING2_SMALL_GET32
 (
§c
, 0), \

607 
__exãnsi⁄__
 
	`__STRING2_SMALL_GET32
 (
§c
, 4)

	)

609 
__STRING_INLINE
 *
__°p˝y_smÆl
 (*, 
__uöt16_t
, __uint16_t,

610 
__uöt32_t
, __uöt32_t, 
size_t
);

611 
__STRING_INLINE
 *

612 
	$__°p˝y_smÆl
 (*
__de°
,

613 
__uöt16_t
 
__§c0_2
, __uöt16_à
__§c4_2
,

614 
__uöt32_t
 
__§c0_4
, __uöt32_à
__§c4_4
,

615 
size_t
 
__§˛í
)

618 
__ui
;

619 
__usi
;

620 
__uc
;

621 
__c
;

622 } *
__u
 = (*Ë
__de°
;

623 (Ë
__§˛í
)

626 
__u
->
__uc
 = '\0';

629 
__u
->
__usi
 = 
__§c0_2
;

630 
__u
 = 
	`__exãnsi⁄__
 ((*) __u + 1);

633 
__u
->
__usi
 = 
__§c0_2
;

634 
__u
 = 
	`__exãnsi⁄__
 ((*) __u + 2);

635 
__u
->
__uc
 = '\0';

638 
__u
->
__ui
 = 
__§c0_4
;

639 
__u
 = 
	`__exãnsi⁄__
 ((*) __u + 3);

642 
__u
->
__ui
 = 
__§c0_4
;

643 
__u
 = 
	`__exãnsi⁄__
 ((*) __u + 4);

644 
__u
->
__uc
 = '\0';

647 
__u
->
__ui
 = 
__§c0_4
;

648 
__u
 = 
	`__exãnsi⁄__
 ((*) __u + 4);

649 
__u
->
__usi
 = 
__§c4_2
;

650 
__u
 = 
	`__exãnsi⁄__
 ((*) __u + 1);

653 
__u
->
__ui
 = 
__§c0_4
;

654 
__u
 = 
	`__exãnsi⁄__
 ((*) __u + 4);

655 
__u
->
__usi
 = 
__§c4_2
;

656 
__u
 = 
	`__exãnsi⁄__
 ((*) __u + 2);

657 
__u
->
__uc
 = '\0';

660 
__u
->
__ui
 = 
__§c0_4
;

661 
__u
 = 
	`__exãnsi⁄__
 ((*) __u + 4);

662 
__u
->
__ui
 = 
__§c4_4
;

663 
__u
 = 
	`__exãnsi⁄__
 ((*) __u + 3);

666  &
__u
->
__c
;

667 
	}
}

669 #i‚de‡
_FORCE_INLINES


670 
	#__°p˝y_¨gs
(
§c
) \

671 
	`__exãnsi⁄__
 ((
__STRING2_COPY_ARR2
) \

672 { { ((c⁄° *Ë(
§c
))[0], '\0' } }), \

673 
	`__exãnsi⁄__
 ((
__STRING2_COPY_ARR3
) \

674 { { ((c⁄° *Ë(
§c
))[0], ((const *) (src))[1], \

676 
	`__exãnsi⁄__
 ((
__STRING2_COPY_ARR4
) \

677 { { ((c⁄° *Ë(
§c
))[0], ((const *) (src))[1], \

678 ((c⁄° *Ë(
§c
))[2], '\0' } }), \

679 
	`__exãnsi⁄__
 ((
__STRING2_COPY_ARR5
) \

680 { { ((c⁄° *Ë(
§c
))[0], ((const *) (src))[1], \

681 ((c⁄° *Ë(
§c
))[2], ((const *) (src))[3], \

683 
	`__exãnsi⁄__
 ((
__STRING2_COPY_ARR6
) \

684 { { ((c⁄° *Ë(
§c
))[0], ((const *) (src))[1], \

685 ((c⁄° *Ë(
§c
))[2], ((const *) (src))[3], \

686 ((c⁄° *Ë(
§c
))[4], '\0' } }), \

687 
	`__exãnsi⁄__
 ((
__STRING2_COPY_ARR7
) \

688 { { ((c⁄° *Ë(
§c
))[0], ((const *) (src))[1], \

689 ((c⁄° *Ë(
§c
))[2], ((const *) (src))[3], \

690 ((c⁄° *Ë(
§c
))[4], ((const *) (src))[5], \

692 
	`__exãnsi⁄__
 ((
__STRING2_COPY_ARR8
) \

693 { { ((c⁄° *Ë(
§c
))[0], ((const *) (src))[1], \

694 ((c⁄° *Ë(
§c
))[2], ((const *) (src))[3], \

695 ((c⁄° *Ë(
§c
))[4], ((const *) (src))[5], \

696 ((c⁄° *Ë(
§c
))[6], '\0' } })

	)

698 
__STRING_INLINE
 *
__°p˝y_smÆl
 (*, 
__STRING2_COPY_ARR2
,

699 
__STRING2_COPY_ARR3
,

700 
__STRING2_COPY_ARR4
,

701 
__STRING2_COPY_ARR5
,

702 
__STRING2_COPY_ARR6
,

703 
__STRING2_COPY_ARR7
,

704 
__STRING2_COPY_ARR8
, 
size_t
);

705 
__STRING_INLINE
 *

706 
	$__°p˝y_smÆl
 (*
__de°
,

707 
__STRING2_COPY_ARR2
 
__§c2
, 
__STRING2_COPY_ARR3
 
__§c3
,

708 
__STRING2_COPY_ARR4
 
__§c4
, 
__STRING2_COPY_ARR5
 
__§c5
,

709 
__STRING2_COPY_ARR6
 
__§c6
, 
__STRING2_COPY_ARR7
 
__§c7
,

710 
__STRING2_COPY_ARR8
 
__§c8
, 
size_t
 
__§˛í
)

713 
__c
;

714 
__STRING2_COPY_ARR2
 
__sˇ2
;

715 
__STRING2_COPY_ARR3
 
__sˇ3
;

716 
__STRING2_COPY_ARR4
 
__sˇ4
;

717 
__STRING2_COPY_ARR5
 
__sˇ5
;

718 
__STRING2_COPY_ARR6
 
__sˇ6
;

719 
__STRING2_COPY_ARR7
 
__sˇ7
;

720 
__STRING2_COPY_ARR8
 
__sˇ8
;

721 } *
__u
 = (*Ë
__de°
;

722 (Ë
__§˛í
)

725 
__u
->
__c
 = '\0';

728 
__exãnsi⁄__
 
__u
->
__sˇ2
 = 
__§c2
;

731 
__exãnsi⁄__
 
__u
->
__sˇ3
 = 
__§c3
;

734 
__exãnsi⁄__
 
__u
->
__sˇ4
 = 
__§c4
;

737 
__exãnsi⁄__
 
__u
->
__sˇ5
 = 
__§c5
;

740 
__exãnsi⁄__
 
__u
->
__sˇ6
 = 
__§c6
;

743 
__exãnsi⁄__
 
__u
->
__sˇ7
 = 
__§c7
;

746 
__exãnsi⁄__
 
__u
->
__sˇ8
 = 
__§c8
;

749  
__de°
 + 
__§˛í
 - 1;

750 
	}
}

758 #i‚de‡
_HAVE_STRING_ARCH_°∫˝y


759 #i‡
__GNUC_PREREQ
 (3, 2)

760 
	#°∫˝y
(
de°
, 
§c
, 
n
Ë
	`__buûtö_°∫˝y
 (de°, src,Ç)

	)

762 
	#°∫˝y
(
de°
, 
§c
, 
n
) \

763 (
	`__exãnsi⁄__
 (
	`__buûtö_c⁄°™t_p
 (
§c
Ë&& __buûtö_c⁄°™t_∞(
n
) \

764 ? (
	`°æí
 (
§c
Ë+ 1 >((
size_t
Ë(
n
)) \

765 ? (*Ë
	`mem˝y
 (
de°
, 
§c
, 
n
) \

766 : 
	`°∫˝y
 (
de°
, 
§c
, 
n
)) \

767 : 
	`°∫˝y
 (
de°
, 
§c
, 
n
)))

	)

773 #i‚de‡
_HAVE_STRING_ARCH_°∫ˇt


774 #ifde‡
_USE_STRING_ARCH_°rchr


775 
	#°∫ˇt
(
de°
, 
§c
, 
n
) \

776 (
	`__exãnsi⁄__
 ({ *
__de°
 = (
de°
); \

777 
	`__buûtö_c⁄°™t_p
 (
§c
Ë&& __buûtö_c⁄°™t_∞(
n
) \

778 ? (
	`°æí
 (
§c
Ë< ((
size_t
Ë(
n
)) \

779 ? 
	`°rˇt
 (
__de°
, 
§c
) \

780 : (*((*Ë
	`__memp˝y
 (
	`°rchr
 (
__de°
, '\0'), \

781 
§c
, 
n
)Ë'\0', 
__de°
)) \

782 : 
	`°∫ˇt
 (
de°
, 
§c
, 
n
); }))

	)

783 #ñi‡
__GNUC_PREREQ
 (3, 2)

784 
	#°∫ˇt
(
de°
, 
§c
, 
n
Ë
	`__buûtö_°∫ˇt
 (de°, src,Ç)

	)

786 
	#°∫ˇt
(
de°
, 
§c
, 
n
) \

787 (
	`__exãnsi⁄__
 (
	`__buûtö_c⁄°™t_p
 (
§c
Ë&& __buûtö_c⁄°™t_∞(
n
) \

788 ? (
	`°æí
 (
§c
Ë< ((
size_t
Ë(
n
)) \

789 ? 
	`°rˇt
 (
de°
, 
§c
) \

790 : 
	`°∫ˇt
 (
de°
, 
§c
, 
n
)) \

791 : 
	`°∫ˇt
 (
de°
, 
§c
, 
n
)))

	)

797 #i‚de‡
_HAVE_STRING_ARCH_°rcmp


798 #i‡
__GNUC_PREREQ
 (3, 2)

799 
	#°rcmp
(
s1
, 
s2
) \

800 
__exãnsi⁄__
 \

801 ({ 
size_t
 
__s1_Àn
, 
__s2_Àn
; \

802 (
	`__buûtö_c⁄°™t_p
 (
s1
Ë&& __buûtö_c⁄°™t_∞(
s2
) \

803 && (
__s1_Àn
 = 
	`°æí
 (
s1
), 
__s2_Àn
 = såÀ¿(
s2
), \

804 (!
	`__°rög2_1b±r_p
 (
s1
Ë|| 
__s1_Àn
 >= 4) \

805 && (!
	`__°rög2_1b±r_p
 (
s2
Ë|| 
__s2_Àn
 >= 4)) \

806 ? 
	`__buûtö_°rcmp
 (
s1
, 
s2
) \

807 : (
	`__buûtö_c⁄°™t_p
 (
s1
Ë&& 
	`__°rög2_1b±r_p
 (s1) \

808 && (
__s1_Àn
 = 
	`°æí
 (
s1
), __s1_len < 4) \

809 ? (
	`__buûtö_c⁄°™t_p
 (
s2
Ë&& 
	`__°rög2_1b±r_p
 (s2) \

810 ? 
	`__buûtö_°rcmp
 (
s1
, 
s2
) \

811 : 
	`__°rcmp_cg
 (
s1
, 
s2
, 
__s1_Àn
)) \

812 : (
	`__buûtö_c⁄°™t_p
 (
s2
Ë&& 
	`__°rög2_1b±r_p
 (s2) \

813 && (
__s2_Àn
 = 
	`°æí
 (
s2
), __s2_len < 4) \

814 ? (
	`__buûtö_c⁄°™t_p
 (
s1
Ë&& 
	`__°rög2_1b±r_p
 (s1) \

815 ? 
	`__buûtö_°rcmp
 (
s1
, 
s2
) \

816 : 
	`__°rcmp_gc
 (
s1
, 
s2
, 
__s2_Àn
)) \

817 : 
	`__buûtö_°rcmp
 (
s1
, 
s2
)))); })

	)

819 
	#°rcmp
(
s1
, 
s2
) \

820 
__exãnsi⁄__
 \

821 ({ 
size_t
 
__s1_Àn
, 
__s2_Àn
; \

822 (
	`__buûtö_c⁄°™t_p
 (
s1
Ë&& __buûtö_c⁄°™t_∞(
s2
) \

823 && (
__s1_Àn
 = 
	`°æí
 (
s1
), 
__s2_Àn
 = såÀ¿(
s2
), \

824 (!
	`__°rög2_1b±r_p
 (
s1
Ë|| 
__s1_Àn
 >= 4) \

825 && (!
	`__°rög2_1b±r_p
 (
s2
Ë|| 
__s2_Àn
 >= 4)) \

826 ? 
	`memcmp
 ((c⁄° *Ë(
s1
), (c⁄° *Ë(
s2
), \

827 (
__s1_Àn
 < 
__s2_Àn
 ? __s1_len : __s2_len) + 1) \

828 : (
	`__buûtö_c⁄°™t_p
 (
s1
Ë&& 
	`__°rög2_1b±r_p
 (s1) \

829 && (
__s1_Àn
 = 
	`°æí
 (
s1
), __s1_len < 4) \

830 ? (
	`__buûtö_c⁄°™t_p
 (
s2
Ë&& 
	`__°rög2_1b±r_p
 (s2) \

831 ? 
	`__°rcmp_cc
 (
s1
, 
s2
, 
__s1_Àn
) \

832 : 
	`__°rcmp_cg
 (
s1
, 
s2
, 
__s1_Àn
)) \

833 : (
	`__buûtö_c⁄°™t_p
 (
s2
Ë&& 
	`__°rög2_1b±r_p
 (s2) \

834 && (
__s2_Àn
 = 
	`°æí
 (
s2
), __s2_len < 4) \

835 ? (
	`__buûtö_c⁄°™t_p
 (
s1
Ë&& 
	`__°rög2_1b±r_p
 (s1) \

836 ? 
	`__°rcmp_cc
 (
s1
, 
s2
, 
__s2_Àn
) \

837 : 
	`__°rcmp_gc
 (
s1
, 
s2
, 
__s2_Àn
)) \

838 : 
	`°rcmp
 (
s1
, 
s2
)))); })

	)

841 
	#__°rcmp_cc
(
s1
, 
s2
, 
l
) \

842 (
	`__exãnsi⁄__
 ({ 
__ªsu…
 = \

843 (((c⁄° *Ë(c⁄° *Ë(
s1
))[0] \

844 - ((c⁄° *Ë(c⁄° *)(
s2
))[0]); \

845 i‡(
l
 > 0 && 
__ªsu…
 == 0) \

847 
__ªsu…
 = (((const *) \

848 (c⁄° *Ë(
s1
))[1] \

850 (c⁄° *Ë(
s2
))[1]); \

851 i‡(
l
 > 1 && 
__ªsu…
 == 0) \

853 
__ªsu…
 = \

855 (c⁄° *Ë(
s1
))[2] \

857 (c⁄° *Ë(
s2
))[2]); \

858 i‡(
l
 > 2 && 
__ªsu…
 == 0) \

859 
__ªsu…
 = \

861 (c⁄° *Ë(
s1
))[3] \

863 (c⁄° *Ë(
s2
))[3]); \

866 
__ªsu…
; }))

	)

868 
	#__°rcmp_cg
(
s1
, 
s2
, 
l1
) \

869 (
	`__exãnsi⁄__
 ({ c⁄° *
__s2
 = \

870 (c⁄° *Ë(c⁄° *Ë(
s2
); \

871 
__ªsu…
 = \

872 (((c⁄° *Ë(c⁄° *Ë(
s1
))[0] \

873 - 
__s2
[0]); \

874 i‡(
l1
 > 0 && 
__ªsu…
 == 0) \

876 
__ªsu…
 = (((const *) \

877 (c⁄° *Ë(
s1
))[1] - 
__s2
[1]); \

878 i‡(
l1
 > 1 && 
__ªsu…
 == 0) \

880 
__ªsu…
 = (((const *) \

881 (c⁄° *Ë(
s1
))[2] - 
__s2
[2]); \

882 i‡(
l1
 > 2 && 
__ªsu…
 == 0) \

883 
__ªsu…
 = (((const *) \

884 (c⁄° *Ë(
s1
))[3] \

885 - 
__s2
[3]); \

888 
__ªsu…
; }))

	)

890 
	#__°rcmp_gc
(
s1
, 
s2
, 
l2
Ë(- 
	`__°rcmp_cg
 (s2, s1,Ü2))

	)

895 #i‚de‡
_HAVE_STRING_ARCH_°∫cmp


896 
	#°∫cmp
(
s1
, 
s2
, 
n
) \

897 (
	`__exãnsi⁄__
 (
	`__buûtö_c⁄°™t_p
 (
n
) \

898 && ((
	`__buûtö_c⁄°™t_p
 (
s1
) \

899 && 
	`°æí
 (
s1
Ë< ((
size_t
Ë(
n
))) \

900 || (
	`__buûtö_c⁄°™t_p
 (
s2
) \

901 && 
	`°æí
 (
s2
Ë< ((
size_t
Ë(
n
)))) \

902 ? 
	`°rcmp
 (
s1
, 
s2
Ë: 
	`°∫cmp
 (s1, s2, 
n
)))

	)

908 #i‡!
deföed
 
_HAVE_STRING_ARCH_°rc•n
 || deföed 
_FORCE_INLINES


909 #i‚de‡
_HAVE_STRING_ARCH_°rc•n


910 #i‡
__GNUC_PREREQ
 (3, 2)

911 
	#°rc•n
(
s
, 
ªje˘
) \

912 
__exãnsi⁄__
 \

913 ({ 
__r0
, 
__r1
, 
__r2
; \

914 (
	`__buûtö_c⁄°™t_p
 (
ªje˘
Ë&& 
	`__°rög2_1b±r_p
 (reject) \

915 ? ((
	`__buûtö_c⁄°™t_p
 (
s
Ë&& 
	`__°rög2_1b±r_p
 (s)) \

916 ? 
	`__buûtö_°rc•n
 (
s
, 
ªje˘
) \

917 : ((
__r0
 = ((c⁄° *Ë(
ªje˘
))[0], __r0 == '\0') \

918 ? 
	`°æí
 (
s
) \

919 : ((
__r1
 = ((c⁄° *Ë(
ªje˘
))[1], __r1 == '\0') \

920 ? 
	`__°rc•n_c1
 (
s
, 
__r0
) \

921 : ((
__r2
 = ((c⁄° *Ë(
ªje˘
))[2], __r2 == '\0') \

922 ? 
	`__°rc•n_c2
 (
s
, 
__r0
, 
__r1
) \

923 : (((c⁄° *Ë(
ªje˘
))[3] == '\0' \

924 ? 
	`__°rc•n_c3
 (
s
, 
__r0
, 
__r1
, 
__r2
) \

925 : 
	`__buûtö_°rc•n
 (
s
, 
ªje˘
)))))) \

926 : 
	`__buûtö_°rc•n
 (
s
, 
ªje˘
)); })

	)

928 
	#°rc•n
(
s
, 
ªje˘
) \

929 
__exãnsi⁄__
 \

930 ({ 
__r0
, 
__r1
, 
__r2
; \

931 (
	`__buûtö_c⁄°™t_p
 (
ªje˘
Ë&& 
	`__°rög2_1b±r_p
 (reject) \

932 ? ((
__r0
 = ((c⁄° *Ë(
ªje˘
))[0], __r0 == '\0') \

933 ? 
	`°æí
 (
s
) \

934 : ((
__r1
 = ((c⁄° *Ë(
ªje˘
))[1], __r1 == '\0') \

935 ? 
	`__°rc•n_c1
 (
s
, 
__r0
) \

936 : ((
__r2
 = ((c⁄° *Ë(
ªje˘
))[2], __r2 == '\0') \

937 ? 
	`__°rc•n_c2
 (
s
, 
__r0
, 
__r1
) \

938 : (((c⁄° *Ë(
ªje˘
))[3] == '\0' \

939 ? 
	`__°rc•n_c3
 (
s
, 
__r0
, 
__r1
, 
__r2
) \

940 : 
	`°rc•n
 (
s
, 
ªje˘
))))) \

941 : 
	`°rc•n
 (
s
, 
ªje˘
)); })

	)

945 
__STRING_INLINE
 
size_t
 
__°rc•n_c1
 (c⁄° *
__s
, 
__ªje˘
);

946 
__STRING_INLINE
 
size_t


947 
	$__°rc•n_c1
 (c⁄° *
__s
, 
__ªje˘
)

949 
size_t
 
__ªsu…
 = 0;

950 
__s
[
__ªsu…
] !'\0' && __s[__ªsu…] !
__ªje˘
)

951 ++
__ªsu…
;

952  
__ªsu…
;

953 
	}
}

955 
__STRING_INLINE
 
size_t
 
__°rc•n_c2
 (c⁄° *
__s
, 
__ªje˘1
,

956 
__ªje˘2
);

957 
__STRING_INLINE
 
size_t


958 
	$__°rc•n_c2
 (c⁄° *
__s
, 
__ªje˘1
, 
__ªje˘2
)

960 
size_t
 
__ªsu…
 = 0;

961 
__s
[
__ªsu…
] !'\0' && __s[__ªsu…] !
__ªje˘1


962 && 
__s
[
__ªsu…
] !
__ªje˘2
)

963 ++
__ªsu…
;

964  
__ªsu…
;

965 
	}
}

967 
__STRING_INLINE
 
size_t
 
__°rc•n_c3
 (c⁄° *
__s
, 
__ªje˘1
,

968 
__ªje˘2
, 
__ªje˘3
);

969 
__STRING_INLINE
 
size_t


970 
	$__°rc•n_c3
 (c⁄° *
__s
, 
__ªje˘1
, 
__ªje˘2
,

971 
__ªje˘3
)

973 
size_t
 
__ªsu…
 = 0;

974 
__s
[
__ªsu…
] !'\0' && __s[__ªsu…] !
__ªje˘1


975 && 
__s
[
__ªsu…
] !
__ªje˘2
 && __s[__ªsu…] !
__ªje˘3
)

976 ++
__ªsu…
;

977  
__ªsu…
;

978 
	}
}

984 #i‡!
deföed
 
_HAVE_STRING_ARCH_°r•n
 || deföed 
_FORCE_INLINES


985 #i‚de‡
_HAVE_STRING_ARCH_°r•n


986 #i‡
__GNUC_PREREQ
 (3, 2)

987 
	#°r•n
(
s
, 
ac˚±
) \

988 
__exãnsi⁄__
 \

989 ({ 
__a0
, 
__a1
, 
__a2
; \

990 (
	`__buûtö_c⁄°™t_p
 (
ac˚±
Ë&& 
	`__°rög2_1b±r_p
 (accept) \

991 ? ((
	`__buûtö_c⁄°™t_p
 (
s
Ë&& 
	`__°rög2_1b±r_p
 (s)) \

992 ? 
	`__buûtö_°r•n
 (
s
, 
ac˚±
) \

993 : ((
__a0
 = ((c⁄° *Ë(
ac˚±
))[0], __a0 == '\0') \

994 ? ((Ë(
s
), (
size_t
) 0) \

995 : ((
__a1
 = ((c⁄° *Ë(
ac˚±
))[1], __a1 == '\0') \

996 ? 
	`__°r•n_c1
 (
s
, 
__a0
) \

997 : ((
__a2
 = ((c⁄° *Ë(
ac˚±
))[2], __a2 == '\0') \

998 ? 
	`__°r•n_c2
 (
s
, 
__a0
, 
__a1
) \

999 : (((c⁄° *Ë(
ac˚±
))[3] == '\0' \

1000 ? 
	`__°r•n_c3
 (
s
, 
__a0
, 
__a1
, 
__a2
) \

1001 : 
	`__buûtö_°r•n
 (
s
, 
ac˚±
)))))) \

1002 : 
	`__buûtö_°r•n
 (
s
, 
ac˚±
)); })

	)

1004 
	#°r•n
(
s
, 
ac˚±
) \

1005 
__exãnsi⁄__
 \

1006 ({ 
__a0
, 
__a1
, 
__a2
; \

1007 (
	`__buûtö_c⁄°™t_p
 (
ac˚±
Ë&& 
	`__°rög2_1b±r_p
 (accept) \

1008 ? ((
__a0
 = ((c⁄° *Ë(
ac˚±
))[0], __a0 == '\0') \

1009 ? ((Ë(
s
), (
size_t
) 0) \

1010 : ((
__a1
 = ((c⁄° *Ë(
ac˚±
))[1], __a1 == '\0') \

1011 ? 
	`__°r•n_c1
 (
s
, 
__a0
) \

1012 : ((
__a2
 = ((c⁄° *Ë(
ac˚±
))[2], __a2 == '\0') \

1013 ? 
	`__°r•n_c2
 (
s
, 
__a0
, 
__a1
) \

1014 : (((c⁄° *Ë(
ac˚±
))[3] == '\0' \

1015 ? 
	`__°r•n_c3
 (
s
, 
__a0
, 
__a1
, 
__a2
) \

1016 : 
	`°r•n
 (
s
, 
ac˚±
))))) \

1017 : 
	`°r•n
 (
s
, 
ac˚±
)); })

	)

1021 
__STRING_INLINE
 
size_t
 
__°r•n_c1
 (c⁄° *
__s
, 
__ac˚±
);

1022 
__STRING_INLINE
 
size_t


1023 
	$__°r•n_c1
 (c⁄° *
__s
, 
__ac˚±
)

1025 
size_t
 
__ªsu…
 = 0;

1027 
__s
[
__ªsu…
] =
__ac˚±
)

1028 ++
__ªsu…
;

1029  
__ªsu…
;

1030 
	}
}

1032 
__STRING_INLINE
 
size_t
 
__°r•n_c2
 (c⁄° *
__s
, 
__ac˚±1
,

1033 
__ac˚±2
);

1034 
__STRING_INLINE
 
size_t


1035 
	$__°r•n_c2
 (c⁄° *
__s
, 
__ac˚±1
, 
__ac˚±2
)

1037 
size_t
 
__ªsu…
 = 0;

1039 
__s
[
__ªsu…
] =
__ac˚±1
 || __s[__ªsu…] =
__ac˚±2
)

1040 ++
__ªsu…
;

1041  
__ªsu…
;

1042 
	}
}

1044 
__STRING_INLINE
 
size_t
 
__°r•n_c3
 (c⁄° *
__s
, 
__ac˚±1
,

1045 
__ac˚±2
, 
__ac˚±3
);

1046 
__STRING_INLINE
 
size_t


1047 
	$__°r•n_c3
 (c⁄° *
__s
, 
__ac˚±1
, 
__ac˚±2
, 
__ac˚±3
)

1049 
size_t
 
__ªsu…
 = 0;

1051 
__s
[
__ªsu…
] =
__ac˚±1
 || __s[__ªsu…] =
__ac˚±2


1052 || 
__s
[
__ªsu…
] =
__ac˚±3
)

1053 ++
__ªsu…
;

1054  
__ªsu…
;

1055 
	}
}

1060 #i‡!
deföed
 
_HAVE_STRING_ARCH_°Ωbrk
 || deföed 
_FORCE_INLINES


1061 #i‚de‡
_HAVE_STRING_ARCH_°Ωbrk


1062 #i‡
__GNUC_PREREQ
 (3, 2)

1063 
	#°Ωbrk
(
s
, 
ac˚±
) \

1064 
__exãnsi⁄__
 \

1065 ({ 
__a0
, 
__a1
, 
__a2
; \

1066 (
	`__buûtö_c⁄°™t_p
 (
ac˚±
Ë&& 
	`__°rög2_1b±r_p
 (accept) \

1067 ? ((
	`__buûtö_c⁄°™t_p
 (
s
Ë&& 
	`__°rög2_1b±r_p
 (s)) \

1068 ? 
	`__buûtö_°Ωbrk
 (
s
, 
ac˚±
) \

1069 : ((
__a0
 = ((c⁄° *Ë(
ac˚±
))[0], __a0 == '\0') \

1070 ? ((Ë(
s
), (*Ë
NULL
) \

1071 : ((
__a1
 = ((c⁄° *Ë(
ac˚±
))[1], __a1 == '\0') \

1072 ? 
	`__buûtö_°rchr
 (
s
, 
__a0
) \

1073 : ((
__a2
 = ((c⁄° *Ë(
ac˚±
))[2], __a2 == '\0') \

1074 ? 
	`__°Ωbrk_c2
 (
s
, 
__a0
, 
__a1
) \

1075 : (((c⁄° *Ë(
ac˚±
))[3] == '\0' \

1076 ? 
	`__°Ωbrk_c3
 (
s
, 
__a0
, 
__a1
, 
__a2
) \

1077 : 
	`__buûtö_°Ωbrk
 (
s
, 
ac˚±
)))))) \

1078 : 
	`__buûtö_°Ωbrk
 (
s
, 
ac˚±
)); })

	)

1080 
	#°Ωbrk
(
s
, 
ac˚±
) \

1081 
__exãnsi⁄__
 \

1082 ({ 
__a0
, 
__a1
, 
__a2
; \

1083 (
	`__buûtö_c⁄°™t_p
 (
ac˚±
Ë&& 
	`__°rög2_1b±r_p
 (accept) \

1084 ? ((
__a0
 = ((c⁄° *Ë(
ac˚±
))[0], __a0 == '\0') \

1085 ? ((Ë(
s
), (*Ë
NULL
) \

1086 : ((
__a1
 = ((c⁄° *Ë(
ac˚±
))[1], __a1 == '\0') \

1087 ? 
	`°rchr
 (
s
, 
__a0
) \

1088 : ((
__a2
 = ((c⁄° *Ë(
ac˚±
))[2], __a2 == '\0') \

1089 ? 
	`__°Ωbrk_c2
 (
s
, 
__a0
, 
__a1
) \

1090 : (((c⁄° *Ë(
ac˚±
))[3] == '\0' \

1091 ? 
	`__°Ωbrk_c3
 (
s
, 
__a0
, 
__a1
, 
__a2
) \

1092 : 
	`°Ωbrk
 (
s
, 
ac˚±
))))) \

1093 : 
	`°Ωbrk
 (
s
, 
ac˚±
)); })

	)

1097 
__STRING_INLINE
 *
__°Ωbrk_c2
 (c⁄° *
__s
, 
__ac˚±1
,

1098 
__ac˚±2
);

1099 
__STRING_INLINE
 *

1100 
	$__°Ωbrk_c2
 (c⁄° *
__s
, 
__ac˚±1
, 
__ac˚±2
)

1103 *
__s
 !'\0' && *__†!
__ac˚±1
 && *__†!
__ac˚±2
)

1104 ++
__s
;

1105  *
__s
 ='\0' ? 
NULL
 : (*Ë(
size_t
) __s;

1106 
	}
}

1108 
__STRING_INLINE
 *
__°Ωbrk_c3
 (c⁄° *
__s
, 
__ac˚±1
,

1109 
__ac˚±2
, 
__ac˚±3
);

1110 
__STRING_INLINE
 *

1111 
	$__°Ωbrk_c3
 (c⁄° *
__s
, 
__ac˚±1
, 
__ac˚±2
, 
__ac˚±3
)

1114 *
__s
 !'\0' && *__†!
__ac˚±1
 && *__†!
__ac˚±2


1115 && *
__s
 !
__ac˚±3
)

1116 ++
__s
;

1117  *
__s
 ='\0' ? 
NULL
 : (*Ë(
size_t
) __s;

1118 
	}
}

1124 #i‡!
deföed
 
_HAVE_STRING_ARCH_°r°r
 && !
__GNUC_PREREQ
 (2, 97)

1125 
	#°r°r
(
hay°ack
, 
√edÀ
) \

1126 (
	`__exãnsi⁄__
 (
	`__buûtö_c⁄°™t_p
 (
√edÀ
Ë&& 
	`__°rög2_1b±r_p
 (needle) \

1127 ? (((c⁄° *Ë(
√edÀ
))[0] == '\0' \

1128 ? (*Ë(
size_t
Ë(
hay°ack
) \

1129 : (((c⁄° *Ë(
√edÀ
))[1] == '\0' \

1130 ? 
	`°rchr
 (
hay°ack
, \

1131 ((c⁄° *Ë(
√edÀ
))[0]) \

1132 : 
	`°r°r
 (
hay°ack
, 
√edÀ
))) \

1133 : 
	`°r°r
 (
hay°ack
, 
√edÀ
)))

	)

1137 #i‡!
deföed
 
_HAVE_STRING_ARCH_°πok_r
 || deföed 
_FORCE_INLINES


1138 #i‚de‡
_HAVE_STRING_ARCH_°πok_r


1139 
	#__°πok_r
(
s
, 
£p
, 
√xç
) \

1140 (
	`__exãnsi⁄__
 (
	`__buûtö_c⁄°™t_p
 (
£p
Ë&& 
	`__°rög2_1b±r_p
 (sep) \

1141 && ((c⁄° *Ë(
£p
))[0] != '\0' \

1142 && ((c⁄° *Ë(
£p
))[1] == '\0' \

1143 ? 
	`__°πok_r_1c
 (
s
, ((c⁄° *Ë(
£p
))[0], 
√xç
) \

1144 : 
	`__°πok_r
 (
s
, 
£p
, 
√xç
)))

	)

1147 
__STRING_INLINE
 *
__°πok_r_1c
 (*
__s
, 
__£p
, **
__√xç
);

1148 
__STRING_INLINE
 *

1149 
	$__°πok_r_1c
 (*
__s
, 
__£p
, **
__√xç
)

1151 *
__ªsu…
;

1152 i‡(
__s
 =
NULL
)

1153 
__s
 = *
__√xç
;

1154 *
__s
 =
__£p
)

1155 ++
__s
;

1156 
__ªsu…
 = 
NULL
;

1157 i‡(*
__s
 != '\0')

1159 
__ªsu…
 = 
__s
++;

1160 *
__s
 != '\0')

1161 i‡(*
__s
++ =
__£p
)

1163 
__s
[-1] = '\0';

1167 *
__√xç
 = 
__s
;

1168  
__ªsu…
;

1169 
	}
}

1170 #i‡
deföed
 
__USE_POSIX
 || deföed 
__USE_MISC


1171 
	#°πok_r
(
s
, 
£p
, 
√xç
Ë
	`__°πok_r
 (s, sï,Çexç)

	)

1176 #i‡!
deföed
 
_HAVE_STRING_ARCH_°r£p
 || deföed 
_FORCE_INLINES


1177 #i‚de‡
_HAVE_STRING_ARCH_°r£p


1179 *
__°r£p_g
 (**
__°rögp
, c⁄° *
__dñim
);

1180 
	#__°r£p
(
s
, 
ªje˘
) \

1181 
__exãnsi⁄__
 \

1182 ({ 
__r0
, 
__r1
, 
__r2
; \

1183 (
	`__buûtö_c⁄°™t_p
 (
ªje˘
Ë&& 
	`__°rög2_1b±r_p
 (reject) \

1184 && (
__r0
 = ((c⁄° *Ë(
ªje˘
))[0], \

1185 ((c⁄° *Ë(
ªje˘
))[0] != '\0') \

1186 ? ((
__r1
 = ((c⁄° *Ë(
ªje˘
))[1], \

1187 ((c⁄° *Ë(
ªje˘
))[1] == '\0') \

1188 ? 
	`__°r£p_1c
 (
s
, 
__r0
) \

1189 : ((
__r2
 = ((c⁄° *Ë(
ªje˘
))[2], __r2 == '\0') \

1190 ? 
	`__°r£p_2c
 (
s
, 
__r0
, 
__r1
) \

1191 : (((c⁄° *Ë(
ªje˘
))[3] == '\0' \

1192 ? 
	`__°r£p_3c
 (
s
, 
__r0
, 
__r1
, 
__r2
) \

1193 : 
	`__°r£p_g
 (
s
, 
ªje˘
)))) \

1194 : 
	`__°r£p_g
 (
s
, 
ªje˘
)); })

	)

1197 
__STRING_INLINE
 *
__°r£p_1c
 (**
__s
, 
__ªje˘
);

1198 
__STRING_INLINE
 *

1199 
	$__°r£p_1c
 (**
__s
, 
__ªje˘
)

1201 *
__ªtvÆ
 = *
__s
;

1202 i‡(
__ªtvÆ
 !
NULL
 && (*
__s
 = 
	`°rchr
 (__ªtvÆ, 
__ªje˘
)) != NULL)

1203 *(*
__s
)++ = '\0';

1204  
__ªtvÆ
;

1205 
	}
}

1207 
__STRING_INLINE
 *
__°r£p_2c
 (**
__s
, 
__ªje˘1
, 
__ªje˘2
);

1208 
__STRING_INLINE
 *

1209 
	$__°r£p_2c
 (**
__s
, 
__ªje˘1
, 
__ªje˘2
)

1211 *
__ªtvÆ
 = *
__s
;

1212 i‡(
__ªtvÆ
 !
NULL
)

1214 *
__˝
 = 
__ªtvÆ
;

1217 i‡(*
__˝
 == '\0')

1219 
__˝
 = 
NULL
;

1222 i‡(*
__˝
 =
__ªje˘1
 || *__˝ =
__ªje˘2
)

1224 *
__˝
++ = '\0';

1227 ++
__˝
;

1229 *
__s
 = 
__˝
;

1231  
__ªtvÆ
;

1232 
	}
}

1234 
__STRING_INLINE
 *
__°r£p_3c
 (**
__s
, 
__ªje˘1
, 
__ªje˘2
,

1235 
__ªje˘3
);

1236 
__STRING_INLINE
 *

1237 
	$__°r£p_3c
 (**
__s
, 
__ªje˘1
, 
__ªje˘2
, 
__ªje˘3
)

1239 *
__ªtvÆ
 = *
__s
;

1240 i‡(
__ªtvÆ
 !
NULL
)

1242 *
__˝
 = 
__ªtvÆ
;

1245 i‡(*
__˝
 == '\0')

1247 
__˝
 = 
NULL
;

1250 i‡(*
__˝
 =
__ªje˘1
 || *__˝ =
__ªje˘2
 || *__˝ =
__ªje˘3
)

1252 *
__˝
++ = '\0';

1255 ++
__˝
;

1257 *
__s
 = 
__˝
;

1259  
__ªtvÆ
;

1260 
	}
}

1261 #ifde‡
__USE_BSD


1262 
	#°r£p
(
s
, 
ªje˘
Ë
	`__°r£p
 (s,Ñeje˘)

	)

1269 #ifde‡
__USE_MISC


1271 #i‡!
deföed
 
_HAVE_STRING_ARCH_°rdup
 || !deföed 
_HAVE_STRING_ARCH_°∫dup


1272 
	#__√ed_mÆloc_™d_ˇŒoc


	)

1273 
	~<°dlib.h
>

1276 #i‚de‡
_HAVE_STRING_ARCH_°rdup


1278 *
	$__°rdup
 (c⁄° *
__°rög
Ë
__THROW
 
__©åibuã_mÆloc__
;

1279 
	#__°rdup
(
s
) \

1280 (
	`__exãnsi⁄__
 (
	`__buûtö_c⁄°™t_p
 (
s
Ë&& 
	`__°rög2_1b±r_p
 (s) \

1281 ? (((c⁄° *Ë(
s
))[0] == '\0' \

1282 ? (*Ë
	`ˇŒoc
 ((
size_t
) 1, (size_t) 1) \

1283 : ({ 
size_t
 
__Àn
 = 
	`°æí
 (
s
) + 1; \

1284 *
__ªtvÆ
 = (*Ë
	`mÆloc
 (
__Àn
); \

1285 i‡(
__ªtvÆ
 !
NULL
) \

1286 
__ªtvÆ
 = (*Ë
	`mem˝y
 (__ªtvÆ, 
s
, 
__Àn
); \

1287 
__ªtvÆ
; 
	}
})) \

1288 : 
	`__°rdup
 (
s
)))

	)

1290 #i‡
deföed
 
__USE_SVID
 || deföed 
__USE_BSD
 || deföed 
__USE_XOPEN_EXTENDED


1291 
	#°rdup
(
s
Ë
	`__°rdup
 (s)

	)

1295 #i‚de‡
_HAVE_STRING_ARCH_°∫dup


1297 *
	$__°∫dup
 (c⁄° *
__°rög
, 
size_t
 
__n
)

1298 
__THROW
 
__©åibuã_mÆloc__
;

1299 
	#__°∫dup
(
s
, 
n
) \

1300 (
	`__exãnsi⁄__
 (
	`__buûtö_c⁄°™t_p
 (
s
Ë&& 
	`__°rög2_1b±r_p
 (s) \

1301 ? (((c⁄° *Ë(
s
))[0] == '\0' \

1302 ? (*Ë
	`ˇŒoc
 ((
size_t
) 1, (size_t) 1) \

1303 : ({ 
size_t
 
__Àn
 = 
	`°æí
 (
s
) + 1; \

1304 
size_t
 
__n
 = (
n
); \

1305 *
__ªtvÆ
; \

1306 i‡(
__n
 < 
__Àn
) \

1307 
__Àn
 = 
__n
 + 1; \

1308 
__ªtvÆ
 = (*Ë
	`mÆloc
 (
__Àn
); \

1309 i‡(
__ªtvÆ
 !
NULL
) \

1311 
__ªtvÆ
[
__Àn
 - 1] = '\0'; \

1312 
__ªtvÆ
 = (*Ë
	`mem˝y
 (__ªtvÆ, 
s
, \

1313 
__Àn
 - 1); \

1315 
__ªtvÆ
; 
	}
})) \

1316 : 
	`__°∫dup
 (
s
, 
n
)))

	)

1318 #ifde‡
__USE_GNU


1319 
	#°∫dup
(
s
, 
n
Ë
	`__°∫dup
 (s,Ç)

	)

1325 #i‚de‡
_FORCE_INLINES


1326 #unde‡
__STRING_INLINE


	@/usr/include/bits/string3.h

18 #i‚de‡
_STRING_H


22 
__w¨nde˛
 (
__w¨n_mem£t_zîo_Àn
,

25 #i‚de‡
__˝lu•lus


29 #unde‡
mem˝y


30 #unde‡
memmove


31 #unde‡
mem£t


32 #unde‡
°rˇt


33 #unde‡
°r˝y


34 #unde‡
°∫ˇt


35 #unde‡
°∫˝y


36 #ifde‡
__USE_GNU


37 #unde‡
memp˝y


38 #unde‡
°p˝y


40 #ifde‡
__USE_BSD


41 #unde‡
bc›y


42 #unde‡
bzîo


47 
__f‹tify_fun˘i⁄
 *

48 
__NTH
 (
	$mem˝y
 (*
__ª°ri˘
 
__de°
, c⁄° *__ª°ri˘ 
__§c
,

49 
size_t
 
__Àn
))

51  
	`__buûtö___mem˝y_chk
 (
__de°
, 
__§c
, 
__Àn
, 
	`__bos0
 (__dest));

52 
	}
}

54 
__f‹tify_fun˘i⁄
 *

55 
__NTH
 (
	$memmove
 (*
__de°
, c⁄° *
__§c
, 
size_t
 
__Àn
))

57  
	`__buûtö___memmove_chk
 (
__de°
, 
__§c
, 
__Àn
, 
	`__bos0
 (__dest));

58 
	}
}

60 #ifde‡
__USE_GNU


61 
__f‹tify_fun˘i⁄
 *

62 
__NTH
 (
	$memp˝y
 (*
__ª°ri˘
 
__de°
, c⁄° *__ª°ri˘ 
__§c
,

63 
size_t
 
__Àn
))

65  
	`__buûtö___memp˝y_chk
 (
__de°
, 
__§c
, 
__Àn
, 
	`__bos0
 (__dest));

66 
	}
}

75 
__f‹tify_fun˘i⁄
 *

76 
__NTH
 (
	$mem£t
 (*
__de°
, 
__ch
, 
size_t
 
__Àn
))

78 i‡(
	`__buûtö_c⁄°™t_p
 (
__Àn
) && __len == 0

79 && (!
	`__buûtö_c⁄°™t_p
 (
__ch
) || __ch != 0))

81 
	`__w¨n_mem£t_zîo_Àn
 ();

82  
__de°
;

84  
	`__buûtö___mem£t_chk
 (
__de°
, 
__ch
, 
__Àn
, 
	`__bos0
 (__dest));

85 
	}
}

87 #ifde‡
__USE_BSD


88 
__f‹tify_fun˘i⁄
 

89 
__NTH
 (
	$bc›y
 (c⁄° *
__§c
, *
__de°
, 
size_t
 
__Àn
))

91 (Ë
	`__buûtö___memmove_chk
 (
__de°
, 
__§c
, 
__Àn
, 
	`__bos0
 (__dest));

92 
	}
}

94 
__f‹tify_fun˘i⁄
 

95 
__NTH
 (
	$bzîo
 (*
__de°
, 
size_t
 
__Àn
))

97 (Ë
	`__buûtö___mem£t_chk
 (
__de°
, '\0', 
__Àn
, 
	`__bos0
 (__dest));

98 
	}
}

101 
__f‹tify_fun˘i⁄
 *

102 
__NTH
 (
	$°r˝y
 (*
__ª°ri˘
 
__de°
, c⁄° *__ª°ri˘ 
__§c
))

104  
	`__buûtö___°r˝y_chk
 (
__de°
, 
__§c
, 
	`__bos
 (__dest));

105 
	}
}

107 #ifde‡
__USE_GNU


108 
__f‹tify_fun˘i⁄
 *

109 
__NTH
 (
	$°p˝y
 (*
__ª°ri˘
 
__de°
, c⁄° *__ª°ri˘ 
__§c
))

111  
	`__buûtö___°p˝y_chk
 (
__de°
, 
__§c
, 
	`__bos
 (__dest));

112 
	}
}

116 
__f‹tify_fun˘i⁄
 *

117 
__NTH
 (
	$°∫˝y
 (*
__ª°ri˘
 
__de°
, c⁄° *__ª°ri˘ 
__§c
,

118 
size_t
 
__Àn
))

120  
	`__buûtö___°∫˝y_chk
 (
__de°
, 
__§c
, 
__Àn
, 
	`__bos
 (__dest));

121 
	}
}

124 *
	$__°≤˝y_chk
 (*
__de°
, c⁄° *
__§c
, 
size_t
 
__n
,

125 
size_t
 
__de°Àn
Ë
__THROW
;

126 *
	`__REDIRECT_NTH
 (
__°≤˝y_Æüs
, (*
__de°
, c⁄° *
__§c
,

127 
size_t
 
__n
), 
°≤˝y
);

129 
__f‹tify_fun˘i⁄
 *

130 
	`__NTH
 (
	$°≤˝y
 (*
__de°
, c⁄° *
__§c
, 
size_t
 
__n
))

132 i‡(
	`__bos
 (
__de°
Ë!(
size_t
) -1

133 && (!
	`__buûtö_c⁄°™t_p
 (
__n
Ë|| __¿<
	`__bos
 (
__de°
)))

134  
	`__°≤˝y_chk
 (
__de°
, 
__§c
, 
__n
, 
	`__bos
 (__dest));

135  
	`__°≤˝y_Æüs
 (
__de°
, 
__§c
, 
__n
);

136 
	}
}

139 
__f‹tify_fun˘i⁄
 *

140 
__NTH
 (
	$°rˇt
 (*
__ª°ri˘
 
__de°
, c⁄° *__ª°ri˘ 
__§c
))

142  
	`__buûtö___°rˇt_chk
 (
__de°
, 
__§c
, 
	`__bos
 (__dest));

143 
	}
}

146 
__f‹tify_fun˘i⁄
 *

147 
__NTH
 (
	$°∫ˇt
 (*
__ª°ri˘
 
__de°
, c⁄° *__ª°ri˘ 
__§c
,

148 
size_t
 
__Àn
))

150  
	`__buûtö___°∫ˇt_chk
 (
__de°
, 
__§c
, 
__Àn
, 
	`__bos
 (__dest));

151 
	}
}

	@/usr/include/features.h

18 #i‚def 
_FEATURES_H


19 
	#_FEATURES_H
 1

	)

98 #unde‡
__USE_ISOC11


99 #unde‡
__USE_ISOC99


100 #unde‡
__USE_ISOC95


101 #unde‡
__USE_ISOCXX11


102 #unde‡
__USE_POSIX


103 #unde‡
__USE_POSIX2


104 #unde‡
__USE_POSIX199309


105 #unde‡
__USE_POSIX199506


106 #unde‡
__USE_XOPEN


107 #unde‡
__USE_XOPEN_EXTENDED


108 #unde‡
__USE_UNIX98


109 #unde‡
__USE_XOPEN2K


110 #unde‡
__USE_XOPEN2KXSI


111 #unde‡
__USE_XOPEN2K8


112 #unde‡
__USE_XOPEN2K8XSI


113 #unde‡
__USE_LARGEFILE


114 #unde‡
__USE_LARGEFILE64


115 #unde‡
__USE_FILE_OFFSET64


116 #unde‡
__USE_BSD


117 #unde‡
__USE_SVID


118 #unde‡
__USE_MISC


119 #unde‡
__USE_ATFILE


120 #unde‡
__USE_GNU


121 #unde‡
__USE_REENTRANT


122 #unde‡
__USE_FORTIFY_LEVEL


123 #unde‡
__FAVOR_BSD


124 #unde‡
__KERNEL_STRICT_NAMES


128 #i‚de‡
_LOOSE_KERNEL_NAMES


129 
	#__KERNEL_STRICT_NAMES


	)

139 #i‡
deföed
 
__GNUC__
 && deföed 
__GNUC_MINOR__


140 
	#__GNUC_PREREQ
(
maj
, 
mö
) \

141 ((
__GNUC__
 << 16Ë+ 
__GNUC_MINOR__
 >((
maj
Ë<< 16Ë+ (
mö
))

	)

143 
	#__GNUC_PREREQ
(
maj
, 
mö
Ë0

	)

148 #i‡
deföed
 
_BSD_SOURCE
 && \

149 !(
deföed
 
	g_POSIX_SOURCE
 || deföed 
	g_POSIX_C_SOURCE
 || \

150 
deföed
 
	g_XOPEN_SOURCE
 || deföed 
	g_GNU_SOURCE
 || deföed 
	g_SVID_SOURCE
)

151 
	#__FAVOR_BSD
 1

	)

155 #ifde‡
_GNU_SOURCE


156 #unde‡
_ISOC95_SOURCE


157 
	#_ISOC95_SOURCE
 1

	)

158 #unde‡
_ISOC99_SOURCE


159 
	#_ISOC99_SOURCE
 1

	)

160 #unde‡
_ISOC11_SOURCE


161 
	#_ISOC11_SOURCE
 1

	)

162 #unde‡
_POSIX_SOURCE


163 
	#_POSIX_SOURCE
 1

	)

164 #unde‡
_POSIX_C_SOURCE


165 
	#_POSIX_C_SOURCE
 200809L

	)

166 #unde‡
_XOPEN_SOURCE


167 
	#_XOPEN_SOURCE
 700

	)

168 #unde‡
_XOPEN_SOURCE_EXTENDED


169 
	#_XOPEN_SOURCE_EXTENDED
 1

	)

170 #unde‡
_LARGEFILE64_SOURCE


171 
	#_LARGEFILE64_SOURCE
 1

	)

172 #unde‡
_BSD_SOURCE


173 
	#_BSD_SOURCE
 1

	)

174 #unde‡
_SVID_SOURCE


175 
	#_SVID_SOURCE
 1

	)

176 #unde‡
_ATFILE_SOURCE


177 
	#_ATFILE_SOURCE
 1

	)

182 #i‡(!
deföed
 
__STRICT_ANSI__
 && !deföed 
_ISOC99_SOURCE
 && \

183 !
deföed
 
	g_POSIX_SOURCE
 && !deföed 
	g_POSIX_C_SOURCE
 && \

184 !
deföed
 
	g_XOPEN_SOURCE
 && !deföed 
	g_BSD_SOURCE
 && !deföed 
	g_SVID_SOURCE
)

185 
	#_BSD_SOURCE
 1

	)

186 
	#_SVID_SOURCE
 1

	)

190 #i‡(
deföed
 
_ISOC11_SOURCE
 \

191 || (
deföed
 
	g__STDC_VERSION__
 && __STDC_VERSION__ >= 201112L))

192 
	#__USE_ISOC11
 1

	)

196 #i‡(
deföed
 
_ISOC99_SOURCE
 || deföed 
_ISOC11_SOURCE
 \

197 || (
deföed
 
__STDC_VERSION__
 && __STDC_VERSION__ >= 199901L))

198 
	#__USE_ISOC99
 1

	)

202 #i‡(
deföed
 
_ISOC99_SOURCE
 || deföed 
_ISOC11_SOURCE
 \

203 || (
deföed
 
__STDC_VERSION__
 && __STDC_VERSION__ >= 199409L))

204 
	#__USE_ISOC95
 1

	)

211 #i‡((
deföed
 
__˝lu•lus
 && __cplusplus >= 201103L) \

212 || 
deföed
 
__GXX_EXPERIMENTAL_CXX0X__
)

213 
	#__USE_ISOCXX11
 1

	)

218 #i‡((!
deföed
 
__STRICT_ANSI__
 || (
_XOPEN_SOURCE
 - 0) >= 500) && \

219 !
deföed
 
_POSIX_SOURCE
 && !deföed 
_POSIX_C_SOURCE
)

220 
	#_POSIX_SOURCE
 1

	)

221 #i‡
deföed
 
_XOPEN_SOURCE
 && (_XOPEN_SOURCE - 0) < 500

222 
	#_POSIX_C_SOURCE
 2

	)

223 #ñi‡
deföed
 
_XOPEN_SOURCE
 && (_XOPEN_SOURCE - 0) < 600

224 
	#_POSIX_C_SOURCE
 199506L

	)

225 #ñi‡
deföed
 
_XOPEN_SOURCE
 && (_XOPEN_SOURCE - 0) < 700

226 
	#_POSIX_C_SOURCE
 200112L

	)

228 
	#_POSIX_C_SOURCE
 200809L

	)

230 
	#__USE_POSIX_IMPLICITLY
 1

	)

233 #i‡
deföed
 
_POSIX_SOURCE
 || 
_POSIX_C_SOURCE
 >1 || deföed 
_XOPEN_SOURCE


234 
	#__USE_POSIX
 1

	)

237 #i‡
deföed
 
_POSIX_C_SOURCE
 && _POSIX_C_SOURCE >2 || deföed 
_XOPEN_SOURCE


238 
	#__USE_POSIX2
 1

	)

241 #i‡(
_POSIX_C_SOURCE
 - 0) >= 199309L

242 
	#__USE_POSIX199309
 1

	)

245 #i‡(
_POSIX_C_SOURCE
 - 0) >= 199506L

246 
	#__USE_POSIX199506
 1

	)

249 #i‡(
_POSIX_C_SOURCE
 - 0) >= 200112L

250 
	#__USE_XOPEN2K
 1

	)

251 #unde‡
__USE_ISOC95


252 
	#__USE_ISOC95
 1

	)

253 #unde‡
__USE_ISOC99


254 
	#__USE_ISOC99
 1

	)

257 #i‡(
_POSIX_C_SOURCE
 - 0) >= 200809L

258 
	#__USE_XOPEN2K8
 1

	)

259 #unde‡
_ATFILE_SOURCE


260 
	#_ATFILE_SOURCE
 1

	)

263 #ifdef 
_XOPEN_SOURCE


264 
	#__USE_XOPEN
 1

	)

265 #i‡(
_XOPEN_SOURCE
 - 0) >= 500

266 
	#__USE_XOPEN_EXTENDED
 1

	)

267 
	#__USE_UNIX98
 1

	)

268 #unde‡
_LARGEFILE_SOURCE


269 
	#_LARGEFILE_SOURCE
 1

	)

270 #i‡(
_XOPEN_SOURCE
 - 0) >= 600

271 #i‡(
_XOPEN_SOURCE
 - 0) >= 700

272 
	#__USE_XOPEN2K8
 1

	)

273 
	#__USE_XOPEN2K8XSI
 1

	)

275 
	#__USE_XOPEN2K
 1

	)

276 
	#__USE_XOPEN2KXSI
 1

	)

277 #unde‡
__USE_ISOC95


278 
	#__USE_ISOC95
 1

	)

279 #unde‡
__USE_ISOC99


280 
	#__USE_ISOC99
 1

	)

283 #ifde‡
_XOPEN_SOURCE_EXTENDED


284 
	#__USE_XOPEN_EXTENDED
 1

	)

289 #ifde‡
_LARGEFILE_SOURCE


290 
	#__USE_LARGEFILE
 1

	)

293 #ifde‡
_LARGEFILE64_SOURCE


294 
	#__USE_LARGEFILE64
 1

	)

297 #i‡
deföed
 
_FILE_OFFSET_BITS
 && _FILE_OFFSET_BITS == 64

298 
	#__USE_FILE_OFFSET64
 1

	)

301 #i‡
deföed
 
_BSD_SOURCE
 || deföed 
_SVID_SOURCE


302 
	#__USE_MISC
 1

	)

305 #ifdef 
_BSD_SOURCE


306 
	#__USE_BSD
 1

	)

309 #ifdef 
_SVID_SOURCE


310 
	#__USE_SVID
 1

	)

313 #ifdef 
_ATFILE_SOURCE


314 
	#__USE_ATFILE
 1

	)

317 #ifdef 
_GNU_SOURCE


318 
	#__USE_GNU
 1

	)

321 #i‡
deföed
 
_REENTRANT
 || deföed 
_THREAD_SAFE


322 
	#__USE_REENTRANT
 1

	)

325 #i‡
deföed
 
_FORTIFY_SOURCE
 && _FORTIFY_SOURCE > 0

326 #i‡!
deföed
 
__OPTIMIZE__
 || __OPTIMIZE__ <= 0

327 #w¨nög 
_FORTIFY_SOURCE
 
ªquúes
 
compûög
 
wôh
 
›timiz©i⁄
 (-
O
)

328 #ñi‡!
__GNUC_PREREQ
 (4, 1)

329 #w¨nög 
_FORTIFY_SOURCE
 
ªquúes
 
GCC
 4.1 
‹
 
œãr


330 #ñi‡
_FORTIFY_SOURCE
 > 1

331 
	#__USE_FORTIFY_LEVEL
 2

	)

333 
	#__USE_FORTIFY_LEVEL
 1

	)

336 #i‚de‡
__USE_FORTIFY_LEVEL


337 
	#__USE_FORTIFY_LEVEL
 0

	)

342 
	~<°dc-¥edef.h
>

350 #unde‡
__GNU_LIBRARY__


351 
	#__GNU_LIBRARY__
 6

	)

355 
	#__GLIBC__
 2

	)

356 
	#__GLIBC_MINOR__
 18

	)

358 
	#__GLIBC_PREREQ
(
maj
, 
mö
) \

359 ((
__GLIBC__
 << 16Ë+ 
__GLIBC_MINOR__
 >((
maj
Ë<< 16Ë+ (
mö
))

	)

362 #i‚de‡
__ASSEMBLER__


363 #i‚de‡
_SYS_CDEFS_H


364 
	~<sys/cdefs.h
>

369 #i‡
deföed
 
__USE_FILE_OFFSET64
 && !deföed 
__REDIRECT


370 
	#__USE_LARGEFILE
 1

	)

371 
	#__USE_LARGEFILE64
 1

	)

377 #i‡
__GNUC_PREREQ
 (2, 7Ë&& 
deföed
 
__OPTIMIZE__
 \

378 && !
deföed
 
	g__OPTIMIZE_SIZE__
 && !deföed 
	g__NO_INLINE__
 \

379 && 
deföed
 
	g__exã∫_ölöe


380 
	#__USE_EXTERN_INLINES
 1

	)

388 
	~<gnu/°ubs.h
>

	@/usr/include/xlocale.h

20 #i‚de‡
_XLOCALE_H


21 
	#_XLOCALE_H
 1

	)

27 
	s__loˇÀ_°ru˘


30 
__loˇÀ_d©a
 *
	m__loˇÀs
[13];

33 c⁄° *
	m__˘y≥_b
;

34 c⁄° *
	m__˘y≥_tﬁowî
;

35 c⁄° *
	m__˘y≥_touµî
;

38 c⁄° *
	m__«mes
[13];

39 } *
	t__loˇÀ_t
;

42 
__loˇÀ_t
 
	tloˇÀ_t
;

	@/usr/include/bits/types.h

23 #i‚def 
_BITS_TYPES_H


24 
	#_BITS_TYPES_H
 1

	)

26 
	~<„©uªs.h
>

27 
	~<bôs/w‹dsize.h
>

30 
	t__u_ch¨
;

31 
	t__u_sh‹t
;

32 
	t__u_öt
;

33 
	t__u_l⁄g
;

36 sig√d 
	t__öt8_t
;

37 
	t__uöt8_t
;

38 sig√d 
	t__öt16_t
;

39 
	t__uöt16_t
;

40 sig√d 
	t__öt32_t
;

41 
	t__uöt32_t
;

42 #i‡
__WORDSIZE
 == 64

43 sig√d 
	t__öt64_t
;

44 
	t__uöt64_t
;

46 
__exãnsi⁄__
 sig√d 
	t__öt64_t
;

47 
__exãnsi⁄__
 
	t__uöt64_t
;

51 #i‡
__WORDSIZE
 == 64

52 
	t__quad_t
;

53 
	t__u_quad_t
;

55 
__exãnsi⁄__
 
	t__quad_t
;

56 
__exãnsi⁄__
 
	t__u_quad_t
;

89 
	#__S16_TYPE
 

	)

90 
	#__U16_TYPE
 

	)

91 
	#__S32_TYPE
 

	)

92 
	#__U32_TYPE
 

	)

93 
	#__SLONGWORD_TYPE
 

	)

94 
	#__ULONGWORD_TYPE
 

	)

95 #i‡
__WORDSIZE
 == 32

96 
	#__SQUAD_TYPE
 
__quad_t


	)

97 
	#__UQUAD_TYPE
 
__u_quad_t


	)

98 
	#__SWORD_TYPE
 

	)

99 
	#__UWORD_TYPE
 

	)

100 
	#__SLONG32_TYPE
 

	)

101 
	#__ULONG32_TYPE
 

	)

102 
	#__S64_TYPE
 
__quad_t


	)

103 
	#__U64_TYPE
 
__u_quad_t


	)

106 
	#__STD_TYPE
 
__exãnsi⁄__
 

	)

107 #ñi‡
__WORDSIZE
 == 64

108 
	t__SQUAD_TYPE
 

	)

109 
	t__UQUAD_TYPE
 

	)

110 
	t__SWORD_TYPE
 

	)

111 
	t__UWORD_TYPE
 

	)

112 
	t__SLONG32_TYPE
 

	)

113 
	t__ULONG32_TYPE
 

	)

114 
	t__S64_TYPE
 

	)

115 
	t__U64_TYPE
 

	)

117 
	t__STD_TYPE
 

	)

121 
	~<bôs/ty≥sizes.h
>

124 
__STD_TYPE
 
	t__DEV_T_TYPE
 
	t__dev_t
;

125 
__STD_TYPE
 
__UID_T_TYPE
 
	g__uid_t
;

126 
__STD_TYPE
 
__GID_T_TYPE
 
	g__gid_t
;

127 
__STD_TYPE
 
__INO_T_TYPE
 
	g__öo_t
;

128 
__STD_TYPE
 
__INO64_T_TYPE
 
	g__öo64_t
;

129 
__STD_TYPE
 
__MODE_T_TYPE
 
	g__mode_t
;

130 
__STD_TYPE
 
__NLINK_T_TYPE
 
	g__∆ök_t
;

131 
__STD_TYPE
 
__OFF_T_TYPE
 
	g__off_t
;

132 
__STD_TYPE
 
__OFF64_T_TYPE
 
	g__off64_t
;

133 
__STD_TYPE
 
__PID_T_TYPE
 
	g__pid_t
;

134 
__STD_TYPE
 
__FSID_T_TYPE
 
	g__fsid_t
;

135 
__STD_TYPE
 
__CLOCK_T_TYPE
 
	g__˛ock_t
;

136 
__STD_TYPE
 
__RLIM_T_TYPE
 
	g__æim_t
;

137 
__STD_TYPE
 
__RLIM64_T_TYPE
 
	g__æim64_t
;

138 
__STD_TYPE
 
__ID_T_TYPE
 
	g__id_t
;

139 
__STD_TYPE
 
__TIME_T_TYPE
 
	g__time_t
;

140 
__STD_TYPE
 
__USECONDS_T_TYPE
 
	g__u£c⁄ds_t
;

141 
__STD_TYPE
 
__SUSECONDS_T_TYPE
 
	g__su£c⁄ds_t
;

143 
__STD_TYPE
 
__DADDR_T_TYPE
 
	g__daddr_t
;

144 
__STD_TYPE
 
__KEY_T_TYPE
 
	g__key_t
;

147 
__STD_TYPE
 
__CLOCKID_T_TYPE
 
	g__˛ockid_t
;

150 
__STD_TYPE
 
__TIMER_T_TYPE
 
	g__timî_t
;

153 
__STD_TYPE
 
__BLKSIZE_T_TYPE
 
	g__blksize_t
;

158 
__STD_TYPE
 
__BLKCNT_T_TYPE
 
	g__blk˙t_t
;

159 
__STD_TYPE
 
__BLKCNT64_T_TYPE
 
	g__blk˙t64_t
;

162 
__STD_TYPE
 
__FSBLKCNT_T_TYPE
 
	g__fsblk˙t_t
;

163 
__STD_TYPE
 
__FSBLKCNT64_T_TYPE
 
	g__fsblk˙t64_t
;

166 
__STD_TYPE
 
__FSFILCNT_T_TYPE
 
	g__fsfû˙t_t
;

167 
__STD_TYPE
 
__FSFILCNT64_T_TYPE
 
	g__fsfû˙t64_t
;

170 
__STD_TYPE
 
__FSWORD_T_TYPE
 
	g__fsw‹d_t
;

172 
__STD_TYPE
 
__SSIZE_T_TYPE
 
	g__ssize_t
;

175 
__STD_TYPE
 
__SYSCALL_SLONG_TYPE
 
	g__sysˇŒ_¶⁄g_t
;

177 
__STD_TYPE
 
__SYSCALL_ULONG_TYPE
 
	g__sysˇŒ_ul⁄g_t
;

181 
__off64_t
 
	t__loff_t
;

182 
__quad_t
 *
	t__qaddr_t
;

183 *
	t__ˇddr_t
;

186 
__STD_TYPE
 
__SWORD_TYPE
 
	g__öçå_t
;

189 
__STD_TYPE
 
__U32_TYPE
 
	g__sockÀn_t
;

192 #unde‡
__STD_TYPE


	@/usr/include/endian.h

18 #i‚def 
_ENDIAN_H


19 
	#_ENDIAN_H
 1

	)

21 
	~<„©uªs.h
>

31 
	#__LITTLE_ENDIAN
 1234

	)

32 
	#__BIG_ENDIAN
 4321

	)

33 
	#__PDP_ENDIAN
 3412

	)

36 
	~<bôs/ídün.h
>

40 #i‚de‡
__FLOAT_WORD_ORDER


41 
	#__FLOAT_WORD_ORDER
 
__BYTE_ORDER


	)

44 #ifdef 
__USE_BSD


45 
	#LITTLE_ENDIAN
 
__LITTLE_ENDIAN


	)

46 
	#BIG_ENDIAN
 
__BIG_ENDIAN


	)

47 
	#PDP_ENDIAN
 
__PDP_ENDIAN


	)

48 
	#BYTE_ORDER
 
__BYTE_ORDER


	)

51 #i‡
__BYTE_ORDER
 =
__LITTLE_ENDIAN


52 
	#__LONG_LONG_PAIR
(
HI
, 
LO
ËLO, 
	)
HI

53 #ñi‡
__BYTE_ORDER
 =
__BIG_ENDIAN


54 
	#__LONG_LONG_PAIR
(
HI
, 
LO
ËHI, 
	)
LO

58 #i‡
deföed
 
__USE_BSD
 && !deföed 
__ASSEMBLER__


60 
	~<bôs/byãsw≠.h
>

62 #i‡
__BYTE_ORDER
 =
__LITTLE_ENDIAN


63 
	#htobe16
(
x
Ë
	`__bsw≠_16
 (x)

	)

64 
	#htﬁe16
(
x
Ë(x)

	)

65 
	#be16toh
(
x
Ë
	`__bsw≠_16
 (x)

	)

66 
	#À16toh
(
x
Ë(x)

	)

68 
	#htobe32
(
x
Ë
	`__bsw≠_32
 (x)

	)

69 
	#htﬁe32
(
x
Ë(x)

	)

70 
	#be32toh
(
x
Ë
	`__bsw≠_32
 (x)

	)

71 
	#À32toh
(
x
Ë(x)

	)

73 
	#htobe64
(
x
Ë
	`__bsw≠_64
 (x)

	)

74 
	#htﬁe64
(
x
Ë(x)

	)

75 
	#be64toh
(
x
Ë
	`__bsw≠_64
 (x)

	)

76 
	#À64toh
(
x
Ë(x)

	)

79 
	#htobe16
(
x
Ë(x)

	)

80 
	#htﬁe16
(
x
Ë
	`__bsw≠_16
 (x)

	)

81 
	#be16toh
(
x
Ë(x)

	)

82 
	#À16toh
(
x
Ë
	`__bsw≠_16
 (x)

	)

84 
	#htobe32
(
x
Ë(x)

	)

85 
	#htﬁe32
(
x
Ë
	`__bsw≠_32
 (x)

	)

86 
	#be32toh
(
x
Ë(x)

	)

87 
	#À32toh
(
x
Ë
	`__bsw≠_32
 (x)

	)

89 
	#htobe64
(
x
Ë(x)

	)

90 
	#htﬁe64
(
x
Ë
	`__bsw≠_64
 (x)

	)

91 
	#be64toh
(
x
Ë(x)

	)

92 
	#À64toh
(
x
Ë
	`__bsw≠_64
 (x)

	)

	@/usr/include/gnu/stubs.h

6 #i‡!
deföed
 
__x86_64__


7 
	~<gnu/°ubs-32.h
>

9 #i‡
deföed
 
__x86_64__
 && deföed 
__LP64__


10 
	~<gnu/°ubs-64.h
>

12 #i‡
deföed
 
__x86_64__
 && deföed 
__ILP32__


13 
	~<gnu/°ubs-x32.h
>

	@/usr/include/stdc-predef.h

18 #i‚def 
_STDC_PREDEF_H


19 
	#_STDC_PREDEF_H
 1

	)

30 
	#__STDC_IEC_559__
 1

	)

31 
	#__STDC_IEC_559_COMPLEX__
 1

	)

35 
	#__STDC_ISO_10646__
 201103L

	)

38 
	#__STDC_NO_THREADS__
 1

	)

	@/usr/include/stdlib.h

22 #i‚def 
_STDLIB_H


24 
	~<„©uªs.h
>

27 
	#__√ed_size_t


	)

28 #i‚de‡
__√ed_mÆloc_™d_ˇŒoc


29 
	#__√ed_wch¨_t


	)

30 
	#__√ed_NULL


	)

32 
	~<°ddef.h
>

34 
	g__BEGIN_DECLS


36 #i‚de‡
__√ed_mÆloc_™d_ˇŒoc


37 
	#_STDLIB_H
 1

	)

39 #i‡(
deföed
 
__USE_XOPEN
 || deföed 
__USE_XOPEN2K8
Ë&& !deföed 
_SYS_WAIT_H


41 
	~<bôs/waôÊags.h
>

42 
	~<bôs/waô°©us.h
>

44 #ifde‡
__USE_BSD


49 #i‡
deföed
 
__GNUC__
 && !deföed 
__˝lu•lus


50 
	#__WAIT_INT
(
°©us
) \

51 (
	`__exãnsi⁄__
 (((uni⁄ { 
	`__ty≥of
(
°©us
Ë
__ö
; 
__i
; }) \

52 { .
__ö
 = (
°©us
Ë}).
__i
))

	)

54 
	#__WAIT_INT
(
°©us
Ë(*(*Ë&(°©us))

	)

62 #i‡!
deföed
 
__GNUC__
 || __GNUC__ < 2 || deföed 
__˝lu•lus


63 
	#__WAIT_STATUS
 *

	)

64 
	#__WAIT_STATUS_DEFN
 *

	)

69 
waô
 *
	m__u±r
;

70 *
	m__ùå
;

71 } 
	t__WAIT_STATUS
 
	t__©åibuã__
 ((
	t__å™•¨ít_uni⁄__
));

72 
	#__WAIT_STATUS_DEFN
 *

	)

77 
	#__WAIT_INT
(
°©us
Ë(°©us)

	)

78 
	#__WAIT_STATUS
 *

	)

79 
	#__WAIT_STATUS_DEFN
 *

	)

84 
	#WEXITSTATUS
(
°©us
Ë
	`__WEXITSTATUS
 (
	`__WAIT_INT
 (°©us))

	)

85 
	#WTERMSIG
(
°©us
Ë
	`__WTERMSIG
 (
	`__WAIT_INT
 (°©us))

	)

86 
	#WSTOPSIG
(
°©us
Ë
	`__WSTOPSIG
 (
	`__WAIT_INT
 (°©us))

	)

87 
	#WIFEXITED
(
°©us
Ë
	`__WIFEXITED
 (
	`__WAIT_INT
 (°©us))

	)

88 
	#WIFSIGNALED
(
°©us
Ë
	`__WIFSIGNALED
 (
	`__WAIT_INT
 (°©us))

	)

89 
	#WIFSTOPPED
(
°©us
Ë
	`__WIFSTOPPED
 (
	`__WAIT_INT
 (°©us))

	)

90 #ifde‡
__WIFCONTINUED


91 
	#WIFCONTINUED
(
°©us
Ë
	`__WIFCONTINUED
 (
	`__WAIT_INT
 (°©us))

	)

95 
__BEGIN_NAMESPACE_STD


99 
	mquŸ
;

100 
	mªm
;

101 } 
	tdiv_t
;

104 #i‚de‡
__ldiv_t_deföed


107 
	mquŸ
;

108 
	mªm
;

109 } 
	tldiv_t
;

110 
	#__ldiv_t_deföed
 1

	)

112 
	g__END_NAMESPACE_STD


114 #i‡
deföed
 
__USE_ISOC99
 && !deföed 
__Œdiv_t_deföed


115 
__BEGIN_NAMESPACE_C99


117 
__exãnsi⁄__
 struct

119 
	mquŸ
;

120 
	mªm
;

121 } 
	tŒdiv_t
;

122 
	#__Œdiv_t_deföed
 1

	)

123 
	g__END_NAMESPACE_C99


128 
	#RAND_MAX
 2147483647

	)

133 
	#EXIT_FAILURE
 1

	)

134 
	#EXIT_SUCCESS
 0

	)

138 
	#MB_CUR_MAX
 (
	`__˘y≥_gë_mb_cur_max
 ())

	)

139 
size_t
 
	$__˘y≥_gë_mb_cur_max
 (Ë
__THROW
 
__wur
;

142 
__BEGIN_NAMESPACE_STD


144 
	$©of
 (c⁄° *
__≈å
)

145 
__THROW
 
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1)Ë
__wur
;

147 
	$©oi
 (c⁄° *
__≈å
)

148 
__THROW
 
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1)Ë
__wur
;

150 
	$©ﬁ
 (c⁄° *
__≈å
)

151 
__THROW
 
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1)Ë
__wur
;

152 
__END_NAMESPACE_STD


154 #i‡
deföed
 
__USE_ISOC99
 || deföed 
__USE_MISC


155 
__BEGIN_NAMESPACE_C99


157 
__exãnsi⁄__
 
	$©ﬁl
 (c⁄° *
__≈å
)

158 
__THROW
 
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1)Ë
__wur
;

159 
__END_NAMESPACE_C99


162 
__BEGIN_NAMESPACE_STD


164 
	$°πod
 (c⁄° *
__ª°ri˘
 
__≈å
,

165 **
__ª°ri˘
 
__íd±r
)

166 
__THROW
 
	`__n⁄nuŒ
 ((1));

167 
__END_NAMESPACE_STD


169 #ifdef 
__USE_ISOC99


170 
__BEGIN_NAMESPACE_C99


172 
	$°πof
 (c⁄° *
__ª°ri˘
 
__≈å
,

173 **
__ª°ri˘
 
__íd±r
Ë
__THROW
 
	`__n⁄nuŒ
 ((1));

175 
	$°πﬁd
 (c⁄° *
__ª°ri˘
 
__≈å
,

176 **
__ª°ri˘
 
__íd±r
)

177 
__THROW
 
	`__n⁄nuŒ
 ((1));

178 
__END_NAMESPACE_C99


181 
__BEGIN_NAMESPACE_STD


183 
	$°πﬁ
 (c⁄° *
__ª°ri˘
 
__≈å
,

184 **
__ª°ri˘
 
__íd±r
, 
__ba£
)

185 
__THROW
 
	`__n⁄nuŒ
 ((1));

187 
	$°πoul
 (c⁄° *
__ª°ri˘
 
__≈å
,

188 **
__ª°ri˘
 
__íd±r
, 
__ba£
)

189 
__THROW
 
	`__n⁄nuŒ
 ((1));

190 
__END_NAMESPACE_STD


192 #ifde‡
__USE_BSD


194 
__exãnsi⁄__


195 
	$°πoq
 (c⁄° *
__ª°ri˘
 
__≈å
,

196 **
__ª°ri˘
 
__íd±r
, 
__ba£
)

197 
__THROW
 
	`__n⁄nuŒ
 ((1));

199 
__exãnsi⁄__


200 
	$°πouq
 (c⁄° *
__ª°ri˘
 
__≈å
,

201 **
__ª°ri˘
 
__íd±r
, 
__ba£
)

202 
__THROW
 
	`__n⁄nuŒ
 ((1));

205 #i‡
deföed
 
__USE_ISOC99
 || deföed 
__USE_MISC


206 
__BEGIN_NAMESPACE_C99


208 
__exãnsi⁄__


209 
	$°πﬁl
 (c⁄° *
__ª°ri˘
 
__≈å
,

210 **
__ª°ri˘
 
__íd±r
, 
__ba£
)

211 
__THROW
 
	`__n⁄nuŒ
 ((1));

213 
__exãnsi⁄__


214 
	$°πouŒ
 (c⁄° *
__ª°ri˘
 
__≈å
,

215 **
__ª°ri˘
 
__íd±r
, 
__ba£
)

216 
__THROW
 
	`__n⁄nuŒ
 ((1));

217 
__END_NAMESPACE_C99


221 #ifde‡
__USE_GNU


235 
	~<xloˇÀ.h
>

239 
	$°πﬁ_l
 (c⁄° *
__ª°ri˘
 
__≈å
,

240 **
__ª°ri˘
 
__íd±r
, 
__ba£
,

241 
__loˇÀ_t
 
__loc
Ë
__THROW
 
	`__n⁄nuŒ
 ((1, 4));

243 
	$°πoul_l
 (c⁄° *
__ª°ri˘
 
__≈å
,

244 **
__ª°ri˘
 
__íd±r
,

245 
__ba£
, 
__loˇÀ_t
 
__loc
)

246 
__THROW
 
	`__n⁄nuŒ
 ((1, 4));

248 
__exãnsi⁄__


249 
	$°πﬁl_l
 (c⁄° *
__ª°ri˘
 
__≈å
,

250 **
__ª°ri˘
 
__íd±r
, 
__ba£
,

251 
__loˇÀ_t
 
__loc
)

252 
__THROW
 
	`__n⁄nuŒ
 ((1, 4));

254 
__exãnsi⁄__


255 
	$°πouŒ_l
 (c⁄° *
__ª°ri˘
 
__≈å
,

256 **
__ª°ri˘
 
__íd±r
,

257 
__ba£
, 
__loˇÀ_t
 
__loc
)

258 
__THROW
 
	`__n⁄nuŒ
 ((1, 4));

260 
	$°πod_l
 (c⁄° *
__ª°ri˘
 
__≈å
,

261 **
__ª°ri˘
 
__íd±r
, 
__loˇÀ_t
 
__loc
)

262 
__THROW
 
	`__n⁄nuŒ
 ((1, 3));

264 
	$°πof_l
 (c⁄° *
__ª°ri˘
 
__≈å
,

265 **
__ª°ri˘
 
__íd±r
, 
__loˇÀ_t
 
__loc
)

266 
__THROW
 
	`__n⁄nuŒ
 ((1, 3));

268 
	$°πﬁd_l
 (c⁄° *
__ª°ri˘
 
__≈å
,

269 **
__ª°ri˘
 
__íd±r
,

270 
__loˇÀ_t
 
__loc
)

271 
__THROW
 
	`__n⁄nuŒ
 ((1, 3));

275 #ifde‡
__USE_EXTERN_INLINES


276 
__BEGIN_NAMESPACE_STD


277 
__exã∫_ölöe
 

278 
	`__NTH
 (
	$©oi
 (c⁄° *
__≈å
))

280  (Ë
	`°πﬁ
 (
__≈å
, (**Ë
NULL
, 10);

281 
	}
}

282 
__exã∫_ölöe
 

283 
__NTH
 (
	$©ﬁ
 (c⁄° *
__≈å
))

285  
	`°πﬁ
 (
__≈å
, (**Ë
NULL
, 10);

286 
	}
}

287 
	g__END_NAMESPACE_STD


289 #i‡
deföed
 
__USE_MISC
 || deföed 
__USE_ISOC99


290 
__BEGIN_NAMESPACE_C99


291 
__exãnsi⁄__
 
__exã∫_ölöe
 

292 
__NTH
 (
	$©ﬁl
 (c⁄° *
__≈å
))

294  
	`°πﬁl
 (
__≈å
, (**Ë
NULL
, 10);

295 
	}
}

296 
	g__END_NAMESPACE_C99


301 #i‡
deföed
 
__USE_SVID
 || deföed 
__USE_XOPEN_EXTENDED


305 *
	$l64a
 (
__n
Ë
__THROW
 
__wur
;

308 
	$a64l
 (c⁄° *
__s
)

309 
__THROW
 
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1)Ë
__wur
;

313 #i‡
deföed
 
__USE_SVID
 || deföed 
__USE_XOPEN_EXTENDED
 || deföed 
__USE_BSD


314 
	~<sys/ty≥s.h
>

321 
	$øndom
 (Ë
__THROW
;

324 
	$§™dom
 (
__£ed
Ë
__THROW
;

330 *
	$öô°©e
 (
__£ed
, *
__°©ebuf
,

331 
size_t
 
__°©ñí
Ë
__THROW
 
	`__n⁄nuŒ
 ((2));

335 *
	$£t°©e
 (*
__°©ebuf
Ë
__THROW
 
	`__n⁄nuŒ
 ((1));

338 #ifde‡
__USE_MISC


343 
	søndom_d©a


345 
öt32_t
 *
Âå
;

346 
öt32_t
 *
Ωå
;

347 
öt32_t
 *
°©e
;

348 
ønd_ty≥
;

349 
ønd_deg
;

350 
ønd_£p
;

351 
öt32_t
 *
íd_±r
;

354 
	$øndom_r
 (
øndom_d©a
 *
__ª°ri˘
 
__buf
,

355 
öt32_t
 *
__ª°ri˘
 
__ªsu…
Ë
__THROW
 
	`__n⁄nuŒ
 ((1, 2));

357 
	$§™dom_r
 (
__£ed
, 
øndom_d©a
 *
__buf
)

358 
__THROW
 
	`__n⁄nuŒ
 ((2));

360 
	$öô°©e_r
 (
__£ed
, *
__ª°ri˘
 
__°©ebuf
,

361 
size_t
 
__°©ñí
,

362 
øndom_d©a
 *
__ª°ri˘
 
__buf
)

363 
__THROW
 
	`__n⁄nuŒ
 ((2, 4));

365 
	$£t°©e_r
 (*
__ª°ri˘
 
__°©ebuf
,

366 
øndom_d©a
 *
__ª°ri˘
 
__buf
)

367 
__THROW
 
	`__n⁄nuŒ
 ((1, 2));

372 
__BEGIN_NAMESPACE_STD


374 
	$ønd
 (Ë
__THROW
;

376 
	$§™d
 (
__£ed
Ë
__THROW
;

377 
__END_NAMESPACE_STD


379 #ifde‡
__USE_POSIX


381 
	$ønd_r
 (*
__£ed
Ë
__THROW
;

385 #i‡
deföed
 
__USE_SVID
 || deföed 
__USE_XOPEN


389 
	$dønd48
 (Ë
__THROW
;

390 
	$î™d48
 (
__xsubi
[3]Ë
__THROW
 
	`__n⁄nuŒ
 ((1));

393 
	$Ã™d48
 (Ë
__THROW
;

394 
	$ƒ™d48
 (
__xsubi
[3])

395 
__THROW
 
	`__n⁄nuŒ
 ((1));

398 
	$mønd48
 (Ë
__THROW
;

399 
	$jønd48
 (
__xsubi
[3])

400 
__THROW
 
	`__n⁄nuŒ
 ((1));

403 
	$§™d48
 (
__£edvÆ
Ë
__THROW
;

404 *
	$£ed48
 (
__£ed16v
[3])

405 
__THROW
 
	`__n⁄nuŒ
 ((1));

406 
	$lc⁄g48
 (
__∑øm
[7]Ë
__THROW
 
	`__n⁄nuŒ
 ((1));

408 #ifde‡
__USE_MISC


412 
	sdønd48_d©a


414 
__x
[3];

415 
__ﬁd_x
[3];

416 
__c
;

417 
__öô
;

418 
__exãnsi⁄__
 
__a
;

423 
	$dønd48_r
 (
dønd48_d©a
 *
__ª°ri˘
 
__buf„r
,

424 *
__ª°ri˘
 
__ªsu…
Ë
__THROW
 
	`__n⁄nuŒ
 ((1, 2));

425 
	$î™d48_r
 (
__xsubi
[3],

426 
dønd48_d©a
 *
__ª°ri˘
 
__buf„r
,

427 *
__ª°ri˘
 
__ªsu…
Ë
__THROW
 
	`__n⁄nuŒ
 ((1, 2));

430 
	$Ã™d48_r
 (
dønd48_d©a
 *
__ª°ri˘
 
__buf„r
,

431 *
__ª°ri˘
 
__ªsu…
)

432 
__THROW
 
	`__n⁄nuŒ
 ((1, 2));

433 
	$ƒ™d48_r
 (
__xsubi
[3],

434 
dønd48_d©a
 *
__ª°ri˘
 
__buf„r
,

435 *
__ª°ri˘
 
__ªsu…
)

436 
__THROW
 
	`__n⁄nuŒ
 ((1, 2));

439 
	$mønd48_r
 (
dønd48_d©a
 *
__ª°ri˘
 
__buf„r
,

440 *
__ª°ri˘
 
__ªsu…
)

441 
__THROW
 
	`__n⁄nuŒ
 ((1, 2));

442 
	$jønd48_r
 (
__xsubi
[3],

443 
dønd48_d©a
 *
__ª°ri˘
 
__buf„r
,

444 *
__ª°ri˘
 
__ªsu…
)

445 
__THROW
 
	`__n⁄nuŒ
 ((1, 2));

448 
	$§™d48_r
 (
__£edvÆ
, 
dønd48_d©a
 *
__buf„r
)

449 
__THROW
 
	`__n⁄nuŒ
 ((2));

451 
	$£ed48_r
 (
__£ed16v
[3],

452 
dønd48_d©a
 *
__buf„r
Ë
__THROW
 
	`__n⁄nuŒ
 ((1, 2));

454 
	$lc⁄g48_r
 (
__∑øm
[7],

455 
dønd48_d©a
 *
__buf„r
)

456 
__THROW
 
	`__n⁄nuŒ
 ((1, 2));

462 #i‚de‡
__mÆloc_™d_ˇŒoc_deföed


463 
	#__mÆloc_™d_ˇŒoc_deföed


	)

464 
__BEGIN_NAMESPACE_STD


466 *
	$mÆloc
 (
size_t
 
__size
Ë
__THROW
 
__©åibuã_mÆloc__
 
__wur
;

468 *
	$ˇŒoc
 (
size_t
 
__nmemb
, size_à
__size
)

469 
__THROW
 
__©åibuã_mÆloc__
 
__wur
;

470 
__END_NAMESPACE_STD


473 #i‚de‡
__√ed_mÆloc_™d_ˇŒoc


474 
__BEGIN_NAMESPACE_STD


480 *
	$ªÆloc
 (*
__±r
, 
size_t
 
__size
)

481 
__THROW
 
__©åibuã_w¨n_unu£d_ªsu…__
;

483 
	$‰ì
 (*
__±r
Ë
__THROW
;

484 
__END_NAMESPACE_STD


486 #ifdef 
__USE_MISC


488 
	$c‰ì
 (*
__±r
Ë
__THROW
;

491 #i‡
deföed
 
__USE_GNU
 || deföed 
__USE_BSD
 || deföed 
__USE_MISC


492 
	~<Æloˇ.h
>

495 #i‡(
deföed
 
__USE_XOPEN_EXTENDED
 && !deföed 
__USE_XOPEN2K
) \

496 || 
deföed
 
__USE_BSD


498 *
	$vÆloc
 (
size_t
 
__size
Ë
__THROW
 
__©åibuã_mÆloc__
 
__wur
;

501 #ifde‡
__USE_XOPEN2K


503 
	$posix_memÆign
 (**
__mem±r
, 
size_t
 
__Æignmít
, size_à
__size
)

504 
__THROW
 
	`__n⁄nuŒ
 ((1)Ë
__wur
;

507 #ifde‡
__USE_ISOC11


509 *
	$Æig√d_Æloc
 (
size_t
 
__Æignmít
, size_à
__size
)

510 
__THROW
 
__©åibuã_mÆloc__
 
	`__©åibuã_Æloc_size__
 ((2)Ë
__wur
;

513 
__BEGIN_NAMESPACE_STD


515 
	$ab‹t
 (Ë
__THROW
 
	`__©åibuã__
 ((
__n‹ëu∫__
));

519 
	`©exô
 ((*
__func
Ë()Ë
__THROW
 
	`__n⁄nuŒ
 ((1));

521 #i‡
deföed
 
__USE_ISOC11
 || deföed 
__USE_ISOCXX11


523 #ifde‡
__˝lu•lus


524 "C++" 
	`©_quick_exô
 ((*
__func
) ())

525 
__THROW
 
	`__asm
 ("©_quick_exô"Ë
	`__n⁄nuŒ
 ((1));

527 
	`©_quick_exô
 ((*
__func
Ë()Ë
__THROW
 
	`__n⁄nuŒ
 ((1));

530 
__END_NAMESPACE_STD


532 #ifdef 
__USE_MISC


535 
	`⁄_exô
 ((*
__func
Ë(
__°©us
, *
__¨g
), *__arg)

536 
__THROW
 
	`__n⁄nuŒ
 ((1));

539 
__BEGIN_NAMESPACE_STD


543 
	$exô
 (
__°©us
Ë
__THROW
 
	`__©åibuã__
 ((
__n‹ëu∫__
));

545 #i‡
deföed
 
__USE_ISOC11
 || deföed 
__USE_ISOCXX11


549 
	$quick_exô
 (
__°©us
Ë
__THROW
 
	`__©åibuã__
 ((
__n‹ëu∫__
));

551 
__END_NAMESPACE_STD


553 #ifde‡
__USE_ISOC99


554 
__BEGIN_NAMESPACE_C99


557 
	$_Exô
 (
__°©us
Ë
__THROW
 
	`__©åibuã__
 ((
__n‹ëu∫__
));

558 
__END_NAMESPACE_C99


562 
__BEGIN_NAMESPACE_STD


564 *
	$gëív
 (c⁄° *
__«me
Ë
__THROW
 
	`__n⁄nuŒ
 ((1)Ë
__wur
;

565 
__END_NAMESPACE_STD


567 #ifde‡
__USE_GNU


570 *
	$£cuª_gëív
 (c⁄° *
__«me
)

571 
__THROW
 
	`__n⁄nuŒ
 ((1)Ë
__wur
;

574 #i‡
deföed
 
__USE_SVID
 || deföed 
__USE_XOPEN


578 
	$puãnv
 (*
__°rög
Ë
__THROW
 
	`__n⁄nuŒ
 ((1));

581 #i‡
deföed
 
__USE_BSD
 || deföed 
__USE_XOPEN2K


584 
	$£ãnv
 (c⁄° *
__«me
, c⁄° *
__vÆue
, 
__ª∂a˚
)

585 
__THROW
 
	`__n⁄nuŒ
 ((2));

588 
	$un£ãnv
 (c⁄° *
__«me
Ë
__THROW
 
	`__n⁄nuŒ
 ((1));

591 #ifdef 
__USE_MISC


595 
	$˛óªnv
 (Ë
__THROW
;

599 #i‡
deföed
 
__USE_MISC
 \

600 || (
deföed
 
__USE_XOPEN_EXTENDED
 && !deföed 
__USE_XOPEN2K8
)

606 *
	$mkãmp
 (*
__ãm∂©e
Ë
__THROW
 
	`__n⁄nuŒ
 ((1));

609 #i‡
deföed
 
__USE_MISC
 || deföed 
__USE_XOPEN_EXTENDED
 \

610 || 
deföed
 
__USE_XOPEN2K8


619 #i‚de‡
__USE_FILE_OFFSET64


620 
	$mk°emp
 (*
__ãm∂©e
Ë
	`__n⁄nuŒ
 ((1)Ë
__wur
;

622 #ifde‡
__REDIRECT


623 
	`__REDIRECT
 (
mk°emp
, (*
__ãm∂©e
), 
mk°emp64
)

624 
	`__n⁄nuŒ
 ((1)Ë
__wur
;

626 
	#mk°emp
 
mk°emp64


	)

629 #ifde‡
__USE_LARGEFILE64


630 
	$mk°emp64
 (*
__ãm∂©e
Ë
	`__n⁄nuŒ
 ((1)Ë
__wur
;

634 #ifde‡
__USE_MISC


641 #i‚de‡
__USE_FILE_OFFSET64


642 
	$mk°emps
 (*
__ãm∂©e
, 
__suffixÀn
Ë
	`__n⁄nuŒ
 ((1)Ë
__wur
;

644 #ifde‡
__REDIRECT


645 
	`__REDIRECT
 (
mk°emps
, (*
__ãm∂©e
, 
__suffixÀn
),

646 
mk°emps64
Ë
	`__n⁄nuŒ
 ((1)Ë
__wur
;

648 
	#mk°emps
 
mk°emps64


	)

651 #ifde‡
__USE_LARGEFILE64


652 
	$mk°emps64
 (*
__ãm∂©e
, 
__suffixÀn
)

653 
	`__n⁄nuŒ
 ((1)Ë
__wur
;

657 #i‡
deföed
 
__USE_BSD
 || deföed 
__USE_XOPEN2K8


663 *
	$mkdãmp
 (*
__ãm∂©e
Ë
__THROW
 
	`__n⁄nuŒ
 ((1)Ë
__wur
;

666 #ifde‡
__USE_GNU


673 #i‚de‡
__USE_FILE_OFFSET64


674 
	$mko°emp
 (*
__ãm∂©e
, 
__Êags
Ë
	`__n⁄nuŒ
 ((1)Ë
__wur
;

676 #ifde‡
__REDIRECT


677 
	`__REDIRECT
 (
mko°emp
, (*
__ãm∂©e
, 
__Êags
), 
mko°emp64
)

678 
	`__n⁄nuŒ
 ((1)Ë
__wur
;

680 
	#mko°emp
 
mko°emp64


	)

683 #ifde‡
__USE_LARGEFILE64


684 
	$mko°emp64
 (*
__ãm∂©e
, 
__Êags
Ë
	`__n⁄nuŒ
 ((1)Ë
__wur
;

693 #i‚de‡
__USE_FILE_OFFSET64


694 
	$mko°emps
 (*
__ãm∂©e
, 
__suffixÀn
, 
__Êags
)

695 
	`__n⁄nuŒ
 ((1)Ë
__wur
;

697 #ifde‡
__REDIRECT


698 
	`__REDIRECT
 (
mko°emps
, (*
__ãm∂©e
, 
__suffixÀn
,

699 
__Êags
), 
mko°emps64
)

700 
	`__n⁄nuŒ
 ((1)Ë
__wur
;

702 
	#mko°emps
 
mko°emps64


	)

705 #ifde‡
__USE_LARGEFILE64


706 
	$mko°emps64
 (*
__ãm∂©e
, 
__suffixÀn
, 
__Êags
)

707 
	`__n⁄nuŒ
 ((1)Ë
__wur
;

712 
__BEGIN_NAMESPACE_STD


717 
	$sy°em
 (c⁄° *
__comm™d
Ë
__wur
;

718 
__END_NAMESPACE_STD


721 #ifdef 
__USE_GNU


724 *
	$ˇn⁄iˇlize_fûe_«me
 (c⁄° *
__«me
)

725 
__THROW
 
	`__n⁄nuŒ
 ((1)Ë
__wur
;

728 #i‡
deföed
 
__USE_BSD
 || deföed 
__USE_XOPEN_EXTENDED


734 *
	$ªÆ∑th
 (c⁄° *
__ª°ri˘
 
__«me
,

735 *
__ª°ri˘
 
__ªsﬁved
Ë
__THROW
 
__wur
;

740 #i‚de‡
__COMPAR_FN_T


741 
	#__COMPAR_FN_T


	)

742 (*
	t__com∑r_‚_t
) (const *, const *);

744 #ifdef 
__USE_GNU


745 
__com∑r_‚_t
 
	tcom∑ris⁄_‚_t
;

748 #ifde‡
__USE_GNU


749 (*
	t__com∑r_d_‚_t
) (const *, const *, *);

752 
__BEGIN_NAMESPACE_STD


755 *
	$b£¨ch
 (c⁄° *
__key
, c⁄° *
__ba£
,

756 
size_t
 
__nmemb
, size_à
__size
, 
__com∑r_‚_t
 
__com∑r
)

757 
	`__n⁄nuŒ
 ((1, 2, 5)Ë
__wur
;

759 #ifde‡
__USE_EXTERN_INLINES


760 
	~<bôs/°dlib-b£¨ch.h
>

765 
	$qs‹t
 (*
__ba£
, 
size_t
 
__nmemb
, size_à
__size
,

766 
__com∑r_‚_t
 
__com∑r
Ë
	`__n⁄nuŒ
 ((1, 4));

767 #ifde‡
__USE_GNU


768 
	$qs‹t_r
 (*
__ba£
, 
size_t
 
__nmemb
, size_à
__size
,

769 
__com∑r_d_‚_t
 
__com∑r
, *
__¨g
)

770 
	`__n⁄nuŒ
 ((1, 4));

775 
	$abs
 (
__x
Ë
__THROW
 
	`__©åibuã__
 ((
__c⁄°__
)Ë
__wur
;

776 
	$œbs
 (
__x
Ë
__THROW
 
	`__©åibuã__
 ((
__c⁄°__
)Ë
__wur
;

777 
__END_NAMESPACE_STD


779 #ifde‡
__USE_ISOC99


780 
__exãnsi⁄__
 
	$Œabs
 (
__x
)

781 
__THROW
 
	`__©åibuã__
 ((
__c⁄°__
)Ë
__wur
;

785 
__BEGIN_NAMESPACE_STD


789 
div_t
 
	$div
 (
__numî
, 
__díom
)

790 
__THROW
 
	`__©åibuã__
 ((
__c⁄°__
)Ë
__wur
;

791 
ldiv_t
 
	$ldiv
 (
__numî
, 
__díom
)

792 
__THROW
 
	`__©åibuã__
 ((
__c⁄°__
)Ë
__wur
;

793 
__END_NAMESPACE_STD


795 #ifde‡
__USE_ISOC99


796 
__BEGIN_NAMESPACE_C99


797 
__exãnsi⁄__
 
Œdiv_t
 
	$Œdiv
 (
__numî
,

798 
__díom
)

799 
__THROW
 
	`__©åibuã__
 ((
__c⁄°__
)Ë
__wur
;

800 
__END_NAMESPACE_C99


804 #i‡(
deföed
 
__USE_XOPEN_EXTENDED
 && !deföed 
__USE_XOPEN2K8
) \

805 || 
deföed
 
__USE_SVID


812 *
	$ecvt
 (
__vÆue
, 
__ndigô
, *
__ª°ri˘
 
__de˝t
,

813 *
__ª°ri˘
 
__sign
Ë
__THROW
 
	`__n⁄nuŒ
 ((3, 4)Ë
__wur
;

818 *
	$fcvt
 (
__vÆue
, 
__ndigô
, *
__ª°ri˘
 
__de˝t
,

819 *
__ª°ri˘
 
__sign
Ë
__THROW
 
	`__n⁄nuŒ
 ((3, 4)Ë
__wur
;

824 *
	$gcvt
 (
__vÆue
, 
__ndigô
, *
__buf
)

825 
__THROW
 
	`__n⁄nuŒ
 ((3)Ë
__wur
;

828 #ifde‡
__USE_MISC


830 *
	$qecvt
 (
__vÆue
, 
__ndigô
,

831 *
__ª°ri˘
 
__de˝t
, *__ª°ri˘ 
__sign
)

832 
__THROW
 
	`__n⁄nuŒ
 ((3, 4)Ë
__wur
;

833 *
	$qfcvt
 (
__vÆue
, 
__ndigô
,

834 *
__ª°ri˘
 
__de˝t
, *__ª°ri˘ 
__sign
)

835 
__THROW
 
	`__n⁄nuŒ
 ((3, 4)Ë
__wur
;

836 *
	$qgcvt
 (
__vÆue
, 
__ndigô
, *
__buf
)

837 
__THROW
 
	`__n⁄nuŒ
 ((3)Ë
__wur
;

842 
	$ecvt_r
 (
__vÆue
, 
__ndigô
, *
__ª°ri˘
 
__de˝t
,

843 *
__ª°ri˘
 
__sign
, *__ª°ri˘ 
__buf
,

844 
size_t
 
__Àn
Ë
__THROW
 
	`__n⁄nuŒ
 ((3, 4, 5));

845 
	$fcvt_r
 (
__vÆue
, 
__ndigô
, *
__ª°ri˘
 
__de˝t
,

846 *
__ª°ri˘
 
__sign
, *__ª°ri˘ 
__buf
,

847 
size_t
 
__Àn
Ë
__THROW
 
	`__n⁄nuŒ
 ((3, 4, 5));

849 
	$qecvt_r
 (
__vÆue
, 
__ndigô
,

850 *
__ª°ri˘
 
__de˝t
, *__ª°ri˘ 
__sign
,

851 *
__ª°ri˘
 
__buf
, 
size_t
 
__Àn
)

852 
__THROW
 
	`__n⁄nuŒ
 ((3, 4, 5));

853 
	$qfcvt_r
 (
__vÆue
, 
__ndigô
,

854 *
__ª°ri˘
 
__de˝t
, *__ª°ri˘ 
__sign
,

855 *
__ª°ri˘
 
__buf
, 
size_t
 
__Àn
)

856 
__THROW
 
	`__n⁄nuŒ
 ((3, 4, 5));

860 
__BEGIN_NAMESPACE_STD


863 
	$mbÀn
 (c⁄° *
__s
, 
size_t
 
__n
Ë
__THROW
;

866 
	$mbtowc
 (
wch¨_t
 *
__ª°ri˘
 
__pwc
,

867 c⁄° *
__ª°ri˘
 
__s
, 
size_t
 
__n
Ë
__THROW
;

870 
	$w˘omb
 (*
__s
, 
wch¨_t
 
__wch¨
Ë
__THROW
;

874 
size_t
 
	$mb°owcs
 (
wch¨_t
 *
__ª°ri˘
 
__pwcs
,

875 c⁄° *
__ª°ri˘
 
__s
, 
size_t
 
__n
Ë
__THROW
;

877 
size_t
 
	$wc°ombs
 (*
__ª°ri˘
 
__s
,

878 c⁄° 
wch¨_t
 *
__ª°ri˘
 
__pwcs
, 
size_t
 
__n
)

879 
__THROW
;

880 
__END_NAMESPACE_STD


883 #ifde‡
__USE_SVID


888 
	$Ωm©ch
 (c⁄° *
__ª•⁄£
Ë
__THROW
 
	`__n⁄nuŒ
 ((1)Ë
__wur
;

892 #i‡
deföed
 
__USE_XOPEN_EXTENDED
 || deföed 
__USE_XOPEN2K8


899 
	$gësub›t
 (**
__ª°ri˘
 
__›ti⁄p
,

900 *c⁄° *
__ª°ri˘
 
__tokís
,

901 **
__ª°ri˘
 
__vÆuï
)

902 
__THROW
 
	`__n⁄nuŒ
 ((1, 2, 3)Ë
__wur
;

906 #ifde‡
__USE_XOPEN


908 
	$£tkey
 (c⁄° *
__key
Ë
__THROW
 
	`__n⁄nuŒ
 ((1));

914 #ifde‡
__USE_XOPEN2KXSI


916 
	$posix_›í±
 (
__oÊag
Ë
__wur
;

919 #ifde‡
__USE_XOPEN


924 
	$gø¡±
 (
__fd
Ë
__THROW
;

928 
	$u∆ock±
 (
__fd
Ë
__THROW
;

933 *
	$±¢ame
 (
__fd
Ë
__THROW
 
__wur
;

936 #ifde‡
__USE_GNU


940 
	$±¢ame_r
 (
__fd
, *
__buf
, 
size_t
 
__buÊí
)

941 
__THROW
 
	`__n⁄nuŒ
 ((2));

944 
	`gë±
 ();

947 #ifde‡
__USE_BSD


951 
	$gëlﬂdavg
 (
__lﬂdavg
[], 
__√Àm
)

952 
__THROW
 
	`__n⁄nuŒ
 ((1));

955 
	~<bôs/°dlib-Êﬂt.h
>

958 #i‡
__USE_FORTIFY_LEVEL
 > 0 && 
deföed
 
__f‹tify_fun˘i⁄


959 
	~<bôs/°dlib.h
>

961 #ifde‡
__LDBL_COMPAT


962 
	~<bôs/°dlib-ldbl.h
>

966 #unde‡
__√ed_mÆloc_™d_ˇŒoc


968 
__END_DECLS


	@/usr/include/sys/cdefs.h

18 #i‚def 
_SYS_CDEFS_H


19 
	#_SYS_CDEFS_H
 1

	)

22 #i‚de‡
_FEATURES_H


23 
	~<„©uªs.h
>

29 #i‡
deföed
 
__GNUC__
 && !deföed 
__STDC__


34 #unde‡
__P


35 #unde‡
__PMT


37 #ifde‡
__GNUC__


41 #i‡
__GNUC_PREREQ
 (4, 6Ë&& !
deföed
 
_LIBC


42 
	#__LEAF
 , 
__Àaf__


	)

43 
	#__LEAF_ATTR
 
	`__©åibuã__
 ((
__Àaf__
))

	)

45 
	#__LEAF


	)

46 
	#__LEAF_ATTR


	)

54 #i‡!
deföed
 
__˝lu•lus
 && 
__GNUC_PREREQ
 (3, 3)

55 
	#__THROW
 
	`__©åibuã__
 ((
__nŸhrow__
 
__LEAF
))

	)

56 
	#__THROWNL
 
	`__©åibuã__
 ((
__nŸhrow__
))

	)

57 
	#__NTH
(
f˘
Ë
	`__©åibuã__
 ((
__nŸhrow__
 
__LEAF
)Ë
	)
fct

59 #i‡
deföed
 
__˝lu•lus
 && 
__GNUC_PREREQ
 (2,8)

60 
	#__THROW
 
	`throw
 ()

	)

61 
	#__THROWNL
 
	`throw
 ()

	)

62 
	#__NTH
(
f˘
Ë
__LEAF_ATTR
 f˘ 
	`throw
 ()

	)

64 
	#__THROW


	)

65 
	#__THROWNL


	)

66 
	#__NTH
(
f˘
Ë
	)
fct

72 
	#__ölöe


	)

74 
	#__THROW


	)

75 
	#__THROWNL


	)

76 
	#__NTH
(
f˘
Ë
	)
fct

82 
	#__P
(
¨gs
Ë
	)
args

83 
	#__PMT
(
¨gs
Ë
	)
args

88 
	#__CONCAT
(
x
,
y
Ëx ## 
	)
y

89 
	#__STRING
(
x
Ë#x

	)

92 
	#__±r_t
 *

	)

93 
	#__l⁄g_doubÀ_t
 

	)

97 #ifdef 
__˝lu•lus


98 
	#__BEGIN_DECLS
 "C" {

	)

99 
	#__END_DECLS
 }

	)

101 
	#__BEGIN_DECLS


	)

102 
	#__END_DECLS


	)

111 #i‡
deföed
 
__˝lu•lus
 && deföed 
_GLIBCPP_USE_NAMESPACES


112 
	#__BEGIN_NAMESPACE_STD
 
«me•a˚
 
°d
 {

	)

113 
	#__END_NAMESPACE_STD
 }

	)

114 
	#__USING_NAMESPACE_STD
(
«me
Ë
usög
 
°d
::«me;

	)

115 
	#__BEGIN_NAMESPACE_C99
 
«me•a˚
 
__c99
 {

	)

116 
	#__END_NAMESPACE_C99
 }

	)

117 
	#__USING_NAMESPACE_C99
(
«me
Ë
usög
 
__c99
::«me;

	)

122 
	#__BEGIN_NAMESPACE_STD


	)

123 
	#__END_NAMESPACE_STD


	)

124 
	#__USING_NAMESPACE_STD
(
«me
)

	)

125 
	#__BEGIN_NAMESPACE_C99


	)

126 
	#__END_NAMESPACE_C99


	)

127 
	#__USING_NAMESPACE_C99
(
«me
)

	)

132 
	#__bos
(
±r
Ë
	`__buûtö_obje˘_size
 (±r, 
__USE_FORTIFY_LEVEL
 > 1)

	)

133 
	#__bos0
(
±r
Ë
	`__buûtö_obje˘_size
 (±r, 0)

	)

134 
	#__f‹tify_fun˘i⁄
 
__exã∫_Æways_ölöe
 
__©åibuã_¨tificül__


	)

136 #i‡
__GNUC_PREREQ
 (4,3)

137 
	#__w¨nde˛
(
«me
, 
msg
) \

138 
	`«me
 (Ë
	`__©åibuã__
((
	`__w¨nög__
 (
msg
)))

	)

139 
	#__w¨«âr
(
msg
Ë
	`__©åibuã__
((
	`__w¨nög__
 (msg)))

	)

140 
	#__îr‹de˛
(
«me
, 
msg
) \

141 
	`«me
 (Ë
	`__©åibuã__
((
	`__îr‹__
 (
msg
)))

	)

143 
	#__w¨nde˛
(
«me
, 
msg
Ë
	`«me
 ()

	)

144 
	#__w¨«âr
(
msg
)

	)

145 
	#__îr‹de˛
(
«me
, 
msg
Ë
	`«me
 ()

	)

149 #i‡
__GNUC_PREREQ
 (2,97)

151 
	#__Êex¨r
 []

	)

153 #ifde‡
__GNUC__


154 
	#__Êex¨r
 [0]

	)

156 #i‡
deföed
 
__STDC_VERSION__
 && __STDC_VERSION__ >= 199901L

157 
	#__Êex¨r
 []

	)

160 
	#__Êex¨r
 [1]

	)

176 #i‡
deföed
 
__GNUC__
 && __GNUC__ >= 2

178 
	#__REDIRECT
(
«me
, 
¥Ÿo
, 
Æüs
Ë«mê¥Ÿÿ
	`__asm__
 (
	`__ASMNAME
 (#Æüs))

	)

179 #ifde‡
__˝lu•lus


180 
	#__REDIRECT_NTH
(
«me
, 
¥Ÿo
, 
Æüs
) \

181 
«me
 
¥Ÿo
 
__THROW
 
	`__asm__
 (
	`__ASMNAME
 (#Æüs))

	)

182 
	#__REDIRECT_NTHNL
(
«me
, 
¥Ÿo
, 
Æüs
) \

183 
«me
 
¥Ÿo
 
__THROWNL
 
	`__asm__
 (
	`__ASMNAME
 (#Æüs))

	)

185 
	#__REDIRECT_NTH
(
«me
, 
¥Ÿo
, 
Æüs
) \

186 
«me
 
¥Ÿo
 
	`__asm__
 (
	`__ASMNAME
 (#Æüs)Ë
__THROW


	)

187 
	#__REDIRECT_NTHNL
(
«me
, 
¥Ÿo
, 
Æüs
) \

188 
«me
 
¥Ÿo
 
	`__asm__
 (
	`__ASMNAME
 (#Æüs)Ë
__THROWNL


	)

190 
	#__ASMNAME
(
˙ame
Ë
	`__ASMNAME2
 (
__USER_LABEL_PREFIX__
, c«me)

	)

191 
	#__ASMNAME2
(
¥efix
, 
˙ame
Ë
	`__STRING
 (¥efixË
	)
cname

204 #i‡!
deföed
 
__GNUC__
 || __GNUC__ < 2

205 
	#__©åibuã__
(
xyz
Ë

	)

211 #i‡
__GNUC_PREREQ
 (2,96)

212 
	#__©åibuã_mÆloc__
 
	`__©åibuã__
 ((
__mÆloc__
))

	)

214 
	#__©åibuã_mÆloc__


	)

219 #i‡
__GNUC_PREREQ
 (4, 3)

220 
	#__©åibuã_Æloc_size__
(
∑øms
) \

221 
	`__©åibuã__
 ((
__Æloc_size__
 
∑øms
))

	)

223 
	#__©åibuã_Æloc_size__
(
∑øms
Ë

	)

229 #i‡
__GNUC_PREREQ
 (2,96)

230 
	#__©åibuã_puª__
 
	`__©åibuã__
 ((
__puª__
))

	)

232 
	#__©åibuã_puª__


	)

236 #i‡
__GNUC_PREREQ
 (2,5)

237 
	#__©åibuã_c⁄°__
 
	`__©åibuã__
 ((
__c⁄°__
))

	)

239 
	#__©åibuã_c⁄°__


	)

245 #i‡
__GNUC_PREREQ
 (3,1)

246 
	#__©åibuã_u£d__
 
	`__©åibuã__
 ((
__u£d__
))

	)

247 
	#__©åibuã_noölöe__
 
	`__©åibuã__
 ((
__noölöe__
))

	)

249 
	#__©åibuã_u£d__
 
	`__©åibuã__
 ((
__unu£d__
))

	)

250 
	#__©åibuã_noölöe__


	)

254 #i‡
__GNUC_PREREQ
 (3,2)

255 
	#__©åibuã_dïªˇãd__
 
	`__©åibuã__
 ((
__dïªˇãd__
))

	)

257 
	#__©åibuã_dïªˇãd__


	)

266 #i‡
__GNUC_PREREQ
 (2,8)

267 
	#__©åibuã_f‹m©_¨g__
(
x
Ë
	`__©åibuã__
 ((
	`__f‹m©_¨g__
 (x)))

	)

269 
	#__©åibuã_f‹m©_¨g__
(
x
Ë

	)

276 #i‡
__GNUC_PREREQ
 (2,97)

277 
	#__©åibuã_f‹m©_°rfm⁄__
(
a
,
b
) \

278 
	`__©åibuã__
 ((
	`__f‹m©__
 (
__°rfm⁄__
, 
a
, 
b
)))

	)

280 
	#__©åibuã_f‹m©_°rfm⁄__
(
a
,
b
Ë

	)

285 #i‡
__GNUC_PREREQ
 (3,3)

286 
	#__n⁄nuŒ
(
∑øms
Ë
	`__©åibuã__
 ((
__n⁄nuŒ__
Ö¨ams))

	)

288 
	#__n⁄nuŒ
(
∑øms
)

	)

293 #i‡
__GNUC_PREREQ
 (3,4)

294 
	#__©åibuã_w¨n_unu£d_ªsu…__
 \

295 
	`__©åibuã__
 ((
__w¨n_unu£d_ªsu…__
))

	)

296 #i‡
__USE_FORTIFY_LEVEL
 > 0

297 
	#__wur
 
__©åibuã_w¨n_unu£d_ªsu…__


	)

300 
	#__©åibuã_w¨n_unu£d_ªsu…__


	)

302 #i‚de‡
__wur


303 
	#__wur


	)

307 #i‡
__GNUC_PREREQ
 (3,2)

308 
	#__Æways_ölöe
 
__ölöe
 
	`__©åibuã__
 ((
__Æways_ölöe__
))

	)

310 
	#__Æways_ölöe
 
__ölöe


	)

315 #i‡
__GNUC_PREREQ
 (4,3)

316 
	#__©åibuã_¨tificül__
 
	`__©åibuã__
 ((
__¨tificül__
))

	)

318 
	#__©åibuã_¨tificül__


	)

321 #ifde‡
__GNUC__


326 #i‡
deföed
 
__GNUC_STDC_INLINE__
 || deföed 
__GNUC_GNU_INLINE__


327 
	#__exã∫_ölöe
 
__ölöe
 
	`__©åibuã__
 ((
__gnu_ölöe__
))

	)

328 
	#__exã∫_Æways_ölöe
 \

329 
__Æways_ölöe
 
	`__©åibuã__
 ((
__gnu_ölöe__
))

	)

331 
	#__exã∫_ölöe
 
__ölöe


	)

332 
	#__exã∫_Æways_ölöe
 
__Æways_ölöe


	)

335 
	#__exã∫_ölöe


	)

336 
	#__exã∫_Æways_ölöe


	)

341 #i‡
__GNUC_PREREQ
 (4,3)

342 
	#__va_¨g_∑ck
(Ë
	`__buûtö_va_¨g_∑ck
 ()

	)

343 
	#__va_¨g_∑ck_Àn
(Ë
	`__buûtö_va_¨g_∑ck_Àn
 ()

	)

350 #i‡!
__GNUC_PREREQ
 (2,8)

351 
	#__exãnsi⁄__


	)

355 #i‡!
__GNUC_PREREQ
 (2,92)

356 
	#__ª°ri˘


	)

362 #i‡
__GNUC_PREREQ
 (3,1Ë&& !
deföed
 
__GNUG__


363 
	#__ª°ri˘_¨r
 
__ª°ri˘


	)

365 #ifde‡
__GNUC__


366 
	#__ª°ri˘_¨r


	)

368 #i‡
deföed
 
__STDC_VERSION__
 && __STDC_VERSION__ >= 199901L

369 
	#__ª°ri˘_¨r
 
ª°ri˘


	)

372 
	#__ª°ri˘_¨r


	)

377 #i‡
__GNUC__
 >= 3

378 
	#__glibc_u∆ikñy
(
c⁄d
Ë
	`__buûtö_ex≥˘
 ((c⁄d), 0)

	)

379 
	#__glibc_likñy
(
c⁄d
Ë
	`__buûtö_ex≥˘
 ((c⁄d), 1)

	)

381 
	#__glibc_u∆ikñy
(
c⁄d
Ë(c⁄d)

	)

382 
	#__glibc_likñy
(
c⁄d
Ë(c⁄d)

	)

385 
	~<bôs/w‹dsize.h
>

387 #i‡
deföed
 
__LONG_DOUBLE_MATH_OPTIONAL
 && deföed 
__NO_LONG_DOUBLE_MATH


388 
	#__LDBL_COMPAT
 1

	)

389 #ifde‡
__REDIRECT


390 
	#__LDBL_REDIR1
(
«me
, 
¥Ÿo
, 
Æüs
Ë
	`__REDIRECT
 («me,ÖrŸo,álüs)

	)

391 
	#__LDBL_REDIR
(
«me
, 
¥Ÿo
) \

392 
	`__LDBL_REDIR1
 (
«me
, 
¥Ÿo
, 
__∆dbl_
##«me)

	)

393 
	#__LDBL_REDIR1_NTH
(
«me
, 
¥Ÿo
, 
Æüs
Ë
	`__REDIRECT_NTH
 («me,ÖrŸo,álüs)

	)

394 
	#__LDBL_REDIR_NTH
(
«me
, 
¥Ÿo
) \

395 
	`__LDBL_REDIR1_NTH
 (
«me
, 
¥Ÿo
, 
__∆dbl_
##«me)

	)

396 
	#__LDBL_REDIR1_DECL
(
«me
, 
Æüs
) \

397 
	`__ty≥of
 (
«me
Ë«mê
	`__asm
 (
	`__ASMNAME
 (#Æüs));

	)

398 
	#__LDBL_REDIR_DECL
(
«me
) \

399 
	`__ty≥of
 (
«me
Ë«mê
	`__asm
 (
	`__ASMNAME
 ("__∆dbl_" #«me));

	)

400 
	#__REDIRECT_LDBL
(
«me
, 
¥Ÿo
, 
Æüs
) \

401 
	`__LDBL_REDIR1
 (
«me
, 
¥Ÿo
, 
__∆dbl_
##
Æüs
)

	)

402 
	#__REDIRECT_NTH_LDBL
(
«me
, 
¥Ÿo
, 
Æüs
) \

403 
	`__LDBL_REDIR1_NTH
 (
«me
, 
¥Ÿo
, 
__∆dbl_
##
Æüs
)

	)

406 #i‡!
deföed
 
__LDBL_COMPAT
 || !deföed 
__REDIRECT


407 
	#__LDBL_REDIR1
(
«me
, 
¥Ÿo
, 
Æüs
Ë«mê
	)
proto

408 
	#__LDBL_REDIR
(
«me
, 
¥Ÿo
Ë«mê
	)
proto

409 
	#__LDBL_REDIR1_NTH
(
«me
, 
¥Ÿo
, 
Æüs
Ë«mê¥Ÿÿ
__THROW


	)

410 
	#__LDBL_REDIR_NTH
(
«me
, 
¥Ÿo
Ë«mê¥Ÿÿ
__THROW


	)

411 
	#__LDBL_REDIR_DECL
(
«me
)

	)

412 #ifde‡
__REDIRECT


413 
	#__REDIRECT_LDBL
(
«me
, 
¥Ÿo
, 
Æüs
Ë
	`__REDIRECT
 («me,ÖrŸo,álüs)

	)

414 
	#__REDIRECT_NTH_LDBL
(
«me
, 
¥Ÿo
, 
Æüs
) \

415 
	`__REDIRECT_NTH
 (
«me
, 
¥Ÿo
, 
Æüs
)

	)

	@/usr/include/alloca.h

18 #i‚def 
_ALLOCA_H


19 
	#_ALLOCA_H
 1

	)

21 
	~<„©uªs.h
>

23 
	#__√ed_size_t


	)

24 
	~<°ddef.h
>

26 
	g__BEGIN_DECLS


29 #unde‡
Æloˇ


32 *
	$Æloˇ
 (
size_t
 
__size
Ë
__THROW
;

34 #ifdef 
__GNUC__


35 
	#Æloˇ
(
size
Ë
	`__buûtö_Æloˇ
 (size)

	)

38 
__END_DECLS


	@/usr/include/bits/byteswap.h

19 #i‡!
deföed
 
_BYTESWAP_H
 && !deföed 
_NETINET_IN_H
 && !deföed 
_ENDIAN_H


23 #i‚de‡
_BITS_BYTESWAP_H


24 
	#_BITS_BYTESWAP_H
 1

	)

26 
	~<„©uªs.h
>

27 
	~<bôs/ty≥s.h
>

28 
	~<bôs/w‹dsize.h
>

31 
	#__bsw≠_c⁄°™t_16
(
x
) \

32 ((Ë((((
x
Ë>> 8Ë& 0xffË| (((xË& 0xffË<< 8)))

	)

35 
	~<bôs/byãsw≠-16.h
>

38 
	#__bsw≠_c⁄°™t_32
(
x
) \

39 ((((
x
) & 0xff000000) >> 24) | (((x) & 0x00ff0000) >> 8) | \

40 (((
x
Ë& 0x0000ff00Ë<< 8Ë| (((xË& 0x000000ffË<< 24))

	)

42 #ifde‡
__GNUC__


43 #i‡
__GNUC_PREREQ
 (4, 3)

44 
__ölöe
 

45 
	$__bsw≠_32
 (
__bsx
)

47  
	`__buûtö_bsw≠32
 (
__bsx
);

48 
	}
}

49 #ñi‡
__GNUC__
 >= 2

50 #i‡
__WORDSIZE
 =64 || (
deföed
 
__i486__
 || deföed 
__≥¡ium__
 \

51 || 
deföed
 
	g__≥¡ium¥o__
 || deföed 
	g__≥¡ium4__
 \

52 || 
deföed
 
	g__k8__
 || deföed 
	g__©hl⁄__
 \

53 || 
deföed
 
	g__k6__
 || deföed 
	g__noc⁄a__
 \

54 || 
deföed
 
	g__c‹e2__
 || deföed 
	g__geode__
 \

55 || 
deföed
 
	g__amdÁm10__
)

58 
	#__bsw≠_32
(
x
) \

59 (
__exãnsi⁄__
 \

60 ({ 
__v
, 
__x
 = (
x
); \

61 i‡(
	`__buûtö_c⁄°™t_p
 (
__x
)) \

62 
__v
 = 
	`__bsw≠_c⁄°™t_32
 (
__x
); \

64 
	`__asm__
 ("bsw≠ %0" : "Ù" (
__v
Ë: "0" (
__x
)); \

65 
__v
; }))

	)

67 
	#__bsw≠_32
(
x
) \

68 (
__exãnsi⁄__
 \

69 ({ 
__v
, 
__x
 = (
x
); \

70 i‡(
	`__buûtö_c⁄°™t_p
 (
__x
)) \

71 
__v
 = 
	`__bsw≠_c⁄°™t_32
 (
__x
); \

73 
	`__asm__
 ("rorw $8, %w0;" \

76 : "Ù" (
__v
) \

77 : "0" (
__x
) \

79 
__v
; }))

	)

82 
	#__bsw≠_32
(
x
) \

83 (
__exãnsi⁄__
 \

84 ({ 
__x
 = (
x
); 
	`__bsw≠_c⁄°™t_32
 (__x); }))

	)

87 
__ölöe
 

88 
	$__bsw≠_32
 (
__bsx
)

90  
	`__bsw≠_c⁄°™t_32
 (
__bsx
);

91 
	}
}

95 #i‡
__GNUC_PREREQ
 (2, 0)

97 
	#__bsw≠_c⁄°™t_64
(
x
) \

98 (
	`__exãnsi⁄__
 ((((
x
) & 0xff00000000000000ull) >> 56) \

99 | (((
x
) & 0x00ff000000000000ull) >> 40) \

100 | (((
x
) & 0x0000ff0000000000ull) >> 24) \

101 | (((
x
) & 0x000000ff00000000ull) >> 8) \

102 | (((
x
) & 0x00000000ff000000ull) << 8) \

103 | (((
x
) & 0x0000000000ff0000ull) << 24) \

104 | (((
x
) & 0x000000000000ff00ull) << 40) \

105 | (((
x
Ë& 0x00000000000000ffuŒË<< 56)))

	)

107 #i‡
__GNUC_PREREQ
 (4, 3)

108 
__ölöe
 
__uöt64_t


109 
	$__bsw≠_64
 (
__uöt64_t
 
__bsx
)

111  
	`__buûtö_bsw≠64
 (
__bsx
);

112 
	}
}

113 #ñi‡
__WORDSIZE
 == 64

114 
	#__bsw≠_64
(
x
) \

115 (
__exãnsi⁄__
 \

116 ({ 
__uöt64_t
 
__v
, 
__x
 = (
x
); \

117 i‡(
	`__buûtö_c⁄°™t_p
 (
__x
)) \

118 
__v
 = 
	`__bsw≠_c⁄°™t_64
 (
__x
); \

120 
	`__asm__
 ("bsw≠ %q0" : "Ù" (
__v
Ë: "0" (
__x
)); \

121 
__v
; }))

	)

123 
	#__bsw≠_64
(
x
) \

124 (
__exãnsi⁄__
 \

125 ({ uni⁄ { 
__exãnsi⁄__
 
__uöt64_t
 
__Œ
; \

126 
__l
[2]; } 
__w
, 
__r
; \

127 i‡(
	`__buûtö_c⁄°™t_p
 (
x
)) \

128 
__r
.
__Œ
 = 
	`__bsw≠_c⁄°™t_64
 (
x
); \

131 
__w
.
__Œ
 = (
x
); \

132 
__r
.
__l
[0] = 
	`__bsw≠_32
 (
__w
.__l[1]); \

133 
__r
.
__l
[1] = 
	`__bsw≠_32
 (
__w
.__l[0]); \

135 
__r
.
__Œ
; }))

	)

138 
	#__bsw≠_c⁄°™t_64
(
x
) \

139 ((((
x
) & 0xff00000000000000ull) >> 56) \

140 | (((
x
) & 0x00ff000000000000ull) >> 40) \

141 | (((
x
) & 0x0000ff0000000000ull) >> 24) \

142 | (((
x
) & 0x000000ff00000000ull) >> 8) \

143 | (((
x
) & 0x00000000ff000000ull) << 8) \

144 | (((
x
) & 0x0000000000ff0000ull) << 24) \

145 | (((
x
) & 0x000000000000ff00ull) << 40) \

146 | (((
x
Ë& 0x00000000000000ffuŒË<< 56))

	)

148 
__ölöe
 
__uöt64_t


149 
	$__bsw≠_64
 (
__uöt64_t
 
__bsx
)

151  
	`__bsw≠_c⁄°™t_64
 (
__bsx
);

152 
	}
}

	@/usr/include/bits/endian.h

3 #i‚de‡
_ENDIAN_H


7 
	#__BYTE_ORDER
 
__LITTLE_ENDIAN


	)

	@/usr/include/bits/stdlib-bsearch.h

19 
__exã∫_ölöe
 *

20 
	$b£¨ch
 (c⁄° *
__key
, c⁄° *
__ba£
, 
size_t
 
__nmemb
, size_à
__size
,

21 
__com∑r_‚_t
 
__com∑r
)

23 
size_t
 
__l
, 
__u
, 
__idx
;

24 c⁄° *
__p
;

25 
__com∑ris⁄
;

27 
__l
 = 0;

28 
__u
 = 
__nmemb
;

29 
__l
 < 
__u
)

31 
__idx
 = (
__l
 + 
__u
) / 2;

32 
__p
 = (*Ë(((c⁄° *Ë
__ba£
Ë+ (
__idx
 * 
__size
));

33 
__com∑ris⁄
 = (*
__com∑r
Ë(
__key
, 
__p
);

34 i‡(
__com∑ris⁄
 < 0)

35 
__u
 = 
__idx
;

36 i‡(
__com∑ris⁄
 > 0)

37 
__l
 = 
__idx
 + 1;

39  (*Ë
__p
;

42  
NULL
;

43 
	}
}

	@/usr/include/bits/stdlib-float.h

19 #i‚de‡
_STDLIB_H


23 #ifde‡
__USE_EXTERN_INLINES


24 
__BEGIN_NAMESPACE_STD


25 
__exã∫_ölöe
 

26 
__NTH
 (
	$©of
 (c⁄° *
__≈å
))

28  
	`°πod
 (
__≈å
, (**Ë
NULL
);

29 
	}
}

30 
	g__END_NAMESPACE_STD


	@/usr/include/bits/stdlib-ldbl.h

19 #i‚de‡
_STDLIB_H


23 #ifdef 
__USE_ISOC99


24 
__BEGIN_NAMESPACE_C99


25 
	$__LDBL_REDIR1_DECL
 (
°πﬁd
, 
°πod
)

26 
__END_NAMESPACE_C99


29 #ifde‡
__USE_GNU


30 
	$__LDBL_REDIR1_DECL
 (
°πﬁd_l
, 
°πod_l
)

33 #ifde‡
__USE_MISC


34 
	$__LDBL_REDIR1_DECL
 (
qecvt
, 
ecvt
)

35 
	$__LDBL_REDIR1_DECL
 (
qfcvt
, 
fcvt
)

36 
	$__LDBL_REDIR1_DECL
 (
qgcvt
, 
gcvt
)

37 
	$__LDBL_REDIR1_DECL
 (
qecvt_r
, 
ecvt_r
)

38 
	$__LDBL_REDIR1_DECL
 (
qfcvt_r
, 
fcvt_r
)

	@/usr/include/bits/stdlib.h

19 #i‚de‡
_STDLIB_H


23 *
	$__ªÆ∑th_chk
 (c⁄° *
__ª°ri˘
 
__«me
,

24 *
__ª°ri˘
 
__ªsﬁved
,

25 
size_t
 
__ªsﬁvedÀn
Ë
__THROW
 
__wur
;

26 *
	`__REDIRECT_NTH
 (
__ªÆ∑th_Æüs
,

27 (c⁄° *
__ª°ri˘
 
__«me
,

28 *
__ª°ri˘
 
__ªsﬁved
), 
ªÆ∑th
Ë
__wur
;

29 *
	`__REDIRECT_NTH
 (
__ªÆ∑th_chk_w¨n
,

30 (c⁄° *
__ª°ri˘
 
__«me
,

31 *
__ª°ri˘
 
__ªsﬁved
,

32 
size_t
 
__ªsﬁvedÀn
), 
__ªÆ∑th_chk
Ë
__wur


33 
	`__w¨«âr
 ("secondárgument ofÑealpath must beÉither NULL orát "

36 
__f‹tify_fun˘i⁄
 
__wur
 *

37 
	`__NTH
 (
	$ªÆ∑th
 (c⁄° *
__ª°ri˘
 
__«me
, *__ª°ri˘ 
__ªsﬁved
))

39 i‡(
	`__bos
 (
__ªsﬁved
Ë!(
size_t
) -1)

41 #i‡
deföed
 
_LIBC_LIMITS_H_
 && deföed 
PATH_MAX


42 i‡(
	`__bos
 (
__ªsﬁved
Ë< 
PATH_MAX
)

43  
	`__ªÆ∑th_chk_w¨n
 (
__«me
, 
__ªsﬁved
, 
	`__bos
 (__resolved));

45  
	`__ªÆ∑th_chk
 (
__«me
, 
__ªsﬁved
, 
	`__bos
 (__resolved));

48  
	`__ªÆ∑th_Æüs
 (
__«me
, 
__ªsﬁved
);

49 
	}
}

52 
	$__±¢ame_r_chk
 (
__fd
, *
__buf
, 
size_t
 
__buÊí
,

53 
size_t
 
__ƒól
Ë
__THROW
 
	`__n⁄nuŒ
 ((2));

54 
	`__REDIRECT_NTH
 (
__±¢ame_r_Æüs
, (
__fd
, *
__buf
,

55 
size_t
 
__buÊí
), 
±¢ame_r
)

56 
	`__n⁄nuŒ
 ((2));

57 
	`__REDIRECT_NTH
 (
__±¢ame_r_chk_w¨n
,

58 (
__fd
, *
__buf
, 
size_t
 
__buÊí
,

59 
size_t
 
__ƒól
), 
__±¢ame_r_chk
)

60 
	`__n⁄nuŒ
 ((2)Ë
	`__w¨«âr
 ("ptsname_r called with buflen biggerÅhan "

63 
__f‹tify_fun˘i⁄
 

64 
	`__NTH
 (
	$±¢ame_r
 (
__fd
, *
__buf
, 
size_t
 
__buÊí
))

66 i‡(
	`__bos
 (
__buf
Ë!(
size_t
) -1)

68 i‡(!
	`__buûtö_c⁄°™t_p
 (
__buÊí
))

69  
	`__±¢ame_r_chk
 (
__fd
, 
__buf
, 
__buÊí
, 
	`__bos
 (__buf));

70 i‡(
__buÊí
 > 
	`__bos
 (
__buf
))

71  
	`__±¢ame_r_chk_w¨n
 (
__fd
, 
__buf
, 
__buÊí
, 
	`__bos
 (__buf));

73  
	`__±¢ame_r_Æüs
 (
__fd
, 
__buf
, 
__buÊí
);

74 
	}
}

77 
	$__w˘omb_chk
 (*
__s
, 
wch¨_t
 
__wch¨
, 
size_t
 
__buÊí
)

78 
__THROW
 
__wur
;

79 
	`__REDIRECT_NTH
 (
__w˘omb_Æüs
, (*
__s
, 
wch¨_t
 
__wch¨
),

80 
w˘omb
Ë
__wur
;

82 
__f‹tify_fun˘i⁄
 
__wur
 

83 
	`__NTH
 (
	$w˘omb
 (*
__s
, 
wch¨_t
 
__wch¨
))

88 
	#__STDLIB_MB_LEN_MAX
 16

	)

89 #i‡
deföed
 
MB_LEN_MAX
 && MB_LEN_MAX !
__STDLIB_MB_LEN_MAX


92 i‡(
	`__bos
 (
__s
Ë!(
size_t
Ë-1 && 
__STDLIB_MB_LEN_MAX
 > __bos (__s))

93  
	`__w˘omb_chk
 (
__s
, 
__wch¨
, 
	`__bos
 (__s));

94  
	`__w˘omb_Æüs
 (
__s
, 
__wch¨
);

95 
	}
}

98 
size_t
 
	$__mb°owcs_chk
 (
wch¨_t
 *
__ª°ri˘
 
__d°
,

99 c⁄° *
__ª°ri˘
 
__§c
,

100 
size_t
 
__Àn
, size_à
__d°Àn
Ë
__THROW
;

101 
size_t
 
	`__REDIRECT_NTH
 (
__mb°owcs_Æüs
,

102 (
wch¨_t
 *
__ª°ri˘
 
__d°
,

103 c⁄° *
__ª°ri˘
 
__§c
,

104 
size_t
 
__Àn
), 
mb°owcs
);

105 
size_t
 
	`__REDIRECT_NTH
 (
__mb°owcs_chk_w¨n
,

106 (
wch¨_t
 *
__ª°ri˘
 
__d°
,

107 c⁄° *
__ª°ri˘
 
__§c
,

108 
size_t
 
__Àn
, size_à
__d°Àn
), 
__mb°owcs_chk
)

109 
	`__w¨«âr
 ("mbstowcs called with dst buffer smallerÅhanÜen "

112 
__f‹tify_fun˘i⁄
 
size_t


113 
	`__NTH
 (
	$mb°owcs
 (
wch¨_t
 *
__ª°ri˘
 
__d°
, c⁄° *__ª°ri˘ 
__§c
,

114 
size_t
 
__Àn
))

116 i‡(
	`__bos
 (
__d°
Ë!(
size_t
) -1)

118 i‡(!
	`__buûtö_c⁄°™t_p
 (
__Àn
))

119  
	`__mb°owcs_chk
 (
__d°
, 
__§c
, 
__Àn
,

120 
	`__bos
 (
__d°
Ë/  (
wch¨_t
));

122 i‡(
__Àn
 > 
	`__bos
 (
__d°
Ë/  (
wch¨_t
))

123  
	`__mb°owcs_chk_w¨n
 (
__d°
, 
__§c
, 
__Àn
,

124 
	`__bos
 (
__d°
Ë/  (
wch¨_t
));

126  
	`__mb°owcs_Æüs
 (
__d°
, 
__§c
, 
__Àn
);

127 
	}
}

130 
size_t
 
	$__wc°ombs_chk
 (*
__ª°ri˘
 
__d°
,

131 c⁄° 
wch¨_t
 *
__ª°ri˘
 
__§c
,

132 
size_t
 
__Àn
, size_à
__d°Àn
Ë
__THROW
;

133 
size_t
 
	`__REDIRECT_NTH
 (
__wc°ombs_Æüs
,

134 (*
__ª°ri˘
 
__d°
,

135 c⁄° 
wch¨_t
 *
__ª°ri˘
 
__§c
,

136 
size_t
 
__Àn
), 
wc°ombs
);

137 
size_t
 
	`__REDIRECT_NTH
 (
__wc°ombs_chk_w¨n
,

138 (*
__ª°ri˘
 
__d°
,

139 c⁄° 
wch¨_t
 *
__ª°ri˘
 
__§c
,

140 
size_t
 
__Àn
, size_à
__d°Àn
), 
__wc°ombs_chk
)

141 
	`__w¨«âr
 ("wcstombs called with dst buffer smallerÅhanÜen");

143 
__f‹tify_fun˘i⁄
 
size_t


144 
	`__NTH
 (
	$wc°ombs
 (*
__ª°ri˘
 
__d°
, c⁄° 
wch¨_t
 *__ª°ri˘ 
__§c
,

145 
size_t
 
__Àn
))

147 i‡(
	`__bos
 (
__d°
Ë!(
size_t
) -1)

149 i‡(!
	`__buûtö_c⁄°™t_p
 (
__Àn
))

150  
	`__wc°ombs_chk
 (
__d°
, 
__§c
, 
__Àn
, 
	`__bos
 (__dst));

151 i‡(
__Àn
 > 
	`__bos
 (
__d°
))

152  
	`__wc°ombs_chk_w¨n
 (
__d°
, 
__§c
, 
__Àn
, 
	`__bos
 (__dst));

154  
	`__wc°ombs_Æüs
 (
__d°
, 
__§c
, 
__Àn
);

155 
	}
}

	@/usr/include/bits/typesizes.h

19 #i‚de‡
_BITS_TYPES_H


23 #i‚def 
_BITS_TYPESIZES_H


24 
	#_BITS_TYPESIZES_H
 1

	)

30 #i‡
deföed
 
__x86_64__
 && deföed 
__ILP32__


31 
	#__SYSCALL_SLONG_TYPE
 
__SQUAD_TYPE


	)

32 
	#__SYSCALL_ULONG_TYPE
 
__UQUAD_TYPE


	)

34 
	#__SYSCALL_SLONG_TYPE
 
__SLONGWORD_TYPE


	)

35 
	#__SYSCALL_ULONG_TYPE
 
__ULONGWORD_TYPE


	)

38 
	#__DEV_T_TYPE
 
__UQUAD_TYPE


	)

39 
	#__UID_T_TYPE
 
__U32_TYPE


	)

40 
	#__GID_T_TYPE
 
__U32_TYPE


	)

41 
	#__INO_T_TYPE
 
__SYSCALL_ULONG_TYPE


	)

42 
	#__INO64_T_TYPE
 
__UQUAD_TYPE


	)

43 
	#__MODE_T_TYPE
 
__U32_TYPE


	)

44 #ifde‡
__x86_64__


45 
	#__NLINK_T_TYPE
 
__SYSCALL_ULONG_TYPE


	)

46 
	#__FSWORD_T_TYPE
 
__SYSCALL_SLONG_TYPE


	)

48 
	#__NLINK_T_TYPE
 
__UWORD_TYPE


	)

49 
	#__FSWORD_T_TYPE
 
__SWORD_TYPE


	)

51 
	#__OFF_T_TYPE
 
__SYSCALL_SLONG_TYPE


	)

52 
	#__OFF64_T_TYPE
 
__SQUAD_TYPE


	)

53 
	#__PID_T_TYPE
 
__S32_TYPE


	)

54 
	#__RLIM_T_TYPE
 
__SYSCALL_ULONG_TYPE


	)

55 
	#__RLIM64_T_TYPE
 
__UQUAD_TYPE


	)

56 
	#__BLKCNT_T_TYPE
 
__SYSCALL_SLONG_TYPE


	)

57 
	#__BLKCNT64_T_TYPE
 
__SQUAD_TYPE


	)

58 
	#__FSBLKCNT_T_TYPE
 
__SYSCALL_ULONG_TYPE


	)

59 
	#__FSBLKCNT64_T_TYPE
 
__UQUAD_TYPE


	)

60 
	#__FSFILCNT_T_TYPE
 
__SYSCALL_ULONG_TYPE


	)

61 
	#__FSFILCNT64_T_TYPE
 
__UQUAD_TYPE


	)

62 
	#__ID_T_TYPE
 
__U32_TYPE


	)

63 
	#__CLOCK_T_TYPE
 
__SYSCALL_SLONG_TYPE


	)

64 
	#__TIME_T_TYPE
 
__SYSCALL_SLONG_TYPE


	)

65 
	#__USECONDS_T_TYPE
 
__U32_TYPE


	)

66 
	#__SUSECONDS_T_TYPE
 
__SYSCALL_SLONG_TYPE


	)

67 
	#__DADDR_T_TYPE
 
__S32_TYPE


	)

68 
	#__KEY_T_TYPE
 
__S32_TYPE


	)

69 
	#__CLOCKID_T_TYPE
 
__S32_TYPE


	)

70 
	#__TIMER_T_TYPE
 *

	)

71 
	#__BLKSIZE_T_TYPE
 
__SYSCALL_SLONG_TYPE


	)

72 
	#__FSID_T_TYPE
 såu˘ { 
__vÆ
[2]; }

	)

73 
	#__SSIZE_T_TYPE
 
__SWORD_TYPE


	)

75 #ifde‡
__x86_64__


79 
	#__OFF_T_MATCHES_OFF64_T
 1

	)

82 
	#__INO_T_MATCHES_INO64_T
 1

	)

86 
	#__FD_SETSIZE
 1024

	)

	@/usr/include/bits/waitflags.h

19 #i‡!
deföed
 
_SYS_WAIT_H
 && !deföed 
_STDLIB_H


25 
	#WNOHANG
 1

	)

26 
	#WUNTRACED
 2

	)

29 
	#WSTOPPED
 2

	)

30 
	#WEXITED
 4

	)

31 
	#WCONTINUED
 8

	)

32 
	#WNOWAIT
 0x01000000

	)

34 
	#__WNOTHREAD
 0x20000000

	)

36 
	#__WALL
 0x40000000

	)

37 
	#__WCLONE
 0x80000000

	)

	@/usr/include/bits/waitstatus.h

19 #i‡!
deföed
 
_SYS_WAIT_H
 && !deföed 
_STDLIB_H


28 
	#__WEXITSTATUS
(
°©us
Ë(((°©usË& 0xff00Ë>> 8)

	)

31 
	#__WTERMSIG
(
°©us
Ë((°©usË& 0x7f)

	)

34 
	#__WSTOPSIG
(
°©us
Ë
	`__WEXITSTATUS
(°©us)

	)

37 
	#__WIFEXITED
(
°©us
Ë(
	`__WTERMSIG
(°©usË=0)

	)

40 
	#__WIFSIGNALED
(
°©us
) \

41 (((sig√d Ë(((
°©us
Ë& 0x7fË+ 1Ë>> 1Ë> 0)

	)

44 
	#__WIFSTOPPED
(
°©us
Ë(((°©usË& 0xffË=0x7f)

	)

48 #ifde‡
WCONTINUED


49 
	#__WIFCONTINUED
(
°©us
Ë((°©usË=
__W_CONTINUED
)

	)

53 
	#__WCOREDUMP
(
°©us
Ë((°©usË& 
__WCOREFLAG
)

	)

56 
	#__W_EXITCODE
(
ªt
, 
sig
Ë(‘ëË<< 8 | (sig))

	)

57 
	#__W_STOPCODE
(
sig
Ë((sigË<< 8 | 0x7f)

	)

58 
	#__W_CONTINUED
 0xffff

	)

59 
	#__WCOREFLAG
 0x80

	)

62 #ifdef 
__USE_BSD


64 
	~<ídün.h
>

66 
	uwaô


68 
	mw_°©us
;

71 #if 
__BYTE_ORDER
 =
__LITTLE_ENDIAN


72 
	m__w_ãrmsig
:7;

73 
	m__w_c‹edump
:1;

74 
	m__w_ªtcode
:8;

77 #if 
__BYTE_ORDER
 =
__BIG_ENDIAN


79 
	m__w_ªtcode
:8;

80 
	m__w_c‹edump
:1;

81 
	m__w_ãrmsig
:7;

83 } 
	m__waô_ãrmö©ed
;

86 #if 
__BYTE_ORDER
 =
__LITTLE_ENDIAN


87 
	m__w_°›vÆ
:8;

88 
	m__w_°›sig
:8;

91 #if 
__BYTE_ORDER
 =
__BIG_ENDIAN


93 
	m__w_°›sig
:8;

94 
	m__w_°›vÆ
:8;

96 } 
	m__waô_°›≥d
;

99 
	#w_ãrmsig
 
__waô_ãrmö©ed
.
__w_ãrmsig


	)

100 
	#w_c‹edump
 
__waô_ãrmö©ed
.
__w_c‹edump


	)

101 
	#w_ªtcode
 
__waô_ãrmö©ed
.
__w_ªtcode


	)

102 
	#w_°›sig
 
__waô_°›≥d
.
__w_°›sig


	)

103 
	#w_°›vÆ
 
__waô_°›≥d
.
__w_°›vÆ


	)

	@/usr/include/bits/wordsize.h

3 #i‡
deföed
 
__x86_64__
 && !deföed 
__ILP32__


4 
	#__WORDSIZE
 64

	)

6 
	#__WORDSIZE
 32

	)

9 #ifde‡
__x86_64__


10 
	#__WORDSIZE_TIME64_COMPAT32
 1

	)

12 
	#__SYSCALL_WORDSIZE
 64

	)

	@/usr/include/gnu/stubs-64.h

6 #ifde‡
_LIBC


7 #îr‹ 
Aµliˇti⁄s
 
may
 
nŸ
 
deföe
 
the
 
ma¸o
 
_LIBC


10 
	#__°ub_bdÊush


	)

11 
	#__°ub_chÊags


	)

12 
	#__°ub_Áâach


	)

13 
	#__°ub_fchÊags


	)

14 
	#__°ub_fdëach


	)

15 
	#__°ub_gëmsg


	)

16 
	#__°ub_gây


	)

17 
	#__°ub_lchmod


	)

18 
	#__°ub_putmsg


	)

19 
	#__°ub_ªvoke


	)

20 
	#__°ub_£éogö


	)

21 
	#__°ub_sigªtu∫


	)

22 
	#__°ub_s°k


	)

23 
	#__°ub_°ty


	)

	@/usr/include/sys/types.h

22 #i‚def 
_SYS_TYPES_H


23 
	#_SYS_TYPES_H
 1

	)

25 
	~<„©uªs.h
>

27 
	g__BEGIN_DECLS


29 
	~<bôs/ty≥s.h
>

31 #ifdef 
__USE_BSD


32 #i‚de‡
__u_ch¨_deföed


33 
__u_ch¨
 
	tu_ch¨
;

34 
__u_sh‹t
 
	tu_sh‹t
;

35 
__u_öt
 
	tu_öt
;

36 
__u_l⁄g
 
	tu_l⁄g
;

37 
__quad_t
 
	tquad_t
;

38 
__u_quad_t
 
	tu_quad_t
;

39 
__fsid_t
 
	tfsid_t
;

40 
	#__u_ch¨_deföed


	)

44 
__loff_t
 
	tloff_t
;

46 #i‚de‡
__öo_t_deföed


47 #i‚de‡
__USE_FILE_OFFSET64


48 
__öo_t
 
	töo_t
;

50 
__öo64_t
 
	töo_t
;

52 
	#__öo_t_deföed


	)

54 #i‡
deföed
 
__USE_LARGEFILE64
 && !deföed 
__öo64_t_deföed


55 
__öo64_t
 
	töo64_t
;

56 
	#__öo64_t_deföed


	)

59 #i‚de‡
__dev_t_deföed


60 
__dev_t
 
	tdev_t
;

61 
	#__dev_t_deföed


	)

64 #i‚de‡
__gid_t_deföed


65 
__gid_t
 
	tgid_t
;

66 
	#__gid_t_deföed


	)

69 #i‚de‡
__mode_t_deföed


70 
__mode_t
 
	tmode_t
;

71 
	#__mode_t_deföed


	)

74 #i‚de‡
__∆ök_t_deföed


75 
__∆ök_t
 
	t∆ök_t
;

76 
	#__∆ök_t_deföed


	)

79 #i‚de‡
__uid_t_deföed


80 
__uid_t
 
	tuid_t
;

81 
	#__uid_t_deföed


	)

84 #i‚de‡
__off_t_deföed


85 #i‚de‡
__USE_FILE_OFFSET64


86 
__off_t
 
	toff_t
;

88 
__off64_t
 
	toff_t
;

90 
	#__off_t_deföed


	)

92 #i‡
deföed
 
__USE_LARGEFILE64
 && !deföed 
__off64_t_deföed


93 
__off64_t
 
	toff64_t
;

94 
	#__off64_t_deföed


	)

97 #i‚de‡
__pid_t_deföed


98 
__pid_t
 
	tpid_t
;

99 
	#__pid_t_deföed


	)

102 #i‡(
deföed
 
__USE_SVID
 || deföed 
__USE_XOPEN
 || deföed 
__USE_XOPEN2K8
) \

103 && !
deföed
 
__id_t_deföed


104 
__id_t
 
	tid_t
;

105 
	#__id_t_deföed


	)

108 #i‚de‡
__ssize_t_deföed


109 
__ssize_t
 
	tssize_t
;

110 
	#__ssize_t_deföed


	)

113 #ifdef 
__USE_BSD


114 #i‚de‡
__daddr_t_deföed


115 
__daddr_t
 
	tdaddr_t
;

116 
__ˇddr_t
 
	tˇddr_t
;

117 
	#__daddr_t_deföed


	)

121 #i‡(
deföed
 
__USE_SVID
 || deföed 
__USE_XOPEN
Ë&& !deföed 
__key_t_deföed


122 
__key_t
 
	tkey_t
;

123 
	#__key_t_deföed


	)

126 #i‡
deföed
 
__USE_XOPEN
 || deföed 
__USE_XOPEN2K8


127 
	#__√ed_˛ock_t


	)

129 
	#__√ed_time_t


	)

130 
	#__√ed_timî_t


	)

131 
	#__√ed_˛ockid_t


	)

132 
	~<time.h
>

134 #ifde‡
__USE_XOPEN


135 #i‚de‡
__u£c⁄ds_t_deföed


136 
__u£c⁄ds_t
 
	tu£c⁄ds_t
;

137 
	#__u£c⁄ds_t_deföed


	)

139 #i‚de‡
__su£c⁄ds_t_deföed


140 
__su£c⁄ds_t
 
	tsu£c⁄ds_t
;

141 
	#__su£c⁄ds_t_deföed


	)

145 
	#__√ed_size_t


	)

146 
	~<°ddef.h
>

148 #ifde‡
__USE_MISC


150 
	tul⁄g
;

151 
	tush‹t
;

152 
	tuöt
;

157 #i‡!
__GNUC_PREREQ
 (2, 7)

160 #i‚de‡
__öt8_t_deföed


161 
	#__öt8_t_deföed


	)

162 
	töt8_t
;

163 
	töt16_t
;

164 
	töt32_t
;

165 #i‡
__WORDSIZE
 == 64

166 
	töt64_t
;

168 
__exãnsi⁄__
 
	töt64_t
;

173 
	tu_öt8_t
;

174 
	tu_öt16_t
;

175 
	tu_öt32_t
;

176 #i‡
__WORDSIZE
 == 64

177 
	tu_öt64_t
;

179 
__exãnsi⁄__
 
	tu_öt64_t
;

182 
	tªgi°î_t
;

187 
	#__ötN_t
(
N
, 
MODE
) \

188 ##
	tN
##
	t_t
 
	t__©åibuã__
 ((
	t__mode__
 (
	tMODE
)))

	)

189 
	t__u_ötN_t
(
	tN
, 
	tMODE
) \

190 
	tu_öt
##
	tN
##
	t_t
 
	t__©åibuã__
 ((
	t__mode__
 (
	tMODE
)))

	)

192 #i‚de‡
	t__öt8_t_deföed


193 
	t__öt8_t_deföed


	)

194 
	t__ötN_t
 (8, 
	t__QI__
);

195 
__ötN_t
 (16, 
__HI__
);

196 
__ötN_t
 (32, 
__SI__
);

197 
__ötN_t
 (64, 
__DI__
);

200 
__u_ötN_t
 (8, 
__QI__
);

201 
__u_ötN_t
 (16, 
__HI__
);

202 
__u_ötN_t
 (32, 
__SI__
);

203 
__u_ötN_t
 (64, 
__DI__
);

205 
	tªgi°î_t
 
	t__©åibuã__
 ((
	t__mode__
 (
	t__w‹d__
)));

211 
	#__BIT_TYPES_DEFINED__
 1

	)

214 #ifdef 
__USE_BSD


216 
	~<ídün.h
>

219 
	~<sys/£À˘.h
>

222 
	~<sys/sysma¸os.h
>

226 #i‡(
deföed
 
__USE_UNIX98
 || deföed 
__USE_XOPEN2K8
) \

227 && !
deföed
 
__blksize_t_deföed


228 
__blksize_t
 
	tblksize_t
;

229 
	#__blksize_t_deföed


	)

233 #i‚de‡
__USE_FILE_OFFSET64


234 #i‚de‡
__blk˙t_t_deföed


235 
__blk˙t_t
 
	tblk˙t_t
;

236 
	#__blk˙t_t_deföed


	)

238 #i‚de‡
__fsblk˙t_t_deföed


239 
__fsblk˙t_t
 
	tfsblk˙t_t
;

240 
	#__fsblk˙t_t_deföed


	)

242 #i‚de‡
__fsfû˙t_t_deföed


243 
__fsfû˙t_t
 
	tfsfû˙t_t
;

244 
	#__fsfû˙t_t_deföed


	)

247 #i‚de‡
__blk˙t_t_deföed


248 
__blk˙t64_t
 
	tblk˙t_t
;

249 
	#__blk˙t_t_deföed


	)

251 #i‚de‡
__fsblk˙t_t_deföed


252 
__fsblk˙t64_t
 
	tfsblk˙t_t
;

253 
	#__fsblk˙t_t_deföed


	)

255 #i‚de‡
__fsfû˙t_t_deföed


256 
__fsfû˙t64_t
 
	tfsfû˙t_t
;

257 
	#__fsfû˙t_t_deföed


	)

261 #ifde‡
__USE_LARGEFILE64


262 
__blk˙t64_t
 
	tblk˙t64_t
;

263 
__fsblk˙t64_t
 
	tfsblk˙t64_t
;

264 
__fsfû˙t64_t
 
	tfsfû˙t64_t
;

269 #i‡
deföed
 
__USE_POSIX199506
 || deföed 
__USE_UNIX98


270 
	~<bôs/±hªadty≥s.h
>

273 
	g__END_DECLS


	@/usr/include/bits/byteswap-16.h

19 #i‚de‡
_BITS_BYTESWAP_H


23 #ifde‡
__GNUC__


24 #i‡
__GNUC__
 >= 2

25 
	#__bsw≠_16
(
x
) \

26 (
__exãnsi⁄__
 \

27 ({ 
__v
, 
__x
 = (Ë(
x
); \

28 i‡(
	`__buûtö_c⁄°™t_p
 (
__x
)) \

29 
__v
 = 
	`__bsw≠_c⁄°™t_16
 (
__x
); \

31 
	`__asm__
 ("rorw $8, %w0" \

32 : "Ù" (
__v
) \

33 : "0" (
__x
) \

35 
__v
; }))

	)

38 
	#__bsw≠_16
(
x
) \

39 (
__exãnsi⁄__
 \

40 ({ 
__x
 = (Ë(
x
); \

41 
	`__bsw≠_c⁄°™t_16
 (
__x
); }))

	)

44 
__ölöe
 

45 
	$__bsw≠_16
 (
__bsx
)

47  
	`__bsw≠_c⁄°™t_16
 (
__bsx
);

48 
	}
}

	@/usr/include/bits/pthreadtypes.h

18 #i‚de‡
_BITS_PTHREADTYPES_H


19 
	#_BITS_PTHREADTYPES_H
 1

	)

21 
	~<bôs/w‹dsize.h
>

23 #ifde‡
__x86_64__


24 #i‡
__WORDSIZE
 == 64

25 
	#__SIZEOF_PTHREAD_ATTR_T
 56

	)

26 
	#__SIZEOF_PTHREAD_MUTEX_T
 40

	)

27 
	#__SIZEOF_PTHREAD_MUTEXATTR_T
 4

	)

28 
	#__SIZEOF_PTHREAD_COND_T
 48

	)

29 
	#__SIZEOF_PTHREAD_CONDATTR_T
 4

	)

30 
	#__SIZEOF_PTHREAD_RWLOCK_T
 56

	)

31 
	#__SIZEOF_PTHREAD_RWLOCKATTR_T
 8

	)

32 
	#__SIZEOF_PTHREAD_BARRIER_T
 32

	)

33 
	#__SIZEOF_PTHREAD_BARRIERATTR_T
 4

	)

35 
	#__SIZEOF_PTHREAD_ATTR_T
 32

	)

36 
	#__SIZEOF_PTHREAD_MUTEX_T
 32

	)

37 
	#__SIZEOF_PTHREAD_MUTEXATTR_T
 4

	)

38 
	#__SIZEOF_PTHREAD_COND_T
 48

	)

39 
	#__SIZEOF_PTHREAD_CONDATTR_T
 4

	)

40 
	#__SIZEOF_PTHREAD_RWLOCK_T
 44

	)

41 
	#__SIZEOF_PTHREAD_RWLOCKATTR_T
 8

	)

42 
	#__SIZEOF_PTHREAD_BARRIER_T
 20

	)

43 
	#__SIZEOF_PTHREAD_BARRIERATTR_T
 4

	)

46 
	#__SIZEOF_PTHREAD_ATTR_T
 36

	)

47 
	#__SIZEOF_PTHREAD_MUTEX_T
 24

	)

48 
	#__SIZEOF_PTHREAD_MUTEXATTR_T
 4

	)

49 
	#__SIZEOF_PTHREAD_COND_T
 48

	)

50 
	#__SIZEOF_PTHREAD_CONDATTR_T
 4

	)

51 
	#__SIZEOF_PTHREAD_RWLOCK_T
 32

	)

52 
	#__SIZEOF_PTHREAD_RWLOCKATTR_T
 8

	)

53 
	#__SIZEOF_PTHREAD_BARRIER_T
 20

	)

54 
	#__SIZEOF_PTHREAD_BARRIERATTR_T
 4

	)

60 
	t±hªad_t
;

63 
	u±hªad_©å_t


65 
	m__size
[
__SIZEOF_PTHREAD_ATTR_T
];

66 
	m__Æign
;

68 #i‚de‡
__have_±hªad_©å_t


69 
±hªad_©å_t
 
	t±hªad_©å_t
;

70 
	#__have_±hªad_©å_t
 1

	)

74 #ifde‡
__x86_64__


75 
	s__±hªad_öã∫Æ_li°


77 
__±hªad_öã∫Æ_li°
 *
	m__¥ev
;

78 
__±hªad_öã∫Æ_li°
 *
	m__√xt
;

79 } 
	t__±hªad_li°_t
;

81 
	s__±hªad_öã∫Æ_¶i°


83 
__±hªad_öã∫Æ_¶i°
 *
	m__√xt
;

84 } 
	t__±hªad_¶i°_t
;

92 
	s__±hªad_muãx_s


94 
	m__lock
;

95 
	m__cou¡
;

96 
	m__ow√r
;

97 #ifde‡
__x86_64__


98 
	m__nu£rs
;

102 
	m__köd
;

103 #ifde‡
__x86_64__


104 
	m__•ös
;

105 
	m__ñisi⁄
;

106 
__±hªad_li°_t
 
	m__li°
;

107 
	#__PTHREAD_MUTEX_HAVE_PREV
 1

	)

108 
	#__PTHREAD_MUTEX_HAVE_ELISION
 1

	)

110 
	m__nu£rs
;

111 
__exãnsi⁄__
 union

115 
	m__e•ös
;

116 
	m__ñisi⁄
;

117 
	#__•ös
 
d
.
__e•ös


	)

118 
	#__ñisi⁄
 
d
.
__ñisi⁄


	)

119 
	#__PTHREAD_MUTEX_HAVE_ELISION
 2

	)

120 } 
	md
;

121 
__±hªad_¶i°_t
 
	m__li°
;

124 } 
	m__d©a
;

125 
	m__size
[
__SIZEOF_PTHREAD_MUTEX_T
];

126 
	m__Æign
;

127 } 
	t±hªad_muãx_t
;

131 
	m__size
[
__SIZEOF_PTHREAD_MUTEXATTR_T
];

132 
	m__Æign
;

133 } 
	t±hªad_muãx©å_t
;

142 
	m__lock
;

143 
	m__fuãx
;

144 
__exãnsi⁄__
 
	m__tŸÆ_£q
;

145 
__exãnsi⁄__
 
	m__wakeup_£q
;

146 
__exãnsi⁄__
 
	m__wokí_£q
;

147 *
	m__muãx
;

148 
	m__nwaôîs
;

149 
	m__brﬂdˇ°_£q
;

150 } 
	m__d©a
;

151 
	m__size
[
__SIZEOF_PTHREAD_COND_T
];

152 
__exãnsi⁄__
 
	m__Æign
;

153 } 
	t±hªad_c⁄d_t
;

157 
	m__size
[
__SIZEOF_PTHREAD_CONDATTR_T
];

158 
	m__Æign
;

159 } 
	t±hªad_c⁄d©å_t
;

163 
	t±hªad_key_t
;

167 
	t±hªad_⁄˚_t
;

170 #i‡
deföed
 
__USE_UNIX98
 || deföed 
__USE_XOPEN2K


175 #ifde‡
__x86_64__


178 
	m__lock
;

179 
	m__ƒ_ªadîs
;

180 
	m__ªadîs_wakeup
;

181 
	m__wrôî_wakeup
;

182 
	m__ƒ_ªadîs_queued
;

183 
	m__ƒ_wrôîs_queued
;

184 
	m__wrôî
;

185 
	m__sh¨ed
;

186 
	m__∑d1
;

187 
	m__∑d2
;

190 
	m__Êags
;

191 
	#__PTHREAD_RWLOCK_INT_FLAGS_SHARED
 1

	)

192 } 
	m__d©a
;

196 
	m__lock
;

197 
	m__ƒ_ªadîs
;

198 
	m__ªadîs_wakeup
;

199 
	m__wrôî_wakeup
;

200 
	m__ƒ_ªadîs_queued
;

201 
	m__ƒ_wrôîs_queued
;

204 
	m__Êags
;

205 
	m__sh¨ed
;

206 
	m__∑d1
;

207 
	m__∑d2
;

208 
	m__wrôî
;

209 } 
	m__d©a
;

211 
	m__size
[
__SIZEOF_PTHREAD_RWLOCK_T
];

212 
	m__Æign
;

213 } 
	t±hªad_rwlock_t
;

217 
	m__size
[
__SIZEOF_PTHREAD_RWLOCKATTR_T
];

218 
	m__Æign
;

219 } 
	t±hªad_rwlock©å_t
;

223 #ifde‡
__USE_XOPEN2K


225 vﬁ©ûê
	t±hªad_•ölock_t
;

232 
	m__size
[
__SIZEOF_PTHREAD_BARRIER_T
];

233 
	m__Æign
;

234 } 
	t±hªad_b¨rõr_t
;

238 
	m__size
[
__SIZEOF_PTHREAD_BARRIERATTR_T
];

239 
	m__Æign
;

240 } 
	t±hªad_b¨rõøâr_t
;

244 #i‚de‡
__x86_64__


246 
	#__˛ónup_f˘_©åibuã
 
	`__©åibuã__
 ((
	`__ªg∑rm__
 (1)))

	)

	@/usr/include/sys/select.h

21 #i‚de‡
_SYS_SELECT_H


22 
	#_SYS_SELECT_H
 1

	)

24 
	~<„©uªs.h
>

27 
	~<bôs/ty≥s.h
>

30 
	~<bôs/£À˘.h
>

33 
	~<bôs/sig£t.h
>

35 #i‚de‡
__sig£t_t_deföed


36 
	#__sig£t_t_deföed


	)

37 
__sig£t_t
 
	tsig£t_t
;

41 
	#__√ed_time_t


	)

42 
	#__√ed_time•ec


	)

43 
	~<time.h
>

44 
	#__√ed_timevÆ


	)

45 
	~<bôs/time.h
>

47 #i‚de‡
__su£c⁄ds_t_deföed


48 
__su£c⁄ds_t
 
	tsu£c⁄ds_t
;

49 
	#__su£c⁄ds_t_deföed


	)

54 
	t__fd_mask
;

57 #unde‡
__NFDBITS


59 
	#__NFDBITS
 (8 * (Ë (
__fd_mask
))

	)

60 
	#__FD_ELT
(
d
Ë((dË/ 
__NFDBITS
)

	)

61 
	#__FD_MASK
(
d
Ë((
__fd_mask
Ë1 << ((dË% 
__NFDBITS
))

	)

68 #ifde‡
__USE_XOPEN


69 
__fd_mask
 
	mfds_bôs
[
__FD_SETSIZE
 / 
__NFDBITS
];

70 
	#__FDS_BITS
(
£t
Ë((£t)->
fds_bôs
)

	)

72 
__fd_mask
 
	m__fds_bôs
[
__FD_SETSIZE
 / 
__NFDBITS
];

73 
	#__FDS_BITS
(
£t
Ë((£t)->
__fds_bôs
)

	)

75 } 
	tfd_£t
;

78 
	#FD_SETSIZE
 
__FD_SETSIZE


	)

80 #ifde‡
__USE_MISC


82 
__fd_mask
 
	tfd_mask
;

85 
	#NFDBITS
 
__NFDBITS


	)

90 
	#FD_SET
(
fd
, 
fd£ç
Ë
	`__FD_SET
 (fd, fd£ç)

	)

91 
	#FD_CLR
(
fd
, 
fd£ç
Ë
	`__FD_CLR
 (fd, fd£ç)

	)

92 
	#FD_ISSET
(
fd
, 
fd£ç
Ë
	`__FD_ISSET
 (fd, fd£ç)

	)

93 
	#FD_ZERO
(
fd£ç
Ë
	`__FD_ZERO
 (fd£ç)

	)

96 
__BEGIN_DECLS


106 
£À˘
 (
__nfds
, 
fd_£t
 *
__ª°ri˘
 
__ªadfds
,

107 
fd_£t
 *
__ª°ri˘
 
__wrôefds
,

108 
fd_£t
 *
__ª°ri˘
 
__ex˚±fds
,

109 
timevÆ
 *
__ª°ri˘
 
__timeout
);

111 #ifde‡
__USE_XOPEN2K


118 
p£À˘
 (
__nfds
, 
fd_£t
 *
__ª°ri˘
 
__ªadfds
,

119 
fd_£t
 *
__ª°ri˘
 
__wrôefds
,

120 
fd_£t
 *
__ª°ri˘
 
__ex˚±fds
,

121 c⁄° 
time•ec
 *
__ª°ri˘
 
__timeout
,

122 c⁄° 
__sig£t_t
 *
__ª°ri˘
 
__sigmask
);

127 #i‡
__USE_FORTIFY_LEVEL
 > 0 && 
deföed
 
__GNUC__


128 
	~<bôs/£À˘2.h
>

131 
	g__END_DECLS


	@/usr/include/sys/sysmacros.h

19 #i‚de‡
_SYS_SYSMACROS_H


20 
	#_SYS_SYSMACROS_H
 1

	)

22 
	~<„©uªs.h
>

24 
__BEGIN_DECLS


26 
__exãnsi⁄__


27 
	$gnu_dev_maj‹
 (
__dev
)

28 
__THROW
 
__©åibuã_c⁄°__
;

29 
__exãnsi⁄__


30 
	$gnu_dev_mö‹
 (
__dev
)

31 
__THROW
 
__©åibuã_c⁄°__
;

32 
__exãnsi⁄__


33 
	$gnu_dev_makedev
 (
__maj‹
,

34 
__mö‹
)

35 
__THROW
 
__©åibuã_c⁄°__
;

37 #ifde‡
__USE_EXTERN_INLINES


38 
__exãnsi⁄__
 
__exã∫_ölöe
 
__©åibuã_c⁄°__
 

39 
	`__NTH
 (
	$gnu_dev_maj‹
 (
__dev
))

41  ((
__dev
 >> 8) & 0xfff) | (() (__dev >> 32) & ~0xfff);

42 
	}
}

44 
__exãnsi⁄__
 
__exã∫_ölöe
 
__©åibuã_c⁄°__
 

45 
__NTH
 (
	$gnu_dev_mö‹
 (
__dev
))

47  (
__dev
 & 0xff) | (() (__dev >> 12) & ~0xff);

48 
	}
}

50 
__exãnsi⁄__
 
__exã∫_ölöe
 
__©åibuã_c⁄°__
 

51 
__NTH
 (
	$gnu_dev_makedev
 (
__maj‹
, 
__mö‹
))

53  ((
__mö‹
 & 0xffË| ((
__maj‹
 & 0xfff) << 8)

54 | (((Ë(
__mö‹
 & ~0xff)) << 12)

55 | (((Ë(
__maj‹
 & ~0xfff)) << 32));

56 
	}
}

58 
	g__END_DECLS


61 
	#maj‹
(
dev
Ë
	`gnu_dev_maj‹
 (dev)

	)

62 
	#mö‹
(
dev
Ë
	`gnu_dev_mö‹
 (dev)

	)

63 
	#makedev
(
maj
, 
mö
Ë
	`gnu_dev_makedev
 (maj, mö)

	)

	@/usr/include/time.h

22 #i‚def 
_TIME_H


24 #i‡(! 
deföed
 
__√ed_time_t
 && !deföed 
__√ed_˛ock_t
 && \

25 ! 
deföed
 
	g__√ed_time•ec
)

26 
	#_TIME_H
 1

	)

27 
	~<„©uªs.h
>

29 
	g__BEGIN_DECLS


33 #ifdef 
_TIME_H


35 
	#__√ed_size_t


	)

36 
	#__√ed_NULL


	)

37 
	~<°ddef.h
>

41 
	~<bôs/time.h
>

44 #i‡!
deföed
 
__STRICT_ANSI__
 && !deföed 
__USE_XOPEN2K


45 #i‚de‡
CLK_TCK


46 
	#CLK_TCK
 
CLOCKS_PER_SEC


	)

52 #i‡!
deföed
 
__˛ock_t_deföed
 && (deföed 
_TIME_H
 || deföed 
__√ed_˛ock_t
)

53 
	#__˛ock_t_deföed
 1

	)

55 
	~<bôs/ty≥s.h
>

57 
__BEGIN_NAMESPACE_STD


59 
__˛ock_t
 
	t˛ock_t
;

60 
	g__END_NAMESPACE_STD


61 #i‡
deföed
 
__USE_XOPEN
 || deföed 
__USE_POSIX
 || deföed 
__USE_MISC


62 
	$__USING_NAMESPACE_STD
(
˛ock_t
)

66 #unde‡
__√ed_˛ock_t


68 #i‡!
deföed
 
__time_t_deföed
 && (deföed 
_TIME_H
 || deföed 
__√ed_time_t
)

69 
	#__time_t_deföed
 1

	)

71 
	~<bôs/ty≥s.h
>

73 
__BEGIN_NAMESPACE_STD


75 
__time_t
 
	ttime_t
;

76 
__END_NAMESPACE_STD


77 #i‡
deföed
 
__USE_POSIX
 || deföed 
__USE_MISC
 || deföed 
__USE_SVID


78 
	$__USING_NAMESPACE_STD
(
time_t
)

82 #unde‡
__√ed_time_t


84 #i‡!
deföed
 
__˛ockid_t_deföed
 && \

85 ((
deföed
 
_TIME_H
 && deföed 
__USE_POSIX199309
Ë|| deföed 
__√ed_˛ockid_t
)

86 
	#__˛ockid_t_deföed
 1

	)

88 
	~<bôs/ty≥s.h
>

91 
__˛ockid_t
 
	t˛ockid_t
;

94 #unde‡
__˛ockid_time_t


96 #i‡!
deföed
 
__timî_t_deföed
 && \

97 ((
deföed
 
_TIME_H
 && deföed 
__USE_POSIX199309
Ë|| deföed 
__√ed_timî_t
)

98 
	#__timî_t_deföed
 1

	)

100 
	~<bôs/ty≥s.h
>

103 
__timî_t
 
	ttimî_t
;

106 #unde‡
__√ed_timî_t


109 #i‡(!
deföed
 
__time•ec_deföed
 \

110 && ((
deföed
 
_TIME_H
 \

111 && (
deföed
 
__USE_POSIX199309
 || deföed 
__USE_MISC
 \

112 || 
deföed
 
__USE_ISOC11
)) \

113 || 
deföed
 
__√ed_time•ec
))

114 
	#__time•ec_deföed
 1

	)

116 
	~<bôs/ty≥s.h
>

120 
	stime•ec


122 
__time_t
 
tv_£c
;

123 
__sysˇŒ_¶⁄g_t
 
tv_n£c
;

127 #unde‡
__√ed_time•ec


130 #ifdef 
_TIME_H


131 
__BEGIN_NAMESPACE_STD


133 
	stm


135 
tm_£c
;

136 
tm_mö
;

137 
tm_hour
;

138 
tm_mday
;

139 
tm_m⁄
;

140 
tm_yór
;

141 
tm_wday
;

142 
tm_yday
;

143 
tm_isd°
;

145 #ifdef 
__USE_BSD


146 
tm_gmtoff
;

147 c⁄° *
tm_z⁄e
;

149 
__tm_gmtoff
;

150 c⁄° *
__tm_z⁄e
;

153 
__END_NAMESPACE_STD


154 #i‡
deföed
 
__USE_XOPEN
 || deföed 
__USE_POSIX
 || deföed 
__USE_MISC


155 
	$__USING_NAMESPACE_STD
(
tm
)

159 #ifde‡
__USE_POSIX199309


161 
	sôimî•ec


163 
time•ec
 
ô_öãrvÆ
;

164 
time•ec
 
ô_vÆue
;

168 
sigevít
;

172 #ifde‡
__USE_XOPEN2K


173 #i‚de‡
__pid_t_deföed


174 
__pid_t
 
	tpid_t
;

175 
	#__pid_t_deföed


	)

180 #ifde‡
__USE_ISOC11


182 
	#TIME_UTC
 1

	)

186 
__BEGIN_NAMESPACE_STD


189 
˛ock_t
 
	$˛ock
 (Ë
__THROW
;

192 
time_t
 
	$time
 (
time_t
 *
__timî
Ë
__THROW
;

195 
	$dif·ime
 (
time_t
 
__time1
,Åime_à
__time0
)

196 
__THROW
 
	`__©åibuã__
 ((
__c⁄°__
));

199 
time_t
 
	$mktime
 (
tm
 *
__ç
Ë
__THROW
;

205 
size_t
 
	$°r·ime
 (*
__ª°ri˘
 
__s
, 
size_t
 
__maxsize
,

206 c⁄° *
__ª°ri˘
 
__f‹m©
,

207 c⁄° 
tm
 *
__ª°ri˘
 
__ç
Ë
__THROW
;

208 
__END_NAMESPACE_STD


210 #ifde‡
__USE_XOPEN


213 *
	$°Ωtime
 (c⁄° *
__ª°ri˘
 
__s
,

214 c⁄° *
__ª°ri˘
 
__fmt
, 
tm
 *
__ç
)

215 
__THROW
;

218 #ifde‡
__USE_XOPEN2K8


221 
	~<xloˇÀ.h
>

223 
size_t
 
	$°r·ime_l
 (*
__ª°ri˘
 
__s
, 
size_t
 
__maxsize
,

224 c⁄° *
__ª°ri˘
 
__f‹m©
,

225 c⁄° 
tm
 *
__ª°ri˘
 
__ç
,

226 
__loˇÀ_t
 
__loc
Ë
__THROW
;

229 #ifde‡
__USE_GNU


230 *
	$°Ωtime_l
 (c⁄° *
__ª°ri˘
 
__s
,

231 c⁄° *
__ª°ri˘
 
__fmt
, 
tm
 *
__ç
,

232 
__loˇÀ_t
 
__loc
Ë
__THROW
;

236 
__BEGIN_NAMESPACE_STD


239 
tm
 *
	$gmtime
 (c⁄° 
time_t
 *
__timî
Ë
__THROW
;

243 
tm
 *
	$loˇ…ime
 (c⁄° 
time_t
 *
__timî
Ë
__THROW
;

244 
__END_NAMESPACE_STD


246 #i‡
deföed
 
__USE_POSIX
 || deföed 
__USE_MISC


249 
tm
 *
	$gmtime_r
 (c⁄° 
time_t
 *
__ª°ri˘
 
__timî
,

250 
tm
 *
__ª°ri˘
 
__ç
Ë
__THROW
;

254 
tm
 *
	$loˇ…ime_r
 (c⁄° 
time_t
 *
__ª°ri˘
 
__timî
,

255 
tm
 *
__ª°ri˘
 
__ç
Ë
__THROW
;

258 
__BEGIN_NAMESPACE_STD


261 *
	$as˘ime
 (c⁄° 
tm
 *
__ç
Ë
__THROW
;

264 *
	$˘ime
 (c⁄° 
time_t
 *
__timî
Ë
__THROW
;

265 
__END_NAMESPACE_STD


267 #i‡
deföed
 
__USE_POSIX
 || deföed 
__USE_MISC


272 *
	$as˘ime_r
 (c⁄° 
tm
 *
__ª°ri˘
 
__ç
,

273 *
__ª°ri˘
 
__buf
Ë
__THROW
;

276 *
	$˘ime_r
 (c⁄° 
time_t
 *
__ª°ri˘
 
__timî
,

277 *
__ª°ri˘
 
__buf
Ë
__THROW
;

282 *
__tz«me
[2];

283 
__daylight
;

284 
__timez⁄e
;

287 #ifdef 
__USE_POSIX


289 *
tz«me
[2];

293 
	$tz£t
 (Ë
__THROW
;

296 #i‡
deföed
 
__USE_SVID
 || deföed 
__USE_XOPEN


297 
daylight
;

298 
timez⁄e
;

301 #ifde‡
__USE_SVID


304 
	$°ime
 (c⁄° 
time_t
 *
__whí
Ë
__THROW
;

310 
	#__i¶óp
(
yór
) \

311 ((
yór
Ë% 4 =0 && ((yórË% 100 !0 || (yórË% 400 =0))

	)

314 #ifde‡
__USE_MISC


319 
time_t
 
	$timegm
 (
tm
 *
__ç
Ë
__THROW
;

322 
time_t
 
	$timñoˇl
 (
tm
 *
__ç
Ë
__THROW
;

325 
	$dysize
 (
__yór
Ë
__THROW
 
	`__©åibuã__
 ((
__c⁄°__
));

329 #ifde‡
__USE_POSIX199309


334 
	`«no¶ìp
 (c⁄° 
time•ec
 *
__ªque°ed_time
,

335 
time•ec
 *
__ªmaöög
);

339 
	$˛ock_gëªs
 (
˛ockid_t
 
__˛ock_id
, 
time•ec
 *
__ªs
Ë
__THROW
;

342 
	$˛ock_gëtime
 (
˛ockid_t
 
__˛ock_id
, 
time•ec
 *
__ç
Ë
__THROW
;

345 
	$˛ock_£âime
 (
˛ockid_t
 
__˛ock_id
, c⁄° 
time•ec
 *
__ç
)

346 
__THROW
;

348 #ifde‡
__USE_XOPEN2K


353 
	`˛ock_«no¶ìp
 (
˛ockid_t
 
__˛ock_id
, 
__Êags
,

354 c⁄° 
time•ec
 *
__ªq
,

355 
time•ec
 *
__ªm
);

358 
	$˛ock_gë˝u˛ockid
 (
pid_t
 
__pid
, 
˛ockid_t
 *
__˛ock_id
Ë
__THROW
;

363 
	$timî_¸óã
 (
˛ockid_t
 
__˛ock_id
,

364 
sigevít
 *
__ª°ri˘
 
__evp
,

365 
timî_t
 *
__ª°ri˘
 
__timîid
Ë
__THROW
;

368 
	$timî_dñëe
 (
timî_t
 
__timîid
Ë
__THROW
;

371 
	$timî_£âime
 (
timî_t
 
__timîid
, 
__Êags
,

372 c⁄° 
ôimî•ec
 *
__ª°ri˘
 
__vÆue
,

373 
ôimî•ec
 *
__ª°ri˘
 
__ovÆue
Ë
__THROW
;

376 
	$timî_gëtime
 (
timî_t
 
__timîid
, 
ôimî•ec
 *
__vÆue
)

377 
__THROW
;

380 
	$timî_gëovîrun
 (
timî_t
 
__timîid
Ë
__THROW
;

384 #ifde‡
__USE_ISOC11


386 
	$time•ec_gë
 (
time•ec
 *
__ts
, 
__ba£
)

387 
__THROW
 
	`__n⁄nuŒ
 ((1));

391 #ifde‡
__USE_XOPEN_EXTENDED


403 
gëd©e_îr
;

412 
tm
 *
	`gëd©e
 (c⁄° *
__°rög
);

415 #ifde‡
__USE_GNU


426 
	`gëd©e_r
 (c⁄° *
__ª°ri˘
 
__°rög
,

427 
tm
 *
__ª°ri˘
 
__ªsbuÂ
);

430 
__END_DECLS


	@/usr/include/bits/select.h

18 #i‚de‡
_SYS_SELECT_H


22 
	~<bôs/w‹dsize.h
>

25 #i‡
deföed
 
__GNUC__
 && __GNUC__ >= 2

27 #i‡
__WORDSIZE
 == 64

28 
	#__FD_ZERO_STOS
 "°osq"

	)

30 
	#__FD_ZERO_STOS
 "°o¶"

	)

33 
	#__FD_ZERO
(
fd•
) \

35 
__d0
, 
__d1
; \

36 
__asm__
 
	`__vﬁ©ûe__
 ("˛d;Ñï; " 
__FD_ZERO_STOS
 \

37 : "=c" (
__d0
), "=D" (
__d1
) \

38 : "a" (0), "0" ( (
fd_£t
) \

39 /  (
__fd_mask
)), \

40 "1" (&
	`__FDS_BITS
 (
fd•
)[0]) \

42 } 0)

	)

48 
	#__FD_ZERO
(
£t
) \

50 
__i
; \

51 
fd_£t
 *
__¨r
 = (
£t
); \

52 
__i
 = 0; __ò<  (
fd_£t
Ë/  (
__fd_mask
); ++__i) \

53 
	`__FDS_BITS
 (
__¨r
)[
__i
] = 0; \

54 } 0)

	)

58 
	#__FD_SET
(
d
, 
£t
) \

59 ((Ë(
	`__FDS_BITS
 (
£t
)[
	`__FD_ELT
 (
d
)] |
	`__FD_MASK
 (d)))

	)

60 
	#__FD_CLR
(
d
, 
£t
) \

61 ((Ë(
	`__FDS_BITS
 (
£t
)[
	`__FD_ELT
 (
d
)] &~
	`__FD_MASK
 (d)))

	)

62 
	#__FD_ISSET
(
d
, 
£t
) \

63 ((
	`__FDS_BITS
 (
£t
)[
	`__FD_ELT
 (
d
)] & 
	`__FD_MASK
 (d)Ë!0)

	)

	@/usr/include/bits/select2.h

19 #i‚de‡
_SYS_SELECT_H


24 
__fdñt_chk
 (
__d
);

25 
	$__fdñt_w¨n
 (
__d
)

26 
	`__w¨«âr
 ("bit outside of fd_set selected");

27 #unde‡
__FD_ELT


28 
	#__FD_ELT
(
d
) \

29 
__exãnsi⁄__
 \

30 ({ 
__d
 = (
d
); \

31 (
	`__buûtö_c⁄°™t_p
 (
__d
) \

32 ? (0 <
__d
 && __d < 
__FD_SETSIZE
 \

33 ? (
__d
 / 
__NFDBITS
) \

34 : 
	`__fdñt_w¨n
 (
__d
)) \

35 : 
	`__fdñt_chk
 (
__d
)); 
	}
})

	)

	@/usr/include/bits/sigset.h

19 #i‚def 
_SIGSET_H_ty≥s


20 
	#_SIGSET_H_ty≥s
 1

	)

22 
	t__sig_©omic_t
;

26 
	#_SIGSET_NWORDS
 (1024 / (8 *  ()))

	)

29 
	m__vÆ
[
_SIGSET_NWORDS
];

30 } 
	t__sig£t_t
;

41 #i‡!
deföed
 
_SIGSET_H_‚s
 && deföed 
_SIGNAL_H


42 
	#_SIGSET_H_‚s
 1

	)

44 #i‚de‡
_EXTERN_INLINE


45 
	#_EXTERN_INLINE
 
__exã∫_ölöe


	)

49 
	#__sigmask
(
sig
) \

50 (((Ë1Ë<< (((
sig
Ë- 1Ë% (8 *  ())))

	)

53 
	#__sigw‹d
(
sig
Ë(((sigË- 1Ë/ (8 *  ()))

	)

55 #i‡
deföed
 
__GNUC__
 && __GNUC__ >= 2

56 
	#__sigem±y£t
(
£t
) \

57 (
	`__exãnsi⁄__
 ({ 
__˙t
 = 
_SIGSET_NWORDS
; \

58 
sig£t_t
 *
__£t
 = (
£t
); \

59 --
__˙t
 >0Ë
__£t
->
__vÆ
[__cnt] = 0; \

60 0; }))

	)

61 
	#__sigfûl£t
(
£t
) \

62 (
	`__exãnsi⁄__
 ({ 
__˙t
 = 
_SIGSET_NWORDS
; \

63 
sig£t_t
 *
__£t
 = (
£t
); \

64 --
__˙t
 >0Ë
__£t
->
__vÆ
[__cnt] = ~0UL; \

65 0; }))

	)

67 #ifde‡
__USE_GNU


71 
	#__sigi£m±y£t
(
£t
) \

72 (
	`__exãnsi⁄__
 ({ 
__˙t
 = 
_SIGSET_NWORDS
; \

73 c⁄° 
sig£t_t
 *
__£t
 = (
£t
); \

74 
__ªt
 = 
__£t
->
__vÆ
[--
__˙t
]; \

75 !
__ªt
 && --
__˙t
 >= 0) \

76 
__ªt
 = 
__£t
->
__vÆ
[
__˙t
]; \

77 
__ªt
 =0; }))

	)

78 
	#__sig™d£t
(
de°
, 
À·
, 
right
) \

79 (
	`__exãnsi⁄__
 ({ 
__˙t
 = 
_SIGSET_NWORDS
; \

80 
sig£t_t
 *
__de°
 = (
de°
); \

81 c⁄° 
sig£t_t
 *
__À·
 = (
À·
); \

82 c⁄° 
sig£t_t
 *
__right
 = (
right
); \

83 --
__˙t
 >= 0) \

84 
__de°
->
__vÆ
[
__˙t
] = (
__À·
->__val[__cnt] \

85 & 
__right
->
__vÆ
[
__˙t
]); \

86 0; }))

	)

87 
	#__sig‹£t
(
de°
, 
À·
, 
right
) \

88 (
	`__exãnsi⁄__
 ({ 
__˙t
 = 
_SIGSET_NWORDS
; \

89 
sig£t_t
 *
__de°
 = (
de°
); \

90 c⁄° 
sig£t_t
 *
__À·
 = (
À·
); \

91 c⁄° 
sig£t_t
 *
__right
 = (
right
); \

92 --
__˙t
 >= 0) \

93 
__de°
->
__vÆ
[
__˙t
] = (
__À·
->__val[__cnt] \

94 | 
__right
->
__vÆ
[
__˙t
]); \

95 0; }))

	)

102 
__sigismembî
 (c⁄° 
__sig£t_t
 *, );

103 
__sigadd£t
 (
__sig£t_t
 *, );

104 
__sigdñ£t
 (
__sig£t_t
 *, );

106 #ifde‡
__USE_EXTERN_INLINES


107 
	#__SIGSETFN
(
NAME
, 
BODY
, 
CONST
) \

108 
_EXTERN_INLINE
 \

109 
	`NAME
 (
CONST
 
__sig£t_t
 *
__£t
, 
__sig
) \

111 
__mask
 = 
	`__sigmask
 (
__sig
); \

112 
__w‹d
 = 
	`__sigw‹d
 (
__sig
); \

113  
BODY
; \

114 }

	)

116 
__SIGSETFN
 (
__sigismembî
, (
__£t
->
__vÆ
[
__w‹d
] & 
__mask
) ? 1 : 0, const)

117 
__SIGSETFN
 (
__sigadd£t
, ((
__£t
->
__vÆ
[
__w‹d
] |
__mask
), 0), )

118 
__SIGSETFN
 (
__sigdñ£t
, ((
__£t
->
__vÆ
[
__w‹d
] &~
__mask
), 0), )

120 #unde‡
__SIGSETFN


	@/usr/include/bits/time.h

23 #i‡
deföed
 
__√ed_timevÆ
 || deföed 
__USE_GNU


24 #i‚de‡
_STRUCT_TIMEVAL


25 
	#_STRUCT_TIMEVAL
 1

	)

26 
	~<bôs/ty≥s.h
>

30 
	stimevÆ


32 
__time_t
 
	mtv_£c
;

33 
__su£c⁄ds_t
 
	mtv_u£c
;

38 #i‚de‡
__√ed_timevÆ


39 #i‚de‡
_BITS_TIME_H


40 
	#_BITS_TIME_H
 1

	)

48 
	#CLOCKS_PER_SEC
 1000000l

	)

50 #i‡(!
deföed
 
__STRICT_ANSI__
 || deföed 
__USE_POSIX
) \

51 && !
deföed
 
	g__USE_XOPEN2K


54 
	~<bôs/ty≥s.h
>

55 
__sysc⁄f
 ();

56 
	#CLK_TCK
 ((
__˛ock_t
Ë
	`__sysc⁄f
 (2)Ë

	)

59 #ifde‡
__USE_POSIX199309


61 
	#CLOCK_REALTIME
 0

	)

63 
	#CLOCK_MONOTONIC
 1

	)

65 
	#CLOCK_PROCESS_CPUTIME_ID
 2

	)

67 
	#CLOCK_THREAD_CPUTIME_ID
 3

	)

69 
	#CLOCK_MONOTONIC_RAW
 4

	)

71 
	#CLOCK_REALTIME_COARSE
 5

	)

73 
	#CLOCK_MONOTONIC_COARSE
 6

	)

75 
	#CLOCK_BOOTTIME
 7

	)

77 
	#CLOCK_REALTIME_ALARM
 8

	)

79 
	#CLOCK_BOOTTIME_ALARM
 9

	)

82 
	#TIMER_ABSTIME
 1

	)

85 #ifde‡
__USE_GNU


86 
	~<bôs/timex.h
>

88 
__BEGIN_DECLS


91 
	$˛ock_adjtime
 (
__˛ockid_t
 
__˛ock_id
, 
timex
 *
__utx
Ë
__THROW
;

93 
__END_DECLS


99 #unde‡
__√ed_timevÆ


	@/usr/include/bits/timex.h

18 #i‚def 
_BITS_TIMEX_H


19 
	#_BITS_TIMEX_H
 1

	)

21 
	~<bôs/ty≥s.h
>

25 
	stimex


27 
	mmodes
;

28 
__sysˇŒ_¶⁄g_t
 
	moff£t
;

29 
__sysˇŒ_¶⁄g_t
 
	m‰eq
;

30 
__sysˇŒ_¶⁄g_t
 
	mmaxîr‹
;

31 
__sysˇŒ_¶⁄g_t
 
	me°îr‹
;

32 
	m°©us
;

33 
__sysˇŒ_¶⁄g_t
 
	mc⁄°™t
;

34 
__sysˇŒ_¶⁄g_t
 
	m¥ecisi⁄
;

35 
__sysˇŒ_¶⁄g_t
 
	mtﬁî™˚
;

36 
timevÆ
 
	mtime
;

37 
__sysˇŒ_¶⁄g_t
 
	mtick
;

38 
__sysˇŒ_¶⁄g_t
 
	mµs‰eq
;

39 
__sysˇŒ_¶⁄g_t
 
	mjôãr
;

40 
	mshi·
;

41 
__sysˇŒ_¶⁄g_t
 
	m°abû
;

42 
__sysˇŒ_¶⁄g_t
 
	mjô˙t
;

43 
__sysˇŒ_¶⁄g_t
 
	mˇl˙t
;

44 
__sysˇŒ_¶⁄g_t
 
	mîr˙t
;

45 
__sysˇŒ_¶⁄g_t
 
	m°b˙t
;

47 
	mèi
;

56 
	#ADJ_OFFSET
 0x0001

	)

57 
	#ADJ_FREQUENCY
 0x0002

	)

58 
	#ADJ_MAXERROR
 0x0004

	)

59 
	#ADJ_ESTERROR
 0x0008

	)

60 
	#ADJ_STATUS
 0x0010

	)

61 
	#ADJ_TIMECONST
 0x0020

	)

62 
	#ADJ_TAI
 0x0080

	)

63 
	#ADJ_MICRO
 0x1000

	)

64 
	#ADJ_NANO
 0x2000

	)

65 
	#ADJ_TICK
 0x4000

	)

66 
	#ADJ_OFFSET_SINGLESHOT
 0x8001

	)

67 
	#ADJ_OFFSET_SS_READ
 0xa001

	)

70 
	#MOD_OFFSET
 
ADJ_OFFSET


	)

71 
	#MOD_FREQUENCY
 
ADJ_FREQUENCY


	)

72 
	#MOD_MAXERROR
 
ADJ_MAXERROR


	)

73 
	#MOD_ESTERROR
 
ADJ_ESTERROR


	)

74 
	#MOD_STATUS
 
ADJ_STATUS


	)

75 
	#MOD_TIMECONST
 
ADJ_TIMECONST


	)

76 
	#MOD_CLKB
 
ADJ_TICK


	)

77 
	#MOD_CLKA
 
ADJ_OFFSET_SINGLESHOT


	)

78 
	#MOD_TAI
 
ADJ_TAI


	)

79 
	#MOD_MICRO
 
ADJ_MICRO


	)

80 
	#MOD_NANO
 
ADJ_NANO


	)

84 
	#STA_PLL
 0x0001

	)

85 
	#STA_PPSFREQ
 0x0002

	)

86 
	#STA_PPSTIME
 0x0004

	)

87 
	#STA_FLL
 0x0008

	)

89 
	#STA_INS
 0x0010

	)

90 
	#STA_DEL
 0x0020

	)

91 
	#STA_UNSYNC
 0x0040

	)

92 
	#STA_FREQHOLD
 0x0080

	)

94 
	#STA_PPSSIGNAL
 0x0100

	)

95 
	#STA_PPSJITTER
 0x0200

	)

96 
	#STA_PPSWANDER
 0x0400

	)

97 
	#STA_PPSERROR
 0x0800

	)

99 
	#STA_CLOCKERR
 0x1000

	)

100 
	#STA_NANO
 0x2000

	)

101 
	#STA_MODE
 0x4000

	)

102 
	#STA_CLK
 0x8000

	)

105 
	#STA_RONLY
 (
STA_PPSSIGNAL
 | 
STA_PPSJITTER
 | 
STA_PPSWANDER
 | \

106 
STA_PPSERROR
 | 
STA_CLOCKERR
 | 
STA_NANO
 | 
STA_MODE
 | 
STA_CLK
)

	)

	@
1
.
1
/usr/include
277
10667
Components/hal/common/hal_assert.c
Components/hal/common/hal_drivers.c
Components/hal/include/hal_adc.h
Components/hal/include/hal_assert.h
Components/hal/include/hal_board.h
Components/hal/include/hal_ccm.h
Components/hal/include/hal_defs.h
Components/hal/include/hal_drivers.h
Components/hal/include/hal_flash.h
Components/hal/include/hal_key.h
Components/hal/include/hal_lcd.h
Components/hal/include/hal_led.h
Components/hal/include/hal_sleep.h
Components/hal/include/hal_timer.h
Components/hal/include/hal_uart.h
Components/hal/target/CC2530EB/Font.c
Components/hal/target/CC2530EB/Font.h
Components/hal/target/CC2530EB/LCD128_64.h
Components/hal/target/CC2530EB/_hal_uart_dma.c
Components/hal/target/CC2530EB/_hal_uart_isr.c
Components/hal/target/CC2530EB/hal_adc.c
Components/hal/target/CC2530EB/hal_aes.h
Components/hal/target/CC2530EB/hal_board_cfg.h
Components/hal/target/CC2530EB/hal_dma.c
Components/hal/target/CC2530EB/hal_dma.h
Components/hal/target/CC2530EB/hal_flash.c
Components/hal/target/CC2530EB/hal_key.c
Components/hal/target/CC2530EB/hal_lcd--0.c
Components/hal/target/CC2530EB/hal_lcd.c
Components/hal/target/CC2530EB/hal_led.c
Components/hal/target/CC2530EB/hal_mac_cfg.h
Components/hal/target/CC2530EB/hal_mcu.h
Components/hal/target/CC2530EB/hal_oad.c
Components/hal/target/CC2530EB/hal_oad.h
Components/hal/target/CC2530EB/hal_sleep.c
Components/hal/target/CC2530EB/hal_startup.c
Components/hal/target/CC2530EB/hal_timer.c
Components/hal/target/CC2530EB/hal_types.h
Components/hal/target/CC2530EB/hal_uart.c
Components/hal/target/CC2530EB/lcd128_64.c
Components/hal/target/CC2530EB/Â§ç‰ª∂ (2) hal_lcd.c
Components/mac/high_level/mac_cfg.c
Components/mac/high_level/mac_high_level.h
Components/mac/high_level/mac_main.h
Components/mac/high_level/mac_pib.h
Components/mac/high_level/mac_spec.h
Components/mac/include/mac_api.h
Components/mac/low_level/srf04/mac_assert.h
Components/mac/low_level/srf04/mac_autopend.c
Components/mac/low_level/srf04/mac_autopend.h
Components/mac/low_level/srf04/mac_backoff_timer.c
Components/mac/low_level/srf04/mac_backoff_timer.h
Components/mac/low_level/srf04/mac_low_level.c
Components/mac/low_level/srf04/mac_low_level.h
Components/mac/low_level/srf04/mac_radio.c
Components/mac/low_level/srf04/mac_radio.h
Components/mac/low_level/srf04/mac_rx.c
Components/mac/low_level/srf04/mac_rx.h
Components/mac/low_level/srf04/mac_rx_onoff.c
Components/mac/low_level/srf04/mac_rx_onoff.h
Components/mac/low_level/srf04/mac_sleep.c
Components/mac/low_level/srf04/mac_sleep.h
Components/mac/low_level/srf04/mac_tx.c
Components/mac/low_level/srf04/mac_tx.h
Components/mac/low_level/srf04/single_chip/mac_csp_tx.c
Components/mac/low_level/srf04/single_chip/mac_csp_tx.h
Components/mac/low_level/srf04/single_chip/mac_mcu.c
Components/mac/low_level/srf04/single_chip/mac_mcu.h
Components/mac/low_level/srf04/single_chip/mac_mem.c
Components/mac/low_level/srf04/single_chip/mac_mem.h
Components/mac/low_level/srf04/single_chip/mac_radio_defs.c
Components/mac/low_level/srf04/single_chip/mac_radio_defs.h
Components/mt/DebugTrace.c
Components/mt/DebugTrace.h
Components/mt/MT.c
Components/mt/MT.h
Components/mt/MT_AF.c
Components/mt/MT_AF.h
Components/mt/MT_APP.c
Components/mt/MT_APP.h
Components/mt/MT_DEBUG.c
Components/mt/MT_DEBUG.h
Components/mt/MT_MAC.c
Components/mt/MT_MAC.h
Components/mt/MT_NWK.c
Components/mt/MT_NWK.h
Components/mt/MT_RPC.h
Components/mt/MT_SAPI.c
Components/mt/MT_SAPI.h
Components/mt/MT_SYS.c
Components/mt/MT_SYS.h
Components/mt/MT_TASK.c
Components/mt/MT_TASK.h
Components/mt/MT_UART.c
Components/mt/MT_UART.h
Components/mt/MT_UTIL.c
Components/mt/MT_UTIL.h
Components/mt/MT_VERSION.c
Components/mt/MT_VERSION.h
Components/mt/MT_ZDO.c
Components/mt/MT_ZDO.h
Components/osal/common/OSAL.c
Components/osal/common/OSAL_Clock.c
Components/osal/common/OSAL_Memory.c
Components/osal/common/OSAL_PwrMgr.c
Components/osal/common/OSAL_Timers.c
Components/osal/include/OSAL.h
Components/osal/include/OSAL_Clock.h
Components/osal/include/OSAL_Memory.h
Components/osal/include/OSAL_Nv.h
Components/osal/include/OSAL_PwrMgr.h
Components/osal/include/OSAL_Tasks.h
Components/osal/include/OSAL_Timers.h
Components/osal/include/ZComDef.h
Components/osal/include/comdef.h
Components/osal/mcu/cc2530/OSAL_Nv.c
Components/services/saddr/saddr.c
Components/services/saddr/saddr.h
Components/services/sdata/sdata.h
Components/stack/af/AF.c
Components/stack/af/AF.h
Components/stack/nwk/APS.h
Components/stack/nwk/APSMEDE.h
Components/stack/nwk/AddrMgr.h
Components/stack/nwk/AssocList.h
Components/stack/nwk/BindingTable.h
Components/stack/nwk/NLMEDE.h
Components/stack/nwk/aps_frag.h
Components/stack/nwk/aps_groups.h
Components/stack/nwk/aps_util.h
Components/stack/nwk/nwk.h
Components/stack/nwk/nwk_bufs.h
Components/stack/nwk/nwk_globals.c
Components/stack/nwk/nwk_globals.h
Components/stack/nwk/nwk_util.h
Components/stack/nwk/reflecttrack.h
Components/stack/nwk/rtg.h
Components/stack/nwk/stub_aps.c
Components/stack/nwk/stub_aps.h
Components/stack/sapi/sapi.c
Components/stack/sapi/sapi.h
Components/stack/sec/eccapi.h
Components/stack/sec/ssp.h
Components/stack/sec/ssp_hash.h
Components/stack/sys/ZGlobals.c
Components/stack/sys/ZGlobals.h
Components/stack/zcl/zcl.c
Components/stack/zcl/zcl.h
Components/stack/zcl/zcl_closures.c
Components/stack/zcl/zcl_closures.h
Components/stack/zcl/zcl_general.c
Components/stack/zcl/zcl_general.h
Components/stack/zcl/zcl_hvac.c
Components/stack/zcl/zcl_hvac.h
Components/stack/zcl/zcl_key_establish.c
Components/stack/zcl/zcl_key_establish.h
Components/stack/zcl/zcl_lighting.c
Components/stack/zcl/zcl_lighting.h
Components/stack/zcl/zcl_ms.c
Components/stack/zcl/zcl_ms.h
Components/stack/zcl/zcl_se.c
Components/stack/zcl/zcl_se.h
Components/stack/zcl/zcl_ss.c
Components/stack/zcl/zcl_ss.h
Components/stack/zdo/ZDApp.c
Components/stack/zdo/ZDApp.h
Components/stack/zdo/ZDConfig.c
Components/stack/zdo/ZDConfig.h
Components/stack/zdo/ZDNwkMgr.c
Components/stack/zdo/ZDNwkMgr.h
Components/stack/zdo/ZDObject.c
Components/stack/zdo/ZDObject.h
Components/stack/zdo/ZDProfile.c
Components/stack/zdo/ZDProfile.h
Components/stack/zdo/ZDSecMgr.c
Components/stack/zdo/ZDSecMgr.h
Components/zmac/ZMAC.h
Components/zmac/f8w/zmac.c
Components/zmac/f8w/zmac_cb.c
Components/zmac/f8w/zmac_internal.h
Projects/zstack/HomeAutomation/SampleLight/Source/OSAL_SampleLight.c
Projects/zstack/HomeAutomation/SampleLight/Source/zcl_samplelight.c
Projects/zstack/HomeAutomation/SampleLight/Source/zcl_samplelight.h
Projects/zstack/HomeAutomation/SampleLight/Source/zcl_samplelight_data.c
Projects/zstack/HomeAutomation/SampleSwitch/Source/OSAL_SampleSw.c
Projects/zstack/HomeAutomation/SampleSwitch/Source/zcl_samplesw.c
Projects/zstack/HomeAutomation/SampleSwitch/Source/zcl_samplesw.h
Projects/zstack/HomeAutomation/SampleSwitch/Source/zcl_samplesw_data.c
Projects/zstack/HomeAutomation/Source/zcl_ha.c
Projects/zstack/HomeAutomation/Source/zcl_ha.h
Projects/zstack/SE/SampleApp/Source/ESP/OSAL_ESP.c
Projects/zstack/SE/SampleApp/Source/ESP/esp.c
Projects/zstack/SE/SampleApp/Source/ESP/esp.h
Projects/zstack/SE/SampleApp/Source/ESP/esp_data.c
Projects/zstack/SE/SampleApp/Source/IPD/OSAL_ipd.c
Projects/zstack/SE/SampleApp/Source/IPD/ipd.c
Projects/zstack/SE/SampleApp/Source/IPD/ipd.h
Projects/zstack/SE/SampleApp/Source/IPD/ipd_data.c
Projects/zstack/SE/SampleApp/Source/LoadControl/OSAL_LoadControl.c
Projects/zstack/SE/SampleApp/Source/LoadControl/loadcontrol.c
Projects/zstack/SE/SampleApp/Source/LoadControl/loadcontrol.h
Projects/zstack/SE/SampleApp/Source/LoadControl/loadcontrol_data.c
Projects/zstack/SE/SampleApp/Source/PCT/OSAL_pct.c
Projects/zstack/SE/SampleApp/Source/PCT/pct.c
Projects/zstack/SE/SampleApp/Source/PCT/pct.h
Projects/zstack/SE/SampleApp/Source/PCT/pct_data.c
Projects/zstack/SE/SampleApp/Source/RangeExt/OSAL_RangeExt.c
Projects/zstack/SE/SampleApp/Source/RangeExt/rangeext.c
Projects/zstack/SE/SampleApp/Source/RangeExt/rangeext.h
Projects/zstack/SE/SampleApp/Source/RangeExt/rangeext_data.c
Projects/zstack/SE/SampleApp/Source/SimpleMeter/OSAL_SimpleMeter.c
Projects/zstack/SE/SampleApp/Source/SimpleMeter/simplemeter.c
Projects/zstack/SE/SampleApp/Source/SimpleMeter/simplemeter.h
Projects/zstack/SE/SampleApp/Source/SimpleMeter/simplemeter_data.c
Projects/zstack/SE/Source/se.c
Projects/zstack/SE/Source/se.h
Projects/zstack/Samples/BeginApp/Source/BeginApp.c
Projects/zstack/Samples/BeginApp/Source/BeginApp.h
Projects/zstack/Samples/BeginApp/Source/OSAL_BeginApp.c
Projects/zstack/Samples/GenericApp/Source/GenericApp.c
Projects/zstack/Samples/GenericApp/Source/GenericApp.h
Projects/zstack/Samples/GenericApp/Source/OSAL_GenericApp.c
Projects/zstack/Samples/SampleApp/CC2530DB/Source/SampleAppHw.c
Projects/zstack/Samples/SampleApp/Source/OSAL_SampleApp.c
Projects/zstack/Samples/SampleApp/Source/SampleApp.c
Projects/zstack/Samples/SampleApp/Source/SampleApp.h
Projects/zstack/Samples/SampleApp/Source/SampleAppHw.h
Projects/zstack/Samples/SimpleApp/Source/SimpleApp.h
Projects/zstack/Samples/SimpleApp/Source/SimpleCollector.c
Projects/zstack/Samples/SimpleApp/Source/SimpleController.c
Projects/zstack/Samples/SimpleApp/Source/SimpleSensor.c
Projects/zstack/Samples/SimpleApp/Source/SimpleSwitch.c
Projects/zstack/Utilities/SerialApp/Source/OSAL_SerialApp.c
Projects/zstack/Utilities/SerialApp/Source/SerialApp.c
Projects/zstack/Utilities/SerialApp/Source/SerialApp.h
Projects/zstack/Utilities/Transmit/Source/OSAL_TransmitApp.c
Projects/zstack/Utilities/Transmit/Source/TransmitApp.c
Projects/zstack/Utilities/Transmit/Source/TransmitApp.h
Projects/zstack/ZMain/TI2530DB/OnBoard.c
Projects/zstack/ZMain/TI2530DB/OnBoard.h
Projects/zstack/ZMain/TI2530DB/ZMain.c
/usr/include/ioCC2530.h
/usr/include/string.h
/usr/include/bits/string.h
/usr/include/bits/string2.h
/usr/include/bits/string3.h
/usr/include/features.h
/usr/include/xlocale.h
/usr/include/bits/types.h
/usr/include/endian.h
/usr/include/gnu/stubs.h
/usr/include/stdc-predef.h
/usr/include/stdlib.h
/usr/include/sys/cdefs.h
/usr/include/alloca.h
/usr/include/bits/byteswap.h
/usr/include/bits/endian.h
/usr/include/bits/stdlib-bsearch.h
/usr/include/bits/stdlib-float.h
/usr/include/bits/stdlib-ldbl.h
/usr/include/bits/stdlib.h
/usr/include/bits/typesizes.h
/usr/include/bits/waitflags.h
/usr/include/bits/waitstatus.h
/usr/include/bits/wordsize.h
/usr/include/gnu/stubs-64.h
/usr/include/sys/types.h
/usr/include/bits/byteswap-16.h
/usr/include/bits/pthreadtypes.h
/usr/include/sys/select.h
/usr/include/sys/sysmacros.h
/usr/include/time.h
/usr/include/bits/select.h
/usr/include/bits/select2.h
/usr/include/bits/sigset.h
/usr/include/bits/time.h
/usr/include/bits/timex.h
